
VCU_2025.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007afc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  08007c8c  08007c8c  00008c8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d90  08007d90  00009060  2**0
                  CONTENTS
  4 .ARM          00000008  08007d90  08007d90  00008d90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007d98  08007d98  00009060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d98  08007d98  00008d98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007d9c  08007d9c  00008d9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08007da0  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002f60  20000060  08007e00  00009060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002fc0  08007e00  00009fc0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019f89  00000000  00000000  00009090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003cb6  00000000  00000000  00023019  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001608  00000000  00000000  00026cd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001116  00000000  00000000  000282d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f5cb  00000000  00000000  000293ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bafd  00000000  00000000  000489b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b8607  00000000  00000000  000644b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011cabd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000060f4  00000000  00000000  0011cb00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  00122bf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007c74 	.word	0x08007c74

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08007c74 	.word	0x08007c74

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <makeFrame>:
char msg[64];
uint32_t val;
struct CANframe temp;
struct CANframe receivedFrame;

struct CANframe makeFrame(CAN_RxHeaderTypeDef header, uint8_t data[8]) {
 8000280:	b084      	sub	sp, #16
 8000282:	b490      	push	{r4, r7}
 8000284:	b086      	sub	sp, #24
 8000286:	af00      	add	r7, sp, #0
 8000288:	6078      	str	r0, [r7, #4]
 800028a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800028e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	struct CANframe temp;

	temp.ID = header.StdId;
 8000292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000294:	60fb      	str	r3, [r7, #12]
	temp.rxData[0] = data[0];
 8000296:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000298:	781b      	ldrb	r3, [r3, #0]
 800029a:	743b      	strb	r3, [r7, #16]
	temp.rxData[1] = data[1];
 800029c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800029e:	785b      	ldrb	r3, [r3, #1]
 80002a0:	747b      	strb	r3, [r7, #17]
	temp.rxData[2] = data[2];
 80002a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80002a4:	789b      	ldrb	r3, [r3, #2]
 80002a6:	74bb      	strb	r3, [r7, #18]
	temp.rxData[3] = data[3];
 80002a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80002aa:	78db      	ldrb	r3, [r3, #3]
 80002ac:	74fb      	strb	r3, [r7, #19]
	temp.rxData[4] = data[4];
 80002ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80002b0:	791b      	ldrb	r3, [r3, #4]
 80002b2:	753b      	strb	r3, [r7, #20]
	temp.rxData[5] = data[5];
 80002b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80002b6:	795b      	ldrb	r3, [r3, #5]
 80002b8:	757b      	strb	r3, [r7, #21]
	temp.rxData[6] = data[6];
 80002ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80002bc:	799b      	ldrb	r3, [r3, #6]
 80002be:	75bb      	strb	r3, [r7, #22]
	temp.rxData[7] = data[7];
 80002c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80002c2:	79db      	ldrb	r3, [r3, #7]
 80002c4:	75fb      	strb	r3, [r7, #23]

	return temp;
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	461c      	mov	r4, r3
 80002ca:	f107 030c 	add.w	r3, r7, #12
 80002ce:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80002d2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80002d6:	6878      	ldr	r0, [r7, #4]
 80002d8:	3718      	adds	r7, #24
 80002da:	46bd      	mov	sp, r7
 80002dc:	bc90      	pop	{r4, r7}
 80002de:	b004      	add	sp, #16
 80002e0:	4770      	bx	lr
	...

080002e4 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 80002e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002e6:	b08f      	sub	sp, #60	@ 0x3c
 80002e8:	af06      	add	r7, sp, #24
 80002ea:	61f8      	str	r0, [r7, #28]

	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK) {
 80002ec:	4b18      	ldr	r3, [pc, #96]	@ (8000350 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 80002ee:	4a19      	ldr	r2, [pc, #100]	@ (8000354 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 80002f0:	2100      	movs	r1, #0
 80002f2:	69f8      	ldr	r0, [r7, #28]
 80002f4:	f001 ff77 	bl	80021e6 <HAL_CAN_GetRxMessage>
 80002f8:	4603      	mov	r3, r0
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d001      	beq.n	8000302 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
		Error_Handler();
 80002fe:	f000 fbf9 	bl	8000af4 <Error_Handler>
	}
//	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
	temp = makeFrame(RxHeader, RxData);
 8000302:	4b15      	ldr	r3, [pc, #84]	@ (8000358 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 8000304:	607b      	str	r3, [r7, #4]
 8000306:	f107 0608 	add.w	r6, r7, #8
 800030a:	4c12      	ldr	r4, [pc, #72]	@ (8000354 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 800030c:	4b10      	ldr	r3, [pc, #64]	@ (8000350 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 800030e:	9304      	str	r3, [sp, #16]
 8000310:	466d      	mov	r5, sp
 8000312:	f104 030c 	add.w	r3, r4, #12
 8000316:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000318:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800031c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8000320:	4630      	mov	r0, r6
 8000322:	f7ff ffad 	bl	8000280 <makeFrame>
 8000326:	687c      	ldr	r4, [r7, #4]
 8000328:	f107 0308 	add.w	r3, r7, #8
 800032c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000330:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	xQueueSendToBackFromISR(CANq, &temp, 1);
 8000334:	4b09      	ldr	r3, [pc, #36]	@ (800035c <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 8000336:	6818      	ldr	r0, [r3, #0]
 8000338:	2300      	movs	r3, #0
 800033a:	2201      	movs	r2, #1
 800033c:	4906      	ldr	r1, [pc, #24]	@ (8000358 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 800033e:	f005 fba5 	bl	8005a8c <xQueueGenericSendFromISR>

	datacheck = 1; // signal to your RTOS task
 8000342:	4b07      	ldr	r3, [pc, #28]	@ (8000360 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 8000344:	2201      	movs	r2, #1
 8000346:	701a      	strb	r2, [r3, #0]
}
 8000348:	bf00      	nop
 800034a:	3724      	adds	r7, #36	@ 0x24
 800034c:	46bd      	mov	sp, r7
 800034e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000350:	20000098 	.word	0x20000098
 8000354:	2000007c 	.word	0x2000007c
 8000358:	200000a0 	.word	0x200000a0
 800035c:	20000490 	.word	0x20000490
 8000360:	20000494 	.word	0x20000494

08000364 <StartCanRxTask>:

void StartCanRxTask(void const *argument) {
 8000364:	b580      	push	{r7, lr}
 8000366:	b084      	sub	sp, #16
 8000368:	af00      	add	r7, sp, #0
 800036a:	6078      	str	r0, [r7, #4]
	int count;
	CANq = xQueueCreate(100, sizeof(struct CANframe));
 800036c:	2200      	movs	r2, #0
 800036e:	210c      	movs	r1, #12
 8000370:	2064      	movs	r0, #100	@ 0x64
 8000372:	f005 fb2d 	bl	80059d0 <xQueueGenericCreate>
 8000376:	4603      	mov	r3, r0
 8000378:	4a0e      	ldr	r2, [pc, #56]	@ (80003b4 <StartCanRxTask+0x50>)
 800037a:	6013      	str	r3, [r2, #0]
	vQueueAddToRegistry(CANq, "CAN queue");
 800037c:	4b0d      	ldr	r3, [pc, #52]	@ (80003b4 <StartCanRxTask+0x50>)
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	490d      	ldr	r1, [pc, #52]	@ (80003b8 <StartCanRxTask+0x54>)
 8000382:	4618      	mov	r0, r3
 8000384:	f005 fd4e 	bl	8005e24 <vQueueAddToRegistry>

	while (1) {

		if (xQueueReceiveFromISR(CANq, &receivedFrame, pdMS_TO_TICKS(100)) == pdPASS) {
 8000388:	4b0a      	ldr	r3, [pc, #40]	@ (80003b4 <StartCanRxTask+0x50>)
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	2264      	movs	r2, #100	@ 0x64
 800038e:	490b      	ldr	r1, [pc, #44]	@ (80003bc <StartCanRxTask+0x58>)
 8000390:	4618      	mov	r0, r3
 8000392:	f005 fc16 	bl	8005bc2 <xQueueReceiveFromISR>
 8000396:	4603      	mov	r3, r0
 8000398:	2b01      	cmp	r3, #1
 800039a:	d103      	bne.n	80003a4 <StartCanRxTask+0x40>

//			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
			osDelay(1000);
 800039c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80003a0:	f005 f9e4 	bl	800576c <osDelay>
		}

		count = uxQueueMessagesWaiting(CANq);
 80003a4:	4b03      	ldr	r3, [pc, #12]	@ (80003b4 <StartCanRxTask+0x50>)
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	4618      	mov	r0, r3
 80003aa:	f005 fc8c 	bl	8005cc6 <uxQueueMessagesWaiting>
 80003ae:	4603      	mov	r3, r0
 80003b0:	60fb      	str	r3, [r7, #12]
		if (xQueueReceiveFromISR(CANq, &receivedFrame, pdMS_TO_TICKS(100)) == pdPASS) {
 80003b2:	e7e9      	b.n	8000388 <StartCanRxTask+0x24>
 80003b4:	20000490 	.word	0x20000490
 80003b8:	08007c8c 	.word	0x08007c8c
 80003bc:	200000ac 	.word	0x200000ac

080003c0 <StartCanTxTask>:
	int i;
	float f;
	uint8_t byte[8];
};

void StartCanTxTask(void const *argument) {
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b09c      	sub	sp, #112	@ 0x70
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	6078      	str	r0, [r7, #4]
	CAN_TxHeaderTypeDef txHeader;
	uint8_t txData[8];
	uint32_t txMailbox;
	union Data current; //how best to control motors? current, velocity, mix of both?
	union Data velocity;
	float sum = 0;
 80003c8:	f04f 0300 	mov.w	r3, #0
 80003cc:	66fb      	str	r3, [r7, #108]	@ 0x6c
	float avg = 0;
 80003ce:	f04f 0300 	mov.w	r3, #0
 80003d2:	667b      	str	r3, [r7, #100]	@ 0x64
	char msg[32]; // plenty of space for float + newline
	// Set up header
	txHeader.IDE = CAN_ID_STD;
 80003d4:	2300      	movs	r3, #0
 80003d6:	653b      	str	r3, [r7, #80]	@ 0x50
	txHeader.StdId = 0x401;
 80003d8:	f240 4301 	movw	r3, #1025	@ 0x401
 80003dc:	64bb      	str	r3, [r7, #72]	@ 0x48
	txHeader.RTR = CAN_RTR_DATA;
 80003de:	2300      	movs	r3, #0
 80003e0:	657b      	str	r3, [r7, #84]	@ 0x54
	txHeader.DLC = 8;
 80003e2:	2308      	movs	r3, #8
 80003e4:	65bb      	str	r3, [r7, #88]	@ 0x58
	velocity.i = 500;
 80003e6:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80003ea:	62fb      	str	r3, [r7, #44]	@ 0x2c

	while (1) {
		sum = 0;
 80003ec:	f04f 0300 	mov.w	r3, #0
 80003f0:	66fb      	str	r3, [r7, #108]	@ 0x6c

		for (int i = 0; i < ADC_BUF_LEN; i++) {
 80003f2:	2300      	movs	r3, #0
 80003f4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80003f6:	e010      	b.n	800041a <StartCanTxTask+0x5a>
			sum += adc_buf[i];
 80003f8:	4a3c      	ldr	r2, [pc, #240]	@ (80004ec <StartCanTxTask+0x12c>)
 80003fa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80003fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000400:	ee07 3a90 	vmov	s15, r3
 8000404:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000408:	ed97 7a1b 	vldr	s14, [r7, #108]	@ 0x6c
 800040c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000410:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
		for (int i = 0; i < ADC_BUF_LEN; i++) {
 8000414:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000416:	3301      	adds	r3, #1
 8000418:	66bb      	str	r3, [r7, #104]	@ 0x68
 800041a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800041c:	2b17      	cmp	r3, #23
 800041e:	ddeb      	ble.n	80003f8 <StartCanTxTask+0x38>
		}
		avg = sum / ADC_BUF_LEN;
 8000420:	ed97 7a1b 	vldr	s14, [r7, #108]	@ 0x6c
 8000424:	eef3 6a08 	vmov.f32	s13, #56	@ 0x41c00000  24.0
 8000428:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800042c:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
//		snprintf(msg, sizeof(msg), "Num: %d\r\n", (uint8_t)adc_buf[0]);
//
//		HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);


		current.f = avg / 25600.0f;
 8000430:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 8000434:	eddf 6a2e 	vldr	s13, [pc, #184]	@ 80004f0 <StartCanTxTask+0x130>
 8000438:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800043c:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

		// 2. Convert to integer representation (0-100)
		uint8_t display_value = (uint8_t)(current.f * 100.0f);
 8000440:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8000444:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 80004f4 <StartCanTxTask+0x134>
 8000448:	ee67 7a87 	vmul.f32	s15, s15, s14
 800044c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000450:	edc7 7a00 	vstr	s15, [r7]
 8000454:	783b      	ldrb	r3, [r7, #0]
 8000456:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63

		// 3. Print with implied decimal
		snprintf(msg, sizeof(msg), "Value: 0.%02d\r\n", display_value);  // Prints 0.00-0.10
 800045a:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 800045e:	f107 000c 	add.w	r0, r7, #12
 8000462:	4a25      	ldr	r2, [pc, #148]	@ (80004f8 <StartCanTxTask+0x138>)
 8000464:	2120      	movs	r1, #32
 8000466:	f006 ff51 	bl	800730c <sniprintf>

		HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800046a:	f107 030c 	add.w	r3, r7, #12
 800046e:	4618      	mov	r0, r3
 8000470:	f7ff feae 	bl	80001d0 <strlen>
 8000474:	4603      	mov	r3, r0
 8000476:	b29a      	uxth	r2, r3
 8000478:	f107 010c 	add.w	r1, r7, #12
 800047c:	f04f 33ff 	mov.w	r3, #4294967295
 8000480:	481e      	ldr	r0, [pc, #120]	@ (80004fc <StartCanTxTask+0x13c>)
 8000482:	f004 fd2d 	bl	8004ee0 <HAL_UART_Transmit>
//		current.f = 0.00000006*(pow(avg*0.1, 2));
//		txData[0] = velocity.byte[0];
//		txData[1] = velocity.byte[1];
//		txData[2] = velocity.byte[2];
//		txData[3] = velocity.byte[3];
		txData[0] = 0x0; // your payload
 8000486:	2300      	movs	r3, #0
 8000488:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
		txData[1] = 0x0;
 800048c:	2300      	movs	r3, #0
 800048e:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
		txData[2] = 0xB4;
 8000492:	23b4      	movs	r3, #180	@ 0xb4
 8000494:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
		txData[3] = 0x43;
 8000498:	2343      	movs	r3, #67	@ 0x43
 800049a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
		txData[4] = current.byte[0];
 800049e:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80004a2:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
		txData[5] = current.byte[1];
 80004a6:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80004aa:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
		txData[6] = current.byte[2];
 80004ae:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80004b2:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
		txData[7] = current.byte[3];
 80004b6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80004ba:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
//		txData[6] = 0x4C;
//		txData[7] = 0x3D;

		//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);

		if (HAL_CAN_AddTxMessage(&hcan, &txHeader, txData, &txMailbox)
 80004be:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80004c2:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80004c6:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 80004ca:	480d      	ldr	r0, [pc, #52]	@ (8000500 <StartCanTxTask+0x140>)
 80004cc:	f001 fdbb 	bl	8002046 <HAL_CAN_AddTxMessage>
 80004d0:	4603      	mov	r3, r0
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d001      	beq.n	80004da <StartCanTxTask+0x11a>
				!= HAL_OK) {
			Error_Handler();
 80004d6:	f000 fb0d 	bl	8000af4 <Error_Handler>
		}
//		  HAL_UART_Transmit(&huart2, "hello world\n", 20, HAL_MAX_DELAY);

HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 80004da:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80004de:	4809      	ldr	r0, [pc, #36]	@ (8000504 <StartCanTxTask+0x144>)
 80004e0:	f002 fdfc 	bl	80030dc <HAL_GPIO_TogglePin>

		osDelay(100); // send every 1 second
 80004e4:	2064      	movs	r0, #100	@ 0x64
 80004e6:	f005 f941 	bl	800576c <osDelay>
	while (1) {
 80004ea:	e77f      	b.n	80003ec <StartCanTxTask+0x2c>
 80004ec:	20000458 	.word	0x20000458
 80004f0:	46c80000 	.word	0x46c80000
 80004f4:	42c80000 	.word	0x42c80000
 80004f8:	08007c98 	.word	0x08007c98
 80004fc:	200003c8 	.word	0x200003c8
 8000500:	200003a0 	.word	0x200003a0
 8000504:	48000400 	.word	0x48000400

08000508 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000508:	b480      	push	{r7}
 800050a:	b085      	sub	sp, #20
 800050c:	af00      	add	r7, sp, #0
 800050e:	60f8      	str	r0, [r7, #12]
 8000510:	60b9      	str	r1, [r7, #8]
 8000512:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	4a07      	ldr	r2, [pc, #28]	@ (8000534 <vApplicationGetIdleTaskMemory+0x2c>)
 8000518:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800051a:	68bb      	ldr	r3, [r7, #8]
 800051c:	4a06      	ldr	r2, [pc, #24]	@ (8000538 <vApplicationGetIdleTaskMemory+0x30>)
 800051e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	2280      	movs	r2, #128	@ 0x80
 8000524:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000526:	bf00      	nop
 8000528:	3714      	adds	r7, #20
 800052a:	46bd      	mov	sp, r7
 800052c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop
 8000534:	200000b8 	.word	0x200000b8
 8000538:	2000010c 	.word	0x2000010c

0800053c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800053c:	b5b0      	push	{r4, r5, r7, lr}
 800053e:	b096      	sub	sp, #88	@ 0x58
 8000540:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000542:	f000 fd1f 	bl	8000f84 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000546:	f000 f875 	bl	8000634 <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
CANq = xQueueCreate(100, sizeof(struct CANframe));
 800054a:	2200      	movs	r2, #0
 800054c:	210c      	movs	r1, #12
 800054e:	2064      	movs	r0, #100	@ 0x64
 8000550:	f005 fa3e 	bl	80059d0 <xQueueGenericCreate>
 8000554:	4603      	mov	r3, r0
 8000556:	4a2d      	ldr	r2, [pc, #180]	@ (800060c <main+0xd0>)
 8000558:	6013      	str	r3, [r2, #0]
	osThreadDef(parked, parked_init, osPriorityNormal, 0, 128);
 800055a:	4b2d      	ldr	r3, [pc, #180]	@ (8000610 <main+0xd4>)
 800055c:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8000560:	461d      	mov	r5, r3
 8000562:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000564:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000566:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800056a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	parkedHandle = osThreadCreate(osThread(parked), NULL);
 800056e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000572:	2100      	movs	r1, #0
 8000574:	4618      	mov	r0, r3
 8000576:	f005 f8ad 	bl	80056d4 <osThreadCreate>
 800057a:	4603      	mov	r3, r0
 800057c:	4a25      	ldr	r2, [pc, #148]	@ (8000614 <main+0xd8>)
 800057e:	6013      	str	r3, [r2, #0]

	osThreadDef(canTxTask, StartCanTxTask, osPriorityHigh, 0, 128);
 8000580:	4b25      	ldr	r3, [pc, #148]	@ (8000618 <main+0xdc>)
 8000582:	f107 0420 	add.w	r4, r7, #32
 8000586:	461d      	mov	r5, r3
 8000588:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800058a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800058c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000590:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	canTxTaskHandle = osThreadCreate(osThread(canTxTask), NULL);
 8000594:	f107 0320 	add.w	r3, r7, #32
 8000598:	2100      	movs	r1, #0
 800059a:	4618      	mov	r0, r3
 800059c:	f005 f89a 	bl	80056d4 <osThreadCreate>
 80005a0:	4603      	mov	r3, r0
 80005a2:	4a1e      	ldr	r2, [pc, #120]	@ (800061c <main+0xe0>)
 80005a4:	6013      	str	r3, [r2, #0]

	osThreadDef(canRxTask, StartCanRxTask, osPriorityNormal, 0, 128);
 80005a6:	4b1e      	ldr	r3, [pc, #120]	@ (8000620 <main+0xe4>)
 80005a8:	1d3c      	adds	r4, r7, #4
 80005aa:	461d      	mov	r5, r3
 80005ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005b0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005b4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	canRxTaskHandle = osThreadCreate(osThread(canRxTask), NULL);
 80005b8:	1d3b      	adds	r3, r7, #4
 80005ba:	2100      	movs	r1, #0
 80005bc:	4618      	mov	r0, r3
 80005be:	f005 f889 	bl	80056d4 <osThreadCreate>
 80005c2:	4603      	mov	r3, r0
 80005c4:	4a17      	ldr	r2, [pc, #92]	@ (8000624 <main+0xe8>)
 80005c6:	6013      	str	r3, [r2, #0]

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80005c8:	f000 f9b6 	bl	8000938 <MX_GPIO_Init>
	MX_ADC1_Init();
 80005cc:	f000 f88a 	bl	80006e4 <MX_ADC1_Init>
	MX_DMA_Init();
 80005d0:	f000 f96e 	bl	80008b0 <MX_DMA_Init>
	MX_USART2_UART_Init();
 80005d4:	f000 f93c 	bl	8000850 <MX_USART2_UART_Init>
	MX_CAN_Init();
 80005d8:	f000 f8e8 	bl	80007ac <MX_CAN_Init>

	/* USER CODE BEGIN 2 */
	HAL_CAN_Start(&hcan);
 80005dc:	4812      	ldr	r0, [pc, #72]	@ (8000628 <main+0xec>)
 80005de:	f001 fcee 	bl	8001fbe <HAL_CAN_Start>

	if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING)
 80005e2:	2102      	movs	r1, #2
 80005e4:	4810      	ldr	r0, [pc, #64]	@ (8000628 <main+0xec>)
 80005e6:	f001 ff20 	bl	800242a <HAL_CAN_ActivateNotification>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <main+0xb8>
			!= HAL_OK) {
		Error_Handler();
 80005f0:	f000 fa80 	bl	8000af4 <Error_Handler>
	}

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc_buf, ADC_BUF_LEN);
 80005f4:	2218      	movs	r2, #24
 80005f6:	490d      	ldr	r1, [pc, #52]	@ (800062c <main+0xf0>)
 80005f8:	480d      	ldr	r0, [pc, #52]	@ (8000630 <main+0xf4>)
 80005fa:	f000 fe9d 	bl	8001338 <HAL_ADC_Start_DMA>


	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 80005fe:	f005 f862 	bl	80056c6 <osKernelStart>
    Enable_DMA_Interrupts();
 8000602:	f000 fa2f 	bl	8000a64 <Enable_DMA_Interrupts>

	/* We should never get here as control is now taken by the scheduler */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000606:	bf00      	nop
 8000608:	e7fd      	b.n	8000606 <main+0xca>
 800060a:	bf00      	nop
 800060c:	20000490 	.word	0x20000490
 8000610:	08007cb0 	.word	0x08007cb0
 8000614:	20000450 	.word	0x20000450
 8000618:	08007cd8 	.word	0x08007cd8
 800061c:	20000488 	.word	0x20000488
 8000620:	08007d00 	.word	0x08007d00
 8000624:	2000048c 	.word	0x2000048c
 8000628:	200003a0 	.word	0x200003a0
 800062c:	20000458 	.word	0x20000458
 8000630:	2000030c 	.word	0x2000030c

08000634 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000634:	b580      	push	{r7, lr}
 8000636:	b09c      	sub	sp, #112	@ 0x70
 8000638:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800063a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800063e:	2228      	movs	r2, #40	@ 0x28
 8000640:	2100      	movs	r1, #0
 8000642:	4618      	mov	r0, r3
 8000644:	f006 fe96 	bl	8007374 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000648:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	605a      	str	r2, [r3, #4]
 8000652:	609a      	str	r2, [r3, #8]
 8000654:	60da      	str	r2, [r3, #12]
 8000656:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8000658:	463b      	mov	r3, r7
 800065a:	2234      	movs	r2, #52	@ 0x34
 800065c:	2100      	movs	r1, #0
 800065e:	4618      	mov	r0, r3
 8000660:	f006 fe88 	bl	8007374 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000664:	2302      	movs	r3, #2
 8000666:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000668:	2301      	movs	r3, #1
 800066a:	65bb      	str	r3, [r7, #88]	@ 0x58
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800066c:	2310      	movs	r3, #16
 800066e:	65fb      	str	r3, [r7, #92]	@ 0x5c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000670:	2302      	movs	r3, #2
 8000672:	667b      	str	r3, [r7, #100]	@ 0x64
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000674:	2300      	movs	r3, #0
 8000676:	66bb      	str	r3, [r7, #104]	@ 0x68
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000678:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 800067c:	66fb      	str	r3, [r7, #108]	@ 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800067e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000682:	4618      	mov	r0, r3
 8000684:	f002 fd44 	bl	8003110 <HAL_RCC_OscConfig>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <SystemClock_Config+0x5e>
		Error_Handler();
 800068e:	f000 fa31 	bl	8000af4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000692:	230f      	movs	r3, #15
 8000694:	637b      	str	r3, [r7, #52]	@ 0x34
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000696:	2302      	movs	r3, #2
 8000698:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800069a:	2300      	movs	r3, #0
 800069c:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800069e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80006a2:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006a4:	2300      	movs	r3, #0
 80006a6:	647b      	str	r3, [r7, #68]	@ 0x44

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80006a8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80006ac:	2102      	movs	r1, #2
 80006ae:	4618      	mov	r0, r3
 80006b0:	f003 fd6c 	bl	800418c <HAL_RCC_ClockConfig>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <SystemClock_Config+0x8a>
		Error_Handler();
 80006ba:	f000 fa1b 	bl	8000af4 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC1;
 80006be:	2380      	movs	r3, #128	@ 0x80
 80006c0:	603b      	str	r3, [r7, #0]
	PeriphClkInit.Adc1ClockSelection = RCC_ADC1PLLCLK_DIV1;
 80006c2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80006c6:	61bb      	str	r3, [r7, #24]

	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80006c8:	463b      	mov	r3, r7
 80006ca:	4618      	mov	r0, r3
 80006cc:	f003 ffb0 	bl	8004630 <HAL_RCCEx_PeriphCLKConfig>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <SystemClock_Config+0xa6>
		Error_Handler();
 80006d6:	f000 fa0d 	bl	8000af4 <Error_Handler>
	}
}
 80006da:	bf00      	nop
 80006dc:	3770      	adds	r7, #112	@ 0x70
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
	...

080006e4 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b086      	sub	sp, #24
 80006e8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 80006ea:	463b      	mov	r3, r7
 80006ec:	2200      	movs	r2, #0
 80006ee:	601a      	str	r2, [r3, #0]
 80006f0:	605a      	str	r2, [r3, #4]
 80006f2:	609a      	str	r2, [r3, #8]
 80006f4:	60da      	str	r2, [r3, #12]
 80006f6:	611a      	str	r2, [r3, #16]
 80006f8:	615a      	str	r2, [r3, #20]
	__HAL_LINKDMA(&hadc1, DMA_Handle, hdma_adc1);
 80006fa:	4b2a      	ldr	r3, [pc, #168]	@ (80007a4 <MX_ADC1_Init+0xc0>)
 80006fc:	4a2a      	ldr	r2, [pc, #168]	@ (80007a8 <MX_ADC1_Init+0xc4>)
 80006fe:	639a      	str	r2, [r3, #56]	@ 0x38
 8000700:	4b29      	ldr	r3, [pc, #164]	@ (80007a8 <MX_ADC1_Init+0xc4>)
 8000702:	4a28      	ldr	r2, [pc, #160]	@ (80007a4 <MX_ADC1_Init+0xc0>)
 8000704:	625a      	str	r2, [r3, #36]	@ 0x24

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 8000706:	4b27      	ldr	r3, [pc, #156]	@ (80007a4 <MX_ADC1_Init+0xc0>)
 8000708:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800070c:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800070e:	4b25      	ldr	r3, [pc, #148]	@ (80007a4 <MX_ADC1_Init+0xc0>)
 8000710:	2200      	movs	r2, #0
 8000712:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000714:	4b23      	ldr	r3, [pc, #140]	@ (80007a4 <MX_ADC1_Init+0xc0>)
 8000716:	2200      	movs	r2, #0
 8000718:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800071a:	4b22      	ldr	r3, [pc, #136]	@ (80007a4 <MX_ADC1_Init+0xc0>)
 800071c:	2200      	movs	r2, #0
 800071e:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8000720:	4b20      	ldr	r3, [pc, #128]	@ (80007a4 <MX_ADC1_Init+0xc0>)
 8000722:	2201      	movs	r2, #1
 8000724:	765a      	strb	r2, [r3, #25]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000726:	4b1f      	ldr	r3, [pc, #124]	@ (80007a4 <MX_ADC1_Init+0xc0>)
 8000728:	2200      	movs	r2, #0
 800072a:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800072e:	4b1d      	ldr	r3, [pc, #116]	@ (80007a4 <MX_ADC1_Init+0xc0>)
 8000730:	2200      	movs	r2, #0
 8000732:	62da      	str	r2, [r3, #44]	@ 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000734:	4b1b      	ldr	r3, [pc, #108]	@ (80007a4 <MX_ADC1_Init+0xc0>)
 8000736:	2201      	movs	r2, #1
 8000738:	629a      	str	r2, [r3, #40]	@ 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800073a:	4b1a      	ldr	r3, [pc, #104]	@ (80007a4 <MX_ADC1_Init+0xc0>)
 800073c:	2200      	movs	r2, #0
 800073e:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 8000740:	4b18      	ldr	r3, [pc, #96]	@ (80007a4 <MX_ADC1_Init+0xc0>)
 8000742:	2201      	movs	r2, #1
 8000744:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = ENABLE;
 8000746:	4b17      	ldr	r3, [pc, #92]	@ (80007a4 <MX_ADC1_Init+0xc0>)
 8000748:	2201      	movs	r2, #1
 800074a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800074e:	4b15      	ldr	r3, [pc, #84]	@ (80007a4 <MX_ADC1_Init+0xc0>)
 8000750:	2204      	movs	r2, #4
 8000752:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 8000754:	4b13      	ldr	r3, [pc, #76]	@ (80007a4 <MX_ADC1_Init+0xc0>)
 8000756:	2200      	movs	r2, #0
 8000758:	761a      	strb	r2, [r3, #24]
	hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800075a:	4b12      	ldr	r3, [pc, #72]	@ (80007a4 <MX_ADC1_Init+0xc0>)
 800075c:	2200      	movs	r2, #0
 800075e:	635a      	str	r2, [r3, #52]	@ 0x34
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8000760:	4810      	ldr	r0, [pc, #64]	@ (80007a4 <MX_ADC1_Init+0xc0>)
 8000762:	f000 fc63 	bl	800102c <HAL_ADC_Init>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <MX_ADC1_Init+0x8c>
		Error_Handler();
 800076c:	f000 f9c2 	bl	8000af4 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 8000770:	2301      	movs	r3, #1
 8000772:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000774:	2301      	movs	r3, #1
 8000776:	607b      	str	r3, [r7, #4]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000778:	2300      	movs	r3, #0
 800077a:	60fb      	str	r3, [r7, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLE_5;
 800077c:	2301      	movs	r3, #1
 800077e:	60bb      	str	r3, [r7, #8]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000780:	2300      	movs	r3, #0
 8000782:	613b      	str	r3, [r7, #16]
	sConfig.Offset = 0;
 8000784:	2300      	movs	r3, #0
 8000786:	617b      	str	r3, [r7, #20]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000788:	463b      	mov	r3, r7
 800078a:	4619      	mov	r1, r3
 800078c:	4805      	ldr	r0, [pc, #20]	@ (80007a4 <MX_ADC1_Init+0xc0>)
 800078e:	f000 fe6f 	bl	8001470 <HAL_ADC_ConfigChannel>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_ADC1_Init+0xb8>
		Error_Handler();
 8000798:	f000 f9ac 	bl	8000af4 <Error_Handler>
//  }
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 800079c:	bf00      	nop
 800079e:	3718      	adds	r7, #24
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	2000030c 	.word	0x2000030c
 80007a8:	2000035c 	.word	0x2000035c

080007ac <MX_CAN_Init>:
/**
 * @brief CAN Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN_Init(void) {
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b08a      	sub	sp, #40	@ 0x28
 80007b0:	af00      	add	r7, sp, #0
	/* USER CODE END CAN_Init 0 */

	/* USER CODE BEGIN CAN_Init 1 */

	/* USER CODE END CAN_Init 1 */
	hcan.Instance = CAN;
 80007b2:	4b25      	ldr	r3, [pc, #148]	@ (8000848 <MX_CAN_Init+0x9c>)
 80007b4:	4a25      	ldr	r2, [pc, #148]	@ (800084c <MX_CAN_Init+0xa0>)
 80007b6:	601a      	str	r2, [r3, #0]
	hcan.Init.Prescaler = 8;
 80007b8:	4b23      	ldr	r3, [pc, #140]	@ (8000848 <MX_CAN_Init+0x9c>)
 80007ba:	2208      	movs	r2, #8
 80007bc:	605a      	str	r2, [r3, #4]
	hcan.Init.Mode = CAN_MODE_NORMAL;
 80007be:	4b22      	ldr	r3, [pc, #136]	@ (8000848 <MX_CAN_Init+0x9c>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	609a      	str	r2, [r3, #8]
	hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80007c4:	4b20      	ldr	r3, [pc, #128]	@ (8000848 <MX_CAN_Init+0x9c>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	60da      	str	r2, [r3, #12]
	hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 80007ca:	4b1f      	ldr	r3, [pc, #124]	@ (8000848 <MX_CAN_Init+0x9c>)
 80007cc:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80007d0:	611a      	str	r2, [r3, #16]
	hcan.Init.TimeSeg2 = CAN_BS2_5TQ;
 80007d2:	4b1d      	ldr	r3, [pc, #116]	@ (8000848 <MX_CAN_Init+0x9c>)
 80007d4:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80007d8:	615a      	str	r2, [r3, #20]
	hcan.Init.TimeTriggeredMode = DISABLE;
 80007da:	4b1b      	ldr	r3, [pc, #108]	@ (8000848 <MX_CAN_Init+0x9c>)
 80007dc:	2200      	movs	r2, #0
 80007de:	761a      	strb	r2, [r3, #24]
	hcan.Init.AutoBusOff = DISABLE;
 80007e0:	4b19      	ldr	r3, [pc, #100]	@ (8000848 <MX_CAN_Init+0x9c>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	765a      	strb	r2, [r3, #25]
	hcan.Init.AutoWakeUp = DISABLE;
 80007e6:	4b18      	ldr	r3, [pc, #96]	@ (8000848 <MX_CAN_Init+0x9c>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	769a      	strb	r2, [r3, #26]
	hcan.Init.AutoRetransmission = DISABLE;
 80007ec:	4b16      	ldr	r3, [pc, #88]	@ (8000848 <MX_CAN_Init+0x9c>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	76da      	strb	r2, [r3, #27]
	hcan.Init.ReceiveFifoLocked = DISABLE;
 80007f2:	4b15      	ldr	r3, [pc, #84]	@ (8000848 <MX_CAN_Init+0x9c>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	771a      	strb	r2, [r3, #28]
	hcan.Init.TransmitFifoPriority = DISABLE;
 80007f8:	4b13      	ldr	r3, [pc, #76]	@ (8000848 <MX_CAN_Init+0x9c>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan) != HAL_OK) {
 80007fe:	4812      	ldr	r0, [pc, #72]	@ (8000848 <MX_CAN_Init+0x9c>)
 8000800:	f001 fa18 	bl	8001c34 <HAL_CAN_Init>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <MX_CAN_Init+0x62>
		Error_Handler();
 800080a:	f000 f973 	bl	8000af4 <Error_Handler>

	//Set a up a filter
	//Allow all messages to pass through from any ID
	CAN_FilterTypeDef canfilterconfig;

	canfilterconfig.FilterActivation = ENABLE;
 800080e:	2301      	movs	r3, #1
 8000810:	623b      	str	r3, [r7, #32]
	canfilterconfig.FilterBank = 0;
 8000812:	2300      	movs	r3, #0
 8000814:	617b      	str	r3, [r7, #20]
	canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000816:	2300      	movs	r3, #0
 8000818:	613b      	str	r3, [r7, #16]
	canfilterconfig.FilterIdHigh = 0x0000;
 800081a:	2300      	movs	r3, #0
 800081c:	603b      	str	r3, [r7, #0]
	canfilterconfig.FilterIdLow = 0x0000;
 800081e:	2300      	movs	r3, #0
 8000820:	607b      	str	r3, [r7, #4]
	canfilterconfig.FilterMaskIdHigh = 0x0000;
 8000822:	2300      	movs	r3, #0
 8000824:	60bb      	str	r3, [r7, #8]
	canfilterconfig.FilterMaskIdLow = 0x0000;
 8000826:	2300      	movs	r3, #0
 8000828:	60fb      	str	r3, [r7, #12]
	canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800082a:	2300      	movs	r3, #0
 800082c:	61bb      	str	r3, [r7, #24]
	canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800082e:	2301      	movs	r3, #1
 8000830:	61fb      	str	r3, [r7, #28]
	canfilterconfig.SlaveStartFilterBank = 14;
 8000832:	230e      	movs	r3, #14
 8000834:	627b      	str	r3, [r7, #36]	@ 0x24

	HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 8000836:	463b      	mov	r3, r7
 8000838:	4619      	mov	r1, r3
 800083a:	4803      	ldr	r0, [pc, #12]	@ (8000848 <MX_CAN_Init+0x9c>)
 800083c:	f001 faf5 	bl	8001e2a <HAL_CAN_ConfigFilter>

	/* USER CODE END CAN_Init 2 */

}
 8000840:	bf00      	nop
 8000842:	3728      	adds	r7, #40	@ 0x28
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	200003a0 	.word	0x200003a0
 800084c:	40006400 	.word	0x40006400

08000850 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000854:	4b14      	ldr	r3, [pc, #80]	@ (80008a8 <MX_USART2_UART_Init+0x58>)
 8000856:	4a15      	ldr	r2, [pc, #84]	@ (80008ac <MX_USART2_UART_Init+0x5c>)
 8000858:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 57600;
 800085a:	4b13      	ldr	r3, [pc, #76]	@ (80008a8 <MX_USART2_UART_Init+0x58>)
 800085c:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 8000860:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000862:	4b11      	ldr	r3, [pc, #68]	@ (80008a8 <MX_USART2_UART_Init+0x58>)
 8000864:	2200      	movs	r2, #0
 8000866:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000868:	4b0f      	ldr	r3, [pc, #60]	@ (80008a8 <MX_USART2_UART_Init+0x58>)
 800086a:	2200      	movs	r2, #0
 800086c:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800086e:	4b0e      	ldr	r3, [pc, #56]	@ (80008a8 <MX_USART2_UART_Init+0x58>)
 8000870:	2200      	movs	r2, #0
 8000872:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000874:	4b0c      	ldr	r3, [pc, #48]	@ (80008a8 <MX_USART2_UART_Init+0x58>)
 8000876:	220c      	movs	r2, #12
 8000878:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800087a:	4b0b      	ldr	r3, [pc, #44]	@ (80008a8 <MX_USART2_UART_Init+0x58>)
 800087c:	2200      	movs	r2, #0
 800087e:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000880:	4b09      	ldr	r3, [pc, #36]	@ (80008a8 <MX_USART2_UART_Init+0x58>)
 8000882:	2200      	movs	r2, #0
 8000884:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000886:	4b08      	ldr	r3, [pc, #32]	@ (80008a8 <MX_USART2_UART_Init+0x58>)
 8000888:	2200      	movs	r2, #0
 800088a:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800088c:	4b06      	ldr	r3, [pc, #24]	@ (80008a8 <MX_USART2_UART_Init+0x58>)
 800088e:	2200      	movs	r2, #0
 8000890:	625a      	str	r2, [r3, #36]	@ 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000892:	4805      	ldr	r0, [pc, #20]	@ (80008a8 <MX_USART2_UART_Init+0x58>)
 8000894:	f004 fad6 	bl	8004e44 <HAL_UART_Init>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <MX_USART2_UART_Init+0x52>
		Error_Handler();
 800089e:	f000 f929 	bl	8000af4 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80008a2:	bf00      	nop
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	200003c8 	.word	0x200003c8
 80008ac:	40004400 	.word	0x40004400

080008b0 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
//	/* DMA interrupt init */
//	/* DMA1_Channel1_IRQn interrupt configuration */
//	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
//	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
    /* DMA controller clock enable */
    __HAL_RCC_DMA1_CLK_ENABLE();
 80008b6:	4b1c      	ldr	r3, [pc, #112]	@ (8000928 <MX_DMA_Init+0x78>)
 80008b8:	695b      	ldr	r3, [r3, #20]
 80008ba:	4a1b      	ldr	r2, [pc, #108]	@ (8000928 <MX_DMA_Init+0x78>)
 80008bc:	f043 0301 	orr.w	r3, r3, #1
 80008c0:	6153      	str	r3, [r2, #20]
 80008c2:	4b19      	ldr	r3, [pc, #100]	@ (8000928 <MX_DMA_Init+0x78>)
 80008c4:	695b      	ldr	r3, [r3, #20]
 80008c6:	f003 0301 	and.w	r3, r3, #1
 80008ca:	607b      	str	r3, [r7, #4]
 80008cc:	687b      	ldr	r3, [r7, #4]

    /* Configure DMA for ADC1 */
    hdma_adc1.Instance = DMA1_Channel1; // replace if using a different channel
 80008ce:	4b17      	ldr	r3, [pc, #92]	@ (800092c <MX_DMA_Init+0x7c>)
 80008d0:	4a17      	ldr	r2, [pc, #92]	@ (8000930 <MX_DMA_Init+0x80>)
 80008d2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008d4:	4b15      	ldr	r3, [pc, #84]	@ (800092c <MX_DMA_Init+0x7c>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80008da:	4b14      	ldr	r3, [pc, #80]	@ (800092c <MX_DMA_Init+0x7c>)
 80008dc:	2200      	movs	r2, #0
 80008de:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80008e0:	4b12      	ldr	r3, [pc, #72]	@ (800092c <MX_DMA_Init+0x7c>)
 80008e2:	2280      	movs	r2, #128	@ 0x80
 80008e4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80008e6:	4b11      	ldr	r3, [pc, #68]	@ (800092c <MX_DMA_Init+0x7c>)
 80008e8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80008ec:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80008ee:	4b0f      	ldr	r3, [pc, #60]	@ (800092c <MX_DMA_Init+0x7c>)
 80008f0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80008f4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR; // 🔁 circular buffer
 80008f6:	4b0d      	ldr	r3, [pc, #52]	@ (800092c <MX_DMA_Init+0x7c>)
 80008f8:	2220      	movs	r2, #32
 80008fa:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80008fc:	4b0b      	ldr	r3, [pc, #44]	@ (800092c <MX_DMA_Init+0x7c>)
 80008fe:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000902:	61da      	str	r2, [r3, #28]

    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK) {
 8000904:	4809      	ldr	r0, [pc, #36]	@ (800092c <MX_DMA_Init+0x7c>)
 8000906:	f002 f8c7 	bl	8002a98 <HAL_DMA_Init>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <MX_DMA_Init+0x64>
        Error_Handler();
 8000910:	f000 f8f0 	bl	8000af4 <Error_Handler>
    }

    // Link DMA to ADC
    __HAL_LINKDMA(&hadc1, DMA_Handle, hdma_adc1);
 8000914:	4b07      	ldr	r3, [pc, #28]	@ (8000934 <MX_DMA_Init+0x84>)
 8000916:	4a05      	ldr	r2, [pc, #20]	@ (800092c <MX_DMA_Init+0x7c>)
 8000918:	639a      	str	r2, [r3, #56]	@ 0x38
 800091a:	4b04      	ldr	r3, [pc, #16]	@ (800092c <MX_DMA_Init+0x7c>)
 800091c:	4a05      	ldr	r2, [pc, #20]	@ (8000934 <MX_DMA_Init+0x84>)
 800091e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA interrupt init */
//    HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
//    HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
}
 8000920:	bf00      	nop
 8000922:	3708      	adds	r7, #8
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	40021000 	.word	0x40021000
 800092c:	2000035c 	.word	0x2000035c
 8000930:	40020008 	.word	0x40020008
 8000934:	2000030c 	.word	0x2000030c

08000938 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000938:	b580      	push	{r7, lr}
 800093a:	b08a      	sub	sp, #40	@ 0x28
 800093c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800093e:	f107 0314 	add.w	r3, r7, #20
 8000942:	2200      	movs	r2, #0
 8000944:	601a      	str	r2, [r3, #0]
 8000946:	605a      	str	r2, [r3, #4]
 8000948:	609a      	str	r2, [r3, #8]
 800094a:	60da      	str	r2, [r3, #12]
 800094c:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800094e:	4b42      	ldr	r3, [pc, #264]	@ (8000a58 <MX_GPIO_Init+0x120>)
 8000950:	695b      	ldr	r3, [r3, #20]
 8000952:	4a41      	ldr	r2, [pc, #260]	@ (8000a58 <MX_GPIO_Init+0x120>)
 8000954:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000958:	6153      	str	r3, [r2, #20]
 800095a:	4b3f      	ldr	r3, [pc, #252]	@ (8000a58 <MX_GPIO_Init+0x120>)
 800095c:	695b      	ldr	r3, [r3, #20]
 800095e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000962:	613b      	str	r3, [r7, #16]
 8000964:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8000966:	4b3c      	ldr	r3, [pc, #240]	@ (8000a58 <MX_GPIO_Init+0x120>)
 8000968:	695b      	ldr	r3, [r3, #20]
 800096a:	4a3b      	ldr	r2, [pc, #236]	@ (8000a58 <MX_GPIO_Init+0x120>)
 800096c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000970:	6153      	str	r3, [r2, #20]
 8000972:	4b39      	ldr	r3, [pc, #228]	@ (8000a58 <MX_GPIO_Init+0x120>)
 8000974:	695b      	ldr	r3, [r3, #20]
 8000976:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800097a:	60fb      	str	r3, [r7, #12]
 800097c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800097e:	4b36      	ldr	r3, [pc, #216]	@ (8000a58 <MX_GPIO_Init+0x120>)
 8000980:	695b      	ldr	r3, [r3, #20]
 8000982:	4a35      	ldr	r2, [pc, #212]	@ (8000a58 <MX_GPIO_Init+0x120>)
 8000984:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000988:	6153      	str	r3, [r2, #20]
 800098a:	4b33      	ldr	r3, [pc, #204]	@ (8000a58 <MX_GPIO_Init+0x120>)
 800098c:	695b      	ldr	r3, [r3, #20]
 800098e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000992:	60bb      	str	r3, [r7, #8]
 8000994:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000996:	4b30      	ldr	r3, [pc, #192]	@ (8000a58 <MX_GPIO_Init+0x120>)
 8000998:	695b      	ldr	r3, [r3, #20]
 800099a:	4a2f      	ldr	r2, [pc, #188]	@ (8000a58 <MX_GPIO_Init+0x120>)
 800099c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80009a0:	6153      	str	r3, [r2, #20]
 80009a2:	4b2d      	ldr	r3, [pc, #180]	@ (8000a58 <MX_GPIO_Init+0x120>)
 80009a4:	695b      	ldr	r3, [r3, #20]
 80009a6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80009aa:	607b      	str	r3, [r7, #4]
 80009ac:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80009ae:	2200      	movs	r2, #0
 80009b0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009b4:	4829      	ldr	r0, [pc, #164]	@ (8000a5c <MX_GPIO_Init+0x124>)
 80009b6:	f002 fb79 	bl	80030ac <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 80009ba:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009be:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009c0:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80009c4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c6:	2300      	movs	r3, #0
 80009c8:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009ca:	f107 0314 	add.w	r3, r7, #20
 80009ce:	4619      	mov	r1, r3
 80009d0:	4823      	ldr	r0, [pc, #140]	@ (8000a60 <MX_GPIO_Init+0x128>)
 80009d2:	f002 f9f9 	bl	8002dc8 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 80009d6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009da:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009dc:	2301      	movs	r3, #1
 80009de:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e0:	2300      	movs	r3, #0
 80009e2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e4:	2300      	movs	r3, #0
 80009e6:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80009e8:	f107 0314 	add.w	r3, r7, #20
 80009ec:	4619      	mov	r1, r3
 80009ee:	481b      	ldr	r0, [pc, #108]	@ (8000a5c <MX_GPIO_Init+0x124>)
 80009f0:	f002 f9ea 	bl	8002dc8 <HAL_GPIO_Init>

	/*Configure GPIO pin : Drive_Pin */
	GPIO_InitStruct.Pin = Drive_Pin;
 80009f4:	2380      	movs	r3, #128	@ 0x80
 80009f6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009f8:	2300      	movs	r3, #0
 80009fa:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009fc:	2301      	movs	r3, #1
 80009fe:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a00:	2300      	movs	r3, #0
 8000a02:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(Drive_GPIO_Port, &GPIO_InitStruct);
 8000a04:	f107 0314 	add.w	r3, r7, #20
 8000a08:	4619      	mov	r1, r3
 8000a0a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a0e:	f002 f9db 	bl	8002dc8 <HAL_GPIO_Init>

	/*Configure GPIO pin : Neutral_Pin */
	GPIO_InitStruct.Pin = Neutral_Pin;
 8000a12:	2340      	movs	r3, #64	@ 0x40
 8000a14:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a16:	2300      	movs	r3, #0
 8000a18:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a22:	f107 0314 	add.w	r3, r7, #20
 8000a26:	4619      	mov	r1, r3
 8000a28:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a2c:	f002 f9cc 	bl	8002dc8 <HAL_GPIO_Init>

	/*Configure GPIO pin : Reverse_Pin */
	GPIO_InitStruct.Pin = Reverse_Pin;
 8000a30:	2320      	movs	r3, #32
 8000a32:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a34:	2300      	movs	r3, #0
 8000a36:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a38:	2301      	movs	r3, #1
 8000a3a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a40:	f107 0314 	add.w	r3, r7, #20
 8000a44:	4619      	mov	r1, r3
 8000a46:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a4a:	f002 f9bd 	bl	8002dc8 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000a4e:	bf00      	nop
 8000a50:	3728      	adds	r7, #40	@ 0x28
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	40021000 	.word	0x40021000
 8000a5c:	48000400 	.word	0x48000400
 8000a60:	48000800 	.word	0x48000800

08000a64 <Enable_DMA_Interrupts>:

/* USER CODE BEGIN 4 */

/* Enable DMA interrupts after RTOS is running */
 void Enable_DMA_Interrupts(void) {
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
    /* Give time for RTOS to stabilize */
    osDelay(100);
 8000a68:	2064      	movs	r0, #100	@ 0x64
 8000a6a:	f004 fe7f 	bl	800576c <osDelay>

    /* Configure at lowest priority */
    HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 15, 0); // Lowest priority
 8000a6e:	2200      	movs	r2, #0
 8000a70:	210f      	movs	r1, #15
 8000a72:	200b      	movs	r0, #11
 8000a74:	f001 ffe6 	bl	8002a44 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000a78:	200b      	movs	r0, #11
 8000a7a:	f001 ffff 	bl	8002a7c <HAL_NVIC_EnableIRQ>

    /* Activate ADC DMA with interrupts */
    HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buf, ADC_BUF_LEN);
 8000a7e:	2218      	movs	r2, #24
 8000a80:	4904      	ldr	r1, [pc, #16]	@ (8000a94 <Enable_DMA_Interrupts+0x30>)
 8000a82:	4805      	ldr	r0, [pc, #20]	@ (8000a98 <Enable_DMA_Interrupts+0x34>)
 8000a84:	f000 fc58 	bl	8001338 <HAL_ADC_Start_DMA>

    dma_interrupts_enabled = 1;
 8000a88:	4b04      	ldr	r3, [pc, #16]	@ (8000a9c <Enable_DMA_Interrupts+0x38>)
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	701a      	strb	r2, [r3, #0]
}
 8000a8e:	bf00      	nop
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	20000458 	.word	0x20000458
 8000a98:	2000030c 	.word	0x2000030c
 8000a9c:	20000454 	.word	0x20000454

08000aa0 <DMA1_Channel1_IRQHandler>:

/* Modified DMA IRQ Handler */
void DMA1_Channel1_IRQHandler(void) {
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
    if(dma_interrupts_enabled) {
 8000aa4:	4b04      	ldr	r3, [pc, #16]	@ (8000ab8 <DMA1_Channel1_IRQHandler+0x18>)
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	b2db      	uxtb	r3, r3
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d002      	beq.n	8000ab4 <DMA1_Channel1_IRQHandler+0x14>
        HAL_DMA_IRQHandler(&hdma_adc1);
 8000aae:	4803      	ldr	r0, [pc, #12]	@ (8000abc <DMA1_Channel1_IRQHandler+0x1c>)
 8000ab0:	f002 f898 	bl	8002be4 <HAL_DMA_IRQHandler>
    }
}
 8000ab4:	bf00      	nop
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	20000454 	.word	0x20000454
 8000abc:	2000035c 	.word	0x2000035c

08000ac0 <parked_init>:
 * @brief  Function implementing the parked thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_parked_init */
void parked_init(void const *argument) {
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8000ac8:	2001      	movs	r0, #1
 8000aca:	f004 fe4f 	bl	800576c <osDelay>
 8000ace:	e7fb      	b.n	8000ac8 <parked_init+0x8>

08000ad0 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1) {
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a04      	ldr	r2, [pc, #16]	@ (8000af0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d101      	bne.n	8000ae6 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000ae2:	f000 fa65 	bl	8000fb0 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000ae6:	bf00      	nop
 8000ae8:	3708      	adds	r7, #8
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	40012c00 	.word	0x40012c00

08000af4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000af8:	b672      	cpsid	i
}
 8000afa:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000afc:	bf00      	nop
 8000afe:	e7fd      	b.n	8000afc <Error_Handler+0x8>

08000b00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b06:	4b11      	ldr	r3, [pc, #68]	@ (8000b4c <HAL_MspInit+0x4c>)
 8000b08:	699b      	ldr	r3, [r3, #24]
 8000b0a:	4a10      	ldr	r2, [pc, #64]	@ (8000b4c <HAL_MspInit+0x4c>)
 8000b0c:	f043 0301 	orr.w	r3, r3, #1
 8000b10:	6193      	str	r3, [r2, #24]
 8000b12:	4b0e      	ldr	r3, [pc, #56]	@ (8000b4c <HAL_MspInit+0x4c>)
 8000b14:	699b      	ldr	r3, [r3, #24]
 8000b16:	f003 0301 	and.w	r3, r3, #1
 8000b1a:	607b      	str	r3, [r7, #4]
 8000b1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b1e:	4b0b      	ldr	r3, [pc, #44]	@ (8000b4c <HAL_MspInit+0x4c>)
 8000b20:	69db      	ldr	r3, [r3, #28]
 8000b22:	4a0a      	ldr	r2, [pc, #40]	@ (8000b4c <HAL_MspInit+0x4c>)
 8000b24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b28:	61d3      	str	r3, [r2, #28]
 8000b2a:	4b08      	ldr	r3, [pc, #32]	@ (8000b4c <HAL_MspInit+0x4c>)
 8000b2c:	69db      	ldr	r3, [r3, #28]
 8000b2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b32:	603b      	str	r3, [r7, #0]
 8000b34:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b36:	2200      	movs	r2, #0
 8000b38:	210f      	movs	r1, #15
 8000b3a:	f06f 0001 	mvn.w	r0, #1
 8000b3e:	f001 ff81 	bl	8002a44 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b42:	bf00      	nop
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	40021000 	.word	0x40021000

08000b50 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b08a      	sub	sp, #40	@ 0x28
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b58:	f107 0314 	add.w	r3, r7, #20
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	601a      	str	r2, [r3, #0]
 8000b60:	605a      	str	r2, [r3, #4]
 8000b62:	609a      	str	r2, [r3, #8]
 8000b64:	60da      	str	r2, [r3, #12]
 8000b66:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000b70:	d14c      	bne.n	8000c0c <HAL_ADC_MspInit+0xbc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b72:	4b28      	ldr	r3, [pc, #160]	@ (8000c14 <HAL_ADC_MspInit+0xc4>)
 8000b74:	695b      	ldr	r3, [r3, #20]
 8000b76:	4a27      	ldr	r2, [pc, #156]	@ (8000c14 <HAL_ADC_MspInit+0xc4>)
 8000b78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b7c:	6153      	str	r3, [r2, #20]
 8000b7e:	4b25      	ldr	r3, [pc, #148]	@ (8000c14 <HAL_ADC_MspInit+0xc4>)
 8000b80:	695b      	ldr	r3, [r3, #20]
 8000b82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b86:	613b      	str	r3, [r7, #16]
 8000b88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b8a:	4b22      	ldr	r3, [pc, #136]	@ (8000c14 <HAL_ADC_MspInit+0xc4>)
 8000b8c:	695b      	ldr	r3, [r3, #20]
 8000b8e:	4a21      	ldr	r2, [pc, #132]	@ (8000c14 <HAL_ADC_MspInit+0xc4>)
 8000b90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b94:	6153      	str	r3, [r2, #20]
 8000b96:	4b1f      	ldr	r3, [pc, #124]	@ (8000c14 <HAL_ADC_MspInit+0xc4>)
 8000b98:	695b      	ldr	r3, [r3, #20]
 8000b9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b9e:	60fb      	str	r3, [r7, #12]
 8000ba0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ba6:	2303      	movs	r3, #3
 8000ba8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000baa:	2300      	movs	r3, #0
 8000bac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bae:	f107 0314 	add.w	r3, r7, #20
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bb8:	f002 f906 	bl	8002dc8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000bbc:	4b16      	ldr	r3, [pc, #88]	@ (8000c18 <HAL_ADC_MspInit+0xc8>)
 8000bbe:	4a17      	ldr	r2, [pc, #92]	@ (8000c1c <HAL_ADC_MspInit+0xcc>)
 8000bc0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000bc2:	4b15      	ldr	r3, [pc, #84]	@ (8000c18 <HAL_ADC_MspInit+0xc8>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bc8:	4b13      	ldr	r3, [pc, #76]	@ (8000c18 <HAL_ADC_MspInit+0xc8>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000bce:	4b12      	ldr	r3, [pc, #72]	@ (8000c18 <HAL_ADC_MspInit+0xc8>)
 8000bd0:	2280      	movs	r2, #128	@ 0x80
 8000bd2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000bd4:	4b10      	ldr	r3, [pc, #64]	@ (8000c18 <HAL_ADC_MspInit+0xc8>)
 8000bd6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000bda:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000bdc:	4b0e      	ldr	r3, [pc, #56]	@ (8000c18 <HAL_ADC_MspInit+0xc8>)
 8000bde:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000be2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000be4:	4b0c      	ldr	r3, [pc, #48]	@ (8000c18 <HAL_ADC_MspInit+0xc8>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000bea:	4b0b      	ldr	r3, [pc, #44]	@ (8000c18 <HAL_ADC_MspInit+0xc8>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000bf0:	4809      	ldr	r0, [pc, #36]	@ (8000c18 <HAL_ADC_MspInit+0xc8>)
 8000bf2:	f001 ff51 	bl	8002a98 <HAL_DMA_Init>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 8000bfc:	f7ff ff7a 	bl	8000af4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	4a05      	ldr	r2, [pc, #20]	@ (8000c18 <HAL_ADC_MspInit+0xc8>)
 8000c04:	639a      	str	r2, [r3, #56]	@ 0x38
 8000c06:	4a04      	ldr	r2, [pc, #16]	@ (8000c18 <HAL_ADC_MspInit+0xc8>)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	6253      	str	r3, [r2, #36]	@ 0x24

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000c0c:	bf00      	nop
 8000c0e:	3728      	adds	r7, #40	@ 0x28
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	40021000 	.word	0x40021000
 8000c18:	2000035c 	.word	0x2000035c
 8000c1c:	40020008 	.word	0x40020008

08000c20 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b08a      	sub	sp, #40	@ 0x28
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c28:	f107 0314 	add.w	r3, r7, #20
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	601a      	str	r2, [r3, #0]
 8000c30:	605a      	str	r2, [r3, #4]
 8000c32:	609a      	str	r2, [r3, #8]
 8000c34:	60da      	str	r2, [r3, #12]
 8000c36:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a25      	ldr	r2, [pc, #148]	@ (8000cd4 <HAL_CAN_MspInit+0xb4>)
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	d143      	bne.n	8000cca <HAL_CAN_MspInit+0xaa>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000c42:	4b25      	ldr	r3, [pc, #148]	@ (8000cd8 <HAL_CAN_MspInit+0xb8>)
 8000c44:	69db      	ldr	r3, [r3, #28]
 8000c46:	4a24      	ldr	r2, [pc, #144]	@ (8000cd8 <HAL_CAN_MspInit+0xb8>)
 8000c48:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000c4c:	61d3      	str	r3, [r2, #28]
 8000c4e:	4b22      	ldr	r3, [pc, #136]	@ (8000cd8 <HAL_CAN_MspInit+0xb8>)
 8000c50:	69db      	ldr	r3, [r3, #28]
 8000c52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000c56:	613b      	str	r3, [r7, #16]
 8000c58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c5a:	4b1f      	ldr	r3, [pc, #124]	@ (8000cd8 <HAL_CAN_MspInit+0xb8>)
 8000c5c:	695b      	ldr	r3, [r3, #20]
 8000c5e:	4a1e      	ldr	r2, [pc, #120]	@ (8000cd8 <HAL_CAN_MspInit+0xb8>)
 8000c60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c64:	6153      	str	r3, [r2, #20]
 8000c66:	4b1c      	ldr	r3, [pc, #112]	@ (8000cd8 <HAL_CAN_MspInit+0xb8>)
 8000c68:	695b      	ldr	r3, [r3, #20]
 8000c6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c6e:	60fb      	str	r3, [r7, #12]
 8000c70:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000c72:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000c76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c78:	2302      	movs	r3, #2
 8000c7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c80:	2303      	movs	r3, #3
 8000c82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM1;
 8000c84:	2309      	movs	r3, #9
 8000c86:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c88:	f107 0314 	add.w	r3, r7, #20
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c92:	f002 f899 	bl	8002dc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000c96:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9c:	2302      	movs	r3, #2
 8000c9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ca4:	2303      	movs	r3, #3
 8000ca6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM1;
 8000ca8:	2309      	movs	r3, #9
 8000caa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cac:	f107 0314 	add.w	r3, r7, #20
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cb6:	f002 f887 	bl	8002dc8 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 5, 0);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2105      	movs	r1, #5
 8000cbe:	2014      	movs	r0, #20
 8000cc0:	f001 fec0 	bl	8002a44 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 8000cc4:	2014      	movs	r0, #20
 8000cc6:	f001 fed9 	bl	8002a7c <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN_MspInit 1 */

  }

}
 8000cca:	bf00      	nop
 8000ccc:	3728      	adds	r7, #40	@ 0x28
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40006400 	.word	0x40006400
 8000cd8:	40021000 	.word	0x40021000

08000cdc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b08a      	sub	sp, #40	@ 0x28
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce4:	f107 0314 	add.w	r3, r7, #20
 8000ce8:	2200      	movs	r2, #0
 8000cea:	601a      	str	r2, [r3, #0]
 8000cec:	605a      	str	r2, [r3, #4]
 8000cee:	609a      	str	r2, [r3, #8]
 8000cf0:	60da      	str	r2, [r3, #12]
 8000cf2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a17      	ldr	r2, [pc, #92]	@ (8000d58 <HAL_UART_MspInit+0x7c>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d128      	bne.n	8000d50 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cfe:	4b17      	ldr	r3, [pc, #92]	@ (8000d5c <HAL_UART_MspInit+0x80>)
 8000d00:	69db      	ldr	r3, [r3, #28]
 8000d02:	4a16      	ldr	r2, [pc, #88]	@ (8000d5c <HAL_UART_MspInit+0x80>)
 8000d04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d08:	61d3      	str	r3, [r2, #28]
 8000d0a:	4b14      	ldr	r3, [pc, #80]	@ (8000d5c <HAL_UART_MspInit+0x80>)
 8000d0c:	69db      	ldr	r3, [r3, #28]
 8000d0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d12:	613b      	str	r3, [r7, #16]
 8000d14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d16:	4b11      	ldr	r3, [pc, #68]	@ (8000d5c <HAL_UART_MspInit+0x80>)
 8000d18:	695b      	ldr	r3, [r3, #20]
 8000d1a:	4a10      	ldr	r2, [pc, #64]	@ (8000d5c <HAL_UART_MspInit+0x80>)
 8000d1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d20:	6153      	str	r3, [r2, #20]
 8000d22:	4b0e      	ldr	r3, [pc, #56]	@ (8000d5c <HAL_UART_MspInit+0x80>)
 8000d24:	695b      	ldr	r3, [r3, #20]
 8000d26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d2a:	60fb      	str	r3, [r7, #12]
 8000d2c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d2e:	230c      	movs	r3, #12
 8000d30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d32:	2302      	movs	r3, #2
 8000d34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d36:	2300      	movs	r3, #0
 8000d38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d3e:	2307      	movs	r3, #7
 8000d40:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d42:	f107 0314 	add.w	r3, r7, #20
 8000d46:	4619      	mov	r1, r3
 8000d48:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d4c:	f002 f83c 	bl	8002dc8 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000d50:	bf00      	nop
 8000d52:	3728      	adds	r7, #40	@ 0x28
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	40004400 	.word	0x40004400
 8000d5c:	40021000 	.word	0x40021000

08000d60 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b08c      	sub	sp, #48	@ 0x30
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000d70:	4b2e      	ldr	r3, [pc, #184]	@ (8000e2c <HAL_InitTick+0xcc>)
 8000d72:	699b      	ldr	r3, [r3, #24]
 8000d74:	4a2d      	ldr	r2, [pc, #180]	@ (8000e2c <HAL_InitTick+0xcc>)
 8000d76:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000d7a:	6193      	str	r3, [r2, #24]
 8000d7c:	4b2b      	ldr	r3, [pc, #172]	@ (8000e2c <HAL_InitTick+0xcc>)
 8000d7e:	699b      	ldr	r3, [r3, #24]
 8000d80:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000d84:	60bb      	str	r3, [r7, #8]
 8000d86:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d88:	f107 020c 	add.w	r2, r7, #12
 8000d8c:	f107 0310 	add.w	r3, r7, #16
 8000d90:	4611      	mov	r1, r2
 8000d92:	4618      	mov	r0, r3
 8000d94:	f003 fc1a 	bl	80045cc <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000d98:	f003 fbf6 	bl	8004588 <HAL_RCC_GetPCLK2Freq>
 8000d9c:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000da0:	4a23      	ldr	r2, [pc, #140]	@ (8000e30 <HAL_InitTick+0xd0>)
 8000da2:	fba2 2303 	umull	r2, r3, r2, r3
 8000da6:	0c9b      	lsrs	r3, r3, #18
 8000da8:	3b01      	subs	r3, #1
 8000daa:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000dac:	4b21      	ldr	r3, [pc, #132]	@ (8000e34 <HAL_InitTick+0xd4>)
 8000dae:	4a22      	ldr	r2, [pc, #136]	@ (8000e38 <HAL_InitTick+0xd8>)
 8000db0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000db2:	4b20      	ldr	r3, [pc, #128]	@ (8000e34 <HAL_InitTick+0xd4>)
 8000db4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000db8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000dba:	4a1e      	ldr	r2, [pc, #120]	@ (8000e34 <HAL_InitTick+0xd4>)
 8000dbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dbe:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000dc0:	4b1c      	ldr	r3, [pc, #112]	@ (8000e34 <HAL_InitTick+0xd4>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dc6:	4b1b      	ldr	r3, [pc, #108]	@ (8000e34 <HAL_InitTick+0xd4>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dcc:	4b19      	ldr	r3, [pc, #100]	@ (8000e34 <HAL_InitTick+0xd4>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000dd2:	4818      	ldr	r0, [pc, #96]	@ (8000e34 <HAL_InitTick+0xd4>)
 8000dd4:	f003 fdbe 	bl	8004954 <HAL_TIM_Base_Init>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000dde:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d11b      	bne.n	8000e1e <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000de6:	4813      	ldr	r0, [pc, #76]	@ (8000e34 <HAL_InitTick+0xd4>)
 8000de8:	f003 fe16 	bl	8004a18 <HAL_TIM_Base_Start_IT>
 8000dec:	4603      	mov	r3, r0
 8000dee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000df2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d111      	bne.n	8000e1e <HAL_InitTick+0xbe>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000dfa:	2019      	movs	r0, #25
 8000dfc:	f001 fe3e 	bl	8002a7c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	2b0f      	cmp	r3, #15
 8000e04:	d808      	bhi.n	8000e18 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8000e06:	2200      	movs	r2, #0
 8000e08:	6879      	ldr	r1, [r7, #4]
 8000e0a:	2019      	movs	r0, #25
 8000e0c:	f001 fe1a 	bl	8002a44 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e10:	4a0a      	ldr	r2, [pc, #40]	@ (8000e3c <HAL_InitTick+0xdc>)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	6013      	str	r3, [r2, #0]
 8000e16:	e002      	b.n	8000e1e <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000e1e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	3730      	adds	r7, #48	@ 0x30
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	40021000 	.word	0x40021000
 8000e30:	431bde83 	.word	0x431bde83
 8000e34:	20000498 	.word	0x20000498
 8000e38:	40012c00 	.word	0x40012c00
 8000e3c:	20000004 	.word	0x20000004

08000e40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e44:	bf00      	nop
 8000e46:	e7fd      	b.n	8000e44 <NMI_Handler+0x4>

08000e48 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e4c:	bf00      	nop
 8000e4e:	e7fd      	b.n	8000e4c <HardFault_Handler+0x4>

08000e50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e54:	bf00      	nop
 8000e56:	e7fd      	b.n	8000e54 <MemManage_Handler+0x4>

08000e58 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e5c:	bf00      	nop
 8000e5e:	e7fd      	b.n	8000e5c <BusFault_Handler+0x4>

08000e60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e64:	bf00      	nop
 8000e66:	e7fd      	b.n	8000e64 <UsageFault_Handler+0x4>

08000e68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e6c:	bf00      	nop
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
	...

08000e78 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles CAN RX0 and USB low priority interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000e7c:	4802      	ldr	r0, [pc, #8]	@ (8000e88 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 8000e7e:	f001 fafa 	bl	8002476 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 8000e82:	bf00      	nop
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	200003a0 	.word	0x200003a0

08000e8c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e90:	4802      	ldr	r0, [pc, #8]	@ (8000e9c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000e92:	f003 fe15 	bl	8004ac0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000e96:	bf00      	nop
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	20000498 	.word	0x20000498

08000ea0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b086      	sub	sp, #24
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ea8:	4a14      	ldr	r2, [pc, #80]	@ (8000efc <_sbrk+0x5c>)
 8000eaa:	4b15      	ldr	r3, [pc, #84]	@ (8000f00 <_sbrk+0x60>)
 8000eac:	1ad3      	subs	r3, r2, r3
 8000eae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000eb4:	4b13      	ldr	r3, [pc, #76]	@ (8000f04 <_sbrk+0x64>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d102      	bne.n	8000ec2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ebc:	4b11      	ldr	r3, [pc, #68]	@ (8000f04 <_sbrk+0x64>)
 8000ebe:	4a12      	ldr	r2, [pc, #72]	@ (8000f08 <_sbrk+0x68>)
 8000ec0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ec2:	4b10      	ldr	r3, [pc, #64]	@ (8000f04 <_sbrk+0x64>)
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	4413      	add	r3, r2
 8000eca:	693a      	ldr	r2, [r7, #16]
 8000ecc:	429a      	cmp	r2, r3
 8000ece:	d207      	bcs.n	8000ee0 <_sbrk+0x40>
  {

	  errno = ENOMEM;
 8000ed0:	f006 fa58 	bl	8007384 <__errno>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	220c      	movs	r2, #12
 8000ed8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000eda:	f04f 33ff 	mov.w	r3, #4294967295
 8000ede:	e009      	b.n	8000ef4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ee0:	4b08      	ldr	r3, [pc, #32]	@ (8000f04 <_sbrk+0x64>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ee6:	4b07      	ldr	r3, [pc, #28]	@ (8000f04 <_sbrk+0x64>)
 8000ee8:	681a      	ldr	r2, [r3, #0]
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	4413      	add	r3, r2
 8000eee:	4a05      	ldr	r2, [pc, #20]	@ (8000f04 <_sbrk+0x64>)
 8000ef0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ef2:	68fb      	ldr	r3, [r7, #12]
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	3718      	adds	r7, #24
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	20004000 	.word	0x20004000
 8000f00:	00000400 	.word	0x00000400
 8000f04:	200004e4 	.word	0x200004e4
 8000f08:	20002fc0 	.word	0x20002fc0

08000f0c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f10:	4b06      	ldr	r3, [pc, #24]	@ (8000f2c <SystemInit+0x20>)
 8000f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f16:	4a05      	ldr	r2, [pc, #20]	@ (8000f2c <SystemInit+0x20>)
 8000f18:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f1c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f20:	bf00      	nop
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	e000ed00 	.word	0xe000ed00

08000f30 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000f30:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f68 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f34:	f7ff ffea 	bl	8000f0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f38:	480c      	ldr	r0, [pc, #48]	@ (8000f6c <LoopForever+0x6>)
  ldr r1, =_edata
 8000f3a:	490d      	ldr	r1, [pc, #52]	@ (8000f70 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f3c:	4a0d      	ldr	r2, [pc, #52]	@ (8000f74 <LoopForever+0xe>)
  movs r3, #0
 8000f3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f40:	e002      	b.n	8000f48 <LoopCopyDataInit>

08000f42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f46:	3304      	adds	r3, #4

08000f48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f4c:	d3f9      	bcc.n	8000f42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f4e:	4a0a      	ldr	r2, [pc, #40]	@ (8000f78 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f50:	4c0a      	ldr	r4, [pc, #40]	@ (8000f7c <LoopForever+0x16>)
  movs r3, #0
 8000f52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f54:	e001      	b.n	8000f5a <LoopFillZerobss>

08000f56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f58:	3204      	adds	r2, #4

08000f5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f5c:	d3fb      	bcc.n	8000f56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f5e:	f006 fa17 	bl	8007390 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f62:	f7ff faeb 	bl	800053c <main>

08000f66 <LoopForever>:

LoopForever:
    b LoopForever
 8000f66:	e7fe      	b.n	8000f66 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000f68:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000f6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f70:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000f74:	08007da0 	.word	0x08007da0
  ldr r2, =_sbss
 8000f78:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000f7c:	20002fc0 	.word	0x20002fc0

08000f80 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f80:	e7fe      	b.n	8000f80 <ADC1_IRQHandler>
	...

08000f84 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f88:	4b08      	ldr	r3, [pc, #32]	@ (8000fac <HAL_Init+0x28>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a07      	ldr	r2, [pc, #28]	@ (8000fac <HAL_Init+0x28>)
 8000f8e:	f043 0310 	orr.w	r3, r3, #16
 8000f92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f94:	2003      	movs	r0, #3
 8000f96:	f001 fd4a 	bl	8002a2e <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f9a:	200f      	movs	r0, #15
 8000f9c:	f7ff fee0 	bl	8000d60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fa0:	f7ff fdae 	bl	8000b00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fa4:	2300      	movs	r3, #0
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	40022000 	.word	0x40022000

08000fb0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fb4:	4b06      	ldr	r3, [pc, #24]	@ (8000fd0 <HAL_IncTick+0x20>)
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	461a      	mov	r2, r3
 8000fba:	4b06      	ldr	r3, [pc, #24]	@ (8000fd4 <HAL_IncTick+0x24>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4413      	add	r3, r2
 8000fc0:	4a04      	ldr	r2, [pc, #16]	@ (8000fd4 <HAL_IncTick+0x24>)
 8000fc2:	6013      	str	r3, [r2, #0]
}
 8000fc4:	bf00      	nop
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	20000008 	.word	0x20000008
 8000fd4:	200004e8 	.word	0x200004e8

08000fd8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  return uwTick;  
 8000fdc:	4b03      	ldr	r3, [pc, #12]	@ (8000fec <HAL_GetTick+0x14>)
 8000fde:	681b      	ldr	r3, [r3, #0]
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	200004e8 	.word	0x200004e8

08000ff0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8000ff8:	bf00      	nop
 8000ffa:	370c      	adds	r7, #12
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr

08001004 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800100c:	bf00      	nop
 800100e:	370c      	adds	r7, #12
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr

08001018 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001020:	bf00      	nop
 8001022:	370c      	adds	r7, #12
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr

0800102c <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b09a      	sub	sp, #104	@ 0x68
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001034:	2300      	movs	r3, #0
 8001036:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800103a:	2300      	movs	r3, #0
 800103c:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 800103e:	2300      	movs	r3, #0
 8001040:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d101      	bne.n	800104c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001048:	2301      	movs	r3, #1
 800104a:	e169      	b.n	8001320 <HAL_ADC_Init+0x2f4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	691b      	ldr	r3, [r3, #16]
 8001050:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001056:	f003 0310 	and.w	r3, r3, #16
 800105a:	2b00      	cmp	r3, #0
 800105c:	d176      	bne.n	800114c <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001062:	2b00      	cmp	r3, #0
 8001064:	d152      	bne.n	800110c <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2200      	movs	r2, #0
 800106a:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2200      	movs	r2, #0
 8001070:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2200      	movs	r2, #0
 8001076:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2200      	movs	r2, #0
 800107c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001080:	6878      	ldr	r0, [r7, #4]
 8001082:	f7ff fd65 	bl	8000b50 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	689b      	ldr	r3, [r3, #8]
 800108c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001090:	2b00      	cmp	r3, #0
 8001092:	d13b      	bne.n	800110c <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001094:	6878      	ldr	r0, [r7, #4]
 8001096:	f000 fd67 	bl	8001b68 <ADC_Disable>
 800109a:	4603      	mov	r3, r0
 800109c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010a4:	f003 0310 	and.w	r3, r3, #16
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d12f      	bne.n	800110c <HAL_ADC_Init+0xe0>
 80010ac:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d12b      	bne.n	800110c <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010b8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80010bc:	f023 0302 	bic.w	r3, r3, #2
 80010c0:	f043 0202 	orr.w	r2, r3, #2
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	689a      	ldr	r2, [r3, #8]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80010d6:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	689a      	ldr	r2, [r3, #8]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80010e6:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80010e8:	4b8f      	ldr	r3, [pc, #572]	@ (8001328 <HAL_ADC_Init+0x2fc>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a8f      	ldr	r2, [pc, #572]	@ (800132c <HAL_ADC_Init+0x300>)
 80010ee:	fba2 2303 	umull	r2, r3, r2, r3
 80010f2:	0c9a      	lsrs	r2, r3, #18
 80010f4:	4613      	mov	r3, r2
 80010f6:	009b      	lsls	r3, r3, #2
 80010f8:	4413      	add	r3, r2
 80010fa:	005b      	lsls	r3, r3, #1
 80010fc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80010fe:	e002      	b.n	8001106 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	3b01      	subs	r3, #1
 8001104:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001106:	68bb      	ldr	r3, [r7, #8]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d1f9      	bne.n	8001100 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	689b      	ldr	r3, [r3, #8]
 8001112:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001116:	2b00      	cmp	r3, #0
 8001118:	d007      	beq.n	800112a <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	689b      	ldr	r3, [r3, #8]
 8001120:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001124:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001128:	d110      	bne.n	800114c <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800112e:	f023 0312 	bic.w	r3, r3, #18
 8001132:	f043 0210 	orr.w	r2, r3, #16
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800113e:	f043 0201 	orr.w	r2, r3, #1
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001146:	2301      	movs	r3, #1
 8001148:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001150:	f003 0310 	and.w	r3, r3, #16
 8001154:	2b00      	cmp	r3, #0
 8001156:	f040 80d6 	bne.w	8001306 <HAL_ADC_Init+0x2da>
 800115a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800115e:	2b00      	cmp	r3, #0
 8001160:	f040 80d1 	bne.w	8001306 <HAL_ADC_Init+0x2da>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	689b      	ldr	r3, [r3, #8]
 800116a:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 800116e:	2b00      	cmp	r3, #0
 8001170:	f040 80c9 	bne.w	8001306 <HAL_ADC_Init+0x2da>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001178:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800117c:	f043 0202 	orr.w	r2, r3, #2
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001184:	4b6a      	ldr	r3, [pc, #424]	@ (8001330 <HAL_ADC_Init+0x304>)
 8001186:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001188:	2300      	movs	r3, #0
 800118a:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	689b      	ldr	r3, [r3, #8]
 8001192:	f003 0303 	and.w	r3, r3, #3
 8001196:	2b01      	cmp	r3, #1
 8001198:	d108      	bne.n	80011ac <HAL_ADC_Init+0x180>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f003 0301 	and.w	r3, r3, #1
 80011a4:	2b01      	cmp	r3, #1
 80011a6:	d101      	bne.n	80011ac <HAL_ADC_Init+0x180>
 80011a8:	2301      	movs	r3, #1
 80011aa:	e000      	b.n	80011ae <HAL_ADC_Init+0x182>
 80011ac:	2300      	movs	r3, #0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d11c      	bne.n	80011ec <HAL_ADC_Init+0x1c0>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80011b2:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d010      	beq.n	80011da <HAL_ADC_Init+0x1ae>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	689b      	ldr	r3, [r3, #8]
 80011bc:	f003 0303 	and.w	r3, r3, #3
 80011c0:	2b01      	cmp	r3, #1
 80011c2:	d107      	bne.n	80011d4 <HAL_ADC_Init+0x1a8>
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f003 0301 	and.w	r3, r3, #1
 80011cc:	2b01      	cmp	r3, #1
 80011ce:	d101      	bne.n	80011d4 <HAL_ADC_Init+0x1a8>
 80011d0:	2301      	movs	r3, #1
 80011d2:	e000      	b.n	80011d6 <HAL_ADC_Init+0x1aa>
 80011d4:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d108      	bne.n	80011ec <HAL_ADC_Init+0x1c0>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80011da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80011dc:	689b      	ldr	r3, [r3, #8]
 80011de:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	431a      	orrs	r2, r3
 80011e8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80011ea:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	7e5b      	ldrb	r3, [r3, #25]
 80011f0:	035b      	lsls	r3, r3, #13
 80011f2:	687a      	ldr	r2, [r7, #4]
 80011f4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80011f6:	2a01      	cmp	r2, #1
 80011f8:	d002      	beq.n	8001200 <HAL_ADC_Init+0x1d4>
 80011fa:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80011fe:	e000      	b.n	8001202 <HAL_ADC_Init+0x1d6>
 8001200:	2200      	movs	r2, #0
 8001202:	431a      	orrs	r2, r3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	68db      	ldr	r3, [r3, #12]
 8001208:	431a      	orrs	r2, r3
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	689b      	ldr	r3, [r3, #8]
 800120e:	4313      	orrs	r3, r2
 8001210:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001212:	4313      	orrs	r3, r2
 8001214:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	f893 3020 	ldrb.w	r3, [r3, #32]
 800121c:	2b01      	cmp	r3, #1
 800121e:	d11b      	bne.n	8001258 <HAL_ADC_Init+0x22c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	7e5b      	ldrb	r3, [r3, #25]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d109      	bne.n	800123c <HAL_ADC_Init+0x210>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800122c:	3b01      	subs	r3, #1
 800122e:	045a      	lsls	r2, r3, #17
 8001230:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001232:	4313      	orrs	r3, r2
 8001234:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001238:	663b      	str	r3, [r7, #96]	@ 0x60
 800123a:	e00d      	b.n	8001258 <HAL_ADC_Init+0x22c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001240:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8001244:	f043 0220 	orr.w	r2, r3, #32
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001250:	f043 0201 	orr.w	r2, r3, #1
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800125c:	2b01      	cmp	r3, #1
 800125e:	d007      	beq.n	8001270 <HAL_ADC_Init+0x244>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001268:	4313      	orrs	r3, r2
 800126a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800126c:	4313      	orrs	r3, r2
 800126e:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	689b      	ldr	r3, [r3, #8]
 8001276:	f003 030c 	and.w	r3, r3, #12
 800127a:	2b00      	cmp	r3, #0
 800127c:	d114      	bne.n	80012a8 <HAL_ADC_Init+0x27c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	68db      	ldr	r3, [r3, #12]
 8001284:	687a      	ldr	r2, [r7, #4]
 8001286:	6812      	ldr	r2, [r2, #0]
 8001288:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800128c:	f023 0302 	bic.w	r3, r3, #2
 8001290:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	7e1b      	ldrb	r3, [r3, #24]
 8001296:	039a      	lsls	r2, r3, #14
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800129e:	005b      	lsls	r3, r3, #1
 80012a0:	4313      	orrs	r3, r2
 80012a2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80012a4:	4313      	orrs	r3, r2
 80012a6:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	68da      	ldr	r2, [r3, #12]
 80012ae:	4b21      	ldr	r3, [pc, #132]	@ (8001334 <HAL_ADC_Init+0x308>)
 80012b0:	4013      	ands	r3, r2
 80012b2:	687a      	ldr	r2, [r7, #4]
 80012b4:	6812      	ldr	r2, [r2, #0]
 80012b6:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80012b8:	430b      	orrs	r3, r1
 80012ba:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	691b      	ldr	r3, [r3, #16]
 80012c0:	2b01      	cmp	r3, #1
 80012c2:	d10c      	bne.n	80012de <HAL_ADC_Init+0x2b2>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ca:	f023 010f 	bic.w	r1, r3, #15
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	69db      	ldr	r3, [r3, #28]
 80012d2:	1e5a      	subs	r2, r3, #1
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	430a      	orrs	r2, r1
 80012da:	631a      	str	r2, [r3, #48]	@ 0x30
 80012dc:	e007      	b.n	80012ee <HAL_ADC_Init+0x2c2>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f022 020f 	bic.w	r2, r2, #15
 80012ec:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2200      	movs	r2, #0
 80012f2:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012f8:	f023 0303 	bic.w	r3, r3, #3
 80012fc:	f043 0201 	orr.w	r2, r3, #1
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	641a      	str	r2, [r3, #64]	@ 0x40
 8001304:	e00a      	b.n	800131c <HAL_ADC_Init+0x2f0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800130a:	f023 0312 	bic.w	r3, r3, #18
 800130e:	f043 0210 	orr.w	r2, r3, #16
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001316:	2301      	movs	r3, #1
 8001318:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 800131c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8001320:	4618      	mov	r0, r3
 8001322:	3768      	adds	r7, #104	@ 0x68
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	20000000 	.word	0x20000000
 800132c:	431bde83 	.word	0x431bde83
 8001330:	50000300 	.word	0x50000300
 8001334:	fff0c007 	.word	0xfff0c007

08001338 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b086      	sub	sp, #24
 800133c:	af00      	add	r7, sp, #0
 800133e:	60f8      	str	r0, [r7, #12]
 8001340:	60b9      	str	r1, [r7, #8]
 8001342:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001344:	2300      	movs	r3, #0
 8001346:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	689b      	ldr	r3, [r3, #8]
 800134e:	f003 0304 	and.w	r3, r3, #4
 8001352:	2b00      	cmp	r3, #0
 8001354:	d17e      	bne.n	8001454 <HAL_ADC_Start_DMA+0x11c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800135c:	2b01      	cmp	r3, #1
 800135e:	d101      	bne.n	8001364 <HAL_ADC_Start_DMA+0x2c>
 8001360:	2302      	movs	r3, #2
 8001362:	e07a      	b.n	800145a <HAL_ADC_Start_DMA+0x122>
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	2201      	movs	r2, #1
 8001368:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800136c:	68f8      	ldr	r0, [r7, #12]
 800136e:	f000 fb97 	bl	8001aa0 <ADC_Enable>
 8001372:	4603      	mov	r3, r0
 8001374:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001376:	7dfb      	ldrb	r3, [r7, #23]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d166      	bne.n	800144a <HAL_ADC_Start_DMA+0x112>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001380:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001384:	f023 0301 	bic.w	r3, r3, #1
 8001388:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	641a      	str	r2, [r3, #64]	@ 0x40
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001394:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	68db      	ldr	r3, [r3, #12]
 80013a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d007      	beq.n	80013ba <HAL_ADC_Start_DMA+0x82>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ae:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80013b2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	641a      	str	r2, [r3, #64]	@ 0x40
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013be:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80013c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80013c6:	d106      	bne.n	80013d6 <HAL_ADC_Start_DMA+0x9e>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013cc:	f023 0206 	bic.w	r2, r3, #6
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	645a      	str	r2, [r3, #68]	@ 0x44
 80013d4:	e002      	b.n	80013dc <HAL_ADC_Start_DMA+0xa4>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	2200      	movs	r2, #0
 80013da:	645a      	str	r2, [r3, #68]	@ 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	2200      	movs	r2, #0
 80013e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80013e8:	4a1e      	ldr	r2, [pc, #120]	@ (8001464 <HAL_ADC_Start_DMA+0x12c>)
 80013ea:	629a      	str	r2, [r3, #40]	@ 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80013f0:	4a1d      	ldr	r2, [pc, #116]	@ (8001468 <HAL_ADC_Start_DMA+0x130>)
 80013f2:	62da      	str	r2, [r3, #44]	@ 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80013f8:	4a1c      	ldr	r2, [pc, #112]	@ (800146c <HAL_ADC_Start_DMA+0x134>)
 80013fa:	631a      	str	r2, [r3, #48]	@ 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	221c      	movs	r2, #28
 8001402:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	685a      	ldr	r2, [r3, #4]
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f042 0210 	orr.w	r2, r2, #16
 8001412:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	68da      	ldr	r2, [r3, #12]
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f042 0201 	orr.w	r2, r2, #1
 8001422:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	3340      	adds	r3, #64	@ 0x40
 800142e:	4619      	mov	r1, r3
 8001430:	68ba      	ldr	r2, [r7, #8]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	f001 fb77 	bl	8002b26 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	689a      	ldr	r2, [r3, #8]
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f042 0204 	orr.w	r2, r2, #4
 8001446:	609a      	str	r2, [r3, #8]
 8001448:	e006      	b.n	8001458 <HAL_ADC_Start_DMA+0x120>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	2200      	movs	r2, #0
 800144e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8001452:	e001      	b.n	8001458 <HAL_ADC_Start_DMA+0x120>
      __HAL_UNLOCK(hadc);
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001454:	2302      	movs	r3, #2
 8001456:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001458:	7dfb      	ldrb	r3, [r7, #23]
}
 800145a:	4618      	mov	r0, r3
 800145c:	3718      	adds	r7, #24
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	080019d5 	.word	0x080019d5
 8001468:	08001a4f 	.word	0x08001a4f
 800146c:	08001a6b 	.word	0x08001a6b

08001470 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001470:	b480      	push	{r7}
 8001472:	b09b      	sub	sp, #108	@ 0x6c
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800147a:	2300      	movs	r3, #0
 800147c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001480:	2300      	movs	r3, #0
 8001482:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800148a:	2b01      	cmp	r3, #1
 800148c:	d101      	bne.n	8001492 <HAL_ADC_ConfigChannel+0x22>
 800148e:	2302      	movs	r3, #2
 8001490:	e295      	b.n	80019be <HAL_ADC_ConfigChannel+0x54e>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2201      	movs	r2, #1
 8001496:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	689b      	ldr	r3, [r3, #8]
 80014a0:	f003 0304 	and.w	r3, r3, #4
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	f040 8279 	bne.w	800199c <HAL_ADC_ConfigChannel+0x52c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	2b04      	cmp	r3, #4
 80014b0:	d81c      	bhi.n	80014ec <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	685a      	ldr	r2, [r3, #4]
 80014bc:	4613      	mov	r3, r2
 80014be:	005b      	lsls	r3, r3, #1
 80014c0:	4413      	add	r3, r2
 80014c2:	005b      	lsls	r3, r3, #1
 80014c4:	461a      	mov	r2, r3
 80014c6:	231f      	movs	r3, #31
 80014c8:	4093      	lsls	r3, r2
 80014ca:	43db      	mvns	r3, r3
 80014cc:	4019      	ands	r1, r3
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	6818      	ldr	r0, [r3, #0]
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	685a      	ldr	r2, [r3, #4]
 80014d6:	4613      	mov	r3, r2
 80014d8:	005b      	lsls	r3, r3, #1
 80014da:	4413      	add	r3, r2
 80014dc:	005b      	lsls	r3, r3, #1
 80014de:	fa00 f203 	lsl.w	r2, r0, r3
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	430a      	orrs	r2, r1
 80014e8:	631a      	str	r2, [r3, #48]	@ 0x30
 80014ea:	e063      	b.n	80015b4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	2b09      	cmp	r3, #9
 80014f2:	d81e      	bhi.n	8001532 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	685a      	ldr	r2, [r3, #4]
 80014fe:	4613      	mov	r3, r2
 8001500:	005b      	lsls	r3, r3, #1
 8001502:	4413      	add	r3, r2
 8001504:	005b      	lsls	r3, r3, #1
 8001506:	3b1e      	subs	r3, #30
 8001508:	221f      	movs	r2, #31
 800150a:	fa02 f303 	lsl.w	r3, r2, r3
 800150e:	43db      	mvns	r3, r3
 8001510:	4019      	ands	r1, r3
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	6818      	ldr	r0, [r3, #0]
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	685a      	ldr	r2, [r3, #4]
 800151a:	4613      	mov	r3, r2
 800151c:	005b      	lsls	r3, r3, #1
 800151e:	4413      	add	r3, r2
 8001520:	005b      	lsls	r3, r3, #1
 8001522:	3b1e      	subs	r3, #30
 8001524:	fa00 f203 	lsl.w	r2, r0, r3
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	430a      	orrs	r2, r1
 800152e:	635a      	str	r2, [r3, #52]	@ 0x34
 8001530:	e040      	b.n	80015b4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	2b0e      	cmp	r3, #14
 8001538:	d81e      	bhi.n	8001578 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	685a      	ldr	r2, [r3, #4]
 8001544:	4613      	mov	r3, r2
 8001546:	005b      	lsls	r3, r3, #1
 8001548:	4413      	add	r3, r2
 800154a:	005b      	lsls	r3, r3, #1
 800154c:	3b3c      	subs	r3, #60	@ 0x3c
 800154e:	221f      	movs	r2, #31
 8001550:	fa02 f303 	lsl.w	r3, r2, r3
 8001554:	43db      	mvns	r3, r3
 8001556:	4019      	ands	r1, r3
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	6818      	ldr	r0, [r3, #0]
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	685a      	ldr	r2, [r3, #4]
 8001560:	4613      	mov	r3, r2
 8001562:	005b      	lsls	r3, r3, #1
 8001564:	4413      	add	r3, r2
 8001566:	005b      	lsls	r3, r3, #1
 8001568:	3b3c      	subs	r3, #60	@ 0x3c
 800156a:	fa00 f203 	lsl.w	r2, r0, r3
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	430a      	orrs	r2, r1
 8001574:	639a      	str	r2, [r3, #56]	@ 0x38
 8001576:	e01d      	b.n	80015b4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	685a      	ldr	r2, [r3, #4]
 8001582:	4613      	mov	r3, r2
 8001584:	005b      	lsls	r3, r3, #1
 8001586:	4413      	add	r3, r2
 8001588:	005b      	lsls	r3, r3, #1
 800158a:	3b5a      	subs	r3, #90	@ 0x5a
 800158c:	221f      	movs	r2, #31
 800158e:	fa02 f303 	lsl.w	r3, r2, r3
 8001592:	43db      	mvns	r3, r3
 8001594:	4019      	ands	r1, r3
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	6818      	ldr	r0, [r3, #0]
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	685a      	ldr	r2, [r3, #4]
 800159e:	4613      	mov	r3, r2
 80015a0:	005b      	lsls	r3, r3, #1
 80015a2:	4413      	add	r3, r2
 80015a4:	005b      	lsls	r3, r3, #1
 80015a6:	3b5a      	subs	r3, #90	@ 0x5a
 80015a8:	fa00 f203 	lsl.w	r2, r0, r3
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	430a      	orrs	r2, r1
 80015b2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	f003 030c 	and.w	r3, r3, #12
 80015be:	2b00      	cmp	r3, #0
 80015c0:	f040 80e5 	bne.w	800178e <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	2b09      	cmp	r3, #9
 80015ca:	d91c      	bls.n	8001606 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	6999      	ldr	r1, [r3, #24]
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	4613      	mov	r3, r2
 80015d8:	005b      	lsls	r3, r3, #1
 80015da:	4413      	add	r3, r2
 80015dc:	3b1e      	subs	r3, #30
 80015de:	2207      	movs	r2, #7
 80015e0:	fa02 f303 	lsl.w	r3, r2, r3
 80015e4:	43db      	mvns	r3, r3
 80015e6:	4019      	ands	r1, r3
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	6898      	ldr	r0, [r3, #8]
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	4613      	mov	r3, r2
 80015f2:	005b      	lsls	r3, r3, #1
 80015f4:	4413      	add	r3, r2
 80015f6:	3b1e      	subs	r3, #30
 80015f8:	fa00 f203 	lsl.w	r2, r0, r3
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	430a      	orrs	r2, r1
 8001602:	619a      	str	r2, [r3, #24]
 8001604:	e019      	b.n	800163a <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	6959      	ldr	r1, [r3, #20]
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	4613      	mov	r3, r2
 8001612:	005b      	lsls	r3, r3, #1
 8001614:	4413      	add	r3, r2
 8001616:	2207      	movs	r2, #7
 8001618:	fa02 f303 	lsl.w	r3, r2, r3
 800161c:	43db      	mvns	r3, r3
 800161e:	4019      	ands	r1, r3
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	6898      	ldr	r0, [r3, #8]
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	4613      	mov	r3, r2
 800162a:	005b      	lsls	r3, r3, #1
 800162c:	4413      	add	r3, r2
 800162e:	fa00 f203 	lsl.w	r2, r0, r3
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	430a      	orrs	r2, r1
 8001638:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	695a      	ldr	r2, [r3, #20]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	08db      	lsrs	r3, r3, #3
 8001646:	f003 0303 	and.w	r3, r3, #3
 800164a:	005b      	lsls	r3, r3, #1
 800164c:	fa02 f303 	lsl.w	r3, r2, r3
 8001650:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	691b      	ldr	r3, [r3, #16]
 8001656:	3b01      	subs	r3, #1
 8001658:	2b03      	cmp	r3, #3
 800165a:	d84f      	bhi.n	80016fc <HAL_ADC_ConfigChannel+0x28c>
 800165c:	a201      	add	r2, pc, #4	@ (adr r2, 8001664 <HAL_ADC_ConfigChannel+0x1f4>)
 800165e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001662:	bf00      	nop
 8001664:	08001675 	.word	0x08001675
 8001668:	08001697 	.word	0x08001697
 800166c:	080016b9 	.word	0x080016b9
 8001670:	080016db 	.word	0x080016db
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800167a:	4b97      	ldr	r3, [pc, #604]	@ (80018d8 <HAL_ADC_ConfigChannel+0x468>)
 800167c:	4013      	ands	r3, r2
 800167e:	683a      	ldr	r2, [r7, #0]
 8001680:	6812      	ldr	r2, [r2, #0]
 8001682:	0691      	lsls	r1, r2, #26
 8001684:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001686:	430a      	orrs	r2, r1
 8001688:	431a      	orrs	r2, r3
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001692:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001694:	e07b      	b.n	800178e <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800169c:	4b8e      	ldr	r3, [pc, #568]	@ (80018d8 <HAL_ADC_ConfigChannel+0x468>)
 800169e:	4013      	ands	r3, r2
 80016a0:	683a      	ldr	r2, [r7, #0]
 80016a2:	6812      	ldr	r2, [r2, #0]
 80016a4:	0691      	lsls	r1, r2, #26
 80016a6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80016a8:	430a      	orrs	r2, r1
 80016aa:	431a      	orrs	r2, r3
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80016b4:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80016b6:	e06a      	b.n	800178e <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80016be:	4b86      	ldr	r3, [pc, #536]	@ (80018d8 <HAL_ADC_ConfigChannel+0x468>)
 80016c0:	4013      	ands	r3, r2
 80016c2:	683a      	ldr	r2, [r7, #0]
 80016c4:	6812      	ldr	r2, [r2, #0]
 80016c6:	0691      	lsls	r1, r2, #26
 80016c8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80016ca:	430a      	orrs	r2, r1
 80016cc:	431a      	orrs	r2, r3
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80016d6:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80016d8:	e059      	b.n	800178e <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80016e0:	4b7d      	ldr	r3, [pc, #500]	@ (80018d8 <HAL_ADC_ConfigChannel+0x468>)
 80016e2:	4013      	ands	r3, r2
 80016e4:	683a      	ldr	r2, [r7, #0]
 80016e6:	6812      	ldr	r2, [r2, #0]
 80016e8:	0691      	lsls	r1, r2, #26
 80016ea:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80016ec:	430a      	orrs	r2, r1
 80016ee:	431a      	orrs	r2, r3
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80016f8:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80016fa:	e048      	b.n	800178e <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001702:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	069b      	lsls	r3, r3, #26
 800170c:	429a      	cmp	r2, r3
 800170e:	d107      	bne.n	8001720 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800171e:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001726:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	069b      	lsls	r3, r3, #26
 8001730:	429a      	cmp	r2, r3
 8001732:	d107      	bne.n	8001744 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001742:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800174a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	069b      	lsls	r3, r3, #26
 8001754:	429a      	cmp	r2, r3
 8001756:	d107      	bne.n	8001768 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001766:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800176e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	069b      	lsls	r3, r3, #26
 8001778:	429a      	cmp	r2, r3
 800177a:	d107      	bne.n	800178c <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800178a:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 800178c:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	f003 0303 	and.w	r3, r3, #3
 8001798:	2b01      	cmp	r3, #1
 800179a:	d108      	bne.n	80017ae <HAL_ADC_ConfigChannel+0x33e>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 0301 	and.w	r3, r3, #1
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	d101      	bne.n	80017ae <HAL_ADC_ConfigChannel+0x33e>
 80017aa:	2301      	movs	r3, #1
 80017ac:	e000      	b.n	80017b0 <HAL_ADC_ConfigChannel+0x340>
 80017ae:	2300      	movs	r3, #0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	f040 80fe 	bne.w	80019b2 <HAL_ADC_ConfigChannel+0x542>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	68db      	ldr	r3, [r3, #12]
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d00f      	beq.n	80017de <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	2201      	movs	r2, #1
 80017cc:	fa02 f303 	lsl.w	r3, r2, r3
 80017d0:	43da      	mvns	r2, r3
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	400a      	ands	r2, r1
 80017d8:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 80017dc:	e049      	b.n	8001872 <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	2201      	movs	r2, #1
 80017ec:	409a      	lsls	r2, r3
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	430a      	orrs	r2, r1
 80017f4:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	2b09      	cmp	r3, #9
 80017fe:	d91c      	bls.n	800183a <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	6999      	ldr	r1, [r3, #24]
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	4613      	mov	r3, r2
 800180c:	005b      	lsls	r3, r3, #1
 800180e:	4413      	add	r3, r2
 8001810:	3b1b      	subs	r3, #27
 8001812:	2207      	movs	r2, #7
 8001814:	fa02 f303 	lsl.w	r3, r2, r3
 8001818:	43db      	mvns	r3, r3
 800181a:	4019      	ands	r1, r3
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	6898      	ldr	r0, [r3, #8]
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	4613      	mov	r3, r2
 8001826:	005b      	lsls	r3, r3, #1
 8001828:	4413      	add	r3, r2
 800182a:	3b1b      	subs	r3, #27
 800182c:	fa00 f203 	lsl.w	r2, r0, r3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	430a      	orrs	r2, r1
 8001836:	619a      	str	r2, [r3, #24]
 8001838:	e01b      	b.n	8001872 <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	6959      	ldr	r1, [r3, #20]
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	1c5a      	adds	r2, r3, #1
 8001846:	4613      	mov	r3, r2
 8001848:	005b      	lsls	r3, r3, #1
 800184a:	4413      	add	r3, r2
 800184c:	2207      	movs	r2, #7
 800184e:	fa02 f303 	lsl.w	r3, r2, r3
 8001852:	43db      	mvns	r3, r3
 8001854:	4019      	ands	r1, r3
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	6898      	ldr	r0, [r3, #8]
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	1c5a      	adds	r2, r3, #1
 8001860:	4613      	mov	r3, r2
 8001862:	005b      	lsls	r3, r3, #1
 8001864:	4413      	add	r3, r2
 8001866:	fa00 f203 	lsl.w	r2, r0, r3
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	430a      	orrs	r2, r1
 8001870:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001872:	4b1a      	ldr	r3, [pc, #104]	@ (80018dc <HAL_ADC_ConfigChannel+0x46c>)
 8001874:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	2b10      	cmp	r3, #16
 800187c:	d105      	bne.n	800188a <HAL_ADC_ConfigChannel+0x41a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800187e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001886:	2b00      	cmp	r3, #0
 8001888:	d014      	beq.n	80018b4 <HAL_ADC_ConfigChannel+0x444>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800188e:	2b11      	cmp	r3, #17
 8001890:	d105      	bne.n	800189e <HAL_ADC_ConfigChannel+0x42e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001892:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800189a:	2b00      	cmp	r3, #0
 800189c:	d00a      	beq.n	80018b4 <HAL_ADC_ConfigChannel+0x444>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80018a2:	2b12      	cmp	r3, #18
 80018a4:	f040 8085 	bne.w	80019b2 <HAL_ADC_ConfigChannel+0x542>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80018a8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d17e      	bne.n	80019b2 <HAL_ADC_ConfigChannel+0x542>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80018b4:	2300      	movs	r3, #0
 80018b6:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	f003 0303 	and.w	r3, r3, #3
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d10c      	bne.n	80018e0 <HAL_ADC_ConfigChannel+0x470>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f003 0301 	and.w	r3, r3, #1
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d105      	bne.n	80018e0 <HAL_ADC_ConfigChannel+0x470>
 80018d4:	2301      	movs	r3, #1
 80018d6:	e004      	b.n	80018e2 <HAL_ADC_ConfigChannel+0x472>
 80018d8:	83fff000 	.word	0x83fff000
 80018dc:	50000300 	.word	0x50000300
 80018e0:	2300      	movs	r3, #0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d150      	bne.n	8001988 <HAL_ADC_ConfigChannel+0x518>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80018e6:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d010      	beq.n	800190e <HAL_ADC_ConfigChannel+0x49e>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	f003 0303 	and.w	r3, r3, #3
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	d107      	bne.n	8001908 <HAL_ADC_ConfigChannel+0x498>
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 0301 	and.w	r3, r3, #1
 8001900:	2b01      	cmp	r3, #1
 8001902:	d101      	bne.n	8001908 <HAL_ADC_ConfigChannel+0x498>
 8001904:	2301      	movs	r3, #1
 8001906:	e000      	b.n	800190a <HAL_ADC_ConfigChannel+0x49a>
 8001908:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800190a:	2b00      	cmp	r3, #0
 800190c:	d13c      	bne.n	8001988 <HAL_ADC_ConfigChannel+0x518>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	2b10      	cmp	r3, #16
 8001914:	d11d      	bne.n	8001952 <HAL_ADC_ConfigChannel+0x4e2>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800191e:	d118      	bne.n	8001952 <HAL_ADC_ConfigChannel+0x4e2>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001920:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001928:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800192a:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800192c:	4b27      	ldr	r3, [pc, #156]	@ (80019cc <HAL_ADC_ConfigChannel+0x55c>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a27      	ldr	r2, [pc, #156]	@ (80019d0 <HAL_ADC_ConfigChannel+0x560>)
 8001932:	fba2 2303 	umull	r2, r3, r2, r3
 8001936:	0c9a      	lsrs	r2, r3, #18
 8001938:	4613      	mov	r3, r2
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	4413      	add	r3, r2
 800193e:	005b      	lsls	r3, r3, #1
 8001940:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001942:	e002      	b.n	800194a <HAL_ADC_ConfigChannel+0x4da>
          {
            wait_loop_index--;
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	3b01      	subs	r3, #1
 8001948:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d1f9      	bne.n	8001944 <HAL_ADC_ConfigChannel+0x4d4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001950:	e02e      	b.n	80019b0 <HAL_ADC_ConfigChannel+0x540>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	2b11      	cmp	r3, #17
 8001958:	d10b      	bne.n	8001972 <HAL_ADC_ConfigChannel+0x502>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001962:	d106      	bne.n	8001972 <HAL_ADC_ConfigChannel+0x502>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001964:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 800196c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800196e:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001970:	e01e      	b.n	80019b0 <HAL_ADC_ConfigChannel+0x540>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	2b12      	cmp	r3, #18
 8001978:	d11a      	bne.n	80019b0 <HAL_ADC_ConfigChannel+0x540>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800197a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001982:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001984:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001986:	e013      	b.n	80019b0 <HAL_ADC_ConfigChannel+0x540>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800198c:	f043 0220 	orr.w	r2, r3, #32
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800199a:	e00a      	b.n	80019b2 <HAL_ADC_ConfigChannel+0x542>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019a0:	f043 0220 	orr.w	r2, r3, #32
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80019ae:	e000      	b.n	80019b2 <HAL_ADC_ConfigChannel+0x542>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80019b0:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2200      	movs	r2, #0
 80019b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80019ba:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 80019be:	4618      	mov	r0, r3
 80019c0:	376c      	adds	r7, #108	@ 0x6c
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	20000000 	.word	0x20000000
 80019d0:	431bde83 	.word	0x431bde83

080019d4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b084      	sub	sp, #16
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019e0:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019e6:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d126      	bne.n	8001a3c <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019f2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	68db      	ldr	r3, [r3, #12]
 8001a00:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d115      	bne.n	8001a34 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d111      	bne.n	8001a34 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a14:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a20:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d105      	bne.n	8001a34 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a2c:	f043 0201 	orr.w	r2, r3, #1
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001a34:	68f8      	ldr	r0, [r7, #12]
 8001a36:	f7ff fadb 	bl	8000ff0 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001a3a:	e004      	b.n	8001a46 <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	4798      	blx	r3
}
 8001a46:	bf00      	nop
 8001a48:	3710      	adds	r7, #16
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}

08001a4e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001a4e:	b580      	push	{r7, lr}
 8001a50:	b084      	sub	sp, #16
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a5a:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001a5c:	68f8      	ldr	r0, [r7, #12]
 8001a5e:	f7ff fad1 	bl	8001004 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 8001a62:	bf00      	nop
 8001a64:	3710      	adds	r7, #16
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}

08001a6a <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001a6a:	b580      	push	{r7, lr}
 8001a6c:	b084      	sub	sp, #16
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a76:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a7c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	641a      	str	r2, [r3, #64]	@ 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a88:	f043 0204 	orr.w	r2, r3, #4
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	645a      	str	r2, [r3, #68]	@ 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001a90:	68f8      	ldr	r0, [r7, #12]
 8001a92:	f7ff fac1 	bl	8001018 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001a96:	bf00      	nop
 8001a98:	3710      	adds	r7, #16
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
	...

08001aa0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b084      	sub	sp, #16
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	f003 0303 	and.w	r3, r3, #3
 8001ab6:	2b01      	cmp	r3, #1
 8001ab8:	d108      	bne.n	8001acc <ADC_Enable+0x2c>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 0301 	and.w	r3, r3, #1
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d101      	bne.n	8001acc <ADC_Enable+0x2c>
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e000      	b.n	8001ace <ADC_Enable+0x2e>
 8001acc:	2300      	movs	r3, #0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d143      	bne.n	8001b5a <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	689a      	ldr	r2, [r3, #8]
 8001ad8:	4b22      	ldr	r3, [pc, #136]	@ (8001b64 <ADC_Enable+0xc4>)
 8001ada:	4013      	ands	r3, r2
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d00d      	beq.n	8001afc <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ae4:	f043 0210 	orr.w	r2, r3, #16
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001af0:	f043 0201 	orr.w	r2, r3, #1
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	645a      	str	r2, [r3, #68]	@ 0x44
      
      return HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	e02f      	b.n	8001b5c <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	689a      	ldr	r2, [r3, #8]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f042 0201 	orr.w	r2, r2, #1
 8001b0a:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8001b0c:	f7ff fa64 	bl	8000fd8 <HAL_GetTick>
 8001b10:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001b12:	e01b      	b.n	8001b4c <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001b14:	f7ff fa60 	bl	8000fd8 <HAL_GetTick>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	1ad3      	subs	r3, r2, r3
 8001b1e:	2b02      	cmp	r3, #2
 8001b20:	d914      	bls.n	8001b4c <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 0301 	and.w	r3, r3, #1
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d00d      	beq.n	8001b4c <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b34:	f043 0210 	orr.w	r2, r3, #16
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b40:	f043 0201 	orr.w	r2, r3, #1
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	e007      	b.n	8001b5c <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0301 	and.w	r3, r3, #1
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d1dc      	bne.n	8001b14 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001b5a:	2300      	movs	r3, #0
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3710      	adds	r7, #16
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	8000003f 	.word	0x8000003f

08001b68 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b084      	sub	sp, #16
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001b70:	2300      	movs	r3, #0
 8001b72:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	f003 0303 	and.w	r3, r3, #3
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d108      	bne.n	8001b94 <ADC_Disable+0x2c>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 0301 	and.w	r3, r3, #1
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d101      	bne.n	8001b94 <ADC_Disable+0x2c>
 8001b90:	2301      	movs	r3, #1
 8001b92:	e000      	b.n	8001b96 <ADC_Disable+0x2e>
 8001b94:	2300      	movs	r3, #0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d047      	beq.n	8001c2a <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	f003 030d 	and.w	r3, r3, #13
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d10f      	bne.n	8001bc8 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	689a      	ldr	r2, [r3, #8]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f042 0202 	orr.w	r2, r2, #2
 8001bb6:	609a      	str	r2, [r3, #8]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	2203      	movs	r2, #3
 8001bbe:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001bc0:	f7ff fa0a 	bl	8000fd8 <HAL_GetTick>
 8001bc4:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001bc6:	e029      	b.n	8001c1c <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bcc:	f043 0210 	orr.w	r2, r3, #16
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bd8:	f043 0201 	orr.w	r2, r3, #1
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 8001be0:	2301      	movs	r3, #1
 8001be2:	e023      	b.n	8001c2c <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001be4:	f7ff f9f8 	bl	8000fd8 <HAL_GetTick>
 8001be8:	4602      	mov	r2, r0
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	2b02      	cmp	r3, #2
 8001bf0:	d914      	bls.n	8001c1c <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	f003 0301 	and.w	r3, r3, #1
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	d10d      	bne.n	8001c1c <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c04:	f043 0210 	orr.w	r2, r3, #16
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c10:	f043 0201 	orr.w	r2, r3, #1
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	e007      	b.n	8001c2c <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	f003 0301 	and.w	r3, r3, #1
 8001c26:	2b01      	cmp	r3, #1
 8001c28:	d0dc      	beq.n	8001be4 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001c2a:	2300      	movs	r3, #0
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3710      	adds	r7, #16
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}

08001c34 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b084      	sub	sp, #16
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d101      	bne.n	8001c46 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e0ed      	b.n	8001e22 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d102      	bne.n	8001c58 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f7fe ffe4 	bl	8000c20 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f042 0201 	orr.w	r2, r2, #1
 8001c66:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c68:	f7ff f9b6 	bl	8000fd8 <HAL_GetTick>
 8001c6c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001c6e:	e012      	b.n	8001c96 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001c70:	f7ff f9b2 	bl	8000fd8 <HAL_GetTick>
 8001c74:	4602      	mov	r2, r0
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	2b0a      	cmp	r3, #10
 8001c7c:	d90b      	bls.n	8001c96 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c82:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2205      	movs	r2, #5
 8001c8e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e0c5      	b.n	8001e22 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f003 0301 	and.w	r3, r3, #1
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d0e5      	beq.n	8001c70 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f022 0202 	bic.w	r2, r2, #2
 8001cb2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001cb4:	f7ff f990 	bl	8000fd8 <HAL_GetTick>
 8001cb8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001cba:	e012      	b.n	8001ce2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001cbc:	f7ff f98c 	bl	8000fd8 <HAL_GetTick>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	2b0a      	cmp	r3, #10
 8001cc8:	d90b      	bls.n	8001ce2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cce:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2205      	movs	r2, #5
 8001cda:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e09f      	b.n	8001e22 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f003 0302 	and.w	r3, r3, #2
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d1e5      	bne.n	8001cbc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	7e1b      	ldrb	r3, [r3, #24]
 8001cf4:	2b01      	cmp	r3, #1
 8001cf6:	d108      	bne.n	8001d0a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001d06:	601a      	str	r2, [r3, #0]
 8001d08:	e007      	b.n	8001d1a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001d18:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	7e5b      	ldrb	r3, [r3, #25]
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d108      	bne.n	8001d34 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001d30:	601a      	str	r2, [r3, #0]
 8001d32:	e007      	b.n	8001d44 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001d42:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	7e9b      	ldrb	r3, [r3, #26]
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d108      	bne.n	8001d5e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f042 0220 	orr.w	r2, r2, #32
 8001d5a:	601a      	str	r2, [r3, #0]
 8001d5c:	e007      	b.n	8001d6e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f022 0220 	bic.w	r2, r2, #32
 8001d6c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	7edb      	ldrb	r3, [r3, #27]
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d108      	bne.n	8001d88 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f022 0210 	bic.w	r2, r2, #16
 8001d84:	601a      	str	r2, [r3, #0]
 8001d86:	e007      	b.n	8001d98 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f042 0210 	orr.w	r2, r2, #16
 8001d96:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	7f1b      	ldrb	r3, [r3, #28]
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d108      	bne.n	8001db2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f042 0208 	orr.w	r2, r2, #8
 8001dae:	601a      	str	r2, [r3, #0]
 8001db0:	e007      	b.n	8001dc2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f022 0208 	bic.w	r2, r2, #8
 8001dc0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	7f5b      	ldrb	r3, [r3, #29]
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	d108      	bne.n	8001ddc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f042 0204 	orr.w	r2, r2, #4
 8001dd8:	601a      	str	r2, [r3, #0]
 8001dda:	e007      	b.n	8001dec <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f022 0204 	bic.w	r2, r2, #4
 8001dea:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	689a      	ldr	r2, [r3, #8]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	431a      	orrs	r2, r3
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	691b      	ldr	r3, [r3, #16]
 8001dfa:	431a      	orrs	r2, r3
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	695b      	ldr	r3, [r3, #20]
 8001e00:	ea42 0103 	orr.w	r1, r2, r3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	1e5a      	subs	r2, r3, #1
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	430a      	orrs	r2, r1
 8001e10:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2200      	movs	r2, #0
 8001e16:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001e20:	2300      	movs	r3, #0
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	3710      	adds	r7, #16
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}

08001e2a <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001e2a:	b480      	push	{r7}
 8001e2c:	b087      	sub	sp, #28
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	6078      	str	r0, [r7, #4]
 8001e32:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e40:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001e42:	7cfb      	ldrb	r3, [r7, #19]
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d003      	beq.n	8001e50 <HAL_CAN_ConfigFilter+0x26>
 8001e48:	7cfb      	ldrb	r3, [r7, #19]
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	f040 80aa 	bne.w	8001fa4 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001e56:	f043 0201 	orr.w	r2, r3, #1
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	695b      	ldr	r3, [r3, #20]
 8001e64:	f003 031f 	and.w	r3, r3, #31
 8001e68:	2201      	movs	r2, #1
 8001e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	43db      	mvns	r3, r3
 8001e7a:	401a      	ands	r2, r3
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	69db      	ldr	r3, [r3, #28]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d123      	bne.n	8001ed2 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	43db      	mvns	r3, r3
 8001e94:	401a      	ands	r2, r3
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001ea8:	683a      	ldr	r2, [r7, #0]
 8001eaa:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001eac:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	3248      	adds	r2, #72	@ 0x48
 8001eb2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001ec6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001ec8:	6979      	ldr	r1, [r7, #20]
 8001eca:	3348      	adds	r3, #72	@ 0x48
 8001ecc:	00db      	lsls	r3, r3, #3
 8001ece:	440b      	add	r3, r1
 8001ed0:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	69db      	ldr	r3, [r3, #28]
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d122      	bne.n	8001f20 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	431a      	orrs	r2, r3
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001ef6:	683a      	ldr	r2, [r7, #0]
 8001ef8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001efa:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	3248      	adds	r2, #72	@ 0x48
 8001f00:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	68db      	ldr	r3, [r3, #12]
 8001f0e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001f14:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001f16:	6979      	ldr	r1, [r7, #20]
 8001f18:	3348      	adds	r3, #72	@ 0x48
 8001f1a:	00db      	lsls	r3, r3, #3
 8001f1c:	440b      	add	r3, r1
 8001f1e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	699b      	ldr	r3, [r3, #24]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d109      	bne.n	8001f3c <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	43db      	mvns	r3, r3
 8001f32:	401a      	ands	r2, r3
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001f3a:	e007      	b.n	8001f4c <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	431a      	orrs	r2, r3
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	691b      	ldr	r3, [r3, #16]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d109      	bne.n	8001f68 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	43db      	mvns	r3, r3
 8001f5e:	401a      	ands	r2, r3
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001f66:	e007      	b.n	8001f78 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	431a      	orrs	r2, r3
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	6a1b      	ldr	r3, [r3, #32]
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	d107      	bne.n	8001f90 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	431a      	orrs	r2, r3
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001f96:	f023 0201 	bic.w	r2, r3, #1
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	e006      	b.n	8001fb2 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fa8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
  }
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	371c      	adds	r7, #28
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr

08001fbe <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001fbe:	b580      	push	{r7, lr}
 8001fc0:	b084      	sub	sp, #16
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d12e      	bne.n	8002030 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2202      	movs	r2, #2
 8001fd6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f022 0201 	bic.w	r2, r2, #1
 8001fe8:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001fea:	f7fe fff5 	bl	8000fd8 <HAL_GetTick>
 8001fee:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001ff0:	e012      	b.n	8002018 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001ff2:	f7fe fff1 	bl	8000fd8 <HAL_GetTick>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	2b0a      	cmp	r3, #10
 8001ffe:	d90b      	bls.n	8002018 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002004:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2205      	movs	r2, #5
 8002010:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	e012      	b.n	800203e <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	f003 0301 	and.w	r3, r3, #1
 8002022:	2b00      	cmp	r3, #0
 8002024:	d1e5      	bne.n	8001ff2 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2200      	movs	r2, #0
 800202a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 800202c:	2300      	movs	r3, #0
 800202e:	e006      	b.n	800203e <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002034:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800203c:	2301      	movs	r3, #1
  }
}
 800203e:	4618      	mov	r0, r3
 8002040:	3710      	adds	r7, #16
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}

08002046 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8002046:	b480      	push	{r7}
 8002048:	b089      	sub	sp, #36	@ 0x24
 800204a:	af00      	add	r7, sp, #0
 800204c:	60f8      	str	r0, [r7, #12]
 800204e:	60b9      	str	r1, [r7, #8]
 8002050:	607a      	str	r2, [r7, #4]
 8002052:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	f893 3020 	ldrb.w	r3, [r3, #32]
 800205a:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002064:	7ffb      	ldrb	r3, [r7, #31]
 8002066:	2b01      	cmp	r3, #1
 8002068:	d003      	beq.n	8002072 <HAL_CAN_AddTxMessage+0x2c>
 800206a:	7ffb      	ldrb	r3, [r7, #31]
 800206c:	2b02      	cmp	r3, #2
 800206e:	f040 80ad 	bne.w	80021cc <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002072:	69bb      	ldr	r3, [r7, #24]
 8002074:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002078:	2b00      	cmp	r3, #0
 800207a:	d10a      	bne.n	8002092 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800207c:	69bb      	ldr	r3, [r7, #24]
 800207e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002082:	2b00      	cmp	r3, #0
 8002084:	d105      	bne.n	8002092 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002086:	69bb      	ldr	r3, [r7, #24]
 8002088:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800208c:	2b00      	cmp	r3, #0
 800208e:	f000 8095 	beq.w	80021bc <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002092:	69bb      	ldr	r3, [r7, #24]
 8002094:	0e1b      	lsrs	r3, r3, #24
 8002096:	f003 0303 	and.w	r3, r3, #3
 800209a:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800209c:	2201      	movs	r2, #1
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	409a      	lsls	r2, r3
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d10d      	bne.n	80020ca <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80020b8:	68f9      	ldr	r1, [r7, #12]
 80020ba:	6809      	ldr	r1, [r1, #0]
 80020bc:	431a      	orrs	r2, r3
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	3318      	adds	r3, #24
 80020c2:	011b      	lsls	r3, r3, #4
 80020c4:	440b      	add	r3, r1
 80020c6:	601a      	str	r2, [r3, #0]
 80020c8:	e00f      	b.n	80020ea <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80020d4:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80020da:	68f9      	ldr	r1, [r7, #12]
 80020dc:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80020de:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	3318      	adds	r3, #24
 80020e4:	011b      	lsls	r3, r3, #4
 80020e6:	440b      	add	r3, r1
 80020e8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	6819      	ldr	r1, [r3, #0]
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	691a      	ldr	r2, [r3, #16]
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	3318      	adds	r3, #24
 80020f6:	011b      	lsls	r3, r3, #4
 80020f8:	440b      	add	r3, r1
 80020fa:	3304      	adds	r3, #4
 80020fc:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	7d1b      	ldrb	r3, [r3, #20]
 8002102:	2b01      	cmp	r3, #1
 8002104:	d111      	bne.n	800212a <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	3318      	adds	r3, #24
 800210e:	011b      	lsls	r3, r3, #4
 8002110:	4413      	add	r3, r2
 8002112:	3304      	adds	r3, #4
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	68fa      	ldr	r2, [r7, #12]
 8002118:	6811      	ldr	r1, [r2, #0]
 800211a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	3318      	adds	r3, #24
 8002122:	011b      	lsls	r3, r3, #4
 8002124:	440b      	add	r3, r1
 8002126:	3304      	adds	r3, #4
 8002128:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	3307      	adds	r3, #7
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	061a      	lsls	r2, r3, #24
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	3306      	adds	r3, #6
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	041b      	lsls	r3, r3, #16
 800213a:	431a      	orrs	r2, r3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	3305      	adds	r3, #5
 8002140:	781b      	ldrb	r3, [r3, #0]
 8002142:	021b      	lsls	r3, r3, #8
 8002144:	4313      	orrs	r3, r2
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	3204      	adds	r2, #4
 800214a:	7812      	ldrb	r2, [r2, #0]
 800214c:	4610      	mov	r0, r2
 800214e:	68fa      	ldr	r2, [r7, #12]
 8002150:	6811      	ldr	r1, [r2, #0]
 8002152:	ea43 0200 	orr.w	r2, r3, r0
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	011b      	lsls	r3, r3, #4
 800215a:	440b      	add	r3, r1
 800215c:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8002160:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	3303      	adds	r3, #3
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	061a      	lsls	r2, r3, #24
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	3302      	adds	r3, #2
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	041b      	lsls	r3, r3, #16
 8002172:	431a      	orrs	r2, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	3301      	adds	r3, #1
 8002178:	781b      	ldrb	r3, [r3, #0]
 800217a:	021b      	lsls	r3, r3, #8
 800217c:	4313      	orrs	r3, r2
 800217e:	687a      	ldr	r2, [r7, #4]
 8002180:	7812      	ldrb	r2, [r2, #0]
 8002182:	4610      	mov	r0, r2
 8002184:	68fa      	ldr	r2, [r7, #12]
 8002186:	6811      	ldr	r1, [r2, #0]
 8002188:	ea43 0200 	orr.w	r2, r3, r0
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	011b      	lsls	r3, r3, #4
 8002190:	440b      	add	r3, r1
 8002192:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8002196:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	3318      	adds	r3, #24
 80021a0:	011b      	lsls	r3, r3, #4
 80021a2:	4413      	add	r3, r2
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	68fa      	ldr	r2, [r7, #12]
 80021a8:	6811      	ldr	r1, [r2, #0]
 80021aa:	f043 0201 	orr.w	r2, r3, #1
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	3318      	adds	r3, #24
 80021b2:	011b      	lsls	r3, r3, #4
 80021b4:	440b      	add	r3, r1
 80021b6:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80021b8:	2300      	movs	r3, #0
 80021ba:	e00e      	b.n	80021da <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021c0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	e006      	b.n	80021da <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021d0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
  }
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3724      	adds	r7, #36	@ 0x24
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr

080021e6 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80021e6:	b480      	push	{r7}
 80021e8:	b087      	sub	sp, #28
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	60f8      	str	r0, [r7, #12]
 80021ee:	60b9      	str	r1, [r7, #8]
 80021f0:	607a      	str	r2, [r7, #4]
 80021f2:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021fa:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80021fc:	7dfb      	ldrb	r3, [r7, #23]
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d003      	beq.n	800220a <HAL_CAN_GetRxMessage+0x24>
 8002202:	7dfb      	ldrb	r3, [r7, #23]
 8002204:	2b02      	cmp	r3, #2
 8002206:	f040 8103 	bne.w	8002410 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d10e      	bne.n	800222e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	68db      	ldr	r3, [r3, #12]
 8002216:	f003 0303 	and.w	r3, r3, #3
 800221a:	2b00      	cmp	r3, #0
 800221c:	d116      	bne.n	800224c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002222:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e0f7      	b.n	800241e <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	691b      	ldr	r3, [r3, #16]
 8002234:	f003 0303 	and.w	r3, r3, #3
 8002238:	2b00      	cmp	r3, #0
 800223a:	d107      	bne.n	800224c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002240:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	e0e8      	b.n	800241e <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	331b      	adds	r3, #27
 8002254:	011b      	lsls	r3, r3, #4
 8002256:	4413      	add	r3, r2
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 0204 	and.w	r2, r3, #4
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d10c      	bne.n	8002284 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	331b      	adds	r3, #27
 8002272:	011b      	lsls	r3, r3, #4
 8002274:	4413      	add	r3, r2
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	0d5b      	lsrs	r3, r3, #21
 800227a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	601a      	str	r2, [r3, #0]
 8002282:	e00b      	b.n	800229c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	331b      	adds	r3, #27
 800228c:	011b      	lsls	r3, r3, #4
 800228e:	4413      	add	r3, r2
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	08db      	lsrs	r3, r3, #3
 8002294:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	331b      	adds	r3, #27
 80022a4:	011b      	lsls	r3, r3, #4
 80022a6:	4413      	add	r3, r2
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 0202 	and.w	r2, r3, #2
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	331b      	adds	r3, #27
 80022ba:	011b      	lsls	r3, r3, #4
 80022bc:	4413      	add	r3, r2
 80022be:	3304      	adds	r3, #4
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0308 	and.w	r3, r3, #8
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d003      	beq.n	80022d2 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2208      	movs	r2, #8
 80022ce:	611a      	str	r2, [r3, #16]
 80022d0:	e00b      	b.n	80022ea <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	331b      	adds	r3, #27
 80022da:	011b      	lsls	r3, r3, #4
 80022dc:	4413      	add	r3, r2
 80022de:	3304      	adds	r3, #4
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 020f 	and.w	r2, r3, #15
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	331b      	adds	r3, #27
 80022f2:	011b      	lsls	r3, r3, #4
 80022f4:	4413      	add	r3, r2
 80022f6:	3304      	adds	r3, #4
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	0a1b      	lsrs	r3, r3, #8
 80022fc:	b2da      	uxtb	r2, r3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	331b      	adds	r3, #27
 800230a:	011b      	lsls	r3, r3, #4
 800230c:	4413      	add	r3, r2
 800230e:	3304      	adds	r3, #4
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	0c1b      	lsrs	r3, r3, #16
 8002314:	b29a      	uxth	r2, r3
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	011b      	lsls	r3, r3, #4
 8002322:	4413      	add	r3, r2
 8002324:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	b2da      	uxtb	r2, r3
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	011b      	lsls	r3, r3, #4
 8002338:	4413      	add	r3, r2
 800233a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	0a1a      	lsrs	r2, r3, #8
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	3301      	adds	r3, #1
 8002346:	b2d2      	uxtb	r2, r2
 8002348:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	011b      	lsls	r3, r3, #4
 8002352:	4413      	add	r3, r2
 8002354:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	0c1a      	lsrs	r2, r3, #16
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	3302      	adds	r3, #2
 8002360:	b2d2      	uxtb	r2, r2
 8002362:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	011b      	lsls	r3, r3, #4
 800236c:	4413      	add	r3, r2
 800236e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	0e1a      	lsrs	r2, r3, #24
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	3303      	adds	r3, #3
 800237a:	b2d2      	uxtb	r2, r2
 800237c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	011b      	lsls	r3, r3, #4
 8002386:	4413      	add	r3, r2
 8002388:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	3304      	adds	r3, #4
 8002392:	b2d2      	uxtb	r2, r2
 8002394:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	011b      	lsls	r3, r3, #4
 800239e:	4413      	add	r3, r2
 80023a0:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	0a1a      	lsrs	r2, r3, #8
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	3305      	adds	r3, #5
 80023ac:	b2d2      	uxtb	r2, r2
 80023ae:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	011b      	lsls	r3, r3, #4
 80023b8:	4413      	add	r3, r2
 80023ba:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	0c1a      	lsrs	r2, r3, #16
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	3306      	adds	r3, #6
 80023c6:	b2d2      	uxtb	r2, r2
 80023c8:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	011b      	lsls	r3, r3, #4
 80023d2:	4413      	add	r3, r2
 80023d4:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	0e1a      	lsrs	r2, r3, #24
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	3307      	adds	r3, #7
 80023e0:	b2d2      	uxtb	r2, r2
 80023e2:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d108      	bne.n	80023fc <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	68da      	ldr	r2, [r3, #12]
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f042 0220 	orr.w	r2, r2, #32
 80023f8:	60da      	str	r2, [r3, #12]
 80023fa:	e007      	b.n	800240c <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	691a      	ldr	r2, [r3, #16]
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f042 0220 	orr.w	r2, r2, #32
 800240a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800240c:	2300      	movs	r3, #0
 800240e:	e006      	b.n	800241e <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002414:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
  }
}
 800241e:	4618      	mov	r0, r3
 8002420:	371c      	adds	r7, #28
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr

0800242a <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800242a:	b480      	push	{r7}
 800242c:	b085      	sub	sp, #20
 800242e:	af00      	add	r7, sp, #0
 8002430:	6078      	str	r0, [r7, #4]
 8002432:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	f893 3020 	ldrb.w	r3, [r3, #32]
 800243a:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800243c:	7bfb      	ldrb	r3, [r7, #15]
 800243e:	2b01      	cmp	r3, #1
 8002440:	d002      	beq.n	8002448 <HAL_CAN_ActivateNotification+0x1e>
 8002442:	7bfb      	ldrb	r3, [r7, #15]
 8002444:	2b02      	cmp	r3, #2
 8002446:	d109      	bne.n	800245c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	6959      	ldr	r1, [r3, #20]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	683a      	ldr	r2, [r7, #0]
 8002454:	430a      	orrs	r2, r1
 8002456:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002458:	2300      	movs	r3, #0
 800245a:	e006      	b.n	800246a <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002460:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002468:	2301      	movs	r3, #1
  }
}
 800246a:	4618      	mov	r0, r3
 800246c:	3714      	adds	r7, #20
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr

08002476 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002476:	b580      	push	{r7, lr}
 8002478:	b08a      	sub	sp, #40	@ 0x28
 800247a:	af00      	add	r7, sp, #0
 800247c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800247e:	2300      	movs	r3, #0
 8002480:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	695b      	ldr	r3, [r3, #20]
 8002488:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	691b      	ldr	r3, [r3, #16]
 80024a8:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	699b      	ldr	r3, [r3, #24]
 80024b0:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80024b2:	6a3b      	ldr	r3, [r7, #32]
 80024b4:	f003 0301 	and.w	r3, r3, #1
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d07c      	beq.n	80025b6 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80024bc:	69bb      	ldr	r3, [r7, #24]
 80024be:	f003 0301 	and.w	r3, r3, #1
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d023      	beq.n	800250e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	2201      	movs	r2, #1
 80024cc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80024ce:	69bb      	ldr	r3, [r7, #24]
 80024d0:	f003 0302 	and.w	r3, r3, #2
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d003      	beq.n	80024e0 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80024d8:	6878      	ldr	r0, [r7, #4]
 80024da:	f000 f983 	bl	80027e4 <HAL_CAN_TxMailbox0CompleteCallback>
 80024de:	e016      	b.n	800250e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80024e0:	69bb      	ldr	r3, [r7, #24]
 80024e2:	f003 0304 	and.w	r3, r3, #4
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d004      	beq.n	80024f4 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80024ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024ec:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80024f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80024f2:	e00c      	b.n	800250e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80024f4:	69bb      	ldr	r3, [r7, #24]
 80024f6:	f003 0308 	and.w	r3, r3, #8
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d004      	beq.n	8002508 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80024fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002500:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002504:	627b      	str	r3, [r7, #36]	@ 0x24
 8002506:	e002      	b.n	800250e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002508:	6878      	ldr	r0, [r7, #4]
 800250a:	f000 f989 	bl	8002820 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800250e:	69bb      	ldr	r3, [r7, #24]
 8002510:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002514:	2b00      	cmp	r3, #0
 8002516:	d024      	beq.n	8002562 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002520:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002522:	69bb      	ldr	r3, [r7, #24]
 8002524:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002528:	2b00      	cmp	r3, #0
 800252a:	d003      	beq.n	8002534 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	f000 f963 	bl	80027f8 <HAL_CAN_TxMailbox1CompleteCallback>
 8002532:	e016      	b.n	8002562 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002534:	69bb      	ldr	r3, [r7, #24]
 8002536:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800253a:	2b00      	cmp	r3, #0
 800253c:	d004      	beq.n	8002548 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800253e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002540:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002544:	627b      	str	r3, [r7, #36]	@ 0x24
 8002546:	e00c      	b.n	8002562 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002548:	69bb      	ldr	r3, [r7, #24]
 800254a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800254e:	2b00      	cmp	r3, #0
 8002550:	d004      	beq.n	800255c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002554:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002558:	627b      	str	r3, [r7, #36]	@ 0x24
 800255a:	e002      	b.n	8002562 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800255c:	6878      	ldr	r0, [r7, #4]
 800255e:	f000 f969 	bl	8002834 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002562:	69bb      	ldr	r3, [r7, #24]
 8002564:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002568:	2b00      	cmp	r3, #0
 800256a:	d024      	beq.n	80025b6 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002574:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002576:	69bb      	ldr	r3, [r7, #24]
 8002578:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800257c:	2b00      	cmp	r3, #0
 800257e:	d003      	beq.n	8002588 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002580:	6878      	ldr	r0, [r7, #4]
 8002582:	f000 f943 	bl	800280c <HAL_CAN_TxMailbox2CompleteCallback>
 8002586:	e016      	b.n	80025b6 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002588:	69bb      	ldr	r3, [r7, #24]
 800258a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800258e:	2b00      	cmp	r3, #0
 8002590:	d004      	beq.n	800259c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002594:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002598:	627b      	str	r3, [r7, #36]	@ 0x24
 800259a:	e00c      	b.n	80025b6 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800259c:	69bb      	ldr	r3, [r7, #24]
 800259e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d004      	beq.n	80025b0 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80025a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80025ae:	e002      	b.n	80025b6 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80025b0:	6878      	ldr	r0, [r7, #4]
 80025b2:	f000 f949 	bl	8002848 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80025b6:	6a3b      	ldr	r3, [r7, #32]
 80025b8:	f003 0308 	and.w	r3, r3, #8
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d00c      	beq.n	80025da <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	f003 0310 	and.w	r3, r3, #16
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d007      	beq.n	80025da <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80025ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025cc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80025d0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	2210      	movs	r2, #16
 80025d8:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80025da:	6a3b      	ldr	r3, [r7, #32]
 80025dc:	f003 0304 	and.w	r3, r3, #4
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d00b      	beq.n	80025fc <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	f003 0308 	and.w	r3, r3, #8
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d006      	beq.n	80025fc <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	2208      	movs	r2, #8
 80025f4:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	f000 f930 	bl	800285c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80025fc:	6a3b      	ldr	r3, [r7, #32]
 80025fe:	f003 0302 	and.w	r3, r3, #2
 8002602:	2b00      	cmp	r3, #0
 8002604:	d009      	beq.n	800261a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	f003 0303 	and.w	r3, r3, #3
 8002610:	2b00      	cmp	r3, #0
 8002612:	d002      	beq.n	800261a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	f7fd fe65 	bl	80002e4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800261a:	6a3b      	ldr	r3, [r7, #32]
 800261c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002620:	2b00      	cmp	r3, #0
 8002622:	d00c      	beq.n	800263e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	f003 0310 	and.w	r3, r3, #16
 800262a:	2b00      	cmp	r3, #0
 800262c:	d007      	beq.n	800263e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800262e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002630:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002634:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	2210      	movs	r2, #16
 800263c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800263e:	6a3b      	ldr	r3, [r7, #32]
 8002640:	f003 0320 	and.w	r3, r3, #32
 8002644:	2b00      	cmp	r3, #0
 8002646:	d00b      	beq.n	8002660 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	f003 0308 	and.w	r3, r3, #8
 800264e:	2b00      	cmp	r3, #0
 8002650:	d006      	beq.n	8002660 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	2208      	movs	r2, #8
 8002658:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f000 f912 	bl	8002884 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002660:	6a3b      	ldr	r3, [r7, #32]
 8002662:	f003 0310 	and.w	r3, r3, #16
 8002666:	2b00      	cmp	r3, #0
 8002668:	d009      	beq.n	800267e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	691b      	ldr	r3, [r3, #16]
 8002670:	f003 0303 	and.w	r3, r3, #3
 8002674:	2b00      	cmp	r3, #0
 8002676:	d002      	beq.n	800267e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002678:	6878      	ldr	r0, [r7, #4]
 800267a:	f000 f8f9 	bl	8002870 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800267e:	6a3b      	ldr	r3, [r7, #32]
 8002680:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002684:	2b00      	cmp	r3, #0
 8002686:	d00b      	beq.n	80026a0 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002688:	69fb      	ldr	r3, [r7, #28]
 800268a:	f003 0310 	and.w	r3, r3, #16
 800268e:	2b00      	cmp	r3, #0
 8002690:	d006      	beq.n	80026a0 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	2210      	movs	r2, #16
 8002698:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f000 f8fc 	bl	8002898 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80026a0:	6a3b      	ldr	r3, [r7, #32]
 80026a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d00b      	beq.n	80026c2 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	f003 0308 	and.w	r3, r3, #8
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d006      	beq.n	80026c2 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	2208      	movs	r2, #8
 80026ba:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80026bc:	6878      	ldr	r0, [r7, #4]
 80026be:	f000 f8f5 	bl	80028ac <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80026c2:	6a3b      	ldr	r3, [r7, #32]
 80026c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d07b      	beq.n	80027c4 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80026cc:	69fb      	ldr	r3, [r7, #28]
 80026ce:	f003 0304 	and.w	r3, r3, #4
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d072      	beq.n	80027bc <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80026d6:	6a3b      	ldr	r3, [r7, #32]
 80026d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d008      	beq.n	80026f2 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d003      	beq.n	80026f2 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80026ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ec:	f043 0301 	orr.w	r3, r3, #1
 80026f0:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80026f2:	6a3b      	ldr	r3, [r7, #32]
 80026f4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d008      	beq.n	800270e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002702:	2b00      	cmp	r3, #0
 8002704:	d003      	beq.n	800270e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002708:	f043 0302 	orr.w	r3, r3, #2
 800270c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800270e:	6a3b      	ldr	r3, [r7, #32]
 8002710:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002714:	2b00      	cmp	r3, #0
 8002716:	d008      	beq.n	800272a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800271e:	2b00      	cmp	r3, #0
 8002720:	d003      	beq.n	800272a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002724:	f043 0304 	orr.w	r3, r3, #4
 8002728:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800272a:	6a3b      	ldr	r3, [r7, #32]
 800272c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002730:	2b00      	cmp	r3, #0
 8002732:	d043      	beq.n	80027bc <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800273a:	2b00      	cmp	r3, #0
 800273c:	d03e      	beq.n	80027bc <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002744:	2b60      	cmp	r3, #96	@ 0x60
 8002746:	d02b      	beq.n	80027a0 <HAL_CAN_IRQHandler+0x32a>
 8002748:	2b60      	cmp	r3, #96	@ 0x60
 800274a:	d82e      	bhi.n	80027aa <HAL_CAN_IRQHandler+0x334>
 800274c:	2b50      	cmp	r3, #80	@ 0x50
 800274e:	d022      	beq.n	8002796 <HAL_CAN_IRQHandler+0x320>
 8002750:	2b50      	cmp	r3, #80	@ 0x50
 8002752:	d82a      	bhi.n	80027aa <HAL_CAN_IRQHandler+0x334>
 8002754:	2b40      	cmp	r3, #64	@ 0x40
 8002756:	d019      	beq.n	800278c <HAL_CAN_IRQHandler+0x316>
 8002758:	2b40      	cmp	r3, #64	@ 0x40
 800275a:	d826      	bhi.n	80027aa <HAL_CAN_IRQHandler+0x334>
 800275c:	2b30      	cmp	r3, #48	@ 0x30
 800275e:	d010      	beq.n	8002782 <HAL_CAN_IRQHandler+0x30c>
 8002760:	2b30      	cmp	r3, #48	@ 0x30
 8002762:	d822      	bhi.n	80027aa <HAL_CAN_IRQHandler+0x334>
 8002764:	2b10      	cmp	r3, #16
 8002766:	d002      	beq.n	800276e <HAL_CAN_IRQHandler+0x2f8>
 8002768:	2b20      	cmp	r3, #32
 800276a:	d005      	beq.n	8002778 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800276c:	e01d      	b.n	80027aa <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800276e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002770:	f043 0308 	orr.w	r3, r3, #8
 8002774:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002776:	e019      	b.n	80027ac <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800277a:	f043 0310 	orr.w	r3, r3, #16
 800277e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002780:	e014      	b.n	80027ac <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002784:	f043 0320 	orr.w	r3, r3, #32
 8002788:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800278a:	e00f      	b.n	80027ac <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800278c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800278e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002792:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002794:	e00a      	b.n	80027ac <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002798:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800279c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800279e:	e005      	b.n	80027ac <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80027a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027a6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80027a8:	e000      	b.n	80027ac <HAL_CAN_IRQHandler+0x336>
            break;
 80027aa:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	699a      	ldr	r2, [r3, #24]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80027ba:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	2204      	movs	r2, #4
 80027c2:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80027c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d008      	beq.n	80027dc <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80027ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027d0:	431a      	orrs	r2, r3
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f000 f872 	bl	80028c0 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80027dc:	bf00      	nop
 80027de:	3728      	adds	r7, #40	@ 0x28
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}

080027e4 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b083      	sub	sp, #12
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80027ec:	bf00      	nop
 80027ee:	370c      	adds	r7, #12
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr

080027f8 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b083      	sub	sp, #12
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002800:	bf00      	nop
 8002802:	370c      	adds	r7, #12
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr

0800280c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800280c:	b480      	push	{r7}
 800280e:	b083      	sub	sp, #12
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002814:	bf00      	nop
 8002816:	370c      	adds	r7, #12
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr

08002820 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002820:	b480      	push	{r7}
 8002822:	b083      	sub	sp, #12
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002828:	bf00      	nop
 800282a:	370c      	adds	r7, #12
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr

08002834 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002834:	b480      	push	{r7}
 8002836:	b083      	sub	sp, #12
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800283c:	bf00      	nop
 800283e:	370c      	adds	r7, #12
 8002840:	46bd      	mov	sp, r7
 8002842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002846:	4770      	bx	lr

08002848 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002848:	b480      	push	{r7}
 800284a:	b083      	sub	sp, #12
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002850:	bf00      	nop
 8002852:	370c      	adds	r7, #12
 8002854:	46bd      	mov	sp, r7
 8002856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285a:	4770      	bx	lr

0800285c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800285c:	b480      	push	{r7}
 800285e:	b083      	sub	sp, #12
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002864:	bf00      	nop
 8002866:	370c      	adds	r7, #12
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr

08002870 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002878:	bf00      	nop
 800287a:	370c      	adds	r7, #12
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr

08002884 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002884:	b480      	push	{r7}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800288c:	bf00      	nop
 800288e:	370c      	adds	r7, #12
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr

08002898 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002898:	b480      	push	{r7}
 800289a:	b083      	sub	sp, #12
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80028a0:	bf00      	nop
 80028a2:	370c      	adds	r7, #12
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr

080028ac <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b083      	sub	sp, #12
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80028b4:	bf00      	nop
 80028b6:	370c      	adds	r7, #12
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr

080028c0 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80028c8:	bf00      	nop
 80028ca:	370c      	adds	r7, #12
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr

080028d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b085      	sub	sp, #20
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	f003 0307 	and.w	r3, r3, #7
 80028e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028e4:	4b0c      	ldr	r3, [pc, #48]	@ (8002918 <__NVIC_SetPriorityGrouping+0x44>)
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028ea:	68ba      	ldr	r2, [r7, #8]
 80028ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80028f0:	4013      	ands	r3, r2
 80028f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028fc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002900:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002904:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002906:	4a04      	ldr	r2, [pc, #16]	@ (8002918 <__NVIC_SetPriorityGrouping+0x44>)
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	60d3      	str	r3, [r2, #12]
}
 800290c:	bf00      	nop
 800290e:	3714      	adds	r7, #20
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr
 8002918:	e000ed00 	.word	0xe000ed00

0800291c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800291c:	b480      	push	{r7}
 800291e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002920:	4b04      	ldr	r3, [pc, #16]	@ (8002934 <__NVIC_GetPriorityGrouping+0x18>)
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	0a1b      	lsrs	r3, r3, #8
 8002926:	f003 0307 	and.w	r3, r3, #7
}
 800292a:	4618      	mov	r0, r3
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr
 8002934:	e000ed00 	.word	0xe000ed00

08002938 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
 800293e:	4603      	mov	r3, r0
 8002940:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002946:	2b00      	cmp	r3, #0
 8002948:	db0b      	blt.n	8002962 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800294a:	79fb      	ldrb	r3, [r7, #7]
 800294c:	f003 021f 	and.w	r2, r3, #31
 8002950:	4907      	ldr	r1, [pc, #28]	@ (8002970 <__NVIC_EnableIRQ+0x38>)
 8002952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002956:	095b      	lsrs	r3, r3, #5
 8002958:	2001      	movs	r0, #1
 800295a:	fa00 f202 	lsl.w	r2, r0, r2
 800295e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002962:	bf00      	nop
 8002964:	370c      	adds	r7, #12
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr
 800296e:	bf00      	nop
 8002970:	e000e100 	.word	0xe000e100

08002974 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	4603      	mov	r3, r0
 800297c:	6039      	str	r1, [r7, #0]
 800297e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002980:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002984:	2b00      	cmp	r3, #0
 8002986:	db0a      	blt.n	800299e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	b2da      	uxtb	r2, r3
 800298c:	490c      	ldr	r1, [pc, #48]	@ (80029c0 <__NVIC_SetPriority+0x4c>)
 800298e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002992:	0112      	lsls	r2, r2, #4
 8002994:	b2d2      	uxtb	r2, r2
 8002996:	440b      	add	r3, r1
 8002998:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800299c:	e00a      	b.n	80029b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	b2da      	uxtb	r2, r3
 80029a2:	4908      	ldr	r1, [pc, #32]	@ (80029c4 <__NVIC_SetPriority+0x50>)
 80029a4:	79fb      	ldrb	r3, [r7, #7]
 80029a6:	f003 030f 	and.w	r3, r3, #15
 80029aa:	3b04      	subs	r3, #4
 80029ac:	0112      	lsls	r2, r2, #4
 80029ae:	b2d2      	uxtb	r2, r2
 80029b0:	440b      	add	r3, r1
 80029b2:	761a      	strb	r2, [r3, #24]
}
 80029b4:	bf00      	nop
 80029b6:	370c      	adds	r7, #12
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr
 80029c0:	e000e100 	.word	0xe000e100
 80029c4:	e000ed00 	.word	0xe000ed00

080029c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b089      	sub	sp, #36	@ 0x24
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	60f8      	str	r0, [r7, #12]
 80029d0:	60b9      	str	r1, [r7, #8]
 80029d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	f003 0307 	and.w	r3, r3, #7
 80029da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029dc:	69fb      	ldr	r3, [r7, #28]
 80029de:	f1c3 0307 	rsb	r3, r3, #7
 80029e2:	2b04      	cmp	r3, #4
 80029e4:	bf28      	it	cs
 80029e6:	2304      	movcs	r3, #4
 80029e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	3304      	adds	r3, #4
 80029ee:	2b06      	cmp	r3, #6
 80029f0:	d902      	bls.n	80029f8 <NVIC_EncodePriority+0x30>
 80029f2:	69fb      	ldr	r3, [r7, #28]
 80029f4:	3b03      	subs	r3, #3
 80029f6:	e000      	b.n	80029fa <NVIC_EncodePriority+0x32>
 80029f8:	2300      	movs	r3, #0
 80029fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029fc:	f04f 32ff 	mov.w	r2, #4294967295
 8002a00:	69bb      	ldr	r3, [r7, #24]
 8002a02:	fa02 f303 	lsl.w	r3, r2, r3
 8002a06:	43da      	mvns	r2, r3
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	401a      	ands	r2, r3
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a10:	f04f 31ff 	mov.w	r1, #4294967295
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	fa01 f303 	lsl.w	r3, r1, r3
 8002a1a:	43d9      	mvns	r1, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a20:	4313      	orrs	r3, r2
         );
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3724      	adds	r7, #36	@ 0x24
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr

08002a2e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a2e:	b580      	push	{r7, lr}
 8002a30:	b082      	sub	sp, #8
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f7ff ff4c 	bl	80028d4 <__NVIC_SetPriorityGrouping>
}
 8002a3c:	bf00      	nop
 8002a3e:	3708      	adds	r7, #8
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}

08002a44 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b086      	sub	sp, #24
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	60b9      	str	r1, [r7, #8]
 8002a4e:	607a      	str	r2, [r7, #4]
 8002a50:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a52:	2300      	movs	r3, #0
 8002a54:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a56:	f7ff ff61 	bl	800291c <__NVIC_GetPriorityGrouping>
 8002a5a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a5c:	687a      	ldr	r2, [r7, #4]
 8002a5e:	68b9      	ldr	r1, [r7, #8]
 8002a60:	6978      	ldr	r0, [r7, #20]
 8002a62:	f7ff ffb1 	bl	80029c8 <NVIC_EncodePriority>
 8002a66:	4602      	mov	r2, r0
 8002a68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a6c:	4611      	mov	r1, r2
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f7ff ff80 	bl	8002974 <__NVIC_SetPriority>
}
 8002a74:	bf00      	nop
 8002a76:	3718      	adds	r7, #24
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}

08002a7c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b082      	sub	sp, #8
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	4603      	mov	r3, r0
 8002a84:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f7ff ff54 	bl	8002938 <__NVIC_EnableIRQ>
}
 8002a90:	bf00      	nop
 8002a92:	3708      	adds	r7, #8
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}

08002a98 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b084      	sub	sp, #16
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d101      	bne.n	8002aae <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e037      	b.n	8002b1e <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2202      	movs	r2, #2
 8002ab2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002ac4:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002ac8:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002ad2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ade:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	695b      	ldr	r3, [r3, #20]
 8002ae4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002aea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	69db      	ldr	r3, [r3, #28]
 8002af0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002af2:	68fa      	ldr	r2, [r7, #12]
 8002af4:	4313      	orrs	r3, r2
 8002af6:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	68fa      	ldr	r2, [r7, #12]
 8002afe:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	f000 f941 	bl	8002d88 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2200      	movs	r2, #0
 8002b18:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002b1c:	2300      	movs	r3, #0
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3710      	adds	r7, #16
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}

08002b26 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b26:	b580      	push	{r7, lr}
 8002b28:	b086      	sub	sp, #24
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	60f8      	str	r0, [r7, #12]
 8002b2e:	60b9      	str	r1, [r7, #8]
 8002b30:	607a      	str	r2, [r7, #4]
 8002b32:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b34:	2300      	movs	r3, #0
 8002b36:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d101      	bne.n	8002b46 <HAL_DMA_Start_IT+0x20>
 8002b42:	2302      	movs	r3, #2
 8002b44:	e04a      	b.n	8002bdc <HAL_DMA_Start_IT+0xb6>
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2201      	movs	r2, #1
 8002b4a:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d13a      	bne.n	8002bce <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2202      	movs	r2, #2
 8002b5c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2200      	movs	r2, #0
 8002b64:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f022 0201 	bic.w	r2, r2, #1
 8002b74:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	687a      	ldr	r2, [r7, #4]
 8002b7a:	68b9      	ldr	r1, [r7, #8]
 8002b7c:	68f8      	ldr	r0, [r7, #12]
 8002b7e:	f000 f8d4 	bl	8002d2a <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d008      	beq.n	8002b9c <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f042 020e 	orr.w	r2, r2, #14
 8002b98:	601a      	str	r2, [r3, #0]
 8002b9a:	e00f      	b.n	8002bbc <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f042 020a 	orr.w	r2, r2, #10
 8002baa:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f022 0204 	bic.w	r2, r2, #4
 8002bba:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f042 0201 	orr.w	r2, r2, #1
 8002bca:	601a      	str	r2, [r3, #0]
 8002bcc:	e005      	b.n	8002bda <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002bd6:	2302      	movs	r3, #2
 8002bd8:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002bda:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3718      	adds	r7, #24
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}

08002be4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b084      	sub	sp, #16
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c00:	2204      	movs	r2, #4
 8002c02:	409a      	lsls	r2, r3
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	4013      	ands	r3, r2
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d024      	beq.n	8002c56 <HAL_DMA_IRQHandler+0x72>
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	f003 0304 	and.w	r3, r3, #4
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d01f      	beq.n	8002c56 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 0320 	and.w	r3, r3, #32
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d107      	bne.n	8002c34 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f022 0204 	bic.w	r2, r2, #4
 8002c32:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c3c:	2104      	movs	r1, #4
 8002c3e:	fa01 f202 	lsl.w	r2, r1, r2
 8002c42:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d06a      	beq.n	8002d22 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c50:	6878      	ldr	r0, [r7, #4]
 8002c52:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002c54:	e065      	b.n	8002d22 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c5a:	2202      	movs	r2, #2
 8002c5c:	409a      	lsls	r2, r3
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	4013      	ands	r3, r2
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d02c      	beq.n	8002cc0 <HAL_DMA_IRQHandler+0xdc>
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	f003 0302 	and.w	r3, r3, #2
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d027      	beq.n	8002cc0 <HAL_DMA_IRQHandler+0xdc>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 0320 	and.w	r3, r3, #32
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d10b      	bne.n	8002c96 <HAL_DMA_IRQHandler+0xb2>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f022 020a 	bic.w	r2, r2, #10
 8002c8c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2201      	movs	r2, #1
 8002c92:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c9e:	2102      	movs	r1, #2
 8002ca0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ca4:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d035      	beq.n	8002d22 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002cbe:	e030      	b.n	8002d22 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cc4:	2208      	movs	r2, #8
 8002cc6:	409a      	lsls	r2, r3
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	4013      	ands	r3, r2
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d028      	beq.n	8002d22 <HAL_DMA_IRQHandler+0x13e>
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	f003 0308 	and.w	r3, r3, #8
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d023      	beq.n	8002d22 <HAL_DMA_IRQHandler+0x13e>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f022 020e 	bic.w	r2, r2, #14
 8002ce8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cf2:	2101      	movs	r1, #1
 8002cf4:	fa01 f202 	lsl.w	r2, r1, r2
 8002cf8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2201      	movs	r2, #1
 8002d04:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferErrorCallback != NULL)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d004      	beq.n	8002d22 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d1c:	6878      	ldr	r0, [r7, #4]
 8002d1e:	4798      	blx	r3
    }
  }
}
 8002d20:	e7ff      	b.n	8002d22 <HAL_DMA_IRQHandler+0x13e>
 8002d22:	bf00      	nop
 8002d24:	3710      	adds	r7, #16
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}

08002d2a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d2a:	b480      	push	{r7}
 8002d2c:	b085      	sub	sp, #20
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	60f8      	str	r0, [r7, #12]
 8002d32:	60b9      	str	r1, [r7, #8]
 8002d34:	607a      	str	r2, [r7, #4]
 8002d36:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d40:	2101      	movs	r1, #1
 8002d42:	fa01 f202 	lsl.w	r2, r1, r2
 8002d46:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	683a      	ldr	r2, [r7, #0]
 8002d4e:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	2b10      	cmp	r3, #16
 8002d56:	d108      	bne.n	8002d6a <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	687a      	ldr	r2, [r7, #4]
 8002d5e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	68ba      	ldr	r2, [r7, #8]
 8002d66:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002d68:	e007      	b.n	8002d7a <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	68ba      	ldr	r2, [r7, #8]
 8002d70:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	687a      	ldr	r2, [r7, #4]
 8002d78:	60da      	str	r2, [r3, #12]
}
 8002d7a:	bf00      	nop
 8002d7c:	3714      	adds	r7, #20
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr
	...

08002d88 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b083      	sub	sp, #12
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	461a      	mov	r2, r3
 8002d96:	4b09      	ldr	r3, [pc, #36]	@ (8002dbc <DMA_CalcBaseAndBitshift+0x34>)
 8002d98:	4413      	add	r3, r2
 8002d9a:	4a09      	ldr	r2, [pc, #36]	@ (8002dc0 <DMA_CalcBaseAndBitshift+0x38>)
 8002d9c:	fba2 2303 	umull	r2, r3, r2, r3
 8002da0:	091b      	lsrs	r3, r3, #4
 8002da2:	009a      	lsls	r2, r3, #2
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	4a06      	ldr	r2, [pc, #24]	@ (8002dc4 <DMA_CalcBaseAndBitshift+0x3c>)
 8002dac:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 8002dae:	bf00      	nop
 8002db0:	370c      	adds	r7, #12
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr
 8002dba:	bf00      	nop
 8002dbc:	bffdfff8 	.word	0xbffdfff8
 8002dc0:	cccccccd 	.word	0xcccccccd
 8002dc4:	40020000 	.word	0x40020000

08002dc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b087      	sub	sp, #28
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002dd6:	e14e      	b.n	8003076 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	2101      	movs	r1, #1
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	fa01 f303 	lsl.w	r3, r1, r3
 8002de4:	4013      	ands	r3, r2
 8002de6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	f000 8140 	beq.w	8003070 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	f003 0303 	and.w	r3, r3, #3
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d005      	beq.n	8002e08 <HAL_GPIO_Init+0x40>
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	f003 0303 	and.w	r3, r3, #3
 8002e04:	2b02      	cmp	r3, #2
 8002e06:	d130      	bne.n	8002e6a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	005b      	lsls	r3, r3, #1
 8002e12:	2203      	movs	r2, #3
 8002e14:	fa02 f303 	lsl.w	r3, r2, r3
 8002e18:	43db      	mvns	r3, r3
 8002e1a:	693a      	ldr	r2, [r7, #16]
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	68da      	ldr	r2, [r3, #12]
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	005b      	lsls	r3, r3, #1
 8002e28:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2c:	693a      	ldr	r2, [r7, #16]
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	693a      	ldr	r2, [r7, #16]
 8002e36:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e3e:	2201      	movs	r2, #1
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	fa02 f303 	lsl.w	r3, r2, r3
 8002e46:	43db      	mvns	r3, r3
 8002e48:	693a      	ldr	r2, [r7, #16]
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	091b      	lsrs	r3, r3, #4
 8002e54:	f003 0201 	and.w	r2, r3, #1
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5e:	693a      	ldr	r2, [r7, #16]
 8002e60:	4313      	orrs	r3, r2
 8002e62:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	693a      	ldr	r2, [r7, #16]
 8002e68:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	f003 0303 	and.w	r3, r3, #3
 8002e72:	2b03      	cmp	r3, #3
 8002e74:	d017      	beq.n	8002ea6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	68db      	ldr	r3, [r3, #12]
 8002e7a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	005b      	lsls	r3, r3, #1
 8002e80:	2203      	movs	r2, #3
 8002e82:	fa02 f303 	lsl.w	r3, r2, r3
 8002e86:	43db      	mvns	r3, r3
 8002e88:	693a      	ldr	r2, [r7, #16]
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	689a      	ldr	r2, [r3, #8]
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	005b      	lsls	r3, r3, #1
 8002e96:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9a:	693a      	ldr	r2, [r7, #16]
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	693a      	ldr	r2, [r7, #16]
 8002ea4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	f003 0303 	and.w	r3, r3, #3
 8002eae:	2b02      	cmp	r3, #2
 8002eb0:	d123      	bne.n	8002efa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	08da      	lsrs	r2, r3, #3
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	3208      	adds	r2, #8
 8002eba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ebe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	f003 0307 	and.w	r3, r3, #7
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	220f      	movs	r2, #15
 8002eca:	fa02 f303 	lsl.w	r3, r2, r3
 8002ece:	43db      	mvns	r3, r3
 8002ed0:	693a      	ldr	r2, [r7, #16]
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	691a      	ldr	r2, [r3, #16]
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	f003 0307 	and.w	r3, r3, #7
 8002ee0:	009b      	lsls	r3, r3, #2
 8002ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee6:	693a      	ldr	r2, [r7, #16]
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	08da      	lsrs	r2, r3, #3
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	3208      	adds	r2, #8
 8002ef4:	6939      	ldr	r1, [r7, #16]
 8002ef6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	005b      	lsls	r3, r3, #1
 8002f04:	2203      	movs	r2, #3
 8002f06:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0a:	43db      	mvns	r3, r3
 8002f0c:	693a      	ldr	r2, [r7, #16]
 8002f0e:	4013      	ands	r3, r2
 8002f10:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	f003 0203 	and.w	r2, r3, #3
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	005b      	lsls	r3, r3, #1
 8002f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f22:	693a      	ldr	r2, [r7, #16]
 8002f24:	4313      	orrs	r3, r2
 8002f26:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	693a      	ldr	r2, [r7, #16]
 8002f2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	f000 809a 	beq.w	8003070 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f3c:	4b55      	ldr	r3, [pc, #340]	@ (8003094 <HAL_GPIO_Init+0x2cc>)
 8002f3e:	699b      	ldr	r3, [r3, #24]
 8002f40:	4a54      	ldr	r2, [pc, #336]	@ (8003094 <HAL_GPIO_Init+0x2cc>)
 8002f42:	f043 0301 	orr.w	r3, r3, #1
 8002f46:	6193      	str	r3, [r2, #24]
 8002f48:	4b52      	ldr	r3, [pc, #328]	@ (8003094 <HAL_GPIO_Init+0x2cc>)
 8002f4a:	699b      	ldr	r3, [r3, #24]
 8002f4c:	f003 0301 	and.w	r3, r3, #1
 8002f50:	60bb      	str	r3, [r7, #8]
 8002f52:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002f54:	4a50      	ldr	r2, [pc, #320]	@ (8003098 <HAL_GPIO_Init+0x2d0>)
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	089b      	lsrs	r3, r3, #2
 8002f5a:	3302      	adds	r3, #2
 8002f5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f60:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	f003 0303 	and.w	r3, r3, #3
 8002f68:	009b      	lsls	r3, r3, #2
 8002f6a:	220f      	movs	r2, #15
 8002f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f70:	43db      	mvns	r3, r3
 8002f72:	693a      	ldr	r2, [r7, #16]
 8002f74:	4013      	ands	r3, r2
 8002f76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002f7e:	d013      	beq.n	8002fa8 <HAL_GPIO_Init+0x1e0>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	4a46      	ldr	r2, [pc, #280]	@ (800309c <HAL_GPIO_Init+0x2d4>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d00d      	beq.n	8002fa4 <HAL_GPIO_Init+0x1dc>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	4a45      	ldr	r2, [pc, #276]	@ (80030a0 <HAL_GPIO_Init+0x2d8>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d007      	beq.n	8002fa0 <HAL_GPIO_Init+0x1d8>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	4a44      	ldr	r2, [pc, #272]	@ (80030a4 <HAL_GPIO_Init+0x2dc>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d101      	bne.n	8002f9c <HAL_GPIO_Init+0x1d4>
 8002f98:	2303      	movs	r3, #3
 8002f9a:	e006      	b.n	8002faa <HAL_GPIO_Init+0x1e2>
 8002f9c:	2305      	movs	r3, #5
 8002f9e:	e004      	b.n	8002faa <HAL_GPIO_Init+0x1e2>
 8002fa0:	2302      	movs	r3, #2
 8002fa2:	e002      	b.n	8002faa <HAL_GPIO_Init+0x1e2>
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e000      	b.n	8002faa <HAL_GPIO_Init+0x1e2>
 8002fa8:	2300      	movs	r3, #0
 8002faa:	697a      	ldr	r2, [r7, #20]
 8002fac:	f002 0203 	and.w	r2, r2, #3
 8002fb0:	0092      	lsls	r2, r2, #2
 8002fb2:	4093      	lsls	r3, r2
 8002fb4:	693a      	ldr	r2, [r7, #16]
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002fba:	4937      	ldr	r1, [pc, #220]	@ (8003098 <HAL_GPIO_Init+0x2d0>)
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	089b      	lsrs	r3, r3, #2
 8002fc0:	3302      	adds	r3, #2
 8002fc2:	693a      	ldr	r2, [r7, #16]
 8002fc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002fc8:	4b37      	ldr	r3, [pc, #220]	@ (80030a8 <HAL_GPIO_Init+0x2e0>)
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	43db      	mvns	r3, r3
 8002fd2:	693a      	ldr	r2, [r7, #16]
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d003      	beq.n	8002fec <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002fe4:	693a      	ldr	r2, [r7, #16]
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002fec:	4a2e      	ldr	r2, [pc, #184]	@ (80030a8 <HAL_GPIO_Init+0x2e0>)
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ff2:	4b2d      	ldr	r3, [pc, #180]	@ (80030a8 <HAL_GPIO_Init+0x2e0>)
 8002ff4:	68db      	ldr	r3, [r3, #12]
 8002ff6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	43db      	mvns	r3, r3
 8002ffc:	693a      	ldr	r2, [r7, #16]
 8002ffe:	4013      	ands	r3, r2
 8003000:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800300a:	2b00      	cmp	r3, #0
 800300c:	d003      	beq.n	8003016 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800300e:	693a      	ldr	r2, [r7, #16]
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	4313      	orrs	r3, r2
 8003014:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003016:	4a24      	ldr	r2, [pc, #144]	@ (80030a8 <HAL_GPIO_Init+0x2e0>)
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800301c:	4b22      	ldr	r3, [pc, #136]	@ (80030a8 <HAL_GPIO_Init+0x2e0>)
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	43db      	mvns	r3, r3
 8003026:	693a      	ldr	r2, [r7, #16]
 8003028:	4013      	ands	r3, r2
 800302a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003034:	2b00      	cmp	r3, #0
 8003036:	d003      	beq.n	8003040 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8003038:	693a      	ldr	r2, [r7, #16]
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	4313      	orrs	r3, r2
 800303e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003040:	4a19      	ldr	r2, [pc, #100]	@ (80030a8 <HAL_GPIO_Init+0x2e0>)
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003046:	4b18      	ldr	r3, [pc, #96]	@ (80030a8 <HAL_GPIO_Init+0x2e0>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	43db      	mvns	r3, r3
 8003050:	693a      	ldr	r2, [r7, #16]
 8003052:	4013      	ands	r3, r2
 8003054:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800305e:	2b00      	cmp	r3, #0
 8003060:	d003      	beq.n	800306a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8003062:	693a      	ldr	r2, [r7, #16]
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	4313      	orrs	r3, r2
 8003068:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800306a:	4a0f      	ldr	r2, [pc, #60]	@ (80030a8 <HAL_GPIO_Init+0x2e0>)
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	3301      	adds	r3, #1
 8003074:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	fa22 f303 	lsr.w	r3, r2, r3
 8003080:	2b00      	cmp	r3, #0
 8003082:	f47f aea9 	bne.w	8002dd8 <HAL_GPIO_Init+0x10>
  }
}
 8003086:	bf00      	nop
 8003088:	bf00      	nop
 800308a:	371c      	adds	r7, #28
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr
 8003094:	40021000 	.word	0x40021000
 8003098:	40010000 	.word	0x40010000
 800309c:	48000400 	.word	0x48000400
 80030a0:	48000800 	.word	0x48000800
 80030a4:	48000c00 	.word	0x48000c00
 80030a8:	40010400 	.word	0x40010400

080030ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b083      	sub	sp, #12
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
 80030b4:	460b      	mov	r3, r1
 80030b6:	807b      	strh	r3, [r7, #2]
 80030b8:	4613      	mov	r3, r2
 80030ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80030bc:	787b      	ldrb	r3, [r7, #1]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d003      	beq.n	80030ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80030c2:	887a      	ldrh	r2, [r7, #2]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80030c8:	e002      	b.n	80030d0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80030ca:	887a      	ldrh	r2, [r7, #2]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80030d0:	bf00      	nop
 80030d2:	370c      	adds	r7, #12
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr

080030dc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80030dc:	b480      	push	{r7}
 80030de:	b085      	sub	sp, #20
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
 80030e4:	460b      	mov	r3, r1
 80030e6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	695b      	ldr	r3, [r3, #20]
 80030ec:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80030ee:	887a      	ldrh	r2, [r7, #2]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	4013      	ands	r3, r2
 80030f4:	041a      	lsls	r2, r3, #16
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	43d9      	mvns	r1, r3
 80030fa:	887b      	ldrh	r3, [r7, #2]
 80030fc:	400b      	ands	r3, r1
 80030fe:	431a      	orrs	r2, r3
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	619a      	str	r2, [r3, #24]
}
 8003104:	bf00      	nop
 8003106:	3714      	adds	r7, #20
 8003108:	46bd      	mov	sp, r7
 800310a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310e:	4770      	bx	lr

08003110 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8003116:	af00      	add	r7, sp, #0
 8003118:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800311c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003120:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003122:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003126:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d102      	bne.n	8003136 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	f001 b823 	b.w	800417c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003136:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800313a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 0301 	and.w	r3, r3, #1
 8003146:	2b00      	cmp	r3, #0
 8003148:	f000 817d 	beq.w	8003446 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800314c:	4bbc      	ldr	r3, [pc, #752]	@ (8003440 <HAL_RCC_OscConfig+0x330>)
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	f003 030c 	and.w	r3, r3, #12
 8003154:	2b04      	cmp	r3, #4
 8003156:	d00c      	beq.n	8003172 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003158:	4bb9      	ldr	r3, [pc, #740]	@ (8003440 <HAL_RCC_OscConfig+0x330>)
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	f003 030c 	and.w	r3, r3, #12
 8003160:	2b08      	cmp	r3, #8
 8003162:	d15c      	bne.n	800321e <HAL_RCC_OscConfig+0x10e>
 8003164:	4bb6      	ldr	r3, [pc, #728]	@ (8003440 <HAL_RCC_OscConfig+0x330>)
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800316c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003170:	d155      	bne.n	800321e <HAL_RCC_OscConfig+0x10e>
 8003172:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003176:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800317a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 800317e:	fa93 f3a3 	rbit	r3, r3
 8003182:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003186:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800318a:	fab3 f383 	clz	r3, r3
 800318e:	b2db      	uxtb	r3, r3
 8003190:	095b      	lsrs	r3, r3, #5
 8003192:	b2db      	uxtb	r3, r3
 8003194:	f043 0301 	orr.w	r3, r3, #1
 8003198:	b2db      	uxtb	r3, r3
 800319a:	2b01      	cmp	r3, #1
 800319c:	d102      	bne.n	80031a4 <HAL_RCC_OscConfig+0x94>
 800319e:	4ba8      	ldr	r3, [pc, #672]	@ (8003440 <HAL_RCC_OscConfig+0x330>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	e015      	b.n	80031d0 <HAL_RCC_OscConfig+0xc0>
 80031a4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80031a8:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ac:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 80031b0:	fa93 f3a3 	rbit	r3, r3
 80031b4:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80031b8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80031bc:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80031c0:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 80031c4:	fa93 f3a3 	rbit	r3, r3
 80031c8:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 80031cc:	4b9c      	ldr	r3, [pc, #624]	@ (8003440 <HAL_RCC_OscConfig+0x330>)
 80031ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031d0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80031d4:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 80031d8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80031dc:	fa92 f2a2 	rbit	r2, r2
 80031e0:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 80031e4:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 80031e8:	fab2 f282 	clz	r2, r2
 80031ec:	b2d2      	uxtb	r2, r2
 80031ee:	f042 0220 	orr.w	r2, r2, #32
 80031f2:	b2d2      	uxtb	r2, r2
 80031f4:	f002 021f 	and.w	r2, r2, #31
 80031f8:	2101      	movs	r1, #1
 80031fa:	fa01 f202 	lsl.w	r2, r1, r2
 80031fe:	4013      	ands	r3, r2
 8003200:	2b00      	cmp	r3, #0
 8003202:	f000 811f 	beq.w	8003444 <HAL_RCC_OscConfig+0x334>
 8003206:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800320a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	2b00      	cmp	r3, #0
 8003214:	f040 8116 	bne.w	8003444 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	f000 bfaf 	b.w	800417c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800321e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003222:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800322e:	d106      	bne.n	800323e <HAL_RCC_OscConfig+0x12e>
 8003230:	4b83      	ldr	r3, [pc, #524]	@ (8003440 <HAL_RCC_OscConfig+0x330>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a82      	ldr	r2, [pc, #520]	@ (8003440 <HAL_RCC_OscConfig+0x330>)
 8003236:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800323a:	6013      	str	r3, [r2, #0]
 800323c:	e036      	b.n	80032ac <HAL_RCC_OscConfig+0x19c>
 800323e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003242:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d10c      	bne.n	8003268 <HAL_RCC_OscConfig+0x158>
 800324e:	4b7c      	ldr	r3, [pc, #496]	@ (8003440 <HAL_RCC_OscConfig+0x330>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a7b      	ldr	r2, [pc, #492]	@ (8003440 <HAL_RCC_OscConfig+0x330>)
 8003254:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003258:	6013      	str	r3, [r2, #0]
 800325a:	4b79      	ldr	r3, [pc, #484]	@ (8003440 <HAL_RCC_OscConfig+0x330>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a78      	ldr	r2, [pc, #480]	@ (8003440 <HAL_RCC_OscConfig+0x330>)
 8003260:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003264:	6013      	str	r3, [r2, #0]
 8003266:	e021      	b.n	80032ac <HAL_RCC_OscConfig+0x19c>
 8003268:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800326c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003278:	d10c      	bne.n	8003294 <HAL_RCC_OscConfig+0x184>
 800327a:	4b71      	ldr	r3, [pc, #452]	@ (8003440 <HAL_RCC_OscConfig+0x330>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a70      	ldr	r2, [pc, #448]	@ (8003440 <HAL_RCC_OscConfig+0x330>)
 8003280:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003284:	6013      	str	r3, [r2, #0]
 8003286:	4b6e      	ldr	r3, [pc, #440]	@ (8003440 <HAL_RCC_OscConfig+0x330>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a6d      	ldr	r2, [pc, #436]	@ (8003440 <HAL_RCC_OscConfig+0x330>)
 800328c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003290:	6013      	str	r3, [r2, #0]
 8003292:	e00b      	b.n	80032ac <HAL_RCC_OscConfig+0x19c>
 8003294:	4b6a      	ldr	r3, [pc, #424]	@ (8003440 <HAL_RCC_OscConfig+0x330>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a69      	ldr	r2, [pc, #420]	@ (8003440 <HAL_RCC_OscConfig+0x330>)
 800329a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800329e:	6013      	str	r3, [r2, #0]
 80032a0:	4b67      	ldr	r3, [pc, #412]	@ (8003440 <HAL_RCC_OscConfig+0x330>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a66      	ldr	r2, [pc, #408]	@ (8003440 <HAL_RCC_OscConfig+0x330>)
 80032a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80032aa:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80032ac:	4b64      	ldr	r3, [pc, #400]	@ (8003440 <HAL_RCC_OscConfig+0x330>)
 80032ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032b0:	f023 020f 	bic.w	r2, r3, #15
 80032b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032b8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	495f      	ldr	r1, [pc, #380]	@ (8003440 <HAL_RCC_OscConfig+0x330>)
 80032c2:	4313      	orrs	r3, r2
 80032c4:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032ca:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d059      	beq.n	800338a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032d6:	f7fd fe7f 	bl	8000fd8 <HAL_GetTick>
 80032da:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032de:	e00a      	b.n	80032f6 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032e0:	f7fd fe7a 	bl	8000fd8 <HAL_GetTick>
 80032e4:	4602      	mov	r2, r0
 80032e6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80032ea:	1ad3      	subs	r3, r2, r3
 80032ec:	2b64      	cmp	r3, #100	@ 0x64
 80032ee:	d902      	bls.n	80032f6 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80032f0:	2303      	movs	r3, #3
 80032f2:	f000 bf43 	b.w	800417c <HAL_RCC_OscConfig+0x106c>
 80032f6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80032fa:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032fe:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8003302:	fa93 f3a3 	rbit	r3, r3
 8003306:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 800330a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800330e:	fab3 f383 	clz	r3, r3
 8003312:	b2db      	uxtb	r3, r3
 8003314:	095b      	lsrs	r3, r3, #5
 8003316:	b2db      	uxtb	r3, r3
 8003318:	f043 0301 	orr.w	r3, r3, #1
 800331c:	b2db      	uxtb	r3, r3
 800331e:	2b01      	cmp	r3, #1
 8003320:	d102      	bne.n	8003328 <HAL_RCC_OscConfig+0x218>
 8003322:	4b47      	ldr	r3, [pc, #284]	@ (8003440 <HAL_RCC_OscConfig+0x330>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	e015      	b.n	8003354 <HAL_RCC_OscConfig+0x244>
 8003328:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800332c:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003330:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8003334:	fa93 f3a3 	rbit	r3, r3
 8003338:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 800333c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003340:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8003344:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8003348:	fa93 f3a3 	rbit	r3, r3
 800334c:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8003350:	4b3b      	ldr	r3, [pc, #236]	@ (8003440 <HAL_RCC_OscConfig+0x330>)
 8003352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003354:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003358:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 800335c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8003360:	fa92 f2a2 	rbit	r2, r2
 8003364:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8003368:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 800336c:	fab2 f282 	clz	r2, r2
 8003370:	b2d2      	uxtb	r2, r2
 8003372:	f042 0220 	orr.w	r2, r2, #32
 8003376:	b2d2      	uxtb	r2, r2
 8003378:	f002 021f 	and.w	r2, r2, #31
 800337c:	2101      	movs	r1, #1
 800337e:	fa01 f202 	lsl.w	r2, r1, r2
 8003382:	4013      	ands	r3, r2
 8003384:	2b00      	cmp	r3, #0
 8003386:	d0ab      	beq.n	80032e0 <HAL_RCC_OscConfig+0x1d0>
 8003388:	e05d      	b.n	8003446 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800338a:	f7fd fe25 	bl	8000fd8 <HAL_GetTick>
 800338e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003392:	e00a      	b.n	80033aa <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003394:	f7fd fe20 	bl	8000fd8 <HAL_GetTick>
 8003398:	4602      	mov	r2, r0
 800339a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800339e:	1ad3      	subs	r3, r2, r3
 80033a0:	2b64      	cmp	r3, #100	@ 0x64
 80033a2:	d902      	bls.n	80033aa <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80033a4:	2303      	movs	r3, #3
 80033a6:	f000 bee9 	b.w	800417c <HAL_RCC_OscConfig+0x106c>
 80033aa:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80033ae:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033b2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 80033b6:	fa93 f3a3 	rbit	r3, r3
 80033ba:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 80033be:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033c2:	fab3 f383 	clz	r3, r3
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	095b      	lsrs	r3, r3, #5
 80033ca:	b2db      	uxtb	r3, r3
 80033cc:	f043 0301 	orr.w	r3, r3, #1
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d102      	bne.n	80033dc <HAL_RCC_OscConfig+0x2cc>
 80033d6:	4b1a      	ldr	r3, [pc, #104]	@ (8003440 <HAL_RCC_OscConfig+0x330>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	e015      	b.n	8003408 <HAL_RCC_OscConfig+0x2f8>
 80033dc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80033e0:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033e4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80033e8:	fa93 f3a3 	rbit	r3, r3
 80033ec:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80033f0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80033f4:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80033f8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80033fc:	fa93 f3a3 	rbit	r3, r3
 8003400:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8003404:	4b0e      	ldr	r3, [pc, #56]	@ (8003440 <HAL_RCC_OscConfig+0x330>)
 8003406:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003408:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800340c:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8003410:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8003414:	fa92 f2a2 	rbit	r2, r2
 8003418:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 800341c:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8003420:	fab2 f282 	clz	r2, r2
 8003424:	b2d2      	uxtb	r2, r2
 8003426:	f042 0220 	orr.w	r2, r2, #32
 800342a:	b2d2      	uxtb	r2, r2
 800342c:	f002 021f 	and.w	r2, r2, #31
 8003430:	2101      	movs	r1, #1
 8003432:	fa01 f202 	lsl.w	r2, r1, r2
 8003436:	4013      	ands	r3, r2
 8003438:	2b00      	cmp	r3, #0
 800343a:	d1ab      	bne.n	8003394 <HAL_RCC_OscConfig+0x284>
 800343c:	e003      	b.n	8003446 <HAL_RCC_OscConfig+0x336>
 800343e:	bf00      	nop
 8003440:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003444:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003446:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800344a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 0302 	and.w	r3, r3, #2
 8003456:	2b00      	cmp	r3, #0
 8003458:	f000 817d 	beq.w	8003756 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800345c:	4ba6      	ldr	r3, [pc, #664]	@ (80036f8 <HAL_RCC_OscConfig+0x5e8>)
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	f003 030c 	and.w	r3, r3, #12
 8003464:	2b00      	cmp	r3, #0
 8003466:	d00b      	beq.n	8003480 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003468:	4ba3      	ldr	r3, [pc, #652]	@ (80036f8 <HAL_RCC_OscConfig+0x5e8>)
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	f003 030c 	and.w	r3, r3, #12
 8003470:	2b08      	cmp	r3, #8
 8003472:	d172      	bne.n	800355a <HAL_RCC_OscConfig+0x44a>
 8003474:	4ba0      	ldr	r3, [pc, #640]	@ (80036f8 <HAL_RCC_OscConfig+0x5e8>)
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800347c:	2b00      	cmp	r3, #0
 800347e:	d16c      	bne.n	800355a <HAL_RCC_OscConfig+0x44a>
 8003480:	2302      	movs	r3, #2
 8003482:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003486:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800348a:	fa93 f3a3 	rbit	r3, r3
 800348e:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8003492:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003496:	fab3 f383 	clz	r3, r3
 800349a:	b2db      	uxtb	r3, r3
 800349c:	095b      	lsrs	r3, r3, #5
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	f043 0301 	orr.w	r3, r3, #1
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d102      	bne.n	80034b0 <HAL_RCC_OscConfig+0x3a0>
 80034aa:	4b93      	ldr	r3, [pc, #588]	@ (80036f8 <HAL_RCC_OscConfig+0x5e8>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	e013      	b.n	80034d8 <HAL_RCC_OscConfig+0x3c8>
 80034b0:	2302      	movs	r3, #2
 80034b2:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034b6:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 80034ba:	fa93 f3a3 	rbit	r3, r3
 80034be:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80034c2:	2302      	movs	r3, #2
 80034c4:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80034c8:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80034cc:	fa93 f3a3 	rbit	r3, r3
 80034d0:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 80034d4:	4b88      	ldr	r3, [pc, #544]	@ (80036f8 <HAL_RCC_OscConfig+0x5e8>)
 80034d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034d8:	2202      	movs	r2, #2
 80034da:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 80034de:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80034e2:	fa92 f2a2 	rbit	r2, r2
 80034e6:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 80034ea:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 80034ee:	fab2 f282 	clz	r2, r2
 80034f2:	b2d2      	uxtb	r2, r2
 80034f4:	f042 0220 	orr.w	r2, r2, #32
 80034f8:	b2d2      	uxtb	r2, r2
 80034fa:	f002 021f 	and.w	r2, r2, #31
 80034fe:	2101      	movs	r1, #1
 8003500:	fa01 f202 	lsl.w	r2, r1, r2
 8003504:	4013      	ands	r3, r2
 8003506:	2b00      	cmp	r3, #0
 8003508:	d00a      	beq.n	8003520 <HAL_RCC_OscConfig+0x410>
 800350a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800350e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	691b      	ldr	r3, [r3, #16]
 8003516:	2b01      	cmp	r3, #1
 8003518:	d002      	beq.n	8003520 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	f000 be2e 	b.w	800417c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003520:	4b75      	ldr	r3, [pc, #468]	@ (80036f8 <HAL_RCC_OscConfig+0x5e8>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003528:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800352c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	695b      	ldr	r3, [r3, #20]
 8003534:	21f8      	movs	r1, #248	@ 0xf8
 8003536:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800353a:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 800353e:	fa91 f1a1 	rbit	r1, r1
 8003542:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8003546:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 800354a:	fab1 f181 	clz	r1, r1
 800354e:	b2c9      	uxtb	r1, r1
 8003550:	408b      	lsls	r3, r1
 8003552:	4969      	ldr	r1, [pc, #420]	@ (80036f8 <HAL_RCC_OscConfig+0x5e8>)
 8003554:	4313      	orrs	r3, r2
 8003556:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003558:	e0fd      	b.n	8003756 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800355a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800355e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	691b      	ldr	r3, [r3, #16]
 8003566:	2b00      	cmp	r3, #0
 8003568:	f000 8088 	beq.w	800367c <HAL_RCC_OscConfig+0x56c>
 800356c:	2301      	movs	r3, #1
 800356e:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003572:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8003576:	fa93 f3a3 	rbit	r3, r3
 800357a:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 800357e:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003582:	fab3 f383 	clz	r3, r3
 8003586:	b2db      	uxtb	r3, r3
 8003588:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800358c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003590:	009b      	lsls	r3, r3, #2
 8003592:	461a      	mov	r2, r3
 8003594:	2301      	movs	r3, #1
 8003596:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003598:	f7fd fd1e 	bl	8000fd8 <HAL_GetTick>
 800359c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035a0:	e00a      	b.n	80035b8 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035a2:	f7fd fd19 	bl	8000fd8 <HAL_GetTick>
 80035a6:	4602      	mov	r2, r0
 80035a8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	2b02      	cmp	r3, #2
 80035b0:	d902      	bls.n	80035b8 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80035b2:	2303      	movs	r3, #3
 80035b4:	f000 bde2 	b.w	800417c <HAL_RCC_OscConfig+0x106c>
 80035b8:	2302      	movs	r3, #2
 80035ba:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035be:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80035c2:	fa93 f3a3 	rbit	r3, r3
 80035c6:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 80035ca:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035ce:	fab3 f383 	clz	r3, r3
 80035d2:	b2db      	uxtb	r3, r3
 80035d4:	095b      	lsrs	r3, r3, #5
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	f043 0301 	orr.w	r3, r3, #1
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d102      	bne.n	80035e8 <HAL_RCC_OscConfig+0x4d8>
 80035e2:	4b45      	ldr	r3, [pc, #276]	@ (80036f8 <HAL_RCC_OscConfig+0x5e8>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	e013      	b.n	8003610 <HAL_RCC_OscConfig+0x500>
 80035e8:	2302      	movs	r3, #2
 80035ea:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ee:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80035f2:	fa93 f3a3 	rbit	r3, r3
 80035f6:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80035fa:	2302      	movs	r3, #2
 80035fc:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8003600:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8003604:	fa93 f3a3 	rbit	r3, r3
 8003608:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 800360c:	4b3a      	ldr	r3, [pc, #232]	@ (80036f8 <HAL_RCC_OscConfig+0x5e8>)
 800360e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003610:	2202      	movs	r2, #2
 8003612:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8003616:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800361a:	fa92 f2a2 	rbit	r2, r2
 800361e:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8003622:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8003626:	fab2 f282 	clz	r2, r2
 800362a:	b2d2      	uxtb	r2, r2
 800362c:	f042 0220 	orr.w	r2, r2, #32
 8003630:	b2d2      	uxtb	r2, r2
 8003632:	f002 021f 	and.w	r2, r2, #31
 8003636:	2101      	movs	r1, #1
 8003638:	fa01 f202 	lsl.w	r2, r1, r2
 800363c:	4013      	ands	r3, r2
 800363e:	2b00      	cmp	r3, #0
 8003640:	d0af      	beq.n	80035a2 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003642:	4b2d      	ldr	r3, [pc, #180]	@ (80036f8 <HAL_RCC_OscConfig+0x5e8>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800364a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800364e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	695b      	ldr	r3, [r3, #20]
 8003656:	21f8      	movs	r1, #248	@ 0xf8
 8003658:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800365c:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8003660:	fa91 f1a1 	rbit	r1, r1
 8003664:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8003668:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 800366c:	fab1 f181 	clz	r1, r1
 8003670:	b2c9      	uxtb	r1, r1
 8003672:	408b      	lsls	r3, r1
 8003674:	4920      	ldr	r1, [pc, #128]	@ (80036f8 <HAL_RCC_OscConfig+0x5e8>)
 8003676:	4313      	orrs	r3, r2
 8003678:	600b      	str	r3, [r1, #0]
 800367a:	e06c      	b.n	8003756 <HAL_RCC_OscConfig+0x646>
 800367c:	2301      	movs	r3, #1
 800367e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003682:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003686:	fa93 f3a3 	rbit	r3, r3
 800368a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 800368e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003692:	fab3 f383 	clz	r3, r3
 8003696:	b2db      	uxtb	r3, r3
 8003698:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800369c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80036a0:	009b      	lsls	r3, r3, #2
 80036a2:	461a      	mov	r2, r3
 80036a4:	2300      	movs	r3, #0
 80036a6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036a8:	f7fd fc96 	bl	8000fd8 <HAL_GetTick>
 80036ac:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036b0:	e00a      	b.n	80036c8 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036b2:	f7fd fc91 	bl	8000fd8 <HAL_GetTick>
 80036b6:	4602      	mov	r2, r0
 80036b8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	2b02      	cmp	r3, #2
 80036c0:	d902      	bls.n	80036c8 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80036c2:	2303      	movs	r3, #3
 80036c4:	f000 bd5a 	b.w	800417c <HAL_RCC_OscConfig+0x106c>
 80036c8:	2302      	movs	r3, #2
 80036ca:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ce:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80036d2:	fa93 f3a3 	rbit	r3, r3
 80036d6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 80036da:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036de:	fab3 f383 	clz	r3, r3
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	095b      	lsrs	r3, r3, #5
 80036e6:	b2db      	uxtb	r3, r3
 80036e8:	f043 0301 	orr.w	r3, r3, #1
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	d104      	bne.n	80036fc <HAL_RCC_OscConfig+0x5ec>
 80036f2:	4b01      	ldr	r3, [pc, #4]	@ (80036f8 <HAL_RCC_OscConfig+0x5e8>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	e015      	b.n	8003724 <HAL_RCC_OscConfig+0x614>
 80036f8:	40021000 	.word	0x40021000
 80036fc:	2302      	movs	r3, #2
 80036fe:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003702:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8003706:	fa93 f3a3 	rbit	r3, r3
 800370a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800370e:	2302      	movs	r3, #2
 8003710:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8003714:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003718:	fa93 f3a3 	rbit	r3, r3
 800371c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8003720:	4bc8      	ldr	r3, [pc, #800]	@ (8003a44 <HAL_RCC_OscConfig+0x934>)
 8003722:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003724:	2202      	movs	r2, #2
 8003726:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 800372a:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800372e:	fa92 f2a2 	rbit	r2, r2
 8003732:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8003736:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 800373a:	fab2 f282 	clz	r2, r2
 800373e:	b2d2      	uxtb	r2, r2
 8003740:	f042 0220 	orr.w	r2, r2, #32
 8003744:	b2d2      	uxtb	r2, r2
 8003746:	f002 021f 	and.w	r2, r2, #31
 800374a:	2101      	movs	r1, #1
 800374c:	fa01 f202 	lsl.w	r2, r1, r2
 8003750:	4013      	ands	r3, r2
 8003752:	2b00      	cmp	r3, #0
 8003754:	d1ad      	bne.n	80036b2 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003756:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800375a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 0308 	and.w	r3, r3, #8
 8003766:	2b00      	cmp	r3, #0
 8003768:	f000 8110 	beq.w	800398c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800376c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003770:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	699b      	ldr	r3, [r3, #24]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d079      	beq.n	8003870 <HAL_RCC_OscConfig+0x760>
 800377c:	2301      	movs	r3, #1
 800377e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003782:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003786:	fa93 f3a3 	rbit	r3, r3
 800378a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 800378e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003792:	fab3 f383 	clz	r3, r3
 8003796:	b2db      	uxtb	r3, r3
 8003798:	461a      	mov	r2, r3
 800379a:	4bab      	ldr	r3, [pc, #684]	@ (8003a48 <HAL_RCC_OscConfig+0x938>)
 800379c:	4413      	add	r3, r2
 800379e:	009b      	lsls	r3, r3, #2
 80037a0:	461a      	mov	r2, r3
 80037a2:	2301      	movs	r3, #1
 80037a4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037a6:	f7fd fc17 	bl	8000fd8 <HAL_GetTick>
 80037aa:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037ae:	e00a      	b.n	80037c6 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037b0:	f7fd fc12 	bl	8000fd8 <HAL_GetTick>
 80037b4:	4602      	mov	r2, r0
 80037b6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80037ba:	1ad3      	subs	r3, r2, r3
 80037bc:	2b02      	cmp	r3, #2
 80037be:	d902      	bls.n	80037c6 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80037c0:	2303      	movs	r3, #3
 80037c2:	f000 bcdb 	b.w	800417c <HAL_RCC_OscConfig+0x106c>
 80037c6:	2302      	movs	r3, #2
 80037c8:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037cc:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80037d0:	fa93 f3a3 	rbit	r3, r3
 80037d4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80037d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037dc:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80037e0:	2202      	movs	r2, #2
 80037e2:	601a      	str	r2, [r3, #0]
 80037e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037e8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	fa93 f2a3 	rbit	r2, r3
 80037f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037f6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80037fa:	601a      	str	r2, [r3, #0]
 80037fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003800:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003804:	2202      	movs	r2, #2
 8003806:	601a      	str	r2, [r3, #0]
 8003808:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800380c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	fa93 f2a3 	rbit	r2, r3
 8003816:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800381a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800381e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003820:	4b88      	ldr	r3, [pc, #544]	@ (8003a44 <HAL_RCC_OscConfig+0x934>)
 8003822:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003824:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003828:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800382c:	2102      	movs	r1, #2
 800382e:	6019      	str	r1, [r3, #0]
 8003830:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003834:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	fa93 f1a3 	rbit	r1, r3
 800383e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003842:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003846:	6019      	str	r1, [r3, #0]
  return result;
 8003848:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800384c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	fab3 f383 	clz	r3, r3
 8003856:	b2db      	uxtb	r3, r3
 8003858:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800385c:	b2db      	uxtb	r3, r3
 800385e:	f003 031f 	and.w	r3, r3, #31
 8003862:	2101      	movs	r1, #1
 8003864:	fa01 f303 	lsl.w	r3, r1, r3
 8003868:	4013      	ands	r3, r2
 800386a:	2b00      	cmp	r3, #0
 800386c:	d0a0      	beq.n	80037b0 <HAL_RCC_OscConfig+0x6a0>
 800386e:	e08d      	b.n	800398c <HAL_RCC_OscConfig+0x87c>
 8003870:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003874:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003878:	2201      	movs	r2, #1
 800387a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800387c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003880:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	fa93 f2a3 	rbit	r2, r3
 800388a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800388e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003892:	601a      	str	r2, [r3, #0]
  return result;
 8003894:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003898:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800389c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800389e:	fab3 f383 	clz	r3, r3
 80038a2:	b2db      	uxtb	r3, r3
 80038a4:	461a      	mov	r2, r3
 80038a6:	4b68      	ldr	r3, [pc, #416]	@ (8003a48 <HAL_RCC_OscConfig+0x938>)
 80038a8:	4413      	add	r3, r2
 80038aa:	009b      	lsls	r3, r3, #2
 80038ac:	461a      	mov	r2, r3
 80038ae:	2300      	movs	r3, #0
 80038b0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038b2:	f7fd fb91 	bl	8000fd8 <HAL_GetTick>
 80038b6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038ba:	e00a      	b.n	80038d2 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038bc:	f7fd fb8c 	bl	8000fd8 <HAL_GetTick>
 80038c0:	4602      	mov	r2, r0
 80038c2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80038c6:	1ad3      	subs	r3, r2, r3
 80038c8:	2b02      	cmp	r3, #2
 80038ca:	d902      	bls.n	80038d2 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80038cc:	2303      	movs	r3, #3
 80038ce:	f000 bc55 	b.w	800417c <HAL_RCC_OscConfig+0x106c>
 80038d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038d6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80038da:	2202      	movs	r2, #2
 80038dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038e2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	fa93 f2a3 	rbit	r2, r3
 80038ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038f0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80038f4:	601a      	str	r2, [r3, #0]
 80038f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038fa:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80038fe:	2202      	movs	r2, #2
 8003900:	601a      	str	r2, [r3, #0]
 8003902:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003906:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	fa93 f2a3 	rbit	r2, r3
 8003910:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003914:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003918:	601a      	str	r2, [r3, #0]
 800391a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800391e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003922:	2202      	movs	r2, #2
 8003924:	601a      	str	r2, [r3, #0]
 8003926:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800392a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	fa93 f2a3 	rbit	r2, r3
 8003934:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003938:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800393c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800393e:	4b41      	ldr	r3, [pc, #260]	@ (8003a44 <HAL_RCC_OscConfig+0x934>)
 8003940:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003942:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003946:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800394a:	2102      	movs	r1, #2
 800394c:	6019      	str	r1, [r3, #0]
 800394e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003952:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	fa93 f1a3 	rbit	r1, r3
 800395c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003960:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003964:	6019      	str	r1, [r3, #0]
  return result;
 8003966:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800396a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	fab3 f383 	clz	r3, r3
 8003974:	b2db      	uxtb	r3, r3
 8003976:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800397a:	b2db      	uxtb	r3, r3
 800397c:	f003 031f 	and.w	r3, r3, #31
 8003980:	2101      	movs	r1, #1
 8003982:	fa01 f303 	lsl.w	r3, r1, r3
 8003986:	4013      	ands	r3, r2
 8003988:	2b00      	cmp	r3, #0
 800398a:	d197      	bne.n	80038bc <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800398c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003990:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 0304 	and.w	r3, r3, #4
 800399c:	2b00      	cmp	r3, #0
 800399e:	f000 81a1 	beq.w	8003ce4 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039a2:	2300      	movs	r3, #0
 80039a4:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039a8:	4b26      	ldr	r3, [pc, #152]	@ (8003a44 <HAL_RCC_OscConfig+0x934>)
 80039aa:	69db      	ldr	r3, [r3, #28]
 80039ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d116      	bne.n	80039e2 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039b4:	4b23      	ldr	r3, [pc, #140]	@ (8003a44 <HAL_RCC_OscConfig+0x934>)
 80039b6:	69db      	ldr	r3, [r3, #28]
 80039b8:	4a22      	ldr	r2, [pc, #136]	@ (8003a44 <HAL_RCC_OscConfig+0x934>)
 80039ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039be:	61d3      	str	r3, [r2, #28]
 80039c0:	4b20      	ldr	r3, [pc, #128]	@ (8003a44 <HAL_RCC_OscConfig+0x934>)
 80039c2:	69db      	ldr	r3, [r3, #28]
 80039c4:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80039c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039cc:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80039d0:	601a      	str	r2, [r3, #0]
 80039d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039d6:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80039da:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80039dc:	2301      	movs	r3, #1
 80039de:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039e2:	4b1a      	ldr	r3, [pc, #104]	@ (8003a4c <HAL_RCC_OscConfig+0x93c>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d11a      	bne.n	8003a24 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039ee:	4b17      	ldr	r3, [pc, #92]	@ (8003a4c <HAL_RCC_OscConfig+0x93c>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a16      	ldr	r2, [pc, #88]	@ (8003a4c <HAL_RCC_OscConfig+0x93c>)
 80039f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039f8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039fa:	f7fd faed 	bl	8000fd8 <HAL_GetTick>
 80039fe:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a02:	e009      	b.n	8003a18 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a04:	f7fd fae8 	bl	8000fd8 <HAL_GetTick>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003a0e:	1ad3      	subs	r3, r2, r3
 8003a10:	2b64      	cmp	r3, #100	@ 0x64
 8003a12:	d901      	bls.n	8003a18 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8003a14:	2303      	movs	r3, #3
 8003a16:	e3b1      	b.n	800417c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a18:	4b0c      	ldr	r3, [pc, #48]	@ (8003a4c <HAL_RCC_OscConfig+0x93c>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d0ef      	beq.n	8003a04 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a28:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	68db      	ldr	r3, [r3, #12]
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d10d      	bne.n	8003a50 <HAL_RCC_OscConfig+0x940>
 8003a34:	4b03      	ldr	r3, [pc, #12]	@ (8003a44 <HAL_RCC_OscConfig+0x934>)
 8003a36:	6a1b      	ldr	r3, [r3, #32]
 8003a38:	4a02      	ldr	r2, [pc, #8]	@ (8003a44 <HAL_RCC_OscConfig+0x934>)
 8003a3a:	f043 0301 	orr.w	r3, r3, #1
 8003a3e:	6213      	str	r3, [r2, #32]
 8003a40:	e03c      	b.n	8003abc <HAL_RCC_OscConfig+0x9ac>
 8003a42:	bf00      	nop
 8003a44:	40021000 	.word	0x40021000
 8003a48:	10908120 	.word	0x10908120
 8003a4c:	40007000 	.word	0x40007000
 8003a50:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a54:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	68db      	ldr	r3, [r3, #12]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d10c      	bne.n	8003a7a <HAL_RCC_OscConfig+0x96a>
 8003a60:	4bc1      	ldr	r3, [pc, #772]	@ (8003d68 <HAL_RCC_OscConfig+0xc58>)
 8003a62:	6a1b      	ldr	r3, [r3, #32]
 8003a64:	4ac0      	ldr	r2, [pc, #768]	@ (8003d68 <HAL_RCC_OscConfig+0xc58>)
 8003a66:	f023 0301 	bic.w	r3, r3, #1
 8003a6a:	6213      	str	r3, [r2, #32]
 8003a6c:	4bbe      	ldr	r3, [pc, #760]	@ (8003d68 <HAL_RCC_OscConfig+0xc58>)
 8003a6e:	6a1b      	ldr	r3, [r3, #32]
 8003a70:	4abd      	ldr	r2, [pc, #756]	@ (8003d68 <HAL_RCC_OscConfig+0xc58>)
 8003a72:	f023 0304 	bic.w	r3, r3, #4
 8003a76:	6213      	str	r3, [r2, #32]
 8003a78:	e020      	b.n	8003abc <HAL_RCC_OscConfig+0x9ac>
 8003a7a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a7e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	68db      	ldr	r3, [r3, #12]
 8003a86:	2b05      	cmp	r3, #5
 8003a88:	d10c      	bne.n	8003aa4 <HAL_RCC_OscConfig+0x994>
 8003a8a:	4bb7      	ldr	r3, [pc, #732]	@ (8003d68 <HAL_RCC_OscConfig+0xc58>)
 8003a8c:	6a1b      	ldr	r3, [r3, #32]
 8003a8e:	4ab6      	ldr	r2, [pc, #728]	@ (8003d68 <HAL_RCC_OscConfig+0xc58>)
 8003a90:	f043 0304 	orr.w	r3, r3, #4
 8003a94:	6213      	str	r3, [r2, #32]
 8003a96:	4bb4      	ldr	r3, [pc, #720]	@ (8003d68 <HAL_RCC_OscConfig+0xc58>)
 8003a98:	6a1b      	ldr	r3, [r3, #32]
 8003a9a:	4ab3      	ldr	r2, [pc, #716]	@ (8003d68 <HAL_RCC_OscConfig+0xc58>)
 8003a9c:	f043 0301 	orr.w	r3, r3, #1
 8003aa0:	6213      	str	r3, [r2, #32]
 8003aa2:	e00b      	b.n	8003abc <HAL_RCC_OscConfig+0x9ac>
 8003aa4:	4bb0      	ldr	r3, [pc, #704]	@ (8003d68 <HAL_RCC_OscConfig+0xc58>)
 8003aa6:	6a1b      	ldr	r3, [r3, #32]
 8003aa8:	4aaf      	ldr	r2, [pc, #700]	@ (8003d68 <HAL_RCC_OscConfig+0xc58>)
 8003aaa:	f023 0301 	bic.w	r3, r3, #1
 8003aae:	6213      	str	r3, [r2, #32]
 8003ab0:	4bad      	ldr	r3, [pc, #692]	@ (8003d68 <HAL_RCC_OscConfig+0xc58>)
 8003ab2:	6a1b      	ldr	r3, [r3, #32]
 8003ab4:	4aac      	ldr	r2, [pc, #688]	@ (8003d68 <HAL_RCC_OscConfig+0xc58>)
 8003ab6:	f023 0304 	bic.w	r3, r3, #4
 8003aba:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003abc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ac0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	68db      	ldr	r3, [r3, #12]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	f000 8081 	beq.w	8003bd0 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ace:	f7fd fa83 	bl	8000fd8 <HAL_GetTick>
 8003ad2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ad6:	e00b      	b.n	8003af0 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ad8:	f7fd fa7e 	bl	8000fd8 <HAL_GetTick>
 8003adc:	4602      	mov	r2, r0
 8003ade:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003ae2:	1ad3      	subs	r3, r2, r3
 8003ae4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d901      	bls.n	8003af0 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003aec:	2303      	movs	r3, #3
 8003aee:	e345      	b.n	800417c <HAL_RCC_OscConfig+0x106c>
 8003af0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003af4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003af8:	2202      	movs	r2, #2
 8003afa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003afc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b00:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	fa93 f2a3 	rbit	r2, r3
 8003b0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b0e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8003b12:	601a      	str	r2, [r3, #0]
 8003b14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b18:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003b1c:	2202      	movs	r2, #2
 8003b1e:	601a      	str	r2, [r3, #0]
 8003b20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b24:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	fa93 f2a3 	rbit	r2, r3
 8003b2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b32:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003b36:	601a      	str	r2, [r3, #0]
  return result;
 8003b38:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b3c:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003b40:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b42:	fab3 f383 	clz	r3, r3
 8003b46:	b2db      	uxtb	r3, r3
 8003b48:	095b      	lsrs	r3, r3, #5
 8003b4a:	b2db      	uxtb	r3, r3
 8003b4c:	f043 0302 	orr.w	r3, r3, #2
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	2b02      	cmp	r3, #2
 8003b54:	d102      	bne.n	8003b5c <HAL_RCC_OscConfig+0xa4c>
 8003b56:	4b84      	ldr	r3, [pc, #528]	@ (8003d68 <HAL_RCC_OscConfig+0xc58>)
 8003b58:	6a1b      	ldr	r3, [r3, #32]
 8003b5a:	e013      	b.n	8003b84 <HAL_RCC_OscConfig+0xa74>
 8003b5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b60:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003b64:	2202      	movs	r2, #2
 8003b66:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b68:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b6c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	fa93 f2a3 	rbit	r2, r3
 8003b76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b7a:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8003b7e:	601a      	str	r2, [r3, #0]
 8003b80:	4b79      	ldr	r3, [pc, #484]	@ (8003d68 <HAL_RCC_OscConfig+0xc58>)
 8003b82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b84:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003b88:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8003b8c:	2102      	movs	r1, #2
 8003b8e:	6011      	str	r1, [r2, #0]
 8003b90:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003b94:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8003b98:	6812      	ldr	r2, [r2, #0]
 8003b9a:	fa92 f1a2 	rbit	r1, r2
 8003b9e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003ba2:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003ba6:	6011      	str	r1, [r2, #0]
  return result;
 8003ba8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003bac:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003bb0:	6812      	ldr	r2, [r2, #0]
 8003bb2:	fab2 f282 	clz	r2, r2
 8003bb6:	b2d2      	uxtb	r2, r2
 8003bb8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003bbc:	b2d2      	uxtb	r2, r2
 8003bbe:	f002 021f 	and.w	r2, r2, #31
 8003bc2:	2101      	movs	r1, #1
 8003bc4:	fa01 f202 	lsl.w	r2, r1, r2
 8003bc8:	4013      	ands	r3, r2
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d084      	beq.n	8003ad8 <HAL_RCC_OscConfig+0x9c8>
 8003bce:	e07f      	b.n	8003cd0 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bd0:	f7fd fa02 	bl	8000fd8 <HAL_GetTick>
 8003bd4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bd8:	e00b      	b.n	8003bf2 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bda:	f7fd f9fd 	bl	8000fd8 <HAL_GetTick>
 8003bde:	4602      	mov	r2, r0
 8003be0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003be4:	1ad3      	subs	r3, r2, r3
 8003be6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d901      	bls.n	8003bf2 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8003bee:	2303      	movs	r3, #3
 8003bf0:	e2c4      	b.n	800417c <HAL_RCC_OscConfig+0x106c>
 8003bf2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bf6:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8003bfa:	2202      	movs	r2, #2
 8003bfc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bfe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c02:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	fa93 f2a3 	rbit	r2, r3
 8003c0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c10:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8003c14:	601a      	str	r2, [r3, #0]
 8003c16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c1a:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003c1e:	2202      	movs	r2, #2
 8003c20:	601a      	str	r2, [r3, #0]
 8003c22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c26:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	fa93 f2a3 	rbit	r2, r3
 8003c30:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c34:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003c38:	601a      	str	r2, [r3, #0]
  return result;
 8003c3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c3e:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003c42:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c44:	fab3 f383 	clz	r3, r3
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	095b      	lsrs	r3, r3, #5
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	f043 0302 	orr.w	r3, r3, #2
 8003c52:	b2db      	uxtb	r3, r3
 8003c54:	2b02      	cmp	r3, #2
 8003c56:	d102      	bne.n	8003c5e <HAL_RCC_OscConfig+0xb4e>
 8003c58:	4b43      	ldr	r3, [pc, #268]	@ (8003d68 <HAL_RCC_OscConfig+0xc58>)
 8003c5a:	6a1b      	ldr	r3, [r3, #32]
 8003c5c:	e013      	b.n	8003c86 <HAL_RCC_OscConfig+0xb76>
 8003c5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c62:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003c66:	2202      	movs	r2, #2
 8003c68:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c6e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	fa93 f2a3 	rbit	r2, r3
 8003c78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c7c:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8003c80:	601a      	str	r2, [r3, #0]
 8003c82:	4b39      	ldr	r3, [pc, #228]	@ (8003d68 <HAL_RCC_OscConfig+0xc58>)
 8003c84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c86:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003c8a:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8003c8e:	2102      	movs	r1, #2
 8003c90:	6011      	str	r1, [r2, #0]
 8003c92:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003c96:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8003c9a:	6812      	ldr	r2, [r2, #0]
 8003c9c:	fa92 f1a2 	rbit	r1, r2
 8003ca0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003ca4:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003ca8:	6011      	str	r1, [r2, #0]
  return result;
 8003caa:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003cae:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003cb2:	6812      	ldr	r2, [r2, #0]
 8003cb4:	fab2 f282 	clz	r2, r2
 8003cb8:	b2d2      	uxtb	r2, r2
 8003cba:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003cbe:	b2d2      	uxtb	r2, r2
 8003cc0:	f002 021f 	and.w	r2, r2, #31
 8003cc4:	2101      	movs	r1, #1
 8003cc6:	fa01 f202 	lsl.w	r2, r1, r2
 8003cca:	4013      	ands	r3, r2
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d184      	bne.n	8003bda <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003cd0:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d105      	bne.n	8003ce4 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cd8:	4b23      	ldr	r3, [pc, #140]	@ (8003d68 <HAL_RCC_OscConfig+0xc58>)
 8003cda:	69db      	ldr	r3, [r3, #28]
 8003cdc:	4a22      	ldr	r2, [pc, #136]	@ (8003d68 <HAL_RCC_OscConfig+0xc58>)
 8003cde:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ce2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ce4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ce8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	69db      	ldr	r3, [r3, #28]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	f000 8242 	beq.w	800417a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003cf6:	4b1c      	ldr	r3, [pc, #112]	@ (8003d68 <HAL_RCC_OscConfig+0xc58>)
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	f003 030c 	and.w	r3, r3, #12
 8003cfe:	2b08      	cmp	r3, #8
 8003d00:	f000 8213 	beq.w	800412a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d04:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d08:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	69db      	ldr	r3, [r3, #28]
 8003d10:	2b02      	cmp	r3, #2
 8003d12:	f040 8162 	bne.w	8003fda <HAL_RCC_OscConfig+0xeca>
 8003d16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d1a:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8003d1e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003d22:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d28:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	fa93 f2a3 	rbit	r2, r3
 8003d32:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d36:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003d3a:	601a      	str	r2, [r3, #0]
  return result;
 8003d3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d40:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003d44:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d46:	fab3 f383 	clz	r3, r3
 8003d4a:	b2db      	uxtb	r3, r3
 8003d4c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003d50:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003d54:	009b      	lsls	r3, r3, #2
 8003d56:	461a      	mov	r2, r3
 8003d58:	2300      	movs	r3, #0
 8003d5a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d5c:	f7fd f93c 	bl	8000fd8 <HAL_GetTick>
 8003d60:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d64:	e00c      	b.n	8003d80 <HAL_RCC_OscConfig+0xc70>
 8003d66:	bf00      	nop
 8003d68:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d6c:	f7fd f934 	bl	8000fd8 <HAL_GetTick>
 8003d70:	4602      	mov	r2, r0
 8003d72:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003d76:	1ad3      	subs	r3, r2, r3
 8003d78:	2b02      	cmp	r3, #2
 8003d7a:	d901      	bls.n	8003d80 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003d7c:	2303      	movs	r3, #3
 8003d7e:	e1fd      	b.n	800417c <HAL_RCC_OscConfig+0x106c>
 8003d80:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d84:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003d88:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003d8c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d92:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	fa93 f2a3 	rbit	r2, r3
 8003d9c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003da0:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003da4:	601a      	str	r2, [r3, #0]
  return result;
 8003da6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003daa:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003dae:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003db0:	fab3 f383 	clz	r3, r3
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	095b      	lsrs	r3, r3, #5
 8003db8:	b2db      	uxtb	r3, r3
 8003dba:	f043 0301 	orr.w	r3, r3, #1
 8003dbe:	b2db      	uxtb	r3, r3
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	d102      	bne.n	8003dca <HAL_RCC_OscConfig+0xcba>
 8003dc4:	4bb0      	ldr	r3, [pc, #704]	@ (8004088 <HAL_RCC_OscConfig+0xf78>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	e027      	b.n	8003e1a <HAL_RCC_OscConfig+0xd0a>
 8003dca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003dce:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003dd2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003dd6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dd8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ddc:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	fa93 f2a3 	rbit	r2, r3
 8003de6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003dea:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8003dee:	601a      	str	r2, [r3, #0]
 8003df0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003df4:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003df8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003dfc:	601a      	str	r2, [r3, #0]
 8003dfe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e02:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	fa93 f2a3 	rbit	r2, r3
 8003e0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e10:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003e14:	601a      	str	r2, [r3, #0]
 8003e16:	4b9c      	ldr	r3, [pc, #624]	@ (8004088 <HAL_RCC_OscConfig+0xf78>)
 8003e18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e1a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003e1e:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8003e22:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003e26:	6011      	str	r1, [r2, #0]
 8003e28:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003e2c:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8003e30:	6812      	ldr	r2, [r2, #0]
 8003e32:	fa92 f1a2 	rbit	r1, r2
 8003e36:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003e3a:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003e3e:	6011      	str	r1, [r2, #0]
  return result;
 8003e40:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003e44:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003e48:	6812      	ldr	r2, [r2, #0]
 8003e4a:	fab2 f282 	clz	r2, r2
 8003e4e:	b2d2      	uxtb	r2, r2
 8003e50:	f042 0220 	orr.w	r2, r2, #32
 8003e54:	b2d2      	uxtb	r2, r2
 8003e56:	f002 021f 	and.w	r2, r2, #31
 8003e5a:	2101      	movs	r1, #1
 8003e5c:	fa01 f202 	lsl.w	r2, r1, r2
 8003e60:	4013      	ands	r3, r2
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d182      	bne.n	8003d6c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e66:	4b88      	ldr	r3, [pc, #544]	@ (8004088 <HAL_RCC_OscConfig+0xf78>)
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003e6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e72:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003e7a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e7e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	6a1b      	ldr	r3, [r3, #32]
 8003e86:	430b      	orrs	r3, r1
 8003e88:	497f      	ldr	r1, [pc, #508]	@ (8004088 <HAL_RCC_OscConfig+0xf78>)
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	604b      	str	r3, [r1, #4]
 8003e8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e92:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8003e96:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003e9a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e9c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ea0:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	fa93 f2a3 	rbit	r2, r3
 8003eaa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003eae:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003eb2:	601a      	str	r2, [r3, #0]
  return result;
 8003eb4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003eb8:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003ebc:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ebe:	fab3 f383 	clz	r3, r3
 8003ec2:	b2db      	uxtb	r3, r3
 8003ec4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003ec8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003ecc:	009b      	lsls	r3, r3, #2
 8003ece:	461a      	mov	r2, r3
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ed4:	f7fd f880 	bl	8000fd8 <HAL_GetTick>
 8003ed8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003edc:	e009      	b.n	8003ef2 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ede:	f7fd f87b 	bl	8000fd8 <HAL_GetTick>
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003ee8:	1ad3      	subs	r3, r2, r3
 8003eea:	2b02      	cmp	r3, #2
 8003eec:	d901      	bls.n	8003ef2 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8003eee:	2303      	movs	r3, #3
 8003ef0:	e144      	b.n	800417c <HAL_RCC_OscConfig+0x106c>
 8003ef2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ef6:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003efa:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003efe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f04:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	fa93 f2a3 	rbit	r2, r3
 8003f0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f12:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003f16:	601a      	str	r2, [r3, #0]
  return result;
 8003f18:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f1c:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003f20:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f22:	fab3 f383 	clz	r3, r3
 8003f26:	b2db      	uxtb	r3, r3
 8003f28:	095b      	lsrs	r3, r3, #5
 8003f2a:	b2db      	uxtb	r3, r3
 8003f2c:	f043 0301 	orr.w	r3, r3, #1
 8003f30:	b2db      	uxtb	r3, r3
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d102      	bne.n	8003f3c <HAL_RCC_OscConfig+0xe2c>
 8003f36:	4b54      	ldr	r3, [pc, #336]	@ (8004088 <HAL_RCC_OscConfig+0xf78>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	e027      	b.n	8003f8c <HAL_RCC_OscConfig+0xe7c>
 8003f3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f40:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003f44:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003f48:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f4e:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	fa93 f2a3 	rbit	r2, r3
 8003f58:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f5c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003f60:	601a      	str	r2, [r3, #0]
 8003f62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f66:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003f6a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003f6e:	601a      	str	r2, [r3, #0]
 8003f70:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f74:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	fa93 f2a3 	rbit	r2, r3
 8003f7e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f82:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8003f86:	601a      	str	r2, [r3, #0]
 8003f88:	4b3f      	ldr	r3, [pc, #252]	@ (8004088 <HAL_RCC_OscConfig+0xf78>)
 8003f8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f8c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003f90:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8003f94:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003f98:	6011      	str	r1, [r2, #0]
 8003f9a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003f9e:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8003fa2:	6812      	ldr	r2, [r2, #0]
 8003fa4:	fa92 f1a2 	rbit	r1, r2
 8003fa8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003fac:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003fb0:	6011      	str	r1, [r2, #0]
  return result;
 8003fb2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003fb6:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003fba:	6812      	ldr	r2, [r2, #0]
 8003fbc:	fab2 f282 	clz	r2, r2
 8003fc0:	b2d2      	uxtb	r2, r2
 8003fc2:	f042 0220 	orr.w	r2, r2, #32
 8003fc6:	b2d2      	uxtb	r2, r2
 8003fc8:	f002 021f 	and.w	r2, r2, #31
 8003fcc:	2101      	movs	r1, #1
 8003fce:	fa01 f202 	lsl.w	r2, r1, r2
 8003fd2:	4013      	ands	r3, r2
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d082      	beq.n	8003ede <HAL_RCC_OscConfig+0xdce>
 8003fd8:	e0cf      	b.n	800417a <HAL_RCC_OscConfig+0x106a>
 8003fda:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fde:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003fe2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003fe6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fe8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fec:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	fa93 f2a3 	rbit	r2, r3
 8003ff6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ffa:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003ffe:	601a      	str	r2, [r3, #0]
  return result;
 8004000:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004004:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8004008:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800400a:	fab3 f383 	clz	r3, r3
 800400e:	b2db      	uxtb	r3, r3
 8004010:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004014:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004018:	009b      	lsls	r3, r3, #2
 800401a:	461a      	mov	r2, r3
 800401c:	2300      	movs	r3, #0
 800401e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004020:	f7fc ffda 	bl	8000fd8 <HAL_GetTick>
 8004024:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004028:	e009      	b.n	800403e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800402a:	f7fc ffd5 	bl	8000fd8 <HAL_GetTick>
 800402e:	4602      	mov	r2, r0
 8004030:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004034:	1ad3      	subs	r3, r2, r3
 8004036:	2b02      	cmp	r3, #2
 8004038:	d901      	bls.n	800403e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800403a:	2303      	movs	r3, #3
 800403c:	e09e      	b.n	800417c <HAL_RCC_OscConfig+0x106c>
 800403e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004042:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8004046:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800404a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800404c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004050:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	fa93 f2a3 	rbit	r2, r3
 800405a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800405e:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8004062:	601a      	str	r2, [r3, #0]
  return result;
 8004064:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004068:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800406c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800406e:	fab3 f383 	clz	r3, r3
 8004072:	b2db      	uxtb	r3, r3
 8004074:	095b      	lsrs	r3, r3, #5
 8004076:	b2db      	uxtb	r3, r3
 8004078:	f043 0301 	orr.w	r3, r3, #1
 800407c:	b2db      	uxtb	r3, r3
 800407e:	2b01      	cmp	r3, #1
 8004080:	d104      	bne.n	800408c <HAL_RCC_OscConfig+0xf7c>
 8004082:	4b01      	ldr	r3, [pc, #4]	@ (8004088 <HAL_RCC_OscConfig+0xf78>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	e029      	b.n	80040dc <HAL_RCC_OscConfig+0xfcc>
 8004088:	40021000 	.word	0x40021000
 800408c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004090:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8004094:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004098:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800409a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800409e:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	fa93 f2a3 	rbit	r2, r3
 80040a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040ac:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80040b0:	601a      	str	r2, [r3, #0]
 80040b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040b6:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80040ba:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80040be:	601a      	str	r2, [r3, #0]
 80040c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040c4:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	fa93 f2a3 	rbit	r2, r3
 80040ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040d2:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80040d6:	601a      	str	r2, [r3, #0]
 80040d8:	4b2b      	ldr	r3, [pc, #172]	@ (8004188 <HAL_RCC_OscConfig+0x1078>)
 80040da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040dc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80040e0:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80040e4:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80040e8:	6011      	str	r1, [r2, #0]
 80040ea:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80040ee:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80040f2:	6812      	ldr	r2, [r2, #0]
 80040f4:	fa92 f1a2 	rbit	r1, r2
 80040f8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80040fc:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8004100:	6011      	str	r1, [r2, #0]
  return result;
 8004102:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004106:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800410a:	6812      	ldr	r2, [r2, #0]
 800410c:	fab2 f282 	clz	r2, r2
 8004110:	b2d2      	uxtb	r2, r2
 8004112:	f042 0220 	orr.w	r2, r2, #32
 8004116:	b2d2      	uxtb	r2, r2
 8004118:	f002 021f 	and.w	r2, r2, #31
 800411c:	2101      	movs	r1, #1
 800411e:	fa01 f202 	lsl.w	r2, r1, r2
 8004122:	4013      	ands	r3, r2
 8004124:	2b00      	cmp	r3, #0
 8004126:	d180      	bne.n	800402a <HAL_RCC_OscConfig+0xf1a>
 8004128:	e027      	b.n	800417a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800412a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800412e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	69db      	ldr	r3, [r3, #28]
 8004136:	2b01      	cmp	r3, #1
 8004138:	d101      	bne.n	800413e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e01e      	b.n	800417c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800413e:	4b12      	ldr	r3, [pc, #72]	@ (8004188 <HAL_RCC_OscConfig+0x1078>)
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004146:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800414a:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800414e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004152:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	6a1b      	ldr	r3, [r3, #32]
 800415a:	429a      	cmp	r2, r3
 800415c:	d10b      	bne.n	8004176 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800415e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8004162:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004166:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800416a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004172:	429a      	cmp	r2, r3
 8004174:	d001      	beq.n	800417a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	e000      	b.n	800417c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800417a:	2300      	movs	r3, #0
}
 800417c:	4618      	mov	r0, r3
 800417e:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}
 8004186:	bf00      	nop
 8004188:	40021000 	.word	0x40021000

0800418c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b09e      	sub	sp, #120	@ 0x78
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004196:	2300      	movs	r3, #0
 8004198:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d101      	bne.n	80041a4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	e162      	b.n	800446a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80041a4:	4b90      	ldr	r3, [pc, #576]	@ (80043e8 <HAL_RCC_ClockConfig+0x25c>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 0307 	and.w	r3, r3, #7
 80041ac:	683a      	ldr	r2, [r7, #0]
 80041ae:	429a      	cmp	r2, r3
 80041b0:	d910      	bls.n	80041d4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041b2:	4b8d      	ldr	r3, [pc, #564]	@ (80043e8 <HAL_RCC_ClockConfig+0x25c>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f023 0207 	bic.w	r2, r3, #7
 80041ba:	498b      	ldr	r1, [pc, #556]	@ (80043e8 <HAL_RCC_ClockConfig+0x25c>)
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	4313      	orrs	r3, r2
 80041c0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041c2:	4b89      	ldr	r3, [pc, #548]	@ (80043e8 <HAL_RCC_ClockConfig+0x25c>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 0307 	and.w	r3, r3, #7
 80041ca:	683a      	ldr	r2, [r7, #0]
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d001      	beq.n	80041d4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	e14a      	b.n	800446a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f003 0302 	and.w	r3, r3, #2
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d008      	beq.n	80041f2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041e0:	4b82      	ldr	r3, [pc, #520]	@ (80043ec <HAL_RCC_ClockConfig+0x260>)
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	689b      	ldr	r3, [r3, #8]
 80041ec:	497f      	ldr	r1, [pc, #508]	@ (80043ec <HAL_RCC_ClockConfig+0x260>)
 80041ee:	4313      	orrs	r3, r2
 80041f0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f003 0301 	and.w	r3, r3, #1
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	f000 80dc 	beq.w	80043b8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	2b01      	cmp	r3, #1
 8004206:	d13c      	bne.n	8004282 <HAL_RCC_ClockConfig+0xf6>
 8004208:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800420c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800420e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004210:	fa93 f3a3 	rbit	r3, r3
 8004214:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8004216:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004218:	fab3 f383 	clz	r3, r3
 800421c:	b2db      	uxtb	r3, r3
 800421e:	095b      	lsrs	r3, r3, #5
 8004220:	b2db      	uxtb	r3, r3
 8004222:	f043 0301 	orr.w	r3, r3, #1
 8004226:	b2db      	uxtb	r3, r3
 8004228:	2b01      	cmp	r3, #1
 800422a:	d102      	bne.n	8004232 <HAL_RCC_ClockConfig+0xa6>
 800422c:	4b6f      	ldr	r3, [pc, #444]	@ (80043ec <HAL_RCC_ClockConfig+0x260>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	e00f      	b.n	8004252 <HAL_RCC_ClockConfig+0xc6>
 8004232:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004236:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004238:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800423a:	fa93 f3a3 	rbit	r3, r3
 800423e:	667b      	str	r3, [r7, #100]	@ 0x64
 8004240:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004244:	663b      	str	r3, [r7, #96]	@ 0x60
 8004246:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004248:	fa93 f3a3 	rbit	r3, r3
 800424c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800424e:	4b67      	ldr	r3, [pc, #412]	@ (80043ec <HAL_RCC_ClockConfig+0x260>)
 8004250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004252:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004256:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004258:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800425a:	fa92 f2a2 	rbit	r2, r2
 800425e:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8004260:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004262:	fab2 f282 	clz	r2, r2
 8004266:	b2d2      	uxtb	r2, r2
 8004268:	f042 0220 	orr.w	r2, r2, #32
 800426c:	b2d2      	uxtb	r2, r2
 800426e:	f002 021f 	and.w	r2, r2, #31
 8004272:	2101      	movs	r1, #1
 8004274:	fa01 f202 	lsl.w	r2, r1, r2
 8004278:	4013      	ands	r3, r2
 800427a:	2b00      	cmp	r3, #0
 800427c:	d17b      	bne.n	8004376 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e0f3      	b.n	800446a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	2b02      	cmp	r3, #2
 8004288:	d13c      	bne.n	8004304 <HAL_RCC_ClockConfig+0x178>
 800428a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800428e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004290:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004292:	fa93 f3a3 	rbit	r3, r3
 8004296:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8004298:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800429a:	fab3 f383 	clz	r3, r3
 800429e:	b2db      	uxtb	r3, r3
 80042a0:	095b      	lsrs	r3, r3, #5
 80042a2:	b2db      	uxtb	r3, r3
 80042a4:	f043 0301 	orr.w	r3, r3, #1
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	2b01      	cmp	r3, #1
 80042ac:	d102      	bne.n	80042b4 <HAL_RCC_ClockConfig+0x128>
 80042ae:	4b4f      	ldr	r3, [pc, #316]	@ (80043ec <HAL_RCC_ClockConfig+0x260>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	e00f      	b.n	80042d4 <HAL_RCC_ClockConfig+0x148>
 80042b4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80042b8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80042bc:	fa93 f3a3 	rbit	r3, r3
 80042c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80042c2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80042c6:	643b      	str	r3, [r7, #64]	@ 0x40
 80042c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80042ca:	fa93 f3a3 	rbit	r3, r3
 80042ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80042d0:	4b46      	ldr	r3, [pc, #280]	@ (80043ec <HAL_RCC_ClockConfig+0x260>)
 80042d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042d4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80042d8:	63ba      	str	r2, [r7, #56]	@ 0x38
 80042da:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80042dc:	fa92 f2a2 	rbit	r2, r2
 80042e0:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 80042e2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80042e4:	fab2 f282 	clz	r2, r2
 80042e8:	b2d2      	uxtb	r2, r2
 80042ea:	f042 0220 	orr.w	r2, r2, #32
 80042ee:	b2d2      	uxtb	r2, r2
 80042f0:	f002 021f 	and.w	r2, r2, #31
 80042f4:	2101      	movs	r1, #1
 80042f6:	fa01 f202 	lsl.w	r2, r1, r2
 80042fa:	4013      	ands	r3, r2
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d13a      	bne.n	8004376 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	e0b2      	b.n	800446a <HAL_RCC_ClockConfig+0x2de>
 8004304:	2302      	movs	r3, #2
 8004306:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004308:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800430a:	fa93 f3a3 	rbit	r3, r3
 800430e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8004310:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004312:	fab3 f383 	clz	r3, r3
 8004316:	b2db      	uxtb	r3, r3
 8004318:	095b      	lsrs	r3, r3, #5
 800431a:	b2db      	uxtb	r3, r3
 800431c:	f043 0301 	orr.w	r3, r3, #1
 8004320:	b2db      	uxtb	r3, r3
 8004322:	2b01      	cmp	r3, #1
 8004324:	d102      	bne.n	800432c <HAL_RCC_ClockConfig+0x1a0>
 8004326:	4b31      	ldr	r3, [pc, #196]	@ (80043ec <HAL_RCC_ClockConfig+0x260>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	e00d      	b.n	8004348 <HAL_RCC_ClockConfig+0x1bc>
 800432c:	2302      	movs	r3, #2
 800432e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004330:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004332:	fa93 f3a3 	rbit	r3, r3
 8004336:	627b      	str	r3, [r7, #36]	@ 0x24
 8004338:	2302      	movs	r3, #2
 800433a:	623b      	str	r3, [r7, #32]
 800433c:	6a3b      	ldr	r3, [r7, #32]
 800433e:	fa93 f3a3 	rbit	r3, r3
 8004342:	61fb      	str	r3, [r7, #28]
 8004344:	4b29      	ldr	r3, [pc, #164]	@ (80043ec <HAL_RCC_ClockConfig+0x260>)
 8004346:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004348:	2202      	movs	r2, #2
 800434a:	61ba      	str	r2, [r7, #24]
 800434c:	69ba      	ldr	r2, [r7, #24]
 800434e:	fa92 f2a2 	rbit	r2, r2
 8004352:	617a      	str	r2, [r7, #20]
  return result;
 8004354:	697a      	ldr	r2, [r7, #20]
 8004356:	fab2 f282 	clz	r2, r2
 800435a:	b2d2      	uxtb	r2, r2
 800435c:	f042 0220 	orr.w	r2, r2, #32
 8004360:	b2d2      	uxtb	r2, r2
 8004362:	f002 021f 	and.w	r2, r2, #31
 8004366:	2101      	movs	r1, #1
 8004368:	fa01 f202 	lsl.w	r2, r1, r2
 800436c:	4013      	ands	r3, r2
 800436e:	2b00      	cmp	r3, #0
 8004370:	d101      	bne.n	8004376 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	e079      	b.n	800446a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004376:	4b1d      	ldr	r3, [pc, #116]	@ (80043ec <HAL_RCC_ClockConfig+0x260>)
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	f023 0203 	bic.w	r2, r3, #3
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	491a      	ldr	r1, [pc, #104]	@ (80043ec <HAL_RCC_ClockConfig+0x260>)
 8004384:	4313      	orrs	r3, r2
 8004386:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004388:	f7fc fe26 	bl	8000fd8 <HAL_GetTick>
 800438c:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800438e:	e00a      	b.n	80043a6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004390:	f7fc fe22 	bl	8000fd8 <HAL_GetTick>
 8004394:	4602      	mov	r2, r0
 8004396:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004398:	1ad3      	subs	r3, r2, r3
 800439a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800439e:	4293      	cmp	r3, r2
 80043a0:	d901      	bls.n	80043a6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80043a2:	2303      	movs	r3, #3
 80043a4:	e061      	b.n	800446a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043a6:	4b11      	ldr	r3, [pc, #68]	@ (80043ec <HAL_RCC_ClockConfig+0x260>)
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	f003 020c 	and.w	r2, r3, #12
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	009b      	lsls	r3, r3, #2
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d1eb      	bne.n	8004390 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80043b8:	4b0b      	ldr	r3, [pc, #44]	@ (80043e8 <HAL_RCC_ClockConfig+0x25c>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f003 0307 	and.w	r3, r3, #7
 80043c0:	683a      	ldr	r2, [r7, #0]
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d214      	bcs.n	80043f0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043c6:	4b08      	ldr	r3, [pc, #32]	@ (80043e8 <HAL_RCC_ClockConfig+0x25c>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f023 0207 	bic.w	r2, r3, #7
 80043ce:	4906      	ldr	r1, [pc, #24]	@ (80043e8 <HAL_RCC_ClockConfig+0x25c>)
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	4313      	orrs	r3, r2
 80043d4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043d6:	4b04      	ldr	r3, [pc, #16]	@ (80043e8 <HAL_RCC_ClockConfig+0x25c>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f003 0307 	and.w	r3, r3, #7
 80043de:	683a      	ldr	r2, [r7, #0]
 80043e0:	429a      	cmp	r2, r3
 80043e2:	d005      	beq.n	80043f0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	e040      	b.n	800446a <HAL_RCC_ClockConfig+0x2de>
 80043e8:	40022000 	.word	0x40022000
 80043ec:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f003 0304 	and.w	r3, r3, #4
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d008      	beq.n	800440e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043fc:	4b1d      	ldr	r3, [pc, #116]	@ (8004474 <HAL_RCC_ClockConfig+0x2e8>)
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	68db      	ldr	r3, [r3, #12]
 8004408:	491a      	ldr	r1, [pc, #104]	@ (8004474 <HAL_RCC_ClockConfig+0x2e8>)
 800440a:	4313      	orrs	r3, r2
 800440c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f003 0308 	and.w	r3, r3, #8
 8004416:	2b00      	cmp	r3, #0
 8004418:	d009      	beq.n	800442e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800441a:	4b16      	ldr	r3, [pc, #88]	@ (8004474 <HAL_RCC_ClockConfig+0x2e8>)
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	691b      	ldr	r3, [r3, #16]
 8004426:	00db      	lsls	r3, r3, #3
 8004428:	4912      	ldr	r1, [pc, #72]	@ (8004474 <HAL_RCC_ClockConfig+0x2e8>)
 800442a:	4313      	orrs	r3, r2
 800442c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800442e:	f000 f829 	bl	8004484 <HAL_RCC_GetSysClockFreq>
 8004432:	4601      	mov	r1, r0
 8004434:	4b0f      	ldr	r3, [pc, #60]	@ (8004474 <HAL_RCC_ClockConfig+0x2e8>)
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800443c:	22f0      	movs	r2, #240	@ 0xf0
 800443e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004440:	693a      	ldr	r2, [r7, #16]
 8004442:	fa92 f2a2 	rbit	r2, r2
 8004446:	60fa      	str	r2, [r7, #12]
  return result;
 8004448:	68fa      	ldr	r2, [r7, #12]
 800444a:	fab2 f282 	clz	r2, r2
 800444e:	b2d2      	uxtb	r2, r2
 8004450:	40d3      	lsrs	r3, r2
 8004452:	4a09      	ldr	r2, [pc, #36]	@ (8004478 <HAL_RCC_ClockConfig+0x2ec>)
 8004454:	5cd3      	ldrb	r3, [r2, r3]
 8004456:	fa21 f303 	lsr.w	r3, r1, r3
 800445a:	4a08      	ldr	r2, [pc, #32]	@ (800447c <HAL_RCC_ClockConfig+0x2f0>)
 800445c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800445e:	4b08      	ldr	r3, [pc, #32]	@ (8004480 <HAL_RCC_ClockConfig+0x2f4>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4618      	mov	r0, r3
 8004464:	f7fc fc7c 	bl	8000d60 <HAL_InitTick>
  
  return HAL_OK;
 8004468:	2300      	movs	r3, #0
}
 800446a:	4618      	mov	r0, r3
 800446c:	3778      	adds	r7, #120	@ 0x78
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}
 8004472:	bf00      	nop
 8004474:	40021000 	.word	0x40021000
 8004478:	08007d24 	.word	0x08007d24
 800447c:	20000000 	.word	0x20000000
 8004480:	20000004 	.word	0x20000004

08004484 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004484:	b480      	push	{r7}
 8004486:	b087      	sub	sp, #28
 8004488:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800448a:	2300      	movs	r3, #0
 800448c:	60fb      	str	r3, [r7, #12]
 800448e:	2300      	movs	r3, #0
 8004490:	60bb      	str	r3, [r7, #8]
 8004492:	2300      	movs	r3, #0
 8004494:	617b      	str	r3, [r7, #20]
 8004496:	2300      	movs	r3, #0
 8004498:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800449a:	2300      	movs	r3, #0
 800449c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800449e:	4b1e      	ldr	r3, [pc, #120]	@ (8004518 <HAL_RCC_GetSysClockFreq+0x94>)
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	f003 030c 	and.w	r3, r3, #12
 80044aa:	2b04      	cmp	r3, #4
 80044ac:	d002      	beq.n	80044b4 <HAL_RCC_GetSysClockFreq+0x30>
 80044ae:	2b08      	cmp	r3, #8
 80044b0:	d003      	beq.n	80044ba <HAL_RCC_GetSysClockFreq+0x36>
 80044b2:	e026      	b.n	8004502 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80044b4:	4b19      	ldr	r3, [pc, #100]	@ (800451c <HAL_RCC_GetSysClockFreq+0x98>)
 80044b6:	613b      	str	r3, [r7, #16]
      break;
 80044b8:	e026      	b.n	8004508 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	0c9b      	lsrs	r3, r3, #18
 80044be:	f003 030f 	and.w	r3, r3, #15
 80044c2:	4a17      	ldr	r2, [pc, #92]	@ (8004520 <HAL_RCC_GetSysClockFreq+0x9c>)
 80044c4:	5cd3      	ldrb	r3, [r2, r3]
 80044c6:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 80044c8:	4b13      	ldr	r3, [pc, #76]	@ (8004518 <HAL_RCC_GetSysClockFreq+0x94>)
 80044ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044cc:	f003 030f 	and.w	r3, r3, #15
 80044d0:	4a14      	ldr	r2, [pc, #80]	@ (8004524 <HAL_RCC_GetSysClockFreq+0xa0>)
 80044d2:	5cd3      	ldrb	r3, [r2, r3]
 80044d4:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d008      	beq.n	80044f2 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80044e0:	4a0e      	ldr	r2, [pc, #56]	@ (800451c <HAL_RCC_GetSysClockFreq+0x98>)
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	fb02 f303 	mul.w	r3, r2, r3
 80044ee:	617b      	str	r3, [r7, #20]
 80044f0:	e004      	b.n	80044fc <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	4a0c      	ldr	r2, [pc, #48]	@ (8004528 <HAL_RCC_GetSysClockFreq+0xa4>)
 80044f6:	fb02 f303 	mul.w	r3, r2, r3
 80044fa:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	613b      	str	r3, [r7, #16]
      break;
 8004500:	e002      	b.n	8004508 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004502:	4b06      	ldr	r3, [pc, #24]	@ (800451c <HAL_RCC_GetSysClockFreq+0x98>)
 8004504:	613b      	str	r3, [r7, #16]
      break;
 8004506:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004508:	693b      	ldr	r3, [r7, #16]
}
 800450a:	4618      	mov	r0, r3
 800450c:	371c      	adds	r7, #28
 800450e:	46bd      	mov	sp, r7
 8004510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004514:	4770      	bx	lr
 8004516:	bf00      	nop
 8004518:	40021000 	.word	0x40021000
 800451c:	007a1200 	.word	0x007a1200
 8004520:	08007d3c 	.word	0x08007d3c
 8004524:	08007d4c 	.word	0x08007d4c
 8004528:	003d0900 	.word	0x003d0900

0800452c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800452c:	b480      	push	{r7}
 800452e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004530:	4b03      	ldr	r3, [pc, #12]	@ (8004540 <HAL_RCC_GetHCLKFreq+0x14>)
 8004532:	681b      	ldr	r3, [r3, #0]
}
 8004534:	4618      	mov	r0, r3
 8004536:	46bd      	mov	sp, r7
 8004538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453c:	4770      	bx	lr
 800453e:	bf00      	nop
 8004540:	20000000 	.word	0x20000000

08004544 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b082      	sub	sp, #8
 8004548:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800454a:	f7ff ffef 	bl	800452c <HAL_RCC_GetHCLKFreq>
 800454e:	4601      	mov	r1, r0
 8004550:	4b0b      	ldr	r3, [pc, #44]	@ (8004580 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004558:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800455c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800455e:	687a      	ldr	r2, [r7, #4]
 8004560:	fa92 f2a2 	rbit	r2, r2
 8004564:	603a      	str	r2, [r7, #0]
  return result;
 8004566:	683a      	ldr	r2, [r7, #0]
 8004568:	fab2 f282 	clz	r2, r2
 800456c:	b2d2      	uxtb	r2, r2
 800456e:	40d3      	lsrs	r3, r2
 8004570:	4a04      	ldr	r2, [pc, #16]	@ (8004584 <HAL_RCC_GetPCLK1Freq+0x40>)
 8004572:	5cd3      	ldrb	r3, [r2, r3]
 8004574:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004578:	4618      	mov	r0, r3
 800457a:	3708      	adds	r7, #8
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}
 8004580:	40021000 	.word	0x40021000
 8004584:	08007d34 	.word	0x08007d34

08004588 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b082      	sub	sp, #8
 800458c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800458e:	f7ff ffcd 	bl	800452c <HAL_RCC_GetHCLKFreq>
 8004592:	4601      	mov	r1, r0
 8004594:	4b0b      	ldr	r3, [pc, #44]	@ (80045c4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 800459c:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 80045a0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045a2:	687a      	ldr	r2, [r7, #4]
 80045a4:	fa92 f2a2 	rbit	r2, r2
 80045a8:	603a      	str	r2, [r7, #0]
  return result;
 80045aa:	683a      	ldr	r2, [r7, #0]
 80045ac:	fab2 f282 	clz	r2, r2
 80045b0:	b2d2      	uxtb	r2, r2
 80045b2:	40d3      	lsrs	r3, r2
 80045b4:	4a04      	ldr	r2, [pc, #16]	@ (80045c8 <HAL_RCC_GetPCLK2Freq+0x40>)
 80045b6:	5cd3      	ldrb	r3, [r2, r3]
 80045b8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80045bc:	4618      	mov	r0, r3
 80045be:	3708      	adds	r7, #8
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}
 80045c4:	40021000 	.word	0x40021000
 80045c8:	08007d34 	.word	0x08007d34

080045cc <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b083      	sub	sp, #12
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
 80045d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	220f      	movs	r2, #15
 80045da:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80045dc:	4b12      	ldr	r3, [pc, #72]	@ (8004628 <HAL_RCC_GetClockConfig+0x5c>)
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	f003 0203 	and.w	r2, r3, #3
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 80045e8:	4b0f      	ldr	r3, [pc, #60]	@ (8004628 <HAL_RCC_GetClockConfig+0x5c>)
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 80045f4:	4b0c      	ldr	r3, [pc, #48]	@ (8004628 <HAL_RCC_GetClockConfig+0x5c>)
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004600:	4b09      	ldr	r3, [pc, #36]	@ (8004628 <HAL_RCC_GetClockConfig+0x5c>)
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	08db      	lsrs	r3, r3, #3
 8004606:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 800460e:	4b07      	ldr	r3, [pc, #28]	@ (800462c <HAL_RCC_GetClockConfig+0x60>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f003 0207 	and.w	r2, r3, #7
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	601a      	str	r2, [r3, #0]
}
 800461a:	bf00      	nop
 800461c:	370c      	adds	r7, #12
 800461e:	46bd      	mov	sp, r7
 8004620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004624:	4770      	bx	lr
 8004626:	bf00      	nop
 8004628:	40021000 	.word	0x40021000
 800462c:	40022000 	.word	0x40022000

08004630 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b092      	sub	sp, #72	@ 0x48
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004638:	2300      	movs	r3, #0
 800463a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 800463c:	2300      	movs	r3, #0
 800463e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004640:	2300      	movs	r3, #0
 8004642:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800464e:	2b00      	cmp	r3, #0
 8004650:	f000 80d4 	beq.w	80047fc <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004654:	4b4e      	ldr	r3, [pc, #312]	@ (8004790 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004656:	69db      	ldr	r3, [r3, #28]
 8004658:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800465c:	2b00      	cmp	r3, #0
 800465e:	d10e      	bne.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004660:	4b4b      	ldr	r3, [pc, #300]	@ (8004790 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004662:	69db      	ldr	r3, [r3, #28]
 8004664:	4a4a      	ldr	r2, [pc, #296]	@ (8004790 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004666:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800466a:	61d3      	str	r3, [r2, #28]
 800466c:	4b48      	ldr	r3, [pc, #288]	@ (8004790 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800466e:	69db      	ldr	r3, [r3, #28]
 8004670:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004674:	60bb      	str	r3, [r7, #8]
 8004676:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004678:	2301      	movs	r3, #1
 800467a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800467e:	4b45      	ldr	r3, [pc, #276]	@ (8004794 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004686:	2b00      	cmp	r3, #0
 8004688:	d118      	bne.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800468a:	4b42      	ldr	r3, [pc, #264]	@ (8004794 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a41      	ldr	r2, [pc, #260]	@ (8004794 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004690:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004694:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004696:	f7fc fc9f 	bl	8000fd8 <HAL_GetTick>
 800469a:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800469c:	e008      	b.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800469e:	f7fc fc9b 	bl	8000fd8 <HAL_GetTick>
 80046a2:	4602      	mov	r2, r0
 80046a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80046a6:	1ad3      	subs	r3, r2, r3
 80046a8:	2b64      	cmp	r3, #100	@ 0x64
 80046aa:	d901      	bls.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80046ac:	2303      	movs	r3, #3
 80046ae:	e14b      	b.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046b0:	4b38      	ldr	r3, [pc, #224]	@ (8004794 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d0f0      	beq.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80046bc:	4b34      	ldr	r3, [pc, #208]	@ (8004790 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046be:	6a1b      	ldr	r3, [r3, #32]
 80046c0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80046c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	f000 8084 	beq.w	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046d6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80046d8:	429a      	cmp	r2, r3
 80046da:	d07c      	beq.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80046dc:	4b2c      	ldr	r3, [pc, #176]	@ (8004790 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046de:	6a1b      	ldr	r3, [r3, #32]
 80046e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80046e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80046e6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80046ea:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046ee:	fa93 f3a3 	rbit	r3, r3
 80046f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80046f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80046f6:	fab3 f383 	clz	r3, r3
 80046fa:	b2db      	uxtb	r3, r3
 80046fc:	461a      	mov	r2, r3
 80046fe:	4b26      	ldr	r3, [pc, #152]	@ (8004798 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004700:	4413      	add	r3, r2
 8004702:	009b      	lsls	r3, r3, #2
 8004704:	461a      	mov	r2, r3
 8004706:	2301      	movs	r3, #1
 8004708:	6013      	str	r3, [r2, #0]
 800470a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800470e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004710:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004712:	fa93 f3a3 	rbit	r3, r3
 8004716:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004718:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800471a:	fab3 f383 	clz	r3, r3
 800471e:	b2db      	uxtb	r3, r3
 8004720:	461a      	mov	r2, r3
 8004722:	4b1d      	ldr	r3, [pc, #116]	@ (8004798 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004724:	4413      	add	r3, r2
 8004726:	009b      	lsls	r3, r3, #2
 8004728:	461a      	mov	r2, r3
 800472a:	2300      	movs	r3, #0
 800472c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800472e:	4a18      	ldr	r2, [pc, #96]	@ (8004790 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004730:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004732:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004734:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004736:	f003 0301 	and.w	r3, r3, #1
 800473a:	2b00      	cmp	r3, #0
 800473c:	d04b      	beq.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800473e:	f7fc fc4b 	bl	8000fd8 <HAL_GetTick>
 8004742:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004744:	e00a      	b.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004746:	f7fc fc47 	bl	8000fd8 <HAL_GetTick>
 800474a:	4602      	mov	r2, r0
 800474c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800474e:	1ad3      	subs	r3, r2, r3
 8004750:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004754:	4293      	cmp	r3, r2
 8004756:	d901      	bls.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004758:	2303      	movs	r3, #3
 800475a:	e0f5      	b.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x318>
 800475c:	2302      	movs	r3, #2
 800475e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004760:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004762:	fa93 f3a3 	rbit	r3, r3
 8004766:	627b      	str	r3, [r7, #36]	@ 0x24
 8004768:	2302      	movs	r3, #2
 800476a:	623b      	str	r3, [r7, #32]
 800476c:	6a3b      	ldr	r3, [r7, #32]
 800476e:	fa93 f3a3 	rbit	r3, r3
 8004772:	61fb      	str	r3, [r7, #28]
  return result;
 8004774:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004776:	fab3 f383 	clz	r3, r3
 800477a:	b2db      	uxtb	r3, r3
 800477c:	095b      	lsrs	r3, r3, #5
 800477e:	b2db      	uxtb	r3, r3
 8004780:	f043 0302 	orr.w	r3, r3, #2
 8004784:	b2db      	uxtb	r3, r3
 8004786:	2b02      	cmp	r3, #2
 8004788:	d108      	bne.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800478a:	4b01      	ldr	r3, [pc, #4]	@ (8004790 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800478c:	6a1b      	ldr	r3, [r3, #32]
 800478e:	e00d      	b.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004790:	40021000 	.word	0x40021000
 8004794:	40007000 	.word	0x40007000
 8004798:	10908100 	.word	0x10908100
 800479c:	2302      	movs	r3, #2
 800479e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047a0:	69bb      	ldr	r3, [r7, #24]
 80047a2:	fa93 f3a3 	rbit	r3, r3
 80047a6:	617b      	str	r3, [r7, #20]
 80047a8:	4b69      	ldr	r3, [pc, #420]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80047aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047ac:	2202      	movs	r2, #2
 80047ae:	613a      	str	r2, [r7, #16]
 80047b0:	693a      	ldr	r2, [r7, #16]
 80047b2:	fa92 f2a2 	rbit	r2, r2
 80047b6:	60fa      	str	r2, [r7, #12]
  return result;
 80047b8:	68fa      	ldr	r2, [r7, #12]
 80047ba:	fab2 f282 	clz	r2, r2
 80047be:	b2d2      	uxtb	r2, r2
 80047c0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80047c4:	b2d2      	uxtb	r2, r2
 80047c6:	f002 021f 	and.w	r2, r2, #31
 80047ca:	2101      	movs	r1, #1
 80047cc:	fa01 f202 	lsl.w	r2, r1, r2
 80047d0:	4013      	ands	r3, r2
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d0b7      	beq.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80047d6:	4b5e      	ldr	r3, [pc, #376]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80047d8:	6a1b      	ldr	r3, [r3, #32]
 80047da:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	495b      	ldr	r1, [pc, #364]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80047e4:	4313      	orrs	r3, r2
 80047e6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80047e8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	d105      	bne.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047f0:	4b57      	ldr	r3, [pc, #348]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80047f2:	69db      	ldr	r3, [r3, #28]
 80047f4:	4a56      	ldr	r2, [pc, #344]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80047f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80047fa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 0301 	and.w	r3, r3, #1
 8004804:	2b00      	cmp	r3, #0
 8004806:	d008      	beq.n	800481a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004808:	4b51      	ldr	r3, [pc, #324]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800480a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800480c:	f023 0203 	bic.w	r2, r3, #3
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	494e      	ldr	r1, [pc, #312]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004816:	4313      	orrs	r3, r2
 8004818:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f003 0320 	and.w	r3, r3, #32
 8004822:	2b00      	cmp	r3, #0
 8004824:	d008      	beq.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004826:	4b4a      	ldr	r3, [pc, #296]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800482a:	f023 0210 	bic.w	r2, r3, #16
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	68db      	ldr	r3, [r3, #12]
 8004832:	4947      	ldr	r1, [pc, #284]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004834:	4313      	orrs	r3, r2
 8004836:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004840:	2b00      	cmp	r3, #0
 8004842:	d008      	beq.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004844:	4b42      	ldr	r3, [pc, #264]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004850:	493f      	ldr	r1, [pc, #252]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004852:	4313      	orrs	r3, r2
 8004854:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800485e:	2b00      	cmp	r3, #0
 8004860:	d008      	beq.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004862:	4b3b      	ldr	r3, [pc, #236]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004866:	f023 0220 	bic.w	r2, r3, #32
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	691b      	ldr	r3, [r3, #16]
 800486e:	4938      	ldr	r1, [pc, #224]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004870:	4313      	orrs	r3, r2
 8004872:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800487c:	2b00      	cmp	r3, #0
 800487e:	d008      	beq.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004880:	4b33      	ldr	r3, [pc, #204]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004882:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004884:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	695b      	ldr	r3, [r3, #20]
 800488c:	4930      	ldr	r1, [pc, #192]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800488e:	4313      	orrs	r3, r2
 8004890:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800489a:	2b00      	cmp	r3, #0
 800489c:	d008      	beq.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800489e:	4b2c      	ldr	r3, [pc, #176]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	69db      	ldr	r3, [r3, #28]
 80048aa:	4929      	ldr	r1, [pc, #164]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80048ac:	4313      	orrs	r3, r2
 80048ae:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d008      	beq.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 80048bc:	4b24      	ldr	r3, [pc, #144]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80048be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048c0:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	699b      	ldr	r3, [r3, #24]
 80048c8:	4921      	ldr	r1, [pc, #132]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80048ca:	4313      	orrs	r3, r2
 80048cc:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d008      	beq.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80048da:	4b1d      	ldr	r3, [pc, #116]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80048dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048de:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6a1b      	ldr	r3, [r3, #32]
 80048e6:	491a      	ldr	r1, [pc, #104]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80048e8:	4313      	orrs	r3, r2
 80048ea:	630b      	str	r3, [r1, #48]	@ 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d008      	beq.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80048f8:	4b15      	ldr	r3, [pc, #84]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80048fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048fc:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004904:	4912      	ldr	r1, [pc, #72]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004906:	4313      	orrs	r3, r2
 8004908:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004912:	2b00      	cmp	r3, #0
 8004914:	d008      	beq.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8004916:	4b0e      	ldr	r3, [pc, #56]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800491a:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004922:	490b      	ldr	r1, [pc, #44]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004924:	4313      	orrs	r3, r2
 8004926:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004930:	2b00      	cmp	r3, #0
 8004932:	d008      	beq.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8004934:	4b06      	ldr	r3, [pc, #24]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004936:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004938:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004940:	4903      	ldr	r1, [pc, #12]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004942:	4313      	orrs	r3, r2
 8004944:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004946:	2300      	movs	r3, #0
}
 8004948:	4618      	mov	r0, r3
 800494a:	3748      	adds	r7, #72	@ 0x48
 800494c:	46bd      	mov	sp, r7
 800494e:	bd80      	pop	{r7, pc}
 8004950:	40021000 	.word	0x40021000

08004954 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b082      	sub	sp, #8
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d101      	bne.n	8004966 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	e049      	b.n	80049fa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800496c:	b2db      	uxtb	r3, r3
 800496e:	2b00      	cmp	r3, #0
 8004970:	d106      	bne.n	8004980 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2200      	movs	r2, #0
 8004976:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f000 f841 	bl	8004a02 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2202      	movs	r2, #2
 8004984:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681a      	ldr	r2, [r3, #0]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	3304      	adds	r3, #4
 8004990:	4619      	mov	r1, r3
 8004992:	4610      	mov	r0, r2
 8004994:	f000 f9be 	bl	8004d14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2201      	movs	r2, #1
 800499c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2201      	movs	r2, #1
 80049a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2201      	movs	r2, #1
 80049ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2201      	movs	r2, #1
 80049b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2201      	movs	r2, #1
 80049bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2201      	movs	r2, #1
 80049c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2201      	movs	r2, #1
 80049cc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2201      	movs	r2, #1
 80049d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2201      	movs	r2, #1
 80049dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2201      	movs	r2, #1
 80049e4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2201      	movs	r2, #1
 80049ec:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2201      	movs	r2, #1
 80049f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80049f8:	2300      	movs	r3, #0
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3708      	adds	r7, #8
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}

08004a02 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004a02:	b480      	push	{r7}
 8004a04:	b083      	sub	sp, #12
 8004a06:	af00      	add	r7, sp, #0
 8004a08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004a0a:	bf00      	nop
 8004a0c:	370c      	adds	r7, #12
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a14:	4770      	bx	lr
	...

08004a18 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b085      	sub	sp, #20
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a26:	b2db      	uxtb	r3, r3
 8004a28:	2b01      	cmp	r3, #1
 8004a2a:	d001      	beq.n	8004a30 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	e03b      	b.n	8004aa8 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2202      	movs	r2, #2
 8004a34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	68da      	ldr	r2, [r3, #12]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f042 0201 	orr.w	r2, r2, #1
 8004a46:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a19      	ldr	r2, [pc, #100]	@ (8004ab4 <HAL_TIM_Base_Start_IT+0x9c>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d009      	beq.n	8004a66 <HAL_TIM_Base_Start_IT+0x4e>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a5a:	d004      	beq.n	8004a66 <HAL_TIM_Base_Start_IT+0x4e>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a15      	ldr	r2, [pc, #84]	@ (8004ab8 <HAL_TIM_Base_Start_IT+0xa0>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d115      	bne.n	8004a92 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	689a      	ldr	r2, [r3, #8]
 8004a6c:	4b13      	ldr	r3, [pc, #76]	@ (8004abc <HAL_TIM_Base_Start_IT+0xa4>)
 8004a6e:	4013      	ands	r3, r2
 8004a70:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	2b06      	cmp	r3, #6
 8004a76:	d015      	beq.n	8004aa4 <HAL_TIM_Base_Start_IT+0x8c>
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a7e:	d011      	beq.n	8004aa4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f042 0201 	orr.w	r2, r2, #1
 8004a8e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a90:	e008      	b.n	8004aa4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	681a      	ldr	r2, [r3, #0]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f042 0201 	orr.w	r2, r2, #1
 8004aa0:	601a      	str	r2, [r3, #0]
 8004aa2:	e000      	b.n	8004aa6 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004aa4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004aa6:	2300      	movs	r3, #0
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	3714      	adds	r7, #20
 8004aac:	46bd      	mov	sp, r7
 8004aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab2:	4770      	bx	lr
 8004ab4:	40012c00 	.word	0x40012c00
 8004ab8:	40014000 	.word	0x40014000
 8004abc:	00010007 	.word	0x00010007

08004ac0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b084      	sub	sp, #16
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	68db      	ldr	r3, [r3, #12]
 8004ace:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	691b      	ldr	r3, [r3, #16]
 8004ad6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	f003 0302 	and.w	r3, r3, #2
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d020      	beq.n	8004b24 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	f003 0302 	and.w	r3, r3, #2
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d01b      	beq.n	8004b24 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f06f 0202 	mvn.w	r2, #2
 8004af4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2201      	movs	r2, #1
 8004afa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	699b      	ldr	r3, [r3, #24]
 8004b02:	f003 0303 	and.w	r3, r3, #3
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d003      	beq.n	8004b12 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f000 f8e4 	bl	8004cd8 <HAL_TIM_IC_CaptureCallback>
 8004b10:	e005      	b.n	8004b1e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	f000 f8d6 	bl	8004cc4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b18:	6878      	ldr	r0, [r7, #4]
 8004b1a:	f000 f8e7 	bl	8004cec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2200      	movs	r2, #0
 8004b22:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	f003 0304 	and.w	r3, r3, #4
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d020      	beq.n	8004b70 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	f003 0304 	and.w	r3, r3, #4
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d01b      	beq.n	8004b70 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f06f 0204 	mvn.w	r2, #4
 8004b40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2202      	movs	r2, #2
 8004b46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	699b      	ldr	r3, [r3, #24]
 8004b4e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d003      	beq.n	8004b5e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f000 f8be 	bl	8004cd8 <HAL_TIM_IC_CaptureCallback>
 8004b5c:	e005      	b.n	8004b6a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f000 f8b0 	bl	8004cc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b64:	6878      	ldr	r0, [r7, #4]
 8004b66:	f000 f8c1 	bl	8004cec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	f003 0308 	and.w	r3, r3, #8
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d020      	beq.n	8004bbc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	f003 0308 	and.w	r3, r3, #8
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d01b      	beq.n	8004bbc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f06f 0208 	mvn.w	r2, #8
 8004b8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2204      	movs	r2, #4
 8004b92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	69db      	ldr	r3, [r3, #28]
 8004b9a:	f003 0303 	and.w	r3, r3, #3
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d003      	beq.n	8004baa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f000 f898 	bl	8004cd8 <HAL_TIM_IC_CaptureCallback>
 8004ba8:	e005      	b.n	8004bb6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f000 f88a 	bl	8004cc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bb0:	6878      	ldr	r0, [r7, #4]
 8004bb2:	f000 f89b 	bl	8004cec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	f003 0310 	and.w	r3, r3, #16
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d020      	beq.n	8004c08 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	f003 0310 	and.w	r3, r3, #16
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d01b      	beq.n	8004c08 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f06f 0210 	mvn.w	r2, #16
 8004bd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2208      	movs	r2, #8
 8004bde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	69db      	ldr	r3, [r3, #28]
 8004be6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d003      	beq.n	8004bf6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f000 f872 	bl	8004cd8 <HAL_TIM_IC_CaptureCallback>
 8004bf4:	e005      	b.n	8004c02 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f000 f864 	bl	8004cc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bfc:	6878      	ldr	r0, [r7, #4]
 8004bfe:	f000 f875 	bl	8004cec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2200      	movs	r2, #0
 8004c06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	f003 0301 	and.w	r3, r3, #1
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d00c      	beq.n	8004c2c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	f003 0301 	and.w	r3, r3, #1
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d007      	beq.n	8004c2c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f06f 0201 	mvn.w	r2, #1
 8004c24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f7fb ff52 	bl	8000ad0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d00c      	beq.n	8004c50 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d007      	beq.n	8004c50 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004c48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f000 f8e6 	bl	8004e1c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d00c      	beq.n	8004c74 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d007      	beq.n	8004c74 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004c6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f000 f8de 	bl	8004e30 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d00c      	beq.n	8004c98 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d007      	beq.n	8004c98 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004c90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f000 f834 	bl	8004d00 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	f003 0320 	and.w	r3, r3, #32
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d00c      	beq.n	8004cbc <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	f003 0320 	and.w	r3, r3, #32
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d007      	beq.n	8004cbc <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f06f 0220 	mvn.w	r2, #32
 8004cb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	f000 f8a6 	bl	8004e08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004cbc:	bf00      	nop
 8004cbe:	3710      	adds	r7, #16
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}

08004cc4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b083      	sub	sp, #12
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004ccc:	bf00      	nop
 8004cce:	370c      	adds	r7, #12
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd6:	4770      	bx	lr

08004cd8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b083      	sub	sp, #12
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004ce0:	bf00      	nop
 8004ce2:	370c      	adds	r7, #12
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cea:	4770      	bx	lr

08004cec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b083      	sub	sp, #12
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004cf4:	bf00      	nop
 8004cf6:	370c      	adds	r7, #12
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfe:	4770      	bx	lr

08004d00 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b083      	sub	sp, #12
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d08:	bf00      	nop
 8004d0a:	370c      	adds	r7, #12
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d12:	4770      	bx	lr

08004d14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b085      	sub	sp, #20
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
 8004d1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	4a34      	ldr	r2, [pc, #208]	@ (8004df8 <TIM_Base_SetConfig+0xe4>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d003      	beq.n	8004d34 <TIM_Base_SetConfig+0x20>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d32:	d108      	bne.n	8004d46 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	68fa      	ldr	r2, [r7, #12]
 8004d42:	4313      	orrs	r3, r2
 8004d44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	4a2b      	ldr	r2, [pc, #172]	@ (8004df8 <TIM_Base_SetConfig+0xe4>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d00f      	beq.n	8004d6e <TIM_Base_SetConfig+0x5a>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d54:	d00b      	beq.n	8004d6e <TIM_Base_SetConfig+0x5a>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	4a28      	ldr	r2, [pc, #160]	@ (8004dfc <TIM_Base_SetConfig+0xe8>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d007      	beq.n	8004d6e <TIM_Base_SetConfig+0x5a>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	4a27      	ldr	r2, [pc, #156]	@ (8004e00 <TIM_Base_SetConfig+0xec>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d003      	beq.n	8004d6e <TIM_Base_SetConfig+0x5a>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	4a26      	ldr	r2, [pc, #152]	@ (8004e04 <TIM_Base_SetConfig+0xf0>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d108      	bne.n	8004d80 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	68db      	ldr	r3, [r3, #12]
 8004d7a:	68fa      	ldr	r2, [r7, #12]
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	695b      	ldr	r3, [r3, #20]
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	68fa      	ldr	r2, [r7, #12]
 8004d92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	689a      	ldr	r2, [r3, #8]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	681a      	ldr	r2, [r3, #0]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	4a14      	ldr	r2, [pc, #80]	@ (8004df8 <TIM_Base_SetConfig+0xe4>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d00b      	beq.n	8004dc4 <TIM_Base_SetConfig+0xb0>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	4a13      	ldr	r2, [pc, #76]	@ (8004dfc <TIM_Base_SetConfig+0xe8>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d007      	beq.n	8004dc4 <TIM_Base_SetConfig+0xb0>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	4a12      	ldr	r2, [pc, #72]	@ (8004e00 <TIM_Base_SetConfig+0xec>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d003      	beq.n	8004dc4 <TIM_Base_SetConfig+0xb0>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	4a11      	ldr	r2, [pc, #68]	@ (8004e04 <TIM_Base_SetConfig+0xf0>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d103      	bne.n	8004dcc <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	691a      	ldr	r2, [r3, #16]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2201      	movs	r2, #1
 8004dd0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	691b      	ldr	r3, [r3, #16]
 8004dd6:	f003 0301 	and.w	r3, r3, #1
 8004dda:	2b01      	cmp	r3, #1
 8004ddc:	d105      	bne.n	8004dea <TIM_Base_SetConfig+0xd6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	691b      	ldr	r3, [r3, #16]
 8004de2:	f023 0201 	bic.w	r2, r3, #1
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	611a      	str	r2, [r3, #16]
  }
}
 8004dea:	bf00      	nop
 8004dec:	3714      	adds	r7, #20
 8004dee:	46bd      	mov	sp, r7
 8004df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df4:	4770      	bx	lr
 8004df6:	bf00      	nop
 8004df8:	40012c00 	.word	0x40012c00
 8004dfc:	40014000 	.word	0x40014000
 8004e00:	40014400 	.word	0x40014400
 8004e04:	40014800 	.word	0x40014800

08004e08 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b083      	sub	sp, #12
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004e10:	bf00      	nop
 8004e12:	370c      	adds	r7, #12
 8004e14:	46bd      	mov	sp, r7
 8004e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1a:	4770      	bx	lr

08004e1c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b083      	sub	sp, #12
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004e24:	bf00      	nop
 8004e26:	370c      	adds	r7, #12
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2e:	4770      	bx	lr

08004e30 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004e30:	b480      	push	{r7}
 8004e32:	b083      	sub	sp, #12
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004e38:	bf00      	nop
 8004e3a:	370c      	adds	r7, #12
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e42:	4770      	bx	lr

08004e44 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b082      	sub	sp, #8
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d101      	bne.n	8004e56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	e040      	b.n	8004ed8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d106      	bne.n	8004e6c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2200      	movs	r2, #0
 8004e62:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f7fb ff38 	bl	8000cdc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2224      	movs	r2, #36	@ 0x24
 8004e70:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	681a      	ldr	r2, [r3, #0]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f022 0201 	bic.w	r2, r2, #1
 8004e80:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d002      	beq.n	8004e90 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f000 f9e8 	bl	8005260 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004e90:	6878      	ldr	r0, [r7, #4]
 8004e92:	f000 f8af 	bl	8004ff4 <UART_SetConfig>
 8004e96:	4603      	mov	r3, r0
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	d101      	bne.n	8004ea0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	e01b      	b.n	8004ed8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	685a      	ldr	r2, [r3, #4]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004eae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	689a      	ldr	r2, [r3, #8]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004ebe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	681a      	ldr	r2, [r3, #0]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f042 0201 	orr.w	r2, r2, #1
 8004ece:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004ed0:	6878      	ldr	r0, [r7, #4]
 8004ed2:	f000 fa67 	bl	80053a4 <UART_CheckIdleState>
 8004ed6:	4603      	mov	r3, r0
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	3708      	adds	r7, #8
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bd80      	pop	{r7, pc}

08004ee0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b08a      	sub	sp, #40	@ 0x28
 8004ee4:	af02      	add	r7, sp, #8
 8004ee6:	60f8      	str	r0, [r7, #12]
 8004ee8:	60b9      	str	r1, [r7, #8]
 8004eea:	603b      	str	r3, [r7, #0]
 8004eec:	4613      	mov	r3, r2
 8004eee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004ef4:	2b20      	cmp	r3, #32
 8004ef6:	d177      	bne.n	8004fe8 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d002      	beq.n	8004f04 <HAL_UART_Transmit+0x24>
 8004efe:	88fb      	ldrh	r3, [r7, #6]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d101      	bne.n	8004f08 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004f04:	2301      	movs	r3, #1
 8004f06:	e070      	b.n	8004fea <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	2221      	movs	r2, #33	@ 0x21
 8004f14:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004f16:	f7fc f85f 	bl	8000fd8 <HAL_GetTick>
 8004f1a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	88fa      	ldrh	r2, [r7, #6]
 8004f20:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	88fa      	ldrh	r2, [r7, #6]
 8004f28:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	689b      	ldr	r3, [r3, #8]
 8004f30:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f34:	d108      	bne.n	8004f48 <HAL_UART_Transmit+0x68>
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	691b      	ldr	r3, [r3, #16]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d104      	bne.n	8004f48 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	61bb      	str	r3, [r7, #24]
 8004f46:	e003      	b.n	8004f50 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004f50:	e02f      	b.n	8004fb2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	9300      	str	r3, [sp, #0]
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	2180      	movs	r1, #128	@ 0x80
 8004f5c:	68f8      	ldr	r0, [r7, #12]
 8004f5e:	f000 fac9 	bl	80054f4 <UART_WaitOnFlagUntilTimeout>
 8004f62:	4603      	mov	r3, r0
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d004      	beq.n	8004f72 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2220      	movs	r2, #32
 8004f6c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004f6e:	2303      	movs	r3, #3
 8004f70:	e03b      	b.n	8004fea <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004f72:	69fb      	ldr	r3, [r7, #28]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d10b      	bne.n	8004f90 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004f78:	69bb      	ldr	r3, [r7, #24]
 8004f7a:	881a      	ldrh	r2, [r3, #0]
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f84:	b292      	uxth	r2, r2
 8004f86:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004f88:	69bb      	ldr	r3, [r7, #24]
 8004f8a:	3302      	adds	r3, #2
 8004f8c:	61bb      	str	r3, [r7, #24]
 8004f8e:	e007      	b.n	8004fa0 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004f90:	69fb      	ldr	r3, [r7, #28]
 8004f92:	781a      	ldrb	r2, [r3, #0]
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004f9a:	69fb      	ldr	r3, [r7, #28]
 8004f9c:	3301      	adds	r3, #1
 8004f9e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004fa6:	b29b      	uxth	r3, r3
 8004fa8:	3b01      	subs	r3, #1
 8004faa:	b29a      	uxth	r2, r3
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004fb8:	b29b      	uxth	r3, r3
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d1c9      	bne.n	8004f52 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	9300      	str	r3, [sp, #0]
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	2140      	movs	r1, #64	@ 0x40
 8004fc8:	68f8      	ldr	r0, [r7, #12]
 8004fca:	f000 fa93 	bl	80054f4 <UART_WaitOnFlagUntilTimeout>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d004      	beq.n	8004fde <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2220      	movs	r2, #32
 8004fd8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004fda:	2303      	movs	r3, #3
 8004fdc:	e005      	b.n	8004fea <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2220      	movs	r2, #32
 8004fe2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	e000      	b.n	8004fea <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004fe8:	2302      	movs	r3, #2
  }
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	3720      	adds	r7, #32
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}
	...

08004ff4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b088      	sub	sp, #32
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	689a      	ldr	r2, [r3, #8]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	691b      	ldr	r3, [r3, #16]
 8005008:	431a      	orrs	r2, r3
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	695b      	ldr	r3, [r3, #20]
 800500e:	431a      	orrs	r2, r3
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	69db      	ldr	r3, [r3, #28]
 8005014:	4313      	orrs	r3, r2
 8005016:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	681a      	ldr	r2, [r3, #0]
 800501e:	4b8a      	ldr	r3, [pc, #552]	@ (8005248 <UART_SetConfig+0x254>)
 8005020:	4013      	ands	r3, r2
 8005022:	687a      	ldr	r2, [r7, #4]
 8005024:	6812      	ldr	r2, [r2, #0]
 8005026:	6979      	ldr	r1, [r7, #20]
 8005028:	430b      	orrs	r3, r1
 800502a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	68da      	ldr	r2, [r3, #12]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	430a      	orrs	r2, r1
 8005040:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	699b      	ldr	r3, [r3, #24]
 8005046:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6a1b      	ldr	r3, [r3, #32]
 800504c:	697a      	ldr	r2, [r7, #20]
 800504e:	4313      	orrs	r3, r2
 8005050:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	689b      	ldr	r3, [r3, #8]
 8005058:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	697a      	ldr	r2, [r7, #20]
 8005062:	430a      	orrs	r2, r1
 8005064:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a78      	ldr	r2, [pc, #480]	@ (800524c <UART_SetConfig+0x258>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d120      	bne.n	80050b2 <UART_SetConfig+0xbe>
 8005070:	4b77      	ldr	r3, [pc, #476]	@ (8005250 <UART_SetConfig+0x25c>)
 8005072:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005074:	f003 0303 	and.w	r3, r3, #3
 8005078:	2b03      	cmp	r3, #3
 800507a:	d817      	bhi.n	80050ac <UART_SetConfig+0xb8>
 800507c:	a201      	add	r2, pc, #4	@ (adr r2, 8005084 <UART_SetConfig+0x90>)
 800507e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005082:	bf00      	nop
 8005084:	08005095 	.word	0x08005095
 8005088:	080050a1 	.word	0x080050a1
 800508c:	080050a7 	.word	0x080050a7
 8005090:	0800509b 	.word	0x0800509b
 8005094:	2300      	movs	r3, #0
 8005096:	77fb      	strb	r3, [r7, #31]
 8005098:	e01d      	b.n	80050d6 <UART_SetConfig+0xe2>
 800509a:	2302      	movs	r3, #2
 800509c:	77fb      	strb	r3, [r7, #31]
 800509e:	e01a      	b.n	80050d6 <UART_SetConfig+0xe2>
 80050a0:	2304      	movs	r3, #4
 80050a2:	77fb      	strb	r3, [r7, #31]
 80050a4:	e017      	b.n	80050d6 <UART_SetConfig+0xe2>
 80050a6:	2308      	movs	r3, #8
 80050a8:	77fb      	strb	r3, [r7, #31]
 80050aa:	e014      	b.n	80050d6 <UART_SetConfig+0xe2>
 80050ac:	2310      	movs	r3, #16
 80050ae:	77fb      	strb	r3, [r7, #31]
 80050b0:	e011      	b.n	80050d6 <UART_SetConfig+0xe2>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a67      	ldr	r2, [pc, #412]	@ (8005254 <UART_SetConfig+0x260>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d102      	bne.n	80050c2 <UART_SetConfig+0xce>
 80050bc:	2300      	movs	r3, #0
 80050be:	77fb      	strb	r3, [r7, #31]
 80050c0:	e009      	b.n	80050d6 <UART_SetConfig+0xe2>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a64      	ldr	r2, [pc, #400]	@ (8005258 <UART_SetConfig+0x264>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d102      	bne.n	80050d2 <UART_SetConfig+0xde>
 80050cc:	2300      	movs	r3, #0
 80050ce:	77fb      	strb	r3, [r7, #31]
 80050d0:	e001      	b.n	80050d6 <UART_SetConfig+0xe2>
 80050d2:	2310      	movs	r3, #16
 80050d4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	69db      	ldr	r3, [r3, #28]
 80050da:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80050de:	d15a      	bne.n	8005196 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 80050e0:	7ffb      	ldrb	r3, [r7, #31]
 80050e2:	2b08      	cmp	r3, #8
 80050e4:	d827      	bhi.n	8005136 <UART_SetConfig+0x142>
 80050e6:	a201      	add	r2, pc, #4	@ (adr r2, 80050ec <UART_SetConfig+0xf8>)
 80050e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050ec:	08005111 	.word	0x08005111
 80050f0:	08005119 	.word	0x08005119
 80050f4:	08005121 	.word	0x08005121
 80050f8:	08005137 	.word	0x08005137
 80050fc:	08005127 	.word	0x08005127
 8005100:	08005137 	.word	0x08005137
 8005104:	08005137 	.word	0x08005137
 8005108:	08005137 	.word	0x08005137
 800510c:	0800512f 	.word	0x0800512f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005110:	f7ff fa18 	bl	8004544 <HAL_RCC_GetPCLK1Freq>
 8005114:	61b8      	str	r0, [r7, #24]
        break;
 8005116:	e013      	b.n	8005140 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005118:	f7ff fa36 	bl	8004588 <HAL_RCC_GetPCLK2Freq>
 800511c:	61b8      	str	r0, [r7, #24]
        break;
 800511e:	e00f      	b.n	8005140 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005120:	4b4e      	ldr	r3, [pc, #312]	@ (800525c <UART_SetConfig+0x268>)
 8005122:	61bb      	str	r3, [r7, #24]
        break;
 8005124:	e00c      	b.n	8005140 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005126:	f7ff f9ad 	bl	8004484 <HAL_RCC_GetSysClockFreq>
 800512a:	61b8      	str	r0, [r7, #24]
        break;
 800512c:	e008      	b.n	8005140 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800512e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005132:	61bb      	str	r3, [r7, #24]
        break;
 8005134:	e004      	b.n	8005140 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8005136:	2300      	movs	r3, #0
 8005138:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	77bb      	strb	r3, [r7, #30]
        break;
 800513e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005140:	69bb      	ldr	r3, [r7, #24]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d074      	beq.n	8005230 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005146:	69bb      	ldr	r3, [r7, #24]
 8005148:	005a      	lsls	r2, r3, #1
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	085b      	lsrs	r3, r3, #1
 8005150:	441a      	add	r2, r3
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	fbb2 f3f3 	udiv	r3, r2, r3
 800515a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	2b0f      	cmp	r3, #15
 8005160:	d916      	bls.n	8005190 <UART_SetConfig+0x19c>
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005168:	d212      	bcs.n	8005190 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	b29b      	uxth	r3, r3
 800516e:	f023 030f 	bic.w	r3, r3, #15
 8005172:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	085b      	lsrs	r3, r3, #1
 8005178:	b29b      	uxth	r3, r3
 800517a:	f003 0307 	and.w	r3, r3, #7
 800517e:	b29a      	uxth	r2, r3
 8005180:	89fb      	ldrh	r3, [r7, #14]
 8005182:	4313      	orrs	r3, r2
 8005184:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	89fa      	ldrh	r2, [r7, #14]
 800518c:	60da      	str	r2, [r3, #12]
 800518e:	e04f      	b.n	8005230 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005190:	2301      	movs	r3, #1
 8005192:	77bb      	strb	r3, [r7, #30]
 8005194:	e04c      	b.n	8005230 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005196:	7ffb      	ldrb	r3, [r7, #31]
 8005198:	2b08      	cmp	r3, #8
 800519a:	d828      	bhi.n	80051ee <UART_SetConfig+0x1fa>
 800519c:	a201      	add	r2, pc, #4	@ (adr r2, 80051a4 <UART_SetConfig+0x1b0>)
 800519e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051a2:	bf00      	nop
 80051a4:	080051c9 	.word	0x080051c9
 80051a8:	080051d1 	.word	0x080051d1
 80051ac:	080051d9 	.word	0x080051d9
 80051b0:	080051ef 	.word	0x080051ef
 80051b4:	080051df 	.word	0x080051df
 80051b8:	080051ef 	.word	0x080051ef
 80051bc:	080051ef 	.word	0x080051ef
 80051c0:	080051ef 	.word	0x080051ef
 80051c4:	080051e7 	.word	0x080051e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051c8:	f7ff f9bc 	bl	8004544 <HAL_RCC_GetPCLK1Freq>
 80051cc:	61b8      	str	r0, [r7, #24]
        break;
 80051ce:	e013      	b.n	80051f8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80051d0:	f7ff f9da 	bl	8004588 <HAL_RCC_GetPCLK2Freq>
 80051d4:	61b8      	str	r0, [r7, #24]
        break;
 80051d6:	e00f      	b.n	80051f8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051d8:	4b20      	ldr	r3, [pc, #128]	@ (800525c <UART_SetConfig+0x268>)
 80051da:	61bb      	str	r3, [r7, #24]
        break;
 80051dc:	e00c      	b.n	80051f8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051de:	f7ff f951 	bl	8004484 <HAL_RCC_GetSysClockFreq>
 80051e2:	61b8      	str	r0, [r7, #24]
        break;
 80051e4:	e008      	b.n	80051f8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80051ea:	61bb      	str	r3, [r7, #24]
        break;
 80051ec:	e004      	b.n	80051f8 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80051ee:	2300      	movs	r3, #0
 80051f0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80051f2:	2301      	movs	r3, #1
 80051f4:	77bb      	strb	r3, [r7, #30]
        break;
 80051f6:	bf00      	nop
    }

    if (pclk != 0U)
 80051f8:	69bb      	ldr	r3, [r7, #24]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d018      	beq.n	8005230 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	085a      	lsrs	r2, r3, #1
 8005204:	69bb      	ldr	r3, [r7, #24]
 8005206:	441a      	add	r2, r3
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005210:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	2b0f      	cmp	r3, #15
 8005216:	d909      	bls.n	800522c <UART_SetConfig+0x238>
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800521e:	d205      	bcs.n	800522c <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	b29a      	uxth	r2, r3
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	60da      	str	r2, [r3, #12]
 800522a:	e001      	b.n	8005230 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800522c:	2301      	movs	r3, #1
 800522e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2200      	movs	r2, #0
 8005234:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2200      	movs	r2, #0
 800523a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800523c:	7fbb      	ldrb	r3, [r7, #30]
}
 800523e:	4618      	mov	r0, r3
 8005240:	3720      	adds	r7, #32
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}
 8005246:	bf00      	nop
 8005248:	efff69f3 	.word	0xefff69f3
 800524c:	40013800 	.word	0x40013800
 8005250:	40021000 	.word	0x40021000
 8005254:	40004400 	.word	0x40004400
 8005258:	40004800 	.word	0x40004800
 800525c:	007a1200 	.word	0x007a1200

08005260 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005260:	b480      	push	{r7}
 8005262:	b083      	sub	sp, #12
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800526c:	f003 0308 	and.w	r3, r3, #8
 8005270:	2b00      	cmp	r3, #0
 8005272:	d00a      	beq.n	800528a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	430a      	orrs	r2, r1
 8005288:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800528e:	f003 0301 	and.w	r3, r3, #1
 8005292:	2b00      	cmp	r3, #0
 8005294:	d00a      	beq.n	80052ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	430a      	orrs	r2, r1
 80052aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052b0:	f003 0302 	and.w	r3, r3, #2
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d00a      	beq.n	80052ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	430a      	orrs	r2, r1
 80052cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052d2:	f003 0304 	and.w	r3, r3, #4
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d00a      	beq.n	80052f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	430a      	orrs	r2, r1
 80052ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052f4:	f003 0310 	and.w	r3, r3, #16
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d00a      	beq.n	8005312 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	689b      	ldr	r3, [r3, #8]
 8005302:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	430a      	orrs	r2, r1
 8005310:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005316:	f003 0320 	and.w	r3, r3, #32
 800531a:	2b00      	cmp	r3, #0
 800531c:	d00a      	beq.n	8005334 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	689b      	ldr	r3, [r3, #8]
 8005324:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	430a      	orrs	r2, r1
 8005332:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005338:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800533c:	2b00      	cmp	r3, #0
 800533e:	d01a      	beq.n	8005376 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	430a      	orrs	r2, r1
 8005354:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800535a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800535e:	d10a      	bne.n	8005376 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	430a      	orrs	r2, r1
 8005374:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800537a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800537e:	2b00      	cmp	r3, #0
 8005380:	d00a      	beq.n	8005398 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	430a      	orrs	r2, r1
 8005396:	605a      	str	r2, [r3, #4]
  }
}
 8005398:	bf00      	nop
 800539a:	370c      	adds	r7, #12
 800539c:	46bd      	mov	sp, r7
 800539e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a2:	4770      	bx	lr

080053a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b098      	sub	sp, #96	@ 0x60
 80053a8:	af02      	add	r7, sp, #8
 80053aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2200      	movs	r2, #0
 80053b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80053b4:	f7fb fe10 	bl	8000fd8 <HAL_GetTick>
 80053b8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f003 0308 	and.w	r3, r3, #8
 80053c4:	2b08      	cmp	r3, #8
 80053c6:	d12e      	bne.n	8005426 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80053c8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80053cc:	9300      	str	r3, [sp, #0]
 80053ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053d0:	2200      	movs	r2, #0
 80053d2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f000 f88c 	bl	80054f4 <UART_WaitOnFlagUntilTimeout>
 80053dc:	4603      	mov	r3, r0
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d021      	beq.n	8005426 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053ea:	e853 3f00 	ldrex	r3, [r3]
 80053ee:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80053f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80053f6:	653b      	str	r3, [r7, #80]	@ 0x50
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	461a      	mov	r2, r3
 80053fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005400:	647b      	str	r3, [r7, #68]	@ 0x44
 8005402:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005404:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005406:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005408:	e841 2300 	strex	r3, r2, [r1]
 800540c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800540e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005410:	2b00      	cmp	r3, #0
 8005412:	d1e6      	bne.n	80053e2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2220      	movs	r2, #32
 8005418:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2200      	movs	r2, #0
 800541e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005422:	2303      	movs	r3, #3
 8005424:	e062      	b.n	80054ec <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f003 0304 	and.w	r3, r3, #4
 8005430:	2b04      	cmp	r3, #4
 8005432:	d149      	bne.n	80054c8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005434:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005438:	9300      	str	r3, [sp, #0]
 800543a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800543c:	2200      	movs	r2, #0
 800543e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	f000 f856 	bl	80054f4 <UART_WaitOnFlagUntilTimeout>
 8005448:	4603      	mov	r3, r0
 800544a:	2b00      	cmp	r3, #0
 800544c:	d03c      	beq.n	80054c8 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005456:	e853 3f00 	ldrex	r3, [r3]
 800545a:	623b      	str	r3, [r7, #32]
   return(result);
 800545c:	6a3b      	ldr	r3, [r7, #32]
 800545e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005462:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	461a      	mov	r2, r3
 800546a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800546c:	633b      	str	r3, [r7, #48]	@ 0x30
 800546e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005470:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005472:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005474:	e841 2300 	strex	r3, r2, [r1]
 8005478:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800547a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800547c:	2b00      	cmp	r3, #0
 800547e:	d1e6      	bne.n	800544e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	3308      	adds	r3, #8
 8005486:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005488:	693b      	ldr	r3, [r7, #16]
 800548a:	e853 3f00 	ldrex	r3, [r3]
 800548e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f023 0301 	bic.w	r3, r3, #1
 8005496:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	3308      	adds	r3, #8
 800549e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80054a0:	61fa      	str	r2, [r7, #28]
 80054a2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054a4:	69b9      	ldr	r1, [r7, #24]
 80054a6:	69fa      	ldr	r2, [r7, #28]
 80054a8:	e841 2300 	strex	r3, r2, [r1]
 80054ac:	617b      	str	r3, [r7, #20]
   return(result);
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d1e5      	bne.n	8005480 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2220      	movs	r2, #32
 80054b8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2200      	movs	r2, #0
 80054c0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80054c4:	2303      	movs	r3, #3
 80054c6:	e011      	b.n	80054ec <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2220      	movs	r2, #32
 80054cc:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2220      	movs	r2, #32
 80054d2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2200      	movs	r2, #0
 80054da:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2200      	movs	r2, #0
 80054e0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2200      	movs	r2, #0
 80054e6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80054ea:	2300      	movs	r3, #0
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	3758      	adds	r7, #88	@ 0x58
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bd80      	pop	{r7, pc}

080054f4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b084      	sub	sp, #16
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	60f8      	str	r0, [r7, #12]
 80054fc:	60b9      	str	r1, [r7, #8]
 80054fe:	603b      	str	r3, [r7, #0]
 8005500:	4613      	mov	r3, r2
 8005502:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005504:	e04f      	b.n	80055a6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005506:	69bb      	ldr	r3, [r7, #24]
 8005508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800550c:	d04b      	beq.n	80055a6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800550e:	f7fb fd63 	bl	8000fd8 <HAL_GetTick>
 8005512:	4602      	mov	r2, r0
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	1ad3      	subs	r3, r2, r3
 8005518:	69ba      	ldr	r2, [r7, #24]
 800551a:	429a      	cmp	r2, r3
 800551c:	d302      	bcc.n	8005524 <UART_WaitOnFlagUntilTimeout+0x30>
 800551e:	69bb      	ldr	r3, [r7, #24]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d101      	bne.n	8005528 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005524:	2303      	movs	r3, #3
 8005526:	e04e      	b.n	80055c6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f003 0304 	and.w	r3, r3, #4
 8005532:	2b00      	cmp	r3, #0
 8005534:	d037      	beq.n	80055a6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	2b80      	cmp	r3, #128	@ 0x80
 800553a:	d034      	beq.n	80055a6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	2b40      	cmp	r3, #64	@ 0x40
 8005540:	d031      	beq.n	80055a6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	69db      	ldr	r3, [r3, #28]
 8005548:	f003 0308 	and.w	r3, r3, #8
 800554c:	2b08      	cmp	r3, #8
 800554e:	d110      	bne.n	8005572 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	2208      	movs	r2, #8
 8005556:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005558:	68f8      	ldr	r0, [r7, #12]
 800555a:	f000 f838 	bl	80055ce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2208      	movs	r2, #8
 8005562:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2200      	movs	r2, #0
 800556a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800556e:	2301      	movs	r3, #1
 8005570:	e029      	b.n	80055c6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	69db      	ldr	r3, [r3, #28]
 8005578:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800557c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005580:	d111      	bne.n	80055a6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800558a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800558c:	68f8      	ldr	r0, [r7, #12]
 800558e:	f000 f81e 	bl	80055ce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	2220      	movs	r2, #32
 8005596:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2200      	movs	r2, #0
 800559e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80055a2:	2303      	movs	r3, #3
 80055a4:	e00f      	b.n	80055c6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	69da      	ldr	r2, [r3, #28]
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	4013      	ands	r3, r2
 80055b0:	68ba      	ldr	r2, [r7, #8]
 80055b2:	429a      	cmp	r2, r3
 80055b4:	bf0c      	ite	eq
 80055b6:	2301      	moveq	r3, #1
 80055b8:	2300      	movne	r3, #0
 80055ba:	b2db      	uxtb	r3, r3
 80055bc:	461a      	mov	r2, r3
 80055be:	79fb      	ldrb	r3, [r7, #7]
 80055c0:	429a      	cmp	r2, r3
 80055c2:	d0a0      	beq.n	8005506 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80055c4:	2300      	movs	r3, #0
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	3710      	adds	r7, #16
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}

080055ce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80055ce:	b480      	push	{r7}
 80055d0:	b095      	sub	sp, #84	@ 0x54
 80055d2:	af00      	add	r7, sp, #0
 80055d4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055de:	e853 3f00 	ldrex	r3, [r3]
 80055e2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80055e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055e6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80055ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	461a      	mov	r2, r3
 80055f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80055f4:	643b      	str	r3, [r7, #64]	@ 0x40
 80055f6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055f8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80055fa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80055fc:	e841 2300 	strex	r3, r2, [r1]
 8005600:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005602:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005604:	2b00      	cmp	r3, #0
 8005606:	d1e6      	bne.n	80055d6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	3308      	adds	r3, #8
 800560e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005610:	6a3b      	ldr	r3, [r7, #32]
 8005612:	e853 3f00 	ldrex	r3, [r3]
 8005616:	61fb      	str	r3, [r7, #28]
   return(result);
 8005618:	69fb      	ldr	r3, [r7, #28]
 800561a:	f023 0301 	bic.w	r3, r3, #1
 800561e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	3308      	adds	r3, #8
 8005626:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005628:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800562a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800562c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800562e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005630:	e841 2300 	strex	r3, r2, [r1]
 8005634:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005638:	2b00      	cmp	r3, #0
 800563a:	d1e5      	bne.n	8005608 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005640:	2b01      	cmp	r3, #1
 8005642:	d118      	bne.n	8005676 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	e853 3f00 	ldrex	r3, [r3]
 8005650:	60bb      	str	r3, [r7, #8]
   return(result);
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	f023 0310 	bic.w	r3, r3, #16
 8005658:	647b      	str	r3, [r7, #68]	@ 0x44
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	461a      	mov	r2, r3
 8005660:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005662:	61bb      	str	r3, [r7, #24]
 8005664:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005666:	6979      	ldr	r1, [r7, #20]
 8005668:	69ba      	ldr	r2, [r7, #24]
 800566a:	e841 2300 	strex	r3, r2, [r1]
 800566e:	613b      	str	r3, [r7, #16]
   return(result);
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d1e6      	bne.n	8005644 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2220      	movs	r2, #32
 800567a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2200      	movs	r2, #0
 8005682:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2200      	movs	r2, #0
 8005688:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800568a:	bf00      	nop
 800568c:	3754      	adds	r7, #84	@ 0x54
 800568e:	46bd      	mov	sp, r7
 8005690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005694:	4770      	bx	lr

08005696 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005696:	b480      	push	{r7}
 8005698:	b085      	sub	sp, #20
 800569a:	af00      	add	r7, sp, #0
 800569c:	4603      	mov	r3, r0
 800569e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80056a0:	2300      	movs	r3, #0
 80056a2:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80056a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80056a8:	2b84      	cmp	r3, #132	@ 0x84
 80056aa:	d005      	beq.n	80056b8 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80056ac:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	4413      	add	r3, r2
 80056b4:	3303      	adds	r3, #3
 80056b6:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80056b8:	68fb      	ldr	r3, [r7, #12]
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	3714      	adds	r7, #20
 80056be:	46bd      	mov	sp, r7
 80056c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c4:	4770      	bx	lr

080056c6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80056c6:	b580      	push	{r7, lr}
 80056c8:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80056ca:	f000 fd99 	bl	8006200 <vTaskStartScheduler>
  
  return osOK;
 80056ce:	2300      	movs	r3, #0
}
 80056d0:	4618      	mov	r0, r3
 80056d2:	bd80      	pop	{r7, pc}

080056d4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80056d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80056d6:	b089      	sub	sp, #36	@ 0x24
 80056d8:	af04      	add	r7, sp, #16
 80056da:	6078      	str	r0, [r7, #4]
 80056dc:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	695b      	ldr	r3, [r3, #20]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d020      	beq.n	8005728 <osThreadCreate+0x54>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	699b      	ldr	r3, [r3, #24]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d01c      	beq.n	8005728 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	685c      	ldr	r4, [r3, #4]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	691e      	ldr	r6, [r3, #16]
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005700:	4618      	mov	r0, r3
 8005702:	f7ff ffc8 	bl	8005696 <makeFreeRtosPriority>
 8005706:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	695b      	ldr	r3, [r3, #20]
 800570c:	687a      	ldr	r2, [r7, #4]
 800570e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005710:	9202      	str	r2, [sp, #8]
 8005712:	9301      	str	r3, [sp, #4]
 8005714:	9100      	str	r1, [sp, #0]
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	4632      	mov	r2, r6
 800571a:	4629      	mov	r1, r5
 800571c:	4620      	mov	r0, r4
 800571e:	f000 fbab 	bl	8005e78 <xTaskCreateStatic>
 8005722:	4603      	mov	r3, r0
 8005724:	60fb      	str	r3, [r7, #12]
 8005726:	e01c      	b.n	8005762 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	685c      	ldr	r4, [r3, #4]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005734:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800573c:	4618      	mov	r0, r3
 800573e:	f7ff ffaa 	bl	8005696 <makeFreeRtosPriority>
 8005742:	4602      	mov	r2, r0
 8005744:	f107 030c 	add.w	r3, r7, #12
 8005748:	9301      	str	r3, [sp, #4]
 800574a:	9200      	str	r2, [sp, #0]
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	4632      	mov	r2, r6
 8005750:	4629      	mov	r1, r5
 8005752:	4620      	mov	r0, r4
 8005754:	f000 fbef 	bl	8005f36 <xTaskCreate>
 8005758:	4603      	mov	r3, r0
 800575a:	2b01      	cmp	r3, #1
 800575c:	d001      	beq.n	8005762 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800575e:	2300      	movs	r3, #0
 8005760:	e000      	b.n	8005764 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005762:	68fb      	ldr	r3, [r7, #12]
}
 8005764:	4618      	mov	r0, r3
 8005766:	3714      	adds	r7, #20
 8005768:	46bd      	mov	sp, r7
 800576a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800576c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b084      	sub	sp, #16
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d001      	beq.n	8005782 <osDelay+0x16>
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	e000      	b.n	8005784 <osDelay+0x18>
 8005782:	2301      	movs	r3, #1
 8005784:	4618      	mov	r0, r3
 8005786:	f000 fd05 	bl	8006194 <vTaskDelay>
  
  return osOK;
 800578a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800578c:	4618      	mov	r0, r3
 800578e:	3710      	adds	r7, #16
 8005790:	46bd      	mov	sp, r7
 8005792:	bd80      	pop	{r7, pc}

08005794 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005794:	b480      	push	{r7}
 8005796:	b083      	sub	sp, #12
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	f103 0208 	add.w	r2, r3, #8
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	f04f 32ff 	mov.w	r2, #4294967295
 80057ac:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	f103 0208 	add.w	r2, r3, #8
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	f103 0208 	add.w	r2, r3, #8
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2200      	movs	r2, #0
 80057c6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80057c8:	bf00      	nop
 80057ca:	370c      	adds	r7, #12
 80057cc:	46bd      	mov	sp, r7
 80057ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d2:	4770      	bx	lr

080057d4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80057d4:	b480      	push	{r7}
 80057d6:	b083      	sub	sp, #12
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2200      	movs	r2, #0
 80057e0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80057e2:	bf00      	nop
 80057e4:	370c      	adds	r7, #12
 80057e6:	46bd      	mov	sp, r7
 80057e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ec:	4770      	bx	lr

080057ee <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80057ee:	b480      	push	{r7}
 80057f0:	b085      	sub	sp, #20
 80057f2:	af00      	add	r7, sp, #0
 80057f4:	6078      	str	r0, [r7, #4]
 80057f6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	68fa      	ldr	r2, [r7, #12]
 8005802:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	689a      	ldr	r2, [r3, #8]
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	689b      	ldr	r3, [r3, #8]
 8005810:	683a      	ldr	r2, [r7, #0]
 8005812:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	683a      	ldr	r2, [r7, #0]
 8005818:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	687a      	ldr	r2, [r7, #4]
 800581e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	1c5a      	adds	r2, r3, #1
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	601a      	str	r2, [r3, #0]
}
 800582a:	bf00      	nop
 800582c:	3714      	adds	r7, #20
 800582e:	46bd      	mov	sp, r7
 8005830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005834:	4770      	bx	lr

08005836 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005836:	b480      	push	{r7}
 8005838:	b085      	sub	sp, #20
 800583a:	af00      	add	r7, sp, #0
 800583c:	6078      	str	r0, [r7, #4]
 800583e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	f1b3 3fff 	cmp.w	r3, #4294967295
 800584c:	d103      	bne.n	8005856 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	691b      	ldr	r3, [r3, #16]
 8005852:	60fb      	str	r3, [r7, #12]
 8005854:	e00c      	b.n	8005870 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	3308      	adds	r3, #8
 800585a:	60fb      	str	r3, [r7, #12]
 800585c:	e002      	b.n	8005864 <vListInsert+0x2e>
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	60fb      	str	r3, [r7, #12]
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	68ba      	ldr	r2, [r7, #8]
 800586c:	429a      	cmp	r2, r3
 800586e:	d2f6      	bcs.n	800585e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	685a      	ldr	r2, [r3, #4]
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	683a      	ldr	r2, [r7, #0]
 800587e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	68fa      	ldr	r2, [r7, #12]
 8005884:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	683a      	ldr	r2, [r7, #0]
 800588a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	687a      	ldr	r2, [r7, #4]
 8005890:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	1c5a      	adds	r2, r3, #1
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	601a      	str	r2, [r3, #0]
}
 800589c:	bf00      	nop
 800589e:	3714      	adds	r7, #20
 80058a0:	46bd      	mov	sp, r7
 80058a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a6:	4770      	bx	lr

080058a8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80058a8:	b480      	push	{r7}
 80058aa:	b085      	sub	sp, #20
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	691b      	ldr	r3, [r3, #16]
 80058b4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	687a      	ldr	r2, [r7, #4]
 80058bc:	6892      	ldr	r2, [r2, #8]
 80058be:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	689b      	ldr	r3, [r3, #8]
 80058c4:	687a      	ldr	r2, [r7, #4]
 80058c6:	6852      	ldr	r2, [r2, #4]
 80058c8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	687a      	ldr	r2, [r7, #4]
 80058d0:	429a      	cmp	r2, r3
 80058d2:	d103      	bne.n	80058dc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	689a      	ldr	r2, [r3, #8]
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2200      	movs	r2, #0
 80058e0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	1e5a      	subs	r2, r3, #1
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	3714      	adds	r7, #20
 80058f4:	46bd      	mov	sp, r7
 80058f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fa:	4770      	bx	lr

080058fc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b084      	sub	sp, #16
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
 8005904:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d10b      	bne.n	8005928 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005910:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005914:	f383 8811 	msr	BASEPRI, r3
 8005918:	f3bf 8f6f 	isb	sy
 800591c:	f3bf 8f4f 	dsb	sy
 8005920:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005922:	bf00      	nop
 8005924:	bf00      	nop
 8005926:	e7fd      	b.n	8005924 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005928:	f001 f9ee 	bl	8006d08 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681a      	ldr	r2, [r3, #0]
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005934:	68f9      	ldr	r1, [r7, #12]
 8005936:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005938:	fb01 f303 	mul.w	r3, r1, r3
 800593c:	441a      	add	r2, r3
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	2200      	movs	r2, #0
 8005946:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681a      	ldr	r2, [r3, #0]
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681a      	ldr	r2, [r3, #0]
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005958:	3b01      	subs	r3, #1
 800595a:	68f9      	ldr	r1, [r7, #12]
 800595c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800595e:	fb01 f303 	mul.w	r3, r1, r3
 8005962:	441a      	add	r2, r3
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	22ff      	movs	r2, #255	@ 0xff
 800596c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	22ff      	movs	r2, #255	@ 0xff
 8005974:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d114      	bne.n	80059a8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	691b      	ldr	r3, [r3, #16]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d01a      	beq.n	80059bc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	3310      	adds	r3, #16
 800598a:	4618      	mov	r0, r3
 800598c:	f000 fe60 	bl	8006650 <xTaskRemoveFromEventList>
 8005990:	4603      	mov	r3, r0
 8005992:	2b00      	cmp	r3, #0
 8005994:	d012      	beq.n	80059bc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005996:	4b0d      	ldr	r3, [pc, #52]	@ (80059cc <xQueueGenericReset+0xd0>)
 8005998:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800599c:	601a      	str	r2, [r3, #0]
 800599e:	f3bf 8f4f 	dsb	sy
 80059a2:	f3bf 8f6f 	isb	sy
 80059a6:	e009      	b.n	80059bc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	3310      	adds	r3, #16
 80059ac:	4618      	mov	r0, r3
 80059ae:	f7ff fef1 	bl	8005794 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	3324      	adds	r3, #36	@ 0x24
 80059b6:	4618      	mov	r0, r3
 80059b8:	f7ff feec 	bl	8005794 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80059bc:	f001 f9d6 	bl	8006d6c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80059c0:	2301      	movs	r3, #1
}
 80059c2:	4618      	mov	r0, r3
 80059c4:	3710      	adds	r7, #16
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd80      	pop	{r7, pc}
 80059ca:	bf00      	nop
 80059cc:	e000ed04 	.word	0xe000ed04

080059d0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b08a      	sub	sp, #40	@ 0x28
 80059d4:	af02      	add	r7, sp, #8
 80059d6:	60f8      	str	r0, [r7, #12]
 80059d8:	60b9      	str	r1, [r7, #8]
 80059da:	4613      	mov	r3, r2
 80059dc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d10b      	bne.n	80059fc <xQueueGenericCreate+0x2c>
	__asm volatile
 80059e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059e8:	f383 8811 	msr	BASEPRI, r3
 80059ec:	f3bf 8f6f 	isb	sy
 80059f0:	f3bf 8f4f 	dsb	sy
 80059f4:	613b      	str	r3, [r7, #16]
}
 80059f6:	bf00      	nop
 80059f8:	bf00      	nop
 80059fa:	e7fd      	b.n	80059f8 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d102      	bne.n	8005a08 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005a02:	2300      	movs	r3, #0
 8005a04:	61fb      	str	r3, [r7, #28]
 8005a06:	e004      	b.n	8005a12 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	68ba      	ldr	r2, [r7, #8]
 8005a0c:	fb02 f303 	mul.w	r3, r2, r3
 8005a10:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8005a12:	69fb      	ldr	r3, [r7, #28]
 8005a14:	3348      	adds	r3, #72	@ 0x48
 8005a16:	4618      	mov	r0, r3
 8005a18:	f001 fa98 	bl	8006f4c <pvPortMalloc>
 8005a1c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005a1e:	69bb      	ldr	r3, [r7, #24]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d00f      	beq.n	8005a44 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8005a24:	69bb      	ldr	r3, [r7, #24]
 8005a26:	3348      	adds	r3, #72	@ 0x48
 8005a28:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005a2a:	69bb      	ldr	r3, [r7, #24]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005a32:	79fa      	ldrb	r2, [r7, #7]
 8005a34:	69bb      	ldr	r3, [r7, #24]
 8005a36:	9300      	str	r3, [sp, #0]
 8005a38:	4613      	mov	r3, r2
 8005a3a:	697a      	ldr	r2, [r7, #20]
 8005a3c:	68b9      	ldr	r1, [r7, #8]
 8005a3e:	68f8      	ldr	r0, [r7, #12]
 8005a40:	f000 f805 	bl	8005a4e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005a44:	69bb      	ldr	r3, [r7, #24]
	}
 8005a46:	4618      	mov	r0, r3
 8005a48:	3720      	adds	r7, #32
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd80      	pop	{r7, pc}

08005a4e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005a4e:	b580      	push	{r7, lr}
 8005a50:	b084      	sub	sp, #16
 8005a52:	af00      	add	r7, sp, #0
 8005a54:	60f8      	str	r0, [r7, #12]
 8005a56:	60b9      	str	r1, [r7, #8]
 8005a58:	607a      	str	r2, [r7, #4]
 8005a5a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d103      	bne.n	8005a6a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005a62:	69bb      	ldr	r3, [r7, #24]
 8005a64:	69ba      	ldr	r2, [r7, #24]
 8005a66:	601a      	str	r2, [r3, #0]
 8005a68:	e002      	b.n	8005a70 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005a6a:	69bb      	ldr	r3, [r7, #24]
 8005a6c:	687a      	ldr	r2, [r7, #4]
 8005a6e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005a70:	69bb      	ldr	r3, [r7, #24]
 8005a72:	68fa      	ldr	r2, [r7, #12]
 8005a74:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005a76:	69bb      	ldr	r3, [r7, #24]
 8005a78:	68ba      	ldr	r2, [r7, #8]
 8005a7a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005a7c:	2101      	movs	r1, #1
 8005a7e:	69b8      	ldr	r0, [r7, #24]
 8005a80:	f7ff ff3c 	bl	80058fc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005a84:	bf00      	nop
 8005a86:	3710      	adds	r7, #16
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bd80      	pop	{r7, pc}

08005a8c <xQueueGenericSendFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b08e      	sub	sp, #56	@ 0x38
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	60f8      	str	r0, [r7, #12]
 8005a94:	60b9      	str	r1, [r7, #8]
 8005a96:	607a      	str	r2, [r7, #4]
 8005a98:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005a9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d10b      	bne.n	8005abc <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8005aa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005aa8:	f383 8811 	msr	BASEPRI, r3
 8005aac:	f3bf 8f6f 	isb	sy
 8005ab0:	f3bf 8f4f 	dsb	sy
 8005ab4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005ab6:	bf00      	nop
 8005ab8:	bf00      	nop
 8005aba:	e7fd      	b.n	8005ab8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d103      	bne.n	8005aca <xQueueGenericSendFromISR+0x3e>
 8005ac2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d101      	bne.n	8005ace <xQueueGenericSendFromISR+0x42>
 8005aca:	2301      	movs	r3, #1
 8005acc:	e000      	b.n	8005ad0 <xQueueGenericSendFromISR+0x44>
 8005ace:	2300      	movs	r3, #0
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d10b      	bne.n	8005aec <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8005ad4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ad8:	f383 8811 	msr	BASEPRI, r3
 8005adc:	f3bf 8f6f 	isb	sy
 8005ae0:	f3bf 8f4f 	dsb	sy
 8005ae4:	623b      	str	r3, [r7, #32]
}
 8005ae6:	bf00      	nop
 8005ae8:	bf00      	nop
 8005aea:	e7fd      	b.n	8005ae8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	2b02      	cmp	r3, #2
 8005af0:	d103      	bne.n	8005afa <xQueueGenericSendFromISR+0x6e>
 8005af2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005af4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005af6:	2b01      	cmp	r3, #1
 8005af8:	d101      	bne.n	8005afe <xQueueGenericSendFromISR+0x72>
 8005afa:	2301      	movs	r3, #1
 8005afc:	e000      	b.n	8005b00 <xQueueGenericSendFromISR+0x74>
 8005afe:	2300      	movs	r3, #0
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d10b      	bne.n	8005b1c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8005b04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b08:	f383 8811 	msr	BASEPRI, r3
 8005b0c:	f3bf 8f6f 	isb	sy
 8005b10:	f3bf 8f4f 	dsb	sy
 8005b14:	61fb      	str	r3, [r7, #28]
}
 8005b16:	bf00      	nop
 8005b18:	bf00      	nop
 8005b1a:	e7fd      	b.n	8005b18 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005b1c:	f001 f9d4 	bl	8006ec8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005b20:	f3ef 8211 	mrs	r2, BASEPRI
 8005b24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b28:	f383 8811 	msr	BASEPRI, r3
 8005b2c:	f3bf 8f6f 	isb	sy
 8005b30:	f3bf 8f4f 	dsb	sy
 8005b34:	61ba      	str	r2, [r7, #24]
 8005b36:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005b38:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005b3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005b3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b3e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005b40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b44:	429a      	cmp	r2, r3
 8005b46:	d302      	bcc.n	8005b4e <xQueueGenericSendFromISR+0xc2>
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	2b02      	cmp	r3, #2
 8005b4c:	d12c      	bne.n	8005ba8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005b4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b50:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005b54:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005b58:	683a      	ldr	r2, [r7, #0]
 8005b5a:	68b9      	ldr	r1, [r7, #8]
 8005b5c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005b5e:	f000 f8d1 	bl	8005d04 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005b62:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8005b66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b6a:	d112      	bne.n	8005b92 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005b6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d016      	beq.n	8005ba2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005b74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b76:	3324      	adds	r3, #36	@ 0x24
 8005b78:	4618      	mov	r0, r3
 8005b7a:	f000 fd69 	bl	8006650 <xTaskRemoveFromEventList>
 8005b7e:	4603      	mov	r3, r0
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d00e      	beq.n	8005ba2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d00b      	beq.n	8005ba2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2201      	movs	r2, #1
 8005b8e:	601a      	str	r2, [r3, #0]
 8005b90:	e007      	b.n	8005ba2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005b92:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005b96:	3301      	adds	r3, #1
 8005b98:	b2db      	uxtb	r3, r3
 8005b9a:	b25a      	sxtb	r2, r3
 8005b9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b9e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8005ba6:	e001      	b.n	8005bac <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005ba8:	2300      	movs	r3, #0
 8005baa:	637b      	str	r3, [r7, #52]	@ 0x34
 8005bac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bae:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005bb6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005bb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	3738      	adds	r7, #56	@ 0x38
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bd80      	pop	{r7, pc}

08005bc2 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005bc2:	b580      	push	{r7, lr}
 8005bc4:	b08e      	sub	sp, #56	@ 0x38
 8005bc6:	af00      	add	r7, sp, #0
 8005bc8:	60f8      	str	r0, [r7, #12]
 8005bca:	60b9      	str	r1, [r7, #8]
 8005bcc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005bd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d10b      	bne.n	8005bf0 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8005bd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bdc:	f383 8811 	msr	BASEPRI, r3
 8005be0:	f3bf 8f6f 	isb	sy
 8005be4:	f3bf 8f4f 	dsb	sy
 8005be8:	623b      	str	r3, [r7, #32]
}
 8005bea:	bf00      	nop
 8005bec:	bf00      	nop
 8005bee:	e7fd      	b.n	8005bec <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d103      	bne.n	8005bfe <xQueueReceiveFromISR+0x3c>
 8005bf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d101      	bne.n	8005c02 <xQueueReceiveFromISR+0x40>
 8005bfe:	2301      	movs	r3, #1
 8005c00:	e000      	b.n	8005c04 <xQueueReceiveFromISR+0x42>
 8005c02:	2300      	movs	r3, #0
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d10b      	bne.n	8005c20 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8005c08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c0c:	f383 8811 	msr	BASEPRI, r3
 8005c10:	f3bf 8f6f 	isb	sy
 8005c14:	f3bf 8f4f 	dsb	sy
 8005c18:	61fb      	str	r3, [r7, #28]
}
 8005c1a:	bf00      	nop
 8005c1c:	bf00      	nop
 8005c1e:	e7fd      	b.n	8005c1c <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005c20:	f001 f952 	bl	8006ec8 <vPortValidateInterruptPriority>
	__asm volatile
 8005c24:	f3ef 8211 	mrs	r2, BASEPRI
 8005c28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c2c:	f383 8811 	msr	BASEPRI, r3
 8005c30:	f3bf 8f6f 	isb	sy
 8005c34:	f3bf 8f4f 	dsb	sy
 8005c38:	61ba      	str	r2, [r7, #24]
 8005c3a:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005c3c:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005c3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005c40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c44:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005c46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d02f      	beq.n	8005cac <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005c4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c4e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005c52:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005c56:	68b9      	ldr	r1, [r7, #8]
 8005c58:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005c5a:	f000 f8bd 	bl	8005dd8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005c5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c60:	1e5a      	subs	r2, r3, #1
 8005c62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c64:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005c66:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005c6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c6e:	d112      	bne.n	8005c96 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005c70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c72:	691b      	ldr	r3, [r3, #16]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d016      	beq.n	8005ca6 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005c78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c7a:	3310      	adds	r3, #16
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	f000 fce7 	bl	8006650 <xTaskRemoveFromEventList>
 8005c82:	4603      	mov	r3, r0
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d00e      	beq.n	8005ca6 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d00b      	beq.n	8005ca6 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2201      	movs	r2, #1
 8005c92:	601a      	str	r2, [r3, #0]
 8005c94:	e007      	b.n	8005ca6 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005c96:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005c9a:	3301      	adds	r3, #1
 8005c9c:	b2db      	uxtb	r3, r3
 8005c9e:	b25a      	sxtb	r2, r3
 8005ca0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ca2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	637b      	str	r3, [r7, #52]	@ 0x34
 8005caa:	e001      	b.n	8005cb0 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8005cac:	2300      	movs	r3, #0
 8005cae:	637b      	str	r3, [r7, #52]	@ 0x34
 8005cb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cb2:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	f383 8811 	msr	BASEPRI, r3
}
 8005cba:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005cbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	3738      	adds	r7, #56	@ 0x38
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd80      	pop	{r7, pc}

08005cc6 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8005cc6:	b580      	push	{r7, lr}
 8005cc8:	b084      	sub	sp, #16
 8005cca:	af00      	add	r7, sp, #0
 8005ccc:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d10b      	bne.n	8005cec <uxQueueMessagesWaiting+0x26>
	__asm volatile
 8005cd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cd8:	f383 8811 	msr	BASEPRI, r3
 8005cdc:	f3bf 8f6f 	isb	sy
 8005ce0:	f3bf 8f4f 	dsb	sy
 8005ce4:	60bb      	str	r3, [r7, #8]
}
 8005ce6:	bf00      	nop
 8005ce8:	bf00      	nop
 8005cea:	e7fd      	b.n	8005ce8 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8005cec:	f001 f80c 	bl	8006d08 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cf4:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8005cf6:	f001 f839 	bl	8006d6c <vPortExitCritical>

	return uxReturn;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	3710      	adds	r7, #16
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bd80      	pop	{r7, pc}

08005d04 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b086      	sub	sp, #24
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	60f8      	str	r0, [r7, #12]
 8005d0c:	60b9      	str	r1, [r7, #8]
 8005d0e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005d10:	2300      	movs	r3, #0
 8005d12:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d18:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d10d      	bne.n	8005d3e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d14d      	bne.n	8005dc6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	685b      	ldr	r3, [r3, #4]
 8005d2e:	4618      	mov	r0, r3
 8005d30:	f000 fdce 	bl	80068d0 <xTaskPriorityDisinherit>
 8005d34:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	605a      	str	r2, [r3, #4]
 8005d3c:	e043      	b.n	8005dc6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d119      	bne.n	8005d78 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	6898      	ldr	r0, [r3, #8]
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d4c:	461a      	mov	r2, r3
 8005d4e:	68b9      	ldr	r1, [r7, #8]
 8005d50:	f001 fb44 	bl	80073dc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	689a      	ldr	r2, [r3, #8]
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d5c:	441a      	add	r2, r3
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	689a      	ldr	r2, [r3, #8]
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	685b      	ldr	r3, [r3, #4]
 8005d6a:	429a      	cmp	r2, r3
 8005d6c:	d32b      	bcc.n	8005dc6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681a      	ldr	r2, [r3, #0]
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	609a      	str	r2, [r3, #8]
 8005d76:	e026      	b.n	8005dc6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	68d8      	ldr	r0, [r3, #12]
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d80:	461a      	mov	r2, r3
 8005d82:	68b9      	ldr	r1, [r7, #8]
 8005d84:	f001 fb2a 	bl	80073dc <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	68da      	ldr	r2, [r3, #12]
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d90:	425b      	negs	r3, r3
 8005d92:	441a      	add	r2, r3
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	68da      	ldr	r2, [r3, #12]
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	429a      	cmp	r2, r3
 8005da2:	d207      	bcs.n	8005db4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	685a      	ldr	r2, [r3, #4]
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dac:	425b      	negs	r3, r3
 8005dae:	441a      	add	r2, r3
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2b02      	cmp	r3, #2
 8005db8:	d105      	bne.n	8005dc6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d002      	beq.n	8005dc6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005dc0:	693b      	ldr	r3, [r7, #16]
 8005dc2:	3b01      	subs	r3, #1
 8005dc4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	1c5a      	adds	r2, r3, #1
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005dce:	697b      	ldr	r3, [r7, #20]
}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	3718      	adds	r7, #24
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	bd80      	pop	{r7, pc}

08005dd8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b082      	sub	sp, #8
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
 8005de0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d018      	beq.n	8005e1c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	68da      	ldr	r2, [r3, #12]
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005df2:	441a      	add	r2, r3
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	68da      	ldr	r2, [r3, #12]
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	685b      	ldr	r3, [r3, #4]
 8005e00:	429a      	cmp	r2, r3
 8005e02:	d303      	bcc.n	8005e0c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681a      	ldr	r2, [r3, #0]
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	68d9      	ldr	r1, [r3, #12]
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e14:	461a      	mov	r2, r3
 8005e16:	6838      	ldr	r0, [r7, #0]
 8005e18:	f001 fae0 	bl	80073dc <memcpy>
	}
}
 8005e1c:	bf00      	nop
 8005e1e:	3708      	adds	r7, #8
 8005e20:	46bd      	mov	sp, r7
 8005e22:	bd80      	pop	{r7, pc}

08005e24 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005e24:	b480      	push	{r7}
 8005e26:	b085      	sub	sp, #20
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
 8005e2c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005e2e:	2300      	movs	r3, #0
 8005e30:	60fb      	str	r3, [r7, #12]
 8005e32:	e014      	b.n	8005e5e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005e34:	4a0f      	ldr	r2, [pc, #60]	@ (8005e74 <vQueueAddToRegistry+0x50>)
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d10b      	bne.n	8005e58 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005e40:	490c      	ldr	r1, [pc, #48]	@ (8005e74 <vQueueAddToRegistry+0x50>)
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	683a      	ldr	r2, [r7, #0]
 8005e46:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005e4a:	4a0a      	ldr	r2, [pc, #40]	@ (8005e74 <vQueueAddToRegistry+0x50>)
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	00db      	lsls	r3, r3, #3
 8005e50:	4413      	add	r3, r2
 8005e52:	687a      	ldr	r2, [r7, #4]
 8005e54:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005e56:	e006      	b.n	8005e66 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	3301      	adds	r3, #1
 8005e5c:	60fb      	str	r3, [r7, #12]
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2b07      	cmp	r3, #7
 8005e62:	d9e7      	bls.n	8005e34 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005e64:	bf00      	nop
 8005e66:	bf00      	nop
 8005e68:	3714      	adds	r7, #20
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e70:	4770      	bx	lr
 8005e72:	bf00      	nop
 8005e74:	200004ec 	.word	0x200004ec

08005e78 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b08e      	sub	sp, #56	@ 0x38
 8005e7c:	af04      	add	r7, sp, #16
 8005e7e:	60f8      	str	r0, [r7, #12]
 8005e80:	60b9      	str	r1, [r7, #8]
 8005e82:	607a      	str	r2, [r7, #4]
 8005e84:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005e86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d10b      	bne.n	8005ea4 <xTaskCreateStatic+0x2c>
	__asm volatile
 8005e8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e90:	f383 8811 	msr	BASEPRI, r3
 8005e94:	f3bf 8f6f 	isb	sy
 8005e98:	f3bf 8f4f 	dsb	sy
 8005e9c:	623b      	str	r3, [r7, #32]
}
 8005e9e:	bf00      	nop
 8005ea0:	bf00      	nop
 8005ea2:	e7fd      	b.n	8005ea0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005ea4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d10b      	bne.n	8005ec2 <xTaskCreateStatic+0x4a>
	__asm volatile
 8005eaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005eae:	f383 8811 	msr	BASEPRI, r3
 8005eb2:	f3bf 8f6f 	isb	sy
 8005eb6:	f3bf 8f4f 	dsb	sy
 8005eba:	61fb      	str	r3, [r7, #28]
}
 8005ebc:	bf00      	nop
 8005ebe:	bf00      	nop
 8005ec0:	e7fd      	b.n	8005ebe <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005ec2:	2354      	movs	r3, #84	@ 0x54
 8005ec4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005ec6:	693b      	ldr	r3, [r7, #16]
 8005ec8:	2b54      	cmp	r3, #84	@ 0x54
 8005eca:	d00b      	beq.n	8005ee4 <xTaskCreateStatic+0x6c>
	__asm volatile
 8005ecc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ed0:	f383 8811 	msr	BASEPRI, r3
 8005ed4:	f3bf 8f6f 	isb	sy
 8005ed8:	f3bf 8f4f 	dsb	sy
 8005edc:	61bb      	str	r3, [r7, #24]
}
 8005ede:	bf00      	nop
 8005ee0:	bf00      	nop
 8005ee2:	e7fd      	b.n	8005ee0 <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005ee4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d01e      	beq.n	8005f28 <xTaskCreateStatic+0xb0>
 8005eea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d01b      	beq.n	8005f28 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005ef0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ef2:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ef6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005ef8:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005efc:	2202      	movs	r2, #2
 8005efe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005f02:	2300      	movs	r3, #0
 8005f04:	9303      	str	r3, [sp, #12]
 8005f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f08:	9302      	str	r3, [sp, #8]
 8005f0a:	f107 0314 	add.w	r3, r7, #20
 8005f0e:	9301      	str	r3, [sp, #4]
 8005f10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f12:	9300      	str	r3, [sp, #0]
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	687a      	ldr	r2, [r7, #4]
 8005f18:	68b9      	ldr	r1, [r7, #8]
 8005f1a:	68f8      	ldr	r0, [r7, #12]
 8005f1c:	f000 f850 	bl	8005fc0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005f20:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005f22:	f000 f8cd 	bl	80060c0 <prvAddNewTaskToReadyList>
 8005f26:	e001      	b.n	8005f2c <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 8005f28:	2300      	movs	r3, #0
 8005f2a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005f2c:	697b      	ldr	r3, [r7, #20]
	}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	3728      	adds	r7, #40	@ 0x28
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}

08005f36 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005f36:	b580      	push	{r7, lr}
 8005f38:	b08c      	sub	sp, #48	@ 0x30
 8005f3a:	af04      	add	r7, sp, #16
 8005f3c:	60f8      	str	r0, [r7, #12]
 8005f3e:	60b9      	str	r1, [r7, #8]
 8005f40:	603b      	str	r3, [r7, #0]
 8005f42:	4613      	mov	r3, r2
 8005f44:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f46:	88fb      	ldrh	r3, [r7, #6]
 8005f48:	009b      	lsls	r3, r3, #2
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	f000 fffe 	bl	8006f4c <pvPortMalloc>
 8005f50:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d00e      	beq.n	8005f76 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005f58:	2054      	movs	r0, #84	@ 0x54
 8005f5a:	f000 fff7 	bl	8006f4c <pvPortMalloc>
 8005f5e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005f60:	69fb      	ldr	r3, [r7, #28]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d003      	beq.n	8005f6e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005f66:	69fb      	ldr	r3, [r7, #28]
 8005f68:	697a      	ldr	r2, [r7, #20]
 8005f6a:	631a      	str	r2, [r3, #48]	@ 0x30
 8005f6c:	e005      	b.n	8005f7a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005f6e:	6978      	ldr	r0, [r7, #20]
 8005f70:	f001 f8b4 	bl	80070dc <vPortFree>
 8005f74:	e001      	b.n	8005f7a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005f76:	2300      	movs	r3, #0
 8005f78:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005f7a:	69fb      	ldr	r3, [r7, #28]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d017      	beq.n	8005fb0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005f80:	69fb      	ldr	r3, [r7, #28]
 8005f82:	2200      	movs	r2, #0
 8005f84:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005f88:	88fa      	ldrh	r2, [r7, #6]
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	9303      	str	r3, [sp, #12]
 8005f8e:	69fb      	ldr	r3, [r7, #28]
 8005f90:	9302      	str	r3, [sp, #8]
 8005f92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f94:	9301      	str	r3, [sp, #4]
 8005f96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f98:	9300      	str	r3, [sp, #0]
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	68b9      	ldr	r1, [r7, #8]
 8005f9e:	68f8      	ldr	r0, [r7, #12]
 8005fa0:	f000 f80e 	bl	8005fc0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005fa4:	69f8      	ldr	r0, [r7, #28]
 8005fa6:	f000 f88b 	bl	80060c0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005faa:	2301      	movs	r3, #1
 8005fac:	61bb      	str	r3, [r7, #24]
 8005fae:	e002      	b.n	8005fb6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005fb0:	f04f 33ff 	mov.w	r3, #4294967295
 8005fb4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005fb6:	69bb      	ldr	r3, [r7, #24]
	}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	3720      	adds	r7, #32
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bd80      	pop	{r7, pc}

08005fc0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b088      	sub	sp, #32
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	60f8      	str	r0, [r7, #12]
 8005fc8:	60b9      	str	r1, [r7, #8]
 8005fca:	607a      	str	r2, [r7, #4]
 8005fcc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005fce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fd0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005fd8:	3b01      	subs	r3, #1
 8005fda:	009b      	lsls	r3, r3, #2
 8005fdc:	4413      	add	r3, r2
 8005fde:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005fe0:	69bb      	ldr	r3, [r7, #24]
 8005fe2:	f023 0307 	bic.w	r3, r3, #7
 8005fe6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005fe8:	69bb      	ldr	r3, [r7, #24]
 8005fea:	f003 0307 	and.w	r3, r3, #7
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d00b      	beq.n	800600a <prvInitialiseNewTask+0x4a>
	__asm volatile
 8005ff2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ff6:	f383 8811 	msr	BASEPRI, r3
 8005ffa:	f3bf 8f6f 	isb	sy
 8005ffe:	f3bf 8f4f 	dsb	sy
 8006002:	617b      	str	r3, [r7, #20]
}
 8006004:	bf00      	nop
 8006006:	bf00      	nop
 8006008:	e7fd      	b.n	8006006 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800600a:	2300      	movs	r3, #0
 800600c:	61fb      	str	r3, [r7, #28]
 800600e:	e012      	b.n	8006036 <prvInitialiseNewTask+0x76>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006010:	68ba      	ldr	r2, [r7, #8]
 8006012:	69fb      	ldr	r3, [r7, #28]
 8006014:	4413      	add	r3, r2
 8006016:	7819      	ldrb	r1, [r3, #0]
 8006018:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800601a:	69fb      	ldr	r3, [r7, #28]
 800601c:	4413      	add	r3, r2
 800601e:	3334      	adds	r3, #52	@ 0x34
 8006020:	460a      	mov	r2, r1
 8006022:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8006024:	68ba      	ldr	r2, [r7, #8]
 8006026:	69fb      	ldr	r3, [r7, #28]
 8006028:	4413      	add	r3, r2
 800602a:	781b      	ldrb	r3, [r3, #0]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d006      	beq.n	800603e <prvInitialiseNewTask+0x7e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006030:	69fb      	ldr	r3, [r7, #28]
 8006032:	3301      	adds	r3, #1
 8006034:	61fb      	str	r3, [r7, #28]
 8006036:	69fb      	ldr	r3, [r7, #28]
 8006038:	2b0f      	cmp	r3, #15
 800603a:	d9e9      	bls.n	8006010 <prvInitialiseNewTask+0x50>
 800603c:	e000      	b.n	8006040 <prvInitialiseNewTask+0x80>
		{
			break;
 800603e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006040:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006042:	2200      	movs	r2, #0
 8006044:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006048:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800604a:	2b06      	cmp	r3, #6
 800604c:	d901      	bls.n	8006052 <prvInitialiseNewTask+0x92>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800604e:	2306      	movs	r3, #6
 8006050:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006052:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006054:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006056:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006058:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800605a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800605c:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800605e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006060:	2200      	movs	r2, #0
 8006062:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006064:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006066:	3304      	adds	r3, #4
 8006068:	4618      	mov	r0, r3
 800606a:	f7ff fbb3 	bl	80057d4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800606e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006070:	3318      	adds	r3, #24
 8006072:	4618      	mov	r0, r3
 8006074:	f7ff fbae 	bl	80057d4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006078:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800607a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800607c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800607e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006080:	f1c3 0207 	rsb	r2, r3, #7
 8006084:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006086:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006088:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800608a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800608c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800608e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006090:	2200      	movs	r2, #0
 8006092:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006094:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006096:	2200      	movs	r2, #0
 8006098:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800609c:	683a      	ldr	r2, [r7, #0]
 800609e:	68f9      	ldr	r1, [r7, #12]
 80060a0:	69b8      	ldr	r0, [r7, #24]
 80060a2:	f000 fd03 	bl	8006aac <pxPortInitialiseStack>
 80060a6:	4602      	mov	r2, r0
 80060a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060aa:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80060ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d002      	beq.n	80060b8 <prvInitialiseNewTask+0xf8>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80060b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80060b6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80060b8:	bf00      	nop
 80060ba:	3720      	adds	r7, #32
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd80      	pop	{r7, pc}

080060c0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b082      	sub	sp, #8
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80060c8:	f000 fe1e 	bl	8006d08 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80060cc:	4b2a      	ldr	r3, [pc, #168]	@ (8006178 <prvAddNewTaskToReadyList+0xb8>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	3301      	adds	r3, #1
 80060d2:	4a29      	ldr	r2, [pc, #164]	@ (8006178 <prvAddNewTaskToReadyList+0xb8>)
 80060d4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80060d6:	4b29      	ldr	r3, [pc, #164]	@ (800617c <prvAddNewTaskToReadyList+0xbc>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d109      	bne.n	80060f2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80060de:	4a27      	ldr	r2, [pc, #156]	@ (800617c <prvAddNewTaskToReadyList+0xbc>)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80060e4:	4b24      	ldr	r3, [pc, #144]	@ (8006178 <prvAddNewTaskToReadyList+0xb8>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	2b01      	cmp	r3, #1
 80060ea:	d110      	bne.n	800610e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80060ec:	f000 fb2c 	bl	8006748 <prvInitialiseTaskLists>
 80060f0:	e00d      	b.n	800610e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80060f2:	4b23      	ldr	r3, [pc, #140]	@ (8006180 <prvAddNewTaskToReadyList+0xc0>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d109      	bne.n	800610e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80060fa:	4b20      	ldr	r3, [pc, #128]	@ (800617c <prvAddNewTaskToReadyList+0xbc>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006104:	429a      	cmp	r2, r3
 8006106:	d802      	bhi.n	800610e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006108:	4a1c      	ldr	r2, [pc, #112]	@ (800617c <prvAddNewTaskToReadyList+0xbc>)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800610e:	4b1d      	ldr	r3, [pc, #116]	@ (8006184 <prvAddNewTaskToReadyList+0xc4>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	3301      	adds	r3, #1
 8006114:	4a1b      	ldr	r2, [pc, #108]	@ (8006184 <prvAddNewTaskToReadyList+0xc4>)
 8006116:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800611c:	2201      	movs	r2, #1
 800611e:	409a      	lsls	r2, r3
 8006120:	4b19      	ldr	r3, [pc, #100]	@ (8006188 <prvAddNewTaskToReadyList+0xc8>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4313      	orrs	r3, r2
 8006126:	4a18      	ldr	r2, [pc, #96]	@ (8006188 <prvAddNewTaskToReadyList+0xc8>)
 8006128:	6013      	str	r3, [r2, #0]
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800612e:	4613      	mov	r3, r2
 8006130:	009b      	lsls	r3, r3, #2
 8006132:	4413      	add	r3, r2
 8006134:	009b      	lsls	r3, r3, #2
 8006136:	4a15      	ldr	r2, [pc, #84]	@ (800618c <prvAddNewTaskToReadyList+0xcc>)
 8006138:	441a      	add	r2, r3
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	3304      	adds	r3, #4
 800613e:	4619      	mov	r1, r3
 8006140:	4610      	mov	r0, r2
 8006142:	f7ff fb54 	bl	80057ee <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006146:	f000 fe11 	bl	8006d6c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800614a:	4b0d      	ldr	r3, [pc, #52]	@ (8006180 <prvAddNewTaskToReadyList+0xc0>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d00e      	beq.n	8006170 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006152:	4b0a      	ldr	r3, [pc, #40]	@ (800617c <prvAddNewTaskToReadyList+0xbc>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800615c:	429a      	cmp	r2, r3
 800615e:	d207      	bcs.n	8006170 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006160:	4b0b      	ldr	r3, [pc, #44]	@ (8006190 <prvAddNewTaskToReadyList+0xd0>)
 8006162:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006166:	601a      	str	r2, [r3, #0]
 8006168:	f3bf 8f4f 	dsb	sy
 800616c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006170:	bf00      	nop
 8006172:	3708      	adds	r7, #8
 8006174:	46bd      	mov	sp, r7
 8006176:	bd80      	pop	{r7, pc}
 8006178:	2000062c 	.word	0x2000062c
 800617c:	2000052c 	.word	0x2000052c
 8006180:	20000638 	.word	0x20000638
 8006184:	20000648 	.word	0x20000648
 8006188:	20000634 	.word	0x20000634
 800618c:	20000530 	.word	0x20000530
 8006190:	e000ed04 	.word	0xe000ed04

08006194 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006194:	b580      	push	{r7, lr}
 8006196:	b084      	sub	sp, #16
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800619c:	2300      	movs	r3, #0
 800619e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d018      	beq.n	80061d8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80061a6:	4b14      	ldr	r3, [pc, #80]	@ (80061f8 <vTaskDelay+0x64>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d00b      	beq.n	80061c6 <vTaskDelay+0x32>
	__asm volatile
 80061ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061b2:	f383 8811 	msr	BASEPRI, r3
 80061b6:	f3bf 8f6f 	isb	sy
 80061ba:	f3bf 8f4f 	dsb	sy
 80061be:	60bb      	str	r3, [r7, #8]
}
 80061c0:	bf00      	nop
 80061c2:	bf00      	nop
 80061c4:	e7fd      	b.n	80061c2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80061c6:	f000 f87d 	bl	80062c4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80061ca:	2100      	movs	r1, #0
 80061cc:	6878      	ldr	r0, [r7, #4]
 80061ce:	f000 fc07 	bl	80069e0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80061d2:	f000 f885 	bl	80062e0 <xTaskResumeAll>
 80061d6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d107      	bne.n	80061ee <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80061de:	4b07      	ldr	r3, [pc, #28]	@ (80061fc <vTaskDelay+0x68>)
 80061e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80061e4:	601a      	str	r2, [r3, #0]
 80061e6:	f3bf 8f4f 	dsb	sy
 80061ea:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80061ee:	bf00      	nop
 80061f0:	3710      	adds	r7, #16
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}
 80061f6:	bf00      	nop
 80061f8:	20000654 	.word	0x20000654
 80061fc:	e000ed04 	.word	0xe000ed04

08006200 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b08a      	sub	sp, #40	@ 0x28
 8006204:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006206:	2300      	movs	r3, #0
 8006208:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800620a:	2300      	movs	r3, #0
 800620c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800620e:	463a      	mov	r2, r7
 8006210:	1d39      	adds	r1, r7, #4
 8006212:	f107 0308 	add.w	r3, r7, #8
 8006216:	4618      	mov	r0, r3
 8006218:	f7fa f976 	bl	8000508 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800621c:	6839      	ldr	r1, [r7, #0]
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	68ba      	ldr	r2, [r7, #8]
 8006222:	9202      	str	r2, [sp, #8]
 8006224:	9301      	str	r3, [sp, #4]
 8006226:	2300      	movs	r3, #0
 8006228:	9300      	str	r3, [sp, #0]
 800622a:	2300      	movs	r3, #0
 800622c:	460a      	mov	r2, r1
 800622e:	491f      	ldr	r1, [pc, #124]	@ (80062ac <vTaskStartScheduler+0xac>)
 8006230:	481f      	ldr	r0, [pc, #124]	@ (80062b0 <vTaskStartScheduler+0xb0>)
 8006232:	f7ff fe21 	bl	8005e78 <xTaskCreateStatic>
 8006236:	4603      	mov	r3, r0
 8006238:	4a1e      	ldr	r2, [pc, #120]	@ (80062b4 <vTaskStartScheduler+0xb4>)
 800623a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800623c:	4b1d      	ldr	r3, [pc, #116]	@ (80062b4 <vTaskStartScheduler+0xb4>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d002      	beq.n	800624a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006244:	2301      	movs	r3, #1
 8006246:	617b      	str	r3, [r7, #20]
 8006248:	e001      	b.n	800624e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800624a:	2300      	movs	r3, #0
 800624c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800624e:	697b      	ldr	r3, [r7, #20]
 8006250:	2b01      	cmp	r3, #1
 8006252:	d116      	bne.n	8006282 <vTaskStartScheduler+0x82>
	__asm volatile
 8006254:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006258:	f383 8811 	msr	BASEPRI, r3
 800625c:	f3bf 8f6f 	isb	sy
 8006260:	f3bf 8f4f 	dsb	sy
 8006264:	613b      	str	r3, [r7, #16]
}
 8006266:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006268:	4b13      	ldr	r3, [pc, #76]	@ (80062b8 <vTaskStartScheduler+0xb8>)
 800626a:	f04f 32ff 	mov.w	r2, #4294967295
 800626e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006270:	4b12      	ldr	r3, [pc, #72]	@ (80062bc <vTaskStartScheduler+0xbc>)
 8006272:	2201      	movs	r2, #1
 8006274:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8006276:	4b12      	ldr	r3, [pc, #72]	@ (80062c0 <vTaskStartScheduler+0xc0>)
 8006278:	2200      	movs	r2, #0
 800627a:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800627c:	f000 fca0 	bl	8006bc0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006280:	e00f      	b.n	80062a2 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006288:	d10b      	bne.n	80062a2 <vTaskStartScheduler+0xa2>
	__asm volatile
 800628a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800628e:	f383 8811 	msr	BASEPRI, r3
 8006292:	f3bf 8f6f 	isb	sy
 8006296:	f3bf 8f4f 	dsb	sy
 800629a:	60fb      	str	r3, [r7, #12]
}
 800629c:	bf00      	nop
 800629e:	bf00      	nop
 80062a0:	e7fd      	b.n	800629e <vTaskStartScheduler+0x9e>
}
 80062a2:	bf00      	nop
 80062a4:	3718      	adds	r7, #24
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bd80      	pop	{r7, pc}
 80062aa:	bf00      	nop
 80062ac:	08007d1c 	.word	0x08007d1c
 80062b0:	08006719 	.word	0x08006719
 80062b4:	20000650 	.word	0x20000650
 80062b8:	2000064c 	.word	0x2000064c
 80062bc:	20000638 	.word	0x20000638
 80062c0:	20000630 	.word	0x20000630

080062c4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80062c4:	b480      	push	{r7}
 80062c6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80062c8:	4b04      	ldr	r3, [pc, #16]	@ (80062dc <vTaskSuspendAll+0x18>)
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	3301      	adds	r3, #1
 80062ce:	4a03      	ldr	r2, [pc, #12]	@ (80062dc <vTaskSuspendAll+0x18>)
 80062d0:	6013      	str	r3, [r2, #0]
}
 80062d2:	bf00      	nop
 80062d4:	46bd      	mov	sp, r7
 80062d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062da:	4770      	bx	lr
 80062dc:	20000654 	.word	0x20000654

080062e0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b084      	sub	sp, #16
 80062e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80062e6:	2300      	movs	r3, #0
 80062e8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80062ea:	2300      	movs	r3, #0
 80062ec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80062ee:	4b42      	ldr	r3, [pc, #264]	@ (80063f8 <xTaskResumeAll+0x118>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d10b      	bne.n	800630e <xTaskResumeAll+0x2e>
	__asm volatile
 80062f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062fa:	f383 8811 	msr	BASEPRI, r3
 80062fe:	f3bf 8f6f 	isb	sy
 8006302:	f3bf 8f4f 	dsb	sy
 8006306:	603b      	str	r3, [r7, #0]
}
 8006308:	bf00      	nop
 800630a:	bf00      	nop
 800630c:	e7fd      	b.n	800630a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800630e:	f000 fcfb 	bl	8006d08 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006312:	4b39      	ldr	r3, [pc, #228]	@ (80063f8 <xTaskResumeAll+0x118>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	3b01      	subs	r3, #1
 8006318:	4a37      	ldr	r2, [pc, #220]	@ (80063f8 <xTaskResumeAll+0x118>)
 800631a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800631c:	4b36      	ldr	r3, [pc, #216]	@ (80063f8 <xTaskResumeAll+0x118>)
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d161      	bne.n	80063e8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006324:	4b35      	ldr	r3, [pc, #212]	@ (80063fc <xTaskResumeAll+0x11c>)
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d05d      	beq.n	80063e8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800632c:	e02e      	b.n	800638c <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800632e:	4b34      	ldr	r3, [pc, #208]	@ (8006400 <xTaskResumeAll+0x120>)
 8006330:	68db      	ldr	r3, [r3, #12]
 8006332:	68db      	ldr	r3, [r3, #12]
 8006334:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	3318      	adds	r3, #24
 800633a:	4618      	mov	r0, r3
 800633c:	f7ff fab4 	bl	80058a8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	3304      	adds	r3, #4
 8006344:	4618      	mov	r0, r3
 8006346:	f7ff faaf 	bl	80058a8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800634e:	2201      	movs	r2, #1
 8006350:	409a      	lsls	r2, r3
 8006352:	4b2c      	ldr	r3, [pc, #176]	@ (8006404 <xTaskResumeAll+0x124>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4313      	orrs	r3, r2
 8006358:	4a2a      	ldr	r2, [pc, #168]	@ (8006404 <xTaskResumeAll+0x124>)
 800635a:	6013      	str	r3, [r2, #0]
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006360:	4613      	mov	r3, r2
 8006362:	009b      	lsls	r3, r3, #2
 8006364:	4413      	add	r3, r2
 8006366:	009b      	lsls	r3, r3, #2
 8006368:	4a27      	ldr	r2, [pc, #156]	@ (8006408 <xTaskResumeAll+0x128>)
 800636a:	441a      	add	r2, r3
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	3304      	adds	r3, #4
 8006370:	4619      	mov	r1, r3
 8006372:	4610      	mov	r0, r2
 8006374:	f7ff fa3b 	bl	80057ee <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800637c:	4b23      	ldr	r3, [pc, #140]	@ (800640c <xTaskResumeAll+0x12c>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006382:	429a      	cmp	r2, r3
 8006384:	d302      	bcc.n	800638c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006386:	4b22      	ldr	r3, [pc, #136]	@ (8006410 <xTaskResumeAll+0x130>)
 8006388:	2201      	movs	r2, #1
 800638a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800638c:	4b1c      	ldr	r3, [pc, #112]	@ (8006400 <xTaskResumeAll+0x120>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d1cc      	bne.n	800632e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d001      	beq.n	800639e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800639a:	f000 fa73 	bl	8006884 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800639e:	4b1d      	ldr	r3, [pc, #116]	@ (8006414 <xTaskResumeAll+0x134>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d010      	beq.n	80063cc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80063aa:	f000 f837 	bl	800641c <xTaskIncrementTick>
 80063ae:	4603      	mov	r3, r0
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d002      	beq.n	80063ba <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80063b4:	4b16      	ldr	r3, [pc, #88]	@ (8006410 <xTaskResumeAll+0x130>)
 80063b6:	2201      	movs	r2, #1
 80063b8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	3b01      	subs	r3, #1
 80063be:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d1f1      	bne.n	80063aa <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 80063c6:	4b13      	ldr	r3, [pc, #76]	@ (8006414 <xTaskResumeAll+0x134>)
 80063c8:	2200      	movs	r2, #0
 80063ca:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80063cc:	4b10      	ldr	r3, [pc, #64]	@ (8006410 <xTaskResumeAll+0x130>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d009      	beq.n	80063e8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80063d4:	2301      	movs	r3, #1
 80063d6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80063d8:	4b0f      	ldr	r3, [pc, #60]	@ (8006418 <xTaskResumeAll+0x138>)
 80063da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80063de:	601a      	str	r2, [r3, #0]
 80063e0:	f3bf 8f4f 	dsb	sy
 80063e4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80063e8:	f000 fcc0 	bl	8006d6c <vPortExitCritical>

	return xAlreadyYielded;
 80063ec:	68bb      	ldr	r3, [r7, #8]
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	3710      	adds	r7, #16
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd80      	pop	{r7, pc}
 80063f6:	bf00      	nop
 80063f8:	20000654 	.word	0x20000654
 80063fc:	2000062c 	.word	0x2000062c
 8006400:	200005ec 	.word	0x200005ec
 8006404:	20000634 	.word	0x20000634
 8006408:	20000530 	.word	0x20000530
 800640c:	2000052c 	.word	0x2000052c
 8006410:	20000640 	.word	0x20000640
 8006414:	2000063c 	.word	0x2000063c
 8006418:	e000ed04 	.word	0xe000ed04

0800641c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b086      	sub	sp, #24
 8006420:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006422:	2300      	movs	r3, #0
 8006424:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006426:	4b51      	ldr	r3, [pc, #324]	@ (800656c <xTaskIncrementTick+0x150>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	2b00      	cmp	r3, #0
 800642c:	f040 808e 	bne.w	800654c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006430:	4b4f      	ldr	r3, [pc, #316]	@ (8006570 <xTaskIncrementTick+0x154>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	3301      	adds	r3, #1
 8006436:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006438:	4a4d      	ldr	r2, [pc, #308]	@ (8006570 <xTaskIncrementTick+0x154>)
 800643a:	693b      	ldr	r3, [r7, #16]
 800643c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d121      	bne.n	8006488 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006444:	4b4b      	ldr	r3, [pc, #300]	@ (8006574 <xTaskIncrementTick+0x158>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d00b      	beq.n	8006466 <xTaskIncrementTick+0x4a>
	__asm volatile
 800644e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006452:	f383 8811 	msr	BASEPRI, r3
 8006456:	f3bf 8f6f 	isb	sy
 800645a:	f3bf 8f4f 	dsb	sy
 800645e:	603b      	str	r3, [r7, #0]
}
 8006460:	bf00      	nop
 8006462:	bf00      	nop
 8006464:	e7fd      	b.n	8006462 <xTaskIncrementTick+0x46>
 8006466:	4b43      	ldr	r3, [pc, #268]	@ (8006574 <xTaskIncrementTick+0x158>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	60fb      	str	r3, [r7, #12]
 800646c:	4b42      	ldr	r3, [pc, #264]	@ (8006578 <xTaskIncrementTick+0x15c>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4a40      	ldr	r2, [pc, #256]	@ (8006574 <xTaskIncrementTick+0x158>)
 8006472:	6013      	str	r3, [r2, #0]
 8006474:	4a40      	ldr	r2, [pc, #256]	@ (8006578 <xTaskIncrementTick+0x15c>)
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	6013      	str	r3, [r2, #0]
 800647a:	4b40      	ldr	r3, [pc, #256]	@ (800657c <xTaskIncrementTick+0x160>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	3301      	adds	r3, #1
 8006480:	4a3e      	ldr	r2, [pc, #248]	@ (800657c <xTaskIncrementTick+0x160>)
 8006482:	6013      	str	r3, [r2, #0]
 8006484:	f000 f9fe 	bl	8006884 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006488:	4b3d      	ldr	r3, [pc, #244]	@ (8006580 <xTaskIncrementTick+0x164>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	693a      	ldr	r2, [r7, #16]
 800648e:	429a      	cmp	r2, r3
 8006490:	d34d      	bcc.n	800652e <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006492:	4b38      	ldr	r3, [pc, #224]	@ (8006574 <xTaskIncrementTick+0x158>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d101      	bne.n	80064a0 <xTaskIncrementTick+0x84>
 800649c:	2301      	movs	r3, #1
 800649e:	e000      	b.n	80064a2 <xTaskIncrementTick+0x86>
 80064a0:	2300      	movs	r3, #0
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d004      	beq.n	80064b0 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064a6:	4b36      	ldr	r3, [pc, #216]	@ (8006580 <xTaskIncrementTick+0x164>)
 80064a8:	f04f 32ff 	mov.w	r2, #4294967295
 80064ac:	601a      	str	r2, [r3, #0]
					break;
 80064ae:	e03e      	b.n	800652e <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80064b0:	4b30      	ldr	r3, [pc, #192]	@ (8006574 <xTaskIncrementTick+0x158>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	68db      	ldr	r3, [r3, #12]
 80064b6:	68db      	ldr	r3, [r3, #12]
 80064b8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	685b      	ldr	r3, [r3, #4]
 80064be:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80064c0:	693a      	ldr	r2, [r7, #16]
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	429a      	cmp	r2, r3
 80064c6:	d203      	bcs.n	80064d0 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80064c8:	4a2d      	ldr	r2, [pc, #180]	@ (8006580 <xTaskIncrementTick+0x164>)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6013      	str	r3, [r2, #0]
						break;
 80064ce:	e02e      	b.n	800652e <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	3304      	adds	r3, #4
 80064d4:	4618      	mov	r0, r3
 80064d6:	f7ff f9e7 	bl	80058a8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d004      	beq.n	80064ec <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	3318      	adds	r3, #24
 80064e6:	4618      	mov	r0, r3
 80064e8:	f7ff f9de 	bl	80058a8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064f0:	2201      	movs	r2, #1
 80064f2:	409a      	lsls	r2, r3
 80064f4:	4b23      	ldr	r3, [pc, #140]	@ (8006584 <xTaskIncrementTick+0x168>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4313      	orrs	r3, r2
 80064fa:	4a22      	ldr	r2, [pc, #136]	@ (8006584 <xTaskIncrementTick+0x168>)
 80064fc:	6013      	str	r3, [r2, #0]
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006502:	4613      	mov	r3, r2
 8006504:	009b      	lsls	r3, r3, #2
 8006506:	4413      	add	r3, r2
 8006508:	009b      	lsls	r3, r3, #2
 800650a:	4a1f      	ldr	r2, [pc, #124]	@ (8006588 <xTaskIncrementTick+0x16c>)
 800650c:	441a      	add	r2, r3
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	3304      	adds	r3, #4
 8006512:	4619      	mov	r1, r3
 8006514:	4610      	mov	r0, r2
 8006516:	f7ff f96a 	bl	80057ee <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800651e:	4b1b      	ldr	r3, [pc, #108]	@ (800658c <xTaskIncrementTick+0x170>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006524:	429a      	cmp	r2, r3
 8006526:	d3b4      	bcc.n	8006492 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006528:	2301      	movs	r3, #1
 800652a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800652c:	e7b1      	b.n	8006492 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800652e:	4b17      	ldr	r3, [pc, #92]	@ (800658c <xTaskIncrementTick+0x170>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006534:	4914      	ldr	r1, [pc, #80]	@ (8006588 <xTaskIncrementTick+0x16c>)
 8006536:	4613      	mov	r3, r2
 8006538:	009b      	lsls	r3, r3, #2
 800653a:	4413      	add	r3, r2
 800653c:	009b      	lsls	r3, r3, #2
 800653e:	440b      	add	r3, r1
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	2b01      	cmp	r3, #1
 8006544:	d907      	bls.n	8006556 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8006546:	2301      	movs	r3, #1
 8006548:	617b      	str	r3, [r7, #20]
 800654a:	e004      	b.n	8006556 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800654c:	4b10      	ldr	r3, [pc, #64]	@ (8006590 <xTaskIncrementTick+0x174>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	3301      	adds	r3, #1
 8006552:	4a0f      	ldr	r2, [pc, #60]	@ (8006590 <xTaskIncrementTick+0x174>)
 8006554:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006556:	4b0f      	ldr	r3, [pc, #60]	@ (8006594 <xTaskIncrementTick+0x178>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d001      	beq.n	8006562 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800655e:	2301      	movs	r3, #1
 8006560:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006562:	697b      	ldr	r3, [r7, #20]
}
 8006564:	4618      	mov	r0, r3
 8006566:	3718      	adds	r7, #24
 8006568:	46bd      	mov	sp, r7
 800656a:	bd80      	pop	{r7, pc}
 800656c:	20000654 	.word	0x20000654
 8006570:	20000630 	.word	0x20000630
 8006574:	200005e4 	.word	0x200005e4
 8006578:	200005e8 	.word	0x200005e8
 800657c:	20000644 	.word	0x20000644
 8006580:	2000064c 	.word	0x2000064c
 8006584:	20000634 	.word	0x20000634
 8006588:	20000530 	.word	0x20000530
 800658c:	2000052c 	.word	0x2000052c
 8006590:	2000063c 	.word	0x2000063c
 8006594:	20000640 	.word	0x20000640

08006598 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006598:	b480      	push	{r7}
 800659a:	b087      	sub	sp, #28
 800659c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800659e:	4b27      	ldr	r3, [pc, #156]	@ (800663c <vTaskSwitchContext+0xa4>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d003      	beq.n	80065ae <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80065a6:	4b26      	ldr	r3, [pc, #152]	@ (8006640 <vTaskSwitchContext+0xa8>)
 80065a8:	2201      	movs	r2, #1
 80065aa:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80065ac:	e040      	b.n	8006630 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80065ae:	4b24      	ldr	r3, [pc, #144]	@ (8006640 <vTaskSwitchContext+0xa8>)
 80065b0:	2200      	movs	r2, #0
 80065b2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80065b4:	4b23      	ldr	r3, [pc, #140]	@ (8006644 <vTaskSwitchContext+0xac>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	fab3 f383 	clz	r3, r3
 80065c0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80065c2:	7afb      	ldrb	r3, [r7, #11]
 80065c4:	f1c3 031f 	rsb	r3, r3, #31
 80065c8:	617b      	str	r3, [r7, #20]
 80065ca:	491f      	ldr	r1, [pc, #124]	@ (8006648 <vTaskSwitchContext+0xb0>)
 80065cc:	697a      	ldr	r2, [r7, #20]
 80065ce:	4613      	mov	r3, r2
 80065d0:	009b      	lsls	r3, r3, #2
 80065d2:	4413      	add	r3, r2
 80065d4:	009b      	lsls	r3, r3, #2
 80065d6:	440b      	add	r3, r1
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d10b      	bne.n	80065f6 <vTaskSwitchContext+0x5e>
	__asm volatile
 80065de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065e2:	f383 8811 	msr	BASEPRI, r3
 80065e6:	f3bf 8f6f 	isb	sy
 80065ea:	f3bf 8f4f 	dsb	sy
 80065ee:	607b      	str	r3, [r7, #4]
}
 80065f0:	bf00      	nop
 80065f2:	bf00      	nop
 80065f4:	e7fd      	b.n	80065f2 <vTaskSwitchContext+0x5a>
 80065f6:	697a      	ldr	r2, [r7, #20]
 80065f8:	4613      	mov	r3, r2
 80065fa:	009b      	lsls	r3, r3, #2
 80065fc:	4413      	add	r3, r2
 80065fe:	009b      	lsls	r3, r3, #2
 8006600:	4a11      	ldr	r2, [pc, #68]	@ (8006648 <vTaskSwitchContext+0xb0>)
 8006602:	4413      	add	r3, r2
 8006604:	613b      	str	r3, [r7, #16]
 8006606:	693b      	ldr	r3, [r7, #16]
 8006608:	685b      	ldr	r3, [r3, #4]
 800660a:	685a      	ldr	r2, [r3, #4]
 800660c:	693b      	ldr	r3, [r7, #16]
 800660e:	605a      	str	r2, [r3, #4]
 8006610:	693b      	ldr	r3, [r7, #16]
 8006612:	685a      	ldr	r2, [r3, #4]
 8006614:	693b      	ldr	r3, [r7, #16]
 8006616:	3308      	adds	r3, #8
 8006618:	429a      	cmp	r2, r3
 800661a:	d104      	bne.n	8006626 <vTaskSwitchContext+0x8e>
 800661c:	693b      	ldr	r3, [r7, #16]
 800661e:	685b      	ldr	r3, [r3, #4]
 8006620:	685a      	ldr	r2, [r3, #4]
 8006622:	693b      	ldr	r3, [r7, #16]
 8006624:	605a      	str	r2, [r3, #4]
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	685b      	ldr	r3, [r3, #4]
 800662a:	68db      	ldr	r3, [r3, #12]
 800662c:	4a07      	ldr	r2, [pc, #28]	@ (800664c <vTaskSwitchContext+0xb4>)
 800662e:	6013      	str	r3, [r2, #0]
}
 8006630:	bf00      	nop
 8006632:	371c      	adds	r7, #28
 8006634:	46bd      	mov	sp, r7
 8006636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663a:	4770      	bx	lr
 800663c:	20000654 	.word	0x20000654
 8006640:	20000640 	.word	0x20000640
 8006644:	20000634 	.word	0x20000634
 8006648:	20000530 	.word	0x20000530
 800664c:	2000052c 	.word	0x2000052c

08006650 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b086      	sub	sp, #24
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	68db      	ldr	r3, [r3, #12]
 800665c:	68db      	ldr	r3, [r3, #12]
 800665e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d10b      	bne.n	800667e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8006666:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800666a:	f383 8811 	msr	BASEPRI, r3
 800666e:	f3bf 8f6f 	isb	sy
 8006672:	f3bf 8f4f 	dsb	sy
 8006676:	60fb      	str	r3, [r7, #12]
}
 8006678:	bf00      	nop
 800667a:	bf00      	nop
 800667c:	e7fd      	b.n	800667a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800667e:	693b      	ldr	r3, [r7, #16]
 8006680:	3318      	adds	r3, #24
 8006682:	4618      	mov	r0, r3
 8006684:	f7ff f910 	bl	80058a8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006688:	4b1d      	ldr	r3, [pc, #116]	@ (8006700 <xTaskRemoveFromEventList+0xb0>)
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d11c      	bne.n	80066ca <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006690:	693b      	ldr	r3, [r7, #16]
 8006692:	3304      	adds	r3, #4
 8006694:	4618      	mov	r0, r3
 8006696:	f7ff f907 	bl	80058a8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800669a:	693b      	ldr	r3, [r7, #16]
 800669c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800669e:	2201      	movs	r2, #1
 80066a0:	409a      	lsls	r2, r3
 80066a2:	4b18      	ldr	r3, [pc, #96]	@ (8006704 <xTaskRemoveFromEventList+0xb4>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	4313      	orrs	r3, r2
 80066a8:	4a16      	ldr	r2, [pc, #88]	@ (8006704 <xTaskRemoveFromEventList+0xb4>)
 80066aa:	6013      	str	r3, [r2, #0]
 80066ac:	693b      	ldr	r3, [r7, #16]
 80066ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066b0:	4613      	mov	r3, r2
 80066b2:	009b      	lsls	r3, r3, #2
 80066b4:	4413      	add	r3, r2
 80066b6:	009b      	lsls	r3, r3, #2
 80066b8:	4a13      	ldr	r2, [pc, #76]	@ (8006708 <xTaskRemoveFromEventList+0xb8>)
 80066ba:	441a      	add	r2, r3
 80066bc:	693b      	ldr	r3, [r7, #16]
 80066be:	3304      	adds	r3, #4
 80066c0:	4619      	mov	r1, r3
 80066c2:	4610      	mov	r0, r2
 80066c4:	f7ff f893 	bl	80057ee <vListInsertEnd>
 80066c8:	e005      	b.n	80066d6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80066ca:	693b      	ldr	r3, [r7, #16]
 80066cc:	3318      	adds	r3, #24
 80066ce:	4619      	mov	r1, r3
 80066d0:	480e      	ldr	r0, [pc, #56]	@ (800670c <xTaskRemoveFromEventList+0xbc>)
 80066d2:	f7ff f88c 	bl	80057ee <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066da:	4b0d      	ldr	r3, [pc, #52]	@ (8006710 <xTaskRemoveFromEventList+0xc0>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066e0:	429a      	cmp	r2, r3
 80066e2:	d905      	bls.n	80066f0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80066e4:	2301      	movs	r3, #1
 80066e6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80066e8:	4b0a      	ldr	r3, [pc, #40]	@ (8006714 <xTaskRemoveFromEventList+0xc4>)
 80066ea:	2201      	movs	r2, #1
 80066ec:	601a      	str	r2, [r3, #0]
 80066ee:	e001      	b.n	80066f4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80066f0:	2300      	movs	r3, #0
 80066f2:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80066f4:	697b      	ldr	r3, [r7, #20]
}
 80066f6:	4618      	mov	r0, r3
 80066f8:	3718      	adds	r7, #24
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bd80      	pop	{r7, pc}
 80066fe:	bf00      	nop
 8006700:	20000654 	.word	0x20000654
 8006704:	20000634 	.word	0x20000634
 8006708:	20000530 	.word	0x20000530
 800670c:	200005ec 	.word	0x200005ec
 8006710:	2000052c 	.word	0x2000052c
 8006714:	20000640 	.word	0x20000640

08006718 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b082      	sub	sp, #8
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006720:	f000 f852 	bl	80067c8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006724:	4b06      	ldr	r3, [pc, #24]	@ (8006740 <prvIdleTask+0x28>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	2b01      	cmp	r3, #1
 800672a:	d9f9      	bls.n	8006720 <prvIdleTask+0x8>
			{
				taskYIELD();
 800672c:	4b05      	ldr	r3, [pc, #20]	@ (8006744 <prvIdleTask+0x2c>)
 800672e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006732:	601a      	str	r2, [r3, #0]
 8006734:	f3bf 8f4f 	dsb	sy
 8006738:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800673c:	e7f0      	b.n	8006720 <prvIdleTask+0x8>
 800673e:	bf00      	nop
 8006740:	20000530 	.word	0x20000530
 8006744:	e000ed04 	.word	0xe000ed04

08006748 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b082      	sub	sp, #8
 800674c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800674e:	2300      	movs	r3, #0
 8006750:	607b      	str	r3, [r7, #4]
 8006752:	e00c      	b.n	800676e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006754:	687a      	ldr	r2, [r7, #4]
 8006756:	4613      	mov	r3, r2
 8006758:	009b      	lsls	r3, r3, #2
 800675a:	4413      	add	r3, r2
 800675c:	009b      	lsls	r3, r3, #2
 800675e:	4a12      	ldr	r2, [pc, #72]	@ (80067a8 <prvInitialiseTaskLists+0x60>)
 8006760:	4413      	add	r3, r2
 8006762:	4618      	mov	r0, r3
 8006764:	f7ff f816 	bl	8005794 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	3301      	adds	r3, #1
 800676c:	607b      	str	r3, [r7, #4]
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2b06      	cmp	r3, #6
 8006772:	d9ef      	bls.n	8006754 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006774:	480d      	ldr	r0, [pc, #52]	@ (80067ac <prvInitialiseTaskLists+0x64>)
 8006776:	f7ff f80d 	bl	8005794 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800677a:	480d      	ldr	r0, [pc, #52]	@ (80067b0 <prvInitialiseTaskLists+0x68>)
 800677c:	f7ff f80a 	bl	8005794 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006780:	480c      	ldr	r0, [pc, #48]	@ (80067b4 <prvInitialiseTaskLists+0x6c>)
 8006782:	f7ff f807 	bl	8005794 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006786:	480c      	ldr	r0, [pc, #48]	@ (80067b8 <prvInitialiseTaskLists+0x70>)
 8006788:	f7ff f804 	bl	8005794 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800678c:	480b      	ldr	r0, [pc, #44]	@ (80067bc <prvInitialiseTaskLists+0x74>)
 800678e:	f7ff f801 	bl	8005794 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006792:	4b0b      	ldr	r3, [pc, #44]	@ (80067c0 <prvInitialiseTaskLists+0x78>)
 8006794:	4a05      	ldr	r2, [pc, #20]	@ (80067ac <prvInitialiseTaskLists+0x64>)
 8006796:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006798:	4b0a      	ldr	r3, [pc, #40]	@ (80067c4 <prvInitialiseTaskLists+0x7c>)
 800679a:	4a05      	ldr	r2, [pc, #20]	@ (80067b0 <prvInitialiseTaskLists+0x68>)
 800679c:	601a      	str	r2, [r3, #0]
}
 800679e:	bf00      	nop
 80067a0:	3708      	adds	r7, #8
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd80      	pop	{r7, pc}
 80067a6:	bf00      	nop
 80067a8:	20000530 	.word	0x20000530
 80067ac:	200005bc 	.word	0x200005bc
 80067b0:	200005d0 	.word	0x200005d0
 80067b4:	200005ec 	.word	0x200005ec
 80067b8:	20000600 	.word	0x20000600
 80067bc:	20000618 	.word	0x20000618
 80067c0:	200005e4 	.word	0x200005e4
 80067c4:	200005e8 	.word	0x200005e8

080067c8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b082      	sub	sp, #8
 80067cc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80067ce:	e019      	b.n	8006804 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80067d0:	f000 fa9a 	bl	8006d08 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80067d4:	4b10      	ldr	r3, [pc, #64]	@ (8006818 <prvCheckTasksWaitingTermination+0x50>)
 80067d6:	68db      	ldr	r3, [r3, #12]
 80067d8:	68db      	ldr	r3, [r3, #12]
 80067da:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	3304      	adds	r3, #4
 80067e0:	4618      	mov	r0, r3
 80067e2:	f7ff f861 	bl	80058a8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80067e6:	4b0d      	ldr	r3, [pc, #52]	@ (800681c <prvCheckTasksWaitingTermination+0x54>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	3b01      	subs	r3, #1
 80067ec:	4a0b      	ldr	r2, [pc, #44]	@ (800681c <prvCheckTasksWaitingTermination+0x54>)
 80067ee:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80067f0:	4b0b      	ldr	r3, [pc, #44]	@ (8006820 <prvCheckTasksWaitingTermination+0x58>)
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	3b01      	subs	r3, #1
 80067f6:	4a0a      	ldr	r2, [pc, #40]	@ (8006820 <prvCheckTasksWaitingTermination+0x58>)
 80067f8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80067fa:	f000 fab7 	bl	8006d6c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	f000 f810 	bl	8006824 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006804:	4b06      	ldr	r3, [pc, #24]	@ (8006820 <prvCheckTasksWaitingTermination+0x58>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d1e1      	bne.n	80067d0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800680c:	bf00      	nop
 800680e:	bf00      	nop
 8006810:	3708      	adds	r7, #8
 8006812:	46bd      	mov	sp, r7
 8006814:	bd80      	pop	{r7, pc}
 8006816:	bf00      	nop
 8006818:	20000600 	.word	0x20000600
 800681c:	2000062c 	.word	0x2000062c
 8006820:	20000614 	.word	0x20000614

08006824 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006824:	b580      	push	{r7, lr}
 8006826:	b084      	sub	sp, #16
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006832:	2b00      	cmp	r3, #0
 8006834:	d108      	bne.n	8006848 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800683a:	4618      	mov	r0, r3
 800683c:	f000 fc4e 	bl	80070dc <vPortFree>
				vPortFree( pxTCB );
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	f000 fc4b 	bl	80070dc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006846:	e019      	b.n	800687c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800684e:	2b01      	cmp	r3, #1
 8006850:	d103      	bne.n	800685a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	f000 fc42 	bl	80070dc <vPortFree>
	}
 8006858:	e010      	b.n	800687c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006860:	2b02      	cmp	r3, #2
 8006862:	d00b      	beq.n	800687c <prvDeleteTCB+0x58>
	__asm volatile
 8006864:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006868:	f383 8811 	msr	BASEPRI, r3
 800686c:	f3bf 8f6f 	isb	sy
 8006870:	f3bf 8f4f 	dsb	sy
 8006874:	60fb      	str	r3, [r7, #12]
}
 8006876:	bf00      	nop
 8006878:	bf00      	nop
 800687a:	e7fd      	b.n	8006878 <prvDeleteTCB+0x54>
	}
 800687c:	bf00      	nop
 800687e:	3710      	adds	r7, #16
 8006880:	46bd      	mov	sp, r7
 8006882:	bd80      	pop	{r7, pc}

08006884 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006884:	b480      	push	{r7}
 8006886:	b083      	sub	sp, #12
 8006888:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800688a:	4b0f      	ldr	r3, [pc, #60]	@ (80068c8 <prvResetNextTaskUnblockTime+0x44>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d101      	bne.n	8006898 <prvResetNextTaskUnblockTime+0x14>
 8006894:	2301      	movs	r3, #1
 8006896:	e000      	b.n	800689a <prvResetNextTaskUnblockTime+0x16>
 8006898:	2300      	movs	r3, #0
 800689a:	2b00      	cmp	r3, #0
 800689c:	d004      	beq.n	80068a8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800689e:	4b0b      	ldr	r3, [pc, #44]	@ (80068cc <prvResetNextTaskUnblockTime+0x48>)
 80068a0:	f04f 32ff 	mov.w	r2, #4294967295
 80068a4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80068a6:	e008      	b.n	80068ba <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80068a8:	4b07      	ldr	r3, [pc, #28]	@ (80068c8 <prvResetNextTaskUnblockTime+0x44>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	68db      	ldr	r3, [r3, #12]
 80068ae:	68db      	ldr	r3, [r3, #12]
 80068b0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	685b      	ldr	r3, [r3, #4]
 80068b6:	4a05      	ldr	r2, [pc, #20]	@ (80068cc <prvResetNextTaskUnblockTime+0x48>)
 80068b8:	6013      	str	r3, [r2, #0]
}
 80068ba:	bf00      	nop
 80068bc:	370c      	adds	r7, #12
 80068be:	46bd      	mov	sp, r7
 80068c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c4:	4770      	bx	lr
 80068c6:	bf00      	nop
 80068c8:	200005e4 	.word	0x200005e4
 80068cc:	2000064c 	.word	0x2000064c

080068d0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b086      	sub	sp, #24
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80068dc:	2300      	movs	r3, #0
 80068de:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d070      	beq.n	80069c8 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80068e6:	4b3b      	ldr	r3, [pc, #236]	@ (80069d4 <xTaskPriorityDisinherit+0x104>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	693a      	ldr	r2, [r7, #16]
 80068ec:	429a      	cmp	r2, r3
 80068ee:	d00b      	beq.n	8006908 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80068f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068f4:	f383 8811 	msr	BASEPRI, r3
 80068f8:	f3bf 8f6f 	isb	sy
 80068fc:	f3bf 8f4f 	dsb	sy
 8006900:	60fb      	str	r3, [r7, #12]
}
 8006902:	bf00      	nop
 8006904:	bf00      	nop
 8006906:	e7fd      	b.n	8006904 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006908:	693b      	ldr	r3, [r7, #16]
 800690a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800690c:	2b00      	cmp	r3, #0
 800690e:	d10b      	bne.n	8006928 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006910:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006914:	f383 8811 	msr	BASEPRI, r3
 8006918:	f3bf 8f6f 	isb	sy
 800691c:	f3bf 8f4f 	dsb	sy
 8006920:	60bb      	str	r3, [r7, #8]
}
 8006922:	bf00      	nop
 8006924:	bf00      	nop
 8006926:	e7fd      	b.n	8006924 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006928:	693b      	ldr	r3, [r7, #16]
 800692a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800692c:	1e5a      	subs	r2, r3, #1
 800692e:	693b      	ldr	r3, [r7, #16]
 8006930:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006932:	693b      	ldr	r3, [r7, #16]
 8006934:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800693a:	429a      	cmp	r2, r3
 800693c:	d044      	beq.n	80069c8 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800693e:	693b      	ldr	r3, [r7, #16]
 8006940:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006942:	2b00      	cmp	r3, #0
 8006944:	d140      	bne.n	80069c8 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006946:	693b      	ldr	r3, [r7, #16]
 8006948:	3304      	adds	r3, #4
 800694a:	4618      	mov	r0, r3
 800694c:	f7fe ffac 	bl	80058a8 <uxListRemove>
 8006950:	4603      	mov	r3, r0
 8006952:	2b00      	cmp	r3, #0
 8006954:	d115      	bne.n	8006982 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006956:	693b      	ldr	r3, [r7, #16]
 8006958:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800695a:	491f      	ldr	r1, [pc, #124]	@ (80069d8 <xTaskPriorityDisinherit+0x108>)
 800695c:	4613      	mov	r3, r2
 800695e:	009b      	lsls	r3, r3, #2
 8006960:	4413      	add	r3, r2
 8006962:	009b      	lsls	r3, r3, #2
 8006964:	440b      	add	r3, r1
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d10a      	bne.n	8006982 <xTaskPriorityDisinherit+0xb2>
 800696c:	693b      	ldr	r3, [r7, #16]
 800696e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006970:	2201      	movs	r2, #1
 8006972:	fa02 f303 	lsl.w	r3, r2, r3
 8006976:	43da      	mvns	r2, r3
 8006978:	4b18      	ldr	r3, [pc, #96]	@ (80069dc <xTaskPriorityDisinherit+0x10c>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4013      	ands	r3, r2
 800697e:	4a17      	ldr	r2, [pc, #92]	@ (80069dc <xTaskPriorityDisinherit+0x10c>)
 8006980:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006982:	693b      	ldr	r3, [r7, #16]
 8006984:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006986:	693b      	ldr	r3, [r7, #16]
 8006988:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800698a:	693b      	ldr	r3, [r7, #16]
 800698c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800698e:	f1c3 0207 	rsb	r2, r3, #7
 8006992:	693b      	ldr	r3, [r7, #16]
 8006994:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006996:	693b      	ldr	r3, [r7, #16]
 8006998:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800699a:	2201      	movs	r2, #1
 800699c:	409a      	lsls	r2, r3
 800699e:	4b0f      	ldr	r3, [pc, #60]	@ (80069dc <xTaskPriorityDisinherit+0x10c>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	4313      	orrs	r3, r2
 80069a4:	4a0d      	ldr	r2, [pc, #52]	@ (80069dc <xTaskPriorityDisinherit+0x10c>)
 80069a6:	6013      	str	r3, [r2, #0]
 80069a8:	693b      	ldr	r3, [r7, #16]
 80069aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069ac:	4613      	mov	r3, r2
 80069ae:	009b      	lsls	r3, r3, #2
 80069b0:	4413      	add	r3, r2
 80069b2:	009b      	lsls	r3, r3, #2
 80069b4:	4a08      	ldr	r2, [pc, #32]	@ (80069d8 <xTaskPriorityDisinherit+0x108>)
 80069b6:	441a      	add	r2, r3
 80069b8:	693b      	ldr	r3, [r7, #16]
 80069ba:	3304      	adds	r3, #4
 80069bc:	4619      	mov	r1, r3
 80069be:	4610      	mov	r0, r2
 80069c0:	f7fe ff15 	bl	80057ee <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80069c4:	2301      	movs	r3, #1
 80069c6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80069c8:	697b      	ldr	r3, [r7, #20]
	}
 80069ca:	4618      	mov	r0, r3
 80069cc:	3718      	adds	r7, #24
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bd80      	pop	{r7, pc}
 80069d2:	bf00      	nop
 80069d4:	2000052c 	.word	0x2000052c
 80069d8:	20000530 	.word	0x20000530
 80069dc:	20000634 	.word	0x20000634

080069e0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b084      	sub	sp, #16
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
 80069e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80069ea:	4b29      	ldr	r3, [pc, #164]	@ (8006a90 <prvAddCurrentTaskToDelayedList+0xb0>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80069f0:	4b28      	ldr	r3, [pc, #160]	@ (8006a94 <prvAddCurrentTaskToDelayedList+0xb4>)
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	3304      	adds	r3, #4
 80069f6:	4618      	mov	r0, r3
 80069f8:	f7fe ff56 	bl	80058a8 <uxListRemove>
 80069fc:	4603      	mov	r3, r0
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d10b      	bne.n	8006a1a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8006a02:	4b24      	ldr	r3, [pc, #144]	@ (8006a94 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a08:	2201      	movs	r2, #1
 8006a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8006a0e:	43da      	mvns	r2, r3
 8006a10:	4b21      	ldr	r3, [pc, #132]	@ (8006a98 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4013      	ands	r3, r2
 8006a16:	4a20      	ldr	r2, [pc, #128]	@ (8006a98 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006a18:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a20:	d10a      	bne.n	8006a38 <prvAddCurrentTaskToDelayedList+0x58>
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d007      	beq.n	8006a38 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a28:	4b1a      	ldr	r3, [pc, #104]	@ (8006a94 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	3304      	adds	r3, #4
 8006a2e:	4619      	mov	r1, r3
 8006a30:	481a      	ldr	r0, [pc, #104]	@ (8006a9c <prvAddCurrentTaskToDelayedList+0xbc>)
 8006a32:	f7fe fedc 	bl	80057ee <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006a36:	e026      	b.n	8006a86 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006a38:	68fa      	ldr	r2, [r7, #12]
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	4413      	add	r3, r2
 8006a3e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006a40:	4b14      	ldr	r3, [pc, #80]	@ (8006a94 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	68ba      	ldr	r2, [r7, #8]
 8006a46:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006a48:	68ba      	ldr	r2, [r7, #8]
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	429a      	cmp	r2, r3
 8006a4e:	d209      	bcs.n	8006a64 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a50:	4b13      	ldr	r3, [pc, #76]	@ (8006aa0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006a52:	681a      	ldr	r2, [r3, #0]
 8006a54:	4b0f      	ldr	r3, [pc, #60]	@ (8006a94 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	3304      	adds	r3, #4
 8006a5a:	4619      	mov	r1, r3
 8006a5c:	4610      	mov	r0, r2
 8006a5e:	f7fe feea 	bl	8005836 <vListInsert>
}
 8006a62:	e010      	b.n	8006a86 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a64:	4b0f      	ldr	r3, [pc, #60]	@ (8006aa4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006a66:	681a      	ldr	r2, [r3, #0]
 8006a68:	4b0a      	ldr	r3, [pc, #40]	@ (8006a94 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	3304      	adds	r3, #4
 8006a6e:	4619      	mov	r1, r3
 8006a70:	4610      	mov	r0, r2
 8006a72:	f7fe fee0 	bl	8005836 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006a76:	4b0c      	ldr	r3, [pc, #48]	@ (8006aa8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	68ba      	ldr	r2, [r7, #8]
 8006a7c:	429a      	cmp	r2, r3
 8006a7e:	d202      	bcs.n	8006a86 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006a80:	4a09      	ldr	r2, [pc, #36]	@ (8006aa8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	6013      	str	r3, [r2, #0]
}
 8006a86:	bf00      	nop
 8006a88:	3710      	adds	r7, #16
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bd80      	pop	{r7, pc}
 8006a8e:	bf00      	nop
 8006a90:	20000630 	.word	0x20000630
 8006a94:	2000052c 	.word	0x2000052c
 8006a98:	20000634 	.word	0x20000634
 8006a9c:	20000618 	.word	0x20000618
 8006aa0:	200005e8 	.word	0x200005e8
 8006aa4:	200005e4 	.word	0x200005e4
 8006aa8:	2000064c 	.word	0x2000064c

08006aac <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006aac:	b480      	push	{r7}
 8006aae:	b085      	sub	sp, #20
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	60f8      	str	r0, [r7, #12]
 8006ab4:	60b9      	str	r1, [r7, #8]
 8006ab6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	3b04      	subs	r3, #4
 8006abc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006ac4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	3b04      	subs	r3, #4
 8006aca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	f023 0201 	bic.w	r2, r3, #1
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	3b04      	subs	r3, #4
 8006ada:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006adc:	4a0c      	ldr	r2, [pc, #48]	@ (8006b10 <pxPortInitialiseStack+0x64>)
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	3b14      	subs	r3, #20
 8006ae6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006ae8:	687a      	ldr	r2, [r7, #4]
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	3b04      	subs	r3, #4
 8006af2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	f06f 0202 	mvn.w	r2, #2
 8006afa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	3b20      	subs	r3, #32
 8006b00:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006b02:	68fb      	ldr	r3, [r7, #12]
}
 8006b04:	4618      	mov	r0, r3
 8006b06:	3714      	adds	r7, #20
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0e:	4770      	bx	lr
 8006b10:	08006b15 	.word	0x08006b15

08006b14 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006b14:	b480      	push	{r7}
 8006b16:	b085      	sub	sp, #20
 8006b18:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006b1e:	4b13      	ldr	r3, [pc, #76]	@ (8006b6c <prvTaskExitError+0x58>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b26:	d00b      	beq.n	8006b40 <prvTaskExitError+0x2c>
	__asm volatile
 8006b28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b2c:	f383 8811 	msr	BASEPRI, r3
 8006b30:	f3bf 8f6f 	isb	sy
 8006b34:	f3bf 8f4f 	dsb	sy
 8006b38:	60fb      	str	r3, [r7, #12]
}
 8006b3a:	bf00      	nop
 8006b3c:	bf00      	nop
 8006b3e:	e7fd      	b.n	8006b3c <prvTaskExitError+0x28>
	__asm volatile
 8006b40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b44:	f383 8811 	msr	BASEPRI, r3
 8006b48:	f3bf 8f6f 	isb	sy
 8006b4c:	f3bf 8f4f 	dsb	sy
 8006b50:	60bb      	str	r3, [r7, #8]
}
 8006b52:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006b54:	bf00      	nop
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d0fc      	beq.n	8006b56 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006b5c:	bf00      	nop
 8006b5e:	bf00      	nop
 8006b60:	3714      	adds	r7, #20
 8006b62:	46bd      	mov	sp, r7
 8006b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b68:	4770      	bx	lr
 8006b6a:	bf00      	nop
 8006b6c:	2000000c 	.word	0x2000000c

08006b70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006b70:	4b07      	ldr	r3, [pc, #28]	@ (8006b90 <pxCurrentTCBConst2>)
 8006b72:	6819      	ldr	r1, [r3, #0]
 8006b74:	6808      	ldr	r0, [r1, #0]
 8006b76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b7a:	f380 8809 	msr	PSP, r0
 8006b7e:	f3bf 8f6f 	isb	sy
 8006b82:	f04f 0000 	mov.w	r0, #0
 8006b86:	f380 8811 	msr	BASEPRI, r0
 8006b8a:	4770      	bx	lr
 8006b8c:	f3af 8000 	nop.w

08006b90 <pxCurrentTCBConst2>:
 8006b90:	2000052c 	.word	0x2000052c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006b94:	bf00      	nop
 8006b96:	bf00      	nop

08006b98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006b98:	4808      	ldr	r0, [pc, #32]	@ (8006bbc <prvPortStartFirstTask+0x24>)
 8006b9a:	6800      	ldr	r0, [r0, #0]
 8006b9c:	6800      	ldr	r0, [r0, #0]
 8006b9e:	f380 8808 	msr	MSP, r0
 8006ba2:	f04f 0000 	mov.w	r0, #0
 8006ba6:	f380 8814 	msr	CONTROL, r0
 8006baa:	b662      	cpsie	i
 8006bac:	b661      	cpsie	f
 8006bae:	f3bf 8f4f 	dsb	sy
 8006bb2:	f3bf 8f6f 	isb	sy
 8006bb6:	df00      	svc	0
 8006bb8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006bba:	bf00      	nop
 8006bbc:	e000ed08 	.word	0xe000ed08

08006bc0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b086      	sub	sp, #24
 8006bc4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006bc6:	4b47      	ldr	r3, [pc, #284]	@ (8006ce4 <xPortStartScheduler+0x124>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4a47      	ldr	r2, [pc, #284]	@ (8006ce8 <xPortStartScheduler+0x128>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d10b      	bne.n	8006be8 <xPortStartScheduler+0x28>
	__asm volatile
 8006bd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bd4:	f383 8811 	msr	BASEPRI, r3
 8006bd8:	f3bf 8f6f 	isb	sy
 8006bdc:	f3bf 8f4f 	dsb	sy
 8006be0:	613b      	str	r3, [r7, #16]
}
 8006be2:	bf00      	nop
 8006be4:	bf00      	nop
 8006be6:	e7fd      	b.n	8006be4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006be8:	4b3e      	ldr	r3, [pc, #248]	@ (8006ce4 <xPortStartScheduler+0x124>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4a3f      	ldr	r2, [pc, #252]	@ (8006cec <xPortStartScheduler+0x12c>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d10b      	bne.n	8006c0a <xPortStartScheduler+0x4a>
	__asm volatile
 8006bf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bf6:	f383 8811 	msr	BASEPRI, r3
 8006bfa:	f3bf 8f6f 	isb	sy
 8006bfe:	f3bf 8f4f 	dsb	sy
 8006c02:	60fb      	str	r3, [r7, #12]
}
 8006c04:	bf00      	nop
 8006c06:	bf00      	nop
 8006c08:	e7fd      	b.n	8006c06 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006c0a:	4b39      	ldr	r3, [pc, #228]	@ (8006cf0 <xPortStartScheduler+0x130>)
 8006c0c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006c0e:	697b      	ldr	r3, [r7, #20]
 8006c10:	781b      	ldrb	r3, [r3, #0]
 8006c12:	b2db      	uxtb	r3, r3
 8006c14:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006c16:	697b      	ldr	r3, [r7, #20]
 8006c18:	22ff      	movs	r2, #255	@ 0xff
 8006c1a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006c1c:	697b      	ldr	r3, [r7, #20]
 8006c1e:	781b      	ldrb	r3, [r3, #0]
 8006c20:	b2db      	uxtb	r3, r3
 8006c22:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006c24:	78fb      	ldrb	r3, [r7, #3]
 8006c26:	b2db      	uxtb	r3, r3
 8006c28:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006c2c:	b2da      	uxtb	r2, r3
 8006c2e:	4b31      	ldr	r3, [pc, #196]	@ (8006cf4 <xPortStartScheduler+0x134>)
 8006c30:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006c32:	4b31      	ldr	r3, [pc, #196]	@ (8006cf8 <xPortStartScheduler+0x138>)
 8006c34:	2207      	movs	r2, #7
 8006c36:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006c38:	e009      	b.n	8006c4e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8006c3a:	4b2f      	ldr	r3, [pc, #188]	@ (8006cf8 <xPortStartScheduler+0x138>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	3b01      	subs	r3, #1
 8006c40:	4a2d      	ldr	r2, [pc, #180]	@ (8006cf8 <xPortStartScheduler+0x138>)
 8006c42:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006c44:	78fb      	ldrb	r3, [r7, #3]
 8006c46:	b2db      	uxtb	r3, r3
 8006c48:	005b      	lsls	r3, r3, #1
 8006c4a:	b2db      	uxtb	r3, r3
 8006c4c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006c4e:	78fb      	ldrb	r3, [r7, #3]
 8006c50:	b2db      	uxtb	r3, r3
 8006c52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c56:	2b80      	cmp	r3, #128	@ 0x80
 8006c58:	d0ef      	beq.n	8006c3a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006c5a:	4b27      	ldr	r3, [pc, #156]	@ (8006cf8 <xPortStartScheduler+0x138>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f1c3 0307 	rsb	r3, r3, #7
 8006c62:	2b04      	cmp	r3, #4
 8006c64:	d00b      	beq.n	8006c7e <xPortStartScheduler+0xbe>
	__asm volatile
 8006c66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c6a:	f383 8811 	msr	BASEPRI, r3
 8006c6e:	f3bf 8f6f 	isb	sy
 8006c72:	f3bf 8f4f 	dsb	sy
 8006c76:	60bb      	str	r3, [r7, #8]
}
 8006c78:	bf00      	nop
 8006c7a:	bf00      	nop
 8006c7c:	e7fd      	b.n	8006c7a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006c7e:	4b1e      	ldr	r3, [pc, #120]	@ (8006cf8 <xPortStartScheduler+0x138>)
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	021b      	lsls	r3, r3, #8
 8006c84:	4a1c      	ldr	r2, [pc, #112]	@ (8006cf8 <xPortStartScheduler+0x138>)
 8006c86:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006c88:	4b1b      	ldr	r3, [pc, #108]	@ (8006cf8 <xPortStartScheduler+0x138>)
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006c90:	4a19      	ldr	r2, [pc, #100]	@ (8006cf8 <xPortStartScheduler+0x138>)
 8006c92:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	b2da      	uxtb	r2, r3
 8006c98:	697b      	ldr	r3, [r7, #20]
 8006c9a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006c9c:	4b17      	ldr	r3, [pc, #92]	@ (8006cfc <xPortStartScheduler+0x13c>)
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	4a16      	ldr	r2, [pc, #88]	@ (8006cfc <xPortStartScheduler+0x13c>)
 8006ca2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006ca6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006ca8:	4b14      	ldr	r3, [pc, #80]	@ (8006cfc <xPortStartScheduler+0x13c>)
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4a13      	ldr	r2, [pc, #76]	@ (8006cfc <xPortStartScheduler+0x13c>)
 8006cae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006cb2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006cb4:	f000 f8da 	bl	8006e6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006cb8:	4b11      	ldr	r3, [pc, #68]	@ (8006d00 <xPortStartScheduler+0x140>)
 8006cba:	2200      	movs	r2, #0
 8006cbc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006cbe:	f000 f8f9 	bl	8006eb4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006cc2:	4b10      	ldr	r3, [pc, #64]	@ (8006d04 <xPortStartScheduler+0x144>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4a0f      	ldr	r2, [pc, #60]	@ (8006d04 <xPortStartScheduler+0x144>)
 8006cc8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8006ccc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006cce:	f7ff ff63 	bl	8006b98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006cd2:	f7ff fc61 	bl	8006598 <vTaskSwitchContext>
	prvTaskExitError();
 8006cd6:	f7ff ff1d 	bl	8006b14 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006cda:	2300      	movs	r3, #0
}
 8006cdc:	4618      	mov	r0, r3
 8006cde:	3718      	adds	r7, #24
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bd80      	pop	{r7, pc}
 8006ce4:	e000ed00 	.word	0xe000ed00
 8006ce8:	410fc271 	.word	0x410fc271
 8006cec:	410fc270 	.word	0x410fc270
 8006cf0:	e000e400 	.word	0xe000e400
 8006cf4:	20000658 	.word	0x20000658
 8006cf8:	2000065c 	.word	0x2000065c
 8006cfc:	e000ed20 	.word	0xe000ed20
 8006d00:	2000000c 	.word	0x2000000c
 8006d04:	e000ef34 	.word	0xe000ef34

08006d08 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006d08:	b480      	push	{r7}
 8006d0a:	b083      	sub	sp, #12
 8006d0c:	af00      	add	r7, sp, #0
	__asm volatile
 8006d0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d12:	f383 8811 	msr	BASEPRI, r3
 8006d16:	f3bf 8f6f 	isb	sy
 8006d1a:	f3bf 8f4f 	dsb	sy
 8006d1e:	607b      	str	r3, [r7, #4]
}
 8006d20:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006d22:	4b10      	ldr	r3, [pc, #64]	@ (8006d64 <vPortEnterCritical+0x5c>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	3301      	adds	r3, #1
 8006d28:	4a0e      	ldr	r2, [pc, #56]	@ (8006d64 <vPortEnterCritical+0x5c>)
 8006d2a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006d2c:	4b0d      	ldr	r3, [pc, #52]	@ (8006d64 <vPortEnterCritical+0x5c>)
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	2b01      	cmp	r3, #1
 8006d32:	d110      	bne.n	8006d56 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006d34:	4b0c      	ldr	r3, [pc, #48]	@ (8006d68 <vPortEnterCritical+0x60>)
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	b2db      	uxtb	r3, r3
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d00b      	beq.n	8006d56 <vPortEnterCritical+0x4e>
	__asm volatile
 8006d3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d42:	f383 8811 	msr	BASEPRI, r3
 8006d46:	f3bf 8f6f 	isb	sy
 8006d4a:	f3bf 8f4f 	dsb	sy
 8006d4e:	603b      	str	r3, [r7, #0]
}
 8006d50:	bf00      	nop
 8006d52:	bf00      	nop
 8006d54:	e7fd      	b.n	8006d52 <vPortEnterCritical+0x4a>
	}
}
 8006d56:	bf00      	nop
 8006d58:	370c      	adds	r7, #12
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d60:	4770      	bx	lr
 8006d62:	bf00      	nop
 8006d64:	2000000c 	.word	0x2000000c
 8006d68:	e000ed04 	.word	0xe000ed04

08006d6c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006d6c:	b480      	push	{r7}
 8006d6e:	b083      	sub	sp, #12
 8006d70:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006d72:	4b12      	ldr	r3, [pc, #72]	@ (8006dbc <vPortExitCritical+0x50>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d10b      	bne.n	8006d92 <vPortExitCritical+0x26>
	__asm volatile
 8006d7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d7e:	f383 8811 	msr	BASEPRI, r3
 8006d82:	f3bf 8f6f 	isb	sy
 8006d86:	f3bf 8f4f 	dsb	sy
 8006d8a:	607b      	str	r3, [r7, #4]
}
 8006d8c:	bf00      	nop
 8006d8e:	bf00      	nop
 8006d90:	e7fd      	b.n	8006d8e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006d92:	4b0a      	ldr	r3, [pc, #40]	@ (8006dbc <vPortExitCritical+0x50>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	3b01      	subs	r3, #1
 8006d98:	4a08      	ldr	r2, [pc, #32]	@ (8006dbc <vPortExitCritical+0x50>)
 8006d9a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006d9c:	4b07      	ldr	r3, [pc, #28]	@ (8006dbc <vPortExitCritical+0x50>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d105      	bne.n	8006db0 <vPortExitCritical+0x44>
 8006da4:	2300      	movs	r3, #0
 8006da6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	f383 8811 	msr	BASEPRI, r3
}
 8006dae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006db0:	bf00      	nop
 8006db2:	370c      	adds	r7, #12
 8006db4:	46bd      	mov	sp, r7
 8006db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dba:	4770      	bx	lr
 8006dbc:	2000000c 	.word	0x2000000c

08006dc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006dc0:	f3ef 8009 	mrs	r0, PSP
 8006dc4:	f3bf 8f6f 	isb	sy
 8006dc8:	4b15      	ldr	r3, [pc, #84]	@ (8006e20 <pxCurrentTCBConst>)
 8006dca:	681a      	ldr	r2, [r3, #0]
 8006dcc:	f01e 0f10 	tst.w	lr, #16
 8006dd0:	bf08      	it	eq
 8006dd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006dd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dda:	6010      	str	r0, [r2, #0]
 8006ddc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006de0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006de4:	f380 8811 	msr	BASEPRI, r0
 8006de8:	f3bf 8f4f 	dsb	sy
 8006dec:	f3bf 8f6f 	isb	sy
 8006df0:	f7ff fbd2 	bl	8006598 <vTaskSwitchContext>
 8006df4:	f04f 0000 	mov.w	r0, #0
 8006df8:	f380 8811 	msr	BASEPRI, r0
 8006dfc:	bc09      	pop	{r0, r3}
 8006dfe:	6819      	ldr	r1, [r3, #0]
 8006e00:	6808      	ldr	r0, [r1, #0]
 8006e02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e06:	f01e 0f10 	tst.w	lr, #16
 8006e0a:	bf08      	it	eq
 8006e0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006e10:	f380 8809 	msr	PSP, r0
 8006e14:	f3bf 8f6f 	isb	sy
 8006e18:	4770      	bx	lr
 8006e1a:	bf00      	nop
 8006e1c:	f3af 8000 	nop.w

08006e20 <pxCurrentTCBConst>:
 8006e20:	2000052c 	.word	0x2000052c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006e24:	bf00      	nop
 8006e26:	bf00      	nop

08006e28 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b082      	sub	sp, #8
 8006e2c:	af00      	add	r7, sp, #0
	__asm volatile
 8006e2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e32:	f383 8811 	msr	BASEPRI, r3
 8006e36:	f3bf 8f6f 	isb	sy
 8006e3a:	f3bf 8f4f 	dsb	sy
 8006e3e:	607b      	str	r3, [r7, #4]
}
 8006e40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006e42:	f7ff faeb 	bl	800641c <xTaskIncrementTick>
 8006e46:	4603      	mov	r3, r0
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d003      	beq.n	8006e54 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006e4c:	4b06      	ldr	r3, [pc, #24]	@ (8006e68 <SysTick_Handler+0x40>)
 8006e4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e52:	601a      	str	r2, [r3, #0]
 8006e54:	2300      	movs	r3, #0
 8006e56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	f383 8811 	msr	BASEPRI, r3
}
 8006e5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006e60:	bf00      	nop
 8006e62:	3708      	adds	r7, #8
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bd80      	pop	{r7, pc}
 8006e68:	e000ed04 	.word	0xe000ed04

08006e6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006e6c:	b480      	push	{r7}
 8006e6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006e70:	4b0b      	ldr	r3, [pc, #44]	@ (8006ea0 <vPortSetupTimerInterrupt+0x34>)
 8006e72:	2200      	movs	r2, #0
 8006e74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006e76:	4b0b      	ldr	r3, [pc, #44]	@ (8006ea4 <vPortSetupTimerInterrupt+0x38>)
 8006e78:	2200      	movs	r2, #0
 8006e7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006e7c:	4b0a      	ldr	r3, [pc, #40]	@ (8006ea8 <vPortSetupTimerInterrupt+0x3c>)
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4a0a      	ldr	r2, [pc, #40]	@ (8006eac <vPortSetupTimerInterrupt+0x40>)
 8006e82:	fba2 2303 	umull	r2, r3, r2, r3
 8006e86:	099b      	lsrs	r3, r3, #6
 8006e88:	4a09      	ldr	r2, [pc, #36]	@ (8006eb0 <vPortSetupTimerInterrupt+0x44>)
 8006e8a:	3b01      	subs	r3, #1
 8006e8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006e8e:	4b04      	ldr	r3, [pc, #16]	@ (8006ea0 <vPortSetupTimerInterrupt+0x34>)
 8006e90:	2207      	movs	r2, #7
 8006e92:	601a      	str	r2, [r3, #0]
}
 8006e94:	bf00      	nop
 8006e96:	46bd      	mov	sp, r7
 8006e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9c:	4770      	bx	lr
 8006e9e:	bf00      	nop
 8006ea0:	e000e010 	.word	0xe000e010
 8006ea4:	e000e018 	.word	0xe000e018
 8006ea8:	20000000 	.word	0x20000000
 8006eac:	10624dd3 	.word	0x10624dd3
 8006eb0:	e000e014 	.word	0xe000e014

08006eb4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006eb4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006ec4 <vPortEnableVFP+0x10>
 8006eb8:	6801      	ldr	r1, [r0, #0]
 8006eba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8006ebe:	6001      	str	r1, [r0, #0]
 8006ec0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006ec2:	bf00      	nop
 8006ec4:	e000ed88 	.word	0xe000ed88

08006ec8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006ec8:	b480      	push	{r7}
 8006eca:	b085      	sub	sp, #20
 8006ecc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006ece:	f3ef 8305 	mrs	r3, IPSR
 8006ed2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	2b0f      	cmp	r3, #15
 8006ed8:	d915      	bls.n	8006f06 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006eda:	4a18      	ldr	r2, [pc, #96]	@ (8006f3c <vPortValidateInterruptPriority+0x74>)
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	4413      	add	r3, r2
 8006ee0:	781b      	ldrb	r3, [r3, #0]
 8006ee2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006ee4:	4b16      	ldr	r3, [pc, #88]	@ (8006f40 <vPortValidateInterruptPriority+0x78>)
 8006ee6:	781b      	ldrb	r3, [r3, #0]
 8006ee8:	7afa      	ldrb	r2, [r7, #11]
 8006eea:	429a      	cmp	r2, r3
 8006eec:	d20b      	bcs.n	8006f06 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8006eee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ef2:	f383 8811 	msr	BASEPRI, r3
 8006ef6:	f3bf 8f6f 	isb	sy
 8006efa:	f3bf 8f4f 	dsb	sy
 8006efe:	607b      	str	r3, [r7, #4]
}
 8006f00:	bf00      	nop
 8006f02:	bf00      	nop
 8006f04:	e7fd      	b.n	8006f02 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006f06:	4b0f      	ldr	r3, [pc, #60]	@ (8006f44 <vPortValidateInterruptPriority+0x7c>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006f0e:	4b0e      	ldr	r3, [pc, #56]	@ (8006f48 <vPortValidateInterruptPriority+0x80>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	429a      	cmp	r2, r3
 8006f14:	d90b      	bls.n	8006f2e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006f16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f1a:	f383 8811 	msr	BASEPRI, r3
 8006f1e:	f3bf 8f6f 	isb	sy
 8006f22:	f3bf 8f4f 	dsb	sy
 8006f26:	603b      	str	r3, [r7, #0]
}
 8006f28:	bf00      	nop
 8006f2a:	bf00      	nop
 8006f2c:	e7fd      	b.n	8006f2a <vPortValidateInterruptPriority+0x62>
	}
 8006f2e:	bf00      	nop
 8006f30:	3714      	adds	r7, #20
 8006f32:	46bd      	mov	sp, r7
 8006f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f38:	4770      	bx	lr
 8006f3a:	bf00      	nop
 8006f3c:	e000e3f0 	.word	0xe000e3f0
 8006f40:	20000658 	.word	0x20000658
 8006f44:	e000ed0c 	.word	0xe000ed0c
 8006f48:	2000065c 	.word	0x2000065c

08006f4c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b08a      	sub	sp, #40	@ 0x28
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006f54:	2300      	movs	r3, #0
 8006f56:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006f58:	f7ff f9b4 	bl	80062c4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006f5c:	4b5a      	ldr	r3, [pc, #360]	@ (80070c8 <pvPortMalloc+0x17c>)
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d101      	bne.n	8006f68 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006f64:	f000 f916 	bl	8007194 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006f68:	4b58      	ldr	r3, [pc, #352]	@ (80070cc <pvPortMalloc+0x180>)
 8006f6a:	681a      	ldr	r2, [r3, #0]
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	4013      	ands	r3, r2
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	f040 8090 	bne.w	8007096 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d01e      	beq.n	8006fba <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006f7c:	2208      	movs	r2, #8
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	4413      	add	r3, r2
 8006f82:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	f003 0307 	and.w	r3, r3, #7
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d015      	beq.n	8006fba <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	f023 0307 	bic.w	r3, r3, #7
 8006f94:	3308      	adds	r3, #8
 8006f96:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	f003 0307 	and.w	r3, r3, #7
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d00b      	beq.n	8006fba <pvPortMalloc+0x6e>
	__asm volatile
 8006fa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fa6:	f383 8811 	msr	BASEPRI, r3
 8006faa:	f3bf 8f6f 	isb	sy
 8006fae:	f3bf 8f4f 	dsb	sy
 8006fb2:	617b      	str	r3, [r7, #20]
}
 8006fb4:	bf00      	nop
 8006fb6:	bf00      	nop
 8006fb8:	e7fd      	b.n	8006fb6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d06a      	beq.n	8007096 <pvPortMalloc+0x14a>
 8006fc0:	4b43      	ldr	r3, [pc, #268]	@ (80070d0 <pvPortMalloc+0x184>)
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	687a      	ldr	r2, [r7, #4]
 8006fc6:	429a      	cmp	r2, r3
 8006fc8:	d865      	bhi.n	8007096 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006fca:	4b42      	ldr	r3, [pc, #264]	@ (80070d4 <pvPortMalloc+0x188>)
 8006fcc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006fce:	4b41      	ldr	r3, [pc, #260]	@ (80070d4 <pvPortMalloc+0x188>)
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006fd4:	e004      	b.n	8006fe0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fd8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fe2:	685b      	ldr	r3, [r3, #4]
 8006fe4:	687a      	ldr	r2, [r7, #4]
 8006fe6:	429a      	cmp	r2, r3
 8006fe8:	d903      	bls.n	8006ff2 <pvPortMalloc+0xa6>
 8006fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d1f1      	bne.n	8006fd6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006ff2:	4b35      	ldr	r3, [pc, #212]	@ (80070c8 <pvPortMalloc+0x17c>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ff8:	429a      	cmp	r2, r3
 8006ffa:	d04c      	beq.n	8007096 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006ffc:	6a3b      	ldr	r3, [r7, #32]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	2208      	movs	r2, #8
 8007002:	4413      	add	r3, r2
 8007004:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007008:	681a      	ldr	r2, [r3, #0]
 800700a:	6a3b      	ldr	r3, [r7, #32]
 800700c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800700e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007010:	685a      	ldr	r2, [r3, #4]
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	1ad2      	subs	r2, r2, r3
 8007016:	2308      	movs	r3, #8
 8007018:	005b      	lsls	r3, r3, #1
 800701a:	429a      	cmp	r2, r3
 800701c:	d920      	bls.n	8007060 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800701e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	4413      	add	r3, r2
 8007024:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007026:	69bb      	ldr	r3, [r7, #24]
 8007028:	f003 0307 	and.w	r3, r3, #7
 800702c:	2b00      	cmp	r3, #0
 800702e:	d00b      	beq.n	8007048 <pvPortMalloc+0xfc>
	__asm volatile
 8007030:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007034:	f383 8811 	msr	BASEPRI, r3
 8007038:	f3bf 8f6f 	isb	sy
 800703c:	f3bf 8f4f 	dsb	sy
 8007040:	613b      	str	r3, [r7, #16]
}
 8007042:	bf00      	nop
 8007044:	bf00      	nop
 8007046:	e7fd      	b.n	8007044 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800704a:	685a      	ldr	r2, [r3, #4]
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	1ad2      	subs	r2, r2, r3
 8007050:	69bb      	ldr	r3, [r7, #24]
 8007052:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007056:	687a      	ldr	r2, [r7, #4]
 8007058:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800705a:	69b8      	ldr	r0, [r7, #24]
 800705c:	f000 f8fc 	bl	8007258 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007060:	4b1b      	ldr	r3, [pc, #108]	@ (80070d0 <pvPortMalloc+0x184>)
 8007062:	681a      	ldr	r2, [r3, #0]
 8007064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007066:	685b      	ldr	r3, [r3, #4]
 8007068:	1ad3      	subs	r3, r2, r3
 800706a:	4a19      	ldr	r2, [pc, #100]	@ (80070d0 <pvPortMalloc+0x184>)
 800706c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800706e:	4b18      	ldr	r3, [pc, #96]	@ (80070d0 <pvPortMalloc+0x184>)
 8007070:	681a      	ldr	r2, [r3, #0]
 8007072:	4b19      	ldr	r3, [pc, #100]	@ (80070d8 <pvPortMalloc+0x18c>)
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	429a      	cmp	r2, r3
 8007078:	d203      	bcs.n	8007082 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800707a:	4b15      	ldr	r3, [pc, #84]	@ (80070d0 <pvPortMalloc+0x184>)
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	4a16      	ldr	r2, [pc, #88]	@ (80070d8 <pvPortMalloc+0x18c>)
 8007080:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007084:	685a      	ldr	r2, [r3, #4]
 8007086:	4b11      	ldr	r3, [pc, #68]	@ (80070cc <pvPortMalloc+0x180>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	431a      	orrs	r2, r3
 800708c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800708e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007092:	2200      	movs	r2, #0
 8007094:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007096:	f7ff f923 	bl	80062e0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800709a:	69fb      	ldr	r3, [r7, #28]
 800709c:	f003 0307 	and.w	r3, r3, #7
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d00b      	beq.n	80070bc <pvPortMalloc+0x170>
	__asm volatile
 80070a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070a8:	f383 8811 	msr	BASEPRI, r3
 80070ac:	f3bf 8f6f 	isb	sy
 80070b0:	f3bf 8f4f 	dsb	sy
 80070b4:	60fb      	str	r3, [r7, #12]
}
 80070b6:	bf00      	nop
 80070b8:	bf00      	nop
 80070ba:	e7fd      	b.n	80070b8 <pvPortMalloc+0x16c>
	return pvReturn;
 80070bc:	69fb      	ldr	r3, [r7, #28]
}
 80070be:	4618      	mov	r0, r3
 80070c0:	3728      	adds	r7, #40	@ 0x28
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bd80      	pop	{r7, pc}
 80070c6:	bf00      	nop
 80070c8:	20002e68 	.word	0x20002e68
 80070cc:	20002e74 	.word	0x20002e74
 80070d0:	20002e6c 	.word	0x20002e6c
 80070d4:	20002e60 	.word	0x20002e60
 80070d8:	20002e70 	.word	0x20002e70

080070dc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b086      	sub	sp, #24
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d04a      	beq.n	8007184 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80070ee:	2308      	movs	r3, #8
 80070f0:	425b      	negs	r3, r3
 80070f2:	697a      	ldr	r2, [r7, #20]
 80070f4:	4413      	add	r3, r2
 80070f6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80070f8:	697b      	ldr	r3, [r7, #20]
 80070fa:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80070fc:	693b      	ldr	r3, [r7, #16]
 80070fe:	685a      	ldr	r2, [r3, #4]
 8007100:	4b22      	ldr	r3, [pc, #136]	@ (800718c <vPortFree+0xb0>)
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	4013      	ands	r3, r2
 8007106:	2b00      	cmp	r3, #0
 8007108:	d10b      	bne.n	8007122 <vPortFree+0x46>
	__asm volatile
 800710a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800710e:	f383 8811 	msr	BASEPRI, r3
 8007112:	f3bf 8f6f 	isb	sy
 8007116:	f3bf 8f4f 	dsb	sy
 800711a:	60fb      	str	r3, [r7, #12]
}
 800711c:	bf00      	nop
 800711e:	bf00      	nop
 8007120:	e7fd      	b.n	800711e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007122:	693b      	ldr	r3, [r7, #16]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d00b      	beq.n	8007142 <vPortFree+0x66>
	__asm volatile
 800712a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800712e:	f383 8811 	msr	BASEPRI, r3
 8007132:	f3bf 8f6f 	isb	sy
 8007136:	f3bf 8f4f 	dsb	sy
 800713a:	60bb      	str	r3, [r7, #8]
}
 800713c:	bf00      	nop
 800713e:	bf00      	nop
 8007140:	e7fd      	b.n	800713e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007142:	693b      	ldr	r3, [r7, #16]
 8007144:	685a      	ldr	r2, [r3, #4]
 8007146:	4b11      	ldr	r3, [pc, #68]	@ (800718c <vPortFree+0xb0>)
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	4013      	ands	r3, r2
 800714c:	2b00      	cmp	r3, #0
 800714e:	d019      	beq.n	8007184 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007150:	693b      	ldr	r3, [r7, #16]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d115      	bne.n	8007184 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007158:	693b      	ldr	r3, [r7, #16]
 800715a:	685a      	ldr	r2, [r3, #4]
 800715c:	4b0b      	ldr	r3, [pc, #44]	@ (800718c <vPortFree+0xb0>)
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	43db      	mvns	r3, r3
 8007162:	401a      	ands	r2, r3
 8007164:	693b      	ldr	r3, [r7, #16]
 8007166:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007168:	f7ff f8ac 	bl	80062c4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800716c:	693b      	ldr	r3, [r7, #16]
 800716e:	685a      	ldr	r2, [r3, #4]
 8007170:	4b07      	ldr	r3, [pc, #28]	@ (8007190 <vPortFree+0xb4>)
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4413      	add	r3, r2
 8007176:	4a06      	ldr	r2, [pc, #24]	@ (8007190 <vPortFree+0xb4>)
 8007178:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800717a:	6938      	ldr	r0, [r7, #16]
 800717c:	f000 f86c 	bl	8007258 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007180:	f7ff f8ae 	bl	80062e0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007184:	bf00      	nop
 8007186:	3718      	adds	r7, #24
 8007188:	46bd      	mov	sp, r7
 800718a:	bd80      	pop	{r7, pc}
 800718c:	20002e74 	.word	0x20002e74
 8007190:	20002e6c 	.word	0x20002e6c

08007194 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007194:	b480      	push	{r7}
 8007196:	b085      	sub	sp, #20
 8007198:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800719a:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800719e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80071a0:	4b27      	ldr	r3, [pc, #156]	@ (8007240 <prvHeapInit+0xac>)
 80071a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	f003 0307 	and.w	r3, r3, #7
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d00c      	beq.n	80071c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	3307      	adds	r3, #7
 80071b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	f023 0307 	bic.w	r3, r3, #7
 80071ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80071bc:	68ba      	ldr	r2, [r7, #8]
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	1ad3      	subs	r3, r2, r3
 80071c2:	4a1f      	ldr	r2, [pc, #124]	@ (8007240 <prvHeapInit+0xac>)
 80071c4:	4413      	add	r3, r2
 80071c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80071cc:	4a1d      	ldr	r2, [pc, #116]	@ (8007244 <prvHeapInit+0xb0>)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80071d2:	4b1c      	ldr	r3, [pc, #112]	@ (8007244 <prvHeapInit+0xb0>)
 80071d4:	2200      	movs	r2, #0
 80071d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	68ba      	ldr	r2, [r7, #8]
 80071dc:	4413      	add	r3, r2
 80071de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80071e0:	2208      	movs	r2, #8
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	1a9b      	subs	r3, r3, r2
 80071e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	f023 0307 	bic.w	r3, r3, #7
 80071ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	4a15      	ldr	r2, [pc, #84]	@ (8007248 <prvHeapInit+0xb4>)
 80071f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80071f6:	4b14      	ldr	r3, [pc, #80]	@ (8007248 <prvHeapInit+0xb4>)
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	2200      	movs	r2, #0
 80071fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80071fe:	4b12      	ldr	r3, [pc, #72]	@ (8007248 <prvHeapInit+0xb4>)
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	2200      	movs	r2, #0
 8007204:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	68fa      	ldr	r2, [r7, #12]
 800720e:	1ad2      	subs	r2, r2, r3
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007214:	4b0c      	ldr	r3, [pc, #48]	@ (8007248 <prvHeapInit+0xb4>)
 8007216:	681a      	ldr	r2, [r3, #0]
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	685b      	ldr	r3, [r3, #4]
 8007220:	4a0a      	ldr	r2, [pc, #40]	@ (800724c <prvHeapInit+0xb8>)
 8007222:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	685b      	ldr	r3, [r3, #4]
 8007228:	4a09      	ldr	r2, [pc, #36]	@ (8007250 <prvHeapInit+0xbc>)
 800722a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800722c:	4b09      	ldr	r3, [pc, #36]	@ (8007254 <prvHeapInit+0xc0>)
 800722e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007232:	601a      	str	r2, [r3, #0]
}
 8007234:	bf00      	nop
 8007236:	3714      	adds	r7, #20
 8007238:	46bd      	mov	sp, r7
 800723a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723e:	4770      	bx	lr
 8007240:	20000660 	.word	0x20000660
 8007244:	20002e60 	.word	0x20002e60
 8007248:	20002e68 	.word	0x20002e68
 800724c:	20002e70 	.word	0x20002e70
 8007250:	20002e6c 	.word	0x20002e6c
 8007254:	20002e74 	.word	0x20002e74

08007258 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007258:	b480      	push	{r7}
 800725a:	b085      	sub	sp, #20
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007260:	4b28      	ldr	r3, [pc, #160]	@ (8007304 <prvInsertBlockIntoFreeList+0xac>)
 8007262:	60fb      	str	r3, [r7, #12]
 8007264:	e002      	b.n	800726c <prvInsertBlockIntoFreeList+0x14>
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	60fb      	str	r3, [r7, #12]
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	687a      	ldr	r2, [r7, #4]
 8007272:	429a      	cmp	r2, r3
 8007274:	d8f7      	bhi.n	8007266 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	685b      	ldr	r3, [r3, #4]
 800727e:	68ba      	ldr	r2, [r7, #8]
 8007280:	4413      	add	r3, r2
 8007282:	687a      	ldr	r2, [r7, #4]
 8007284:	429a      	cmp	r2, r3
 8007286:	d108      	bne.n	800729a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	685a      	ldr	r2, [r3, #4]
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	685b      	ldr	r3, [r3, #4]
 8007290:	441a      	add	r2, r3
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	685b      	ldr	r3, [r3, #4]
 80072a2:	68ba      	ldr	r2, [r7, #8]
 80072a4:	441a      	add	r2, r3
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	429a      	cmp	r2, r3
 80072ac:	d118      	bne.n	80072e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681a      	ldr	r2, [r3, #0]
 80072b2:	4b15      	ldr	r3, [pc, #84]	@ (8007308 <prvInsertBlockIntoFreeList+0xb0>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	429a      	cmp	r2, r3
 80072b8:	d00d      	beq.n	80072d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	685a      	ldr	r2, [r3, #4]
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	685b      	ldr	r3, [r3, #4]
 80072c4:	441a      	add	r2, r3
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	681a      	ldr	r2, [r3, #0]
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	601a      	str	r2, [r3, #0]
 80072d4:	e008      	b.n	80072e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80072d6:	4b0c      	ldr	r3, [pc, #48]	@ (8007308 <prvInsertBlockIntoFreeList+0xb0>)
 80072d8:	681a      	ldr	r2, [r3, #0]
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	601a      	str	r2, [r3, #0]
 80072de:	e003      	b.n	80072e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	681a      	ldr	r2, [r3, #0]
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80072e8:	68fa      	ldr	r2, [r7, #12]
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	429a      	cmp	r2, r3
 80072ee:	d002      	beq.n	80072f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	687a      	ldr	r2, [r7, #4]
 80072f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80072f6:	bf00      	nop
 80072f8:	3714      	adds	r7, #20
 80072fa:	46bd      	mov	sp, r7
 80072fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007300:	4770      	bx	lr
 8007302:	bf00      	nop
 8007304:	20002e60 	.word	0x20002e60
 8007308:	20002e68 	.word	0x20002e68

0800730c <sniprintf>:
 800730c:	b40c      	push	{r2, r3}
 800730e:	b530      	push	{r4, r5, lr}
 8007310:	4b17      	ldr	r3, [pc, #92]	@ (8007370 <sniprintf+0x64>)
 8007312:	1e0c      	subs	r4, r1, #0
 8007314:	681d      	ldr	r5, [r3, #0]
 8007316:	b09d      	sub	sp, #116	@ 0x74
 8007318:	da08      	bge.n	800732c <sniprintf+0x20>
 800731a:	238b      	movs	r3, #139	@ 0x8b
 800731c:	602b      	str	r3, [r5, #0]
 800731e:	f04f 30ff 	mov.w	r0, #4294967295
 8007322:	b01d      	add	sp, #116	@ 0x74
 8007324:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007328:	b002      	add	sp, #8
 800732a:	4770      	bx	lr
 800732c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007330:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007334:	bf14      	ite	ne
 8007336:	f104 33ff 	addne.w	r3, r4, #4294967295
 800733a:	4623      	moveq	r3, r4
 800733c:	9304      	str	r3, [sp, #16]
 800733e:	9307      	str	r3, [sp, #28]
 8007340:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007344:	9002      	str	r0, [sp, #8]
 8007346:	9006      	str	r0, [sp, #24]
 8007348:	f8ad 3016 	strh.w	r3, [sp, #22]
 800734c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800734e:	ab21      	add	r3, sp, #132	@ 0x84
 8007350:	a902      	add	r1, sp, #8
 8007352:	4628      	mov	r0, r5
 8007354:	9301      	str	r3, [sp, #4]
 8007356:	f000 f9a3 	bl	80076a0 <_svfiprintf_r>
 800735a:	1c43      	adds	r3, r0, #1
 800735c:	bfbc      	itt	lt
 800735e:	238b      	movlt	r3, #139	@ 0x8b
 8007360:	602b      	strlt	r3, [r5, #0]
 8007362:	2c00      	cmp	r4, #0
 8007364:	d0dd      	beq.n	8007322 <sniprintf+0x16>
 8007366:	9b02      	ldr	r3, [sp, #8]
 8007368:	2200      	movs	r2, #0
 800736a:	701a      	strb	r2, [r3, #0]
 800736c:	e7d9      	b.n	8007322 <sniprintf+0x16>
 800736e:	bf00      	nop
 8007370:	20000010 	.word	0x20000010

08007374 <memset>:
 8007374:	4402      	add	r2, r0
 8007376:	4603      	mov	r3, r0
 8007378:	4293      	cmp	r3, r2
 800737a:	d100      	bne.n	800737e <memset+0xa>
 800737c:	4770      	bx	lr
 800737e:	f803 1b01 	strb.w	r1, [r3], #1
 8007382:	e7f9      	b.n	8007378 <memset+0x4>

08007384 <__errno>:
 8007384:	4b01      	ldr	r3, [pc, #4]	@ (800738c <__errno+0x8>)
 8007386:	6818      	ldr	r0, [r3, #0]
 8007388:	4770      	bx	lr
 800738a:	bf00      	nop
 800738c:	20000010 	.word	0x20000010

08007390 <__libc_init_array>:
 8007390:	b570      	push	{r4, r5, r6, lr}
 8007392:	4d0d      	ldr	r5, [pc, #52]	@ (80073c8 <__libc_init_array+0x38>)
 8007394:	4c0d      	ldr	r4, [pc, #52]	@ (80073cc <__libc_init_array+0x3c>)
 8007396:	1b64      	subs	r4, r4, r5
 8007398:	10a4      	asrs	r4, r4, #2
 800739a:	2600      	movs	r6, #0
 800739c:	42a6      	cmp	r6, r4
 800739e:	d109      	bne.n	80073b4 <__libc_init_array+0x24>
 80073a0:	4d0b      	ldr	r5, [pc, #44]	@ (80073d0 <__libc_init_array+0x40>)
 80073a2:	4c0c      	ldr	r4, [pc, #48]	@ (80073d4 <__libc_init_array+0x44>)
 80073a4:	f000 fc66 	bl	8007c74 <_init>
 80073a8:	1b64      	subs	r4, r4, r5
 80073aa:	10a4      	asrs	r4, r4, #2
 80073ac:	2600      	movs	r6, #0
 80073ae:	42a6      	cmp	r6, r4
 80073b0:	d105      	bne.n	80073be <__libc_init_array+0x2e>
 80073b2:	bd70      	pop	{r4, r5, r6, pc}
 80073b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80073b8:	4798      	blx	r3
 80073ba:	3601      	adds	r6, #1
 80073bc:	e7ee      	b.n	800739c <__libc_init_array+0xc>
 80073be:	f855 3b04 	ldr.w	r3, [r5], #4
 80073c2:	4798      	blx	r3
 80073c4:	3601      	adds	r6, #1
 80073c6:	e7f2      	b.n	80073ae <__libc_init_array+0x1e>
 80073c8:	08007d98 	.word	0x08007d98
 80073cc:	08007d98 	.word	0x08007d98
 80073d0:	08007d98 	.word	0x08007d98
 80073d4:	08007d9c 	.word	0x08007d9c

080073d8 <__retarget_lock_acquire_recursive>:
 80073d8:	4770      	bx	lr

080073da <__retarget_lock_release_recursive>:
 80073da:	4770      	bx	lr

080073dc <memcpy>:
 80073dc:	440a      	add	r2, r1
 80073de:	4291      	cmp	r1, r2
 80073e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80073e4:	d100      	bne.n	80073e8 <memcpy+0xc>
 80073e6:	4770      	bx	lr
 80073e8:	b510      	push	{r4, lr}
 80073ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80073ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80073f2:	4291      	cmp	r1, r2
 80073f4:	d1f9      	bne.n	80073ea <memcpy+0xe>
 80073f6:	bd10      	pop	{r4, pc}

080073f8 <_free_r>:
 80073f8:	b538      	push	{r3, r4, r5, lr}
 80073fa:	4605      	mov	r5, r0
 80073fc:	2900      	cmp	r1, #0
 80073fe:	d041      	beq.n	8007484 <_free_r+0x8c>
 8007400:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007404:	1f0c      	subs	r4, r1, #4
 8007406:	2b00      	cmp	r3, #0
 8007408:	bfb8      	it	lt
 800740a:	18e4      	addlt	r4, r4, r3
 800740c:	f000 f8e0 	bl	80075d0 <__malloc_lock>
 8007410:	4a1d      	ldr	r2, [pc, #116]	@ (8007488 <_free_r+0x90>)
 8007412:	6813      	ldr	r3, [r2, #0]
 8007414:	b933      	cbnz	r3, 8007424 <_free_r+0x2c>
 8007416:	6063      	str	r3, [r4, #4]
 8007418:	6014      	str	r4, [r2, #0]
 800741a:	4628      	mov	r0, r5
 800741c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007420:	f000 b8dc 	b.w	80075dc <__malloc_unlock>
 8007424:	42a3      	cmp	r3, r4
 8007426:	d908      	bls.n	800743a <_free_r+0x42>
 8007428:	6820      	ldr	r0, [r4, #0]
 800742a:	1821      	adds	r1, r4, r0
 800742c:	428b      	cmp	r3, r1
 800742e:	bf01      	itttt	eq
 8007430:	6819      	ldreq	r1, [r3, #0]
 8007432:	685b      	ldreq	r3, [r3, #4]
 8007434:	1809      	addeq	r1, r1, r0
 8007436:	6021      	streq	r1, [r4, #0]
 8007438:	e7ed      	b.n	8007416 <_free_r+0x1e>
 800743a:	461a      	mov	r2, r3
 800743c:	685b      	ldr	r3, [r3, #4]
 800743e:	b10b      	cbz	r3, 8007444 <_free_r+0x4c>
 8007440:	42a3      	cmp	r3, r4
 8007442:	d9fa      	bls.n	800743a <_free_r+0x42>
 8007444:	6811      	ldr	r1, [r2, #0]
 8007446:	1850      	adds	r0, r2, r1
 8007448:	42a0      	cmp	r0, r4
 800744a:	d10b      	bne.n	8007464 <_free_r+0x6c>
 800744c:	6820      	ldr	r0, [r4, #0]
 800744e:	4401      	add	r1, r0
 8007450:	1850      	adds	r0, r2, r1
 8007452:	4283      	cmp	r3, r0
 8007454:	6011      	str	r1, [r2, #0]
 8007456:	d1e0      	bne.n	800741a <_free_r+0x22>
 8007458:	6818      	ldr	r0, [r3, #0]
 800745a:	685b      	ldr	r3, [r3, #4]
 800745c:	6053      	str	r3, [r2, #4]
 800745e:	4408      	add	r0, r1
 8007460:	6010      	str	r0, [r2, #0]
 8007462:	e7da      	b.n	800741a <_free_r+0x22>
 8007464:	d902      	bls.n	800746c <_free_r+0x74>
 8007466:	230c      	movs	r3, #12
 8007468:	602b      	str	r3, [r5, #0]
 800746a:	e7d6      	b.n	800741a <_free_r+0x22>
 800746c:	6820      	ldr	r0, [r4, #0]
 800746e:	1821      	adds	r1, r4, r0
 8007470:	428b      	cmp	r3, r1
 8007472:	bf04      	itt	eq
 8007474:	6819      	ldreq	r1, [r3, #0]
 8007476:	685b      	ldreq	r3, [r3, #4]
 8007478:	6063      	str	r3, [r4, #4]
 800747a:	bf04      	itt	eq
 800747c:	1809      	addeq	r1, r1, r0
 800747e:	6021      	streq	r1, [r4, #0]
 8007480:	6054      	str	r4, [r2, #4]
 8007482:	e7ca      	b.n	800741a <_free_r+0x22>
 8007484:	bd38      	pop	{r3, r4, r5, pc}
 8007486:	bf00      	nop
 8007488:	20002fbc 	.word	0x20002fbc

0800748c <sbrk_aligned>:
 800748c:	b570      	push	{r4, r5, r6, lr}
 800748e:	4e0f      	ldr	r6, [pc, #60]	@ (80074cc <sbrk_aligned+0x40>)
 8007490:	460c      	mov	r4, r1
 8007492:	6831      	ldr	r1, [r6, #0]
 8007494:	4605      	mov	r5, r0
 8007496:	b911      	cbnz	r1, 800749e <sbrk_aligned+0x12>
 8007498:	f000 fba6 	bl	8007be8 <_sbrk_r>
 800749c:	6030      	str	r0, [r6, #0]
 800749e:	4621      	mov	r1, r4
 80074a0:	4628      	mov	r0, r5
 80074a2:	f000 fba1 	bl	8007be8 <_sbrk_r>
 80074a6:	1c43      	adds	r3, r0, #1
 80074a8:	d103      	bne.n	80074b2 <sbrk_aligned+0x26>
 80074aa:	f04f 34ff 	mov.w	r4, #4294967295
 80074ae:	4620      	mov	r0, r4
 80074b0:	bd70      	pop	{r4, r5, r6, pc}
 80074b2:	1cc4      	adds	r4, r0, #3
 80074b4:	f024 0403 	bic.w	r4, r4, #3
 80074b8:	42a0      	cmp	r0, r4
 80074ba:	d0f8      	beq.n	80074ae <sbrk_aligned+0x22>
 80074bc:	1a21      	subs	r1, r4, r0
 80074be:	4628      	mov	r0, r5
 80074c0:	f000 fb92 	bl	8007be8 <_sbrk_r>
 80074c4:	3001      	adds	r0, #1
 80074c6:	d1f2      	bne.n	80074ae <sbrk_aligned+0x22>
 80074c8:	e7ef      	b.n	80074aa <sbrk_aligned+0x1e>
 80074ca:	bf00      	nop
 80074cc:	20002fb8 	.word	0x20002fb8

080074d0 <_malloc_r>:
 80074d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074d4:	1ccd      	adds	r5, r1, #3
 80074d6:	f025 0503 	bic.w	r5, r5, #3
 80074da:	3508      	adds	r5, #8
 80074dc:	2d0c      	cmp	r5, #12
 80074de:	bf38      	it	cc
 80074e0:	250c      	movcc	r5, #12
 80074e2:	2d00      	cmp	r5, #0
 80074e4:	4606      	mov	r6, r0
 80074e6:	db01      	blt.n	80074ec <_malloc_r+0x1c>
 80074e8:	42a9      	cmp	r1, r5
 80074ea:	d904      	bls.n	80074f6 <_malloc_r+0x26>
 80074ec:	230c      	movs	r3, #12
 80074ee:	6033      	str	r3, [r6, #0]
 80074f0:	2000      	movs	r0, #0
 80074f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80074f6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80075cc <_malloc_r+0xfc>
 80074fa:	f000 f869 	bl	80075d0 <__malloc_lock>
 80074fe:	f8d8 3000 	ldr.w	r3, [r8]
 8007502:	461c      	mov	r4, r3
 8007504:	bb44      	cbnz	r4, 8007558 <_malloc_r+0x88>
 8007506:	4629      	mov	r1, r5
 8007508:	4630      	mov	r0, r6
 800750a:	f7ff ffbf 	bl	800748c <sbrk_aligned>
 800750e:	1c43      	adds	r3, r0, #1
 8007510:	4604      	mov	r4, r0
 8007512:	d158      	bne.n	80075c6 <_malloc_r+0xf6>
 8007514:	f8d8 4000 	ldr.w	r4, [r8]
 8007518:	4627      	mov	r7, r4
 800751a:	2f00      	cmp	r7, #0
 800751c:	d143      	bne.n	80075a6 <_malloc_r+0xd6>
 800751e:	2c00      	cmp	r4, #0
 8007520:	d04b      	beq.n	80075ba <_malloc_r+0xea>
 8007522:	6823      	ldr	r3, [r4, #0]
 8007524:	4639      	mov	r1, r7
 8007526:	4630      	mov	r0, r6
 8007528:	eb04 0903 	add.w	r9, r4, r3
 800752c:	f000 fb5c 	bl	8007be8 <_sbrk_r>
 8007530:	4581      	cmp	r9, r0
 8007532:	d142      	bne.n	80075ba <_malloc_r+0xea>
 8007534:	6821      	ldr	r1, [r4, #0]
 8007536:	1a6d      	subs	r5, r5, r1
 8007538:	4629      	mov	r1, r5
 800753a:	4630      	mov	r0, r6
 800753c:	f7ff ffa6 	bl	800748c <sbrk_aligned>
 8007540:	3001      	adds	r0, #1
 8007542:	d03a      	beq.n	80075ba <_malloc_r+0xea>
 8007544:	6823      	ldr	r3, [r4, #0]
 8007546:	442b      	add	r3, r5
 8007548:	6023      	str	r3, [r4, #0]
 800754a:	f8d8 3000 	ldr.w	r3, [r8]
 800754e:	685a      	ldr	r2, [r3, #4]
 8007550:	bb62      	cbnz	r2, 80075ac <_malloc_r+0xdc>
 8007552:	f8c8 7000 	str.w	r7, [r8]
 8007556:	e00f      	b.n	8007578 <_malloc_r+0xa8>
 8007558:	6822      	ldr	r2, [r4, #0]
 800755a:	1b52      	subs	r2, r2, r5
 800755c:	d420      	bmi.n	80075a0 <_malloc_r+0xd0>
 800755e:	2a0b      	cmp	r2, #11
 8007560:	d917      	bls.n	8007592 <_malloc_r+0xc2>
 8007562:	1961      	adds	r1, r4, r5
 8007564:	42a3      	cmp	r3, r4
 8007566:	6025      	str	r5, [r4, #0]
 8007568:	bf18      	it	ne
 800756a:	6059      	strne	r1, [r3, #4]
 800756c:	6863      	ldr	r3, [r4, #4]
 800756e:	bf08      	it	eq
 8007570:	f8c8 1000 	streq.w	r1, [r8]
 8007574:	5162      	str	r2, [r4, r5]
 8007576:	604b      	str	r3, [r1, #4]
 8007578:	4630      	mov	r0, r6
 800757a:	f000 f82f 	bl	80075dc <__malloc_unlock>
 800757e:	f104 000b 	add.w	r0, r4, #11
 8007582:	1d23      	adds	r3, r4, #4
 8007584:	f020 0007 	bic.w	r0, r0, #7
 8007588:	1ac2      	subs	r2, r0, r3
 800758a:	bf1c      	itt	ne
 800758c:	1a1b      	subne	r3, r3, r0
 800758e:	50a3      	strne	r3, [r4, r2]
 8007590:	e7af      	b.n	80074f2 <_malloc_r+0x22>
 8007592:	6862      	ldr	r2, [r4, #4]
 8007594:	42a3      	cmp	r3, r4
 8007596:	bf0c      	ite	eq
 8007598:	f8c8 2000 	streq.w	r2, [r8]
 800759c:	605a      	strne	r2, [r3, #4]
 800759e:	e7eb      	b.n	8007578 <_malloc_r+0xa8>
 80075a0:	4623      	mov	r3, r4
 80075a2:	6864      	ldr	r4, [r4, #4]
 80075a4:	e7ae      	b.n	8007504 <_malloc_r+0x34>
 80075a6:	463c      	mov	r4, r7
 80075a8:	687f      	ldr	r7, [r7, #4]
 80075aa:	e7b6      	b.n	800751a <_malloc_r+0x4a>
 80075ac:	461a      	mov	r2, r3
 80075ae:	685b      	ldr	r3, [r3, #4]
 80075b0:	42a3      	cmp	r3, r4
 80075b2:	d1fb      	bne.n	80075ac <_malloc_r+0xdc>
 80075b4:	2300      	movs	r3, #0
 80075b6:	6053      	str	r3, [r2, #4]
 80075b8:	e7de      	b.n	8007578 <_malloc_r+0xa8>
 80075ba:	230c      	movs	r3, #12
 80075bc:	6033      	str	r3, [r6, #0]
 80075be:	4630      	mov	r0, r6
 80075c0:	f000 f80c 	bl	80075dc <__malloc_unlock>
 80075c4:	e794      	b.n	80074f0 <_malloc_r+0x20>
 80075c6:	6005      	str	r5, [r0, #0]
 80075c8:	e7d6      	b.n	8007578 <_malloc_r+0xa8>
 80075ca:	bf00      	nop
 80075cc:	20002fbc 	.word	0x20002fbc

080075d0 <__malloc_lock>:
 80075d0:	4801      	ldr	r0, [pc, #4]	@ (80075d8 <__malloc_lock+0x8>)
 80075d2:	f7ff bf01 	b.w	80073d8 <__retarget_lock_acquire_recursive>
 80075d6:	bf00      	nop
 80075d8:	20002fb4 	.word	0x20002fb4

080075dc <__malloc_unlock>:
 80075dc:	4801      	ldr	r0, [pc, #4]	@ (80075e4 <__malloc_unlock+0x8>)
 80075de:	f7ff befc 	b.w	80073da <__retarget_lock_release_recursive>
 80075e2:	bf00      	nop
 80075e4:	20002fb4 	.word	0x20002fb4

080075e8 <__ssputs_r>:
 80075e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075ec:	688e      	ldr	r6, [r1, #8]
 80075ee:	461f      	mov	r7, r3
 80075f0:	42be      	cmp	r6, r7
 80075f2:	680b      	ldr	r3, [r1, #0]
 80075f4:	4682      	mov	sl, r0
 80075f6:	460c      	mov	r4, r1
 80075f8:	4690      	mov	r8, r2
 80075fa:	d82d      	bhi.n	8007658 <__ssputs_r+0x70>
 80075fc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007600:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007604:	d026      	beq.n	8007654 <__ssputs_r+0x6c>
 8007606:	6965      	ldr	r5, [r4, #20]
 8007608:	6909      	ldr	r1, [r1, #16]
 800760a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800760e:	eba3 0901 	sub.w	r9, r3, r1
 8007612:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007616:	1c7b      	adds	r3, r7, #1
 8007618:	444b      	add	r3, r9
 800761a:	106d      	asrs	r5, r5, #1
 800761c:	429d      	cmp	r5, r3
 800761e:	bf38      	it	cc
 8007620:	461d      	movcc	r5, r3
 8007622:	0553      	lsls	r3, r2, #21
 8007624:	d527      	bpl.n	8007676 <__ssputs_r+0x8e>
 8007626:	4629      	mov	r1, r5
 8007628:	f7ff ff52 	bl	80074d0 <_malloc_r>
 800762c:	4606      	mov	r6, r0
 800762e:	b360      	cbz	r0, 800768a <__ssputs_r+0xa2>
 8007630:	6921      	ldr	r1, [r4, #16]
 8007632:	464a      	mov	r2, r9
 8007634:	f7ff fed2 	bl	80073dc <memcpy>
 8007638:	89a3      	ldrh	r3, [r4, #12]
 800763a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800763e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007642:	81a3      	strh	r3, [r4, #12]
 8007644:	6126      	str	r6, [r4, #16]
 8007646:	6165      	str	r5, [r4, #20]
 8007648:	444e      	add	r6, r9
 800764a:	eba5 0509 	sub.w	r5, r5, r9
 800764e:	6026      	str	r6, [r4, #0]
 8007650:	60a5      	str	r5, [r4, #8]
 8007652:	463e      	mov	r6, r7
 8007654:	42be      	cmp	r6, r7
 8007656:	d900      	bls.n	800765a <__ssputs_r+0x72>
 8007658:	463e      	mov	r6, r7
 800765a:	6820      	ldr	r0, [r4, #0]
 800765c:	4632      	mov	r2, r6
 800765e:	4641      	mov	r1, r8
 8007660:	f000 faa8 	bl	8007bb4 <memmove>
 8007664:	68a3      	ldr	r3, [r4, #8]
 8007666:	1b9b      	subs	r3, r3, r6
 8007668:	60a3      	str	r3, [r4, #8]
 800766a:	6823      	ldr	r3, [r4, #0]
 800766c:	4433      	add	r3, r6
 800766e:	6023      	str	r3, [r4, #0]
 8007670:	2000      	movs	r0, #0
 8007672:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007676:	462a      	mov	r2, r5
 8007678:	f000 fac6 	bl	8007c08 <_realloc_r>
 800767c:	4606      	mov	r6, r0
 800767e:	2800      	cmp	r0, #0
 8007680:	d1e0      	bne.n	8007644 <__ssputs_r+0x5c>
 8007682:	6921      	ldr	r1, [r4, #16]
 8007684:	4650      	mov	r0, sl
 8007686:	f7ff feb7 	bl	80073f8 <_free_r>
 800768a:	230c      	movs	r3, #12
 800768c:	f8ca 3000 	str.w	r3, [sl]
 8007690:	89a3      	ldrh	r3, [r4, #12]
 8007692:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007696:	81a3      	strh	r3, [r4, #12]
 8007698:	f04f 30ff 	mov.w	r0, #4294967295
 800769c:	e7e9      	b.n	8007672 <__ssputs_r+0x8a>
	...

080076a0 <_svfiprintf_r>:
 80076a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076a4:	4698      	mov	r8, r3
 80076a6:	898b      	ldrh	r3, [r1, #12]
 80076a8:	061b      	lsls	r3, r3, #24
 80076aa:	b09d      	sub	sp, #116	@ 0x74
 80076ac:	4607      	mov	r7, r0
 80076ae:	460d      	mov	r5, r1
 80076b0:	4614      	mov	r4, r2
 80076b2:	d510      	bpl.n	80076d6 <_svfiprintf_r+0x36>
 80076b4:	690b      	ldr	r3, [r1, #16]
 80076b6:	b973      	cbnz	r3, 80076d6 <_svfiprintf_r+0x36>
 80076b8:	2140      	movs	r1, #64	@ 0x40
 80076ba:	f7ff ff09 	bl	80074d0 <_malloc_r>
 80076be:	6028      	str	r0, [r5, #0]
 80076c0:	6128      	str	r0, [r5, #16]
 80076c2:	b930      	cbnz	r0, 80076d2 <_svfiprintf_r+0x32>
 80076c4:	230c      	movs	r3, #12
 80076c6:	603b      	str	r3, [r7, #0]
 80076c8:	f04f 30ff 	mov.w	r0, #4294967295
 80076cc:	b01d      	add	sp, #116	@ 0x74
 80076ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076d2:	2340      	movs	r3, #64	@ 0x40
 80076d4:	616b      	str	r3, [r5, #20]
 80076d6:	2300      	movs	r3, #0
 80076d8:	9309      	str	r3, [sp, #36]	@ 0x24
 80076da:	2320      	movs	r3, #32
 80076dc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80076e0:	f8cd 800c 	str.w	r8, [sp, #12]
 80076e4:	2330      	movs	r3, #48	@ 0x30
 80076e6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007884 <_svfiprintf_r+0x1e4>
 80076ea:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80076ee:	f04f 0901 	mov.w	r9, #1
 80076f2:	4623      	mov	r3, r4
 80076f4:	469a      	mov	sl, r3
 80076f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80076fa:	b10a      	cbz	r2, 8007700 <_svfiprintf_r+0x60>
 80076fc:	2a25      	cmp	r2, #37	@ 0x25
 80076fe:	d1f9      	bne.n	80076f4 <_svfiprintf_r+0x54>
 8007700:	ebba 0b04 	subs.w	fp, sl, r4
 8007704:	d00b      	beq.n	800771e <_svfiprintf_r+0x7e>
 8007706:	465b      	mov	r3, fp
 8007708:	4622      	mov	r2, r4
 800770a:	4629      	mov	r1, r5
 800770c:	4638      	mov	r0, r7
 800770e:	f7ff ff6b 	bl	80075e8 <__ssputs_r>
 8007712:	3001      	adds	r0, #1
 8007714:	f000 80a7 	beq.w	8007866 <_svfiprintf_r+0x1c6>
 8007718:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800771a:	445a      	add	r2, fp
 800771c:	9209      	str	r2, [sp, #36]	@ 0x24
 800771e:	f89a 3000 	ldrb.w	r3, [sl]
 8007722:	2b00      	cmp	r3, #0
 8007724:	f000 809f 	beq.w	8007866 <_svfiprintf_r+0x1c6>
 8007728:	2300      	movs	r3, #0
 800772a:	f04f 32ff 	mov.w	r2, #4294967295
 800772e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007732:	f10a 0a01 	add.w	sl, sl, #1
 8007736:	9304      	str	r3, [sp, #16]
 8007738:	9307      	str	r3, [sp, #28]
 800773a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800773e:	931a      	str	r3, [sp, #104]	@ 0x68
 8007740:	4654      	mov	r4, sl
 8007742:	2205      	movs	r2, #5
 8007744:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007748:	484e      	ldr	r0, [pc, #312]	@ (8007884 <_svfiprintf_r+0x1e4>)
 800774a:	f7f8 fd49 	bl	80001e0 <memchr>
 800774e:	9a04      	ldr	r2, [sp, #16]
 8007750:	b9d8      	cbnz	r0, 800778a <_svfiprintf_r+0xea>
 8007752:	06d0      	lsls	r0, r2, #27
 8007754:	bf44      	itt	mi
 8007756:	2320      	movmi	r3, #32
 8007758:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800775c:	0711      	lsls	r1, r2, #28
 800775e:	bf44      	itt	mi
 8007760:	232b      	movmi	r3, #43	@ 0x2b
 8007762:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007766:	f89a 3000 	ldrb.w	r3, [sl]
 800776a:	2b2a      	cmp	r3, #42	@ 0x2a
 800776c:	d015      	beq.n	800779a <_svfiprintf_r+0xfa>
 800776e:	9a07      	ldr	r2, [sp, #28]
 8007770:	4654      	mov	r4, sl
 8007772:	2000      	movs	r0, #0
 8007774:	f04f 0c0a 	mov.w	ip, #10
 8007778:	4621      	mov	r1, r4
 800777a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800777e:	3b30      	subs	r3, #48	@ 0x30
 8007780:	2b09      	cmp	r3, #9
 8007782:	d94b      	bls.n	800781c <_svfiprintf_r+0x17c>
 8007784:	b1b0      	cbz	r0, 80077b4 <_svfiprintf_r+0x114>
 8007786:	9207      	str	r2, [sp, #28]
 8007788:	e014      	b.n	80077b4 <_svfiprintf_r+0x114>
 800778a:	eba0 0308 	sub.w	r3, r0, r8
 800778e:	fa09 f303 	lsl.w	r3, r9, r3
 8007792:	4313      	orrs	r3, r2
 8007794:	9304      	str	r3, [sp, #16]
 8007796:	46a2      	mov	sl, r4
 8007798:	e7d2      	b.n	8007740 <_svfiprintf_r+0xa0>
 800779a:	9b03      	ldr	r3, [sp, #12]
 800779c:	1d19      	adds	r1, r3, #4
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	9103      	str	r1, [sp, #12]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	bfbb      	ittet	lt
 80077a6:	425b      	neglt	r3, r3
 80077a8:	f042 0202 	orrlt.w	r2, r2, #2
 80077ac:	9307      	strge	r3, [sp, #28]
 80077ae:	9307      	strlt	r3, [sp, #28]
 80077b0:	bfb8      	it	lt
 80077b2:	9204      	strlt	r2, [sp, #16]
 80077b4:	7823      	ldrb	r3, [r4, #0]
 80077b6:	2b2e      	cmp	r3, #46	@ 0x2e
 80077b8:	d10a      	bne.n	80077d0 <_svfiprintf_r+0x130>
 80077ba:	7863      	ldrb	r3, [r4, #1]
 80077bc:	2b2a      	cmp	r3, #42	@ 0x2a
 80077be:	d132      	bne.n	8007826 <_svfiprintf_r+0x186>
 80077c0:	9b03      	ldr	r3, [sp, #12]
 80077c2:	1d1a      	adds	r2, r3, #4
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	9203      	str	r2, [sp, #12]
 80077c8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80077cc:	3402      	adds	r4, #2
 80077ce:	9305      	str	r3, [sp, #20]
 80077d0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007894 <_svfiprintf_r+0x1f4>
 80077d4:	7821      	ldrb	r1, [r4, #0]
 80077d6:	2203      	movs	r2, #3
 80077d8:	4650      	mov	r0, sl
 80077da:	f7f8 fd01 	bl	80001e0 <memchr>
 80077de:	b138      	cbz	r0, 80077f0 <_svfiprintf_r+0x150>
 80077e0:	9b04      	ldr	r3, [sp, #16]
 80077e2:	eba0 000a 	sub.w	r0, r0, sl
 80077e6:	2240      	movs	r2, #64	@ 0x40
 80077e8:	4082      	lsls	r2, r0
 80077ea:	4313      	orrs	r3, r2
 80077ec:	3401      	adds	r4, #1
 80077ee:	9304      	str	r3, [sp, #16]
 80077f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077f4:	4824      	ldr	r0, [pc, #144]	@ (8007888 <_svfiprintf_r+0x1e8>)
 80077f6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80077fa:	2206      	movs	r2, #6
 80077fc:	f7f8 fcf0 	bl	80001e0 <memchr>
 8007800:	2800      	cmp	r0, #0
 8007802:	d036      	beq.n	8007872 <_svfiprintf_r+0x1d2>
 8007804:	4b21      	ldr	r3, [pc, #132]	@ (800788c <_svfiprintf_r+0x1ec>)
 8007806:	bb1b      	cbnz	r3, 8007850 <_svfiprintf_r+0x1b0>
 8007808:	9b03      	ldr	r3, [sp, #12]
 800780a:	3307      	adds	r3, #7
 800780c:	f023 0307 	bic.w	r3, r3, #7
 8007810:	3308      	adds	r3, #8
 8007812:	9303      	str	r3, [sp, #12]
 8007814:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007816:	4433      	add	r3, r6
 8007818:	9309      	str	r3, [sp, #36]	@ 0x24
 800781a:	e76a      	b.n	80076f2 <_svfiprintf_r+0x52>
 800781c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007820:	460c      	mov	r4, r1
 8007822:	2001      	movs	r0, #1
 8007824:	e7a8      	b.n	8007778 <_svfiprintf_r+0xd8>
 8007826:	2300      	movs	r3, #0
 8007828:	3401      	adds	r4, #1
 800782a:	9305      	str	r3, [sp, #20]
 800782c:	4619      	mov	r1, r3
 800782e:	f04f 0c0a 	mov.w	ip, #10
 8007832:	4620      	mov	r0, r4
 8007834:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007838:	3a30      	subs	r2, #48	@ 0x30
 800783a:	2a09      	cmp	r2, #9
 800783c:	d903      	bls.n	8007846 <_svfiprintf_r+0x1a6>
 800783e:	2b00      	cmp	r3, #0
 8007840:	d0c6      	beq.n	80077d0 <_svfiprintf_r+0x130>
 8007842:	9105      	str	r1, [sp, #20]
 8007844:	e7c4      	b.n	80077d0 <_svfiprintf_r+0x130>
 8007846:	fb0c 2101 	mla	r1, ip, r1, r2
 800784a:	4604      	mov	r4, r0
 800784c:	2301      	movs	r3, #1
 800784e:	e7f0      	b.n	8007832 <_svfiprintf_r+0x192>
 8007850:	ab03      	add	r3, sp, #12
 8007852:	9300      	str	r3, [sp, #0]
 8007854:	462a      	mov	r2, r5
 8007856:	4b0e      	ldr	r3, [pc, #56]	@ (8007890 <_svfiprintf_r+0x1f0>)
 8007858:	a904      	add	r1, sp, #16
 800785a:	4638      	mov	r0, r7
 800785c:	f3af 8000 	nop.w
 8007860:	1c42      	adds	r2, r0, #1
 8007862:	4606      	mov	r6, r0
 8007864:	d1d6      	bne.n	8007814 <_svfiprintf_r+0x174>
 8007866:	89ab      	ldrh	r3, [r5, #12]
 8007868:	065b      	lsls	r3, r3, #25
 800786a:	f53f af2d 	bmi.w	80076c8 <_svfiprintf_r+0x28>
 800786e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007870:	e72c      	b.n	80076cc <_svfiprintf_r+0x2c>
 8007872:	ab03      	add	r3, sp, #12
 8007874:	9300      	str	r3, [sp, #0]
 8007876:	462a      	mov	r2, r5
 8007878:	4b05      	ldr	r3, [pc, #20]	@ (8007890 <_svfiprintf_r+0x1f0>)
 800787a:	a904      	add	r1, sp, #16
 800787c:	4638      	mov	r0, r7
 800787e:	f000 f879 	bl	8007974 <_printf_i>
 8007882:	e7ed      	b.n	8007860 <_svfiprintf_r+0x1c0>
 8007884:	08007d5c 	.word	0x08007d5c
 8007888:	08007d66 	.word	0x08007d66
 800788c:	00000000 	.word	0x00000000
 8007890:	080075e9 	.word	0x080075e9
 8007894:	08007d62 	.word	0x08007d62

08007898 <_printf_common>:
 8007898:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800789c:	4616      	mov	r6, r2
 800789e:	4698      	mov	r8, r3
 80078a0:	688a      	ldr	r2, [r1, #8]
 80078a2:	690b      	ldr	r3, [r1, #16]
 80078a4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80078a8:	4293      	cmp	r3, r2
 80078aa:	bfb8      	it	lt
 80078ac:	4613      	movlt	r3, r2
 80078ae:	6033      	str	r3, [r6, #0]
 80078b0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80078b4:	4607      	mov	r7, r0
 80078b6:	460c      	mov	r4, r1
 80078b8:	b10a      	cbz	r2, 80078be <_printf_common+0x26>
 80078ba:	3301      	adds	r3, #1
 80078bc:	6033      	str	r3, [r6, #0]
 80078be:	6823      	ldr	r3, [r4, #0]
 80078c0:	0699      	lsls	r1, r3, #26
 80078c2:	bf42      	ittt	mi
 80078c4:	6833      	ldrmi	r3, [r6, #0]
 80078c6:	3302      	addmi	r3, #2
 80078c8:	6033      	strmi	r3, [r6, #0]
 80078ca:	6825      	ldr	r5, [r4, #0]
 80078cc:	f015 0506 	ands.w	r5, r5, #6
 80078d0:	d106      	bne.n	80078e0 <_printf_common+0x48>
 80078d2:	f104 0a19 	add.w	sl, r4, #25
 80078d6:	68e3      	ldr	r3, [r4, #12]
 80078d8:	6832      	ldr	r2, [r6, #0]
 80078da:	1a9b      	subs	r3, r3, r2
 80078dc:	42ab      	cmp	r3, r5
 80078de:	dc26      	bgt.n	800792e <_printf_common+0x96>
 80078e0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80078e4:	6822      	ldr	r2, [r4, #0]
 80078e6:	3b00      	subs	r3, #0
 80078e8:	bf18      	it	ne
 80078ea:	2301      	movne	r3, #1
 80078ec:	0692      	lsls	r2, r2, #26
 80078ee:	d42b      	bmi.n	8007948 <_printf_common+0xb0>
 80078f0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80078f4:	4641      	mov	r1, r8
 80078f6:	4638      	mov	r0, r7
 80078f8:	47c8      	blx	r9
 80078fa:	3001      	adds	r0, #1
 80078fc:	d01e      	beq.n	800793c <_printf_common+0xa4>
 80078fe:	6823      	ldr	r3, [r4, #0]
 8007900:	6922      	ldr	r2, [r4, #16]
 8007902:	f003 0306 	and.w	r3, r3, #6
 8007906:	2b04      	cmp	r3, #4
 8007908:	bf02      	ittt	eq
 800790a:	68e5      	ldreq	r5, [r4, #12]
 800790c:	6833      	ldreq	r3, [r6, #0]
 800790e:	1aed      	subeq	r5, r5, r3
 8007910:	68a3      	ldr	r3, [r4, #8]
 8007912:	bf0c      	ite	eq
 8007914:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007918:	2500      	movne	r5, #0
 800791a:	4293      	cmp	r3, r2
 800791c:	bfc4      	itt	gt
 800791e:	1a9b      	subgt	r3, r3, r2
 8007920:	18ed      	addgt	r5, r5, r3
 8007922:	2600      	movs	r6, #0
 8007924:	341a      	adds	r4, #26
 8007926:	42b5      	cmp	r5, r6
 8007928:	d11a      	bne.n	8007960 <_printf_common+0xc8>
 800792a:	2000      	movs	r0, #0
 800792c:	e008      	b.n	8007940 <_printf_common+0xa8>
 800792e:	2301      	movs	r3, #1
 8007930:	4652      	mov	r2, sl
 8007932:	4641      	mov	r1, r8
 8007934:	4638      	mov	r0, r7
 8007936:	47c8      	blx	r9
 8007938:	3001      	adds	r0, #1
 800793a:	d103      	bne.n	8007944 <_printf_common+0xac>
 800793c:	f04f 30ff 	mov.w	r0, #4294967295
 8007940:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007944:	3501      	adds	r5, #1
 8007946:	e7c6      	b.n	80078d6 <_printf_common+0x3e>
 8007948:	18e1      	adds	r1, r4, r3
 800794a:	1c5a      	adds	r2, r3, #1
 800794c:	2030      	movs	r0, #48	@ 0x30
 800794e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007952:	4422      	add	r2, r4
 8007954:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007958:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800795c:	3302      	adds	r3, #2
 800795e:	e7c7      	b.n	80078f0 <_printf_common+0x58>
 8007960:	2301      	movs	r3, #1
 8007962:	4622      	mov	r2, r4
 8007964:	4641      	mov	r1, r8
 8007966:	4638      	mov	r0, r7
 8007968:	47c8      	blx	r9
 800796a:	3001      	adds	r0, #1
 800796c:	d0e6      	beq.n	800793c <_printf_common+0xa4>
 800796e:	3601      	adds	r6, #1
 8007970:	e7d9      	b.n	8007926 <_printf_common+0x8e>
	...

08007974 <_printf_i>:
 8007974:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007978:	7e0f      	ldrb	r7, [r1, #24]
 800797a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800797c:	2f78      	cmp	r7, #120	@ 0x78
 800797e:	4691      	mov	r9, r2
 8007980:	4680      	mov	r8, r0
 8007982:	460c      	mov	r4, r1
 8007984:	469a      	mov	sl, r3
 8007986:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800798a:	d807      	bhi.n	800799c <_printf_i+0x28>
 800798c:	2f62      	cmp	r7, #98	@ 0x62
 800798e:	d80a      	bhi.n	80079a6 <_printf_i+0x32>
 8007990:	2f00      	cmp	r7, #0
 8007992:	f000 80d2 	beq.w	8007b3a <_printf_i+0x1c6>
 8007996:	2f58      	cmp	r7, #88	@ 0x58
 8007998:	f000 80b9 	beq.w	8007b0e <_printf_i+0x19a>
 800799c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80079a0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80079a4:	e03a      	b.n	8007a1c <_printf_i+0xa8>
 80079a6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80079aa:	2b15      	cmp	r3, #21
 80079ac:	d8f6      	bhi.n	800799c <_printf_i+0x28>
 80079ae:	a101      	add	r1, pc, #4	@ (adr r1, 80079b4 <_printf_i+0x40>)
 80079b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80079b4:	08007a0d 	.word	0x08007a0d
 80079b8:	08007a21 	.word	0x08007a21
 80079bc:	0800799d 	.word	0x0800799d
 80079c0:	0800799d 	.word	0x0800799d
 80079c4:	0800799d 	.word	0x0800799d
 80079c8:	0800799d 	.word	0x0800799d
 80079cc:	08007a21 	.word	0x08007a21
 80079d0:	0800799d 	.word	0x0800799d
 80079d4:	0800799d 	.word	0x0800799d
 80079d8:	0800799d 	.word	0x0800799d
 80079dc:	0800799d 	.word	0x0800799d
 80079e0:	08007b21 	.word	0x08007b21
 80079e4:	08007a4b 	.word	0x08007a4b
 80079e8:	08007adb 	.word	0x08007adb
 80079ec:	0800799d 	.word	0x0800799d
 80079f0:	0800799d 	.word	0x0800799d
 80079f4:	08007b43 	.word	0x08007b43
 80079f8:	0800799d 	.word	0x0800799d
 80079fc:	08007a4b 	.word	0x08007a4b
 8007a00:	0800799d 	.word	0x0800799d
 8007a04:	0800799d 	.word	0x0800799d
 8007a08:	08007ae3 	.word	0x08007ae3
 8007a0c:	6833      	ldr	r3, [r6, #0]
 8007a0e:	1d1a      	adds	r2, r3, #4
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	6032      	str	r2, [r6, #0]
 8007a14:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007a18:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007a1c:	2301      	movs	r3, #1
 8007a1e:	e09d      	b.n	8007b5c <_printf_i+0x1e8>
 8007a20:	6833      	ldr	r3, [r6, #0]
 8007a22:	6820      	ldr	r0, [r4, #0]
 8007a24:	1d19      	adds	r1, r3, #4
 8007a26:	6031      	str	r1, [r6, #0]
 8007a28:	0606      	lsls	r6, r0, #24
 8007a2a:	d501      	bpl.n	8007a30 <_printf_i+0xbc>
 8007a2c:	681d      	ldr	r5, [r3, #0]
 8007a2e:	e003      	b.n	8007a38 <_printf_i+0xc4>
 8007a30:	0645      	lsls	r5, r0, #25
 8007a32:	d5fb      	bpl.n	8007a2c <_printf_i+0xb8>
 8007a34:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007a38:	2d00      	cmp	r5, #0
 8007a3a:	da03      	bge.n	8007a44 <_printf_i+0xd0>
 8007a3c:	232d      	movs	r3, #45	@ 0x2d
 8007a3e:	426d      	negs	r5, r5
 8007a40:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007a44:	4859      	ldr	r0, [pc, #356]	@ (8007bac <_printf_i+0x238>)
 8007a46:	230a      	movs	r3, #10
 8007a48:	e011      	b.n	8007a6e <_printf_i+0xfa>
 8007a4a:	6821      	ldr	r1, [r4, #0]
 8007a4c:	6833      	ldr	r3, [r6, #0]
 8007a4e:	0608      	lsls	r0, r1, #24
 8007a50:	f853 5b04 	ldr.w	r5, [r3], #4
 8007a54:	d402      	bmi.n	8007a5c <_printf_i+0xe8>
 8007a56:	0649      	lsls	r1, r1, #25
 8007a58:	bf48      	it	mi
 8007a5a:	b2ad      	uxthmi	r5, r5
 8007a5c:	2f6f      	cmp	r7, #111	@ 0x6f
 8007a5e:	4853      	ldr	r0, [pc, #332]	@ (8007bac <_printf_i+0x238>)
 8007a60:	6033      	str	r3, [r6, #0]
 8007a62:	bf14      	ite	ne
 8007a64:	230a      	movne	r3, #10
 8007a66:	2308      	moveq	r3, #8
 8007a68:	2100      	movs	r1, #0
 8007a6a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007a6e:	6866      	ldr	r6, [r4, #4]
 8007a70:	60a6      	str	r6, [r4, #8]
 8007a72:	2e00      	cmp	r6, #0
 8007a74:	bfa2      	ittt	ge
 8007a76:	6821      	ldrge	r1, [r4, #0]
 8007a78:	f021 0104 	bicge.w	r1, r1, #4
 8007a7c:	6021      	strge	r1, [r4, #0]
 8007a7e:	b90d      	cbnz	r5, 8007a84 <_printf_i+0x110>
 8007a80:	2e00      	cmp	r6, #0
 8007a82:	d04b      	beq.n	8007b1c <_printf_i+0x1a8>
 8007a84:	4616      	mov	r6, r2
 8007a86:	fbb5 f1f3 	udiv	r1, r5, r3
 8007a8a:	fb03 5711 	mls	r7, r3, r1, r5
 8007a8e:	5dc7      	ldrb	r7, [r0, r7]
 8007a90:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007a94:	462f      	mov	r7, r5
 8007a96:	42bb      	cmp	r3, r7
 8007a98:	460d      	mov	r5, r1
 8007a9a:	d9f4      	bls.n	8007a86 <_printf_i+0x112>
 8007a9c:	2b08      	cmp	r3, #8
 8007a9e:	d10b      	bne.n	8007ab8 <_printf_i+0x144>
 8007aa0:	6823      	ldr	r3, [r4, #0]
 8007aa2:	07df      	lsls	r7, r3, #31
 8007aa4:	d508      	bpl.n	8007ab8 <_printf_i+0x144>
 8007aa6:	6923      	ldr	r3, [r4, #16]
 8007aa8:	6861      	ldr	r1, [r4, #4]
 8007aaa:	4299      	cmp	r1, r3
 8007aac:	bfde      	ittt	le
 8007aae:	2330      	movle	r3, #48	@ 0x30
 8007ab0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007ab4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007ab8:	1b92      	subs	r2, r2, r6
 8007aba:	6122      	str	r2, [r4, #16]
 8007abc:	f8cd a000 	str.w	sl, [sp]
 8007ac0:	464b      	mov	r3, r9
 8007ac2:	aa03      	add	r2, sp, #12
 8007ac4:	4621      	mov	r1, r4
 8007ac6:	4640      	mov	r0, r8
 8007ac8:	f7ff fee6 	bl	8007898 <_printf_common>
 8007acc:	3001      	adds	r0, #1
 8007ace:	d14a      	bne.n	8007b66 <_printf_i+0x1f2>
 8007ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ad4:	b004      	add	sp, #16
 8007ad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ada:	6823      	ldr	r3, [r4, #0]
 8007adc:	f043 0320 	orr.w	r3, r3, #32
 8007ae0:	6023      	str	r3, [r4, #0]
 8007ae2:	4833      	ldr	r0, [pc, #204]	@ (8007bb0 <_printf_i+0x23c>)
 8007ae4:	2778      	movs	r7, #120	@ 0x78
 8007ae6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007aea:	6823      	ldr	r3, [r4, #0]
 8007aec:	6831      	ldr	r1, [r6, #0]
 8007aee:	061f      	lsls	r7, r3, #24
 8007af0:	f851 5b04 	ldr.w	r5, [r1], #4
 8007af4:	d402      	bmi.n	8007afc <_printf_i+0x188>
 8007af6:	065f      	lsls	r7, r3, #25
 8007af8:	bf48      	it	mi
 8007afa:	b2ad      	uxthmi	r5, r5
 8007afc:	6031      	str	r1, [r6, #0]
 8007afe:	07d9      	lsls	r1, r3, #31
 8007b00:	bf44      	itt	mi
 8007b02:	f043 0320 	orrmi.w	r3, r3, #32
 8007b06:	6023      	strmi	r3, [r4, #0]
 8007b08:	b11d      	cbz	r5, 8007b12 <_printf_i+0x19e>
 8007b0a:	2310      	movs	r3, #16
 8007b0c:	e7ac      	b.n	8007a68 <_printf_i+0xf4>
 8007b0e:	4827      	ldr	r0, [pc, #156]	@ (8007bac <_printf_i+0x238>)
 8007b10:	e7e9      	b.n	8007ae6 <_printf_i+0x172>
 8007b12:	6823      	ldr	r3, [r4, #0]
 8007b14:	f023 0320 	bic.w	r3, r3, #32
 8007b18:	6023      	str	r3, [r4, #0]
 8007b1a:	e7f6      	b.n	8007b0a <_printf_i+0x196>
 8007b1c:	4616      	mov	r6, r2
 8007b1e:	e7bd      	b.n	8007a9c <_printf_i+0x128>
 8007b20:	6833      	ldr	r3, [r6, #0]
 8007b22:	6825      	ldr	r5, [r4, #0]
 8007b24:	6961      	ldr	r1, [r4, #20]
 8007b26:	1d18      	adds	r0, r3, #4
 8007b28:	6030      	str	r0, [r6, #0]
 8007b2a:	062e      	lsls	r6, r5, #24
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	d501      	bpl.n	8007b34 <_printf_i+0x1c0>
 8007b30:	6019      	str	r1, [r3, #0]
 8007b32:	e002      	b.n	8007b3a <_printf_i+0x1c6>
 8007b34:	0668      	lsls	r0, r5, #25
 8007b36:	d5fb      	bpl.n	8007b30 <_printf_i+0x1bc>
 8007b38:	8019      	strh	r1, [r3, #0]
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	6123      	str	r3, [r4, #16]
 8007b3e:	4616      	mov	r6, r2
 8007b40:	e7bc      	b.n	8007abc <_printf_i+0x148>
 8007b42:	6833      	ldr	r3, [r6, #0]
 8007b44:	1d1a      	adds	r2, r3, #4
 8007b46:	6032      	str	r2, [r6, #0]
 8007b48:	681e      	ldr	r6, [r3, #0]
 8007b4a:	6862      	ldr	r2, [r4, #4]
 8007b4c:	2100      	movs	r1, #0
 8007b4e:	4630      	mov	r0, r6
 8007b50:	f7f8 fb46 	bl	80001e0 <memchr>
 8007b54:	b108      	cbz	r0, 8007b5a <_printf_i+0x1e6>
 8007b56:	1b80      	subs	r0, r0, r6
 8007b58:	6060      	str	r0, [r4, #4]
 8007b5a:	6863      	ldr	r3, [r4, #4]
 8007b5c:	6123      	str	r3, [r4, #16]
 8007b5e:	2300      	movs	r3, #0
 8007b60:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007b64:	e7aa      	b.n	8007abc <_printf_i+0x148>
 8007b66:	6923      	ldr	r3, [r4, #16]
 8007b68:	4632      	mov	r2, r6
 8007b6a:	4649      	mov	r1, r9
 8007b6c:	4640      	mov	r0, r8
 8007b6e:	47d0      	blx	sl
 8007b70:	3001      	adds	r0, #1
 8007b72:	d0ad      	beq.n	8007ad0 <_printf_i+0x15c>
 8007b74:	6823      	ldr	r3, [r4, #0]
 8007b76:	079b      	lsls	r3, r3, #30
 8007b78:	d413      	bmi.n	8007ba2 <_printf_i+0x22e>
 8007b7a:	68e0      	ldr	r0, [r4, #12]
 8007b7c:	9b03      	ldr	r3, [sp, #12]
 8007b7e:	4298      	cmp	r0, r3
 8007b80:	bfb8      	it	lt
 8007b82:	4618      	movlt	r0, r3
 8007b84:	e7a6      	b.n	8007ad4 <_printf_i+0x160>
 8007b86:	2301      	movs	r3, #1
 8007b88:	4632      	mov	r2, r6
 8007b8a:	4649      	mov	r1, r9
 8007b8c:	4640      	mov	r0, r8
 8007b8e:	47d0      	blx	sl
 8007b90:	3001      	adds	r0, #1
 8007b92:	d09d      	beq.n	8007ad0 <_printf_i+0x15c>
 8007b94:	3501      	adds	r5, #1
 8007b96:	68e3      	ldr	r3, [r4, #12]
 8007b98:	9903      	ldr	r1, [sp, #12]
 8007b9a:	1a5b      	subs	r3, r3, r1
 8007b9c:	42ab      	cmp	r3, r5
 8007b9e:	dcf2      	bgt.n	8007b86 <_printf_i+0x212>
 8007ba0:	e7eb      	b.n	8007b7a <_printf_i+0x206>
 8007ba2:	2500      	movs	r5, #0
 8007ba4:	f104 0619 	add.w	r6, r4, #25
 8007ba8:	e7f5      	b.n	8007b96 <_printf_i+0x222>
 8007baa:	bf00      	nop
 8007bac:	08007d6d 	.word	0x08007d6d
 8007bb0:	08007d7e 	.word	0x08007d7e

08007bb4 <memmove>:
 8007bb4:	4288      	cmp	r0, r1
 8007bb6:	b510      	push	{r4, lr}
 8007bb8:	eb01 0402 	add.w	r4, r1, r2
 8007bbc:	d902      	bls.n	8007bc4 <memmove+0x10>
 8007bbe:	4284      	cmp	r4, r0
 8007bc0:	4623      	mov	r3, r4
 8007bc2:	d807      	bhi.n	8007bd4 <memmove+0x20>
 8007bc4:	1e43      	subs	r3, r0, #1
 8007bc6:	42a1      	cmp	r1, r4
 8007bc8:	d008      	beq.n	8007bdc <memmove+0x28>
 8007bca:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007bce:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007bd2:	e7f8      	b.n	8007bc6 <memmove+0x12>
 8007bd4:	4402      	add	r2, r0
 8007bd6:	4601      	mov	r1, r0
 8007bd8:	428a      	cmp	r2, r1
 8007bda:	d100      	bne.n	8007bde <memmove+0x2a>
 8007bdc:	bd10      	pop	{r4, pc}
 8007bde:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007be2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007be6:	e7f7      	b.n	8007bd8 <memmove+0x24>

08007be8 <_sbrk_r>:
 8007be8:	b538      	push	{r3, r4, r5, lr}
 8007bea:	4d06      	ldr	r5, [pc, #24]	@ (8007c04 <_sbrk_r+0x1c>)
 8007bec:	2300      	movs	r3, #0
 8007bee:	4604      	mov	r4, r0
 8007bf0:	4608      	mov	r0, r1
 8007bf2:	602b      	str	r3, [r5, #0]
 8007bf4:	f7f9 f954 	bl	8000ea0 <_sbrk>
 8007bf8:	1c43      	adds	r3, r0, #1
 8007bfa:	d102      	bne.n	8007c02 <_sbrk_r+0x1a>
 8007bfc:	682b      	ldr	r3, [r5, #0]
 8007bfe:	b103      	cbz	r3, 8007c02 <_sbrk_r+0x1a>
 8007c00:	6023      	str	r3, [r4, #0]
 8007c02:	bd38      	pop	{r3, r4, r5, pc}
 8007c04:	20002fb0 	.word	0x20002fb0

08007c08 <_realloc_r>:
 8007c08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c0c:	4680      	mov	r8, r0
 8007c0e:	4615      	mov	r5, r2
 8007c10:	460c      	mov	r4, r1
 8007c12:	b921      	cbnz	r1, 8007c1e <_realloc_r+0x16>
 8007c14:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007c18:	4611      	mov	r1, r2
 8007c1a:	f7ff bc59 	b.w	80074d0 <_malloc_r>
 8007c1e:	b92a      	cbnz	r2, 8007c2c <_realloc_r+0x24>
 8007c20:	f7ff fbea 	bl	80073f8 <_free_r>
 8007c24:	2400      	movs	r4, #0
 8007c26:	4620      	mov	r0, r4
 8007c28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c2c:	f000 f81a 	bl	8007c64 <_malloc_usable_size_r>
 8007c30:	4285      	cmp	r5, r0
 8007c32:	4606      	mov	r6, r0
 8007c34:	d802      	bhi.n	8007c3c <_realloc_r+0x34>
 8007c36:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007c3a:	d8f4      	bhi.n	8007c26 <_realloc_r+0x1e>
 8007c3c:	4629      	mov	r1, r5
 8007c3e:	4640      	mov	r0, r8
 8007c40:	f7ff fc46 	bl	80074d0 <_malloc_r>
 8007c44:	4607      	mov	r7, r0
 8007c46:	2800      	cmp	r0, #0
 8007c48:	d0ec      	beq.n	8007c24 <_realloc_r+0x1c>
 8007c4a:	42b5      	cmp	r5, r6
 8007c4c:	462a      	mov	r2, r5
 8007c4e:	4621      	mov	r1, r4
 8007c50:	bf28      	it	cs
 8007c52:	4632      	movcs	r2, r6
 8007c54:	f7ff fbc2 	bl	80073dc <memcpy>
 8007c58:	4621      	mov	r1, r4
 8007c5a:	4640      	mov	r0, r8
 8007c5c:	f7ff fbcc 	bl	80073f8 <_free_r>
 8007c60:	463c      	mov	r4, r7
 8007c62:	e7e0      	b.n	8007c26 <_realloc_r+0x1e>

08007c64 <_malloc_usable_size_r>:
 8007c64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c68:	1f18      	subs	r0, r3, #4
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	bfbc      	itt	lt
 8007c6e:	580b      	ldrlt	r3, [r1, r0]
 8007c70:	18c0      	addlt	r0, r0, r3
 8007c72:	4770      	bx	lr

08007c74 <_init>:
 8007c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c76:	bf00      	nop
 8007c78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c7a:	bc08      	pop	{r3}
 8007c7c:	469e      	mov	lr, r3
 8007c7e:	4770      	bx	lr

08007c80 <_fini>:
 8007c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c82:	bf00      	nop
 8007c84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c86:	bc08      	pop	{r3}
 8007c88:	469e      	mov	lr, r3
 8007c8a:	4770      	bx	lr
