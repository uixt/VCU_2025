
VCU_2025.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000069f8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08006b88  08006b88  00007b88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c48  08006c48  00008010  2**0
                  CONTENTS
  4 .ARM          00000000  08006c48  08006c48  00008010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006c48  08006c48  00008010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c48  08006c48  00007c48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006c4c  08006c4c  00007c4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08006c50  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002de0  20000010  08006c60  00008010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002df0  08006c60  00008df0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018bdd  00000000  00000000  00008040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000039dc  00000000  00000000  00020c1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001518  00000000  00000000  00024600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000106a  00000000  00000000  00025b18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001eec9  00000000  00000000  00026b82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001aafe  00000000  00000000  00045a4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b794a  00000000  00000000  00060549  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00117e93  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005804  00000000  00000000  00117ed8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  0011d6dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006b70 	.word	0x08006b70

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08006b70 	.word	0x08006b70

080001d0 <makeFrame>:
char msg[64];
uint32_t val;
struct CANframe temp;
struct CANframe receivedFrame;

struct CANframe makeFrame(CAN_RxHeaderTypeDef header, uint8_t data[8]) {
 80001d0:	b084      	sub	sp, #16
 80001d2:	b490      	push	{r4, r7}
 80001d4:	b086      	sub	sp, #24
 80001d6:	af00      	add	r7, sp, #0
 80001d8:	6078      	str	r0, [r7, #4]
 80001da:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80001de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	struct CANframe temp;

	temp.ID = header.StdId;
 80001e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80001e4:	60fb      	str	r3, [r7, #12]
	temp.rxData[0] = data[0];
 80001e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80001e8:	781b      	ldrb	r3, [r3, #0]
 80001ea:	743b      	strb	r3, [r7, #16]
	temp.rxData[1] = data[1];
 80001ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80001ee:	785b      	ldrb	r3, [r3, #1]
 80001f0:	747b      	strb	r3, [r7, #17]
	temp.rxData[2] = data[2];
 80001f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80001f4:	789b      	ldrb	r3, [r3, #2]
 80001f6:	74bb      	strb	r3, [r7, #18]
	temp.rxData[3] = data[3];
 80001f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80001fa:	78db      	ldrb	r3, [r3, #3]
 80001fc:	74fb      	strb	r3, [r7, #19]
	temp.rxData[4] = data[4];
 80001fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000200:	791b      	ldrb	r3, [r3, #4]
 8000202:	753b      	strb	r3, [r7, #20]
	temp.rxData[5] = data[5];
 8000204:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000206:	795b      	ldrb	r3, [r3, #5]
 8000208:	757b      	strb	r3, [r7, #21]
	temp.rxData[6] = data[6];
 800020a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800020c:	799b      	ldrb	r3, [r3, #6]
 800020e:	75bb      	strb	r3, [r7, #22]
	temp.rxData[7] = data[7];
 8000210:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000212:	79db      	ldrb	r3, [r3, #7]
 8000214:	75fb      	strb	r3, [r7, #23]

	return temp;
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	461c      	mov	r4, r3
 800021a:	f107 030c 	add.w	r3, r7, #12
 800021e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000222:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8000226:	6878      	ldr	r0, [r7, #4]
 8000228:	3718      	adds	r7, #24
 800022a:	46bd      	mov	sp, r7
 800022c:	bc90      	pop	{r4, r7}
 800022e:	b004      	add	sp, #16
 8000230:	4770      	bx	lr
	...

08000234 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000234:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000236:	b08f      	sub	sp, #60	@ 0x3c
 8000238:	af06      	add	r7, sp, #24
 800023a:	61f8      	str	r0, [r7, #28]

	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK) {
 800023c:	4b18      	ldr	r3, [pc, #96]	@ (80002a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 800023e:	4a19      	ldr	r2, [pc, #100]	@ (80002a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8000240:	2100      	movs	r1, #0
 8000242:	69f8      	ldr	r0, [r7, #28]
 8000244:	f001 fcdf 	bl	8001c06 <HAL_CAN_GetRxMessage>
 8000248:	4603      	mov	r3, r0
 800024a:	2b00      	cmp	r3, #0
 800024c:	d001      	beq.n	8000252 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
		Error_Handler();
 800024e:	f000 fb11 	bl	8000874 <Error_Handler>
	}
//	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
	temp = makeFrame(RxHeader, RxData);
 8000252:	4b15      	ldr	r3, [pc, #84]	@ (80002a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 8000254:	607b      	str	r3, [r7, #4]
 8000256:	f107 0608 	add.w	r6, r7, #8
 800025a:	4c12      	ldr	r4, [pc, #72]	@ (80002a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 800025c:	4b10      	ldr	r3, [pc, #64]	@ (80002a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 800025e:	9304      	str	r3, [sp, #16]
 8000260:	466d      	mov	r5, sp
 8000262:	f104 030c 	add.w	r3, r4, #12
 8000266:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000268:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800026c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8000270:	4630      	mov	r0, r6
 8000272:	f7ff ffad 	bl	80001d0 <makeFrame>
 8000276:	687c      	ldr	r4, [r7, #4]
 8000278:	f107 0308 	add.w	r3, r7, #8
 800027c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000280:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	xQueueSendToBackFromISR(CANq, &temp, 1);
 8000284:	4b09      	ldr	r3, [pc, #36]	@ (80002ac <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 8000286:	6818      	ldr	r0, [r3, #0]
 8000288:	2300      	movs	r3, #0
 800028a:	2201      	movs	r2, #1
 800028c:	4906      	ldr	r1, [pc, #24]	@ (80002a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 800028e:	f004 fff5 	bl	800527c <xQueueGenericSendFromISR>

	datacheck = 1; // signal to your RTOS task
 8000292:	4b07      	ldr	r3, [pc, #28]	@ (80002b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 8000294:	2201      	movs	r2, #1
 8000296:	701a      	strb	r2, [r3, #0]
}
 8000298:	bf00      	nop
 800029a:	3724      	adds	r7, #36	@ 0x24
 800029c:	46bd      	mov	sp, r7
 800029e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002a0:	20000048 	.word	0x20000048
 80002a4:	2000002c 	.word	0x2000002c
 80002a8:	20000050 	.word	0x20000050
 80002ac:	2000040c 	.word	0x2000040c
 80002b0:	20000410 	.word	0x20000410

080002b4 <StartCanRxTask>:

void StartCanRxTask(void const *argument) {
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b084      	sub	sp, #16
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	6078      	str	r0, [r7, #4]
	int count;
	CANq = xQueueCreate(100, sizeof(struct CANframe));
 80002bc:	2200      	movs	r2, #0
 80002be:	210c      	movs	r1, #12
 80002c0:	2064      	movs	r0, #100	@ 0x64
 80002c2:	f004 ff7d 	bl	80051c0 <xQueueGenericCreate>
 80002c6:	4603      	mov	r3, r0
 80002c8:	4a0e      	ldr	r2, [pc, #56]	@ (8000304 <StartCanRxTask+0x50>)
 80002ca:	6013      	str	r3, [r2, #0]
	vQueueAddToRegistry(CANq, "CAN queue");
 80002cc:	4b0d      	ldr	r3, [pc, #52]	@ (8000304 <StartCanRxTask+0x50>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	490d      	ldr	r1, [pc, #52]	@ (8000308 <StartCanRxTask+0x54>)
 80002d2:	4618      	mov	r0, r3
 80002d4:	f005 f99e 	bl	8005614 <vQueueAddToRegistry>

	while (1) {

		if (xQueueReceiveFromISR(CANq, &receivedFrame, pdMS_TO_TICKS(100)) == pdPASS) {
 80002d8:	4b0a      	ldr	r3, [pc, #40]	@ (8000304 <StartCanRxTask+0x50>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	2264      	movs	r2, #100	@ 0x64
 80002de:	490b      	ldr	r1, [pc, #44]	@ (800030c <StartCanRxTask+0x58>)
 80002e0:	4618      	mov	r0, r3
 80002e2:	f005 f866 	bl	80053b2 <xQueueReceiveFromISR>
 80002e6:	4603      	mov	r3, r0
 80002e8:	2b01      	cmp	r3, #1
 80002ea:	d103      	bne.n	80002f4 <StartCanRxTask+0x40>

//			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
			osDelay(1000);
 80002ec:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80002f0:	f004 fe34 	bl	8004f5c <osDelay>
		}

		count = uxQueueMessagesWaiting(CANq);
 80002f4:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <StartCanRxTask+0x50>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	4618      	mov	r0, r3
 80002fa:	f005 f8dc 	bl	80054b6 <uxQueueMessagesWaiting>
 80002fe:	4603      	mov	r3, r0
 8000300:	60fb      	str	r3, [r7, #12]
		if (xQueueReceiveFromISR(CANq, &receivedFrame, pdMS_TO_TICKS(100)) == pdPASS) {
 8000302:	e7e9      	b.n	80002d8 <StartCanRxTask+0x24>
 8000304:	2000040c 	.word	0x2000040c
 8000308:	08006b88 	.word	0x08006b88
 800030c:	2000005c 	.word	0x2000005c

08000310 <StartCanTxTask>:
#include "CAN_Transmit.h"  // your own header

extern CAN_HandleTypeDef hcan;

void StartCanTxTask(void const *argument) {
 8000310:	b580      	push	{r7, lr}
 8000312:	b08c      	sub	sp, #48	@ 0x30
 8000314:	af00      	add	r7, sp, #0
 8000316:	6078      	str	r0, [r7, #4]
	CAN_TxHeaderTypeDef txHeader;
	uint8_t txData[8];
	uint32_t txMailbox;

	// Set up header
	txHeader.IDE = CAN_ID_STD;
 8000318:	2300      	movs	r3, #0
 800031a:	623b      	str	r3, [r7, #32]
	txHeader.StdId = 0x401;
 800031c:	f240 4301 	movw	r3, #1025	@ 0x401
 8000320:	61bb      	str	r3, [r7, #24]
	txHeader.RTR = CAN_RTR_DATA;
 8000322:	2300      	movs	r3, #0
 8000324:	627b      	str	r3, [r7, #36]	@ 0x24
	txHeader.DLC = 8;
 8000326:	2308      	movs	r3, #8
 8000328:	62bb      	str	r3, [r7, #40]	@ 0x28

	while (1) {
		//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);

		txData[0] = 0x0; // your payload
 800032a:	2300      	movs	r3, #0
 800032c:	743b      	strb	r3, [r7, #16]
		txData[1] = 0x0;
 800032e:	2300      	movs	r3, #0
 8000330:	747b      	strb	r3, [r7, #17]
		txData[2] = 0xB4;
 8000332:	23b4      	movs	r3, #180	@ 0xb4
 8000334:	74bb      	strb	r3, [r7, #18]
		txData[3] = 0x43;
 8000336:	2343      	movs	r3, #67	@ 0x43
 8000338:	74fb      	strb	r3, [r7, #19]
		txData[4] = 0xCD;
 800033a:	23cd      	movs	r3, #205	@ 0xcd
 800033c:	753b      	strb	r3, [r7, #20]
		txData[5] = 0xCC;
 800033e:	23cc      	movs	r3, #204	@ 0xcc
 8000340:	757b      	strb	r3, [r7, #21]
		txData[6] = 0x4C;
 8000342:	234c      	movs	r3, #76	@ 0x4c
 8000344:	75bb      	strb	r3, [r7, #22]
		txData[7] = 0x3D;
 8000346:	233d      	movs	r3, #61	@ 0x3d
 8000348:	75fb      	strb	r3, [r7, #23]

		//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);

		if (HAL_CAN_AddTxMessage(&hcan, &txHeader, txData, &txMailbox)
 800034a:	f107 030c 	add.w	r3, r7, #12
 800034e:	f107 0210 	add.w	r2, r7, #16
 8000352:	f107 0118 	add.w	r1, r7, #24
 8000356:	4808      	ldr	r0, [pc, #32]	@ (8000378 <StartCanTxTask+0x68>)
 8000358:	f001 fb85 	bl	8001a66 <HAL_CAN_AddTxMessage>
 800035c:	4603      	mov	r3, r0
 800035e:	2b00      	cmp	r3, #0
 8000360:	d001      	beq.n	8000366 <StartCanTxTask+0x56>
				!= HAL_OK) {
			Error_Handler();
 8000362:	f000 fa87 	bl	8000874 <Error_Handler>
		}
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 8000366:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800036a:	4804      	ldr	r0, [pc, #16]	@ (800037c <StartCanTxTask+0x6c>)
 800036c:	f002 fb38 	bl	80029e0 <HAL_GPIO_TogglePin>


		osDelay(100); // send every 1 second
 8000370:	2064      	movs	r0, #100	@ 0x64
 8000372:	f004 fdf3 	bl	8004f5c <osDelay>
	while (1) {
 8000376:	e7d8      	b.n	800032a <StartCanTxTask+0x1a>
 8000378:	20000350 	.word	0x20000350
 800037c:	48000400 	.word	0x48000400

08000380 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000380:	b480      	push	{r7}
 8000382:	b085      	sub	sp, #20
 8000384:	af00      	add	r7, sp, #0
 8000386:	60f8      	str	r0, [r7, #12]
 8000388:	60b9      	str	r1, [r7, #8]
 800038a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800038c:	68fb      	ldr	r3, [r7, #12]
 800038e:	4a07      	ldr	r2, [pc, #28]	@ (80003ac <vApplicationGetIdleTaskMemory+0x2c>)
 8000390:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000392:	68bb      	ldr	r3, [r7, #8]
 8000394:	4a06      	ldr	r2, [pc, #24]	@ (80003b0 <vApplicationGetIdleTaskMemory+0x30>)
 8000396:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	2280      	movs	r2, #128	@ 0x80
 800039c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800039e:	bf00      	nop
 80003a0:	3714      	adds	r7, #20
 80003a2:	46bd      	mov	sp, r7
 80003a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a8:	4770      	bx	lr
 80003aa:	bf00      	nop
 80003ac:	20000068 	.word	0x20000068
 80003b0:	200000bc 	.word	0x200000bc

080003b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003b4:	b5b0      	push	{r4, r5, r7, lr}
 80003b6:	b096      	sub	sp, #88	@ 0x58
 80003b8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003ba:	f000 fc77 	bl	8000cac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003be:	f000 f869 	bl	8000494 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003c2:	f000 f9d5 	bl	8000770 <MX_GPIO_Init>
  MX_DMA_Init();
 80003c6:	f000 f9b5 	bl	8000734 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80003ca:	f000 f983 	bl	80006d4 <MX_USART2_UART_Init>
  MX_CAN_Init();
 80003ce:	f000 f92d 	bl	800062c <MX_CAN_Init>
  MX_ADC1_Init();
 80003d2:	f000 f8b7 	bl	8000544 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
	HAL_CAN_Start(&hcan);
 80003d6:	4827      	ldr	r0, [pc, #156]	@ (8000474 <main+0xc0>)
 80003d8:	f001 fb01 	bl	80019de <HAL_CAN_Start>

	if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING)
 80003dc:	2102      	movs	r1, #2
 80003de:	4825      	ldr	r0, [pc, #148]	@ (8000474 <main+0xc0>)
 80003e0:	f001 fd33 	bl	8001e4a <HAL_CAN_ActivateNotification>
 80003e4:	4603      	mov	r3, r0
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d001      	beq.n	80003ee <main+0x3a>
			!= HAL_OK) {
		Error_Handler();
 80003ea:	f000 fa43 	bl	8000874 <Error_Handler>
  /* definition and creation of parked */


  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	CANq = xQueueCreate(100, sizeof(struct CANframe));
 80003ee:	2200      	movs	r2, #0
 80003f0:	210c      	movs	r1, #12
 80003f2:	2064      	movs	r0, #100	@ 0x64
 80003f4:	f004 fee4 	bl	80051c0 <xQueueGenericCreate>
 80003f8:	4603      	mov	r3, r0
 80003fa:	4a1f      	ldr	r2, [pc, #124]	@ (8000478 <main+0xc4>)
 80003fc:	6013      	str	r3, [r2, #0]

	osThreadDef(parked, parked_init, osPriorityNormal, 0, 128);
 80003fe:	4b1f      	ldr	r3, [pc, #124]	@ (800047c <main+0xc8>)
 8000400:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8000404:	461d      	mov	r5, r3
 8000406:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000408:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800040a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800040e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	parkedHandle = osThreadCreate(osThread(parked), NULL);
 8000412:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000416:	2100      	movs	r1, #0
 8000418:	4618      	mov	r0, r3
 800041a:	f004 fd53 	bl	8004ec4 <osThreadCreate>
 800041e:	4603      	mov	r3, r0
 8000420:	4a17      	ldr	r2, [pc, #92]	@ (8000480 <main+0xcc>)
 8000422:	6013      	str	r3, [r2, #0]

	osThreadDef(canTxTask, StartCanTxTask, osPriorityHigh, 0, 128);
 8000424:	4b17      	ldr	r3, [pc, #92]	@ (8000484 <main+0xd0>)
 8000426:	f107 0420 	add.w	r4, r7, #32
 800042a:	461d      	mov	r5, r3
 800042c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800042e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000430:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000434:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	canTxTaskHandle = osThreadCreate(osThread(canTxTask), NULL);
 8000438:	f107 0320 	add.w	r3, r7, #32
 800043c:	2100      	movs	r1, #0
 800043e:	4618      	mov	r0, r3
 8000440:	f004 fd40 	bl	8004ec4 <osThreadCreate>
 8000444:	4603      	mov	r3, r0
 8000446:	4a10      	ldr	r2, [pc, #64]	@ (8000488 <main+0xd4>)
 8000448:	6013      	str	r3, [r2, #0]

	osThreadDef(canRxTask, StartCanRxTask, osPriorityNormal, 0, 128);
 800044a:	4b10      	ldr	r3, [pc, #64]	@ (800048c <main+0xd8>)
 800044c:	1d3c      	adds	r4, r7, #4
 800044e:	461d      	mov	r5, r3
 8000450:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000452:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000454:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000458:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	canRxTaskHandle = osThreadCreate(osThread(canRxTask), NULL);
 800045c:	1d3b      	adds	r3, r7, #4
 800045e:	2100      	movs	r1, #0
 8000460:	4618      	mov	r0, r3
 8000462:	f004 fd2f 	bl	8004ec4 <osThreadCreate>
 8000466:	4603      	mov	r3, r0
 8000468:	4a09      	ldr	r2, [pc, #36]	@ (8000490 <main+0xdc>)
 800046a:	6013      	str	r3, [r2, #0]


  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800046c:	f004 fd23 	bl	8004eb6 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000470:	bf00      	nop
 8000472:	e7fd      	b.n	8000470 <main+0xbc>
 8000474:	20000350 	.word	0x20000350
 8000478:	2000040c 	.word	0x2000040c
 800047c:	08006b9c 	.word	0x08006b9c
 8000480:	20000400 	.word	0x20000400
 8000484:	08006bc4 	.word	0x08006bc4
 8000488:	20000404 	.word	0x20000404
 800048c:	08006bec 	.word	0x08006bec
 8000490:	20000408 	.word	0x20000408

08000494 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b09c      	sub	sp, #112	@ 0x70
 8000498:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800049a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800049e:	2228      	movs	r2, #40	@ 0x28
 80004a0:	2100      	movs	r1, #0
 80004a2:	4618      	mov	r0, r3
 80004a4:	f006 fb2a 	bl	8006afc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004a8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80004ac:	2200      	movs	r2, #0
 80004ae:	601a      	str	r2, [r3, #0]
 80004b0:	605a      	str	r2, [r3, #4]
 80004b2:	609a      	str	r2, [r3, #8]
 80004b4:	60da      	str	r2, [r3, #12]
 80004b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004b8:	463b      	mov	r3, r7
 80004ba:	2234      	movs	r2, #52	@ 0x34
 80004bc:	2100      	movs	r1, #0
 80004be:	4618      	mov	r0, r3
 80004c0:	f006 fb1c 	bl	8006afc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004c4:	2302      	movs	r3, #2
 80004c6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004c8:	2301      	movs	r3, #1
 80004ca:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004cc:	2310      	movs	r3, #16
 80004ce:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004d0:	2302      	movs	r3, #2
 80004d2:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80004d4:	2300      	movs	r3, #0
 80004d6:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80004d8:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 80004dc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004de:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80004e2:	4618      	mov	r0, r3
 80004e4:	f002 fa96 	bl	8002a14 <HAL_RCC_OscConfig>
 80004e8:	4603      	mov	r3, r0
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d001      	beq.n	80004f2 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80004ee:	f000 f9c1 	bl	8000874 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004f2:	230f      	movs	r3, #15
 80004f4:	637b      	str	r3, [r7, #52]	@ 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004f6:	2302      	movs	r3, #2
 80004f8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004fa:	2300      	movs	r3, #0
 80004fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000502:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000504:	2300      	movs	r3, #0
 8000506:	647b      	str	r3, [r7, #68]	@ 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000508:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800050c:	2102      	movs	r1, #2
 800050e:	4618      	mov	r0, r3
 8000510:	f003 fabe 	bl	8003a90 <HAL_RCC_ClockConfig>
 8000514:	4603      	mov	r3, r0
 8000516:	2b00      	cmp	r3, #0
 8000518:	d001      	beq.n	800051e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800051a:	f000 f9ab 	bl	8000874 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC1;
 800051e:	2380      	movs	r3, #128	@ 0x80
 8000520:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Adc1ClockSelection = RCC_ADC1PLLCLK_DIV1;
 8000522:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000526:	61bb      	str	r3, [r7, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000528:	463b      	mov	r3, r7
 800052a:	4618      	mov	r0, r3
 800052c:	f003 fd02 	bl	8003f34 <HAL_RCCEx_PeriphCLKConfig>
 8000530:	4603      	mov	r3, r0
 8000532:	2b00      	cmp	r3, #0
 8000534:	d001      	beq.n	800053a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000536:	f000 f99d 	bl	8000874 <Error_Handler>
  }
}
 800053a:	bf00      	nop
 800053c:	3770      	adds	r7, #112	@ 0x70
 800053e:	46bd      	mov	sp, r7
 8000540:	bd80      	pop	{r7, pc}
	...

08000544 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b086      	sub	sp, #24
 8000548:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800054a:	463b      	mov	r3, r7
 800054c:	2200      	movs	r2, #0
 800054e:	601a      	str	r2, [r3, #0]
 8000550:	605a      	str	r2, [r3, #4]
 8000552:	609a      	str	r2, [r3, #8]
 8000554:	60da      	str	r2, [r3, #12]
 8000556:	611a      	str	r2, [r3, #16]
 8000558:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800055a:	4b33      	ldr	r3, [pc, #204]	@ (8000628 <MX_ADC1_Init+0xe4>)
 800055c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000560:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000562:	4b31      	ldr	r3, [pc, #196]	@ (8000628 <MX_ADC1_Init+0xe4>)
 8000564:	2200      	movs	r2, #0
 8000566:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000568:	4b2f      	ldr	r3, [pc, #188]	@ (8000628 <MX_ADC1_Init+0xe4>)
 800056a:	2200      	movs	r2, #0
 800056c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800056e:	4b2e      	ldr	r3, [pc, #184]	@ (8000628 <MX_ADC1_Init+0xe4>)
 8000570:	2201      	movs	r2, #1
 8000572:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000574:	4b2c      	ldr	r3, [pc, #176]	@ (8000628 <MX_ADC1_Init+0xe4>)
 8000576:	2201      	movs	r2, #1
 8000578:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800057a:	4b2b      	ldr	r3, [pc, #172]	@ (8000628 <MX_ADC1_Init+0xe4>)
 800057c:	2200      	movs	r2, #0
 800057e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000582:	4b29      	ldr	r3, [pc, #164]	@ (8000628 <MX_ADC1_Init+0xe4>)
 8000584:	2200      	movs	r2, #0
 8000586:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000588:	4b27      	ldr	r3, [pc, #156]	@ (8000628 <MX_ADC1_Init+0xe4>)
 800058a:	2201      	movs	r2, #1
 800058c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800058e:	4b26      	ldr	r3, [pc, #152]	@ (8000628 <MX_ADC1_Init+0xe4>)
 8000590:	2200      	movs	r2, #0
 8000592:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8000594:	4b24      	ldr	r3, [pc, #144]	@ (8000628 <MX_ADC1_Init+0xe4>)
 8000596:	2203      	movs	r2, #3
 8000598:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800059a:	4b23      	ldr	r3, [pc, #140]	@ (8000628 <MX_ADC1_Init+0xe4>)
 800059c:	2201      	movs	r2, #1
 800059e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005a2:	4b21      	ldr	r3, [pc, #132]	@ (8000628 <MX_ADC1_Init+0xe4>)
 80005a4:	2204      	movs	r2, #4
 80005a6:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80005a8:	4b1f      	ldr	r3, [pc, #124]	@ (8000628 <MX_ADC1_Init+0xe4>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80005ae:	4b1e      	ldr	r3, [pc, #120]	@ (8000628 <MX_ADC1_Init+0xe4>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005b4:	481c      	ldr	r0, [pc, #112]	@ (8000628 <MX_ADC1_Init+0xe4>)
 80005b6:	f000 fbaf 	bl	8000d18 <HAL_ADC_Init>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d001      	beq.n	80005c4 <MX_ADC1_Init+0x80>
  {
    Error_Handler();
 80005c0:	f000 f958 	bl	8000874 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80005c4:	2301      	movs	r3, #1
 80005c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005c8:	2301      	movs	r3, #1
 80005ca:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80005cc:	2300      	movs	r3, #0
 80005ce:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80005d0:	2300      	movs	r3, #0
 80005d2:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80005d4:	2300      	movs	r3, #0
 80005d6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80005d8:	2300      	movs	r3, #0
 80005da:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005dc:	463b      	mov	r3, r7
 80005de:	4619      	mov	r1, r3
 80005e0:	4811      	ldr	r0, [pc, #68]	@ (8000628 <MX_ADC1_Init+0xe4>)
 80005e2:	f000 fd1f 	bl	8001024 <HAL_ADC_ConfigChannel>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80005ec:	f000 f942 	bl	8000874 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80005f0:	2302      	movs	r3, #2
 80005f2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005f4:	463b      	mov	r3, r7
 80005f6:	4619      	mov	r1, r3
 80005f8:	480b      	ldr	r0, [pc, #44]	@ (8000628 <MX_ADC1_Init+0xe4>)
 80005fa:	f000 fd13 	bl	8001024 <HAL_ADC_ConfigChannel>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 8000604:	f000 f936 	bl	8000874 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000608:	2303      	movs	r3, #3
 800060a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800060c:	463b      	mov	r3, r7
 800060e:	4619      	mov	r1, r3
 8000610:	4805      	ldr	r0, [pc, #20]	@ (8000628 <MX_ADC1_Init+0xe4>)
 8000612:	f000 fd07 	bl	8001024 <HAL_ADC_ConfigChannel>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 800061c:	f000 f92a 	bl	8000874 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000620:	bf00      	nop
 8000622:	3718      	adds	r7, #24
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	200002bc 	.word	0x200002bc

0800062c <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b08a      	sub	sp, #40	@ 0x28
 8000630:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8000632:	4b26      	ldr	r3, [pc, #152]	@ (80006cc <MX_CAN_Init+0xa0>)
 8000634:	4a26      	ldr	r2, [pc, #152]	@ (80006d0 <MX_CAN_Init+0xa4>)
 8000636:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 8;
 8000638:	4b24      	ldr	r3, [pc, #144]	@ (80006cc <MX_CAN_Init+0xa0>)
 800063a:	2208      	movs	r2, #8
 800063c:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_LOOPBACK;
 800063e:	4b23      	ldr	r3, [pc, #140]	@ (80006cc <MX_CAN_Init+0xa0>)
 8000640:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000644:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000646:	4b21      	ldr	r3, [pc, #132]	@ (80006cc <MX_CAN_Init+0xa0>)
 8000648:	2200      	movs	r2, #0
 800064a:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 800064c:	4b1f      	ldr	r3, [pc, #124]	@ (80006cc <MX_CAN_Init+0xa0>)
 800064e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000652:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_5TQ;
 8000654:	4b1d      	ldr	r3, [pc, #116]	@ (80006cc <MX_CAN_Init+0xa0>)
 8000656:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800065a:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800065c:	4b1b      	ldr	r3, [pc, #108]	@ (80006cc <MX_CAN_Init+0xa0>)
 800065e:	2200      	movs	r2, #0
 8000660:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000662:	4b1a      	ldr	r3, [pc, #104]	@ (80006cc <MX_CAN_Init+0xa0>)
 8000664:	2200      	movs	r2, #0
 8000666:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000668:	4b18      	ldr	r3, [pc, #96]	@ (80006cc <MX_CAN_Init+0xa0>)
 800066a:	2200      	movs	r2, #0
 800066c:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800066e:	4b17      	ldr	r3, [pc, #92]	@ (80006cc <MX_CAN_Init+0xa0>)
 8000670:	2200      	movs	r2, #0
 8000672:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000674:	4b15      	ldr	r3, [pc, #84]	@ (80006cc <MX_CAN_Init+0xa0>)
 8000676:	2200      	movs	r2, #0
 8000678:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800067a:	4b14      	ldr	r3, [pc, #80]	@ (80006cc <MX_CAN_Init+0xa0>)
 800067c:	2200      	movs	r2, #0
 800067e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000680:	4812      	ldr	r0, [pc, #72]	@ (80006cc <MX_CAN_Init+0xa0>)
 8000682:	f000 ffe7 	bl	8001654 <HAL_CAN_Init>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <MX_CAN_Init+0x64>
  {
    Error_Handler();
 800068c:	f000 f8f2 	bl	8000874 <Error_Handler>
	//Set a up a filter
	//Allow all messages to pass through from any ID

	CAN_FilterTypeDef canfilterconfig;

	canfilterconfig.FilterActivation = ENABLE;
 8000690:	2301      	movs	r3, #1
 8000692:	623b      	str	r3, [r7, #32]
	canfilterconfig.FilterBank = 0;
 8000694:	2300      	movs	r3, #0
 8000696:	617b      	str	r3, [r7, #20]
	canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000698:	2300      	movs	r3, #0
 800069a:	613b      	str	r3, [r7, #16]
	canfilterconfig.FilterIdHigh = 0x0000;
 800069c:	2300      	movs	r3, #0
 800069e:	603b      	str	r3, [r7, #0]
	canfilterconfig.FilterIdLow = 0x0000;
 80006a0:	2300      	movs	r3, #0
 80006a2:	607b      	str	r3, [r7, #4]
	canfilterconfig.FilterMaskIdHigh = 0x0000;
 80006a4:	2300      	movs	r3, #0
 80006a6:	60bb      	str	r3, [r7, #8]
	canfilterconfig.FilterMaskIdLow = 0x0000;
 80006a8:	2300      	movs	r3, #0
 80006aa:	60fb      	str	r3, [r7, #12]
	canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80006ac:	2300      	movs	r3, #0
 80006ae:	61bb      	str	r3, [r7, #24]
	canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80006b0:	2301      	movs	r3, #1
 80006b2:	61fb      	str	r3, [r7, #28]
	canfilterconfig.SlaveStartFilterBank = 14;
 80006b4:	230e      	movs	r3, #14
 80006b6:	627b      	str	r3, [r7, #36]	@ 0x24

	HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 80006b8:	463b      	mov	r3, r7
 80006ba:	4619      	mov	r1, r3
 80006bc:	4803      	ldr	r0, [pc, #12]	@ (80006cc <MX_CAN_Init+0xa0>)
 80006be:	f001 f8c4 	bl	800184a <HAL_CAN_ConfigFilter>

  /* USER CODE END CAN_Init 2 */

}
 80006c2:	bf00      	nop
 80006c4:	3728      	adds	r7, #40	@ 0x28
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	20000350 	.word	0x20000350
 80006d0:	40006400 	.word	0x40006400

080006d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006d8:	4b14      	ldr	r3, [pc, #80]	@ (800072c <MX_USART2_UART_Init+0x58>)
 80006da:	4a15      	ldr	r2, [pc, #84]	@ (8000730 <MX_USART2_UART_Init+0x5c>)
 80006dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80006de:	4b13      	ldr	r3, [pc, #76]	@ (800072c <MX_USART2_UART_Init+0x58>)
 80006e0:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 80006e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006e6:	4b11      	ldr	r3, [pc, #68]	@ (800072c <MX_USART2_UART_Init+0x58>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006ec:	4b0f      	ldr	r3, [pc, #60]	@ (800072c <MX_USART2_UART_Init+0x58>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006f2:	4b0e      	ldr	r3, [pc, #56]	@ (800072c <MX_USART2_UART_Init+0x58>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006f8:	4b0c      	ldr	r3, [pc, #48]	@ (800072c <MX_USART2_UART_Init+0x58>)
 80006fa:	220c      	movs	r2, #12
 80006fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006fe:	4b0b      	ldr	r3, [pc, #44]	@ (800072c <MX_USART2_UART_Init+0x58>)
 8000700:	2200      	movs	r2, #0
 8000702:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000704:	4b09      	ldr	r3, [pc, #36]	@ (800072c <MX_USART2_UART_Init+0x58>)
 8000706:	2200      	movs	r2, #0
 8000708:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800070a:	4b08      	ldr	r3, [pc, #32]	@ (800072c <MX_USART2_UART_Init+0x58>)
 800070c:	2200      	movs	r2, #0
 800070e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000710:	4b06      	ldr	r3, [pc, #24]	@ (800072c <MX_USART2_UART_Init+0x58>)
 8000712:	2200      	movs	r2, #0
 8000714:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000716:	4805      	ldr	r0, [pc, #20]	@ (800072c <MX_USART2_UART_Init+0x58>)
 8000718:	f004 f816 	bl	8004748 <HAL_UART_Init>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000722:	f000 f8a7 	bl	8000874 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000726:	bf00      	nop
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	20000378 	.word	0x20000378
 8000730:	40004400 	.word	0x40004400

08000734 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800073a:	4b0c      	ldr	r3, [pc, #48]	@ (800076c <MX_DMA_Init+0x38>)
 800073c:	695b      	ldr	r3, [r3, #20]
 800073e:	4a0b      	ldr	r2, [pc, #44]	@ (800076c <MX_DMA_Init+0x38>)
 8000740:	f043 0301 	orr.w	r3, r3, #1
 8000744:	6153      	str	r3, [r2, #20]
 8000746:	4b09      	ldr	r3, [pc, #36]	@ (800076c <MX_DMA_Init+0x38>)
 8000748:	695b      	ldr	r3, [r3, #20]
 800074a:	f003 0301 	and.w	r3, r3, #1
 800074e:	607b      	str	r3, [r7, #4]
 8000750:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8000752:	2200      	movs	r2, #0
 8000754:	2105      	movs	r1, #5
 8000756:	200b      	movs	r0, #11
 8000758:	f001 fe84 	bl	8002464 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800075c:	200b      	movs	r0, #11
 800075e:	f001 fe9d 	bl	800249c <HAL_NVIC_EnableIRQ>

}
 8000762:	bf00      	nop
 8000764:	3708      	adds	r7, #8
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	40021000 	.word	0x40021000

08000770 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b08a      	sub	sp, #40	@ 0x28
 8000774:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000776:	f107 0314 	add.w	r3, r7, #20
 800077a:	2200      	movs	r2, #0
 800077c:	601a      	str	r2, [r3, #0]
 800077e:	605a      	str	r2, [r3, #4]
 8000780:	609a      	str	r2, [r3, #8]
 8000782:	60da      	str	r2, [r3, #12]
 8000784:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000786:	4b2b      	ldr	r3, [pc, #172]	@ (8000834 <MX_GPIO_Init+0xc4>)
 8000788:	695b      	ldr	r3, [r3, #20]
 800078a:	4a2a      	ldr	r2, [pc, #168]	@ (8000834 <MX_GPIO_Init+0xc4>)
 800078c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000790:	6153      	str	r3, [r2, #20]
 8000792:	4b28      	ldr	r3, [pc, #160]	@ (8000834 <MX_GPIO_Init+0xc4>)
 8000794:	695b      	ldr	r3, [r3, #20]
 8000796:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800079a:	613b      	str	r3, [r7, #16]
 800079c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800079e:	4b25      	ldr	r3, [pc, #148]	@ (8000834 <MX_GPIO_Init+0xc4>)
 80007a0:	695b      	ldr	r3, [r3, #20]
 80007a2:	4a24      	ldr	r2, [pc, #144]	@ (8000834 <MX_GPIO_Init+0xc4>)
 80007a4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80007a8:	6153      	str	r3, [r2, #20]
 80007aa:	4b22      	ldr	r3, [pc, #136]	@ (8000834 <MX_GPIO_Init+0xc4>)
 80007ac:	695b      	ldr	r3, [r3, #20]
 80007ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80007b2:	60fb      	str	r3, [r7, #12]
 80007b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b6:	4b1f      	ldr	r3, [pc, #124]	@ (8000834 <MX_GPIO_Init+0xc4>)
 80007b8:	695b      	ldr	r3, [r3, #20]
 80007ba:	4a1e      	ldr	r2, [pc, #120]	@ (8000834 <MX_GPIO_Init+0xc4>)
 80007bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007c0:	6153      	str	r3, [r2, #20]
 80007c2:	4b1c      	ldr	r3, [pc, #112]	@ (8000834 <MX_GPIO_Init+0xc4>)
 80007c4:	695b      	ldr	r3, [r3, #20]
 80007c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80007ca:	60bb      	str	r3, [r7, #8]
 80007cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ce:	4b19      	ldr	r3, [pc, #100]	@ (8000834 <MX_GPIO_Init+0xc4>)
 80007d0:	695b      	ldr	r3, [r3, #20]
 80007d2:	4a18      	ldr	r2, [pc, #96]	@ (8000834 <MX_GPIO_Init+0xc4>)
 80007d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80007d8:	6153      	str	r3, [r2, #20]
 80007da:	4b16      	ldr	r3, [pc, #88]	@ (8000834 <MX_GPIO_Init+0xc4>)
 80007dc:	695b      	ldr	r3, [r3, #20]
 80007de:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80007e2:	607b      	str	r3, [r7, #4]
 80007e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007e6:	2200      	movs	r2, #0
 80007e8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007ec:	4812      	ldr	r0, [pc, #72]	@ (8000838 <MX_GPIO_Init+0xc8>)
 80007ee:	f002 f8df 	bl	80029b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007f2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007f8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80007fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fe:	2300      	movs	r3, #0
 8000800:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000802:	f107 0314 	add.w	r3, r7, #20
 8000806:	4619      	mov	r1, r3
 8000808:	480c      	ldr	r0, [pc, #48]	@ (800083c <MX_GPIO_Init+0xcc>)
 800080a:	f001 ff5f 	bl	80026cc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800080e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000812:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000814:	2301      	movs	r3, #1
 8000816:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000818:	2300      	movs	r3, #0
 800081a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081c:	2300      	movs	r3, #0
 800081e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000820:	f107 0314 	add.w	r3, r7, #20
 8000824:	4619      	mov	r1, r3
 8000826:	4804      	ldr	r0, [pc, #16]	@ (8000838 <MX_GPIO_Init+0xc8>)
 8000828:	f001 ff50 	bl	80026cc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800082c:	bf00      	nop
 800082e:	3728      	adds	r7, #40	@ 0x28
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	40021000 	.word	0x40021000
 8000838:	48000400 	.word	0x48000400
 800083c:	48000800 	.word	0x48000800

08000840 <parked_init>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_parked_init */
void parked_init(void const * argument)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8000848:	2001      	movs	r0, #1
 800084a:	f004 fb87 	bl	8004f5c <osDelay>
 800084e:	e7fb      	b.n	8000848 <parked_init+0x8>

08000850 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4a04      	ldr	r2, [pc, #16]	@ (8000870 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800085e:	4293      	cmp	r3, r2
 8000860:	d101      	bne.n	8000866 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000862:	f000 fa39 	bl	8000cd8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000866:	bf00      	nop
 8000868:	3708      	adds	r7, #8
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	40012c00 	.word	0x40012c00

08000874 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000878:	b672      	cpsid	i
}
 800087a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800087c:	bf00      	nop
 800087e:	e7fd      	b.n	800087c <Error_Handler+0x8>

08000880 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000886:	4b11      	ldr	r3, [pc, #68]	@ (80008cc <HAL_MspInit+0x4c>)
 8000888:	699b      	ldr	r3, [r3, #24]
 800088a:	4a10      	ldr	r2, [pc, #64]	@ (80008cc <HAL_MspInit+0x4c>)
 800088c:	f043 0301 	orr.w	r3, r3, #1
 8000890:	6193      	str	r3, [r2, #24]
 8000892:	4b0e      	ldr	r3, [pc, #56]	@ (80008cc <HAL_MspInit+0x4c>)
 8000894:	699b      	ldr	r3, [r3, #24]
 8000896:	f003 0301 	and.w	r3, r3, #1
 800089a:	607b      	str	r3, [r7, #4]
 800089c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800089e:	4b0b      	ldr	r3, [pc, #44]	@ (80008cc <HAL_MspInit+0x4c>)
 80008a0:	69db      	ldr	r3, [r3, #28]
 80008a2:	4a0a      	ldr	r2, [pc, #40]	@ (80008cc <HAL_MspInit+0x4c>)
 80008a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008a8:	61d3      	str	r3, [r2, #28]
 80008aa:	4b08      	ldr	r3, [pc, #32]	@ (80008cc <HAL_MspInit+0x4c>)
 80008ac:	69db      	ldr	r3, [r3, #28]
 80008ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008b2:	603b      	str	r3, [r7, #0]
 80008b4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008b6:	2200      	movs	r2, #0
 80008b8:	210f      	movs	r1, #15
 80008ba:	f06f 0001 	mvn.w	r0, #1
 80008be:	f001 fdd1 	bl	8002464 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008c2:	bf00      	nop
 80008c4:	3708      	adds	r7, #8
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	40021000 	.word	0x40021000

080008d0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b08a      	sub	sp, #40	@ 0x28
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d8:	f107 0314 	add.w	r3, r7, #20
 80008dc:	2200      	movs	r2, #0
 80008de:	601a      	str	r2, [r3, #0]
 80008e0:	605a      	str	r2, [r3, #4]
 80008e2:	609a      	str	r2, [r3, #8]
 80008e4:	60da      	str	r2, [r3, #12]
 80008e6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80008f0:	d14c      	bne.n	800098c <HAL_ADC_MspInit+0xbc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80008f2:	4b28      	ldr	r3, [pc, #160]	@ (8000994 <HAL_ADC_MspInit+0xc4>)
 80008f4:	695b      	ldr	r3, [r3, #20]
 80008f6:	4a27      	ldr	r2, [pc, #156]	@ (8000994 <HAL_ADC_MspInit+0xc4>)
 80008f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008fc:	6153      	str	r3, [r2, #20]
 80008fe:	4b25      	ldr	r3, [pc, #148]	@ (8000994 <HAL_ADC_MspInit+0xc4>)
 8000900:	695b      	ldr	r3, [r3, #20]
 8000902:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000906:	613b      	str	r3, [r7, #16]
 8000908:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800090a:	4b22      	ldr	r3, [pc, #136]	@ (8000994 <HAL_ADC_MspInit+0xc4>)
 800090c:	695b      	ldr	r3, [r3, #20]
 800090e:	4a21      	ldr	r2, [pc, #132]	@ (8000994 <HAL_ADC_MspInit+0xc4>)
 8000910:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000914:	6153      	str	r3, [r2, #20]
 8000916:	4b1f      	ldr	r3, [pc, #124]	@ (8000994 <HAL_ADC_MspInit+0xc4>)
 8000918:	695b      	ldr	r3, [r3, #20]
 800091a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800091e:	60fb      	str	r3, [r7, #12]
 8000920:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000922:	2301      	movs	r3, #1
 8000924:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000926:	2303      	movs	r3, #3
 8000928:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092a:	2300      	movs	r3, #0
 800092c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800092e:	f107 0314 	add.w	r3, r7, #20
 8000932:	4619      	mov	r1, r3
 8000934:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000938:	f001 fec8 	bl	80026cc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800093c:	4b16      	ldr	r3, [pc, #88]	@ (8000998 <HAL_ADC_MspInit+0xc8>)
 800093e:	4a17      	ldr	r2, [pc, #92]	@ (800099c <HAL_ADC_MspInit+0xcc>)
 8000940:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000942:	4b15      	ldr	r3, [pc, #84]	@ (8000998 <HAL_ADC_MspInit+0xc8>)
 8000944:	2200      	movs	r2, #0
 8000946:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000948:	4b13      	ldr	r3, [pc, #76]	@ (8000998 <HAL_ADC_MspInit+0xc8>)
 800094a:	2200      	movs	r2, #0
 800094c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800094e:	4b12      	ldr	r3, [pc, #72]	@ (8000998 <HAL_ADC_MspInit+0xc8>)
 8000950:	2280      	movs	r2, #128	@ 0x80
 8000952:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000954:	4b10      	ldr	r3, [pc, #64]	@ (8000998 <HAL_ADC_MspInit+0xc8>)
 8000956:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800095a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800095c:	4b0e      	ldr	r3, [pc, #56]	@ (8000998 <HAL_ADC_MspInit+0xc8>)
 800095e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000962:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000964:	4b0c      	ldr	r3, [pc, #48]	@ (8000998 <HAL_ADC_MspInit+0xc8>)
 8000966:	2200      	movs	r2, #0
 8000968:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800096a:	4b0b      	ldr	r3, [pc, #44]	@ (8000998 <HAL_ADC_MspInit+0xc8>)
 800096c:	2200      	movs	r2, #0
 800096e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000970:	4809      	ldr	r0, [pc, #36]	@ (8000998 <HAL_ADC_MspInit+0xc8>)
 8000972:	f001 fda1 	bl	80024b8 <HAL_DMA_Init>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 800097c:	f7ff ff7a 	bl	8000874 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	4a05      	ldr	r2, [pc, #20]	@ (8000998 <HAL_ADC_MspInit+0xc8>)
 8000984:	639a      	str	r2, [r3, #56]	@ 0x38
 8000986:	4a04      	ldr	r2, [pc, #16]	@ (8000998 <HAL_ADC_MspInit+0xc8>)
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	6253      	str	r3, [r2, #36]	@ 0x24

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800098c:	bf00      	nop
 800098e:	3728      	adds	r7, #40	@ 0x28
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	40021000 	.word	0x40021000
 8000998:	2000030c 	.word	0x2000030c
 800099c:	40020008 	.word	0x40020008

080009a0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b08a      	sub	sp, #40	@ 0x28
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a8:	f107 0314 	add.w	r3, r7, #20
 80009ac:	2200      	movs	r2, #0
 80009ae:	601a      	str	r2, [r3, #0]
 80009b0:	605a      	str	r2, [r3, #4]
 80009b2:	609a      	str	r2, [r3, #8]
 80009b4:	60da      	str	r2, [r3, #12]
 80009b6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4a25      	ldr	r2, [pc, #148]	@ (8000a54 <HAL_CAN_MspInit+0xb4>)
 80009be:	4293      	cmp	r3, r2
 80009c0:	d143      	bne.n	8000a4a <HAL_CAN_MspInit+0xaa>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80009c2:	4b25      	ldr	r3, [pc, #148]	@ (8000a58 <HAL_CAN_MspInit+0xb8>)
 80009c4:	69db      	ldr	r3, [r3, #28]
 80009c6:	4a24      	ldr	r2, [pc, #144]	@ (8000a58 <HAL_CAN_MspInit+0xb8>)
 80009c8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80009cc:	61d3      	str	r3, [r2, #28]
 80009ce:	4b22      	ldr	r3, [pc, #136]	@ (8000a58 <HAL_CAN_MspInit+0xb8>)
 80009d0:	69db      	ldr	r3, [r3, #28]
 80009d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80009d6:	613b      	str	r3, [r7, #16]
 80009d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009da:	4b1f      	ldr	r3, [pc, #124]	@ (8000a58 <HAL_CAN_MspInit+0xb8>)
 80009dc:	695b      	ldr	r3, [r3, #20]
 80009de:	4a1e      	ldr	r2, [pc, #120]	@ (8000a58 <HAL_CAN_MspInit+0xb8>)
 80009e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009e4:	6153      	str	r3, [r2, #20]
 80009e6:	4b1c      	ldr	r3, [pc, #112]	@ (8000a58 <HAL_CAN_MspInit+0xb8>)
 80009e8:	695b      	ldr	r3, [r3, #20]
 80009ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009ee:	60fb      	str	r3, [r7, #12]
 80009f0:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80009f2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80009f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f8:	2302      	movs	r3, #2
 80009fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009fc:	2301      	movs	r3, #1
 80009fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a00:	2303      	movs	r3, #3
 8000a02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM1;
 8000a04:	2309      	movs	r3, #9
 8000a06:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a08:	f107 0314 	add.w	r3, r7, #20
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a12:	f001 fe5b 	bl	80026cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000a16:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1c:	2302      	movs	r3, #2
 8000a1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a24:	2303      	movs	r3, #3
 8000a26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM1;
 8000a28:	2309      	movs	r3, #9
 8000a2a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a2c:	f107 0314 	add.w	r3, r7, #20
 8000a30:	4619      	mov	r1, r3
 8000a32:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a36:	f001 fe49 	bl	80026cc <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 5, 0);
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	2105      	movs	r1, #5
 8000a3e:	2014      	movs	r0, #20
 8000a40:	f001 fd10 	bl	8002464 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 8000a44:	2014      	movs	r0, #20
 8000a46:	f001 fd29 	bl	800249c <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN_MspInit 1 */

  }

}
 8000a4a:	bf00      	nop
 8000a4c:	3728      	adds	r7, #40	@ 0x28
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	40006400 	.word	0x40006400
 8000a58:	40021000 	.word	0x40021000

08000a5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b08a      	sub	sp, #40	@ 0x28
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a64:	f107 0314 	add.w	r3, r7, #20
 8000a68:	2200      	movs	r2, #0
 8000a6a:	601a      	str	r2, [r3, #0]
 8000a6c:	605a      	str	r2, [r3, #4]
 8000a6e:	609a      	str	r2, [r3, #8]
 8000a70:	60da      	str	r2, [r3, #12]
 8000a72:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a17      	ldr	r2, [pc, #92]	@ (8000ad8 <HAL_UART_MspInit+0x7c>)
 8000a7a:	4293      	cmp	r3, r2
 8000a7c:	d128      	bne.n	8000ad0 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a7e:	4b17      	ldr	r3, [pc, #92]	@ (8000adc <HAL_UART_MspInit+0x80>)
 8000a80:	69db      	ldr	r3, [r3, #28]
 8000a82:	4a16      	ldr	r2, [pc, #88]	@ (8000adc <HAL_UART_MspInit+0x80>)
 8000a84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a88:	61d3      	str	r3, [r2, #28]
 8000a8a:	4b14      	ldr	r3, [pc, #80]	@ (8000adc <HAL_UART_MspInit+0x80>)
 8000a8c:	69db      	ldr	r3, [r3, #28]
 8000a8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a92:	613b      	str	r3, [r7, #16]
 8000a94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a96:	4b11      	ldr	r3, [pc, #68]	@ (8000adc <HAL_UART_MspInit+0x80>)
 8000a98:	695b      	ldr	r3, [r3, #20]
 8000a9a:	4a10      	ldr	r2, [pc, #64]	@ (8000adc <HAL_UART_MspInit+0x80>)
 8000a9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000aa0:	6153      	str	r3, [r2, #20]
 8000aa2:	4b0e      	ldr	r3, [pc, #56]	@ (8000adc <HAL_UART_MspInit+0x80>)
 8000aa4:	695b      	ldr	r3, [r3, #20]
 8000aa6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000aaa:	60fb      	str	r3, [r7, #12]
 8000aac:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000aae:	230c      	movs	r3, #12
 8000ab0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aba:	2300      	movs	r3, #0
 8000abc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000abe:	2307      	movs	r3, #7
 8000ac0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac2:	f107 0314 	add.w	r3, r7, #20
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000acc:	f001 fdfe 	bl	80026cc <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000ad0:	bf00      	nop
 8000ad2:	3728      	adds	r7, #40	@ 0x28
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	40004400 	.word	0x40004400
 8000adc:	40021000 	.word	0x40021000

08000ae0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b08c      	sub	sp, #48	@ 0x30
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000aec:	2300      	movs	r3, #0
 8000aee:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000af0:	4b2e      	ldr	r3, [pc, #184]	@ (8000bac <HAL_InitTick+0xcc>)
 8000af2:	699b      	ldr	r3, [r3, #24]
 8000af4:	4a2d      	ldr	r2, [pc, #180]	@ (8000bac <HAL_InitTick+0xcc>)
 8000af6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000afa:	6193      	str	r3, [r2, #24]
 8000afc:	4b2b      	ldr	r3, [pc, #172]	@ (8000bac <HAL_InitTick+0xcc>)
 8000afe:	699b      	ldr	r3, [r3, #24]
 8000b00:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000b04:	60bb      	str	r3, [r7, #8]
 8000b06:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b08:	f107 020c 	add.w	r2, r7, #12
 8000b0c:	f107 0310 	add.w	r3, r7, #16
 8000b10:	4611      	mov	r1, r2
 8000b12:	4618      	mov	r0, r3
 8000b14:	f003 f9dc 	bl	8003ed0 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000b18:	f003 f9b8 	bl	8003e8c <HAL_RCC_GetPCLK2Freq>
 8000b1c:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b20:	4a23      	ldr	r2, [pc, #140]	@ (8000bb0 <HAL_InitTick+0xd0>)
 8000b22:	fba2 2303 	umull	r2, r3, r2, r3
 8000b26:	0c9b      	lsrs	r3, r3, #18
 8000b28:	3b01      	subs	r3, #1
 8000b2a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000b2c:	4b21      	ldr	r3, [pc, #132]	@ (8000bb4 <HAL_InitTick+0xd4>)
 8000b2e:	4a22      	ldr	r2, [pc, #136]	@ (8000bb8 <HAL_InitTick+0xd8>)
 8000b30:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000b32:	4b20      	ldr	r3, [pc, #128]	@ (8000bb4 <HAL_InitTick+0xd4>)
 8000b34:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000b38:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000b3a:	4a1e      	ldr	r2, [pc, #120]	@ (8000bb4 <HAL_InitTick+0xd4>)
 8000b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b3e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000b40:	4b1c      	ldr	r3, [pc, #112]	@ (8000bb4 <HAL_InitTick+0xd4>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b46:	4b1b      	ldr	r3, [pc, #108]	@ (8000bb4 <HAL_InitTick+0xd4>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b4c:	4b19      	ldr	r3, [pc, #100]	@ (8000bb4 <HAL_InitTick+0xd4>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000b52:	4818      	ldr	r0, [pc, #96]	@ (8000bb4 <HAL_InitTick+0xd4>)
 8000b54:	f003 fb80 	bl	8004258 <HAL_TIM_Base_Init>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000b5e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d11b      	bne.n	8000b9e <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000b66:	4813      	ldr	r0, [pc, #76]	@ (8000bb4 <HAL_InitTick+0xd4>)
 8000b68:	f003 fbd8 	bl	800431c <HAL_TIM_Base_Start_IT>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000b72:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d111      	bne.n	8000b9e <HAL_InitTick+0xbe>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000b7a:	2019      	movs	r0, #25
 8000b7c:	f001 fc8e 	bl	800249c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	2b0f      	cmp	r3, #15
 8000b84:	d808      	bhi.n	8000b98 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8000b86:	2200      	movs	r2, #0
 8000b88:	6879      	ldr	r1, [r7, #4]
 8000b8a:	2019      	movs	r0, #25
 8000b8c:	f001 fc6a 	bl	8002464 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b90:	4a0a      	ldr	r2, [pc, #40]	@ (8000bbc <HAL_InitTick+0xdc>)
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	6013      	str	r3, [r2, #0]
 8000b96:	e002      	b.n	8000b9e <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 8000b98:	2301      	movs	r3, #1
 8000b9a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000b9e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	3730      	adds	r7, #48	@ 0x30
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	40021000 	.word	0x40021000
 8000bb0:	431bde83 	.word	0x431bde83
 8000bb4:	20000414 	.word	0x20000414
 8000bb8:	40012c00 	.word	0x40012c00
 8000bbc:	20000004 	.word	0x20000004

08000bc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bc4:	bf00      	nop
 8000bc6:	e7fd      	b.n	8000bc4 <NMI_Handler+0x4>

08000bc8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bcc:	bf00      	nop
 8000bce:	e7fd      	b.n	8000bcc <HardFault_Handler+0x4>

08000bd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bd4:	bf00      	nop
 8000bd6:	e7fd      	b.n	8000bd4 <MemManage_Handler+0x4>

08000bd8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bdc:	bf00      	nop
 8000bde:	e7fd      	b.n	8000bdc <BusFault_Handler+0x4>

08000be0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000be4:	bf00      	nop
 8000be6:	e7fd      	b.n	8000be4 <UsageFault_Handler+0x4>

08000be8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bec:	bf00      	nop
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr
	...

08000bf8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000bfc:	4802      	ldr	r0, [pc, #8]	@ (8000c08 <DMA1_Channel1_IRQHandler+0x10>)
 8000bfe:	f001 fca2 	bl	8002546 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000c02:	bf00      	nop
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	2000030c 	.word	0x2000030c

08000c0c <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles CAN RX0 and USB low priority interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000c10:	4802      	ldr	r0, [pc, #8]	@ (8000c1c <USB_LP_CAN_RX0_IRQHandler+0x10>)
 8000c12:	f001 f940 	bl	8001e96 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 8000c16:	bf00      	nop
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	20000350 	.word	0x20000350

08000c20 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c24:	4802      	ldr	r0, [pc, #8]	@ (8000c30 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000c26:	f003 fbcd 	bl	80043c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	20000414 	.word	0x20000414

08000c34 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c38:	4b06      	ldr	r3, [pc, #24]	@ (8000c54 <SystemInit+0x20>)
 8000c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c3e:	4a05      	ldr	r2, [pc, #20]	@ (8000c54 <SystemInit+0x20>)
 8000c40:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c44:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c48:	bf00      	nop
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	e000ed00 	.word	0xe000ed00

08000c58 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c58:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c90 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c5c:	f7ff ffea 	bl	8000c34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c60:	480c      	ldr	r0, [pc, #48]	@ (8000c94 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c62:	490d      	ldr	r1, [pc, #52]	@ (8000c98 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c64:	4a0d      	ldr	r2, [pc, #52]	@ (8000c9c <LoopForever+0xe>)
  movs r3, #0
 8000c66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c68:	e002      	b.n	8000c70 <LoopCopyDataInit>

08000c6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c6e:	3304      	adds	r3, #4

08000c70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c74:	d3f9      	bcc.n	8000c6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c76:	4a0a      	ldr	r2, [pc, #40]	@ (8000ca0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c78:	4c0a      	ldr	r4, [pc, #40]	@ (8000ca4 <LoopForever+0x16>)
  movs r3, #0
 8000c7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c7c:	e001      	b.n	8000c82 <LoopFillZerobss>

08000c7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c80:	3204      	adds	r2, #4

08000c82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c84:	d3fb      	bcc.n	8000c7e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c86:	f005 ff41 	bl	8006b0c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c8a:	f7ff fb93 	bl	80003b4 <main>

08000c8e <LoopForever>:

LoopForever:
    b LoopForever
 8000c8e:	e7fe      	b.n	8000c8e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c90:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000c94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c98:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000c9c:	08006c50 	.word	0x08006c50
  ldr r2, =_sbss
 8000ca0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000ca4:	20002df0 	.word	0x20002df0

08000ca8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ca8:	e7fe      	b.n	8000ca8 <ADC1_IRQHandler>
	...

08000cac <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cb0:	4b08      	ldr	r3, [pc, #32]	@ (8000cd4 <HAL_Init+0x28>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a07      	ldr	r2, [pc, #28]	@ (8000cd4 <HAL_Init+0x28>)
 8000cb6:	f043 0310 	orr.w	r3, r3, #16
 8000cba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cbc:	2003      	movs	r0, #3
 8000cbe:	f001 fbc6 	bl	800244e <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cc2:	200f      	movs	r0, #15
 8000cc4:	f7ff ff0c 	bl	8000ae0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cc8:	f7ff fdda 	bl	8000880 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ccc:	2300      	movs	r3, #0
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40022000 	.word	0x40022000

08000cd8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cdc:	4b06      	ldr	r3, [pc, #24]	@ (8000cf8 <HAL_IncTick+0x20>)
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	461a      	mov	r2, r3
 8000ce2:	4b06      	ldr	r3, [pc, #24]	@ (8000cfc <HAL_IncTick+0x24>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4413      	add	r3, r2
 8000ce8:	4a04      	ldr	r2, [pc, #16]	@ (8000cfc <HAL_IncTick+0x24>)
 8000cea:	6013      	str	r3, [r2, #0]
}
 8000cec:	bf00      	nop
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	20000008 	.word	0x20000008
 8000cfc:	20000460 	.word	0x20000460

08000d00 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  return uwTick;  
 8000d04:	4b03      	ldr	r3, [pc, #12]	@ (8000d14 <HAL_GetTick+0x14>)
 8000d06:	681b      	ldr	r3, [r3, #0]
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop
 8000d14:	20000460 	.word	0x20000460

08000d18 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b09a      	sub	sp, #104	@ 0x68
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d20:	2300      	movs	r3, #0
 8000d22:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000d26:	2300      	movs	r3, #0
 8000d28:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d101      	bne.n	8000d38 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000d34:	2301      	movs	r3, #1
 8000d36:	e169      	b.n	800100c <HAL_ADC_Init+0x2f4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	691b      	ldr	r3, [r3, #16]
 8000d3c:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d42:	f003 0310 	and.w	r3, r3, #16
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d176      	bne.n	8000e38 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d152      	bne.n	8000df8 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	2200      	movs	r2, #0
 8000d56:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	2200      	movs	r2, #0
 8000d62:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	2200      	movs	r2, #0
 8000d68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000d6c:	6878      	ldr	r0, [r7, #4]
 8000d6e:	f7ff fdaf 	bl	80008d0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	689b      	ldr	r3, [r3, #8]
 8000d78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d13b      	bne.n	8000df8 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000d80:	6878      	ldr	r0, [r7, #4]
 8000d82:	f000 fc01 	bl	8001588 <ADC_Disable>
 8000d86:	4603      	mov	r3, r0
 8000d88:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d90:	f003 0310 	and.w	r3, r3, #16
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d12f      	bne.n	8000df8 <HAL_ADC_Init+0xe0>
 8000d98:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d12b      	bne.n	8000df8 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000da4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000da8:	f023 0302 	bic.w	r3, r3, #2
 8000dac:	f043 0202 	orr.w	r2, r3, #2
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	689a      	ldr	r2, [r3, #8]
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8000dc2:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	689a      	ldr	r2, [r3, #8]
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000dd2:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000dd4:	4b8f      	ldr	r3, [pc, #572]	@ (8001014 <HAL_ADC_Init+0x2fc>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a8f      	ldr	r2, [pc, #572]	@ (8001018 <HAL_ADC_Init+0x300>)
 8000dda:	fba2 2303 	umull	r2, r3, r2, r3
 8000dde:	0c9a      	lsrs	r2, r3, #18
 8000de0:	4613      	mov	r3, r2
 8000de2:	009b      	lsls	r3, r3, #2
 8000de4:	4413      	add	r3, r2
 8000de6:	005b      	lsls	r3, r3, #1
 8000de8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000dea:	e002      	b.n	8000df2 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000dec:	68bb      	ldr	r3, [r7, #8]
 8000dee:	3b01      	subs	r3, #1
 8000df0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000df2:	68bb      	ldr	r3, [r7, #8]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d1f9      	bne.n	8000dec <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	689b      	ldr	r3, [r3, #8]
 8000dfe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d007      	beq.n	8000e16 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	689b      	ldr	r3, [r3, #8]
 8000e0c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000e10:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000e14:	d110      	bne.n	8000e38 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e1a:	f023 0312 	bic.w	r3, r3, #18
 8000e1e:	f043 0210 	orr.w	r2, r3, #16
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e2a:	f043 0201 	orr.w	r2, r3, #1
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000e32:	2301      	movs	r3, #1
 8000e34:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e3c:	f003 0310 	and.w	r3, r3, #16
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	f040 80d6 	bne.w	8000ff2 <HAL_ADC_Init+0x2da>
 8000e46:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	f040 80d1 	bne.w	8000ff2 <HAL_ADC_Init+0x2da>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	689b      	ldr	r3, [r3, #8]
 8000e56:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	f040 80c9 	bne.w	8000ff2 <HAL_ADC_Init+0x2da>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e64:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8000e68:	f043 0202 	orr.w	r2, r3, #2
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000e70:	4b6a      	ldr	r3, [pc, #424]	@ (800101c <HAL_ADC_Init+0x304>)
 8000e72:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000e74:	2300      	movs	r3, #0
 8000e76:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	689b      	ldr	r3, [r3, #8]
 8000e7e:	f003 0303 	and.w	r3, r3, #3
 8000e82:	2b01      	cmp	r3, #1
 8000e84:	d108      	bne.n	8000e98 <HAL_ADC_Init+0x180>
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f003 0301 	and.w	r3, r3, #1
 8000e90:	2b01      	cmp	r3, #1
 8000e92:	d101      	bne.n	8000e98 <HAL_ADC_Init+0x180>
 8000e94:	2301      	movs	r3, #1
 8000e96:	e000      	b.n	8000e9a <HAL_ADC_Init+0x182>
 8000e98:	2300      	movs	r3, #0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d11c      	bne.n	8000ed8 <HAL_ADC_Init+0x1c0>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000e9e:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d010      	beq.n	8000ec6 <HAL_ADC_Init+0x1ae>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	689b      	ldr	r3, [r3, #8]
 8000ea8:	f003 0303 	and.w	r3, r3, #3
 8000eac:	2b01      	cmp	r3, #1
 8000eae:	d107      	bne.n	8000ec0 <HAL_ADC_Init+0x1a8>
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	f003 0301 	and.w	r3, r3, #1
 8000eb8:	2b01      	cmp	r3, #1
 8000eba:	d101      	bne.n	8000ec0 <HAL_ADC_Init+0x1a8>
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	e000      	b.n	8000ec2 <HAL_ADC_Init+0x1aa>
 8000ec0:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d108      	bne.n	8000ed8 <HAL_ADC_Init+0x1c0>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000ec6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000ec8:	689b      	ldr	r3, [r3, #8]
 8000eca:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	431a      	orrs	r2, r3
 8000ed4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000ed6:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	7e5b      	ldrb	r3, [r3, #25]
 8000edc:	035b      	lsls	r3, r3, #13
 8000ede:	687a      	ldr	r2, [r7, #4]
 8000ee0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8000ee2:	2a01      	cmp	r2, #1
 8000ee4:	d002      	beq.n	8000eec <HAL_ADC_Init+0x1d4>
 8000ee6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000eea:	e000      	b.n	8000eee <HAL_ADC_Init+0x1d6>
 8000eec:	2200      	movs	r2, #0
 8000eee:	431a      	orrs	r2, r3
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	68db      	ldr	r3, [r3, #12]
 8000ef4:	431a      	orrs	r2, r3
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	689b      	ldr	r3, [r3, #8]
 8000efa:	4313      	orrs	r3, r2
 8000efc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000efe:	4313      	orrs	r3, r2
 8000f00:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f08:	2b01      	cmp	r3, #1
 8000f0a:	d11b      	bne.n	8000f44 <HAL_ADC_Init+0x22c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	7e5b      	ldrb	r3, [r3, #25]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d109      	bne.n	8000f28 <HAL_ADC_Init+0x210>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f18:	3b01      	subs	r3, #1
 8000f1a:	045a      	lsls	r2, r3, #17
 8000f1c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f24:	663b      	str	r3, [r7, #96]	@ 0x60
 8000f26:	e00d      	b.n	8000f44 <HAL_ADC_Init+0x22c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f2c:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8000f30:	f043 0220 	orr.w	r2, r3, #32
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f3c:	f043 0201 	orr.w	r2, r3, #1
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f48:	2b01      	cmp	r3, #1
 8000f4a:	d007      	beq.n	8000f5c <HAL_ADC_Init+0x244>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f54:	4313      	orrs	r3, r2
 8000f56:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	689b      	ldr	r3, [r3, #8]
 8000f62:	f003 030c 	and.w	r3, r3, #12
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d114      	bne.n	8000f94 <HAL_ADC_Init+0x27c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	68db      	ldr	r3, [r3, #12]
 8000f70:	687a      	ldr	r2, [r7, #4]
 8000f72:	6812      	ldr	r2, [r2, #0]
 8000f74:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000f78:	f023 0302 	bic.w	r3, r3, #2
 8000f7c:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	7e1b      	ldrb	r3, [r3, #24]
 8000f82:	039a      	lsls	r2, r3, #14
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8000f8a:	005b      	lsls	r3, r3, #1
 8000f8c:	4313      	orrs	r3, r2
 8000f8e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000f90:	4313      	orrs	r3, r2
 8000f92:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	68da      	ldr	r2, [r3, #12]
 8000f9a:	4b21      	ldr	r3, [pc, #132]	@ (8001020 <HAL_ADC_Init+0x308>)
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	687a      	ldr	r2, [r7, #4]
 8000fa0:	6812      	ldr	r2, [r2, #0]
 8000fa2:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8000fa4:	430b      	orrs	r3, r1
 8000fa6:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	691b      	ldr	r3, [r3, #16]
 8000fac:	2b01      	cmp	r3, #1
 8000fae:	d10c      	bne.n	8000fca <HAL_ADC_Init+0x2b2>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fb6:	f023 010f 	bic.w	r1, r3, #15
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	69db      	ldr	r3, [r3, #28]
 8000fbe:	1e5a      	subs	r2, r3, #1
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	430a      	orrs	r2, r1
 8000fc6:	631a      	str	r2, [r3, #48]	@ 0x30
 8000fc8:	e007      	b.n	8000fda <HAL_ADC_Init+0x2c2>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f022 020f 	bic.w	r2, r2, #15
 8000fd8:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2200      	movs	r2, #0
 8000fde:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fe4:	f023 0303 	bic.w	r3, r3, #3
 8000fe8:	f043 0201 	orr.w	r2, r3, #1
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	641a      	str	r2, [r3, #64]	@ 0x40
 8000ff0:	e00a      	b.n	8001008 <HAL_ADC_Init+0x2f0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ff6:	f023 0312 	bic.w	r3, r3, #18
 8000ffa:	f043 0210 	orr.w	r2, r3, #16
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001002:	2301      	movs	r3, #1
 8001004:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001008:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 800100c:	4618      	mov	r0, r3
 800100e:	3768      	adds	r7, #104	@ 0x68
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	20000000 	.word	0x20000000
 8001018:	431bde83 	.word	0x431bde83
 800101c:	50000300 	.word	0x50000300
 8001020:	fff0c007 	.word	0xfff0c007

08001024 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001024:	b480      	push	{r7}
 8001026:	b09b      	sub	sp, #108	@ 0x6c
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800102e:	2300      	movs	r3, #0
 8001030:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001034:	2300      	movs	r3, #0
 8001036:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800103e:	2b01      	cmp	r3, #1
 8001040:	d101      	bne.n	8001046 <HAL_ADC_ConfigChannel+0x22>
 8001042:	2302      	movs	r3, #2
 8001044:	e295      	b.n	8001572 <HAL_ADC_ConfigChannel+0x54e>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2201      	movs	r2, #1
 800104a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	689b      	ldr	r3, [r3, #8]
 8001054:	f003 0304 	and.w	r3, r3, #4
 8001058:	2b00      	cmp	r3, #0
 800105a:	f040 8279 	bne.w	8001550 <HAL_ADC_ConfigChannel+0x52c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	2b04      	cmp	r3, #4
 8001064:	d81c      	bhi.n	80010a0 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	685a      	ldr	r2, [r3, #4]
 8001070:	4613      	mov	r3, r2
 8001072:	005b      	lsls	r3, r3, #1
 8001074:	4413      	add	r3, r2
 8001076:	005b      	lsls	r3, r3, #1
 8001078:	461a      	mov	r2, r3
 800107a:	231f      	movs	r3, #31
 800107c:	4093      	lsls	r3, r2
 800107e:	43db      	mvns	r3, r3
 8001080:	4019      	ands	r1, r3
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	6818      	ldr	r0, [r3, #0]
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	685a      	ldr	r2, [r3, #4]
 800108a:	4613      	mov	r3, r2
 800108c:	005b      	lsls	r3, r3, #1
 800108e:	4413      	add	r3, r2
 8001090:	005b      	lsls	r3, r3, #1
 8001092:	fa00 f203 	lsl.w	r2, r0, r3
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	430a      	orrs	r2, r1
 800109c:	631a      	str	r2, [r3, #48]	@ 0x30
 800109e:	e063      	b.n	8001168 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	2b09      	cmp	r3, #9
 80010a6:	d81e      	bhi.n	80010e6 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	685a      	ldr	r2, [r3, #4]
 80010b2:	4613      	mov	r3, r2
 80010b4:	005b      	lsls	r3, r3, #1
 80010b6:	4413      	add	r3, r2
 80010b8:	005b      	lsls	r3, r3, #1
 80010ba:	3b1e      	subs	r3, #30
 80010bc:	221f      	movs	r2, #31
 80010be:	fa02 f303 	lsl.w	r3, r2, r3
 80010c2:	43db      	mvns	r3, r3
 80010c4:	4019      	ands	r1, r3
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	6818      	ldr	r0, [r3, #0]
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	685a      	ldr	r2, [r3, #4]
 80010ce:	4613      	mov	r3, r2
 80010d0:	005b      	lsls	r3, r3, #1
 80010d2:	4413      	add	r3, r2
 80010d4:	005b      	lsls	r3, r3, #1
 80010d6:	3b1e      	subs	r3, #30
 80010d8:	fa00 f203 	lsl.w	r2, r0, r3
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	430a      	orrs	r2, r1
 80010e2:	635a      	str	r2, [r3, #52]	@ 0x34
 80010e4:	e040      	b.n	8001168 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	2b0e      	cmp	r3, #14
 80010ec:	d81e      	bhi.n	800112c <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	685a      	ldr	r2, [r3, #4]
 80010f8:	4613      	mov	r3, r2
 80010fa:	005b      	lsls	r3, r3, #1
 80010fc:	4413      	add	r3, r2
 80010fe:	005b      	lsls	r3, r3, #1
 8001100:	3b3c      	subs	r3, #60	@ 0x3c
 8001102:	221f      	movs	r2, #31
 8001104:	fa02 f303 	lsl.w	r3, r2, r3
 8001108:	43db      	mvns	r3, r3
 800110a:	4019      	ands	r1, r3
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	6818      	ldr	r0, [r3, #0]
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	685a      	ldr	r2, [r3, #4]
 8001114:	4613      	mov	r3, r2
 8001116:	005b      	lsls	r3, r3, #1
 8001118:	4413      	add	r3, r2
 800111a:	005b      	lsls	r3, r3, #1
 800111c:	3b3c      	subs	r3, #60	@ 0x3c
 800111e:	fa00 f203 	lsl.w	r2, r0, r3
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	430a      	orrs	r2, r1
 8001128:	639a      	str	r2, [r3, #56]	@ 0x38
 800112a:	e01d      	b.n	8001168 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	685a      	ldr	r2, [r3, #4]
 8001136:	4613      	mov	r3, r2
 8001138:	005b      	lsls	r3, r3, #1
 800113a:	4413      	add	r3, r2
 800113c:	005b      	lsls	r3, r3, #1
 800113e:	3b5a      	subs	r3, #90	@ 0x5a
 8001140:	221f      	movs	r2, #31
 8001142:	fa02 f303 	lsl.w	r3, r2, r3
 8001146:	43db      	mvns	r3, r3
 8001148:	4019      	ands	r1, r3
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	6818      	ldr	r0, [r3, #0]
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	685a      	ldr	r2, [r3, #4]
 8001152:	4613      	mov	r3, r2
 8001154:	005b      	lsls	r3, r3, #1
 8001156:	4413      	add	r3, r2
 8001158:	005b      	lsls	r3, r3, #1
 800115a:	3b5a      	subs	r3, #90	@ 0x5a
 800115c:	fa00 f203 	lsl.w	r2, r0, r3
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	430a      	orrs	r2, r1
 8001166:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	689b      	ldr	r3, [r3, #8]
 800116e:	f003 030c 	and.w	r3, r3, #12
 8001172:	2b00      	cmp	r3, #0
 8001174:	f040 80e5 	bne.w	8001342 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	2b09      	cmp	r3, #9
 800117e:	d91c      	bls.n	80011ba <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	6999      	ldr	r1, [r3, #24]
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	4613      	mov	r3, r2
 800118c:	005b      	lsls	r3, r3, #1
 800118e:	4413      	add	r3, r2
 8001190:	3b1e      	subs	r3, #30
 8001192:	2207      	movs	r2, #7
 8001194:	fa02 f303 	lsl.w	r3, r2, r3
 8001198:	43db      	mvns	r3, r3
 800119a:	4019      	ands	r1, r3
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	6898      	ldr	r0, [r3, #8]
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	4613      	mov	r3, r2
 80011a6:	005b      	lsls	r3, r3, #1
 80011a8:	4413      	add	r3, r2
 80011aa:	3b1e      	subs	r3, #30
 80011ac:	fa00 f203 	lsl.w	r2, r0, r3
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	430a      	orrs	r2, r1
 80011b6:	619a      	str	r2, [r3, #24]
 80011b8:	e019      	b.n	80011ee <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	6959      	ldr	r1, [r3, #20]
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	4613      	mov	r3, r2
 80011c6:	005b      	lsls	r3, r3, #1
 80011c8:	4413      	add	r3, r2
 80011ca:	2207      	movs	r2, #7
 80011cc:	fa02 f303 	lsl.w	r3, r2, r3
 80011d0:	43db      	mvns	r3, r3
 80011d2:	4019      	ands	r1, r3
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	6898      	ldr	r0, [r3, #8]
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	4613      	mov	r3, r2
 80011de:	005b      	lsls	r3, r3, #1
 80011e0:	4413      	add	r3, r2
 80011e2:	fa00 f203 	lsl.w	r2, r0, r3
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	430a      	orrs	r2, r1
 80011ec:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	695a      	ldr	r2, [r3, #20]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	08db      	lsrs	r3, r3, #3
 80011fa:	f003 0303 	and.w	r3, r3, #3
 80011fe:	005b      	lsls	r3, r3, #1
 8001200:	fa02 f303 	lsl.w	r3, r2, r3
 8001204:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	691b      	ldr	r3, [r3, #16]
 800120a:	3b01      	subs	r3, #1
 800120c:	2b03      	cmp	r3, #3
 800120e:	d84f      	bhi.n	80012b0 <HAL_ADC_ConfigChannel+0x28c>
 8001210:	a201      	add	r2, pc, #4	@ (adr r2, 8001218 <HAL_ADC_ConfigChannel+0x1f4>)
 8001212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001216:	bf00      	nop
 8001218:	08001229 	.word	0x08001229
 800121c:	0800124b 	.word	0x0800124b
 8001220:	0800126d 	.word	0x0800126d
 8001224:	0800128f 	.word	0x0800128f
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800122e:	4b97      	ldr	r3, [pc, #604]	@ (800148c <HAL_ADC_ConfigChannel+0x468>)
 8001230:	4013      	ands	r3, r2
 8001232:	683a      	ldr	r2, [r7, #0]
 8001234:	6812      	ldr	r2, [r2, #0]
 8001236:	0691      	lsls	r1, r2, #26
 8001238:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800123a:	430a      	orrs	r2, r1
 800123c:	431a      	orrs	r2, r3
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001246:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001248:	e07b      	b.n	8001342 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001250:	4b8e      	ldr	r3, [pc, #568]	@ (800148c <HAL_ADC_ConfigChannel+0x468>)
 8001252:	4013      	ands	r3, r2
 8001254:	683a      	ldr	r2, [r7, #0]
 8001256:	6812      	ldr	r2, [r2, #0]
 8001258:	0691      	lsls	r1, r2, #26
 800125a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800125c:	430a      	orrs	r2, r1
 800125e:	431a      	orrs	r2, r3
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001268:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800126a:	e06a      	b.n	8001342 <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8001272:	4b86      	ldr	r3, [pc, #536]	@ (800148c <HAL_ADC_ConfigChannel+0x468>)
 8001274:	4013      	ands	r3, r2
 8001276:	683a      	ldr	r2, [r7, #0]
 8001278:	6812      	ldr	r2, [r2, #0]
 800127a:	0691      	lsls	r1, r2, #26
 800127c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800127e:	430a      	orrs	r2, r1
 8001280:	431a      	orrs	r2, r3
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800128a:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800128c:	e059      	b.n	8001342 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001294:	4b7d      	ldr	r3, [pc, #500]	@ (800148c <HAL_ADC_ConfigChannel+0x468>)
 8001296:	4013      	ands	r3, r2
 8001298:	683a      	ldr	r2, [r7, #0]
 800129a:	6812      	ldr	r2, [r2, #0]
 800129c:	0691      	lsls	r1, r2, #26
 800129e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80012a0:	430a      	orrs	r2, r1
 80012a2:	431a      	orrs	r2, r3
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80012ac:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80012ae:	e048      	b.n	8001342 <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012b6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	069b      	lsls	r3, r3, #26
 80012c0:	429a      	cmp	r2, r3
 80012c2:	d107      	bne.n	80012d4 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80012d2:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80012da:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	069b      	lsls	r3, r3, #26
 80012e4:	429a      	cmp	r2, r3
 80012e6:	d107      	bne.n	80012f8 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80012f6:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80012fe:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	069b      	lsls	r3, r3, #26
 8001308:	429a      	cmp	r2, r3
 800130a:	d107      	bne.n	800131c <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800131a:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001322:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	069b      	lsls	r3, r3, #26
 800132c:	429a      	cmp	r2, r3
 800132e:	d107      	bne.n	8001340 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800133e:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 8001340:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	689b      	ldr	r3, [r3, #8]
 8001348:	f003 0303 	and.w	r3, r3, #3
 800134c:	2b01      	cmp	r3, #1
 800134e:	d108      	bne.n	8001362 <HAL_ADC_ConfigChannel+0x33e>
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f003 0301 	and.w	r3, r3, #1
 800135a:	2b01      	cmp	r3, #1
 800135c:	d101      	bne.n	8001362 <HAL_ADC_ConfigChannel+0x33e>
 800135e:	2301      	movs	r3, #1
 8001360:	e000      	b.n	8001364 <HAL_ADC_ConfigChannel+0x340>
 8001362:	2300      	movs	r3, #0
 8001364:	2b00      	cmp	r3, #0
 8001366:	f040 80fe 	bne.w	8001566 <HAL_ADC_ConfigChannel+0x542>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	68db      	ldr	r3, [r3, #12]
 800136e:	2b01      	cmp	r3, #1
 8001370:	d00f      	beq.n	8001392 <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	2201      	movs	r2, #1
 8001380:	fa02 f303 	lsl.w	r3, r2, r3
 8001384:	43da      	mvns	r2, r3
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	400a      	ands	r2, r1
 800138c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 8001390:	e049      	b.n	8001426 <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	2201      	movs	r2, #1
 80013a0:	409a      	lsls	r2, r3
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	430a      	orrs	r2, r1
 80013a8:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	2b09      	cmp	r3, #9
 80013b2:	d91c      	bls.n	80013ee <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	6999      	ldr	r1, [r3, #24]
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	4613      	mov	r3, r2
 80013c0:	005b      	lsls	r3, r3, #1
 80013c2:	4413      	add	r3, r2
 80013c4:	3b1b      	subs	r3, #27
 80013c6:	2207      	movs	r2, #7
 80013c8:	fa02 f303 	lsl.w	r3, r2, r3
 80013cc:	43db      	mvns	r3, r3
 80013ce:	4019      	ands	r1, r3
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	6898      	ldr	r0, [r3, #8]
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	4613      	mov	r3, r2
 80013da:	005b      	lsls	r3, r3, #1
 80013dc:	4413      	add	r3, r2
 80013de:	3b1b      	subs	r3, #27
 80013e0:	fa00 f203 	lsl.w	r2, r0, r3
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	430a      	orrs	r2, r1
 80013ea:	619a      	str	r2, [r3, #24]
 80013ec:	e01b      	b.n	8001426 <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	6959      	ldr	r1, [r3, #20]
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	1c5a      	adds	r2, r3, #1
 80013fa:	4613      	mov	r3, r2
 80013fc:	005b      	lsls	r3, r3, #1
 80013fe:	4413      	add	r3, r2
 8001400:	2207      	movs	r2, #7
 8001402:	fa02 f303 	lsl.w	r3, r2, r3
 8001406:	43db      	mvns	r3, r3
 8001408:	4019      	ands	r1, r3
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	6898      	ldr	r0, [r3, #8]
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	1c5a      	adds	r2, r3, #1
 8001414:	4613      	mov	r3, r2
 8001416:	005b      	lsls	r3, r3, #1
 8001418:	4413      	add	r3, r2
 800141a:	fa00 f203 	lsl.w	r2, r0, r3
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	430a      	orrs	r2, r1
 8001424:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001426:	4b1a      	ldr	r3, [pc, #104]	@ (8001490 <HAL_ADC_ConfigChannel+0x46c>)
 8001428:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	2b10      	cmp	r3, #16
 8001430:	d105      	bne.n	800143e <HAL_ADC_ConfigChannel+0x41a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001432:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001434:	689b      	ldr	r3, [r3, #8]
 8001436:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800143a:	2b00      	cmp	r3, #0
 800143c:	d014      	beq.n	8001468 <HAL_ADC_ConfigChannel+0x444>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001442:	2b11      	cmp	r3, #17
 8001444:	d105      	bne.n	8001452 <HAL_ADC_ConfigChannel+0x42e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001446:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001448:	689b      	ldr	r3, [r3, #8]
 800144a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800144e:	2b00      	cmp	r3, #0
 8001450:	d00a      	beq.n	8001468 <HAL_ADC_ConfigChannel+0x444>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001456:	2b12      	cmp	r3, #18
 8001458:	f040 8085 	bne.w	8001566 <HAL_ADC_ConfigChannel+0x542>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800145c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800145e:	689b      	ldr	r3, [r3, #8]
 8001460:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001464:	2b00      	cmp	r3, #0
 8001466:	d17e      	bne.n	8001566 <HAL_ADC_ConfigChannel+0x542>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001468:	2300      	movs	r3, #0
 800146a:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	689b      	ldr	r3, [r3, #8]
 8001472:	f003 0303 	and.w	r3, r3, #3
 8001476:	2b01      	cmp	r3, #1
 8001478:	d10c      	bne.n	8001494 <HAL_ADC_ConfigChannel+0x470>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f003 0301 	and.w	r3, r3, #1
 8001484:	2b01      	cmp	r3, #1
 8001486:	d105      	bne.n	8001494 <HAL_ADC_ConfigChannel+0x470>
 8001488:	2301      	movs	r3, #1
 800148a:	e004      	b.n	8001496 <HAL_ADC_ConfigChannel+0x472>
 800148c:	83fff000 	.word	0x83fff000
 8001490:	50000300 	.word	0x50000300
 8001494:	2300      	movs	r3, #0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d150      	bne.n	800153c <HAL_ADC_ConfigChannel+0x518>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800149a:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800149c:	2b00      	cmp	r3, #0
 800149e:	d010      	beq.n	80014c2 <HAL_ADC_ConfigChannel+0x49e>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	f003 0303 	and.w	r3, r3, #3
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d107      	bne.n	80014bc <HAL_ADC_ConfigChannel+0x498>
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f003 0301 	and.w	r3, r3, #1
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d101      	bne.n	80014bc <HAL_ADC_ConfigChannel+0x498>
 80014b8:	2301      	movs	r3, #1
 80014ba:	e000      	b.n	80014be <HAL_ADC_ConfigChannel+0x49a>
 80014bc:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d13c      	bne.n	800153c <HAL_ADC_ConfigChannel+0x518>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	2b10      	cmp	r3, #16
 80014c8:	d11d      	bne.n	8001506 <HAL_ADC_ConfigChannel+0x4e2>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80014d2:	d118      	bne.n	8001506 <HAL_ADC_ConfigChannel+0x4e2>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80014d4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80014d6:	689b      	ldr	r3, [r3, #8]
 80014d8:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80014dc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80014de:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80014e0:	4b27      	ldr	r3, [pc, #156]	@ (8001580 <HAL_ADC_ConfigChannel+0x55c>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a27      	ldr	r2, [pc, #156]	@ (8001584 <HAL_ADC_ConfigChannel+0x560>)
 80014e6:	fba2 2303 	umull	r2, r3, r2, r3
 80014ea:	0c9a      	lsrs	r2, r3, #18
 80014ec:	4613      	mov	r3, r2
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	4413      	add	r3, r2
 80014f2:	005b      	lsls	r3, r3, #1
 80014f4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80014f6:	e002      	b.n	80014fe <HAL_ADC_ConfigChannel+0x4da>
          {
            wait_loop_index--;
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	3b01      	subs	r3, #1
 80014fc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80014fe:	68bb      	ldr	r3, [r7, #8]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d1f9      	bne.n	80014f8 <HAL_ADC_ConfigChannel+0x4d4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001504:	e02e      	b.n	8001564 <HAL_ADC_ConfigChannel+0x540>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	2b11      	cmp	r3, #17
 800150c:	d10b      	bne.n	8001526 <HAL_ADC_ConfigChannel+0x502>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001516:	d106      	bne.n	8001526 <HAL_ADC_ConfigChannel+0x502>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001518:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8001520:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001522:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001524:	e01e      	b.n	8001564 <HAL_ADC_ConfigChannel+0x540>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	2b12      	cmp	r3, #18
 800152c:	d11a      	bne.n	8001564 <HAL_ADC_ConfigChannel+0x540>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800152e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001530:	689b      	ldr	r3, [r3, #8]
 8001532:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001536:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001538:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800153a:	e013      	b.n	8001564 <HAL_ADC_ConfigChannel+0x540>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001540:	f043 0220 	orr.w	r2, r3, #32
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001548:	2301      	movs	r3, #1
 800154a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800154e:	e00a      	b.n	8001566 <HAL_ADC_ConfigChannel+0x542>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001554:	f043 0220 	orr.w	r2, r3, #32
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 800155c:	2301      	movs	r3, #1
 800155e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8001562:	e000      	b.n	8001566 <HAL_ADC_ConfigChannel+0x542>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001564:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2200      	movs	r2, #0
 800156a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800156e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8001572:	4618      	mov	r0, r3
 8001574:	376c      	adds	r7, #108	@ 0x6c
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	20000000 	.word	0x20000000
 8001584:	431bde83 	.word	0x431bde83

08001588 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b084      	sub	sp, #16
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001590:	2300      	movs	r3, #0
 8001592:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	689b      	ldr	r3, [r3, #8]
 800159a:	f003 0303 	and.w	r3, r3, #3
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d108      	bne.n	80015b4 <ADC_Disable+0x2c>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f003 0301 	and.w	r3, r3, #1
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	d101      	bne.n	80015b4 <ADC_Disable+0x2c>
 80015b0:	2301      	movs	r3, #1
 80015b2:	e000      	b.n	80015b6 <ADC_Disable+0x2e>
 80015b4:	2300      	movs	r3, #0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d047      	beq.n	800164a <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	f003 030d 	and.w	r3, r3, #13
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	d10f      	bne.n	80015e8 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	689a      	ldr	r2, [r3, #8]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f042 0202 	orr.w	r2, r2, #2
 80015d6:	609a      	str	r2, [r3, #8]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	2203      	movs	r2, #3
 80015de:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80015e0:	f7ff fb8e 	bl	8000d00 <HAL_GetTick>
 80015e4:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80015e6:	e029      	b.n	800163c <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ec:	f043 0210 	orr.w	r2, r3, #16
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015f8:	f043 0201 	orr.w	r2, r3, #1
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 8001600:	2301      	movs	r3, #1
 8001602:	e023      	b.n	800164c <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001604:	f7ff fb7c 	bl	8000d00 <HAL_GetTick>
 8001608:	4602      	mov	r2, r0
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	2b02      	cmp	r3, #2
 8001610:	d914      	bls.n	800163c <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	f003 0301 	and.w	r3, r3, #1
 800161c:	2b01      	cmp	r3, #1
 800161e:	d10d      	bne.n	800163c <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001624:	f043 0210 	orr.w	r2, r3, #16
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001630:	f043 0201 	orr.w	r2, r3, #1
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8001638:	2301      	movs	r3, #1
 800163a:	e007      	b.n	800164c <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	f003 0301 	and.w	r3, r3, #1
 8001646:	2b01      	cmp	r3, #1
 8001648:	d0dc      	beq.n	8001604 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800164a:	2300      	movs	r3, #0
}
 800164c:	4618      	mov	r0, r3
 800164e:	3710      	adds	r7, #16
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}

08001654 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d101      	bne.n	8001666 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	e0ed      	b.n	8001842 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	f893 3020 	ldrb.w	r3, [r3, #32]
 800166c:	b2db      	uxtb	r3, r3
 800166e:	2b00      	cmp	r3, #0
 8001670:	d102      	bne.n	8001678 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001672:	6878      	ldr	r0, [r7, #4]
 8001674:	f7ff f994 	bl	80009a0 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f042 0201 	orr.w	r2, r2, #1
 8001686:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001688:	f7ff fb3a 	bl	8000d00 <HAL_GetTick>
 800168c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800168e:	e012      	b.n	80016b6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001690:	f7ff fb36 	bl	8000d00 <HAL_GetTick>
 8001694:	4602      	mov	r2, r0
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	2b0a      	cmp	r3, #10
 800169c:	d90b      	bls.n	80016b6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016a2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2205      	movs	r2, #5
 80016ae:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e0c5      	b.n	8001842 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f003 0301 	and.w	r3, r3, #1
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d0e5      	beq.n	8001690 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f022 0202 	bic.w	r2, r2, #2
 80016d2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80016d4:	f7ff fb14 	bl	8000d00 <HAL_GetTick>
 80016d8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80016da:	e012      	b.n	8001702 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80016dc:	f7ff fb10 	bl	8000d00 <HAL_GetTick>
 80016e0:	4602      	mov	r2, r0
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	2b0a      	cmp	r3, #10
 80016e8:	d90b      	bls.n	8001702 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016ee:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2205      	movs	r2, #5
 80016fa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	e09f      	b.n	8001842 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f003 0302 	and.w	r3, r3, #2
 800170c:	2b00      	cmp	r3, #0
 800170e:	d1e5      	bne.n	80016dc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	7e1b      	ldrb	r3, [r3, #24]
 8001714:	2b01      	cmp	r3, #1
 8001716:	d108      	bne.n	800172a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001726:	601a      	str	r2, [r3, #0]
 8001728:	e007      	b.n	800173a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001738:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	7e5b      	ldrb	r3, [r3, #25]
 800173e:	2b01      	cmp	r3, #1
 8001740:	d108      	bne.n	8001754 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001750:	601a      	str	r2, [r3, #0]
 8001752:	e007      	b.n	8001764 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001762:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	7e9b      	ldrb	r3, [r3, #26]
 8001768:	2b01      	cmp	r3, #1
 800176a:	d108      	bne.n	800177e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f042 0220 	orr.w	r2, r2, #32
 800177a:	601a      	str	r2, [r3, #0]
 800177c:	e007      	b.n	800178e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f022 0220 	bic.w	r2, r2, #32
 800178c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	7edb      	ldrb	r3, [r3, #27]
 8001792:	2b01      	cmp	r3, #1
 8001794:	d108      	bne.n	80017a8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f022 0210 	bic.w	r2, r2, #16
 80017a4:	601a      	str	r2, [r3, #0]
 80017a6:	e007      	b.n	80017b8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f042 0210 	orr.w	r2, r2, #16
 80017b6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	7f1b      	ldrb	r3, [r3, #28]
 80017bc:	2b01      	cmp	r3, #1
 80017be:	d108      	bne.n	80017d2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f042 0208 	orr.w	r2, r2, #8
 80017ce:	601a      	str	r2, [r3, #0]
 80017d0:	e007      	b.n	80017e2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f022 0208 	bic.w	r2, r2, #8
 80017e0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	7f5b      	ldrb	r3, [r3, #29]
 80017e6:	2b01      	cmp	r3, #1
 80017e8:	d108      	bne.n	80017fc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f042 0204 	orr.w	r2, r2, #4
 80017f8:	601a      	str	r2, [r3, #0]
 80017fa:	e007      	b.n	800180c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f022 0204 	bic.w	r2, r2, #4
 800180a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	689a      	ldr	r2, [r3, #8]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	68db      	ldr	r3, [r3, #12]
 8001814:	431a      	orrs	r2, r3
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	691b      	ldr	r3, [r3, #16]
 800181a:	431a      	orrs	r2, r3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	695b      	ldr	r3, [r3, #20]
 8001820:	ea42 0103 	orr.w	r1, r2, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	1e5a      	subs	r2, r3, #1
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	430a      	orrs	r2, r1
 8001830:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2200      	movs	r2, #0
 8001836:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2201      	movs	r2, #1
 800183c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001840:	2300      	movs	r3, #0
}
 8001842:	4618      	mov	r0, r3
 8001844:	3710      	adds	r7, #16
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}

0800184a <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800184a:	b480      	push	{r7}
 800184c:	b087      	sub	sp, #28
 800184e:	af00      	add	r7, sp, #0
 8001850:	6078      	str	r0, [r7, #4]
 8001852:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001860:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001862:	7cfb      	ldrb	r3, [r7, #19]
 8001864:	2b01      	cmp	r3, #1
 8001866:	d003      	beq.n	8001870 <HAL_CAN_ConfigFilter+0x26>
 8001868:	7cfb      	ldrb	r3, [r7, #19]
 800186a:	2b02      	cmp	r3, #2
 800186c:	f040 80aa 	bne.w	80019c4 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001876:	f043 0201 	orr.w	r2, r3, #1
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	695b      	ldr	r3, [r3, #20]
 8001884:	f003 031f 	and.w	r3, r3, #31
 8001888:	2201      	movs	r2, #1
 800188a:	fa02 f303 	lsl.w	r3, r2, r3
 800188e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	43db      	mvns	r3, r3
 800189a:	401a      	ands	r2, r3
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	69db      	ldr	r3, [r3, #28]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d123      	bne.n	80018f2 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	43db      	mvns	r3, r3
 80018b4:	401a      	ands	r2, r3
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80018c8:	683a      	ldr	r2, [r7, #0]
 80018ca:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80018cc:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	3248      	adds	r2, #72	@ 0x48
 80018d2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80018e6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80018e8:	6979      	ldr	r1, [r7, #20]
 80018ea:	3348      	adds	r3, #72	@ 0x48
 80018ec:	00db      	lsls	r3, r3, #3
 80018ee:	440b      	add	r3, r1
 80018f0:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	69db      	ldr	r3, [r3, #28]
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d122      	bne.n	8001940 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	431a      	orrs	r2, r3
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001916:	683a      	ldr	r2, [r7, #0]
 8001918:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800191a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	3248      	adds	r2, #72	@ 0x48
 8001920:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	68db      	ldr	r3, [r3, #12]
 800192e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001934:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001936:	6979      	ldr	r1, [r7, #20]
 8001938:	3348      	adds	r3, #72	@ 0x48
 800193a:	00db      	lsls	r3, r3, #3
 800193c:	440b      	add	r3, r1
 800193e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	699b      	ldr	r3, [r3, #24]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d109      	bne.n	800195c <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	43db      	mvns	r3, r3
 8001952:	401a      	ands	r2, r3
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800195a:	e007      	b.n	800196c <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	431a      	orrs	r2, r3
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	691b      	ldr	r3, [r3, #16]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d109      	bne.n	8001988 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	43db      	mvns	r3, r3
 800197e:	401a      	ands	r2, r3
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001986:	e007      	b.n	8001998 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	431a      	orrs	r2, r3
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	6a1b      	ldr	r3, [r3, #32]
 800199c:	2b01      	cmp	r3, #1
 800199e:	d107      	bne.n	80019b0 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	431a      	orrs	r2, r3
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80019b6:	f023 0201 	bic.w	r2, r3, #1
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80019c0:	2300      	movs	r3, #0
 80019c2:	e006      	b.n	80019d2 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019c8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
  }
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	371c      	adds	r7, #28
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr

080019de <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80019de:	b580      	push	{r7, lr}
 80019e0:	b084      	sub	sp, #16
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	2b01      	cmp	r3, #1
 80019f0:	d12e      	bne.n	8001a50 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2202      	movs	r2, #2
 80019f6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f022 0201 	bic.w	r2, r2, #1
 8001a08:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001a0a:	f7ff f979 	bl	8000d00 <HAL_GetTick>
 8001a0e:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001a10:	e012      	b.n	8001a38 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001a12:	f7ff f975 	bl	8000d00 <HAL_GetTick>
 8001a16:	4602      	mov	r2, r0
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	1ad3      	subs	r3, r2, r3
 8001a1c:	2b0a      	cmp	r3, #10
 8001a1e:	d90b      	bls.n	8001a38 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a24:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2205      	movs	r2, #5
 8001a30:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001a34:	2301      	movs	r3, #1
 8001a36:	e012      	b.n	8001a5e <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	f003 0301 	and.w	r3, r3, #1
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d1e5      	bne.n	8001a12 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	e006      	b.n	8001a5e <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a54:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
  }
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3710      	adds	r7, #16
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}

08001a66 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001a66:	b480      	push	{r7}
 8001a68:	b089      	sub	sp, #36	@ 0x24
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	60f8      	str	r0, [r7, #12]
 8001a6e:	60b9      	str	r1, [r7, #8]
 8001a70:	607a      	str	r2, [r7, #4]
 8001a72:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a7a:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001a84:	7ffb      	ldrb	r3, [r7, #31]
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d003      	beq.n	8001a92 <HAL_CAN_AddTxMessage+0x2c>
 8001a8a:	7ffb      	ldrb	r3, [r7, #31]
 8001a8c:	2b02      	cmp	r3, #2
 8001a8e:	f040 80ad 	bne.w	8001bec <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001a92:	69bb      	ldr	r3, [r7, #24]
 8001a94:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d10a      	bne.n	8001ab2 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001a9c:	69bb      	ldr	r3, [r7, #24]
 8001a9e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d105      	bne.n	8001ab2 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001aa6:	69bb      	ldr	r3, [r7, #24]
 8001aa8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	f000 8095 	beq.w	8001bdc <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001ab2:	69bb      	ldr	r3, [r7, #24]
 8001ab4:	0e1b      	lsrs	r3, r3, #24
 8001ab6:	f003 0303 	and.w	r3, r3, #3
 8001aba:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001abc:	2201      	movs	r2, #1
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	409a      	lsls	r2, r3
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d10d      	bne.n	8001aea <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001ad8:	68f9      	ldr	r1, [r7, #12]
 8001ada:	6809      	ldr	r1, [r1, #0]
 8001adc:	431a      	orrs	r2, r3
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	3318      	adds	r3, #24
 8001ae2:	011b      	lsls	r3, r3, #4
 8001ae4:	440b      	add	r3, r1
 8001ae6:	601a      	str	r2, [r3, #0]
 8001ae8:	e00f      	b.n	8001b0a <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001aea:	68bb      	ldr	r3, [r7, #8]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001af4:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001afa:	68f9      	ldr	r1, [r7, #12]
 8001afc:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001afe:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	3318      	adds	r3, #24
 8001b04:	011b      	lsls	r3, r3, #4
 8001b06:	440b      	add	r3, r1
 8001b08:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	6819      	ldr	r1, [r3, #0]
 8001b0e:	68bb      	ldr	r3, [r7, #8]
 8001b10:	691a      	ldr	r2, [r3, #16]
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	3318      	adds	r3, #24
 8001b16:	011b      	lsls	r3, r3, #4
 8001b18:	440b      	add	r3, r1
 8001b1a:	3304      	adds	r3, #4
 8001b1c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001b1e:	68bb      	ldr	r3, [r7, #8]
 8001b20:	7d1b      	ldrb	r3, [r3, #20]
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d111      	bne.n	8001b4a <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	3318      	adds	r3, #24
 8001b2e:	011b      	lsls	r3, r3, #4
 8001b30:	4413      	add	r3, r2
 8001b32:	3304      	adds	r3, #4
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	68fa      	ldr	r2, [r7, #12]
 8001b38:	6811      	ldr	r1, [r2, #0]
 8001b3a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	3318      	adds	r3, #24
 8001b42:	011b      	lsls	r3, r3, #4
 8001b44:	440b      	add	r3, r1
 8001b46:	3304      	adds	r3, #4
 8001b48:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	3307      	adds	r3, #7
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	061a      	lsls	r2, r3, #24
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	3306      	adds	r3, #6
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	041b      	lsls	r3, r3, #16
 8001b5a:	431a      	orrs	r2, r3
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	3305      	adds	r3, #5
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	021b      	lsls	r3, r3, #8
 8001b64:	4313      	orrs	r3, r2
 8001b66:	687a      	ldr	r2, [r7, #4]
 8001b68:	3204      	adds	r2, #4
 8001b6a:	7812      	ldrb	r2, [r2, #0]
 8001b6c:	4610      	mov	r0, r2
 8001b6e:	68fa      	ldr	r2, [r7, #12]
 8001b70:	6811      	ldr	r1, [r2, #0]
 8001b72:	ea43 0200 	orr.w	r2, r3, r0
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	011b      	lsls	r3, r3, #4
 8001b7a:	440b      	add	r3, r1
 8001b7c:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8001b80:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	3303      	adds	r3, #3
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	061a      	lsls	r2, r3, #24
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	3302      	adds	r3, #2
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	041b      	lsls	r3, r3, #16
 8001b92:	431a      	orrs	r2, r3
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	3301      	adds	r3, #1
 8001b98:	781b      	ldrb	r3, [r3, #0]
 8001b9a:	021b      	lsls	r3, r3, #8
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	687a      	ldr	r2, [r7, #4]
 8001ba0:	7812      	ldrb	r2, [r2, #0]
 8001ba2:	4610      	mov	r0, r2
 8001ba4:	68fa      	ldr	r2, [r7, #12]
 8001ba6:	6811      	ldr	r1, [r2, #0]
 8001ba8:	ea43 0200 	orr.w	r2, r3, r0
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	011b      	lsls	r3, r3, #4
 8001bb0:	440b      	add	r3, r1
 8001bb2:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001bb6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	3318      	adds	r3, #24
 8001bc0:	011b      	lsls	r3, r3, #4
 8001bc2:	4413      	add	r3, r2
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	68fa      	ldr	r2, [r7, #12]
 8001bc8:	6811      	ldr	r1, [r2, #0]
 8001bca:	f043 0201 	orr.w	r2, r3, #1
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	3318      	adds	r3, #24
 8001bd2:	011b      	lsls	r3, r3, #4
 8001bd4:	440b      	add	r3, r1
 8001bd6:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	e00e      	b.n	8001bfa <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001be0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e006      	b.n	8001bfa <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bf0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
  }
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3724      	adds	r7, #36	@ 0x24
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr

08001c06 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001c06:	b480      	push	{r7}
 8001c08:	b087      	sub	sp, #28
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	60f8      	str	r0, [r7, #12]
 8001c0e:	60b9      	str	r1, [r7, #8]
 8001c10:	607a      	str	r2, [r7, #4]
 8001c12:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c1a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001c1c:	7dfb      	ldrb	r3, [r7, #23]
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d003      	beq.n	8001c2a <HAL_CAN_GetRxMessage+0x24>
 8001c22:	7dfb      	ldrb	r3, [r7, #23]
 8001c24:	2b02      	cmp	r3, #2
 8001c26:	f040 8103 	bne.w	8001e30 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d10e      	bne.n	8001c4e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	68db      	ldr	r3, [r3, #12]
 8001c36:	f003 0303 	and.w	r3, r3, #3
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d116      	bne.n	8001c6c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c42:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e0f7      	b.n	8001e3e <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	691b      	ldr	r3, [r3, #16]
 8001c54:	f003 0303 	and.w	r3, r3, #3
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d107      	bne.n	8001c6c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c60:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e0e8      	b.n	8001e3e <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	331b      	adds	r3, #27
 8001c74:	011b      	lsls	r3, r3, #4
 8001c76:	4413      	add	r3, r2
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 0204 	and.w	r2, r3, #4
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d10c      	bne.n	8001ca4 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	331b      	adds	r3, #27
 8001c92:	011b      	lsls	r3, r3, #4
 8001c94:	4413      	add	r3, r2
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	0d5b      	lsrs	r3, r3, #21
 8001c9a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	601a      	str	r2, [r3, #0]
 8001ca2:	e00b      	b.n	8001cbc <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	331b      	adds	r3, #27
 8001cac:	011b      	lsls	r3, r3, #4
 8001cae:	4413      	add	r3, r2
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	08db      	lsrs	r3, r3, #3
 8001cb4:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	331b      	adds	r3, #27
 8001cc4:	011b      	lsls	r3, r3, #4
 8001cc6:	4413      	add	r3, r2
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 0202 	and.w	r2, r3, #2
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	331b      	adds	r3, #27
 8001cda:	011b      	lsls	r3, r3, #4
 8001cdc:	4413      	add	r3, r2
 8001cde:	3304      	adds	r3, #4
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 0308 	and.w	r3, r3, #8
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d003      	beq.n	8001cf2 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2208      	movs	r2, #8
 8001cee:	611a      	str	r2, [r3, #16]
 8001cf0:	e00b      	b.n	8001d0a <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	331b      	adds	r3, #27
 8001cfa:	011b      	lsls	r3, r3, #4
 8001cfc:	4413      	add	r3, r2
 8001cfe:	3304      	adds	r3, #4
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 020f 	and.w	r2, r3, #15
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	331b      	adds	r3, #27
 8001d12:	011b      	lsls	r3, r3, #4
 8001d14:	4413      	add	r3, r2
 8001d16:	3304      	adds	r3, #4
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	0a1b      	lsrs	r3, r3, #8
 8001d1c:	b2da      	uxtb	r2, r3
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	331b      	adds	r3, #27
 8001d2a:	011b      	lsls	r3, r3, #4
 8001d2c:	4413      	add	r3, r2
 8001d2e:	3304      	adds	r3, #4
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	0c1b      	lsrs	r3, r3, #16
 8001d34:	b29a      	uxth	r2, r3
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	011b      	lsls	r3, r3, #4
 8001d42:	4413      	add	r3, r2
 8001d44:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	b2da      	uxtb	r2, r3
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	011b      	lsls	r3, r3, #4
 8001d58:	4413      	add	r3, r2
 8001d5a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	0a1a      	lsrs	r2, r3, #8
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	3301      	adds	r3, #1
 8001d66:	b2d2      	uxtb	r2, r2
 8001d68:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	011b      	lsls	r3, r3, #4
 8001d72:	4413      	add	r3, r2
 8001d74:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	0c1a      	lsrs	r2, r3, #16
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	3302      	adds	r3, #2
 8001d80:	b2d2      	uxtb	r2, r2
 8001d82:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	011b      	lsls	r3, r3, #4
 8001d8c:	4413      	add	r3, r2
 8001d8e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	0e1a      	lsrs	r2, r3, #24
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	3303      	adds	r3, #3
 8001d9a:	b2d2      	uxtb	r2, r2
 8001d9c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	011b      	lsls	r3, r3, #4
 8001da6:	4413      	add	r3, r2
 8001da8:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	3304      	adds	r3, #4
 8001db2:	b2d2      	uxtb	r2, r2
 8001db4:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	011b      	lsls	r3, r3, #4
 8001dbe:	4413      	add	r3, r2
 8001dc0:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	0a1a      	lsrs	r2, r3, #8
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	3305      	adds	r3, #5
 8001dcc:	b2d2      	uxtb	r2, r2
 8001dce:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	011b      	lsls	r3, r3, #4
 8001dd8:	4413      	add	r3, r2
 8001dda:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	0c1a      	lsrs	r2, r3, #16
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	3306      	adds	r3, #6
 8001de6:	b2d2      	uxtb	r2, r2
 8001de8:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	011b      	lsls	r3, r3, #4
 8001df2:	4413      	add	r3, r2
 8001df4:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	0e1a      	lsrs	r2, r3, #24
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	3307      	adds	r3, #7
 8001e00:	b2d2      	uxtb	r2, r2
 8001e02:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d108      	bne.n	8001e1c <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	68da      	ldr	r2, [r3, #12]
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f042 0220 	orr.w	r2, r2, #32
 8001e18:	60da      	str	r2, [r3, #12]
 8001e1a:	e007      	b.n	8001e2c <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	691a      	ldr	r2, [r3, #16]
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f042 0220 	orr.w	r2, r2, #32
 8001e2a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	e006      	b.n	8001e3e <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e34:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
  }
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	371c      	adds	r7, #28
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr

08001e4a <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001e4a:	b480      	push	{r7}
 8001e4c:	b085      	sub	sp, #20
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	6078      	str	r0, [r7, #4]
 8001e52:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e5a:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001e5c:	7bfb      	ldrb	r3, [r7, #15]
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d002      	beq.n	8001e68 <HAL_CAN_ActivateNotification+0x1e>
 8001e62:	7bfb      	ldrb	r3, [r7, #15]
 8001e64:	2b02      	cmp	r3, #2
 8001e66:	d109      	bne.n	8001e7c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	6959      	ldr	r1, [r3, #20]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	683a      	ldr	r2, [r7, #0]
 8001e74:	430a      	orrs	r2, r1
 8001e76:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	e006      	b.n	8001e8a <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e80:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
  }
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3714      	adds	r7, #20
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr

08001e96 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001e96:	b580      	push	{r7, lr}
 8001e98:	b08a      	sub	sp, #40	@ 0x28
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	695b      	ldr	r3, [r3, #20]
 8001ea8:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	68db      	ldr	r3, [r3, #12]
 8001ec0:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	691b      	ldr	r3, [r3, #16]
 8001ec8:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	699b      	ldr	r3, [r3, #24]
 8001ed0:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001ed2:	6a3b      	ldr	r3, [r7, #32]
 8001ed4:	f003 0301 	and.w	r3, r3, #1
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d07c      	beq.n	8001fd6 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001edc:	69bb      	ldr	r3, [r7, #24]
 8001ede:	f003 0301 	and.w	r3, r3, #1
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d023      	beq.n	8001f2e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	2201      	movs	r2, #1
 8001eec:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001eee:	69bb      	ldr	r3, [r7, #24]
 8001ef0:	f003 0302 	and.w	r3, r3, #2
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d003      	beq.n	8001f00 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	f000 f983 	bl	8002204 <HAL_CAN_TxMailbox0CompleteCallback>
 8001efe:	e016      	b.n	8001f2e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001f00:	69bb      	ldr	r3, [r7, #24]
 8001f02:	f003 0304 	and.w	r3, r3, #4
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d004      	beq.n	8001f14 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f0c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001f10:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f12:	e00c      	b.n	8001f2e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001f14:	69bb      	ldr	r3, [r7, #24]
 8001f16:	f003 0308 	and.w	r3, r3, #8
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d004      	beq.n	8001f28 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f20:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001f24:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f26:	e002      	b.n	8001f2e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001f28:	6878      	ldr	r0, [r7, #4]
 8001f2a:	f000 f989 	bl	8002240 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001f2e:	69bb      	ldr	r3, [r7, #24]
 8001f30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d024      	beq.n	8001f82 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001f40:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001f42:	69bb      	ldr	r3, [r7, #24]
 8001f44:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d003      	beq.n	8001f54 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	f000 f963 	bl	8002218 <HAL_CAN_TxMailbox1CompleteCallback>
 8001f52:	e016      	b.n	8001f82 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001f54:	69bb      	ldr	r3, [r7, #24]
 8001f56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d004      	beq.n	8001f68 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f60:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001f64:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f66:	e00c      	b.n	8001f82 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001f68:	69bb      	ldr	r3, [r7, #24]
 8001f6a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d004      	beq.n	8001f7c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f74:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f78:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f7a:	e002      	b.n	8001f82 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f000 f969 	bl	8002254 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001f82:	69bb      	ldr	r3, [r7, #24]
 8001f84:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d024      	beq.n	8001fd6 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001f94:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001f96:	69bb      	ldr	r3, [r7, #24]
 8001f98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d003      	beq.n	8001fa8 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	f000 f943 	bl	800222c <HAL_CAN_TxMailbox2CompleteCallback>
 8001fa6:	e016      	b.n	8001fd6 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001fa8:	69bb      	ldr	r3, [r7, #24]
 8001faa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d004      	beq.n	8001fbc <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fb4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001fb8:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fba:	e00c      	b.n	8001fd6 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001fbc:	69bb      	ldr	r3, [r7, #24]
 8001fbe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d004      	beq.n	8001fd0 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fc8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fcc:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fce:	e002      	b.n	8001fd6 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f000 f949 	bl	8002268 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001fd6:	6a3b      	ldr	r3, [r7, #32]
 8001fd8:	f003 0308 	and.w	r3, r3, #8
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d00c      	beq.n	8001ffa <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	f003 0310 	and.w	r3, r3, #16
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d007      	beq.n	8001ffa <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fec:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ff0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	2210      	movs	r2, #16
 8001ff8:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001ffa:	6a3b      	ldr	r3, [r7, #32]
 8001ffc:	f003 0304 	and.w	r3, r3, #4
 8002000:	2b00      	cmp	r3, #0
 8002002:	d00b      	beq.n	800201c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	f003 0308 	and.w	r3, r3, #8
 800200a:	2b00      	cmp	r3, #0
 800200c:	d006      	beq.n	800201c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	2208      	movs	r2, #8
 8002014:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f000 f930 	bl	800227c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800201c:	6a3b      	ldr	r3, [r7, #32]
 800201e:	f003 0302 	and.w	r3, r3, #2
 8002022:	2b00      	cmp	r3, #0
 8002024:	d009      	beq.n	800203a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	f003 0303 	and.w	r3, r3, #3
 8002030:	2b00      	cmp	r3, #0
 8002032:	d002      	beq.n	800203a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	f7fe f8fd 	bl	8000234 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800203a:	6a3b      	ldr	r3, [r7, #32]
 800203c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002040:	2b00      	cmp	r3, #0
 8002042:	d00c      	beq.n	800205e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	f003 0310 	and.w	r3, r3, #16
 800204a:	2b00      	cmp	r3, #0
 800204c:	d007      	beq.n	800205e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800204e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002050:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002054:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	2210      	movs	r2, #16
 800205c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800205e:	6a3b      	ldr	r3, [r7, #32]
 8002060:	f003 0320 	and.w	r3, r3, #32
 8002064:	2b00      	cmp	r3, #0
 8002066:	d00b      	beq.n	8002080 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	f003 0308 	and.w	r3, r3, #8
 800206e:	2b00      	cmp	r3, #0
 8002070:	d006      	beq.n	8002080 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	2208      	movs	r2, #8
 8002078:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	f000 f912 	bl	80022a4 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002080:	6a3b      	ldr	r3, [r7, #32]
 8002082:	f003 0310 	and.w	r3, r3, #16
 8002086:	2b00      	cmp	r3, #0
 8002088:	d009      	beq.n	800209e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	691b      	ldr	r3, [r3, #16]
 8002090:	f003 0303 	and.w	r3, r3, #3
 8002094:	2b00      	cmp	r3, #0
 8002096:	d002      	beq.n	800209e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	f000 f8f9 	bl	8002290 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800209e:	6a3b      	ldr	r3, [r7, #32]
 80020a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d00b      	beq.n	80020c0 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80020a8:	69fb      	ldr	r3, [r7, #28]
 80020aa:	f003 0310 	and.w	r3, r3, #16
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d006      	beq.n	80020c0 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	2210      	movs	r2, #16
 80020b8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f000 f8fc 	bl	80022b8 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80020c0:	6a3b      	ldr	r3, [r7, #32]
 80020c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d00b      	beq.n	80020e2 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	f003 0308 	and.w	r3, r3, #8
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d006      	beq.n	80020e2 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	2208      	movs	r2, #8
 80020da:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	f000 f8f5 	bl	80022cc <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80020e2:	6a3b      	ldr	r3, [r7, #32]
 80020e4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d07b      	beq.n	80021e4 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	f003 0304 	and.w	r3, r3, #4
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d072      	beq.n	80021dc <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80020f6:	6a3b      	ldr	r3, [r7, #32]
 80020f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d008      	beq.n	8002112 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002106:	2b00      	cmp	r3, #0
 8002108:	d003      	beq.n	8002112 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800210a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800210c:	f043 0301 	orr.w	r3, r3, #1
 8002110:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002112:	6a3b      	ldr	r3, [r7, #32]
 8002114:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002118:	2b00      	cmp	r3, #0
 800211a:	d008      	beq.n	800212e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002122:	2b00      	cmp	r3, #0
 8002124:	d003      	beq.n	800212e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002128:	f043 0302 	orr.w	r3, r3, #2
 800212c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800212e:	6a3b      	ldr	r3, [r7, #32]
 8002130:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002134:	2b00      	cmp	r3, #0
 8002136:	d008      	beq.n	800214a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800213e:	2b00      	cmp	r3, #0
 8002140:	d003      	beq.n	800214a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002144:	f043 0304 	orr.w	r3, r3, #4
 8002148:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800214a:	6a3b      	ldr	r3, [r7, #32]
 800214c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002150:	2b00      	cmp	r3, #0
 8002152:	d043      	beq.n	80021dc <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800215a:	2b00      	cmp	r3, #0
 800215c:	d03e      	beq.n	80021dc <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002164:	2b60      	cmp	r3, #96	@ 0x60
 8002166:	d02b      	beq.n	80021c0 <HAL_CAN_IRQHandler+0x32a>
 8002168:	2b60      	cmp	r3, #96	@ 0x60
 800216a:	d82e      	bhi.n	80021ca <HAL_CAN_IRQHandler+0x334>
 800216c:	2b50      	cmp	r3, #80	@ 0x50
 800216e:	d022      	beq.n	80021b6 <HAL_CAN_IRQHandler+0x320>
 8002170:	2b50      	cmp	r3, #80	@ 0x50
 8002172:	d82a      	bhi.n	80021ca <HAL_CAN_IRQHandler+0x334>
 8002174:	2b40      	cmp	r3, #64	@ 0x40
 8002176:	d019      	beq.n	80021ac <HAL_CAN_IRQHandler+0x316>
 8002178:	2b40      	cmp	r3, #64	@ 0x40
 800217a:	d826      	bhi.n	80021ca <HAL_CAN_IRQHandler+0x334>
 800217c:	2b30      	cmp	r3, #48	@ 0x30
 800217e:	d010      	beq.n	80021a2 <HAL_CAN_IRQHandler+0x30c>
 8002180:	2b30      	cmp	r3, #48	@ 0x30
 8002182:	d822      	bhi.n	80021ca <HAL_CAN_IRQHandler+0x334>
 8002184:	2b10      	cmp	r3, #16
 8002186:	d002      	beq.n	800218e <HAL_CAN_IRQHandler+0x2f8>
 8002188:	2b20      	cmp	r3, #32
 800218a:	d005      	beq.n	8002198 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800218c:	e01d      	b.n	80021ca <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800218e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002190:	f043 0308 	orr.w	r3, r3, #8
 8002194:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002196:	e019      	b.n	80021cc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800219a:	f043 0310 	orr.w	r3, r3, #16
 800219e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80021a0:	e014      	b.n	80021cc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80021a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021a4:	f043 0320 	orr.w	r3, r3, #32
 80021a8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80021aa:	e00f      	b.n	80021cc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80021ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80021b2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80021b4:	e00a      	b.n	80021cc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80021b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80021bc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80021be:	e005      	b.n	80021cc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80021c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021c6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80021c8:	e000      	b.n	80021cc <HAL_CAN_IRQHandler+0x336>
            break;
 80021ca:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	699a      	ldr	r2, [r3, #24]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80021da:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	2204      	movs	r2, #4
 80021e2:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80021e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d008      	beq.n	80021fc <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80021ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021f0:	431a      	orrs	r2, r3
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f000 f872 	bl	80022e0 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80021fc:	bf00      	nop
 80021fe:	3728      	adds	r7, #40	@ 0x28
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}

08002204 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800220c:	bf00      	nop
 800220e:	370c      	adds	r7, #12
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr

08002218 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002220:	bf00      	nop
 8002222:	370c      	adds	r7, #12
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr

0800222c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002234:	bf00      	nop
 8002236:	370c      	adds	r7, #12
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr

08002240 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002240:	b480      	push	{r7}
 8002242:	b083      	sub	sp, #12
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002248:	bf00      	nop
 800224a:	370c      	adds	r7, #12
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr

08002254 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800225c:	bf00      	nop
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr

08002268 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002270:	bf00      	nop
 8002272:	370c      	adds	r7, #12
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr

0800227c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800227c:	b480      	push	{r7}
 800227e:	b083      	sub	sp, #12
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002284:	bf00      	nop
 8002286:	370c      	adds	r7, #12
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr

08002290 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002298:	bf00      	nop
 800229a:	370c      	adds	r7, #12
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr

080022a4 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80022ac:	bf00      	nop
 80022ae:	370c      	adds	r7, #12
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr

080022b8 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80022c0:	bf00      	nop
 80022c2:	370c      	adds	r7, #12
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr

080022cc <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80022d4:	bf00      	nop
 80022d6:	370c      	adds	r7, #12
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr

080022e0 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80022e8:	bf00      	nop
 80022ea:	370c      	adds	r7, #12
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr

080022f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b085      	sub	sp, #20
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	f003 0307 	and.w	r3, r3, #7
 8002302:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002304:	4b0c      	ldr	r3, [pc, #48]	@ (8002338 <__NVIC_SetPriorityGrouping+0x44>)
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800230a:	68ba      	ldr	r2, [r7, #8]
 800230c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002310:	4013      	ands	r3, r2
 8002312:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800231c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002320:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002324:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002326:	4a04      	ldr	r2, [pc, #16]	@ (8002338 <__NVIC_SetPriorityGrouping+0x44>)
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	60d3      	str	r3, [r2, #12]
}
 800232c:	bf00      	nop
 800232e:	3714      	adds	r7, #20
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr
 8002338:	e000ed00 	.word	0xe000ed00

0800233c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800233c:	b480      	push	{r7}
 800233e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002340:	4b04      	ldr	r3, [pc, #16]	@ (8002354 <__NVIC_GetPriorityGrouping+0x18>)
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	0a1b      	lsrs	r3, r3, #8
 8002346:	f003 0307 	and.w	r3, r3, #7
}
 800234a:	4618      	mov	r0, r3
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr
 8002354:	e000ed00 	.word	0xe000ed00

08002358 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	4603      	mov	r3, r0
 8002360:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002366:	2b00      	cmp	r3, #0
 8002368:	db0b      	blt.n	8002382 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800236a:	79fb      	ldrb	r3, [r7, #7]
 800236c:	f003 021f 	and.w	r2, r3, #31
 8002370:	4907      	ldr	r1, [pc, #28]	@ (8002390 <__NVIC_EnableIRQ+0x38>)
 8002372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002376:	095b      	lsrs	r3, r3, #5
 8002378:	2001      	movs	r0, #1
 800237a:	fa00 f202 	lsl.w	r2, r0, r2
 800237e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002382:	bf00      	nop
 8002384:	370c      	adds	r7, #12
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr
 800238e:	bf00      	nop
 8002390:	e000e100 	.word	0xe000e100

08002394 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	4603      	mov	r3, r0
 800239c:	6039      	str	r1, [r7, #0]
 800239e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	db0a      	blt.n	80023be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	b2da      	uxtb	r2, r3
 80023ac:	490c      	ldr	r1, [pc, #48]	@ (80023e0 <__NVIC_SetPriority+0x4c>)
 80023ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b2:	0112      	lsls	r2, r2, #4
 80023b4:	b2d2      	uxtb	r2, r2
 80023b6:	440b      	add	r3, r1
 80023b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023bc:	e00a      	b.n	80023d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	b2da      	uxtb	r2, r3
 80023c2:	4908      	ldr	r1, [pc, #32]	@ (80023e4 <__NVIC_SetPriority+0x50>)
 80023c4:	79fb      	ldrb	r3, [r7, #7]
 80023c6:	f003 030f 	and.w	r3, r3, #15
 80023ca:	3b04      	subs	r3, #4
 80023cc:	0112      	lsls	r2, r2, #4
 80023ce:	b2d2      	uxtb	r2, r2
 80023d0:	440b      	add	r3, r1
 80023d2:	761a      	strb	r2, [r3, #24]
}
 80023d4:	bf00      	nop
 80023d6:	370c      	adds	r7, #12
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr
 80023e0:	e000e100 	.word	0xe000e100
 80023e4:	e000ed00 	.word	0xe000ed00

080023e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b089      	sub	sp, #36	@ 0x24
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	60f8      	str	r0, [r7, #12]
 80023f0:	60b9      	str	r1, [r7, #8]
 80023f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	f003 0307 	and.w	r3, r3, #7
 80023fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	f1c3 0307 	rsb	r3, r3, #7
 8002402:	2b04      	cmp	r3, #4
 8002404:	bf28      	it	cs
 8002406:	2304      	movcs	r3, #4
 8002408:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	3304      	adds	r3, #4
 800240e:	2b06      	cmp	r3, #6
 8002410:	d902      	bls.n	8002418 <NVIC_EncodePriority+0x30>
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	3b03      	subs	r3, #3
 8002416:	e000      	b.n	800241a <NVIC_EncodePriority+0x32>
 8002418:	2300      	movs	r3, #0
 800241a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800241c:	f04f 32ff 	mov.w	r2, #4294967295
 8002420:	69bb      	ldr	r3, [r7, #24]
 8002422:	fa02 f303 	lsl.w	r3, r2, r3
 8002426:	43da      	mvns	r2, r3
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	401a      	ands	r2, r3
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002430:	f04f 31ff 	mov.w	r1, #4294967295
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	fa01 f303 	lsl.w	r3, r1, r3
 800243a:	43d9      	mvns	r1, r3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002440:	4313      	orrs	r3, r2
         );
}
 8002442:	4618      	mov	r0, r3
 8002444:	3724      	adds	r7, #36	@ 0x24
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr

0800244e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800244e:	b580      	push	{r7, lr}
 8002450:	b082      	sub	sp, #8
 8002452:	af00      	add	r7, sp, #0
 8002454:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f7ff ff4c 	bl	80022f4 <__NVIC_SetPriorityGrouping>
}
 800245c:	bf00      	nop
 800245e:	3708      	adds	r7, #8
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}

08002464 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b086      	sub	sp, #24
 8002468:	af00      	add	r7, sp, #0
 800246a:	4603      	mov	r3, r0
 800246c:	60b9      	str	r1, [r7, #8]
 800246e:	607a      	str	r2, [r7, #4]
 8002470:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002472:	2300      	movs	r3, #0
 8002474:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002476:	f7ff ff61 	bl	800233c <__NVIC_GetPriorityGrouping>
 800247a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800247c:	687a      	ldr	r2, [r7, #4]
 800247e:	68b9      	ldr	r1, [r7, #8]
 8002480:	6978      	ldr	r0, [r7, #20]
 8002482:	f7ff ffb1 	bl	80023e8 <NVIC_EncodePriority>
 8002486:	4602      	mov	r2, r0
 8002488:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800248c:	4611      	mov	r1, r2
 800248e:	4618      	mov	r0, r3
 8002490:	f7ff ff80 	bl	8002394 <__NVIC_SetPriority>
}
 8002494:	bf00      	nop
 8002496:	3718      	adds	r7, #24
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}

0800249c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	4603      	mov	r3, r0
 80024a4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024aa:	4618      	mov	r0, r3
 80024ac:	f7ff ff54 	bl	8002358 <__NVIC_EnableIRQ>
}
 80024b0:	bf00      	nop
 80024b2:	3708      	adds	r7, #8
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}

080024b8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b084      	sub	sp, #16
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80024c0:	2300      	movs	r3, #0
 80024c2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d101      	bne.n	80024ce <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e037      	b.n	800253e <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2202      	movs	r2, #2
 80024d2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80024e4:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80024e8:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80024f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	695b      	ldr	r3, [r3, #20]
 8002504:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800250a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	69db      	ldr	r3, [r3, #28]
 8002510:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002512:	68fa      	ldr	r2, [r7, #12]
 8002514:	4313      	orrs	r3, r2
 8002516:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	68fa      	ldr	r2, [r7, #12]
 800251e:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002520:	6878      	ldr	r0, [r7, #4]
 8002522:	f000 f8b3 	bl	800268c <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2200      	movs	r2, #0
 800252a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2201      	movs	r2, #1
 8002530:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2200      	movs	r2, #0
 8002538:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800253c:	2300      	movs	r3, #0
}
 800253e:	4618      	mov	r0, r3
 8002540:	3710      	adds	r7, #16
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}

08002546 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002546:	b580      	push	{r7, lr}
 8002548:	b084      	sub	sp, #16
 800254a:	af00      	add	r7, sp, #0
 800254c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002562:	2204      	movs	r2, #4
 8002564:	409a      	lsls	r2, r3
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	4013      	ands	r3, r2
 800256a:	2b00      	cmp	r3, #0
 800256c:	d024      	beq.n	80025b8 <HAL_DMA_IRQHandler+0x72>
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	f003 0304 	and.w	r3, r3, #4
 8002574:	2b00      	cmp	r3, #0
 8002576:	d01f      	beq.n	80025b8 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 0320 	and.w	r3, r3, #32
 8002582:	2b00      	cmp	r3, #0
 8002584:	d107      	bne.n	8002596 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f022 0204 	bic.w	r2, r2, #4
 8002594:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800259e:	2104      	movs	r1, #4
 80025a0:	fa01 f202 	lsl.w	r2, r1, r2
 80025a4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d06a      	beq.n	8002684 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80025b6:	e065      	b.n	8002684 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025bc:	2202      	movs	r2, #2
 80025be:	409a      	lsls	r2, r3
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	4013      	ands	r3, r2
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d02c      	beq.n	8002622 <HAL_DMA_IRQHandler+0xdc>
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	f003 0302 	and.w	r3, r3, #2
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d027      	beq.n	8002622 <HAL_DMA_IRQHandler+0xdc>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 0320 	and.w	r3, r3, #32
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d10b      	bne.n	80025f8 <HAL_DMA_IRQHandler+0xb2>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f022 020a 	bic.w	r2, r2, #10
 80025ee:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2201      	movs	r2, #1
 80025f4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002600:	2102      	movs	r1, #2
 8002602:	fa01 f202 	lsl.w	r2, r1, r2
 8002606:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2200      	movs	r2, #0
 800260c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002614:	2b00      	cmp	r3, #0
 8002616:	d035      	beq.n	8002684 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800261c:	6878      	ldr	r0, [r7, #4]
 800261e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002620:	e030      	b.n	8002684 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002626:	2208      	movs	r2, #8
 8002628:	409a      	lsls	r2, r3
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	4013      	ands	r3, r2
 800262e:	2b00      	cmp	r3, #0
 8002630:	d028      	beq.n	8002684 <HAL_DMA_IRQHandler+0x13e>
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	f003 0308 	and.w	r3, r3, #8
 8002638:	2b00      	cmp	r3, #0
 800263a:	d023      	beq.n	8002684 <HAL_DMA_IRQHandler+0x13e>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f022 020e 	bic.w	r2, r2, #14
 800264a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002654:	2101      	movs	r1, #1
 8002656:	fa01 f202 	lsl.w	r2, r1, r2
 800265a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2201      	movs	r2, #1
 8002660:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2201      	movs	r2, #1
 8002666:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2200      	movs	r2, #0
 800266e:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferErrorCallback != NULL)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002676:	2b00      	cmp	r3, #0
 8002678:	d004      	beq.n	8002684 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	4798      	blx	r3
    }
  }
}
 8002682:	e7ff      	b.n	8002684 <HAL_DMA_IRQHandler+0x13e>
 8002684:	bf00      	nop
 8002686:	3710      	adds	r7, #16
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}

0800268c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800268c:	b480      	push	{r7}
 800268e:	b083      	sub	sp, #12
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	461a      	mov	r2, r3
 800269a:	4b09      	ldr	r3, [pc, #36]	@ (80026c0 <DMA_CalcBaseAndBitshift+0x34>)
 800269c:	4413      	add	r3, r2
 800269e:	4a09      	ldr	r2, [pc, #36]	@ (80026c4 <DMA_CalcBaseAndBitshift+0x38>)
 80026a0:	fba2 2303 	umull	r2, r3, r2, r3
 80026a4:	091b      	lsrs	r3, r3, #4
 80026a6:	009a      	lsls	r2, r3, #2
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	4a06      	ldr	r2, [pc, #24]	@ (80026c8 <DMA_CalcBaseAndBitshift+0x3c>)
 80026b0:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 80026b2:	bf00      	nop
 80026b4:	370c      	adds	r7, #12
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr
 80026be:	bf00      	nop
 80026c0:	bffdfff8 	.word	0xbffdfff8
 80026c4:	cccccccd 	.word	0xcccccccd
 80026c8:	40020000 	.word	0x40020000

080026cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b087      	sub	sp, #28
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80026d6:	2300      	movs	r3, #0
 80026d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026da:	e14e      	b.n	800297a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	2101      	movs	r1, #1
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	fa01 f303 	lsl.w	r3, r1, r3
 80026e8:	4013      	ands	r3, r2
 80026ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	f000 8140 	beq.w	8002974 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	f003 0303 	and.w	r3, r3, #3
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d005      	beq.n	800270c <HAL_GPIO_Init+0x40>
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f003 0303 	and.w	r3, r3, #3
 8002708:	2b02      	cmp	r3, #2
 800270a:	d130      	bne.n	800276e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	005b      	lsls	r3, r3, #1
 8002716:	2203      	movs	r2, #3
 8002718:	fa02 f303 	lsl.w	r3, r2, r3
 800271c:	43db      	mvns	r3, r3
 800271e:	693a      	ldr	r2, [r7, #16]
 8002720:	4013      	ands	r3, r2
 8002722:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	68da      	ldr	r2, [r3, #12]
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	005b      	lsls	r3, r3, #1
 800272c:	fa02 f303 	lsl.w	r3, r2, r3
 8002730:	693a      	ldr	r2, [r7, #16]
 8002732:	4313      	orrs	r3, r2
 8002734:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	693a      	ldr	r2, [r7, #16]
 800273a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002742:	2201      	movs	r2, #1
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	fa02 f303 	lsl.w	r3, r2, r3
 800274a:	43db      	mvns	r3, r3
 800274c:	693a      	ldr	r2, [r7, #16]
 800274e:	4013      	ands	r3, r2
 8002750:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	091b      	lsrs	r3, r3, #4
 8002758:	f003 0201 	and.w	r2, r3, #1
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	fa02 f303 	lsl.w	r3, r2, r3
 8002762:	693a      	ldr	r2, [r7, #16]
 8002764:	4313      	orrs	r3, r2
 8002766:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	693a      	ldr	r2, [r7, #16]
 800276c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	f003 0303 	and.w	r3, r3, #3
 8002776:	2b03      	cmp	r3, #3
 8002778:	d017      	beq.n	80027aa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	68db      	ldr	r3, [r3, #12]
 800277e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	005b      	lsls	r3, r3, #1
 8002784:	2203      	movs	r2, #3
 8002786:	fa02 f303 	lsl.w	r3, r2, r3
 800278a:	43db      	mvns	r3, r3
 800278c:	693a      	ldr	r2, [r7, #16]
 800278e:	4013      	ands	r3, r2
 8002790:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	689a      	ldr	r2, [r3, #8]
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	005b      	lsls	r3, r3, #1
 800279a:	fa02 f303 	lsl.w	r3, r2, r3
 800279e:	693a      	ldr	r2, [r7, #16]
 80027a0:	4313      	orrs	r3, r2
 80027a2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	693a      	ldr	r2, [r7, #16]
 80027a8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	f003 0303 	and.w	r3, r3, #3
 80027b2:	2b02      	cmp	r3, #2
 80027b4:	d123      	bne.n	80027fe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	08da      	lsrs	r2, r3, #3
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	3208      	adds	r2, #8
 80027be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	f003 0307 	and.w	r3, r3, #7
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	220f      	movs	r2, #15
 80027ce:	fa02 f303 	lsl.w	r3, r2, r3
 80027d2:	43db      	mvns	r3, r3
 80027d4:	693a      	ldr	r2, [r7, #16]
 80027d6:	4013      	ands	r3, r2
 80027d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	691a      	ldr	r2, [r3, #16]
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	f003 0307 	and.w	r3, r3, #7
 80027e4:	009b      	lsls	r3, r3, #2
 80027e6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ea:	693a      	ldr	r2, [r7, #16]
 80027ec:	4313      	orrs	r3, r2
 80027ee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	08da      	lsrs	r2, r3, #3
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	3208      	adds	r2, #8
 80027f8:	6939      	ldr	r1, [r7, #16]
 80027fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	005b      	lsls	r3, r3, #1
 8002808:	2203      	movs	r2, #3
 800280a:	fa02 f303 	lsl.w	r3, r2, r3
 800280e:	43db      	mvns	r3, r3
 8002810:	693a      	ldr	r2, [r7, #16]
 8002812:	4013      	ands	r3, r2
 8002814:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	f003 0203 	and.w	r2, r3, #3
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	005b      	lsls	r3, r3, #1
 8002822:	fa02 f303 	lsl.w	r3, r2, r3
 8002826:	693a      	ldr	r2, [r7, #16]
 8002828:	4313      	orrs	r3, r2
 800282a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	693a      	ldr	r2, [r7, #16]
 8002830:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800283a:	2b00      	cmp	r3, #0
 800283c:	f000 809a 	beq.w	8002974 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002840:	4b55      	ldr	r3, [pc, #340]	@ (8002998 <HAL_GPIO_Init+0x2cc>)
 8002842:	699b      	ldr	r3, [r3, #24]
 8002844:	4a54      	ldr	r2, [pc, #336]	@ (8002998 <HAL_GPIO_Init+0x2cc>)
 8002846:	f043 0301 	orr.w	r3, r3, #1
 800284a:	6193      	str	r3, [r2, #24]
 800284c:	4b52      	ldr	r3, [pc, #328]	@ (8002998 <HAL_GPIO_Init+0x2cc>)
 800284e:	699b      	ldr	r3, [r3, #24]
 8002850:	f003 0301 	and.w	r3, r3, #1
 8002854:	60bb      	str	r3, [r7, #8]
 8002856:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002858:	4a50      	ldr	r2, [pc, #320]	@ (800299c <HAL_GPIO_Init+0x2d0>)
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	089b      	lsrs	r3, r3, #2
 800285e:	3302      	adds	r3, #2
 8002860:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002864:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	f003 0303 	and.w	r3, r3, #3
 800286c:	009b      	lsls	r3, r3, #2
 800286e:	220f      	movs	r2, #15
 8002870:	fa02 f303 	lsl.w	r3, r2, r3
 8002874:	43db      	mvns	r3, r3
 8002876:	693a      	ldr	r2, [r7, #16]
 8002878:	4013      	ands	r3, r2
 800287a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002882:	d013      	beq.n	80028ac <HAL_GPIO_Init+0x1e0>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	4a46      	ldr	r2, [pc, #280]	@ (80029a0 <HAL_GPIO_Init+0x2d4>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d00d      	beq.n	80028a8 <HAL_GPIO_Init+0x1dc>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	4a45      	ldr	r2, [pc, #276]	@ (80029a4 <HAL_GPIO_Init+0x2d8>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d007      	beq.n	80028a4 <HAL_GPIO_Init+0x1d8>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	4a44      	ldr	r2, [pc, #272]	@ (80029a8 <HAL_GPIO_Init+0x2dc>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d101      	bne.n	80028a0 <HAL_GPIO_Init+0x1d4>
 800289c:	2303      	movs	r3, #3
 800289e:	e006      	b.n	80028ae <HAL_GPIO_Init+0x1e2>
 80028a0:	2305      	movs	r3, #5
 80028a2:	e004      	b.n	80028ae <HAL_GPIO_Init+0x1e2>
 80028a4:	2302      	movs	r3, #2
 80028a6:	e002      	b.n	80028ae <HAL_GPIO_Init+0x1e2>
 80028a8:	2301      	movs	r3, #1
 80028aa:	e000      	b.n	80028ae <HAL_GPIO_Init+0x1e2>
 80028ac:	2300      	movs	r3, #0
 80028ae:	697a      	ldr	r2, [r7, #20]
 80028b0:	f002 0203 	and.w	r2, r2, #3
 80028b4:	0092      	lsls	r2, r2, #2
 80028b6:	4093      	lsls	r3, r2
 80028b8:	693a      	ldr	r2, [r7, #16]
 80028ba:	4313      	orrs	r3, r2
 80028bc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80028be:	4937      	ldr	r1, [pc, #220]	@ (800299c <HAL_GPIO_Init+0x2d0>)
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	089b      	lsrs	r3, r3, #2
 80028c4:	3302      	adds	r3, #2
 80028c6:	693a      	ldr	r2, [r7, #16]
 80028c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028cc:	4b37      	ldr	r3, [pc, #220]	@ (80029ac <HAL_GPIO_Init+0x2e0>)
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	43db      	mvns	r3, r3
 80028d6:	693a      	ldr	r2, [r7, #16]
 80028d8:	4013      	ands	r3, r2
 80028da:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d003      	beq.n	80028f0 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80028e8:	693a      	ldr	r2, [r7, #16]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	4313      	orrs	r3, r2
 80028ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80028f0:	4a2e      	ldr	r2, [pc, #184]	@ (80029ac <HAL_GPIO_Init+0x2e0>)
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028f6:	4b2d      	ldr	r3, [pc, #180]	@ (80029ac <HAL_GPIO_Init+0x2e0>)
 80028f8:	68db      	ldr	r3, [r3, #12]
 80028fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	43db      	mvns	r3, r3
 8002900:	693a      	ldr	r2, [r7, #16]
 8002902:	4013      	ands	r3, r2
 8002904:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800290e:	2b00      	cmp	r3, #0
 8002910:	d003      	beq.n	800291a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002912:	693a      	ldr	r2, [r7, #16]
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	4313      	orrs	r3, r2
 8002918:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800291a:	4a24      	ldr	r2, [pc, #144]	@ (80029ac <HAL_GPIO_Init+0x2e0>)
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002920:	4b22      	ldr	r3, [pc, #136]	@ (80029ac <HAL_GPIO_Init+0x2e0>)
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	43db      	mvns	r3, r3
 800292a:	693a      	ldr	r2, [r7, #16]
 800292c:	4013      	ands	r3, r2
 800292e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002938:	2b00      	cmp	r3, #0
 800293a:	d003      	beq.n	8002944 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 800293c:	693a      	ldr	r2, [r7, #16]
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	4313      	orrs	r3, r2
 8002942:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002944:	4a19      	ldr	r2, [pc, #100]	@ (80029ac <HAL_GPIO_Init+0x2e0>)
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800294a:	4b18      	ldr	r3, [pc, #96]	@ (80029ac <HAL_GPIO_Init+0x2e0>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	43db      	mvns	r3, r3
 8002954:	693a      	ldr	r2, [r7, #16]
 8002956:	4013      	ands	r3, r2
 8002958:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002962:	2b00      	cmp	r3, #0
 8002964:	d003      	beq.n	800296e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002966:	693a      	ldr	r2, [r7, #16]
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	4313      	orrs	r3, r2
 800296c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800296e:	4a0f      	ldr	r2, [pc, #60]	@ (80029ac <HAL_GPIO_Init+0x2e0>)
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	3301      	adds	r3, #1
 8002978:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	fa22 f303 	lsr.w	r3, r2, r3
 8002984:	2b00      	cmp	r3, #0
 8002986:	f47f aea9 	bne.w	80026dc <HAL_GPIO_Init+0x10>
  }
}
 800298a:	bf00      	nop
 800298c:	bf00      	nop
 800298e:	371c      	adds	r7, #28
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr
 8002998:	40021000 	.word	0x40021000
 800299c:	40010000 	.word	0x40010000
 80029a0:	48000400 	.word	0x48000400
 80029a4:	48000800 	.word	0x48000800
 80029a8:	48000c00 	.word	0x48000c00
 80029ac:	40010400 	.word	0x40010400

080029b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b083      	sub	sp, #12
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
 80029b8:	460b      	mov	r3, r1
 80029ba:	807b      	strh	r3, [r7, #2]
 80029bc:	4613      	mov	r3, r2
 80029be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029c0:	787b      	ldrb	r3, [r7, #1]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d003      	beq.n	80029ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80029c6:	887a      	ldrh	r2, [r7, #2]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80029cc:	e002      	b.n	80029d4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80029ce:	887a      	ldrh	r2, [r7, #2]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80029d4:	bf00      	nop
 80029d6:	370c      	adds	r7, #12
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr

080029e0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b085      	sub	sp, #20
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
 80029e8:	460b      	mov	r3, r1
 80029ea:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	695b      	ldr	r3, [r3, #20]
 80029f0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80029f2:	887a      	ldrh	r2, [r7, #2]
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	4013      	ands	r3, r2
 80029f8:	041a      	lsls	r2, r3, #16
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	43d9      	mvns	r1, r3
 80029fe:	887b      	ldrh	r3, [r7, #2]
 8002a00:	400b      	ands	r3, r1
 8002a02:	431a      	orrs	r2, r3
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	619a      	str	r2, [r3, #24]
}
 8002a08:	bf00      	nop
 8002a0a:	3714      	adds	r7, #20
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr

08002a14 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a20:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a24:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a2a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d102      	bne.n	8002a3a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	f001 b823 	b.w	8003a80 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a3e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0301 	and.w	r3, r3, #1
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	f000 817d 	beq.w	8002d4a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002a50:	4bbc      	ldr	r3, [pc, #752]	@ (8002d44 <HAL_RCC_OscConfig+0x330>)
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	f003 030c 	and.w	r3, r3, #12
 8002a58:	2b04      	cmp	r3, #4
 8002a5a:	d00c      	beq.n	8002a76 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a5c:	4bb9      	ldr	r3, [pc, #740]	@ (8002d44 <HAL_RCC_OscConfig+0x330>)
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	f003 030c 	and.w	r3, r3, #12
 8002a64:	2b08      	cmp	r3, #8
 8002a66:	d15c      	bne.n	8002b22 <HAL_RCC_OscConfig+0x10e>
 8002a68:	4bb6      	ldr	r3, [pc, #728]	@ (8002d44 <HAL_RCC_OscConfig+0x330>)
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a74:	d155      	bne.n	8002b22 <HAL_RCC_OscConfig+0x10e>
 8002a76:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002a7a:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a7e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8002a82:	fa93 f3a3 	rbit	r3, r3
 8002a86:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002a8a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a8e:	fab3 f383 	clz	r3, r3
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	095b      	lsrs	r3, r3, #5
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	f043 0301 	orr.w	r3, r3, #1
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d102      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x94>
 8002aa2:	4ba8      	ldr	r3, [pc, #672]	@ (8002d44 <HAL_RCC_OscConfig+0x330>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	e015      	b.n	8002ad4 <HAL_RCC_OscConfig+0xc0>
 8002aa8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002aac:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ab0:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8002ab4:	fa93 f3a3 	rbit	r3, r3
 8002ab8:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8002abc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002ac0:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8002ac4:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8002ac8:	fa93 f3a3 	rbit	r3, r3
 8002acc:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8002ad0:	4b9c      	ldr	r3, [pc, #624]	@ (8002d44 <HAL_RCC_OscConfig+0x330>)
 8002ad2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ad4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002ad8:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8002adc:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8002ae0:	fa92 f2a2 	rbit	r2, r2
 8002ae4:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8002ae8:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8002aec:	fab2 f282 	clz	r2, r2
 8002af0:	b2d2      	uxtb	r2, r2
 8002af2:	f042 0220 	orr.w	r2, r2, #32
 8002af6:	b2d2      	uxtb	r2, r2
 8002af8:	f002 021f 	and.w	r2, r2, #31
 8002afc:	2101      	movs	r1, #1
 8002afe:	fa01 f202 	lsl.w	r2, r1, r2
 8002b02:	4013      	ands	r3, r2
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	f000 811f 	beq.w	8002d48 <HAL_RCC_OscConfig+0x334>
 8002b0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b0e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	f040 8116 	bne.w	8002d48 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	f000 bfaf 	b.w	8003a80 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b26:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b32:	d106      	bne.n	8002b42 <HAL_RCC_OscConfig+0x12e>
 8002b34:	4b83      	ldr	r3, [pc, #524]	@ (8002d44 <HAL_RCC_OscConfig+0x330>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a82      	ldr	r2, [pc, #520]	@ (8002d44 <HAL_RCC_OscConfig+0x330>)
 8002b3a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b3e:	6013      	str	r3, [r2, #0]
 8002b40:	e036      	b.n	8002bb0 <HAL_RCC_OscConfig+0x19c>
 8002b42:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b46:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d10c      	bne.n	8002b6c <HAL_RCC_OscConfig+0x158>
 8002b52:	4b7c      	ldr	r3, [pc, #496]	@ (8002d44 <HAL_RCC_OscConfig+0x330>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a7b      	ldr	r2, [pc, #492]	@ (8002d44 <HAL_RCC_OscConfig+0x330>)
 8002b58:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b5c:	6013      	str	r3, [r2, #0]
 8002b5e:	4b79      	ldr	r3, [pc, #484]	@ (8002d44 <HAL_RCC_OscConfig+0x330>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a78      	ldr	r2, [pc, #480]	@ (8002d44 <HAL_RCC_OscConfig+0x330>)
 8002b64:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b68:	6013      	str	r3, [r2, #0]
 8002b6a:	e021      	b.n	8002bb0 <HAL_RCC_OscConfig+0x19c>
 8002b6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b70:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002b7c:	d10c      	bne.n	8002b98 <HAL_RCC_OscConfig+0x184>
 8002b7e:	4b71      	ldr	r3, [pc, #452]	@ (8002d44 <HAL_RCC_OscConfig+0x330>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a70      	ldr	r2, [pc, #448]	@ (8002d44 <HAL_RCC_OscConfig+0x330>)
 8002b84:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b88:	6013      	str	r3, [r2, #0]
 8002b8a:	4b6e      	ldr	r3, [pc, #440]	@ (8002d44 <HAL_RCC_OscConfig+0x330>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a6d      	ldr	r2, [pc, #436]	@ (8002d44 <HAL_RCC_OscConfig+0x330>)
 8002b90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b94:	6013      	str	r3, [r2, #0]
 8002b96:	e00b      	b.n	8002bb0 <HAL_RCC_OscConfig+0x19c>
 8002b98:	4b6a      	ldr	r3, [pc, #424]	@ (8002d44 <HAL_RCC_OscConfig+0x330>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a69      	ldr	r2, [pc, #420]	@ (8002d44 <HAL_RCC_OscConfig+0x330>)
 8002b9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ba2:	6013      	str	r3, [r2, #0]
 8002ba4:	4b67      	ldr	r3, [pc, #412]	@ (8002d44 <HAL_RCC_OscConfig+0x330>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a66      	ldr	r2, [pc, #408]	@ (8002d44 <HAL_RCC_OscConfig+0x330>)
 8002baa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002bae:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002bb0:	4b64      	ldr	r3, [pc, #400]	@ (8002d44 <HAL_RCC_OscConfig+0x330>)
 8002bb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bb4:	f023 020f 	bic.w	r2, r3, #15
 8002bb8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bbc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	495f      	ldr	r1, [pc, #380]	@ (8002d44 <HAL_RCC_OscConfig+0x330>)
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002bca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bce:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d059      	beq.n	8002c8e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bda:	f7fe f891 	bl	8000d00 <HAL_GetTick>
 8002bde:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002be2:	e00a      	b.n	8002bfa <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002be4:	f7fe f88c 	bl	8000d00 <HAL_GetTick>
 8002be8:	4602      	mov	r2, r0
 8002bea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002bee:	1ad3      	subs	r3, r2, r3
 8002bf0:	2b64      	cmp	r3, #100	@ 0x64
 8002bf2:	d902      	bls.n	8002bfa <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002bf4:	2303      	movs	r3, #3
 8002bf6:	f000 bf43 	b.w	8003a80 <HAL_RCC_OscConfig+0x106c>
 8002bfa:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002bfe:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c02:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8002c06:	fa93 f3a3 	rbit	r3, r3
 8002c0a:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8002c0e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c12:	fab3 f383 	clz	r3, r3
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	095b      	lsrs	r3, r3, #5
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	f043 0301 	orr.w	r3, r3, #1
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	d102      	bne.n	8002c2c <HAL_RCC_OscConfig+0x218>
 8002c26:	4b47      	ldr	r3, [pc, #284]	@ (8002d44 <HAL_RCC_OscConfig+0x330>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	e015      	b.n	8002c58 <HAL_RCC_OscConfig+0x244>
 8002c2c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002c30:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c34:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8002c38:	fa93 f3a3 	rbit	r3, r3
 8002c3c:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8002c40:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002c44:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8002c48:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8002c4c:	fa93 f3a3 	rbit	r3, r3
 8002c50:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8002c54:	4b3b      	ldr	r3, [pc, #236]	@ (8002d44 <HAL_RCC_OscConfig+0x330>)
 8002c56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c58:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002c5c:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8002c60:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8002c64:	fa92 f2a2 	rbit	r2, r2
 8002c68:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8002c6c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8002c70:	fab2 f282 	clz	r2, r2
 8002c74:	b2d2      	uxtb	r2, r2
 8002c76:	f042 0220 	orr.w	r2, r2, #32
 8002c7a:	b2d2      	uxtb	r2, r2
 8002c7c:	f002 021f 	and.w	r2, r2, #31
 8002c80:	2101      	movs	r1, #1
 8002c82:	fa01 f202 	lsl.w	r2, r1, r2
 8002c86:	4013      	ands	r3, r2
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d0ab      	beq.n	8002be4 <HAL_RCC_OscConfig+0x1d0>
 8002c8c:	e05d      	b.n	8002d4a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c8e:	f7fe f837 	bl	8000d00 <HAL_GetTick>
 8002c92:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c96:	e00a      	b.n	8002cae <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c98:	f7fe f832 	bl	8000d00 <HAL_GetTick>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002ca2:	1ad3      	subs	r3, r2, r3
 8002ca4:	2b64      	cmp	r3, #100	@ 0x64
 8002ca6:	d902      	bls.n	8002cae <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002ca8:	2303      	movs	r3, #3
 8002caa:	f000 bee9 	b.w	8003a80 <HAL_RCC_OscConfig+0x106c>
 8002cae:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002cb2:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cb6:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8002cba:	fa93 f3a3 	rbit	r3, r3
 8002cbe:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8002cc2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cc6:	fab3 f383 	clz	r3, r3
 8002cca:	b2db      	uxtb	r3, r3
 8002ccc:	095b      	lsrs	r3, r3, #5
 8002cce:	b2db      	uxtb	r3, r3
 8002cd0:	f043 0301 	orr.w	r3, r3, #1
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d102      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x2cc>
 8002cda:	4b1a      	ldr	r3, [pc, #104]	@ (8002d44 <HAL_RCC_OscConfig+0x330>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	e015      	b.n	8002d0c <HAL_RCC_OscConfig+0x2f8>
 8002ce0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002ce4:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8002cec:	fa93 f3a3 	rbit	r3, r3
 8002cf0:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8002cf4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002cf8:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8002cfc:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8002d00:	fa93 f3a3 	rbit	r3, r3
 8002d04:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8002d08:	4b0e      	ldr	r3, [pc, #56]	@ (8002d44 <HAL_RCC_OscConfig+0x330>)
 8002d0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d0c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002d10:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8002d14:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8002d18:	fa92 f2a2 	rbit	r2, r2
 8002d1c:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8002d20:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8002d24:	fab2 f282 	clz	r2, r2
 8002d28:	b2d2      	uxtb	r2, r2
 8002d2a:	f042 0220 	orr.w	r2, r2, #32
 8002d2e:	b2d2      	uxtb	r2, r2
 8002d30:	f002 021f 	and.w	r2, r2, #31
 8002d34:	2101      	movs	r1, #1
 8002d36:	fa01 f202 	lsl.w	r2, r1, r2
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d1ab      	bne.n	8002c98 <HAL_RCC_OscConfig+0x284>
 8002d40:	e003      	b.n	8002d4a <HAL_RCC_OscConfig+0x336>
 8002d42:	bf00      	nop
 8002d44:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d4e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 0302 	and.w	r3, r3, #2
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	f000 817d 	beq.w	800305a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002d60:	4ba6      	ldr	r3, [pc, #664]	@ (8002ffc <HAL_RCC_OscConfig+0x5e8>)
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	f003 030c 	and.w	r3, r3, #12
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d00b      	beq.n	8002d84 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002d6c:	4ba3      	ldr	r3, [pc, #652]	@ (8002ffc <HAL_RCC_OscConfig+0x5e8>)
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	f003 030c 	and.w	r3, r3, #12
 8002d74:	2b08      	cmp	r3, #8
 8002d76:	d172      	bne.n	8002e5e <HAL_RCC_OscConfig+0x44a>
 8002d78:	4ba0      	ldr	r3, [pc, #640]	@ (8002ffc <HAL_RCC_OscConfig+0x5e8>)
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d16c      	bne.n	8002e5e <HAL_RCC_OscConfig+0x44a>
 8002d84:	2302      	movs	r3, #2
 8002d86:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d8a:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8002d8e:	fa93 f3a3 	rbit	r3, r3
 8002d92:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8002d96:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d9a:	fab3 f383 	clz	r3, r3
 8002d9e:	b2db      	uxtb	r3, r3
 8002da0:	095b      	lsrs	r3, r3, #5
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	f043 0301 	orr.w	r3, r3, #1
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d102      	bne.n	8002db4 <HAL_RCC_OscConfig+0x3a0>
 8002dae:	4b93      	ldr	r3, [pc, #588]	@ (8002ffc <HAL_RCC_OscConfig+0x5e8>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	e013      	b.n	8002ddc <HAL_RCC_OscConfig+0x3c8>
 8002db4:	2302      	movs	r3, #2
 8002db6:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dba:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8002dbe:	fa93 f3a3 	rbit	r3, r3
 8002dc2:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8002dc6:	2302      	movs	r3, #2
 8002dc8:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8002dcc:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8002dd0:	fa93 f3a3 	rbit	r3, r3
 8002dd4:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8002dd8:	4b88      	ldr	r3, [pc, #544]	@ (8002ffc <HAL_RCC_OscConfig+0x5e8>)
 8002dda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ddc:	2202      	movs	r2, #2
 8002dde:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8002de2:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8002de6:	fa92 f2a2 	rbit	r2, r2
 8002dea:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8002dee:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8002df2:	fab2 f282 	clz	r2, r2
 8002df6:	b2d2      	uxtb	r2, r2
 8002df8:	f042 0220 	orr.w	r2, r2, #32
 8002dfc:	b2d2      	uxtb	r2, r2
 8002dfe:	f002 021f 	and.w	r2, r2, #31
 8002e02:	2101      	movs	r1, #1
 8002e04:	fa01 f202 	lsl.w	r2, r1, r2
 8002e08:	4013      	ands	r3, r2
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d00a      	beq.n	8002e24 <HAL_RCC_OscConfig+0x410>
 8002e0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e12:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	691b      	ldr	r3, [r3, #16]
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d002      	beq.n	8002e24 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	f000 be2e 	b.w	8003a80 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e24:	4b75      	ldr	r3, [pc, #468]	@ (8002ffc <HAL_RCC_OscConfig+0x5e8>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e2c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e30:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	695b      	ldr	r3, [r3, #20]
 8002e38:	21f8      	movs	r1, #248	@ 0xf8
 8002e3a:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e3e:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8002e42:	fa91 f1a1 	rbit	r1, r1
 8002e46:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8002e4a:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8002e4e:	fab1 f181 	clz	r1, r1
 8002e52:	b2c9      	uxtb	r1, r1
 8002e54:	408b      	lsls	r3, r1
 8002e56:	4969      	ldr	r1, [pc, #420]	@ (8002ffc <HAL_RCC_OscConfig+0x5e8>)
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e5c:	e0fd      	b.n	800305a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e62:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	691b      	ldr	r3, [r3, #16]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	f000 8088 	beq.w	8002f80 <HAL_RCC_OscConfig+0x56c>
 8002e70:	2301      	movs	r3, #1
 8002e72:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e76:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8002e7a:	fa93 f3a3 	rbit	r3, r3
 8002e7e:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8002e82:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e86:	fab3 f383 	clz	r3, r3
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002e90:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002e94:	009b      	lsls	r3, r3, #2
 8002e96:	461a      	mov	r2, r3
 8002e98:	2301      	movs	r3, #1
 8002e9a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e9c:	f7fd ff30 	bl	8000d00 <HAL_GetTick>
 8002ea0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ea4:	e00a      	b.n	8002ebc <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ea6:	f7fd ff2b 	bl	8000d00 <HAL_GetTick>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	2b02      	cmp	r3, #2
 8002eb4:	d902      	bls.n	8002ebc <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	f000 bde2 	b.w	8003a80 <HAL_RCC_OscConfig+0x106c>
 8002ebc:	2302      	movs	r3, #2
 8002ebe:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ec2:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8002ec6:	fa93 f3a3 	rbit	r3, r3
 8002eca:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8002ece:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ed2:	fab3 f383 	clz	r3, r3
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	095b      	lsrs	r3, r3, #5
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	f043 0301 	orr.w	r3, r3, #1
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	d102      	bne.n	8002eec <HAL_RCC_OscConfig+0x4d8>
 8002ee6:	4b45      	ldr	r3, [pc, #276]	@ (8002ffc <HAL_RCC_OscConfig+0x5e8>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	e013      	b.n	8002f14 <HAL_RCC_OscConfig+0x500>
 8002eec:	2302      	movs	r3, #2
 8002eee:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ef2:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8002ef6:	fa93 f3a3 	rbit	r3, r3
 8002efa:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8002efe:	2302      	movs	r3, #2
 8002f00:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8002f04:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8002f08:	fa93 f3a3 	rbit	r3, r3
 8002f0c:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8002f10:	4b3a      	ldr	r3, [pc, #232]	@ (8002ffc <HAL_RCC_OscConfig+0x5e8>)
 8002f12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f14:	2202      	movs	r2, #2
 8002f16:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8002f1a:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8002f1e:	fa92 f2a2 	rbit	r2, r2
 8002f22:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8002f26:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8002f2a:	fab2 f282 	clz	r2, r2
 8002f2e:	b2d2      	uxtb	r2, r2
 8002f30:	f042 0220 	orr.w	r2, r2, #32
 8002f34:	b2d2      	uxtb	r2, r2
 8002f36:	f002 021f 	and.w	r2, r2, #31
 8002f3a:	2101      	movs	r1, #1
 8002f3c:	fa01 f202 	lsl.w	r2, r1, r2
 8002f40:	4013      	ands	r3, r2
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d0af      	beq.n	8002ea6 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f46:	4b2d      	ldr	r3, [pc, #180]	@ (8002ffc <HAL_RCC_OscConfig+0x5e8>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f52:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	695b      	ldr	r3, [r3, #20]
 8002f5a:	21f8      	movs	r1, #248	@ 0xf8
 8002f5c:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f60:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8002f64:	fa91 f1a1 	rbit	r1, r1
 8002f68:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8002f6c:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8002f70:	fab1 f181 	clz	r1, r1
 8002f74:	b2c9      	uxtb	r1, r1
 8002f76:	408b      	lsls	r3, r1
 8002f78:	4920      	ldr	r1, [pc, #128]	@ (8002ffc <HAL_RCC_OscConfig+0x5e8>)
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	600b      	str	r3, [r1, #0]
 8002f7e:	e06c      	b.n	800305a <HAL_RCC_OscConfig+0x646>
 8002f80:	2301      	movs	r3, #1
 8002f82:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f86:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002f8a:	fa93 f3a3 	rbit	r3, r3
 8002f8e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8002f92:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f96:	fab3 f383 	clz	r3, r3
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002fa0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002fa4:	009b      	lsls	r3, r3, #2
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	2300      	movs	r3, #0
 8002faa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fac:	f7fd fea8 	bl	8000d00 <HAL_GetTick>
 8002fb0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fb4:	e00a      	b.n	8002fcc <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fb6:	f7fd fea3 	bl	8000d00 <HAL_GetTick>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	2b02      	cmp	r3, #2
 8002fc4:	d902      	bls.n	8002fcc <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	f000 bd5a 	b.w	8003a80 <HAL_RCC_OscConfig+0x106c>
 8002fcc:	2302      	movs	r3, #2
 8002fce:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fd2:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002fd6:	fa93 f3a3 	rbit	r3, r3
 8002fda:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8002fde:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fe2:	fab3 f383 	clz	r3, r3
 8002fe6:	b2db      	uxtb	r3, r3
 8002fe8:	095b      	lsrs	r3, r3, #5
 8002fea:	b2db      	uxtb	r3, r3
 8002fec:	f043 0301 	orr.w	r3, r3, #1
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d104      	bne.n	8003000 <HAL_RCC_OscConfig+0x5ec>
 8002ff6:	4b01      	ldr	r3, [pc, #4]	@ (8002ffc <HAL_RCC_OscConfig+0x5e8>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	e015      	b.n	8003028 <HAL_RCC_OscConfig+0x614>
 8002ffc:	40021000 	.word	0x40021000
 8003000:	2302      	movs	r3, #2
 8003002:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003006:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800300a:	fa93 f3a3 	rbit	r3, r3
 800300e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8003012:	2302      	movs	r3, #2
 8003014:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8003018:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800301c:	fa93 f3a3 	rbit	r3, r3
 8003020:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8003024:	4bc8      	ldr	r3, [pc, #800]	@ (8003348 <HAL_RCC_OscConfig+0x934>)
 8003026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003028:	2202      	movs	r2, #2
 800302a:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 800302e:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8003032:	fa92 f2a2 	rbit	r2, r2
 8003036:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 800303a:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 800303e:	fab2 f282 	clz	r2, r2
 8003042:	b2d2      	uxtb	r2, r2
 8003044:	f042 0220 	orr.w	r2, r2, #32
 8003048:	b2d2      	uxtb	r2, r2
 800304a:	f002 021f 	and.w	r2, r2, #31
 800304e:	2101      	movs	r1, #1
 8003050:	fa01 f202 	lsl.w	r2, r1, r2
 8003054:	4013      	ands	r3, r2
 8003056:	2b00      	cmp	r3, #0
 8003058:	d1ad      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800305a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800305e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 0308 	and.w	r3, r3, #8
 800306a:	2b00      	cmp	r3, #0
 800306c:	f000 8110 	beq.w	8003290 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003070:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003074:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	699b      	ldr	r3, [r3, #24]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d079      	beq.n	8003174 <HAL_RCC_OscConfig+0x760>
 8003080:	2301      	movs	r3, #1
 8003082:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003086:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800308a:	fa93 f3a3 	rbit	r3, r3
 800308e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8003092:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003096:	fab3 f383 	clz	r3, r3
 800309a:	b2db      	uxtb	r3, r3
 800309c:	461a      	mov	r2, r3
 800309e:	4bab      	ldr	r3, [pc, #684]	@ (800334c <HAL_RCC_OscConfig+0x938>)
 80030a0:	4413      	add	r3, r2
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	461a      	mov	r2, r3
 80030a6:	2301      	movs	r3, #1
 80030a8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030aa:	f7fd fe29 	bl	8000d00 <HAL_GetTick>
 80030ae:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030b2:	e00a      	b.n	80030ca <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030b4:	f7fd fe24 	bl	8000d00 <HAL_GetTick>
 80030b8:	4602      	mov	r2, r0
 80030ba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80030be:	1ad3      	subs	r3, r2, r3
 80030c0:	2b02      	cmp	r3, #2
 80030c2:	d902      	bls.n	80030ca <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80030c4:	2303      	movs	r3, #3
 80030c6:	f000 bcdb 	b.w	8003a80 <HAL_RCC_OscConfig+0x106c>
 80030ca:	2302      	movs	r3, #2
 80030cc:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030d0:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80030d4:	fa93 f3a3 	rbit	r3, r3
 80030d8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80030dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030e0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80030e4:	2202      	movs	r2, #2
 80030e6:	601a      	str	r2, [r3, #0]
 80030e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030ec:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	fa93 f2a3 	rbit	r2, r3
 80030f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030fa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80030fe:	601a      	str	r2, [r3, #0]
 8003100:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003104:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003108:	2202      	movs	r2, #2
 800310a:	601a      	str	r2, [r3, #0]
 800310c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003110:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	fa93 f2a3 	rbit	r2, r3
 800311a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800311e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003122:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003124:	4b88      	ldr	r3, [pc, #544]	@ (8003348 <HAL_RCC_OscConfig+0x934>)
 8003126:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003128:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800312c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003130:	2102      	movs	r1, #2
 8003132:	6019      	str	r1, [r3, #0]
 8003134:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003138:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	fa93 f1a3 	rbit	r1, r3
 8003142:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003146:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800314a:	6019      	str	r1, [r3, #0]
  return result;
 800314c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003150:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	fab3 f383 	clz	r3, r3
 800315a:	b2db      	uxtb	r3, r3
 800315c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003160:	b2db      	uxtb	r3, r3
 8003162:	f003 031f 	and.w	r3, r3, #31
 8003166:	2101      	movs	r1, #1
 8003168:	fa01 f303 	lsl.w	r3, r1, r3
 800316c:	4013      	ands	r3, r2
 800316e:	2b00      	cmp	r3, #0
 8003170:	d0a0      	beq.n	80030b4 <HAL_RCC_OscConfig+0x6a0>
 8003172:	e08d      	b.n	8003290 <HAL_RCC_OscConfig+0x87c>
 8003174:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003178:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800317c:	2201      	movs	r2, #1
 800317e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003180:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003184:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	fa93 f2a3 	rbit	r2, r3
 800318e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003192:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003196:	601a      	str	r2, [r3, #0]
  return result;
 8003198:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800319c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80031a0:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031a2:	fab3 f383 	clz	r3, r3
 80031a6:	b2db      	uxtb	r3, r3
 80031a8:	461a      	mov	r2, r3
 80031aa:	4b68      	ldr	r3, [pc, #416]	@ (800334c <HAL_RCC_OscConfig+0x938>)
 80031ac:	4413      	add	r3, r2
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	461a      	mov	r2, r3
 80031b2:	2300      	movs	r3, #0
 80031b4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031b6:	f7fd fda3 	bl	8000d00 <HAL_GetTick>
 80031ba:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031be:	e00a      	b.n	80031d6 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031c0:	f7fd fd9e 	bl	8000d00 <HAL_GetTick>
 80031c4:	4602      	mov	r2, r0
 80031c6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80031ca:	1ad3      	subs	r3, r2, r3
 80031cc:	2b02      	cmp	r3, #2
 80031ce:	d902      	bls.n	80031d6 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80031d0:	2303      	movs	r3, #3
 80031d2:	f000 bc55 	b.w	8003a80 <HAL_RCC_OscConfig+0x106c>
 80031d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031da:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80031de:	2202      	movs	r2, #2
 80031e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031e6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	fa93 f2a3 	rbit	r2, r3
 80031f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031f4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80031f8:	601a      	str	r2, [r3, #0]
 80031fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031fe:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003202:	2202      	movs	r2, #2
 8003204:	601a      	str	r2, [r3, #0]
 8003206:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800320a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	fa93 f2a3 	rbit	r2, r3
 8003214:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003218:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800321c:	601a      	str	r2, [r3, #0]
 800321e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003222:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003226:	2202      	movs	r2, #2
 8003228:	601a      	str	r2, [r3, #0]
 800322a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800322e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	fa93 f2a3 	rbit	r2, r3
 8003238:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800323c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003240:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003242:	4b41      	ldr	r3, [pc, #260]	@ (8003348 <HAL_RCC_OscConfig+0x934>)
 8003244:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003246:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800324a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800324e:	2102      	movs	r1, #2
 8003250:	6019      	str	r1, [r3, #0]
 8003252:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003256:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	fa93 f1a3 	rbit	r1, r3
 8003260:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003264:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003268:	6019      	str	r1, [r3, #0]
  return result;
 800326a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800326e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	fab3 f383 	clz	r3, r3
 8003278:	b2db      	uxtb	r3, r3
 800327a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800327e:	b2db      	uxtb	r3, r3
 8003280:	f003 031f 	and.w	r3, r3, #31
 8003284:	2101      	movs	r1, #1
 8003286:	fa01 f303 	lsl.w	r3, r1, r3
 800328a:	4013      	ands	r3, r2
 800328c:	2b00      	cmp	r3, #0
 800328e:	d197      	bne.n	80031c0 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003290:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003294:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 0304 	and.w	r3, r3, #4
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	f000 81a1 	beq.w	80035e8 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032a6:	2300      	movs	r3, #0
 80032a8:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032ac:	4b26      	ldr	r3, [pc, #152]	@ (8003348 <HAL_RCC_OscConfig+0x934>)
 80032ae:	69db      	ldr	r3, [r3, #28]
 80032b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d116      	bne.n	80032e6 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032b8:	4b23      	ldr	r3, [pc, #140]	@ (8003348 <HAL_RCC_OscConfig+0x934>)
 80032ba:	69db      	ldr	r3, [r3, #28]
 80032bc:	4a22      	ldr	r2, [pc, #136]	@ (8003348 <HAL_RCC_OscConfig+0x934>)
 80032be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032c2:	61d3      	str	r3, [r2, #28]
 80032c4:	4b20      	ldr	r3, [pc, #128]	@ (8003348 <HAL_RCC_OscConfig+0x934>)
 80032c6:	69db      	ldr	r3, [r3, #28]
 80032c8:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80032cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032d0:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80032d4:	601a      	str	r2, [r3, #0]
 80032d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032da:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80032de:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80032e0:	2301      	movs	r3, #1
 80032e2:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032e6:	4b1a      	ldr	r3, [pc, #104]	@ (8003350 <HAL_RCC_OscConfig+0x93c>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d11a      	bne.n	8003328 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032f2:	4b17      	ldr	r3, [pc, #92]	@ (8003350 <HAL_RCC_OscConfig+0x93c>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a16      	ldr	r2, [pc, #88]	@ (8003350 <HAL_RCC_OscConfig+0x93c>)
 80032f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032fc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032fe:	f7fd fcff 	bl	8000d00 <HAL_GetTick>
 8003302:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003306:	e009      	b.n	800331c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003308:	f7fd fcfa 	bl	8000d00 <HAL_GetTick>
 800330c:	4602      	mov	r2, r0
 800330e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003312:	1ad3      	subs	r3, r2, r3
 8003314:	2b64      	cmp	r3, #100	@ 0x64
 8003316:	d901      	bls.n	800331c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8003318:	2303      	movs	r3, #3
 800331a:	e3b1      	b.n	8003a80 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800331c:	4b0c      	ldr	r3, [pc, #48]	@ (8003350 <HAL_RCC_OscConfig+0x93c>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003324:	2b00      	cmp	r3, #0
 8003326:	d0ef      	beq.n	8003308 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003328:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800332c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	2b01      	cmp	r3, #1
 8003336:	d10d      	bne.n	8003354 <HAL_RCC_OscConfig+0x940>
 8003338:	4b03      	ldr	r3, [pc, #12]	@ (8003348 <HAL_RCC_OscConfig+0x934>)
 800333a:	6a1b      	ldr	r3, [r3, #32]
 800333c:	4a02      	ldr	r2, [pc, #8]	@ (8003348 <HAL_RCC_OscConfig+0x934>)
 800333e:	f043 0301 	orr.w	r3, r3, #1
 8003342:	6213      	str	r3, [r2, #32]
 8003344:	e03c      	b.n	80033c0 <HAL_RCC_OscConfig+0x9ac>
 8003346:	bf00      	nop
 8003348:	40021000 	.word	0x40021000
 800334c:	10908120 	.word	0x10908120
 8003350:	40007000 	.word	0x40007000
 8003354:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003358:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	68db      	ldr	r3, [r3, #12]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d10c      	bne.n	800337e <HAL_RCC_OscConfig+0x96a>
 8003364:	4bc1      	ldr	r3, [pc, #772]	@ (800366c <HAL_RCC_OscConfig+0xc58>)
 8003366:	6a1b      	ldr	r3, [r3, #32]
 8003368:	4ac0      	ldr	r2, [pc, #768]	@ (800366c <HAL_RCC_OscConfig+0xc58>)
 800336a:	f023 0301 	bic.w	r3, r3, #1
 800336e:	6213      	str	r3, [r2, #32]
 8003370:	4bbe      	ldr	r3, [pc, #760]	@ (800366c <HAL_RCC_OscConfig+0xc58>)
 8003372:	6a1b      	ldr	r3, [r3, #32]
 8003374:	4abd      	ldr	r2, [pc, #756]	@ (800366c <HAL_RCC_OscConfig+0xc58>)
 8003376:	f023 0304 	bic.w	r3, r3, #4
 800337a:	6213      	str	r3, [r2, #32]
 800337c:	e020      	b.n	80033c0 <HAL_RCC_OscConfig+0x9ac>
 800337e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003382:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	68db      	ldr	r3, [r3, #12]
 800338a:	2b05      	cmp	r3, #5
 800338c:	d10c      	bne.n	80033a8 <HAL_RCC_OscConfig+0x994>
 800338e:	4bb7      	ldr	r3, [pc, #732]	@ (800366c <HAL_RCC_OscConfig+0xc58>)
 8003390:	6a1b      	ldr	r3, [r3, #32]
 8003392:	4ab6      	ldr	r2, [pc, #728]	@ (800366c <HAL_RCC_OscConfig+0xc58>)
 8003394:	f043 0304 	orr.w	r3, r3, #4
 8003398:	6213      	str	r3, [r2, #32]
 800339a:	4bb4      	ldr	r3, [pc, #720]	@ (800366c <HAL_RCC_OscConfig+0xc58>)
 800339c:	6a1b      	ldr	r3, [r3, #32]
 800339e:	4ab3      	ldr	r2, [pc, #716]	@ (800366c <HAL_RCC_OscConfig+0xc58>)
 80033a0:	f043 0301 	orr.w	r3, r3, #1
 80033a4:	6213      	str	r3, [r2, #32]
 80033a6:	e00b      	b.n	80033c0 <HAL_RCC_OscConfig+0x9ac>
 80033a8:	4bb0      	ldr	r3, [pc, #704]	@ (800366c <HAL_RCC_OscConfig+0xc58>)
 80033aa:	6a1b      	ldr	r3, [r3, #32]
 80033ac:	4aaf      	ldr	r2, [pc, #700]	@ (800366c <HAL_RCC_OscConfig+0xc58>)
 80033ae:	f023 0301 	bic.w	r3, r3, #1
 80033b2:	6213      	str	r3, [r2, #32]
 80033b4:	4bad      	ldr	r3, [pc, #692]	@ (800366c <HAL_RCC_OscConfig+0xc58>)
 80033b6:	6a1b      	ldr	r3, [r3, #32]
 80033b8:	4aac      	ldr	r2, [pc, #688]	@ (800366c <HAL_RCC_OscConfig+0xc58>)
 80033ba:	f023 0304 	bic.w	r3, r3, #4
 80033be:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80033c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033c4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	68db      	ldr	r3, [r3, #12]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	f000 8081 	beq.w	80034d4 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033d2:	f7fd fc95 	bl	8000d00 <HAL_GetTick>
 80033d6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033da:	e00b      	b.n	80033f4 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033dc:	f7fd fc90 	bl	8000d00 <HAL_GetTick>
 80033e0:	4602      	mov	r2, r0
 80033e2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80033e6:	1ad3      	subs	r3, r2, r3
 80033e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d901      	bls.n	80033f4 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80033f0:	2303      	movs	r3, #3
 80033f2:	e345      	b.n	8003a80 <HAL_RCC_OscConfig+0x106c>
 80033f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033f8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80033fc:	2202      	movs	r2, #2
 80033fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003400:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003404:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	fa93 f2a3 	rbit	r2, r3
 800340e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003412:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8003416:	601a      	str	r2, [r3, #0]
 8003418:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800341c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003420:	2202      	movs	r2, #2
 8003422:	601a      	str	r2, [r3, #0]
 8003424:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003428:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	fa93 f2a3 	rbit	r2, r3
 8003432:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003436:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800343a:	601a      	str	r2, [r3, #0]
  return result;
 800343c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003440:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003444:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003446:	fab3 f383 	clz	r3, r3
 800344a:	b2db      	uxtb	r3, r3
 800344c:	095b      	lsrs	r3, r3, #5
 800344e:	b2db      	uxtb	r3, r3
 8003450:	f043 0302 	orr.w	r3, r3, #2
 8003454:	b2db      	uxtb	r3, r3
 8003456:	2b02      	cmp	r3, #2
 8003458:	d102      	bne.n	8003460 <HAL_RCC_OscConfig+0xa4c>
 800345a:	4b84      	ldr	r3, [pc, #528]	@ (800366c <HAL_RCC_OscConfig+0xc58>)
 800345c:	6a1b      	ldr	r3, [r3, #32]
 800345e:	e013      	b.n	8003488 <HAL_RCC_OscConfig+0xa74>
 8003460:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003464:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003468:	2202      	movs	r2, #2
 800346a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800346c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003470:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	fa93 f2a3 	rbit	r2, r3
 800347a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800347e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8003482:	601a      	str	r2, [r3, #0]
 8003484:	4b79      	ldr	r3, [pc, #484]	@ (800366c <HAL_RCC_OscConfig+0xc58>)
 8003486:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003488:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800348c:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8003490:	2102      	movs	r1, #2
 8003492:	6011      	str	r1, [r2, #0]
 8003494:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003498:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 800349c:	6812      	ldr	r2, [r2, #0]
 800349e:	fa92 f1a2 	rbit	r1, r2
 80034a2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80034a6:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80034aa:	6011      	str	r1, [r2, #0]
  return result;
 80034ac:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80034b0:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80034b4:	6812      	ldr	r2, [r2, #0]
 80034b6:	fab2 f282 	clz	r2, r2
 80034ba:	b2d2      	uxtb	r2, r2
 80034bc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80034c0:	b2d2      	uxtb	r2, r2
 80034c2:	f002 021f 	and.w	r2, r2, #31
 80034c6:	2101      	movs	r1, #1
 80034c8:	fa01 f202 	lsl.w	r2, r1, r2
 80034cc:	4013      	ands	r3, r2
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d084      	beq.n	80033dc <HAL_RCC_OscConfig+0x9c8>
 80034d2:	e07f      	b.n	80035d4 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034d4:	f7fd fc14 	bl	8000d00 <HAL_GetTick>
 80034d8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034dc:	e00b      	b.n	80034f6 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034de:	f7fd fc0f 	bl	8000d00 <HAL_GetTick>
 80034e2:	4602      	mov	r2, r0
 80034e4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d901      	bls.n	80034f6 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80034f2:	2303      	movs	r3, #3
 80034f4:	e2c4      	b.n	8003a80 <HAL_RCC_OscConfig+0x106c>
 80034f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034fa:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80034fe:	2202      	movs	r2, #2
 8003500:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003502:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003506:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	fa93 f2a3 	rbit	r2, r3
 8003510:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003514:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8003518:	601a      	str	r2, [r3, #0]
 800351a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800351e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003522:	2202      	movs	r2, #2
 8003524:	601a      	str	r2, [r3, #0]
 8003526:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800352a:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	fa93 f2a3 	rbit	r2, r3
 8003534:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003538:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800353c:	601a      	str	r2, [r3, #0]
  return result;
 800353e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003542:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003546:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003548:	fab3 f383 	clz	r3, r3
 800354c:	b2db      	uxtb	r3, r3
 800354e:	095b      	lsrs	r3, r3, #5
 8003550:	b2db      	uxtb	r3, r3
 8003552:	f043 0302 	orr.w	r3, r3, #2
 8003556:	b2db      	uxtb	r3, r3
 8003558:	2b02      	cmp	r3, #2
 800355a:	d102      	bne.n	8003562 <HAL_RCC_OscConfig+0xb4e>
 800355c:	4b43      	ldr	r3, [pc, #268]	@ (800366c <HAL_RCC_OscConfig+0xc58>)
 800355e:	6a1b      	ldr	r3, [r3, #32]
 8003560:	e013      	b.n	800358a <HAL_RCC_OscConfig+0xb76>
 8003562:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003566:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800356a:	2202      	movs	r2, #2
 800356c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800356e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003572:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	fa93 f2a3 	rbit	r2, r3
 800357c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003580:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8003584:	601a      	str	r2, [r3, #0]
 8003586:	4b39      	ldr	r3, [pc, #228]	@ (800366c <HAL_RCC_OscConfig+0xc58>)
 8003588:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800358a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800358e:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8003592:	2102      	movs	r1, #2
 8003594:	6011      	str	r1, [r2, #0]
 8003596:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800359a:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800359e:	6812      	ldr	r2, [r2, #0]
 80035a0:	fa92 f1a2 	rbit	r1, r2
 80035a4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80035a8:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80035ac:	6011      	str	r1, [r2, #0]
  return result;
 80035ae:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80035b2:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80035b6:	6812      	ldr	r2, [r2, #0]
 80035b8:	fab2 f282 	clz	r2, r2
 80035bc:	b2d2      	uxtb	r2, r2
 80035be:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80035c2:	b2d2      	uxtb	r2, r2
 80035c4:	f002 021f 	and.w	r2, r2, #31
 80035c8:	2101      	movs	r1, #1
 80035ca:	fa01 f202 	lsl.w	r2, r1, r2
 80035ce:	4013      	ands	r3, r2
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d184      	bne.n	80034de <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80035d4:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d105      	bne.n	80035e8 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035dc:	4b23      	ldr	r3, [pc, #140]	@ (800366c <HAL_RCC_OscConfig+0xc58>)
 80035de:	69db      	ldr	r3, [r3, #28]
 80035e0:	4a22      	ldr	r2, [pc, #136]	@ (800366c <HAL_RCC_OscConfig+0xc58>)
 80035e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80035e6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035ec:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	69db      	ldr	r3, [r3, #28]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	f000 8242 	beq.w	8003a7e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035fa:	4b1c      	ldr	r3, [pc, #112]	@ (800366c <HAL_RCC_OscConfig+0xc58>)
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	f003 030c 	and.w	r3, r3, #12
 8003602:	2b08      	cmp	r3, #8
 8003604:	f000 8213 	beq.w	8003a2e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003608:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800360c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	69db      	ldr	r3, [r3, #28]
 8003614:	2b02      	cmp	r3, #2
 8003616:	f040 8162 	bne.w	80038de <HAL_RCC_OscConfig+0xeca>
 800361a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800361e:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8003622:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003626:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003628:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800362c:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	fa93 f2a3 	rbit	r2, r3
 8003636:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800363a:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800363e:	601a      	str	r2, [r3, #0]
  return result;
 8003640:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003644:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003648:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800364a:	fab3 f383 	clz	r3, r3
 800364e:	b2db      	uxtb	r3, r3
 8003650:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003654:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003658:	009b      	lsls	r3, r3, #2
 800365a:	461a      	mov	r2, r3
 800365c:	2300      	movs	r3, #0
 800365e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003660:	f7fd fb4e 	bl	8000d00 <HAL_GetTick>
 8003664:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003668:	e00c      	b.n	8003684 <HAL_RCC_OscConfig+0xc70>
 800366a:	bf00      	nop
 800366c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003670:	f7fd fb46 	bl	8000d00 <HAL_GetTick>
 8003674:	4602      	mov	r2, r0
 8003676:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800367a:	1ad3      	subs	r3, r2, r3
 800367c:	2b02      	cmp	r3, #2
 800367e:	d901      	bls.n	8003684 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003680:	2303      	movs	r3, #3
 8003682:	e1fd      	b.n	8003a80 <HAL_RCC_OscConfig+0x106c>
 8003684:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003688:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800368c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003690:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003692:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003696:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	fa93 f2a3 	rbit	r2, r3
 80036a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036a4:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80036a8:	601a      	str	r2, [r3, #0]
  return result;
 80036aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036ae:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80036b2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036b4:	fab3 f383 	clz	r3, r3
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	095b      	lsrs	r3, r3, #5
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	f043 0301 	orr.w	r3, r3, #1
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d102      	bne.n	80036ce <HAL_RCC_OscConfig+0xcba>
 80036c8:	4bb0      	ldr	r3, [pc, #704]	@ (800398c <HAL_RCC_OscConfig+0xf78>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	e027      	b.n	800371e <HAL_RCC_OscConfig+0xd0a>
 80036ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036d2:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80036d6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80036da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036e0:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	fa93 f2a3 	rbit	r2, r3
 80036ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036ee:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80036f2:	601a      	str	r2, [r3, #0]
 80036f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036f8:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80036fc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003700:	601a      	str	r2, [r3, #0]
 8003702:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003706:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	fa93 f2a3 	rbit	r2, r3
 8003710:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003714:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003718:	601a      	str	r2, [r3, #0]
 800371a:	4b9c      	ldr	r3, [pc, #624]	@ (800398c <HAL_RCC_OscConfig+0xf78>)
 800371c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800371e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003722:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8003726:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800372a:	6011      	str	r1, [r2, #0]
 800372c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003730:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8003734:	6812      	ldr	r2, [r2, #0]
 8003736:	fa92 f1a2 	rbit	r1, r2
 800373a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800373e:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003742:	6011      	str	r1, [r2, #0]
  return result;
 8003744:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003748:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800374c:	6812      	ldr	r2, [r2, #0]
 800374e:	fab2 f282 	clz	r2, r2
 8003752:	b2d2      	uxtb	r2, r2
 8003754:	f042 0220 	orr.w	r2, r2, #32
 8003758:	b2d2      	uxtb	r2, r2
 800375a:	f002 021f 	and.w	r2, r2, #31
 800375e:	2101      	movs	r1, #1
 8003760:	fa01 f202 	lsl.w	r2, r1, r2
 8003764:	4013      	ands	r3, r2
 8003766:	2b00      	cmp	r3, #0
 8003768:	d182      	bne.n	8003670 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800376a:	4b88      	ldr	r3, [pc, #544]	@ (800398c <HAL_RCC_OscConfig+0xf78>)
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003772:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003776:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800377e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003782:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	6a1b      	ldr	r3, [r3, #32]
 800378a:	430b      	orrs	r3, r1
 800378c:	497f      	ldr	r1, [pc, #508]	@ (800398c <HAL_RCC_OscConfig+0xf78>)
 800378e:	4313      	orrs	r3, r2
 8003790:	604b      	str	r3, [r1, #4]
 8003792:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003796:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800379a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800379e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037a4:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	fa93 f2a3 	rbit	r2, r3
 80037ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037b2:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80037b6:	601a      	str	r2, [r3, #0]
  return result;
 80037b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037bc:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80037c0:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037c2:	fab3 f383 	clz	r3, r3
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80037cc:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80037d0:	009b      	lsls	r3, r3, #2
 80037d2:	461a      	mov	r2, r3
 80037d4:	2301      	movs	r3, #1
 80037d6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037d8:	f7fd fa92 	bl	8000d00 <HAL_GetTick>
 80037dc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80037e0:	e009      	b.n	80037f6 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037e2:	f7fd fa8d 	bl	8000d00 <HAL_GetTick>
 80037e6:	4602      	mov	r2, r0
 80037e8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80037ec:	1ad3      	subs	r3, r2, r3
 80037ee:	2b02      	cmp	r3, #2
 80037f0:	d901      	bls.n	80037f6 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80037f2:	2303      	movs	r3, #3
 80037f4:	e144      	b.n	8003a80 <HAL_RCC_OscConfig+0x106c>
 80037f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037fa:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80037fe:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003802:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003804:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003808:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	fa93 f2a3 	rbit	r2, r3
 8003812:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003816:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800381a:	601a      	str	r2, [r3, #0]
  return result;
 800381c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003820:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003824:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003826:	fab3 f383 	clz	r3, r3
 800382a:	b2db      	uxtb	r3, r3
 800382c:	095b      	lsrs	r3, r3, #5
 800382e:	b2db      	uxtb	r3, r3
 8003830:	f043 0301 	orr.w	r3, r3, #1
 8003834:	b2db      	uxtb	r3, r3
 8003836:	2b01      	cmp	r3, #1
 8003838:	d102      	bne.n	8003840 <HAL_RCC_OscConfig+0xe2c>
 800383a:	4b54      	ldr	r3, [pc, #336]	@ (800398c <HAL_RCC_OscConfig+0xf78>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	e027      	b.n	8003890 <HAL_RCC_OscConfig+0xe7c>
 8003840:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003844:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003848:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800384c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800384e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003852:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	fa93 f2a3 	rbit	r2, r3
 800385c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003860:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003864:	601a      	str	r2, [r3, #0]
 8003866:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800386a:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800386e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003872:	601a      	str	r2, [r3, #0]
 8003874:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003878:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	fa93 f2a3 	rbit	r2, r3
 8003882:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003886:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800388a:	601a      	str	r2, [r3, #0]
 800388c:	4b3f      	ldr	r3, [pc, #252]	@ (800398c <HAL_RCC_OscConfig+0xf78>)
 800388e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003890:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003894:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8003898:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800389c:	6011      	str	r1, [r2, #0]
 800389e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80038a2:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80038a6:	6812      	ldr	r2, [r2, #0]
 80038a8:	fa92 f1a2 	rbit	r1, r2
 80038ac:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80038b0:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80038b4:	6011      	str	r1, [r2, #0]
  return result;
 80038b6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80038ba:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80038be:	6812      	ldr	r2, [r2, #0]
 80038c0:	fab2 f282 	clz	r2, r2
 80038c4:	b2d2      	uxtb	r2, r2
 80038c6:	f042 0220 	orr.w	r2, r2, #32
 80038ca:	b2d2      	uxtb	r2, r2
 80038cc:	f002 021f 	and.w	r2, r2, #31
 80038d0:	2101      	movs	r1, #1
 80038d2:	fa01 f202 	lsl.w	r2, r1, r2
 80038d6:	4013      	ands	r3, r2
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d082      	beq.n	80037e2 <HAL_RCC_OscConfig+0xdce>
 80038dc:	e0cf      	b.n	8003a7e <HAL_RCC_OscConfig+0x106a>
 80038de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038e2:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80038e6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80038ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038f0:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	fa93 f2a3 	rbit	r2, r3
 80038fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038fe:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003902:	601a      	str	r2, [r3, #0]
  return result;
 8003904:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003908:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800390c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800390e:	fab3 f383 	clz	r3, r3
 8003912:	b2db      	uxtb	r3, r3
 8003914:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003918:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800391c:	009b      	lsls	r3, r3, #2
 800391e:	461a      	mov	r2, r3
 8003920:	2300      	movs	r3, #0
 8003922:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003924:	f7fd f9ec 	bl	8000d00 <HAL_GetTick>
 8003928:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800392c:	e009      	b.n	8003942 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800392e:	f7fd f9e7 	bl	8000d00 <HAL_GetTick>
 8003932:	4602      	mov	r2, r0
 8003934:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003938:	1ad3      	subs	r3, r2, r3
 800393a:	2b02      	cmp	r3, #2
 800393c:	d901      	bls.n	8003942 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800393e:	2303      	movs	r3, #3
 8003940:	e09e      	b.n	8003a80 <HAL_RCC_OscConfig+0x106c>
 8003942:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003946:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800394a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800394e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003950:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003954:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	fa93 f2a3 	rbit	r2, r3
 800395e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003962:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003966:	601a      	str	r2, [r3, #0]
  return result;
 8003968:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800396c:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003970:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003972:	fab3 f383 	clz	r3, r3
 8003976:	b2db      	uxtb	r3, r3
 8003978:	095b      	lsrs	r3, r3, #5
 800397a:	b2db      	uxtb	r3, r3
 800397c:	f043 0301 	orr.w	r3, r3, #1
 8003980:	b2db      	uxtb	r3, r3
 8003982:	2b01      	cmp	r3, #1
 8003984:	d104      	bne.n	8003990 <HAL_RCC_OscConfig+0xf7c>
 8003986:	4b01      	ldr	r3, [pc, #4]	@ (800398c <HAL_RCC_OscConfig+0xf78>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	e029      	b.n	80039e0 <HAL_RCC_OscConfig+0xfcc>
 800398c:	40021000 	.word	0x40021000
 8003990:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003994:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003998:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800399c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800399e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039a2:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	fa93 f2a3 	rbit	r2, r3
 80039ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039b0:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80039b4:	601a      	str	r2, [r3, #0]
 80039b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039ba:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80039be:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80039c2:	601a      	str	r2, [r3, #0]
 80039c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039c8:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	fa93 f2a3 	rbit	r2, r3
 80039d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039d6:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80039da:	601a      	str	r2, [r3, #0]
 80039dc:	4b2b      	ldr	r3, [pc, #172]	@ (8003a8c <HAL_RCC_OscConfig+0x1078>)
 80039de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039e0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80039e4:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80039e8:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80039ec:	6011      	str	r1, [r2, #0]
 80039ee:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80039f2:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80039f6:	6812      	ldr	r2, [r2, #0]
 80039f8:	fa92 f1a2 	rbit	r1, r2
 80039fc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003a00:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003a04:	6011      	str	r1, [r2, #0]
  return result;
 8003a06:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003a0a:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003a0e:	6812      	ldr	r2, [r2, #0]
 8003a10:	fab2 f282 	clz	r2, r2
 8003a14:	b2d2      	uxtb	r2, r2
 8003a16:	f042 0220 	orr.w	r2, r2, #32
 8003a1a:	b2d2      	uxtb	r2, r2
 8003a1c:	f002 021f 	and.w	r2, r2, #31
 8003a20:	2101      	movs	r1, #1
 8003a22:	fa01 f202 	lsl.w	r2, r1, r2
 8003a26:	4013      	ands	r3, r2
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d180      	bne.n	800392e <HAL_RCC_OscConfig+0xf1a>
 8003a2c:	e027      	b.n	8003a7e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a32:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	69db      	ldr	r3, [r3, #28]
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	d101      	bne.n	8003a42 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e01e      	b.n	8003a80 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003a42:	4b12      	ldr	r3, [pc, #72]	@ (8003a8c <HAL_RCC_OscConfig+0x1078>)
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003a4a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8003a4e:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003a52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a56:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	6a1b      	ldr	r3, [r3, #32]
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	d10b      	bne.n	8003a7a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003a62:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8003a66:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003a6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a6e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003a76:	429a      	cmp	r2, r3
 8003a78:	d001      	beq.n	8003a7e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e000      	b.n	8003a80 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8003a7e:	2300      	movs	r3, #0
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	bf00      	nop
 8003a8c:	40021000 	.word	0x40021000

08003a90 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b09e      	sub	sp, #120	@ 0x78
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
 8003a98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d101      	bne.n	8003aa8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	e162      	b.n	8003d6e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003aa8:	4b90      	ldr	r3, [pc, #576]	@ (8003cec <HAL_RCC_ClockConfig+0x25c>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 0307 	and.w	r3, r3, #7
 8003ab0:	683a      	ldr	r2, [r7, #0]
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	d910      	bls.n	8003ad8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ab6:	4b8d      	ldr	r3, [pc, #564]	@ (8003cec <HAL_RCC_ClockConfig+0x25c>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f023 0207 	bic.w	r2, r3, #7
 8003abe:	498b      	ldr	r1, [pc, #556]	@ (8003cec <HAL_RCC_ClockConfig+0x25c>)
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ac6:	4b89      	ldr	r3, [pc, #548]	@ (8003cec <HAL_RCC_ClockConfig+0x25c>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 0307 	and.w	r3, r3, #7
 8003ace:	683a      	ldr	r2, [r7, #0]
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d001      	beq.n	8003ad8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e14a      	b.n	8003d6e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 0302 	and.w	r3, r3, #2
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d008      	beq.n	8003af6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ae4:	4b82      	ldr	r3, [pc, #520]	@ (8003cf0 <HAL_RCC_ClockConfig+0x260>)
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	497f      	ldr	r1, [pc, #508]	@ (8003cf0 <HAL_RCC_ClockConfig+0x260>)
 8003af2:	4313      	orrs	r3, r2
 8003af4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 0301 	and.w	r3, r3, #1
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	f000 80dc 	beq.w	8003cbc <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	d13c      	bne.n	8003b86 <HAL_RCC_ClockConfig+0xf6>
 8003b0c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003b10:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b12:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003b14:	fa93 f3a3 	rbit	r3, r3
 8003b18:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8003b1a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b1c:	fab3 f383 	clz	r3, r3
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	095b      	lsrs	r3, r3, #5
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	f043 0301 	orr.w	r3, r3, #1
 8003b2a:	b2db      	uxtb	r3, r3
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d102      	bne.n	8003b36 <HAL_RCC_ClockConfig+0xa6>
 8003b30:	4b6f      	ldr	r3, [pc, #444]	@ (8003cf0 <HAL_RCC_ClockConfig+0x260>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	e00f      	b.n	8003b56 <HAL_RCC_ClockConfig+0xc6>
 8003b36:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003b3a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b3c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003b3e:	fa93 f3a3 	rbit	r3, r3
 8003b42:	667b      	str	r3, [r7, #100]	@ 0x64
 8003b44:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003b48:	663b      	str	r3, [r7, #96]	@ 0x60
 8003b4a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003b4c:	fa93 f3a3 	rbit	r3, r3
 8003b50:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003b52:	4b67      	ldr	r3, [pc, #412]	@ (8003cf0 <HAL_RCC_ClockConfig+0x260>)
 8003b54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b56:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003b5a:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003b5c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003b5e:	fa92 f2a2 	rbit	r2, r2
 8003b62:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8003b64:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003b66:	fab2 f282 	clz	r2, r2
 8003b6a:	b2d2      	uxtb	r2, r2
 8003b6c:	f042 0220 	orr.w	r2, r2, #32
 8003b70:	b2d2      	uxtb	r2, r2
 8003b72:	f002 021f 	and.w	r2, r2, #31
 8003b76:	2101      	movs	r1, #1
 8003b78:	fa01 f202 	lsl.w	r2, r1, r2
 8003b7c:	4013      	ands	r3, r2
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d17b      	bne.n	8003c7a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e0f3      	b.n	8003d6e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	2b02      	cmp	r3, #2
 8003b8c:	d13c      	bne.n	8003c08 <HAL_RCC_ClockConfig+0x178>
 8003b8e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003b92:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b94:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003b96:	fa93 f3a3 	rbit	r3, r3
 8003b9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003b9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b9e:	fab3 f383 	clz	r3, r3
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	095b      	lsrs	r3, r3, #5
 8003ba6:	b2db      	uxtb	r3, r3
 8003ba8:	f043 0301 	orr.w	r3, r3, #1
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d102      	bne.n	8003bb8 <HAL_RCC_ClockConfig+0x128>
 8003bb2:	4b4f      	ldr	r3, [pc, #316]	@ (8003cf0 <HAL_RCC_ClockConfig+0x260>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	e00f      	b.n	8003bd8 <HAL_RCC_ClockConfig+0x148>
 8003bb8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003bbc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bbe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003bc0:	fa93 f3a3 	rbit	r3, r3
 8003bc4:	647b      	str	r3, [r7, #68]	@ 0x44
 8003bc6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003bca:	643b      	str	r3, [r7, #64]	@ 0x40
 8003bcc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003bce:	fa93 f3a3 	rbit	r3, r3
 8003bd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003bd4:	4b46      	ldr	r3, [pc, #280]	@ (8003cf0 <HAL_RCC_ClockConfig+0x260>)
 8003bd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bd8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003bdc:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003bde:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003be0:	fa92 f2a2 	rbit	r2, r2
 8003be4:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8003be6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003be8:	fab2 f282 	clz	r2, r2
 8003bec:	b2d2      	uxtb	r2, r2
 8003bee:	f042 0220 	orr.w	r2, r2, #32
 8003bf2:	b2d2      	uxtb	r2, r2
 8003bf4:	f002 021f 	and.w	r2, r2, #31
 8003bf8:	2101      	movs	r1, #1
 8003bfa:	fa01 f202 	lsl.w	r2, r1, r2
 8003bfe:	4013      	ands	r3, r2
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d13a      	bne.n	8003c7a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	e0b2      	b.n	8003d6e <HAL_RCC_ClockConfig+0x2de>
 8003c08:	2302      	movs	r3, #2
 8003c0a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c0e:	fa93 f3a3 	rbit	r3, r3
 8003c12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003c14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c16:	fab3 f383 	clz	r3, r3
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	095b      	lsrs	r3, r3, #5
 8003c1e:	b2db      	uxtb	r3, r3
 8003c20:	f043 0301 	orr.w	r3, r3, #1
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	d102      	bne.n	8003c30 <HAL_RCC_ClockConfig+0x1a0>
 8003c2a:	4b31      	ldr	r3, [pc, #196]	@ (8003cf0 <HAL_RCC_ClockConfig+0x260>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	e00d      	b.n	8003c4c <HAL_RCC_ClockConfig+0x1bc>
 8003c30:	2302      	movs	r3, #2
 8003c32:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c36:	fa93 f3a3 	rbit	r3, r3
 8003c3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c3c:	2302      	movs	r3, #2
 8003c3e:	623b      	str	r3, [r7, #32]
 8003c40:	6a3b      	ldr	r3, [r7, #32]
 8003c42:	fa93 f3a3 	rbit	r3, r3
 8003c46:	61fb      	str	r3, [r7, #28]
 8003c48:	4b29      	ldr	r3, [pc, #164]	@ (8003cf0 <HAL_RCC_ClockConfig+0x260>)
 8003c4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c4c:	2202      	movs	r2, #2
 8003c4e:	61ba      	str	r2, [r7, #24]
 8003c50:	69ba      	ldr	r2, [r7, #24]
 8003c52:	fa92 f2a2 	rbit	r2, r2
 8003c56:	617a      	str	r2, [r7, #20]
  return result;
 8003c58:	697a      	ldr	r2, [r7, #20]
 8003c5a:	fab2 f282 	clz	r2, r2
 8003c5e:	b2d2      	uxtb	r2, r2
 8003c60:	f042 0220 	orr.w	r2, r2, #32
 8003c64:	b2d2      	uxtb	r2, r2
 8003c66:	f002 021f 	and.w	r2, r2, #31
 8003c6a:	2101      	movs	r1, #1
 8003c6c:	fa01 f202 	lsl.w	r2, r1, r2
 8003c70:	4013      	ands	r3, r2
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d101      	bne.n	8003c7a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e079      	b.n	8003d6e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c7a:	4b1d      	ldr	r3, [pc, #116]	@ (8003cf0 <HAL_RCC_ClockConfig+0x260>)
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	f023 0203 	bic.w	r2, r3, #3
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	491a      	ldr	r1, [pc, #104]	@ (8003cf0 <HAL_RCC_ClockConfig+0x260>)
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c8c:	f7fd f838 	bl	8000d00 <HAL_GetTick>
 8003c90:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c92:	e00a      	b.n	8003caa <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c94:	f7fd f834 	bl	8000d00 <HAL_GetTick>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003c9c:	1ad3      	subs	r3, r2, r3
 8003c9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d901      	bls.n	8003caa <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003ca6:	2303      	movs	r3, #3
 8003ca8:	e061      	b.n	8003d6e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003caa:	4b11      	ldr	r3, [pc, #68]	@ (8003cf0 <HAL_RCC_ClockConfig+0x260>)
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	f003 020c 	and.w	r2, r3, #12
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	009b      	lsls	r3, r3, #2
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	d1eb      	bne.n	8003c94 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003cbc:	4b0b      	ldr	r3, [pc, #44]	@ (8003cec <HAL_RCC_ClockConfig+0x25c>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f003 0307 	and.w	r3, r3, #7
 8003cc4:	683a      	ldr	r2, [r7, #0]
 8003cc6:	429a      	cmp	r2, r3
 8003cc8:	d214      	bcs.n	8003cf4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cca:	4b08      	ldr	r3, [pc, #32]	@ (8003cec <HAL_RCC_ClockConfig+0x25c>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f023 0207 	bic.w	r2, r3, #7
 8003cd2:	4906      	ldr	r1, [pc, #24]	@ (8003cec <HAL_RCC_ClockConfig+0x25c>)
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cda:	4b04      	ldr	r3, [pc, #16]	@ (8003cec <HAL_RCC_ClockConfig+0x25c>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 0307 	and.w	r3, r3, #7
 8003ce2:	683a      	ldr	r2, [r7, #0]
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d005      	beq.n	8003cf4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	e040      	b.n	8003d6e <HAL_RCC_ClockConfig+0x2de>
 8003cec:	40022000 	.word	0x40022000
 8003cf0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f003 0304 	and.w	r3, r3, #4
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d008      	beq.n	8003d12 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d00:	4b1d      	ldr	r3, [pc, #116]	@ (8003d78 <HAL_RCC_ClockConfig+0x2e8>)
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	68db      	ldr	r3, [r3, #12]
 8003d0c:	491a      	ldr	r1, [pc, #104]	@ (8003d78 <HAL_RCC_ClockConfig+0x2e8>)
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 0308 	and.w	r3, r3, #8
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d009      	beq.n	8003d32 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d1e:	4b16      	ldr	r3, [pc, #88]	@ (8003d78 <HAL_RCC_ClockConfig+0x2e8>)
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	691b      	ldr	r3, [r3, #16]
 8003d2a:	00db      	lsls	r3, r3, #3
 8003d2c:	4912      	ldr	r1, [pc, #72]	@ (8003d78 <HAL_RCC_ClockConfig+0x2e8>)
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003d32:	f000 f829 	bl	8003d88 <HAL_RCC_GetSysClockFreq>
 8003d36:	4601      	mov	r1, r0
 8003d38:	4b0f      	ldr	r3, [pc, #60]	@ (8003d78 <HAL_RCC_ClockConfig+0x2e8>)
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003d40:	22f0      	movs	r2, #240	@ 0xf0
 8003d42:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d44:	693a      	ldr	r2, [r7, #16]
 8003d46:	fa92 f2a2 	rbit	r2, r2
 8003d4a:	60fa      	str	r2, [r7, #12]
  return result;
 8003d4c:	68fa      	ldr	r2, [r7, #12]
 8003d4e:	fab2 f282 	clz	r2, r2
 8003d52:	b2d2      	uxtb	r2, r2
 8003d54:	40d3      	lsrs	r3, r2
 8003d56:	4a09      	ldr	r2, [pc, #36]	@ (8003d7c <HAL_RCC_ClockConfig+0x2ec>)
 8003d58:	5cd3      	ldrb	r3, [r2, r3]
 8003d5a:	fa21 f303 	lsr.w	r3, r1, r3
 8003d5e:	4a08      	ldr	r2, [pc, #32]	@ (8003d80 <HAL_RCC_ClockConfig+0x2f0>)
 8003d60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003d62:	4b08      	ldr	r3, [pc, #32]	@ (8003d84 <HAL_RCC_ClockConfig+0x2f4>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4618      	mov	r0, r3
 8003d68:	f7fc feba 	bl	8000ae0 <HAL_InitTick>
  
  return HAL_OK;
 8003d6c:	2300      	movs	r3, #0
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3778      	adds	r7, #120	@ 0x78
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	bf00      	nop
 8003d78:	40021000 	.word	0x40021000
 8003d7c:	08006c10 	.word	0x08006c10
 8003d80:	20000000 	.word	0x20000000
 8003d84:	20000004 	.word	0x20000004

08003d88 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b087      	sub	sp, #28
 8003d8c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	60fb      	str	r3, [r7, #12]
 8003d92:	2300      	movs	r3, #0
 8003d94:	60bb      	str	r3, [r7, #8]
 8003d96:	2300      	movs	r3, #0
 8003d98:	617b      	str	r3, [r7, #20]
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003da2:	4b1e      	ldr	r3, [pc, #120]	@ (8003e1c <HAL_RCC_GetSysClockFreq+0x94>)
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	f003 030c 	and.w	r3, r3, #12
 8003dae:	2b04      	cmp	r3, #4
 8003db0:	d002      	beq.n	8003db8 <HAL_RCC_GetSysClockFreq+0x30>
 8003db2:	2b08      	cmp	r3, #8
 8003db4:	d003      	beq.n	8003dbe <HAL_RCC_GetSysClockFreq+0x36>
 8003db6:	e026      	b.n	8003e06 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003db8:	4b19      	ldr	r3, [pc, #100]	@ (8003e20 <HAL_RCC_GetSysClockFreq+0x98>)
 8003dba:	613b      	str	r3, [r7, #16]
      break;
 8003dbc:	e026      	b.n	8003e0c <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	0c9b      	lsrs	r3, r3, #18
 8003dc2:	f003 030f 	and.w	r3, r3, #15
 8003dc6:	4a17      	ldr	r2, [pc, #92]	@ (8003e24 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003dc8:	5cd3      	ldrb	r3, [r2, r3]
 8003dca:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8003dcc:	4b13      	ldr	r3, [pc, #76]	@ (8003e1c <HAL_RCC_GetSysClockFreq+0x94>)
 8003dce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dd0:	f003 030f 	and.w	r3, r3, #15
 8003dd4:	4a14      	ldr	r2, [pc, #80]	@ (8003e28 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003dd6:	5cd3      	ldrb	r3, [r2, r3]
 8003dd8:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d008      	beq.n	8003df6 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003de4:	4a0e      	ldr	r2, [pc, #56]	@ (8003e20 <HAL_RCC_GetSysClockFreq+0x98>)
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	fbb2 f2f3 	udiv	r2, r2, r3
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	fb02 f303 	mul.w	r3, r2, r3
 8003df2:	617b      	str	r3, [r7, #20]
 8003df4:	e004      	b.n	8003e00 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	4a0c      	ldr	r2, [pc, #48]	@ (8003e2c <HAL_RCC_GetSysClockFreq+0xa4>)
 8003dfa:	fb02 f303 	mul.w	r3, r2, r3
 8003dfe:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	613b      	str	r3, [r7, #16]
      break;
 8003e04:	e002      	b.n	8003e0c <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003e06:	4b06      	ldr	r3, [pc, #24]	@ (8003e20 <HAL_RCC_GetSysClockFreq+0x98>)
 8003e08:	613b      	str	r3, [r7, #16]
      break;
 8003e0a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e0c:	693b      	ldr	r3, [r7, #16]
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	371c      	adds	r7, #28
 8003e12:	46bd      	mov	sp, r7
 8003e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e18:	4770      	bx	lr
 8003e1a:	bf00      	nop
 8003e1c:	40021000 	.word	0x40021000
 8003e20:	007a1200 	.word	0x007a1200
 8003e24:	08006c28 	.word	0x08006c28
 8003e28:	08006c38 	.word	0x08006c38
 8003e2c:	003d0900 	.word	0x003d0900

08003e30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e30:	b480      	push	{r7}
 8003e32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e34:	4b03      	ldr	r3, [pc, #12]	@ (8003e44 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e36:	681b      	ldr	r3, [r3, #0]
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e40:	4770      	bx	lr
 8003e42:	bf00      	nop
 8003e44:	20000000 	.word	0x20000000

08003e48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b082      	sub	sp, #8
 8003e4c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003e4e:	f7ff ffef 	bl	8003e30 <HAL_RCC_GetHCLKFreq>
 8003e52:	4601      	mov	r1, r0
 8003e54:	4b0b      	ldr	r3, [pc, #44]	@ (8003e84 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003e5c:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003e60:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	fa92 f2a2 	rbit	r2, r2
 8003e68:	603a      	str	r2, [r7, #0]
  return result;
 8003e6a:	683a      	ldr	r2, [r7, #0]
 8003e6c:	fab2 f282 	clz	r2, r2
 8003e70:	b2d2      	uxtb	r2, r2
 8003e72:	40d3      	lsrs	r3, r2
 8003e74:	4a04      	ldr	r2, [pc, #16]	@ (8003e88 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003e76:	5cd3      	ldrb	r3, [r2, r3]
 8003e78:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	3708      	adds	r7, #8
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}
 8003e84:	40021000 	.word	0x40021000
 8003e88:	08006c20 	.word	0x08006c20

08003e8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b082      	sub	sp, #8
 8003e90:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003e92:	f7ff ffcd 	bl	8003e30 <HAL_RCC_GetHCLKFreq>
 8003e96:	4601      	mov	r1, r0
 8003e98:	4b0b      	ldr	r3, [pc, #44]	@ (8003ec8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8003ea0:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8003ea4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ea6:	687a      	ldr	r2, [r7, #4]
 8003ea8:	fa92 f2a2 	rbit	r2, r2
 8003eac:	603a      	str	r2, [r7, #0]
  return result;
 8003eae:	683a      	ldr	r2, [r7, #0]
 8003eb0:	fab2 f282 	clz	r2, r2
 8003eb4:	b2d2      	uxtb	r2, r2
 8003eb6:	40d3      	lsrs	r3, r2
 8003eb8:	4a04      	ldr	r2, [pc, #16]	@ (8003ecc <HAL_RCC_GetPCLK2Freq+0x40>)
 8003eba:	5cd3      	ldrb	r3, [r2, r3]
 8003ebc:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	3708      	adds	r7, #8
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}
 8003ec8:	40021000 	.word	0x40021000
 8003ecc:	08006c20 	.word	0x08006c20

08003ed0 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b083      	sub	sp, #12
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
 8003ed8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	220f      	movs	r2, #15
 8003ede:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003ee0:	4b12      	ldr	r3, [pc, #72]	@ (8003f2c <HAL_RCC_GetClockConfig+0x5c>)
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	f003 0203 	and.w	r2, r3, #3
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8003eec:	4b0f      	ldr	r3, [pc, #60]	@ (8003f2c <HAL_RCC_GetClockConfig+0x5c>)
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8003ef8:	4b0c      	ldr	r3, [pc, #48]	@ (8003f2c <HAL_RCC_GetClockConfig+0x5c>)
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003f04:	4b09      	ldr	r3, [pc, #36]	@ (8003f2c <HAL_RCC_GetClockConfig+0x5c>)
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	08db      	lsrs	r3, r3, #3
 8003f0a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8003f12:	4b07      	ldr	r3, [pc, #28]	@ (8003f30 <HAL_RCC_GetClockConfig+0x60>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f003 0207 	and.w	r2, r3, #7
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	601a      	str	r2, [r3, #0]
}
 8003f1e:	bf00      	nop
 8003f20:	370c      	adds	r7, #12
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr
 8003f2a:	bf00      	nop
 8003f2c:	40021000 	.word	0x40021000
 8003f30:	40022000 	.word	0x40022000

08003f34 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b092      	sub	sp, #72	@ 0x48
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8003f40:	2300      	movs	r3, #0
 8003f42:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003f44:	2300      	movs	r3, #0
 8003f46:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	f000 80d4 	beq.w	8004100 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f58:	4b4e      	ldr	r3, [pc, #312]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f5a:	69db      	ldr	r3, [r3, #28]
 8003f5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d10e      	bne.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f64:	4b4b      	ldr	r3, [pc, #300]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f66:	69db      	ldr	r3, [r3, #28]
 8003f68:	4a4a      	ldr	r2, [pc, #296]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f6a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f6e:	61d3      	str	r3, [r2, #28]
 8003f70:	4b48      	ldr	r3, [pc, #288]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f72:	69db      	ldr	r3, [r3, #28]
 8003f74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f78:	60bb      	str	r3, [r7, #8]
 8003f7a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f82:	4b45      	ldr	r3, [pc, #276]	@ (8004098 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d118      	bne.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f8e:	4b42      	ldr	r3, [pc, #264]	@ (8004098 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a41      	ldr	r2, [pc, #260]	@ (8004098 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f98:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f9a:	f7fc feb1 	bl	8000d00 <HAL_GetTick>
 8003f9e:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fa0:	e008      	b.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fa2:	f7fc fead 	bl	8000d00 <HAL_GetTick>
 8003fa6:	4602      	mov	r2, r0
 8003fa8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003faa:	1ad3      	subs	r3, r2, r3
 8003fac:	2b64      	cmp	r3, #100	@ 0x64
 8003fae:	d901      	bls.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003fb0:	2303      	movs	r3, #3
 8003fb2:	e14b      	b.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fb4:	4b38      	ldr	r3, [pc, #224]	@ (8004098 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d0f0      	beq.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003fc0:	4b34      	ldr	r3, [pc, #208]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fc2:	6a1b      	ldr	r3, [r3, #32]
 8003fc4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003fc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003fca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	f000 8084 	beq.w	80040da <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003fda:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d07c      	beq.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003fe0:	4b2c      	ldr	r3, [pc, #176]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fe2:	6a1b      	ldr	r3, [r3, #32]
 8003fe4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003fe8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003fea:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003fee:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ff0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ff2:	fa93 f3a3 	rbit	r3, r3
 8003ff6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003ff8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003ffa:	fab3 f383 	clz	r3, r3
 8003ffe:	b2db      	uxtb	r3, r3
 8004000:	461a      	mov	r2, r3
 8004002:	4b26      	ldr	r3, [pc, #152]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004004:	4413      	add	r3, r2
 8004006:	009b      	lsls	r3, r3, #2
 8004008:	461a      	mov	r2, r3
 800400a:	2301      	movs	r3, #1
 800400c:	6013      	str	r3, [r2, #0]
 800400e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004012:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004014:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004016:	fa93 f3a3 	rbit	r3, r3
 800401a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800401c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800401e:	fab3 f383 	clz	r3, r3
 8004022:	b2db      	uxtb	r3, r3
 8004024:	461a      	mov	r2, r3
 8004026:	4b1d      	ldr	r3, [pc, #116]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004028:	4413      	add	r3, r2
 800402a:	009b      	lsls	r3, r3, #2
 800402c:	461a      	mov	r2, r3
 800402e:	2300      	movs	r3, #0
 8004030:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004032:	4a18      	ldr	r2, [pc, #96]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004034:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004036:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004038:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800403a:	f003 0301 	and.w	r3, r3, #1
 800403e:	2b00      	cmp	r3, #0
 8004040:	d04b      	beq.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004042:	f7fc fe5d 	bl	8000d00 <HAL_GetTick>
 8004046:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004048:	e00a      	b.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800404a:	f7fc fe59 	bl	8000d00 <HAL_GetTick>
 800404e:	4602      	mov	r2, r0
 8004050:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004052:	1ad3      	subs	r3, r2, r3
 8004054:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004058:	4293      	cmp	r3, r2
 800405a:	d901      	bls.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800405c:	2303      	movs	r3, #3
 800405e:	e0f5      	b.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x318>
 8004060:	2302      	movs	r3, #2
 8004062:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004064:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004066:	fa93 f3a3 	rbit	r3, r3
 800406a:	627b      	str	r3, [r7, #36]	@ 0x24
 800406c:	2302      	movs	r3, #2
 800406e:	623b      	str	r3, [r7, #32]
 8004070:	6a3b      	ldr	r3, [r7, #32]
 8004072:	fa93 f3a3 	rbit	r3, r3
 8004076:	61fb      	str	r3, [r7, #28]
  return result;
 8004078:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800407a:	fab3 f383 	clz	r3, r3
 800407e:	b2db      	uxtb	r3, r3
 8004080:	095b      	lsrs	r3, r3, #5
 8004082:	b2db      	uxtb	r3, r3
 8004084:	f043 0302 	orr.w	r3, r3, #2
 8004088:	b2db      	uxtb	r3, r3
 800408a:	2b02      	cmp	r3, #2
 800408c:	d108      	bne.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800408e:	4b01      	ldr	r3, [pc, #4]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004090:	6a1b      	ldr	r3, [r3, #32]
 8004092:	e00d      	b.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004094:	40021000 	.word	0x40021000
 8004098:	40007000 	.word	0x40007000
 800409c:	10908100 	.word	0x10908100
 80040a0:	2302      	movs	r3, #2
 80040a2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040a4:	69bb      	ldr	r3, [r7, #24]
 80040a6:	fa93 f3a3 	rbit	r3, r3
 80040aa:	617b      	str	r3, [r7, #20]
 80040ac:	4b69      	ldr	r3, [pc, #420]	@ (8004254 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80040ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040b0:	2202      	movs	r2, #2
 80040b2:	613a      	str	r2, [r7, #16]
 80040b4:	693a      	ldr	r2, [r7, #16]
 80040b6:	fa92 f2a2 	rbit	r2, r2
 80040ba:	60fa      	str	r2, [r7, #12]
  return result;
 80040bc:	68fa      	ldr	r2, [r7, #12]
 80040be:	fab2 f282 	clz	r2, r2
 80040c2:	b2d2      	uxtb	r2, r2
 80040c4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80040c8:	b2d2      	uxtb	r2, r2
 80040ca:	f002 021f 	and.w	r2, r2, #31
 80040ce:	2101      	movs	r1, #1
 80040d0:	fa01 f202 	lsl.w	r2, r1, r2
 80040d4:	4013      	ands	r3, r2
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d0b7      	beq.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80040da:	4b5e      	ldr	r3, [pc, #376]	@ (8004254 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80040dc:	6a1b      	ldr	r3, [r3, #32]
 80040de:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	495b      	ldr	r1, [pc, #364]	@ (8004254 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80040e8:	4313      	orrs	r3, r2
 80040ea:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80040ec:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	d105      	bne.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040f4:	4b57      	ldr	r3, [pc, #348]	@ (8004254 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80040f6:	69db      	ldr	r3, [r3, #28]
 80040f8:	4a56      	ldr	r2, [pc, #344]	@ (8004254 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80040fa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80040fe:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f003 0301 	and.w	r3, r3, #1
 8004108:	2b00      	cmp	r3, #0
 800410a:	d008      	beq.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800410c:	4b51      	ldr	r3, [pc, #324]	@ (8004254 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800410e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004110:	f023 0203 	bic.w	r2, r3, #3
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	494e      	ldr	r1, [pc, #312]	@ (8004254 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800411a:	4313      	orrs	r3, r2
 800411c:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 0320 	and.w	r3, r3, #32
 8004126:	2b00      	cmp	r3, #0
 8004128:	d008      	beq.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800412a:	4b4a      	ldr	r3, [pc, #296]	@ (8004254 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800412c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800412e:	f023 0210 	bic.w	r2, r3, #16
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	68db      	ldr	r3, [r3, #12]
 8004136:	4947      	ldr	r1, [pc, #284]	@ (8004254 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004138:	4313      	orrs	r3, r2
 800413a:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004144:	2b00      	cmp	r3, #0
 8004146:	d008      	beq.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004148:	4b42      	ldr	r3, [pc, #264]	@ (8004254 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004154:	493f      	ldr	r1, [pc, #252]	@ (8004254 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004156:	4313      	orrs	r3, r2
 8004158:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004162:	2b00      	cmp	r3, #0
 8004164:	d008      	beq.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004166:	4b3b      	ldr	r3, [pc, #236]	@ (8004254 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800416a:	f023 0220 	bic.w	r2, r3, #32
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	691b      	ldr	r3, [r3, #16]
 8004172:	4938      	ldr	r1, [pc, #224]	@ (8004254 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004174:	4313      	orrs	r3, r2
 8004176:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004180:	2b00      	cmp	r3, #0
 8004182:	d008      	beq.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004184:	4b33      	ldr	r3, [pc, #204]	@ (8004254 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004186:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004188:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	695b      	ldr	r3, [r3, #20]
 8004190:	4930      	ldr	r1, [pc, #192]	@ (8004254 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004192:	4313      	orrs	r3, r2
 8004194:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d008      	beq.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80041a2:	4b2c      	ldr	r3, [pc, #176]	@ (8004254 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	69db      	ldr	r3, [r3, #28]
 80041ae:	4929      	ldr	r1, [pc, #164]	@ (8004254 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80041b0:	4313      	orrs	r3, r2
 80041b2:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d008      	beq.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 80041c0:	4b24      	ldr	r3, [pc, #144]	@ (8004254 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80041c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041c4:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	699b      	ldr	r3, [r3, #24]
 80041cc:	4921      	ldr	r1, [pc, #132]	@ (8004254 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80041ce:	4313      	orrs	r3, r2
 80041d0:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d008      	beq.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80041de:	4b1d      	ldr	r3, [pc, #116]	@ (8004254 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80041e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041e2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6a1b      	ldr	r3, [r3, #32]
 80041ea:	491a      	ldr	r1, [pc, #104]	@ (8004254 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80041ec:	4313      	orrs	r3, r2
 80041ee:	630b      	str	r3, [r1, #48]	@ 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d008      	beq.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80041fc:	4b15      	ldr	r3, [pc, #84]	@ (8004254 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80041fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004200:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004208:	4912      	ldr	r1, [pc, #72]	@ (8004254 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800420a:	4313      	orrs	r3, r2
 800420c:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004216:	2b00      	cmp	r3, #0
 8004218:	d008      	beq.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800421a:	4b0e      	ldr	r3, [pc, #56]	@ (8004254 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800421c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800421e:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004226:	490b      	ldr	r1, [pc, #44]	@ (8004254 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004228:	4313      	orrs	r3, r2
 800422a:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004234:	2b00      	cmp	r3, #0
 8004236:	d008      	beq.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8004238:	4b06      	ldr	r3, [pc, #24]	@ (8004254 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800423a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800423c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004244:	4903      	ldr	r1, [pc, #12]	@ (8004254 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004246:	4313      	orrs	r3, r2
 8004248:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800424a:	2300      	movs	r3, #0
}
 800424c:	4618      	mov	r0, r3
 800424e:	3748      	adds	r7, #72	@ 0x48
 8004250:	46bd      	mov	sp, r7
 8004252:	bd80      	pop	{r7, pc}
 8004254:	40021000 	.word	0x40021000

08004258 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b082      	sub	sp, #8
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d101      	bne.n	800426a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	e049      	b.n	80042fe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004270:	b2db      	uxtb	r3, r3
 8004272:	2b00      	cmp	r3, #0
 8004274:	d106      	bne.n	8004284 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2200      	movs	r2, #0
 800427a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f000 f841 	bl	8004306 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2202      	movs	r2, #2
 8004288:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	3304      	adds	r3, #4
 8004294:	4619      	mov	r1, r3
 8004296:	4610      	mov	r0, r2
 8004298:	f000 f9be 	bl	8004618 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2201      	movs	r2, #1
 80042a0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2201      	movs	r2, #1
 80042a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2201      	movs	r2, #1
 80042b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2201      	movs	r2, #1
 80042b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2201      	movs	r2, #1
 80042c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2201      	movs	r2, #1
 80042c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2201      	movs	r2, #1
 80042d0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2201      	movs	r2, #1
 80042d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2201      	movs	r2, #1
 80042e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2201      	movs	r2, #1
 80042e8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2201      	movs	r2, #1
 80042f0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2201      	movs	r2, #1
 80042f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80042fc:	2300      	movs	r3, #0
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3708      	adds	r7, #8
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}

08004306 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004306:	b480      	push	{r7}
 8004308:	b083      	sub	sp, #12
 800430a:	af00      	add	r7, sp, #0
 800430c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800430e:	bf00      	nop
 8004310:	370c      	adds	r7, #12
 8004312:	46bd      	mov	sp, r7
 8004314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004318:	4770      	bx	lr
	...

0800431c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800431c:	b480      	push	{r7}
 800431e:	b085      	sub	sp, #20
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800432a:	b2db      	uxtb	r3, r3
 800432c:	2b01      	cmp	r3, #1
 800432e:	d001      	beq.n	8004334 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004330:	2301      	movs	r3, #1
 8004332:	e03b      	b.n	80043ac <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2202      	movs	r2, #2
 8004338:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	68da      	ldr	r2, [r3, #12]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f042 0201 	orr.w	r2, r2, #1
 800434a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a19      	ldr	r2, [pc, #100]	@ (80043b8 <HAL_TIM_Base_Start_IT+0x9c>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d009      	beq.n	800436a <HAL_TIM_Base_Start_IT+0x4e>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800435e:	d004      	beq.n	800436a <HAL_TIM_Base_Start_IT+0x4e>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a15      	ldr	r2, [pc, #84]	@ (80043bc <HAL_TIM_Base_Start_IT+0xa0>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d115      	bne.n	8004396 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	689a      	ldr	r2, [r3, #8]
 8004370:	4b13      	ldr	r3, [pc, #76]	@ (80043c0 <HAL_TIM_Base_Start_IT+0xa4>)
 8004372:	4013      	ands	r3, r2
 8004374:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2b06      	cmp	r3, #6
 800437a:	d015      	beq.n	80043a8 <HAL_TIM_Base_Start_IT+0x8c>
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004382:	d011      	beq.n	80043a8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	681a      	ldr	r2, [r3, #0]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f042 0201 	orr.w	r2, r2, #1
 8004392:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004394:	e008      	b.n	80043a8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f042 0201 	orr.w	r2, r2, #1
 80043a4:	601a      	str	r2, [r3, #0]
 80043a6:	e000      	b.n	80043aa <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043a8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80043aa:	2300      	movs	r3, #0
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	3714      	adds	r7, #20
 80043b0:	46bd      	mov	sp, r7
 80043b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b6:	4770      	bx	lr
 80043b8:	40012c00 	.word	0x40012c00
 80043bc:	40014000 	.word	0x40014000
 80043c0:	00010007 	.word	0x00010007

080043c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b084      	sub	sp, #16
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	68db      	ldr	r3, [r3, #12]
 80043d2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	691b      	ldr	r3, [r3, #16]
 80043da:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	f003 0302 	and.w	r3, r3, #2
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d020      	beq.n	8004428 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	f003 0302 	and.w	r3, r3, #2
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d01b      	beq.n	8004428 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f06f 0202 	mvn.w	r2, #2
 80043f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2201      	movs	r2, #1
 80043fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	699b      	ldr	r3, [r3, #24]
 8004406:	f003 0303 	and.w	r3, r3, #3
 800440a:	2b00      	cmp	r3, #0
 800440c:	d003      	beq.n	8004416 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f000 f8e4 	bl	80045dc <HAL_TIM_IC_CaptureCallback>
 8004414:	e005      	b.n	8004422 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f000 f8d6 	bl	80045c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	f000 f8e7 	bl	80045f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2200      	movs	r2, #0
 8004426:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	f003 0304 	and.w	r3, r3, #4
 800442e:	2b00      	cmp	r3, #0
 8004430:	d020      	beq.n	8004474 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	f003 0304 	and.w	r3, r3, #4
 8004438:	2b00      	cmp	r3, #0
 800443a:	d01b      	beq.n	8004474 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f06f 0204 	mvn.w	r2, #4
 8004444:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2202      	movs	r2, #2
 800444a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	699b      	ldr	r3, [r3, #24]
 8004452:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004456:	2b00      	cmp	r3, #0
 8004458:	d003      	beq.n	8004462 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f000 f8be 	bl	80045dc <HAL_TIM_IC_CaptureCallback>
 8004460:	e005      	b.n	800446e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f000 f8b0 	bl	80045c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004468:	6878      	ldr	r0, [r7, #4]
 800446a:	f000 f8c1 	bl	80045f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2200      	movs	r2, #0
 8004472:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	f003 0308 	and.w	r3, r3, #8
 800447a:	2b00      	cmp	r3, #0
 800447c:	d020      	beq.n	80044c0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	f003 0308 	and.w	r3, r3, #8
 8004484:	2b00      	cmp	r3, #0
 8004486:	d01b      	beq.n	80044c0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f06f 0208 	mvn.w	r2, #8
 8004490:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2204      	movs	r2, #4
 8004496:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	69db      	ldr	r3, [r3, #28]
 800449e:	f003 0303 	and.w	r3, r3, #3
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d003      	beq.n	80044ae <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044a6:	6878      	ldr	r0, [r7, #4]
 80044a8:	f000 f898 	bl	80045dc <HAL_TIM_IC_CaptureCallback>
 80044ac:	e005      	b.n	80044ba <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f000 f88a 	bl	80045c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044b4:	6878      	ldr	r0, [r7, #4]
 80044b6:	f000 f89b 	bl	80045f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2200      	movs	r2, #0
 80044be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	f003 0310 	and.w	r3, r3, #16
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d020      	beq.n	800450c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	f003 0310 	and.w	r3, r3, #16
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d01b      	beq.n	800450c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f06f 0210 	mvn.w	r2, #16
 80044dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2208      	movs	r2, #8
 80044e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	69db      	ldr	r3, [r3, #28]
 80044ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d003      	beq.n	80044fa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f000 f872 	bl	80045dc <HAL_TIM_IC_CaptureCallback>
 80044f8:	e005      	b.n	8004506 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	f000 f864 	bl	80045c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	f000 f875 	bl	80045f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2200      	movs	r2, #0
 800450a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	f003 0301 	and.w	r3, r3, #1
 8004512:	2b00      	cmp	r3, #0
 8004514:	d00c      	beq.n	8004530 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	f003 0301 	and.w	r3, r3, #1
 800451c:	2b00      	cmp	r3, #0
 800451e:	d007      	beq.n	8004530 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f06f 0201 	mvn.w	r2, #1
 8004528:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f7fc f990 	bl	8000850 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004536:	2b00      	cmp	r3, #0
 8004538:	d00c      	beq.n	8004554 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004540:	2b00      	cmp	r3, #0
 8004542:	d007      	beq.n	8004554 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800454c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f000 f8e6 	bl	8004720 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800455a:	2b00      	cmp	r3, #0
 800455c:	d00c      	beq.n	8004578 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004564:	2b00      	cmp	r3, #0
 8004566:	d007      	beq.n	8004578 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004570:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f000 f8de 	bl	8004734 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800457e:	2b00      	cmp	r3, #0
 8004580:	d00c      	beq.n	800459c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004588:	2b00      	cmp	r3, #0
 800458a:	d007      	beq.n	800459c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004594:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f000 f834 	bl	8004604 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	f003 0320 	and.w	r3, r3, #32
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d00c      	beq.n	80045c0 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	f003 0320 	and.w	r3, r3, #32
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d007      	beq.n	80045c0 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f06f 0220 	mvn.w	r2, #32
 80045b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f000 f8a6 	bl	800470c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80045c0:	bf00      	nop
 80045c2:	3710      	adds	r7, #16
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}

080045c8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b083      	sub	sp, #12
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80045d0:	bf00      	nop
 80045d2:	370c      	adds	r7, #12
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr

080045dc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80045dc:	b480      	push	{r7}
 80045de:	b083      	sub	sp, #12
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80045e4:	bf00      	nop
 80045e6:	370c      	adds	r7, #12
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr

080045f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b083      	sub	sp, #12
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80045f8:	bf00      	nop
 80045fa:	370c      	adds	r7, #12
 80045fc:	46bd      	mov	sp, r7
 80045fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004602:	4770      	bx	lr

08004604 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004604:	b480      	push	{r7}
 8004606:	b083      	sub	sp, #12
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800460c:	bf00      	nop
 800460e:	370c      	adds	r7, #12
 8004610:	46bd      	mov	sp, r7
 8004612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004616:	4770      	bx	lr

08004618 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004618:	b480      	push	{r7}
 800461a:	b085      	sub	sp, #20
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
 8004620:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	4a34      	ldr	r2, [pc, #208]	@ (80046fc <TIM_Base_SetConfig+0xe4>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d003      	beq.n	8004638 <TIM_Base_SetConfig+0x20>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004636:	d108      	bne.n	800464a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800463e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	68fa      	ldr	r2, [r7, #12]
 8004646:	4313      	orrs	r3, r2
 8004648:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	4a2b      	ldr	r2, [pc, #172]	@ (80046fc <TIM_Base_SetConfig+0xe4>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d00f      	beq.n	8004672 <TIM_Base_SetConfig+0x5a>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004658:	d00b      	beq.n	8004672 <TIM_Base_SetConfig+0x5a>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	4a28      	ldr	r2, [pc, #160]	@ (8004700 <TIM_Base_SetConfig+0xe8>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d007      	beq.n	8004672 <TIM_Base_SetConfig+0x5a>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	4a27      	ldr	r2, [pc, #156]	@ (8004704 <TIM_Base_SetConfig+0xec>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d003      	beq.n	8004672 <TIM_Base_SetConfig+0x5a>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	4a26      	ldr	r2, [pc, #152]	@ (8004708 <TIM_Base_SetConfig+0xf0>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d108      	bne.n	8004684 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004678:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	68db      	ldr	r3, [r3, #12]
 800467e:	68fa      	ldr	r2, [r7, #12]
 8004680:	4313      	orrs	r3, r2
 8004682:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	695b      	ldr	r3, [r3, #20]
 800468e:	4313      	orrs	r3, r2
 8004690:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	68fa      	ldr	r2, [r7, #12]
 8004696:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	689a      	ldr	r2, [r3, #8]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	4a14      	ldr	r2, [pc, #80]	@ (80046fc <TIM_Base_SetConfig+0xe4>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d00b      	beq.n	80046c8 <TIM_Base_SetConfig+0xb0>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	4a13      	ldr	r2, [pc, #76]	@ (8004700 <TIM_Base_SetConfig+0xe8>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d007      	beq.n	80046c8 <TIM_Base_SetConfig+0xb0>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	4a12      	ldr	r2, [pc, #72]	@ (8004704 <TIM_Base_SetConfig+0xec>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d003      	beq.n	80046c8 <TIM_Base_SetConfig+0xb0>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	4a11      	ldr	r2, [pc, #68]	@ (8004708 <TIM_Base_SetConfig+0xf0>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d103      	bne.n	80046d0 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	691a      	ldr	r2, [r3, #16]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2201      	movs	r2, #1
 80046d4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	691b      	ldr	r3, [r3, #16]
 80046da:	f003 0301 	and.w	r3, r3, #1
 80046de:	2b01      	cmp	r3, #1
 80046e0:	d105      	bne.n	80046ee <TIM_Base_SetConfig+0xd6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	691b      	ldr	r3, [r3, #16]
 80046e6:	f023 0201 	bic.w	r2, r3, #1
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	611a      	str	r2, [r3, #16]
  }
}
 80046ee:	bf00      	nop
 80046f0:	3714      	adds	r7, #20
 80046f2:	46bd      	mov	sp, r7
 80046f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f8:	4770      	bx	lr
 80046fa:	bf00      	nop
 80046fc:	40012c00 	.word	0x40012c00
 8004700:	40014000 	.word	0x40014000
 8004704:	40014400 	.word	0x40014400
 8004708:	40014800 	.word	0x40014800

0800470c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800470c:	b480      	push	{r7}
 800470e:	b083      	sub	sp, #12
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004714:	bf00      	nop
 8004716:	370c      	adds	r7, #12
 8004718:	46bd      	mov	sp, r7
 800471a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471e:	4770      	bx	lr

08004720 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004720:	b480      	push	{r7}
 8004722:	b083      	sub	sp, #12
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004728:	bf00      	nop
 800472a:	370c      	adds	r7, #12
 800472c:	46bd      	mov	sp, r7
 800472e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004732:	4770      	bx	lr

08004734 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004734:	b480      	push	{r7}
 8004736:	b083      	sub	sp, #12
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800473c:	bf00      	nop
 800473e:	370c      	adds	r7, #12
 8004740:	46bd      	mov	sp, r7
 8004742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004746:	4770      	bx	lr

08004748 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b082      	sub	sp, #8
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d101      	bne.n	800475a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004756:	2301      	movs	r3, #1
 8004758:	e040      	b.n	80047dc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800475e:	2b00      	cmp	r3, #0
 8004760:	d106      	bne.n	8004770 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2200      	movs	r2, #0
 8004766:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f7fc f976 	bl	8000a5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2224      	movs	r2, #36	@ 0x24
 8004774:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f022 0201 	bic.w	r2, r2, #1
 8004784:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800478a:	2b00      	cmp	r3, #0
 800478c:	d002      	beq.n	8004794 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f000 f95e 	bl	8004a50 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004794:	6878      	ldr	r0, [r7, #4]
 8004796:	f000 f825 	bl	80047e4 <UART_SetConfig>
 800479a:	4603      	mov	r3, r0
 800479c:	2b01      	cmp	r3, #1
 800479e:	d101      	bne.n	80047a4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80047a0:	2301      	movs	r3, #1
 80047a2:	e01b      	b.n	80047dc <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	685a      	ldr	r2, [r3, #4]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80047b2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	689a      	ldr	r2, [r3, #8]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80047c2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f042 0201 	orr.w	r2, r2, #1
 80047d2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80047d4:	6878      	ldr	r0, [r7, #4]
 80047d6:	f000 f9dd 	bl	8004b94 <UART_CheckIdleState>
 80047da:	4603      	mov	r3, r0
}
 80047dc:	4618      	mov	r0, r3
 80047de:	3708      	adds	r7, #8
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bd80      	pop	{r7, pc}

080047e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b088      	sub	sp, #32
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80047ec:	2300      	movs	r3, #0
 80047ee:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	689a      	ldr	r2, [r3, #8]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	691b      	ldr	r3, [r3, #16]
 80047f8:	431a      	orrs	r2, r3
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	695b      	ldr	r3, [r3, #20]
 80047fe:	431a      	orrs	r2, r3
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	69db      	ldr	r3, [r3, #28]
 8004804:	4313      	orrs	r3, r2
 8004806:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	4b8a      	ldr	r3, [pc, #552]	@ (8004a38 <UART_SetConfig+0x254>)
 8004810:	4013      	ands	r3, r2
 8004812:	687a      	ldr	r2, [r7, #4]
 8004814:	6812      	ldr	r2, [r2, #0]
 8004816:	6979      	ldr	r1, [r7, #20]
 8004818:	430b      	orrs	r3, r1
 800481a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	68da      	ldr	r2, [r3, #12]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	430a      	orrs	r2, r1
 8004830:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	699b      	ldr	r3, [r3, #24]
 8004836:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6a1b      	ldr	r3, [r3, #32]
 800483c:	697a      	ldr	r2, [r7, #20]
 800483e:	4313      	orrs	r3, r2
 8004840:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	697a      	ldr	r2, [r7, #20]
 8004852:	430a      	orrs	r2, r1
 8004854:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a78      	ldr	r2, [pc, #480]	@ (8004a3c <UART_SetConfig+0x258>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d120      	bne.n	80048a2 <UART_SetConfig+0xbe>
 8004860:	4b77      	ldr	r3, [pc, #476]	@ (8004a40 <UART_SetConfig+0x25c>)
 8004862:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004864:	f003 0303 	and.w	r3, r3, #3
 8004868:	2b03      	cmp	r3, #3
 800486a:	d817      	bhi.n	800489c <UART_SetConfig+0xb8>
 800486c:	a201      	add	r2, pc, #4	@ (adr r2, 8004874 <UART_SetConfig+0x90>)
 800486e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004872:	bf00      	nop
 8004874:	08004885 	.word	0x08004885
 8004878:	08004891 	.word	0x08004891
 800487c:	08004897 	.word	0x08004897
 8004880:	0800488b 	.word	0x0800488b
 8004884:	2300      	movs	r3, #0
 8004886:	77fb      	strb	r3, [r7, #31]
 8004888:	e01d      	b.n	80048c6 <UART_SetConfig+0xe2>
 800488a:	2302      	movs	r3, #2
 800488c:	77fb      	strb	r3, [r7, #31]
 800488e:	e01a      	b.n	80048c6 <UART_SetConfig+0xe2>
 8004890:	2304      	movs	r3, #4
 8004892:	77fb      	strb	r3, [r7, #31]
 8004894:	e017      	b.n	80048c6 <UART_SetConfig+0xe2>
 8004896:	2308      	movs	r3, #8
 8004898:	77fb      	strb	r3, [r7, #31]
 800489a:	e014      	b.n	80048c6 <UART_SetConfig+0xe2>
 800489c:	2310      	movs	r3, #16
 800489e:	77fb      	strb	r3, [r7, #31]
 80048a0:	e011      	b.n	80048c6 <UART_SetConfig+0xe2>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a67      	ldr	r2, [pc, #412]	@ (8004a44 <UART_SetConfig+0x260>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d102      	bne.n	80048b2 <UART_SetConfig+0xce>
 80048ac:	2300      	movs	r3, #0
 80048ae:	77fb      	strb	r3, [r7, #31]
 80048b0:	e009      	b.n	80048c6 <UART_SetConfig+0xe2>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a64      	ldr	r2, [pc, #400]	@ (8004a48 <UART_SetConfig+0x264>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d102      	bne.n	80048c2 <UART_SetConfig+0xde>
 80048bc:	2300      	movs	r3, #0
 80048be:	77fb      	strb	r3, [r7, #31]
 80048c0:	e001      	b.n	80048c6 <UART_SetConfig+0xe2>
 80048c2:	2310      	movs	r3, #16
 80048c4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	69db      	ldr	r3, [r3, #28]
 80048ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80048ce:	d15a      	bne.n	8004986 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 80048d0:	7ffb      	ldrb	r3, [r7, #31]
 80048d2:	2b08      	cmp	r3, #8
 80048d4:	d827      	bhi.n	8004926 <UART_SetConfig+0x142>
 80048d6:	a201      	add	r2, pc, #4	@ (adr r2, 80048dc <UART_SetConfig+0xf8>)
 80048d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048dc:	08004901 	.word	0x08004901
 80048e0:	08004909 	.word	0x08004909
 80048e4:	08004911 	.word	0x08004911
 80048e8:	08004927 	.word	0x08004927
 80048ec:	08004917 	.word	0x08004917
 80048f0:	08004927 	.word	0x08004927
 80048f4:	08004927 	.word	0x08004927
 80048f8:	08004927 	.word	0x08004927
 80048fc:	0800491f 	.word	0x0800491f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004900:	f7ff faa2 	bl	8003e48 <HAL_RCC_GetPCLK1Freq>
 8004904:	61b8      	str	r0, [r7, #24]
        break;
 8004906:	e013      	b.n	8004930 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004908:	f7ff fac0 	bl	8003e8c <HAL_RCC_GetPCLK2Freq>
 800490c:	61b8      	str	r0, [r7, #24]
        break;
 800490e:	e00f      	b.n	8004930 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004910:	4b4e      	ldr	r3, [pc, #312]	@ (8004a4c <UART_SetConfig+0x268>)
 8004912:	61bb      	str	r3, [r7, #24]
        break;
 8004914:	e00c      	b.n	8004930 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004916:	f7ff fa37 	bl	8003d88 <HAL_RCC_GetSysClockFreq>
 800491a:	61b8      	str	r0, [r7, #24]
        break;
 800491c:	e008      	b.n	8004930 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800491e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004922:	61bb      	str	r3, [r7, #24]
        break;
 8004924:	e004      	b.n	8004930 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8004926:	2300      	movs	r3, #0
 8004928:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	77bb      	strb	r3, [r7, #30]
        break;
 800492e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004930:	69bb      	ldr	r3, [r7, #24]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d074      	beq.n	8004a20 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004936:	69bb      	ldr	r3, [r7, #24]
 8004938:	005a      	lsls	r2, r3, #1
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	085b      	lsrs	r3, r3, #1
 8004940:	441a      	add	r2, r3
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	fbb2 f3f3 	udiv	r3, r2, r3
 800494a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	2b0f      	cmp	r3, #15
 8004950:	d916      	bls.n	8004980 <UART_SetConfig+0x19c>
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004958:	d212      	bcs.n	8004980 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	b29b      	uxth	r3, r3
 800495e:	f023 030f 	bic.w	r3, r3, #15
 8004962:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	085b      	lsrs	r3, r3, #1
 8004968:	b29b      	uxth	r3, r3
 800496a:	f003 0307 	and.w	r3, r3, #7
 800496e:	b29a      	uxth	r2, r3
 8004970:	89fb      	ldrh	r3, [r7, #14]
 8004972:	4313      	orrs	r3, r2
 8004974:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	89fa      	ldrh	r2, [r7, #14]
 800497c:	60da      	str	r2, [r3, #12]
 800497e:	e04f      	b.n	8004a20 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004980:	2301      	movs	r3, #1
 8004982:	77bb      	strb	r3, [r7, #30]
 8004984:	e04c      	b.n	8004a20 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004986:	7ffb      	ldrb	r3, [r7, #31]
 8004988:	2b08      	cmp	r3, #8
 800498a:	d828      	bhi.n	80049de <UART_SetConfig+0x1fa>
 800498c:	a201      	add	r2, pc, #4	@ (adr r2, 8004994 <UART_SetConfig+0x1b0>)
 800498e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004992:	bf00      	nop
 8004994:	080049b9 	.word	0x080049b9
 8004998:	080049c1 	.word	0x080049c1
 800499c:	080049c9 	.word	0x080049c9
 80049a0:	080049df 	.word	0x080049df
 80049a4:	080049cf 	.word	0x080049cf
 80049a8:	080049df 	.word	0x080049df
 80049ac:	080049df 	.word	0x080049df
 80049b0:	080049df 	.word	0x080049df
 80049b4:	080049d7 	.word	0x080049d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049b8:	f7ff fa46 	bl	8003e48 <HAL_RCC_GetPCLK1Freq>
 80049bc:	61b8      	str	r0, [r7, #24]
        break;
 80049be:	e013      	b.n	80049e8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80049c0:	f7ff fa64 	bl	8003e8c <HAL_RCC_GetPCLK2Freq>
 80049c4:	61b8      	str	r0, [r7, #24]
        break;
 80049c6:	e00f      	b.n	80049e8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049c8:	4b20      	ldr	r3, [pc, #128]	@ (8004a4c <UART_SetConfig+0x268>)
 80049ca:	61bb      	str	r3, [r7, #24]
        break;
 80049cc:	e00c      	b.n	80049e8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049ce:	f7ff f9db 	bl	8003d88 <HAL_RCC_GetSysClockFreq>
 80049d2:	61b8      	str	r0, [r7, #24]
        break;
 80049d4:	e008      	b.n	80049e8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80049da:	61bb      	str	r3, [r7, #24]
        break;
 80049dc:	e004      	b.n	80049e8 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80049de:	2300      	movs	r3, #0
 80049e0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80049e2:	2301      	movs	r3, #1
 80049e4:	77bb      	strb	r3, [r7, #30]
        break;
 80049e6:	bf00      	nop
    }

    if (pclk != 0U)
 80049e8:	69bb      	ldr	r3, [r7, #24]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d018      	beq.n	8004a20 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	085a      	lsrs	r2, r3, #1
 80049f4:	69bb      	ldr	r3, [r7, #24]
 80049f6:	441a      	add	r2, r3
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a00:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	2b0f      	cmp	r3, #15
 8004a06:	d909      	bls.n	8004a1c <UART_SetConfig+0x238>
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a0e:	d205      	bcs.n	8004a1c <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	b29a      	uxth	r2, r3
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	60da      	str	r2, [r3, #12]
 8004a1a:	e001      	b.n	8004a20 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2200      	movs	r2, #0
 8004a24:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004a2c:	7fbb      	ldrb	r3, [r7, #30]
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	3720      	adds	r7, #32
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}
 8004a36:	bf00      	nop
 8004a38:	efff69f3 	.word	0xefff69f3
 8004a3c:	40013800 	.word	0x40013800
 8004a40:	40021000 	.word	0x40021000
 8004a44:	40004400 	.word	0x40004400
 8004a48:	40004800 	.word	0x40004800
 8004a4c:	007a1200 	.word	0x007a1200

08004a50 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b083      	sub	sp, #12
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a5c:	f003 0308 	and.w	r3, r3, #8
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d00a      	beq.n	8004a7a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	430a      	orrs	r2, r1
 8004a78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a7e:	f003 0301 	and.w	r3, r3, #1
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d00a      	beq.n	8004a9c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	430a      	orrs	r2, r1
 8004a9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aa0:	f003 0302 	and.w	r3, r3, #2
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d00a      	beq.n	8004abe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	430a      	orrs	r2, r1
 8004abc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ac2:	f003 0304 	and.w	r3, r3, #4
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d00a      	beq.n	8004ae0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	430a      	orrs	r2, r1
 8004ade:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ae4:	f003 0310 	and.w	r3, r3, #16
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d00a      	beq.n	8004b02 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	430a      	orrs	r2, r1
 8004b00:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b06:	f003 0320 	and.w	r3, r3, #32
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d00a      	beq.n	8004b24 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	689b      	ldr	r3, [r3, #8]
 8004b14:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	430a      	orrs	r2, r1
 8004b22:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d01a      	beq.n	8004b66 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	430a      	orrs	r2, r1
 8004b44:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b4a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004b4e:	d10a      	bne.n	8004b66 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	430a      	orrs	r2, r1
 8004b64:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d00a      	beq.n	8004b88 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	430a      	orrs	r2, r1
 8004b86:	605a      	str	r2, [r3, #4]
  }
}
 8004b88:	bf00      	nop
 8004b8a:	370c      	adds	r7, #12
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr

08004b94 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b098      	sub	sp, #96	@ 0x60
 8004b98:	af02      	add	r7, sp, #8
 8004b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004ba4:	f7fc f8ac 	bl	8000d00 <HAL_GetTick>
 8004ba8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f003 0308 	and.w	r3, r3, #8
 8004bb4:	2b08      	cmp	r3, #8
 8004bb6:	d12e      	bne.n	8004c16 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004bb8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004bbc:	9300      	str	r3, [sp, #0]
 8004bbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f000 f88c 	bl	8004ce4 <UART_WaitOnFlagUntilTimeout>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d021      	beq.n	8004c16 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bda:	e853 3f00 	ldrex	r3, [r3]
 8004bde:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004be0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004be2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004be6:	653b      	str	r3, [r7, #80]	@ 0x50
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	461a      	mov	r2, r3
 8004bee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004bf0:	647b      	str	r3, [r7, #68]	@ 0x44
 8004bf2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bf4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004bf6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004bf8:	e841 2300 	strex	r3, r2, [r1]
 8004bfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004bfe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d1e6      	bne.n	8004bd2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2220      	movs	r2, #32
 8004c08:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c12:	2303      	movs	r3, #3
 8004c14:	e062      	b.n	8004cdc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f003 0304 	and.w	r3, r3, #4
 8004c20:	2b04      	cmp	r3, #4
 8004c22:	d149      	bne.n	8004cb8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c24:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004c28:	9300      	str	r3, [sp, #0]
 8004c2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f000 f856 	bl	8004ce4 <UART_WaitOnFlagUntilTimeout>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d03c      	beq.n	8004cb8 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c46:	e853 3f00 	ldrex	r3, [r3]
 8004c4a:	623b      	str	r3, [r7, #32]
   return(result);
 8004c4c:	6a3b      	ldr	r3, [r7, #32]
 8004c4e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004c52:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	461a      	mov	r2, r3
 8004c5a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c5c:	633b      	str	r3, [r7, #48]	@ 0x30
 8004c5e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c60:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004c62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c64:	e841 2300 	strex	r3, r2, [r1]
 8004c68:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004c6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d1e6      	bne.n	8004c3e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	3308      	adds	r3, #8
 8004c76:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	e853 3f00 	ldrex	r3, [r3]
 8004c7e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	f023 0301 	bic.w	r3, r3, #1
 8004c86:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	3308      	adds	r3, #8
 8004c8e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004c90:	61fa      	str	r2, [r7, #28]
 8004c92:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c94:	69b9      	ldr	r1, [r7, #24]
 8004c96:	69fa      	ldr	r2, [r7, #28]
 8004c98:	e841 2300 	strex	r3, r2, [r1]
 8004c9c:	617b      	str	r3, [r7, #20]
   return(result);
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d1e5      	bne.n	8004c70 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2220      	movs	r2, #32
 8004ca8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004cb4:	2303      	movs	r3, #3
 8004cb6:	e011      	b.n	8004cdc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2220      	movs	r2, #32
 8004cbc:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2220      	movs	r2, #32
 8004cc2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004cda:	2300      	movs	r3, #0
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	3758      	adds	r7, #88	@ 0x58
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bd80      	pop	{r7, pc}

08004ce4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b084      	sub	sp, #16
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	60f8      	str	r0, [r7, #12]
 8004cec:	60b9      	str	r1, [r7, #8]
 8004cee:	603b      	str	r3, [r7, #0]
 8004cf0:	4613      	mov	r3, r2
 8004cf2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cf4:	e04f      	b.n	8004d96 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cf6:	69bb      	ldr	r3, [r7, #24]
 8004cf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cfc:	d04b      	beq.n	8004d96 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cfe:	f7fb ffff 	bl	8000d00 <HAL_GetTick>
 8004d02:	4602      	mov	r2, r0
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	1ad3      	subs	r3, r2, r3
 8004d08:	69ba      	ldr	r2, [r7, #24]
 8004d0a:	429a      	cmp	r2, r3
 8004d0c:	d302      	bcc.n	8004d14 <UART_WaitOnFlagUntilTimeout+0x30>
 8004d0e:	69bb      	ldr	r3, [r7, #24]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d101      	bne.n	8004d18 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004d14:	2303      	movs	r3, #3
 8004d16:	e04e      	b.n	8004db6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f003 0304 	and.w	r3, r3, #4
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d037      	beq.n	8004d96 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	2b80      	cmp	r3, #128	@ 0x80
 8004d2a:	d034      	beq.n	8004d96 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	2b40      	cmp	r3, #64	@ 0x40
 8004d30:	d031      	beq.n	8004d96 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	69db      	ldr	r3, [r3, #28]
 8004d38:	f003 0308 	and.w	r3, r3, #8
 8004d3c:	2b08      	cmp	r3, #8
 8004d3e:	d110      	bne.n	8004d62 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	2208      	movs	r2, #8
 8004d46:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d48:	68f8      	ldr	r0, [r7, #12]
 8004d4a:	f000 f838 	bl	8004dbe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	2208      	movs	r2, #8
 8004d52:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	e029      	b.n	8004db6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	69db      	ldr	r3, [r3, #28]
 8004d68:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d6c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d70:	d111      	bne.n	8004d96 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004d7a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d7c:	68f8      	ldr	r0, [r7, #12]
 8004d7e:	f000 f81e 	bl	8004dbe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2220      	movs	r2, #32
 8004d86:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004d92:	2303      	movs	r3, #3
 8004d94:	e00f      	b.n	8004db6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	69da      	ldr	r2, [r3, #28]
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	4013      	ands	r3, r2
 8004da0:	68ba      	ldr	r2, [r7, #8]
 8004da2:	429a      	cmp	r2, r3
 8004da4:	bf0c      	ite	eq
 8004da6:	2301      	moveq	r3, #1
 8004da8:	2300      	movne	r3, #0
 8004daa:	b2db      	uxtb	r3, r3
 8004dac:	461a      	mov	r2, r3
 8004dae:	79fb      	ldrb	r3, [r7, #7]
 8004db0:	429a      	cmp	r2, r3
 8004db2:	d0a0      	beq.n	8004cf6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004db4:	2300      	movs	r3, #0
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	3710      	adds	r7, #16
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}

08004dbe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004dbe:	b480      	push	{r7}
 8004dc0:	b095      	sub	sp, #84	@ 0x54
 8004dc2:	af00      	add	r7, sp, #0
 8004dc4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004dce:	e853 3f00 	ldrex	r3, [r3]
 8004dd2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004dd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dd6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004dda:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	461a      	mov	r2, r3
 8004de2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004de4:	643b      	str	r3, [r7, #64]	@ 0x40
 8004de6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004de8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004dea:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004dec:	e841 2300 	strex	r3, r2, [r1]
 8004df0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004df2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d1e6      	bne.n	8004dc6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	3308      	adds	r3, #8
 8004dfe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e00:	6a3b      	ldr	r3, [r7, #32]
 8004e02:	e853 3f00 	ldrex	r3, [r3]
 8004e06:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e08:	69fb      	ldr	r3, [r7, #28]
 8004e0a:	f023 0301 	bic.w	r3, r3, #1
 8004e0e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	3308      	adds	r3, #8
 8004e16:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004e18:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004e1a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e1c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004e1e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004e20:	e841 2300 	strex	r3, r2, [r1]
 8004e24:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d1e5      	bne.n	8004df8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e30:	2b01      	cmp	r3, #1
 8004e32:	d118      	bne.n	8004e66 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	e853 3f00 	ldrex	r3, [r3]
 8004e40:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	f023 0310 	bic.w	r3, r3, #16
 8004e48:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	461a      	mov	r2, r3
 8004e50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004e52:	61bb      	str	r3, [r7, #24]
 8004e54:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e56:	6979      	ldr	r1, [r7, #20]
 8004e58:	69ba      	ldr	r2, [r7, #24]
 8004e5a:	e841 2300 	strex	r3, r2, [r1]
 8004e5e:	613b      	str	r3, [r7, #16]
   return(result);
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d1e6      	bne.n	8004e34 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2220      	movs	r2, #32
 8004e6a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2200      	movs	r2, #0
 8004e72:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2200      	movs	r2, #0
 8004e78:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004e7a:	bf00      	nop
 8004e7c:	3754      	adds	r7, #84	@ 0x54
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e84:	4770      	bx	lr

08004e86 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004e86:	b480      	push	{r7}
 8004e88:	b085      	sub	sp, #20
 8004e8a:	af00      	add	r7, sp, #0
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004e90:	2300      	movs	r3, #0
 8004e92:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004e94:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004e98:	2b84      	cmp	r3, #132	@ 0x84
 8004e9a:	d005      	beq.n	8004ea8 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004e9c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	4413      	add	r3, r2
 8004ea4:	3303      	adds	r3, #3
 8004ea6:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	3714      	adds	r7, #20
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb4:	4770      	bx	lr

08004eb6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004eb6:	b580      	push	{r7, lr}
 8004eb8:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004eba:	f000 fd99 	bl	80059f0 <vTaskStartScheduler>
  
  return osOK;
 8004ebe:	2300      	movs	r3, #0
}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	bd80      	pop	{r7, pc}

08004ec4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004ec4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ec6:	b089      	sub	sp, #36	@ 0x24
 8004ec8:	af04      	add	r7, sp, #16
 8004eca:	6078      	str	r0, [r7, #4]
 8004ecc:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	695b      	ldr	r3, [r3, #20]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d020      	beq.n	8004f18 <osThreadCreate+0x54>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	699b      	ldr	r3, [r3, #24]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d01c      	beq.n	8004f18 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	685c      	ldr	r4, [r3, #4]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	691e      	ldr	r6, [r3, #16]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	f7ff ffc8 	bl	8004e86 <makeFreeRtosPriority>
 8004ef6:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	695b      	ldr	r3, [r3, #20]
 8004efc:	687a      	ldr	r2, [r7, #4]
 8004efe:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004f00:	9202      	str	r2, [sp, #8]
 8004f02:	9301      	str	r3, [sp, #4]
 8004f04:	9100      	str	r1, [sp, #0]
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	4632      	mov	r2, r6
 8004f0a:	4629      	mov	r1, r5
 8004f0c:	4620      	mov	r0, r4
 8004f0e:	f000 fbab 	bl	8005668 <xTaskCreateStatic>
 8004f12:	4603      	mov	r3, r0
 8004f14:	60fb      	str	r3, [r7, #12]
 8004f16:	e01c      	b.n	8004f52 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	685c      	ldr	r4, [r3, #4]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004f24:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	f7ff ffaa 	bl	8004e86 <makeFreeRtosPriority>
 8004f32:	4602      	mov	r2, r0
 8004f34:	f107 030c 	add.w	r3, r7, #12
 8004f38:	9301      	str	r3, [sp, #4]
 8004f3a:	9200      	str	r2, [sp, #0]
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	4632      	mov	r2, r6
 8004f40:	4629      	mov	r1, r5
 8004f42:	4620      	mov	r0, r4
 8004f44:	f000 fbef 	bl	8005726 <xTaskCreate>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	2b01      	cmp	r3, #1
 8004f4c:	d001      	beq.n	8004f52 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	e000      	b.n	8004f54 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004f52:	68fb      	ldr	r3, [r7, #12]
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	3714      	adds	r7, #20
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004f5c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b084      	sub	sp, #16
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d001      	beq.n	8004f72 <osDelay+0x16>
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	e000      	b.n	8004f74 <osDelay+0x18>
 8004f72:	2301      	movs	r3, #1
 8004f74:	4618      	mov	r0, r3
 8004f76:	f000 fd05 	bl	8005984 <vTaskDelay>
  
  return osOK;
 8004f7a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	3710      	adds	r7, #16
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bd80      	pop	{r7, pc}

08004f84 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004f84:	b480      	push	{r7}
 8004f86:	b083      	sub	sp, #12
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	f103 0208 	add.w	r2, r3, #8
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	f04f 32ff 	mov.w	r2, #4294967295
 8004f9c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f103 0208 	add.w	r2, r3, #8
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	f103 0208 	add.w	r2, r3, #8
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004fb8:	bf00      	nop
 8004fba:	370c      	adds	r7, #12
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc2:	4770      	bx	lr

08004fc4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b083      	sub	sp, #12
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004fd2:	bf00      	nop
 8004fd4:	370c      	adds	r7, #12
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fdc:	4770      	bx	lr

08004fde <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004fde:	b480      	push	{r7}
 8004fe0:	b085      	sub	sp, #20
 8004fe2:	af00      	add	r7, sp, #0
 8004fe4:	6078      	str	r0, [r7, #4]
 8004fe6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	68fa      	ldr	r2, [r7, #12]
 8004ff2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	689a      	ldr	r2, [r3, #8]
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	689b      	ldr	r3, [r3, #8]
 8005000:	683a      	ldr	r2, [r7, #0]
 8005002:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	683a      	ldr	r2, [r7, #0]
 8005008:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	687a      	ldr	r2, [r7, #4]
 800500e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	1c5a      	adds	r2, r3, #1
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	601a      	str	r2, [r3, #0]
}
 800501a:	bf00      	nop
 800501c:	3714      	adds	r7, #20
 800501e:	46bd      	mov	sp, r7
 8005020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005024:	4770      	bx	lr

08005026 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005026:	b480      	push	{r7}
 8005028:	b085      	sub	sp, #20
 800502a:	af00      	add	r7, sp, #0
 800502c:	6078      	str	r0, [r7, #4]
 800502e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	f1b3 3fff 	cmp.w	r3, #4294967295
 800503c:	d103      	bne.n	8005046 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	691b      	ldr	r3, [r3, #16]
 8005042:	60fb      	str	r3, [r7, #12]
 8005044:	e00c      	b.n	8005060 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	3308      	adds	r3, #8
 800504a:	60fb      	str	r3, [r7, #12]
 800504c:	e002      	b.n	8005054 <vListInsert+0x2e>
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	60fb      	str	r3, [r7, #12]
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	68ba      	ldr	r2, [r7, #8]
 800505c:	429a      	cmp	r2, r3
 800505e:	d2f6      	bcs.n	800504e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	685a      	ldr	r2, [r3, #4]
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	683a      	ldr	r2, [r7, #0]
 800506e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	68fa      	ldr	r2, [r7, #12]
 8005074:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	683a      	ldr	r2, [r7, #0]
 800507a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	687a      	ldr	r2, [r7, #4]
 8005080:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	1c5a      	adds	r2, r3, #1
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	601a      	str	r2, [r3, #0]
}
 800508c:	bf00      	nop
 800508e:	3714      	adds	r7, #20
 8005090:	46bd      	mov	sp, r7
 8005092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005096:	4770      	bx	lr

08005098 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005098:	b480      	push	{r7}
 800509a:	b085      	sub	sp, #20
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	691b      	ldr	r3, [r3, #16]
 80050a4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	687a      	ldr	r2, [r7, #4]
 80050ac:	6892      	ldr	r2, [r2, #8]
 80050ae:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	687a      	ldr	r2, [r7, #4]
 80050b6:	6852      	ldr	r2, [r2, #4]
 80050b8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	687a      	ldr	r2, [r7, #4]
 80050c0:	429a      	cmp	r2, r3
 80050c2:	d103      	bne.n	80050cc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	689a      	ldr	r2, [r3, #8]
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2200      	movs	r2, #0
 80050d0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	1e5a      	subs	r2, r3, #1
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	3714      	adds	r7, #20
 80050e4:	46bd      	mov	sp, r7
 80050e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ea:	4770      	bx	lr

080050ec <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b084      	sub	sp, #16
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
 80050f4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d10b      	bne.n	8005118 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005100:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005104:	f383 8811 	msr	BASEPRI, r3
 8005108:	f3bf 8f6f 	isb	sy
 800510c:	f3bf 8f4f 	dsb	sy
 8005110:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005112:	bf00      	nop
 8005114:	bf00      	nop
 8005116:	e7fd      	b.n	8005114 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005118:	f001 f9ee 	bl	80064f8 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681a      	ldr	r2, [r3, #0]
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005124:	68f9      	ldr	r1, [r7, #12]
 8005126:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005128:	fb01 f303 	mul.w	r3, r1, r3
 800512c:	441a      	add	r2, r3
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	2200      	movs	r2, #0
 8005136:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681a      	ldr	r2, [r3, #0]
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005148:	3b01      	subs	r3, #1
 800514a:	68f9      	ldr	r1, [r7, #12]
 800514c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800514e:	fb01 f303 	mul.w	r3, r1, r3
 8005152:	441a      	add	r2, r3
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	22ff      	movs	r2, #255	@ 0xff
 800515c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	22ff      	movs	r2, #255	@ 0xff
 8005164:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d114      	bne.n	8005198 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	691b      	ldr	r3, [r3, #16]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d01a      	beq.n	80051ac <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	3310      	adds	r3, #16
 800517a:	4618      	mov	r0, r3
 800517c:	f000 fe60 	bl	8005e40 <xTaskRemoveFromEventList>
 8005180:	4603      	mov	r3, r0
 8005182:	2b00      	cmp	r3, #0
 8005184:	d012      	beq.n	80051ac <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005186:	4b0d      	ldr	r3, [pc, #52]	@ (80051bc <xQueueGenericReset+0xd0>)
 8005188:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800518c:	601a      	str	r2, [r3, #0]
 800518e:	f3bf 8f4f 	dsb	sy
 8005192:	f3bf 8f6f 	isb	sy
 8005196:	e009      	b.n	80051ac <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	3310      	adds	r3, #16
 800519c:	4618      	mov	r0, r3
 800519e:	f7ff fef1 	bl	8004f84 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	3324      	adds	r3, #36	@ 0x24
 80051a6:	4618      	mov	r0, r3
 80051a8:	f7ff feec 	bl	8004f84 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80051ac:	f001 f9d6 	bl	800655c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80051b0:	2301      	movs	r3, #1
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3710      	adds	r7, #16
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}
 80051ba:	bf00      	nop
 80051bc:	e000ed04 	.word	0xe000ed04

080051c0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b08a      	sub	sp, #40	@ 0x28
 80051c4:	af02      	add	r7, sp, #8
 80051c6:	60f8      	str	r0, [r7, #12]
 80051c8:	60b9      	str	r1, [r7, #8]
 80051ca:	4613      	mov	r3, r2
 80051cc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d10b      	bne.n	80051ec <xQueueGenericCreate+0x2c>
	__asm volatile
 80051d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051d8:	f383 8811 	msr	BASEPRI, r3
 80051dc:	f3bf 8f6f 	isb	sy
 80051e0:	f3bf 8f4f 	dsb	sy
 80051e4:	613b      	str	r3, [r7, #16]
}
 80051e6:	bf00      	nop
 80051e8:	bf00      	nop
 80051ea:	e7fd      	b.n	80051e8 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d102      	bne.n	80051f8 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80051f2:	2300      	movs	r3, #0
 80051f4:	61fb      	str	r3, [r7, #28]
 80051f6:	e004      	b.n	8005202 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	68ba      	ldr	r2, [r7, #8]
 80051fc:	fb02 f303 	mul.w	r3, r2, r3
 8005200:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8005202:	69fb      	ldr	r3, [r7, #28]
 8005204:	3348      	adds	r3, #72	@ 0x48
 8005206:	4618      	mov	r0, r3
 8005208:	f001 fa98 	bl	800673c <pvPortMalloc>
 800520c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800520e:	69bb      	ldr	r3, [r7, #24]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d00f      	beq.n	8005234 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8005214:	69bb      	ldr	r3, [r7, #24]
 8005216:	3348      	adds	r3, #72	@ 0x48
 8005218:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800521a:	69bb      	ldr	r3, [r7, #24]
 800521c:	2200      	movs	r2, #0
 800521e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005222:	79fa      	ldrb	r2, [r7, #7]
 8005224:	69bb      	ldr	r3, [r7, #24]
 8005226:	9300      	str	r3, [sp, #0]
 8005228:	4613      	mov	r3, r2
 800522a:	697a      	ldr	r2, [r7, #20]
 800522c:	68b9      	ldr	r1, [r7, #8]
 800522e:	68f8      	ldr	r0, [r7, #12]
 8005230:	f000 f805 	bl	800523e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005234:	69bb      	ldr	r3, [r7, #24]
	}
 8005236:	4618      	mov	r0, r3
 8005238:	3720      	adds	r7, #32
 800523a:	46bd      	mov	sp, r7
 800523c:	bd80      	pop	{r7, pc}

0800523e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800523e:	b580      	push	{r7, lr}
 8005240:	b084      	sub	sp, #16
 8005242:	af00      	add	r7, sp, #0
 8005244:	60f8      	str	r0, [r7, #12]
 8005246:	60b9      	str	r1, [r7, #8]
 8005248:	607a      	str	r2, [r7, #4]
 800524a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d103      	bne.n	800525a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005252:	69bb      	ldr	r3, [r7, #24]
 8005254:	69ba      	ldr	r2, [r7, #24]
 8005256:	601a      	str	r2, [r3, #0]
 8005258:	e002      	b.n	8005260 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800525a:	69bb      	ldr	r3, [r7, #24]
 800525c:	687a      	ldr	r2, [r7, #4]
 800525e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005260:	69bb      	ldr	r3, [r7, #24]
 8005262:	68fa      	ldr	r2, [r7, #12]
 8005264:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005266:	69bb      	ldr	r3, [r7, #24]
 8005268:	68ba      	ldr	r2, [r7, #8]
 800526a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800526c:	2101      	movs	r1, #1
 800526e:	69b8      	ldr	r0, [r7, #24]
 8005270:	f7ff ff3c 	bl	80050ec <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005274:	bf00      	nop
 8005276:	3710      	adds	r7, #16
 8005278:	46bd      	mov	sp, r7
 800527a:	bd80      	pop	{r7, pc}

0800527c <xQueueGenericSendFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b08e      	sub	sp, #56	@ 0x38
 8005280:	af00      	add	r7, sp, #0
 8005282:	60f8      	str	r0, [r7, #12]
 8005284:	60b9      	str	r1, [r7, #8]
 8005286:	607a      	str	r2, [r7, #4]
 8005288:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800528e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005290:	2b00      	cmp	r3, #0
 8005292:	d10b      	bne.n	80052ac <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8005294:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005298:	f383 8811 	msr	BASEPRI, r3
 800529c:	f3bf 8f6f 	isb	sy
 80052a0:	f3bf 8f4f 	dsb	sy
 80052a4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80052a6:	bf00      	nop
 80052a8:	bf00      	nop
 80052aa:	e7fd      	b.n	80052a8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d103      	bne.n	80052ba <xQueueGenericSendFromISR+0x3e>
 80052b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d101      	bne.n	80052be <xQueueGenericSendFromISR+0x42>
 80052ba:	2301      	movs	r3, #1
 80052bc:	e000      	b.n	80052c0 <xQueueGenericSendFromISR+0x44>
 80052be:	2300      	movs	r3, #0
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d10b      	bne.n	80052dc <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80052c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052c8:	f383 8811 	msr	BASEPRI, r3
 80052cc:	f3bf 8f6f 	isb	sy
 80052d0:	f3bf 8f4f 	dsb	sy
 80052d4:	623b      	str	r3, [r7, #32]
}
 80052d6:	bf00      	nop
 80052d8:	bf00      	nop
 80052da:	e7fd      	b.n	80052d8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	2b02      	cmp	r3, #2
 80052e0:	d103      	bne.n	80052ea <xQueueGenericSendFromISR+0x6e>
 80052e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052e6:	2b01      	cmp	r3, #1
 80052e8:	d101      	bne.n	80052ee <xQueueGenericSendFromISR+0x72>
 80052ea:	2301      	movs	r3, #1
 80052ec:	e000      	b.n	80052f0 <xQueueGenericSendFromISR+0x74>
 80052ee:	2300      	movs	r3, #0
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d10b      	bne.n	800530c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80052f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052f8:	f383 8811 	msr	BASEPRI, r3
 80052fc:	f3bf 8f6f 	isb	sy
 8005300:	f3bf 8f4f 	dsb	sy
 8005304:	61fb      	str	r3, [r7, #28]
}
 8005306:	bf00      	nop
 8005308:	bf00      	nop
 800530a:	e7fd      	b.n	8005308 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800530c:	f001 f9d4 	bl	80066b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005310:	f3ef 8211 	mrs	r2, BASEPRI
 8005314:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005318:	f383 8811 	msr	BASEPRI, r3
 800531c:	f3bf 8f6f 	isb	sy
 8005320:	f3bf 8f4f 	dsb	sy
 8005324:	61ba      	str	r2, [r7, #24]
 8005326:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005328:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800532a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800532c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800532e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005330:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005332:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005334:	429a      	cmp	r2, r3
 8005336:	d302      	bcc.n	800533e <xQueueGenericSendFromISR+0xc2>
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	2b02      	cmp	r3, #2
 800533c:	d12c      	bne.n	8005398 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800533e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005340:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005344:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005348:	683a      	ldr	r2, [r7, #0]
 800534a:	68b9      	ldr	r1, [r7, #8]
 800534c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800534e:	f000 f8d1 	bl	80054f4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005352:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8005356:	f1b3 3fff 	cmp.w	r3, #4294967295
 800535a:	d112      	bne.n	8005382 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800535c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800535e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005360:	2b00      	cmp	r3, #0
 8005362:	d016      	beq.n	8005392 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005364:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005366:	3324      	adds	r3, #36	@ 0x24
 8005368:	4618      	mov	r0, r3
 800536a:	f000 fd69 	bl	8005e40 <xTaskRemoveFromEventList>
 800536e:	4603      	mov	r3, r0
 8005370:	2b00      	cmp	r3, #0
 8005372:	d00e      	beq.n	8005392 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d00b      	beq.n	8005392 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2201      	movs	r2, #1
 800537e:	601a      	str	r2, [r3, #0]
 8005380:	e007      	b.n	8005392 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005382:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005386:	3301      	adds	r3, #1
 8005388:	b2db      	uxtb	r3, r3
 800538a:	b25a      	sxtb	r2, r3
 800538c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800538e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005392:	2301      	movs	r3, #1
 8005394:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8005396:	e001      	b.n	800539c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005398:	2300      	movs	r3, #0
 800539a:	637b      	str	r3, [r7, #52]	@ 0x34
 800539c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800539e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80053a6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80053a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	3738      	adds	r7, #56	@ 0x38
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}

080053b2 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80053b2:	b580      	push	{r7, lr}
 80053b4:	b08e      	sub	sp, #56	@ 0x38
 80053b6:	af00      	add	r7, sp, #0
 80053b8:	60f8      	str	r0, [r7, #12]
 80053ba:	60b9      	str	r1, [r7, #8]
 80053bc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80053c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d10b      	bne.n	80053e0 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 80053c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053cc:	f383 8811 	msr	BASEPRI, r3
 80053d0:	f3bf 8f6f 	isb	sy
 80053d4:	f3bf 8f4f 	dsb	sy
 80053d8:	623b      	str	r3, [r7, #32]
}
 80053da:	bf00      	nop
 80053dc:	bf00      	nop
 80053de:	e7fd      	b.n	80053dc <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d103      	bne.n	80053ee <xQueueReceiveFromISR+0x3c>
 80053e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d101      	bne.n	80053f2 <xQueueReceiveFromISR+0x40>
 80053ee:	2301      	movs	r3, #1
 80053f0:	e000      	b.n	80053f4 <xQueueReceiveFromISR+0x42>
 80053f2:	2300      	movs	r3, #0
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d10b      	bne.n	8005410 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 80053f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053fc:	f383 8811 	msr	BASEPRI, r3
 8005400:	f3bf 8f6f 	isb	sy
 8005404:	f3bf 8f4f 	dsb	sy
 8005408:	61fb      	str	r3, [r7, #28]
}
 800540a:	bf00      	nop
 800540c:	bf00      	nop
 800540e:	e7fd      	b.n	800540c <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005410:	f001 f952 	bl	80066b8 <vPortValidateInterruptPriority>
	__asm volatile
 8005414:	f3ef 8211 	mrs	r2, BASEPRI
 8005418:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800541c:	f383 8811 	msr	BASEPRI, r3
 8005420:	f3bf 8f6f 	isb	sy
 8005424:	f3bf 8f4f 	dsb	sy
 8005428:	61ba      	str	r2, [r7, #24]
 800542a:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800542c:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800542e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005430:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005432:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005434:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005436:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005438:	2b00      	cmp	r3, #0
 800543a:	d02f      	beq.n	800549c <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800543c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800543e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005442:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005446:	68b9      	ldr	r1, [r7, #8]
 8005448:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800544a:	f000 f8bd 	bl	80055c8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800544e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005450:	1e5a      	subs	r2, r3, #1
 8005452:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005454:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005456:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800545a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800545e:	d112      	bne.n	8005486 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005460:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005462:	691b      	ldr	r3, [r3, #16]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d016      	beq.n	8005496 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005468:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800546a:	3310      	adds	r3, #16
 800546c:	4618      	mov	r0, r3
 800546e:	f000 fce7 	bl	8005e40 <xTaskRemoveFromEventList>
 8005472:	4603      	mov	r3, r0
 8005474:	2b00      	cmp	r3, #0
 8005476:	d00e      	beq.n	8005496 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d00b      	beq.n	8005496 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2201      	movs	r2, #1
 8005482:	601a      	str	r2, [r3, #0]
 8005484:	e007      	b.n	8005496 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005486:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800548a:	3301      	adds	r3, #1
 800548c:	b2db      	uxtb	r3, r3
 800548e:	b25a      	sxtb	r2, r3
 8005490:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005492:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8005496:	2301      	movs	r3, #1
 8005498:	637b      	str	r3, [r7, #52]	@ 0x34
 800549a:	e001      	b.n	80054a0 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800549c:	2300      	movs	r3, #0
 800549e:	637b      	str	r3, [r7, #52]	@ 0x34
 80054a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054a2:	613b      	str	r3, [r7, #16]
	__asm volatile
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	f383 8811 	msr	BASEPRI, r3
}
 80054aa:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80054ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	3738      	adds	r7, #56	@ 0x38
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}

080054b6 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80054b6:	b580      	push	{r7, lr}
 80054b8:	b084      	sub	sp, #16
 80054ba:	af00      	add	r7, sp, #0
 80054bc:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d10b      	bne.n	80054dc <uxQueueMessagesWaiting+0x26>
	__asm volatile
 80054c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054c8:	f383 8811 	msr	BASEPRI, r3
 80054cc:	f3bf 8f6f 	isb	sy
 80054d0:	f3bf 8f4f 	dsb	sy
 80054d4:	60bb      	str	r3, [r7, #8]
}
 80054d6:	bf00      	nop
 80054d8:	bf00      	nop
 80054da:	e7fd      	b.n	80054d8 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 80054dc:	f001 f80c 	bl	80064f8 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054e4:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80054e6:	f001 f839 	bl	800655c <vPortExitCritical>

	return uxReturn;
 80054ea:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80054ec:	4618      	mov	r0, r3
 80054ee:	3710      	adds	r7, #16
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bd80      	pop	{r7, pc}

080054f4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b086      	sub	sp, #24
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	60f8      	str	r0, [r7, #12]
 80054fc:	60b9      	str	r1, [r7, #8]
 80054fe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005500:	2300      	movs	r3, #0
 8005502:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005508:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800550e:	2b00      	cmp	r3, #0
 8005510:	d10d      	bne.n	800552e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d14d      	bne.n	80055b6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	4618      	mov	r0, r3
 8005520:	f000 fdce 	bl	80060c0 <xTaskPriorityDisinherit>
 8005524:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2200      	movs	r2, #0
 800552a:	605a      	str	r2, [r3, #4]
 800552c:	e043      	b.n	80055b6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d119      	bne.n	8005568 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	6898      	ldr	r0, [r3, #8]
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800553c:	461a      	mov	r2, r3
 800553e:	68b9      	ldr	r1, [r7, #8]
 8005540:	f001 fb08 	bl	8006b54 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	689a      	ldr	r2, [r3, #8]
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800554c:	441a      	add	r2, r3
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	689a      	ldr	r2, [r3, #8]
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	429a      	cmp	r2, r3
 800555c:	d32b      	bcc.n	80055b6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681a      	ldr	r2, [r3, #0]
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	609a      	str	r2, [r3, #8]
 8005566:	e026      	b.n	80055b6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	68d8      	ldr	r0, [r3, #12]
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005570:	461a      	mov	r2, r3
 8005572:	68b9      	ldr	r1, [r7, #8]
 8005574:	f001 faee 	bl	8006b54 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	68da      	ldr	r2, [r3, #12]
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005580:	425b      	negs	r3, r3
 8005582:	441a      	add	r2, r3
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	68da      	ldr	r2, [r3, #12]
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	429a      	cmp	r2, r3
 8005592:	d207      	bcs.n	80055a4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	685a      	ldr	r2, [r3, #4]
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800559c:	425b      	negs	r3, r3
 800559e:	441a      	add	r2, r3
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2b02      	cmp	r3, #2
 80055a8:	d105      	bne.n	80055b6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d002      	beq.n	80055b6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80055b0:	693b      	ldr	r3, [r7, #16]
 80055b2:	3b01      	subs	r3, #1
 80055b4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	1c5a      	adds	r2, r3, #1
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80055be:	697b      	ldr	r3, [r7, #20]
}
 80055c0:	4618      	mov	r0, r3
 80055c2:	3718      	adds	r7, #24
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bd80      	pop	{r7, pc}

080055c8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b082      	sub	sp, #8
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
 80055d0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d018      	beq.n	800560c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	68da      	ldr	r2, [r3, #12]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055e2:	441a      	add	r2, r3
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	68da      	ldr	r2, [r3, #12]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	429a      	cmp	r2, r3
 80055f2:	d303      	bcc.n	80055fc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681a      	ldr	r2, [r3, #0]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	68d9      	ldr	r1, [r3, #12]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005604:	461a      	mov	r2, r3
 8005606:	6838      	ldr	r0, [r7, #0]
 8005608:	f001 faa4 	bl	8006b54 <memcpy>
	}
}
 800560c:	bf00      	nop
 800560e:	3708      	adds	r7, #8
 8005610:	46bd      	mov	sp, r7
 8005612:	bd80      	pop	{r7, pc}

08005614 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005614:	b480      	push	{r7}
 8005616:	b085      	sub	sp, #20
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
 800561c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800561e:	2300      	movs	r3, #0
 8005620:	60fb      	str	r3, [r7, #12]
 8005622:	e014      	b.n	800564e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005624:	4a0f      	ldr	r2, [pc, #60]	@ (8005664 <vQueueAddToRegistry+0x50>)
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d10b      	bne.n	8005648 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005630:	490c      	ldr	r1, [pc, #48]	@ (8005664 <vQueueAddToRegistry+0x50>)
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	683a      	ldr	r2, [r7, #0]
 8005636:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800563a:	4a0a      	ldr	r2, [pc, #40]	@ (8005664 <vQueueAddToRegistry+0x50>)
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	00db      	lsls	r3, r3, #3
 8005640:	4413      	add	r3, r2
 8005642:	687a      	ldr	r2, [r7, #4]
 8005644:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005646:	e006      	b.n	8005656 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	3301      	adds	r3, #1
 800564c:	60fb      	str	r3, [r7, #12]
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2b07      	cmp	r3, #7
 8005652:	d9e7      	bls.n	8005624 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005654:	bf00      	nop
 8005656:	bf00      	nop
 8005658:	3714      	adds	r7, #20
 800565a:	46bd      	mov	sp, r7
 800565c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005660:	4770      	bx	lr
 8005662:	bf00      	nop
 8005664:	20000464 	.word	0x20000464

08005668 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005668:	b580      	push	{r7, lr}
 800566a:	b08e      	sub	sp, #56	@ 0x38
 800566c:	af04      	add	r7, sp, #16
 800566e:	60f8      	str	r0, [r7, #12]
 8005670:	60b9      	str	r1, [r7, #8]
 8005672:	607a      	str	r2, [r7, #4]
 8005674:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005676:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005678:	2b00      	cmp	r3, #0
 800567a:	d10b      	bne.n	8005694 <xTaskCreateStatic+0x2c>
	__asm volatile
 800567c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005680:	f383 8811 	msr	BASEPRI, r3
 8005684:	f3bf 8f6f 	isb	sy
 8005688:	f3bf 8f4f 	dsb	sy
 800568c:	623b      	str	r3, [r7, #32]
}
 800568e:	bf00      	nop
 8005690:	bf00      	nop
 8005692:	e7fd      	b.n	8005690 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005694:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005696:	2b00      	cmp	r3, #0
 8005698:	d10b      	bne.n	80056b2 <xTaskCreateStatic+0x4a>
	__asm volatile
 800569a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800569e:	f383 8811 	msr	BASEPRI, r3
 80056a2:	f3bf 8f6f 	isb	sy
 80056a6:	f3bf 8f4f 	dsb	sy
 80056aa:	61fb      	str	r3, [r7, #28]
}
 80056ac:	bf00      	nop
 80056ae:	bf00      	nop
 80056b0:	e7fd      	b.n	80056ae <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80056b2:	2354      	movs	r3, #84	@ 0x54
 80056b4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	2b54      	cmp	r3, #84	@ 0x54
 80056ba:	d00b      	beq.n	80056d4 <xTaskCreateStatic+0x6c>
	__asm volatile
 80056bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056c0:	f383 8811 	msr	BASEPRI, r3
 80056c4:	f3bf 8f6f 	isb	sy
 80056c8:	f3bf 8f4f 	dsb	sy
 80056cc:	61bb      	str	r3, [r7, #24]
}
 80056ce:	bf00      	nop
 80056d0:	bf00      	nop
 80056d2:	e7fd      	b.n	80056d0 <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80056d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d01e      	beq.n	8005718 <xTaskCreateStatic+0xb0>
 80056da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d01b      	beq.n	8005718 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80056e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056e2:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80056e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056e6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80056e8:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80056ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056ec:	2202      	movs	r2, #2
 80056ee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80056f2:	2300      	movs	r3, #0
 80056f4:	9303      	str	r3, [sp, #12]
 80056f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056f8:	9302      	str	r3, [sp, #8]
 80056fa:	f107 0314 	add.w	r3, r7, #20
 80056fe:	9301      	str	r3, [sp, #4]
 8005700:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005702:	9300      	str	r3, [sp, #0]
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	687a      	ldr	r2, [r7, #4]
 8005708:	68b9      	ldr	r1, [r7, #8]
 800570a:	68f8      	ldr	r0, [r7, #12]
 800570c:	f000 f850 	bl	80057b0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005710:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005712:	f000 f8cd 	bl	80058b0 <prvAddNewTaskToReadyList>
 8005716:	e001      	b.n	800571c <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 8005718:	2300      	movs	r3, #0
 800571a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800571c:	697b      	ldr	r3, [r7, #20]
	}
 800571e:	4618      	mov	r0, r3
 8005720:	3728      	adds	r7, #40	@ 0x28
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}

08005726 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005726:	b580      	push	{r7, lr}
 8005728:	b08c      	sub	sp, #48	@ 0x30
 800572a:	af04      	add	r7, sp, #16
 800572c:	60f8      	str	r0, [r7, #12]
 800572e:	60b9      	str	r1, [r7, #8]
 8005730:	603b      	str	r3, [r7, #0]
 8005732:	4613      	mov	r3, r2
 8005734:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005736:	88fb      	ldrh	r3, [r7, #6]
 8005738:	009b      	lsls	r3, r3, #2
 800573a:	4618      	mov	r0, r3
 800573c:	f000 fffe 	bl	800673c <pvPortMalloc>
 8005740:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d00e      	beq.n	8005766 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005748:	2054      	movs	r0, #84	@ 0x54
 800574a:	f000 fff7 	bl	800673c <pvPortMalloc>
 800574e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005750:	69fb      	ldr	r3, [r7, #28]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d003      	beq.n	800575e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005756:	69fb      	ldr	r3, [r7, #28]
 8005758:	697a      	ldr	r2, [r7, #20]
 800575a:	631a      	str	r2, [r3, #48]	@ 0x30
 800575c:	e005      	b.n	800576a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800575e:	6978      	ldr	r0, [r7, #20]
 8005760:	f001 f8b4 	bl	80068cc <vPortFree>
 8005764:	e001      	b.n	800576a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005766:	2300      	movs	r3, #0
 8005768:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800576a:	69fb      	ldr	r3, [r7, #28]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d017      	beq.n	80057a0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005770:	69fb      	ldr	r3, [r7, #28]
 8005772:	2200      	movs	r2, #0
 8005774:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005778:	88fa      	ldrh	r2, [r7, #6]
 800577a:	2300      	movs	r3, #0
 800577c:	9303      	str	r3, [sp, #12]
 800577e:	69fb      	ldr	r3, [r7, #28]
 8005780:	9302      	str	r3, [sp, #8]
 8005782:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005784:	9301      	str	r3, [sp, #4]
 8005786:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005788:	9300      	str	r3, [sp, #0]
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	68b9      	ldr	r1, [r7, #8]
 800578e:	68f8      	ldr	r0, [r7, #12]
 8005790:	f000 f80e 	bl	80057b0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005794:	69f8      	ldr	r0, [r7, #28]
 8005796:	f000 f88b 	bl	80058b0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800579a:	2301      	movs	r3, #1
 800579c:	61bb      	str	r3, [r7, #24]
 800579e:	e002      	b.n	80057a6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80057a0:	f04f 33ff 	mov.w	r3, #4294967295
 80057a4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80057a6:	69bb      	ldr	r3, [r7, #24]
	}
 80057a8:	4618      	mov	r0, r3
 80057aa:	3720      	adds	r7, #32
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}

080057b0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b088      	sub	sp, #32
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	60f8      	str	r0, [r7, #12]
 80057b8:	60b9      	str	r1, [r7, #8]
 80057ba:	607a      	str	r2, [r7, #4]
 80057bc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80057be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057c0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80057c8:	3b01      	subs	r3, #1
 80057ca:	009b      	lsls	r3, r3, #2
 80057cc:	4413      	add	r3, r2
 80057ce:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80057d0:	69bb      	ldr	r3, [r7, #24]
 80057d2:	f023 0307 	bic.w	r3, r3, #7
 80057d6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80057d8:	69bb      	ldr	r3, [r7, #24]
 80057da:	f003 0307 	and.w	r3, r3, #7
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d00b      	beq.n	80057fa <prvInitialiseNewTask+0x4a>
	__asm volatile
 80057e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057e6:	f383 8811 	msr	BASEPRI, r3
 80057ea:	f3bf 8f6f 	isb	sy
 80057ee:	f3bf 8f4f 	dsb	sy
 80057f2:	617b      	str	r3, [r7, #20]
}
 80057f4:	bf00      	nop
 80057f6:	bf00      	nop
 80057f8:	e7fd      	b.n	80057f6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80057fa:	2300      	movs	r3, #0
 80057fc:	61fb      	str	r3, [r7, #28]
 80057fe:	e012      	b.n	8005826 <prvInitialiseNewTask+0x76>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005800:	68ba      	ldr	r2, [r7, #8]
 8005802:	69fb      	ldr	r3, [r7, #28]
 8005804:	4413      	add	r3, r2
 8005806:	7819      	ldrb	r1, [r3, #0]
 8005808:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800580a:	69fb      	ldr	r3, [r7, #28]
 800580c:	4413      	add	r3, r2
 800580e:	3334      	adds	r3, #52	@ 0x34
 8005810:	460a      	mov	r2, r1
 8005812:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005814:	68ba      	ldr	r2, [r7, #8]
 8005816:	69fb      	ldr	r3, [r7, #28]
 8005818:	4413      	add	r3, r2
 800581a:	781b      	ldrb	r3, [r3, #0]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d006      	beq.n	800582e <prvInitialiseNewTask+0x7e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005820:	69fb      	ldr	r3, [r7, #28]
 8005822:	3301      	adds	r3, #1
 8005824:	61fb      	str	r3, [r7, #28]
 8005826:	69fb      	ldr	r3, [r7, #28]
 8005828:	2b0f      	cmp	r3, #15
 800582a:	d9e9      	bls.n	8005800 <prvInitialiseNewTask+0x50>
 800582c:	e000      	b.n	8005830 <prvInitialiseNewTask+0x80>
		{
			break;
 800582e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005830:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005832:	2200      	movs	r2, #0
 8005834:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005838:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800583a:	2b06      	cmp	r3, #6
 800583c:	d901      	bls.n	8005842 <prvInitialiseNewTask+0x92>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800583e:	2306      	movs	r3, #6
 8005840:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005842:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005844:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005846:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005848:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800584a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800584c:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800584e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005850:	2200      	movs	r2, #0
 8005852:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005854:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005856:	3304      	adds	r3, #4
 8005858:	4618      	mov	r0, r3
 800585a:	f7ff fbb3 	bl	8004fc4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800585e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005860:	3318      	adds	r3, #24
 8005862:	4618      	mov	r0, r3
 8005864:	f7ff fbae 	bl	8004fc4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005868:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800586a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800586c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800586e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005870:	f1c3 0207 	rsb	r2, r3, #7
 8005874:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005876:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005878:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800587a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800587c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800587e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005880:	2200      	movs	r2, #0
 8005882:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005884:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005886:	2200      	movs	r2, #0
 8005888:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800588c:	683a      	ldr	r2, [r7, #0]
 800588e:	68f9      	ldr	r1, [r7, #12]
 8005890:	69b8      	ldr	r0, [r7, #24]
 8005892:	f000 fd03 	bl	800629c <pxPortInitialiseStack>
 8005896:	4602      	mov	r2, r0
 8005898:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800589a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800589c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d002      	beq.n	80058a8 <prvInitialiseNewTask+0xf8>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80058a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80058a6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80058a8:	bf00      	nop
 80058aa:	3720      	adds	r7, #32
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bd80      	pop	{r7, pc}

080058b0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b082      	sub	sp, #8
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80058b8:	f000 fe1e 	bl	80064f8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80058bc:	4b2a      	ldr	r3, [pc, #168]	@ (8005968 <prvAddNewTaskToReadyList+0xb8>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	3301      	adds	r3, #1
 80058c2:	4a29      	ldr	r2, [pc, #164]	@ (8005968 <prvAddNewTaskToReadyList+0xb8>)
 80058c4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80058c6:	4b29      	ldr	r3, [pc, #164]	@ (800596c <prvAddNewTaskToReadyList+0xbc>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d109      	bne.n	80058e2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80058ce:	4a27      	ldr	r2, [pc, #156]	@ (800596c <prvAddNewTaskToReadyList+0xbc>)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80058d4:	4b24      	ldr	r3, [pc, #144]	@ (8005968 <prvAddNewTaskToReadyList+0xb8>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	2b01      	cmp	r3, #1
 80058da:	d110      	bne.n	80058fe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80058dc:	f000 fb2c 	bl	8005f38 <prvInitialiseTaskLists>
 80058e0:	e00d      	b.n	80058fe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80058e2:	4b23      	ldr	r3, [pc, #140]	@ (8005970 <prvAddNewTaskToReadyList+0xc0>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d109      	bne.n	80058fe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80058ea:	4b20      	ldr	r3, [pc, #128]	@ (800596c <prvAddNewTaskToReadyList+0xbc>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058f4:	429a      	cmp	r2, r3
 80058f6:	d802      	bhi.n	80058fe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80058f8:	4a1c      	ldr	r2, [pc, #112]	@ (800596c <prvAddNewTaskToReadyList+0xbc>)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80058fe:	4b1d      	ldr	r3, [pc, #116]	@ (8005974 <prvAddNewTaskToReadyList+0xc4>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	3301      	adds	r3, #1
 8005904:	4a1b      	ldr	r2, [pc, #108]	@ (8005974 <prvAddNewTaskToReadyList+0xc4>)
 8005906:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800590c:	2201      	movs	r2, #1
 800590e:	409a      	lsls	r2, r3
 8005910:	4b19      	ldr	r3, [pc, #100]	@ (8005978 <prvAddNewTaskToReadyList+0xc8>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4313      	orrs	r3, r2
 8005916:	4a18      	ldr	r2, [pc, #96]	@ (8005978 <prvAddNewTaskToReadyList+0xc8>)
 8005918:	6013      	str	r3, [r2, #0]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800591e:	4613      	mov	r3, r2
 8005920:	009b      	lsls	r3, r3, #2
 8005922:	4413      	add	r3, r2
 8005924:	009b      	lsls	r3, r3, #2
 8005926:	4a15      	ldr	r2, [pc, #84]	@ (800597c <prvAddNewTaskToReadyList+0xcc>)
 8005928:	441a      	add	r2, r3
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	3304      	adds	r3, #4
 800592e:	4619      	mov	r1, r3
 8005930:	4610      	mov	r0, r2
 8005932:	f7ff fb54 	bl	8004fde <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005936:	f000 fe11 	bl	800655c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800593a:	4b0d      	ldr	r3, [pc, #52]	@ (8005970 <prvAddNewTaskToReadyList+0xc0>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d00e      	beq.n	8005960 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005942:	4b0a      	ldr	r3, [pc, #40]	@ (800596c <prvAddNewTaskToReadyList+0xbc>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800594c:	429a      	cmp	r2, r3
 800594e:	d207      	bcs.n	8005960 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005950:	4b0b      	ldr	r3, [pc, #44]	@ (8005980 <prvAddNewTaskToReadyList+0xd0>)
 8005952:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005956:	601a      	str	r2, [r3, #0]
 8005958:	f3bf 8f4f 	dsb	sy
 800595c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005960:	bf00      	nop
 8005962:	3708      	adds	r7, #8
 8005964:	46bd      	mov	sp, r7
 8005966:	bd80      	pop	{r7, pc}
 8005968:	200005a4 	.word	0x200005a4
 800596c:	200004a4 	.word	0x200004a4
 8005970:	200005b0 	.word	0x200005b0
 8005974:	200005c0 	.word	0x200005c0
 8005978:	200005ac 	.word	0x200005ac
 800597c:	200004a8 	.word	0x200004a8
 8005980:	e000ed04 	.word	0xe000ed04

08005984 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005984:	b580      	push	{r7, lr}
 8005986:	b084      	sub	sp, #16
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800598c:	2300      	movs	r3, #0
 800598e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d018      	beq.n	80059c8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005996:	4b14      	ldr	r3, [pc, #80]	@ (80059e8 <vTaskDelay+0x64>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d00b      	beq.n	80059b6 <vTaskDelay+0x32>
	__asm volatile
 800599e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059a2:	f383 8811 	msr	BASEPRI, r3
 80059a6:	f3bf 8f6f 	isb	sy
 80059aa:	f3bf 8f4f 	dsb	sy
 80059ae:	60bb      	str	r3, [r7, #8]
}
 80059b0:	bf00      	nop
 80059b2:	bf00      	nop
 80059b4:	e7fd      	b.n	80059b2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80059b6:	f000 f87d 	bl	8005ab4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80059ba:	2100      	movs	r1, #0
 80059bc:	6878      	ldr	r0, [r7, #4]
 80059be:	f000 fc07 	bl	80061d0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80059c2:	f000 f885 	bl	8005ad0 <xTaskResumeAll>
 80059c6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d107      	bne.n	80059de <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80059ce:	4b07      	ldr	r3, [pc, #28]	@ (80059ec <vTaskDelay+0x68>)
 80059d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80059d4:	601a      	str	r2, [r3, #0]
 80059d6:	f3bf 8f4f 	dsb	sy
 80059da:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80059de:	bf00      	nop
 80059e0:	3710      	adds	r7, #16
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}
 80059e6:	bf00      	nop
 80059e8:	200005cc 	.word	0x200005cc
 80059ec:	e000ed04 	.word	0xe000ed04

080059f0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b08a      	sub	sp, #40	@ 0x28
 80059f4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80059f6:	2300      	movs	r3, #0
 80059f8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80059fa:	2300      	movs	r3, #0
 80059fc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80059fe:	463a      	mov	r2, r7
 8005a00:	1d39      	adds	r1, r7, #4
 8005a02:	f107 0308 	add.w	r3, r7, #8
 8005a06:	4618      	mov	r0, r3
 8005a08:	f7fa fcba 	bl	8000380 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005a0c:	6839      	ldr	r1, [r7, #0]
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	68ba      	ldr	r2, [r7, #8]
 8005a12:	9202      	str	r2, [sp, #8]
 8005a14:	9301      	str	r3, [sp, #4]
 8005a16:	2300      	movs	r3, #0
 8005a18:	9300      	str	r3, [sp, #0]
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	460a      	mov	r2, r1
 8005a1e:	491f      	ldr	r1, [pc, #124]	@ (8005a9c <vTaskStartScheduler+0xac>)
 8005a20:	481f      	ldr	r0, [pc, #124]	@ (8005aa0 <vTaskStartScheduler+0xb0>)
 8005a22:	f7ff fe21 	bl	8005668 <xTaskCreateStatic>
 8005a26:	4603      	mov	r3, r0
 8005a28:	4a1e      	ldr	r2, [pc, #120]	@ (8005aa4 <vTaskStartScheduler+0xb4>)
 8005a2a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005a2c:	4b1d      	ldr	r3, [pc, #116]	@ (8005aa4 <vTaskStartScheduler+0xb4>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d002      	beq.n	8005a3a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005a34:	2301      	movs	r3, #1
 8005a36:	617b      	str	r3, [r7, #20]
 8005a38:	e001      	b.n	8005a3e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005a3e:	697b      	ldr	r3, [r7, #20]
 8005a40:	2b01      	cmp	r3, #1
 8005a42:	d116      	bne.n	8005a72 <vTaskStartScheduler+0x82>
	__asm volatile
 8005a44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a48:	f383 8811 	msr	BASEPRI, r3
 8005a4c:	f3bf 8f6f 	isb	sy
 8005a50:	f3bf 8f4f 	dsb	sy
 8005a54:	613b      	str	r3, [r7, #16]
}
 8005a56:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005a58:	4b13      	ldr	r3, [pc, #76]	@ (8005aa8 <vTaskStartScheduler+0xb8>)
 8005a5a:	f04f 32ff 	mov.w	r2, #4294967295
 8005a5e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005a60:	4b12      	ldr	r3, [pc, #72]	@ (8005aac <vTaskStartScheduler+0xbc>)
 8005a62:	2201      	movs	r2, #1
 8005a64:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005a66:	4b12      	ldr	r3, [pc, #72]	@ (8005ab0 <vTaskStartScheduler+0xc0>)
 8005a68:	2200      	movs	r2, #0
 8005a6a:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005a6c:	f000 fca0 	bl	80063b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005a70:	e00f      	b.n	8005a92 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a78:	d10b      	bne.n	8005a92 <vTaskStartScheduler+0xa2>
	__asm volatile
 8005a7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a7e:	f383 8811 	msr	BASEPRI, r3
 8005a82:	f3bf 8f6f 	isb	sy
 8005a86:	f3bf 8f4f 	dsb	sy
 8005a8a:	60fb      	str	r3, [r7, #12]
}
 8005a8c:	bf00      	nop
 8005a8e:	bf00      	nop
 8005a90:	e7fd      	b.n	8005a8e <vTaskStartScheduler+0x9e>
}
 8005a92:	bf00      	nop
 8005a94:	3718      	adds	r7, #24
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}
 8005a9a:	bf00      	nop
 8005a9c:	08006c08 	.word	0x08006c08
 8005aa0:	08005f09 	.word	0x08005f09
 8005aa4:	200005c8 	.word	0x200005c8
 8005aa8:	200005c4 	.word	0x200005c4
 8005aac:	200005b0 	.word	0x200005b0
 8005ab0:	200005a8 	.word	0x200005a8

08005ab4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005ab8:	4b04      	ldr	r3, [pc, #16]	@ (8005acc <vTaskSuspendAll+0x18>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	3301      	adds	r3, #1
 8005abe:	4a03      	ldr	r2, [pc, #12]	@ (8005acc <vTaskSuspendAll+0x18>)
 8005ac0:	6013      	str	r3, [r2, #0]
}
 8005ac2:	bf00      	nop
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aca:	4770      	bx	lr
 8005acc:	200005cc 	.word	0x200005cc

08005ad0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b084      	sub	sp, #16
 8005ad4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005ada:	2300      	movs	r3, #0
 8005adc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005ade:	4b42      	ldr	r3, [pc, #264]	@ (8005be8 <xTaskResumeAll+0x118>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d10b      	bne.n	8005afe <xTaskResumeAll+0x2e>
	__asm volatile
 8005ae6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005aea:	f383 8811 	msr	BASEPRI, r3
 8005aee:	f3bf 8f6f 	isb	sy
 8005af2:	f3bf 8f4f 	dsb	sy
 8005af6:	603b      	str	r3, [r7, #0]
}
 8005af8:	bf00      	nop
 8005afa:	bf00      	nop
 8005afc:	e7fd      	b.n	8005afa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005afe:	f000 fcfb 	bl	80064f8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005b02:	4b39      	ldr	r3, [pc, #228]	@ (8005be8 <xTaskResumeAll+0x118>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	3b01      	subs	r3, #1
 8005b08:	4a37      	ldr	r2, [pc, #220]	@ (8005be8 <xTaskResumeAll+0x118>)
 8005b0a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b0c:	4b36      	ldr	r3, [pc, #216]	@ (8005be8 <xTaskResumeAll+0x118>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d161      	bne.n	8005bd8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005b14:	4b35      	ldr	r3, [pc, #212]	@ (8005bec <xTaskResumeAll+0x11c>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d05d      	beq.n	8005bd8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005b1c:	e02e      	b.n	8005b7c <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005b1e:	4b34      	ldr	r3, [pc, #208]	@ (8005bf0 <xTaskResumeAll+0x120>)
 8005b20:	68db      	ldr	r3, [r3, #12]
 8005b22:	68db      	ldr	r3, [r3, #12]
 8005b24:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	3318      	adds	r3, #24
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	f7ff fab4 	bl	8005098 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	3304      	adds	r3, #4
 8005b34:	4618      	mov	r0, r3
 8005b36:	f7ff faaf 	bl	8005098 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b3e:	2201      	movs	r2, #1
 8005b40:	409a      	lsls	r2, r3
 8005b42:	4b2c      	ldr	r3, [pc, #176]	@ (8005bf4 <xTaskResumeAll+0x124>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4313      	orrs	r3, r2
 8005b48:	4a2a      	ldr	r2, [pc, #168]	@ (8005bf4 <xTaskResumeAll+0x124>)
 8005b4a:	6013      	str	r3, [r2, #0]
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b50:	4613      	mov	r3, r2
 8005b52:	009b      	lsls	r3, r3, #2
 8005b54:	4413      	add	r3, r2
 8005b56:	009b      	lsls	r3, r3, #2
 8005b58:	4a27      	ldr	r2, [pc, #156]	@ (8005bf8 <xTaskResumeAll+0x128>)
 8005b5a:	441a      	add	r2, r3
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	3304      	adds	r3, #4
 8005b60:	4619      	mov	r1, r3
 8005b62:	4610      	mov	r0, r2
 8005b64:	f7ff fa3b 	bl	8004fde <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b6c:	4b23      	ldr	r3, [pc, #140]	@ (8005bfc <xTaskResumeAll+0x12c>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b72:	429a      	cmp	r2, r3
 8005b74:	d302      	bcc.n	8005b7c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005b76:	4b22      	ldr	r3, [pc, #136]	@ (8005c00 <xTaskResumeAll+0x130>)
 8005b78:	2201      	movs	r2, #1
 8005b7a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005b7c:	4b1c      	ldr	r3, [pc, #112]	@ (8005bf0 <xTaskResumeAll+0x120>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d1cc      	bne.n	8005b1e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d001      	beq.n	8005b8e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005b8a:	f000 fa73 	bl	8006074 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005b8e:	4b1d      	ldr	r3, [pc, #116]	@ (8005c04 <xTaskResumeAll+0x134>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d010      	beq.n	8005bbc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005b9a:	f000 f837 	bl	8005c0c <xTaskIncrementTick>
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d002      	beq.n	8005baa <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005ba4:	4b16      	ldr	r3, [pc, #88]	@ (8005c00 <xTaskResumeAll+0x130>)
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	3b01      	subs	r3, #1
 8005bae:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d1f1      	bne.n	8005b9a <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8005bb6:	4b13      	ldr	r3, [pc, #76]	@ (8005c04 <xTaskResumeAll+0x134>)
 8005bb8:	2200      	movs	r2, #0
 8005bba:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005bbc:	4b10      	ldr	r3, [pc, #64]	@ (8005c00 <xTaskResumeAll+0x130>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d009      	beq.n	8005bd8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005bc8:	4b0f      	ldr	r3, [pc, #60]	@ (8005c08 <xTaskResumeAll+0x138>)
 8005bca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005bce:	601a      	str	r2, [r3, #0]
 8005bd0:	f3bf 8f4f 	dsb	sy
 8005bd4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005bd8:	f000 fcc0 	bl	800655c <vPortExitCritical>

	return xAlreadyYielded;
 8005bdc:	68bb      	ldr	r3, [r7, #8]
}
 8005bde:	4618      	mov	r0, r3
 8005be0:	3710      	adds	r7, #16
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd80      	pop	{r7, pc}
 8005be6:	bf00      	nop
 8005be8:	200005cc 	.word	0x200005cc
 8005bec:	200005a4 	.word	0x200005a4
 8005bf0:	20000564 	.word	0x20000564
 8005bf4:	200005ac 	.word	0x200005ac
 8005bf8:	200004a8 	.word	0x200004a8
 8005bfc:	200004a4 	.word	0x200004a4
 8005c00:	200005b8 	.word	0x200005b8
 8005c04:	200005b4 	.word	0x200005b4
 8005c08:	e000ed04 	.word	0xe000ed04

08005c0c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b086      	sub	sp, #24
 8005c10:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005c12:	2300      	movs	r3, #0
 8005c14:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c16:	4b51      	ldr	r3, [pc, #324]	@ (8005d5c <xTaskIncrementTick+0x150>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	f040 808e 	bne.w	8005d3c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005c20:	4b4f      	ldr	r3, [pc, #316]	@ (8005d60 <xTaskIncrementTick+0x154>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	3301      	adds	r3, #1
 8005c26:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005c28:	4a4d      	ldr	r2, [pc, #308]	@ (8005d60 <xTaskIncrementTick+0x154>)
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d121      	bne.n	8005c78 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005c34:	4b4b      	ldr	r3, [pc, #300]	@ (8005d64 <xTaskIncrementTick+0x158>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d00b      	beq.n	8005c56 <xTaskIncrementTick+0x4a>
	__asm volatile
 8005c3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c42:	f383 8811 	msr	BASEPRI, r3
 8005c46:	f3bf 8f6f 	isb	sy
 8005c4a:	f3bf 8f4f 	dsb	sy
 8005c4e:	603b      	str	r3, [r7, #0]
}
 8005c50:	bf00      	nop
 8005c52:	bf00      	nop
 8005c54:	e7fd      	b.n	8005c52 <xTaskIncrementTick+0x46>
 8005c56:	4b43      	ldr	r3, [pc, #268]	@ (8005d64 <xTaskIncrementTick+0x158>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	60fb      	str	r3, [r7, #12]
 8005c5c:	4b42      	ldr	r3, [pc, #264]	@ (8005d68 <xTaskIncrementTick+0x15c>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a40      	ldr	r2, [pc, #256]	@ (8005d64 <xTaskIncrementTick+0x158>)
 8005c62:	6013      	str	r3, [r2, #0]
 8005c64:	4a40      	ldr	r2, [pc, #256]	@ (8005d68 <xTaskIncrementTick+0x15c>)
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	6013      	str	r3, [r2, #0]
 8005c6a:	4b40      	ldr	r3, [pc, #256]	@ (8005d6c <xTaskIncrementTick+0x160>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	3301      	adds	r3, #1
 8005c70:	4a3e      	ldr	r2, [pc, #248]	@ (8005d6c <xTaskIncrementTick+0x160>)
 8005c72:	6013      	str	r3, [r2, #0]
 8005c74:	f000 f9fe 	bl	8006074 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005c78:	4b3d      	ldr	r3, [pc, #244]	@ (8005d70 <xTaskIncrementTick+0x164>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	693a      	ldr	r2, [r7, #16]
 8005c7e:	429a      	cmp	r2, r3
 8005c80:	d34d      	bcc.n	8005d1e <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005c82:	4b38      	ldr	r3, [pc, #224]	@ (8005d64 <xTaskIncrementTick+0x158>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d101      	bne.n	8005c90 <xTaskIncrementTick+0x84>
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	e000      	b.n	8005c92 <xTaskIncrementTick+0x86>
 8005c90:	2300      	movs	r3, #0
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d004      	beq.n	8005ca0 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c96:	4b36      	ldr	r3, [pc, #216]	@ (8005d70 <xTaskIncrementTick+0x164>)
 8005c98:	f04f 32ff 	mov.w	r2, #4294967295
 8005c9c:	601a      	str	r2, [r3, #0]
					break;
 8005c9e:	e03e      	b.n	8005d1e <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005ca0:	4b30      	ldr	r3, [pc, #192]	@ (8005d64 <xTaskIncrementTick+0x158>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	68db      	ldr	r3, [r3, #12]
 8005ca6:	68db      	ldr	r3, [r3, #12]
 8005ca8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	685b      	ldr	r3, [r3, #4]
 8005cae:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005cb0:	693a      	ldr	r2, [r7, #16]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	429a      	cmp	r2, r3
 8005cb6:	d203      	bcs.n	8005cc0 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005cb8:	4a2d      	ldr	r2, [pc, #180]	@ (8005d70 <xTaskIncrementTick+0x164>)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6013      	str	r3, [r2, #0]
						break;
 8005cbe:	e02e      	b.n	8005d1e <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	3304      	adds	r3, #4
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	f7ff f9e7 	bl	8005098 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d004      	beq.n	8005cdc <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	3318      	adds	r3, #24
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	f7ff f9de 	bl	8005098 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ce0:	2201      	movs	r2, #1
 8005ce2:	409a      	lsls	r2, r3
 8005ce4:	4b23      	ldr	r3, [pc, #140]	@ (8005d74 <xTaskIncrementTick+0x168>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	4a22      	ldr	r2, [pc, #136]	@ (8005d74 <xTaskIncrementTick+0x168>)
 8005cec:	6013      	str	r3, [r2, #0]
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cf2:	4613      	mov	r3, r2
 8005cf4:	009b      	lsls	r3, r3, #2
 8005cf6:	4413      	add	r3, r2
 8005cf8:	009b      	lsls	r3, r3, #2
 8005cfa:	4a1f      	ldr	r2, [pc, #124]	@ (8005d78 <xTaskIncrementTick+0x16c>)
 8005cfc:	441a      	add	r2, r3
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	3304      	adds	r3, #4
 8005d02:	4619      	mov	r1, r3
 8005d04:	4610      	mov	r0, r2
 8005d06:	f7ff f96a 	bl	8004fde <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d0e:	4b1b      	ldr	r3, [pc, #108]	@ (8005d7c <xTaskIncrementTick+0x170>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d14:	429a      	cmp	r2, r3
 8005d16:	d3b4      	bcc.n	8005c82 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005d18:	2301      	movs	r3, #1
 8005d1a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d1c:	e7b1      	b.n	8005c82 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005d1e:	4b17      	ldr	r3, [pc, #92]	@ (8005d7c <xTaskIncrementTick+0x170>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d24:	4914      	ldr	r1, [pc, #80]	@ (8005d78 <xTaskIncrementTick+0x16c>)
 8005d26:	4613      	mov	r3, r2
 8005d28:	009b      	lsls	r3, r3, #2
 8005d2a:	4413      	add	r3, r2
 8005d2c:	009b      	lsls	r3, r3, #2
 8005d2e:	440b      	add	r3, r1
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	2b01      	cmp	r3, #1
 8005d34:	d907      	bls.n	8005d46 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8005d36:	2301      	movs	r3, #1
 8005d38:	617b      	str	r3, [r7, #20]
 8005d3a:	e004      	b.n	8005d46 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005d3c:	4b10      	ldr	r3, [pc, #64]	@ (8005d80 <xTaskIncrementTick+0x174>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	3301      	adds	r3, #1
 8005d42:	4a0f      	ldr	r2, [pc, #60]	@ (8005d80 <xTaskIncrementTick+0x174>)
 8005d44:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005d46:	4b0f      	ldr	r3, [pc, #60]	@ (8005d84 <xTaskIncrementTick+0x178>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d001      	beq.n	8005d52 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8005d4e:	2301      	movs	r3, #1
 8005d50:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005d52:	697b      	ldr	r3, [r7, #20]
}
 8005d54:	4618      	mov	r0, r3
 8005d56:	3718      	adds	r7, #24
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	bd80      	pop	{r7, pc}
 8005d5c:	200005cc 	.word	0x200005cc
 8005d60:	200005a8 	.word	0x200005a8
 8005d64:	2000055c 	.word	0x2000055c
 8005d68:	20000560 	.word	0x20000560
 8005d6c:	200005bc 	.word	0x200005bc
 8005d70:	200005c4 	.word	0x200005c4
 8005d74:	200005ac 	.word	0x200005ac
 8005d78:	200004a8 	.word	0x200004a8
 8005d7c:	200004a4 	.word	0x200004a4
 8005d80:	200005b4 	.word	0x200005b4
 8005d84:	200005b8 	.word	0x200005b8

08005d88 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b087      	sub	sp, #28
 8005d8c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005d8e:	4b27      	ldr	r3, [pc, #156]	@ (8005e2c <vTaskSwitchContext+0xa4>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d003      	beq.n	8005d9e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005d96:	4b26      	ldr	r3, [pc, #152]	@ (8005e30 <vTaskSwitchContext+0xa8>)
 8005d98:	2201      	movs	r2, #1
 8005d9a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005d9c:	e040      	b.n	8005e20 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8005d9e:	4b24      	ldr	r3, [pc, #144]	@ (8005e30 <vTaskSwitchContext+0xa8>)
 8005da0:	2200      	movs	r2, #0
 8005da2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005da4:	4b23      	ldr	r3, [pc, #140]	@ (8005e34 <vTaskSwitchContext+0xac>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	fab3 f383 	clz	r3, r3
 8005db0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005db2:	7afb      	ldrb	r3, [r7, #11]
 8005db4:	f1c3 031f 	rsb	r3, r3, #31
 8005db8:	617b      	str	r3, [r7, #20]
 8005dba:	491f      	ldr	r1, [pc, #124]	@ (8005e38 <vTaskSwitchContext+0xb0>)
 8005dbc:	697a      	ldr	r2, [r7, #20]
 8005dbe:	4613      	mov	r3, r2
 8005dc0:	009b      	lsls	r3, r3, #2
 8005dc2:	4413      	add	r3, r2
 8005dc4:	009b      	lsls	r3, r3, #2
 8005dc6:	440b      	add	r3, r1
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d10b      	bne.n	8005de6 <vTaskSwitchContext+0x5e>
	__asm volatile
 8005dce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dd2:	f383 8811 	msr	BASEPRI, r3
 8005dd6:	f3bf 8f6f 	isb	sy
 8005dda:	f3bf 8f4f 	dsb	sy
 8005dde:	607b      	str	r3, [r7, #4]
}
 8005de0:	bf00      	nop
 8005de2:	bf00      	nop
 8005de4:	e7fd      	b.n	8005de2 <vTaskSwitchContext+0x5a>
 8005de6:	697a      	ldr	r2, [r7, #20]
 8005de8:	4613      	mov	r3, r2
 8005dea:	009b      	lsls	r3, r3, #2
 8005dec:	4413      	add	r3, r2
 8005dee:	009b      	lsls	r3, r3, #2
 8005df0:	4a11      	ldr	r2, [pc, #68]	@ (8005e38 <vTaskSwitchContext+0xb0>)
 8005df2:	4413      	add	r3, r2
 8005df4:	613b      	str	r3, [r7, #16]
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	685b      	ldr	r3, [r3, #4]
 8005dfa:	685a      	ldr	r2, [r3, #4]
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	605a      	str	r2, [r3, #4]
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	685a      	ldr	r2, [r3, #4]
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	3308      	adds	r3, #8
 8005e08:	429a      	cmp	r2, r3
 8005e0a:	d104      	bne.n	8005e16 <vTaskSwitchContext+0x8e>
 8005e0c:	693b      	ldr	r3, [r7, #16]
 8005e0e:	685b      	ldr	r3, [r3, #4]
 8005e10:	685a      	ldr	r2, [r3, #4]
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	605a      	str	r2, [r3, #4]
 8005e16:	693b      	ldr	r3, [r7, #16]
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	68db      	ldr	r3, [r3, #12]
 8005e1c:	4a07      	ldr	r2, [pc, #28]	@ (8005e3c <vTaskSwitchContext+0xb4>)
 8005e1e:	6013      	str	r3, [r2, #0]
}
 8005e20:	bf00      	nop
 8005e22:	371c      	adds	r7, #28
 8005e24:	46bd      	mov	sp, r7
 8005e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2a:	4770      	bx	lr
 8005e2c:	200005cc 	.word	0x200005cc
 8005e30:	200005b8 	.word	0x200005b8
 8005e34:	200005ac 	.word	0x200005ac
 8005e38:	200004a8 	.word	0x200004a8
 8005e3c:	200004a4 	.word	0x200004a4

08005e40 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b086      	sub	sp, #24
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	68db      	ldr	r3, [r3, #12]
 8005e4c:	68db      	ldr	r3, [r3, #12]
 8005e4e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005e50:	693b      	ldr	r3, [r7, #16]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d10b      	bne.n	8005e6e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8005e56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e5a:	f383 8811 	msr	BASEPRI, r3
 8005e5e:	f3bf 8f6f 	isb	sy
 8005e62:	f3bf 8f4f 	dsb	sy
 8005e66:	60fb      	str	r3, [r7, #12]
}
 8005e68:	bf00      	nop
 8005e6a:	bf00      	nop
 8005e6c:	e7fd      	b.n	8005e6a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	3318      	adds	r3, #24
 8005e72:	4618      	mov	r0, r3
 8005e74:	f7ff f910 	bl	8005098 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e78:	4b1d      	ldr	r3, [pc, #116]	@ (8005ef0 <xTaskRemoveFromEventList+0xb0>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d11c      	bne.n	8005eba <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	3304      	adds	r3, #4
 8005e84:	4618      	mov	r0, r3
 8005e86:	f7ff f907 	bl	8005098 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e8e:	2201      	movs	r2, #1
 8005e90:	409a      	lsls	r2, r3
 8005e92:	4b18      	ldr	r3, [pc, #96]	@ (8005ef4 <xTaskRemoveFromEventList+0xb4>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4313      	orrs	r3, r2
 8005e98:	4a16      	ldr	r2, [pc, #88]	@ (8005ef4 <xTaskRemoveFromEventList+0xb4>)
 8005e9a:	6013      	str	r3, [r2, #0]
 8005e9c:	693b      	ldr	r3, [r7, #16]
 8005e9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ea0:	4613      	mov	r3, r2
 8005ea2:	009b      	lsls	r3, r3, #2
 8005ea4:	4413      	add	r3, r2
 8005ea6:	009b      	lsls	r3, r3, #2
 8005ea8:	4a13      	ldr	r2, [pc, #76]	@ (8005ef8 <xTaskRemoveFromEventList+0xb8>)
 8005eaa:	441a      	add	r2, r3
 8005eac:	693b      	ldr	r3, [r7, #16]
 8005eae:	3304      	adds	r3, #4
 8005eb0:	4619      	mov	r1, r3
 8005eb2:	4610      	mov	r0, r2
 8005eb4:	f7ff f893 	bl	8004fde <vListInsertEnd>
 8005eb8:	e005      	b.n	8005ec6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	3318      	adds	r3, #24
 8005ebe:	4619      	mov	r1, r3
 8005ec0:	480e      	ldr	r0, [pc, #56]	@ (8005efc <xTaskRemoveFromEventList+0xbc>)
 8005ec2:	f7ff f88c 	bl	8004fde <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005ec6:	693b      	ldr	r3, [r7, #16]
 8005ec8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005eca:	4b0d      	ldr	r3, [pc, #52]	@ (8005f00 <xTaskRemoveFromEventList+0xc0>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ed0:	429a      	cmp	r2, r3
 8005ed2:	d905      	bls.n	8005ee0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005ed8:	4b0a      	ldr	r3, [pc, #40]	@ (8005f04 <xTaskRemoveFromEventList+0xc4>)
 8005eda:	2201      	movs	r2, #1
 8005edc:	601a      	str	r2, [r3, #0]
 8005ede:	e001      	b.n	8005ee4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8005ee4:	697b      	ldr	r3, [r7, #20]
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	3718      	adds	r7, #24
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}
 8005eee:	bf00      	nop
 8005ef0:	200005cc 	.word	0x200005cc
 8005ef4:	200005ac 	.word	0x200005ac
 8005ef8:	200004a8 	.word	0x200004a8
 8005efc:	20000564 	.word	0x20000564
 8005f00:	200004a4 	.word	0x200004a4
 8005f04:	200005b8 	.word	0x200005b8

08005f08 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b082      	sub	sp, #8
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005f10:	f000 f852 	bl	8005fb8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005f14:	4b06      	ldr	r3, [pc, #24]	@ (8005f30 <prvIdleTask+0x28>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	2b01      	cmp	r3, #1
 8005f1a:	d9f9      	bls.n	8005f10 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005f1c:	4b05      	ldr	r3, [pc, #20]	@ (8005f34 <prvIdleTask+0x2c>)
 8005f1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f22:	601a      	str	r2, [r3, #0]
 8005f24:	f3bf 8f4f 	dsb	sy
 8005f28:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005f2c:	e7f0      	b.n	8005f10 <prvIdleTask+0x8>
 8005f2e:	bf00      	nop
 8005f30:	200004a8 	.word	0x200004a8
 8005f34:	e000ed04 	.word	0xe000ed04

08005f38 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b082      	sub	sp, #8
 8005f3c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005f3e:	2300      	movs	r3, #0
 8005f40:	607b      	str	r3, [r7, #4]
 8005f42:	e00c      	b.n	8005f5e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005f44:	687a      	ldr	r2, [r7, #4]
 8005f46:	4613      	mov	r3, r2
 8005f48:	009b      	lsls	r3, r3, #2
 8005f4a:	4413      	add	r3, r2
 8005f4c:	009b      	lsls	r3, r3, #2
 8005f4e:	4a12      	ldr	r2, [pc, #72]	@ (8005f98 <prvInitialiseTaskLists+0x60>)
 8005f50:	4413      	add	r3, r2
 8005f52:	4618      	mov	r0, r3
 8005f54:	f7ff f816 	bl	8004f84 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	3301      	adds	r3, #1
 8005f5c:	607b      	str	r3, [r7, #4]
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2b06      	cmp	r3, #6
 8005f62:	d9ef      	bls.n	8005f44 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005f64:	480d      	ldr	r0, [pc, #52]	@ (8005f9c <prvInitialiseTaskLists+0x64>)
 8005f66:	f7ff f80d 	bl	8004f84 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005f6a:	480d      	ldr	r0, [pc, #52]	@ (8005fa0 <prvInitialiseTaskLists+0x68>)
 8005f6c:	f7ff f80a 	bl	8004f84 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005f70:	480c      	ldr	r0, [pc, #48]	@ (8005fa4 <prvInitialiseTaskLists+0x6c>)
 8005f72:	f7ff f807 	bl	8004f84 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005f76:	480c      	ldr	r0, [pc, #48]	@ (8005fa8 <prvInitialiseTaskLists+0x70>)
 8005f78:	f7ff f804 	bl	8004f84 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005f7c:	480b      	ldr	r0, [pc, #44]	@ (8005fac <prvInitialiseTaskLists+0x74>)
 8005f7e:	f7ff f801 	bl	8004f84 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005f82:	4b0b      	ldr	r3, [pc, #44]	@ (8005fb0 <prvInitialiseTaskLists+0x78>)
 8005f84:	4a05      	ldr	r2, [pc, #20]	@ (8005f9c <prvInitialiseTaskLists+0x64>)
 8005f86:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005f88:	4b0a      	ldr	r3, [pc, #40]	@ (8005fb4 <prvInitialiseTaskLists+0x7c>)
 8005f8a:	4a05      	ldr	r2, [pc, #20]	@ (8005fa0 <prvInitialiseTaskLists+0x68>)
 8005f8c:	601a      	str	r2, [r3, #0]
}
 8005f8e:	bf00      	nop
 8005f90:	3708      	adds	r7, #8
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bd80      	pop	{r7, pc}
 8005f96:	bf00      	nop
 8005f98:	200004a8 	.word	0x200004a8
 8005f9c:	20000534 	.word	0x20000534
 8005fa0:	20000548 	.word	0x20000548
 8005fa4:	20000564 	.word	0x20000564
 8005fa8:	20000578 	.word	0x20000578
 8005fac:	20000590 	.word	0x20000590
 8005fb0:	2000055c 	.word	0x2000055c
 8005fb4:	20000560 	.word	0x20000560

08005fb8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b082      	sub	sp, #8
 8005fbc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005fbe:	e019      	b.n	8005ff4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005fc0:	f000 fa9a 	bl	80064f8 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005fc4:	4b10      	ldr	r3, [pc, #64]	@ (8006008 <prvCheckTasksWaitingTermination+0x50>)
 8005fc6:	68db      	ldr	r3, [r3, #12]
 8005fc8:	68db      	ldr	r3, [r3, #12]
 8005fca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	3304      	adds	r3, #4
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	f7ff f861 	bl	8005098 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005fd6:	4b0d      	ldr	r3, [pc, #52]	@ (800600c <prvCheckTasksWaitingTermination+0x54>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	3b01      	subs	r3, #1
 8005fdc:	4a0b      	ldr	r2, [pc, #44]	@ (800600c <prvCheckTasksWaitingTermination+0x54>)
 8005fde:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005fe0:	4b0b      	ldr	r3, [pc, #44]	@ (8006010 <prvCheckTasksWaitingTermination+0x58>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	3b01      	subs	r3, #1
 8005fe6:	4a0a      	ldr	r2, [pc, #40]	@ (8006010 <prvCheckTasksWaitingTermination+0x58>)
 8005fe8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005fea:	f000 fab7 	bl	800655c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f000 f810 	bl	8006014 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005ff4:	4b06      	ldr	r3, [pc, #24]	@ (8006010 <prvCheckTasksWaitingTermination+0x58>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d1e1      	bne.n	8005fc0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005ffc:	bf00      	nop
 8005ffe:	bf00      	nop
 8006000:	3708      	adds	r7, #8
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}
 8006006:	bf00      	nop
 8006008:	20000578 	.word	0x20000578
 800600c:	200005a4 	.word	0x200005a4
 8006010:	2000058c 	.word	0x2000058c

08006014 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006014:	b580      	push	{r7, lr}
 8006016:	b084      	sub	sp, #16
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006022:	2b00      	cmp	r3, #0
 8006024:	d108      	bne.n	8006038 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800602a:	4618      	mov	r0, r3
 800602c:	f000 fc4e 	bl	80068cc <vPortFree>
				vPortFree( pxTCB );
 8006030:	6878      	ldr	r0, [r7, #4]
 8006032:	f000 fc4b 	bl	80068cc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006036:	e019      	b.n	800606c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800603e:	2b01      	cmp	r3, #1
 8006040:	d103      	bne.n	800604a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	f000 fc42 	bl	80068cc <vPortFree>
	}
 8006048:	e010      	b.n	800606c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006050:	2b02      	cmp	r3, #2
 8006052:	d00b      	beq.n	800606c <prvDeleteTCB+0x58>
	__asm volatile
 8006054:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006058:	f383 8811 	msr	BASEPRI, r3
 800605c:	f3bf 8f6f 	isb	sy
 8006060:	f3bf 8f4f 	dsb	sy
 8006064:	60fb      	str	r3, [r7, #12]
}
 8006066:	bf00      	nop
 8006068:	bf00      	nop
 800606a:	e7fd      	b.n	8006068 <prvDeleteTCB+0x54>
	}
 800606c:	bf00      	nop
 800606e:	3710      	adds	r7, #16
 8006070:	46bd      	mov	sp, r7
 8006072:	bd80      	pop	{r7, pc}

08006074 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006074:	b480      	push	{r7}
 8006076:	b083      	sub	sp, #12
 8006078:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800607a:	4b0f      	ldr	r3, [pc, #60]	@ (80060b8 <prvResetNextTaskUnblockTime+0x44>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d101      	bne.n	8006088 <prvResetNextTaskUnblockTime+0x14>
 8006084:	2301      	movs	r3, #1
 8006086:	e000      	b.n	800608a <prvResetNextTaskUnblockTime+0x16>
 8006088:	2300      	movs	r3, #0
 800608a:	2b00      	cmp	r3, #0
 800608c:	d004      	beq.n	8006098 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800608e:	4b0b      	ldr	r3, [pc, #44]	@ (80060bc <prvResetNextTaskUnblockTime+0x48>)
 8006090:	f04f 32ff 	mov.w	r2, #4294967295
 8006094:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006096:	e008      	b.n	80060aa <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006098:	4b07      	ldr	r3, [pc, #28]	@ (80060b8 <prvResetNextTaskUnblockTime+0x44>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	68db      	ldr	r3, [r3, #12]
 800609e:	68db      	ldr	r3, [r3, #12]
 80060a0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	685b      	ldr	r3, [r3, #4]
 80060a6:	4a05      	ldr	r2, [pc, #20]	@ (80060bc <prvResetNextTaskUnblockTime+0x48>)
 80060a8:	6013      	str	r3, [r2, #0]
}
 80060aa:	bf00      	nop
 80060ac:	370c      	adds	r7, #12
 80060ae:	46bd      	mov	sp, r7
 80060b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b4:	4770      	bx	lr
 80060b6:	bf00      	nop
 80060b8:	2000055c 	.word	0x2000055c
 80060bc:	200005c4 	.word	0x200005c4

080060c0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b086      	sub	sp, #24
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80060cc:	2300      	movs	r3, #0
 80060ce:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d070      	beq.n	80061b8 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80060d6:	4b3b      	ldr	r3, [pc, #236]	@ (80061c4 <xTaskPriorityDisinherit+0x104>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	693a      	ldr	r2, [r7, #16]
 80060dc:	429a      	cmp	r2, r3
 80060de:	d00b      	beq.n	80060f8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80060e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060e4:	f383 8811 	msr	BASEPRI, r3
 80060e8:	f3bf 8f6f 	isb	sy
 80060ec:	f3bf 8f4f 	dsb	sy
 80060f0:	60fb      	str	r3, [r7, #12]
}
 80060f2:	bf00      	nop
 80060f4:	bf00      	nop
 80060f6:	e7fd      	b.n	80060f4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80060f8:	693b      	ldr	r3, [r7, #16]
 80060fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d10b      	bne.n	8006118 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006100:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006104:	f383 8811 	msr	BASEPRI, r3
 8006108:	f3bf 8f6f 	isb	sy
 800610c:	f3bf 8f4f 	dsb	sy
 8006110:	60bb      	str	r3, [r7, #8]
}
 8006112:	bf00      	nop
 8006114:	bf00      	nop
 8006116:	e7fd      	b.n	8006114 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006118:	693b      	ldr	r3, [r7, #16]
 800611a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800611c:	1e5a      	subs	r2, r3, #1
 800611e:	693b      	ldr	r3, [r7, #16]
 8006120:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006122:	693b      	ldr	r3, [r7, #16]
 8006124:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006126:	693b      	ldr	r3, [r7, #16]
 8006128:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800612a:	429a      	cmp	r2, r3
 800612c:	d044      	beq.n	80061b8 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006132:	2b00      	cmp	r3, #0
 8006134:	d140      	bne.n	80061b8 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006136:	693b      	ldr	r3, [r7, #16]
 8006138:	3304      	adds	r3, #4
 800613a:	4618      	mov	r0, r3
 800613c:	f7fe ffac 	bl	8005098 <uxListRemove>
 8006140:	4603      	mov	r3, r0
 8006142:	2b00      	cmp	r3, #0
 8006144:	d115      	bne.n	8006172 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006146:	693b      	ldr	r3, [r7, #16]
 8006148:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800614a:	491f      	ldr	r1, [pc, #124]	@ (80061c8 <xTaskPriorityDisinherit+0x108>)
 800614c:	4613      	mov	r3, r2
 800614e:	009b      	lsls	r3, r3, #2
 8006150:	4413      	add	r3, r2
 8006152:	009b      	lsls	r3, r3, #2
 8006154:	440b      	add	r3, r1
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d10a      	bne.n	8006172 <xTaskPriorityDisinherit+0xb2>
 800615c:	693b      	ldr	r3, [r7, #16]
 800615e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006160:	2201      	movs	r2, #1
 8006162:	fa02 f303 	lsl.w	r3, r2, r3
 8006166:	43da      	mvns	r2, r3
 8006168:	4b18      	ldr	r3, [pc, #96]	@ (80061cc <xTaskPriorityDisinherit+0x10c>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4013      	ands	r3, r2
 800616e:	4a17      	ldr	r2, [pc, #92]	@ (80061cc <xTaskPriorityDisinherit+0x10c>)
 8006170:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800617a:	693b      	ldr	r3, [r7, #16]
 800617c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800617e:	f1c3 0207 	rsb	r2, r3, #7
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006186:	693b      	ldr	r3, [r7, #16]
 8006188:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800618a:	2201      	movs	r2, #1
 800618c:	409a      	lsls	r2, r3
 800618e:	4b0f      	ldr	r3, [pc, #60]	@ (80061cc <xTaskPriorityDisinherit+0x10c>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	4313      	orrs	r3, r2
 8006194:	4a0d      	ldr	r2, [pc, #52]	@ (80061cc <xTaskPriorityDisinherit+0x10c>)
 8006196:	6013      	str	r3, [r2, #0]
 8006198:	693b      	ldr	r3, [r7, #16]
 800619a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800619c:	4613      	mov	r3, r2
 800619e:	009b      	lsls	r3, r3, #2
 80061a0:	4413      	add	r3, r2
 80061a2:	009b      	lsls	r3, r3, #2
 80061a4:	4a08      	ldr	r2, [pc, #32]	@ (80061c8 <xTaskPriorityDisinherit+0x108>)
 80061a6:	441a      	add	r2, r3
 80061a8:	693b      	ldr	r3, [r7, #16]
 80061aa:	3304      	adds	r3, #4
 80061ac:	4619      	mov	r1, r3
 80061ae:	4610      	mov	r0, r2
 80061b0:	f7fe ff15 	bl	8004fde <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80061b4:	2301      	movs	r3, #1
 80061b6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80061b8:	697b      	ldr	r3, [r7, #20]
	}
 80061ba:	4618      	mov	r0, r3
 80061bc:	3718      	adds	r7, #24
 80061be:	46bd      	mov	sp, r7
 80061c0:	bd80      	pop	{r7, pc}
 80061c2:	bf00      	nop
 80061c4:	200004a4 	.word	0x200004a4
 80061c8:	200004a8 	.word	0x200004a8
 80061cc:	200005ac 	.word	0x200005ac

080061d0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b084      	sub	sp, #16
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
 80061d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80061da:	4b29      	ldr	r3, [pc, #164]	@ (8006280 <prvAddCurrentTaskToDelayedList+0xb0>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80061e0:	4b28      	ldr	r3, [pc, #160]	@ (8006284 <prvAddCurrentTaskToDelayedList+0xb4>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	3304      	adds	r3, #4
 80061e6:	4618      	mov	r0, r3
 80061e8:	f7fe ff56 	bl	8005098 <uxListRemove>
 80061ec:	4603      	mov	r3, r0
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d10b      	bne.n	800620a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80061f2:	4b24      	ldr	r3, [pc, #144]	@ (8006284 <prvAddCurrentTaskToDelayedList+0xb4>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061f8:	2201      	movs	r2, #1
 80061fa:	fa02 f303 	lsl.w	r3, r2, r3
 80061fe:	43da      	mvns	r2, r3
 8006200:	4b21      	ldr	r3, [pc, #132]	@ (8006288 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4013      	ands	r3, r2
 8006206:	4a20      	ldr	r2, [pc, #128]	@ (8006288 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006208:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006210:	d10a      	bne.n	8006228 <prvAddCurrentTaskToDelayedList+0x58>
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d007      	beq.n	8006228 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006218:	4b1a      	ldr	r3, [pc, #104]	@ (8006284 <prvAddCurrentTaskToDelayedList+0xb4>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	3304      	adds	r3, #4
 800621e:	4619      	mov	r1, r3
 8006220:	481a      	ldr	r0, [pc, #104]	@ (800628c <prvAddCurrentTaskToDelayedList+0xbc>)
 8006222:	f7fe fedc 	bl	8004fde <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006226:	e026      	b.n	8006276 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006228:	68fa      	ldr	r2, [r7, #12]
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	4413      	add	r3, r2
 800622e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006230:	4b14      	ldr	r3, [pc, #80]	@ (8006284 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	68ba      	ldr	r2, [r7, #8]
 8006236:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006238:	68ba      	ldr	r2, [r7, #8]
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	429a      	cmp	r2, r3
 800623e:	d209      	bcs.n	8006254 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006240:	4b13      	ldr	r3, [pc, #76]	@ (8006290 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006242:	681a      	ldr	r2, [r3, #0]
 8006244:	4b0f      	ldr	r3, [pc, #60]	@ (8006284 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	3304      	adds	r3, #4
 800624a:	4619      	mov	r1, r3
 800624c:	4610      	mov	r0, r2
 800624e:	f7fe feea 	bl	8005026 <vListInsert>
}
 8006252:	e010      	b.n	8006276 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006254:	4b0f      	ldr	r3, [pc, #60]	@ (8006294 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006256:	681a      	ldr	r2, [r3, #0]
 8006258:	4b0a      	ldr	r3, [pc, #40]	@ (8006284 <prvAddCurrentTaskToDelayedList+0xb4>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	3304      	adds	r3, #4
 800625e:	4619      	mov	r1, r3
 8006260:	4610      	mov	r0, r2
 8006262:	f7fe fee0 	bl	8005026 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006266:	4b0c      	ldr	r3, [pc, #48]	@ (8006298 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	68ba      	ldr	r2, [r7, #8]
 800626c:	429a      	cmp	r2, r3
 800626e:	d202      	bcs.n	8006276 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006270:	4a09      	ldr	r2, [pc, #36]	@ (8006298 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	6013      	str	r3, [r2, #0]
}
 8006276:	bf00      	nop
 8006278:	3710      	adds	r7, #16
 800627a:	46bd      	mov	sp, r7
 800627c:	bd80      	pop	{r7, pc}
 800627e:	bf00      	nop
 8006280:	200005a8 	.word	0x200005a8
 8006284:	200004a4 	.word	0x200004a4
 8006288:	200005ac 	.word	0x200005ac
 800628c:	20000590 	.word	0x20000590
 8006290:	20000560 	.word	0x20000560
 8006294:	2000055c 	.word	0x2000055c
 8006298:	200005c4 	.word	0x200005c4

0800629c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800629c:	b480      	push	{r7}
 800629e:	b085      	sub	sp, #20
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	60f8      	str	r0, [r7, #12]
 80062a4:	60b9      	str	r1, [r7, #8]
 80062a6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	3b04      	subs	r3, #4
 80062ac:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80062b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	3b04      	subs	r3, #4
 80062ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	f023 0201 	bic.w	r2, r3, #1
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	3b04      	subs	r3, #4
 80062ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80062cc:	4a0c      	ldr	r2, [pc, #48]	@ (8006300 <pxPortInitialiseStack+0x64>)
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	3b14      	subs	r3, #20
 80062d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80062d8:	687a      	ldr	r2, [r7, #4]
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	3b04      	subs	r3, #4
 80062e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	f06f 0202 	mvn.w	r2, #2
 80062ea:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	3b20      	subs	r3, #32
 80062f0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80062f2:	68fb      	ldr	r3, [r7, #12]
}
 80062f4:	4618      	mov	r0, r3
 80062f6:	3714      	adds	r7, #20
 80062f8:	46bd      	mov	sp, r7
 80062fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fe:	4770      	bx	lr
 8006300:	08006305 	.word	0x08006305

08006304 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006304:	b480      	push	{r7}
 8006306:	b085      	sub	sp, #20
 8006308:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800630a:	2300      	movs	r3, #0
 800630c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800630e:	4b13      	ldr	r3, [pc, #76]	@ (800635c <prvTaskExitError+0x58>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006316:	d00b      	beq.n	8006330 <prvTaskExitError+0x2c>
	__asm volatile
 8006318:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800631c:	f383 8811 	msr	BASEPRI, r3
 8006320:	f3bf 8f6f 	isb	sy
 8006324:	f3bf 8f4f 	dsb	sy
 8006328:	60fb      	str	r3, [r7, #12]
}
 800632a:	bf00      	nop
 800632c:	bf00      	nop
 800632e:	e7fd      	b.n	800632c <prvTaskExitError+0x28>
	__asm volatile
 8006330:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006334:	f383 8811 	msr	BASEPRI, r3
 8006338:	f3bf 8f6f 	isb	sy
 800633c:	f3bf 8f4f 	dsb	sy
 8006340:	60bb      	str	r3, [r7, #8]
}
 8006342:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006344:	bf00      	nop
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d0fc      	beq.n	8006346 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800634c:	bf00      	nop
 800634e:	bf00      	nop
 8006350:	3714      	adds	r7, #20
 8006352:	46bd      	mov	sp, r7
 8006354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006358:	4770      	bx	lr
 800635a:	bf00      	nop
 800635c:	2000000c 	.word	0x2000000c

08006360 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006360:	4b07      	ldr	r3, [pc, #28]	@ (8006380 <pxCurrentTCBConst2>)
 8006362:	6819      	ldr	r1, [r3, #0]
 8006364:	6808      	ldr	r0, [r1, #0]
 8006366:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800636a:	f380 8809 	msr	PSP, r0
 800636e:	f3bf 8f6f 	isb	sy
 8006372:	f04f 0000 	mov.w	r0, #0
 8006376:	f380 8811 	msr	BASEPRI, r0
 800637a:	4770      	bx	lr
 800637c:	f3af 8000 	nop.w

08006380 <pxCurrentTCBConst2>:
 8006380:	200004a4 	.word	0x200004a4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006384:	bf00      	nop
 8006386:	bf00      	nop

08006388 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006388:	4808      	ldr	r0, [pc, #32]	@ (80063ac <prvPortStartFirstTask+0x24>)
 800638a:	6800      	ldr	r0, [r0, #0]
 800638c:	6800      	ldr	r0, [r0, #0]
 800638e:	f380 8808 	msr	MSP, r0
 8006392:	f04f 0000 	mov.w	r0, #0
 8006396:	f380 8814 	msr	CONTROL, r0
 800639a:	b662      	cpsie	i
 800639c:	b661      	cpsie	f
 800639e:	f3bf 8f4f 	dsb	sy
 80063a2:	f3bf 8f6f 	isb	sy
 80063a6:	df00      	svc	0
 80063a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80063aa:	bf00      	nop
 80063ac:	e000ed08 	.word	0xe000ed08

080063b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b086      	sub	sp, #24
 80063b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80063b6:	4b47      	ldr	r3, [pc, #284]	@ (80064d4 <xPortStartScheduler+0x124>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4a47      	ldr	r2, [pc, #284]	@ (80064d8 <xPortStartScheduler+0x128>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d10b      	bne.n	80063d8 <xPortStartScheduler+0x28>
	__asm volatile
 80063c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063c4:	f383 8811 	msr	BASEPRI, r3
 80063c8:	f3bf 8f6f 	isb	sy
 80063cc:	f3bf 8f4f 	dsb	sy
 80063d0:	613b      	str	r3, [r7, #16]
}
 80063d2:	bf00      	nop
 80063d4:	bf00      	nop
 80063d6:	e7fd      	b.n	80063d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80063d8:	4b3e      	ldr	r3, [pc, #248]	@ (80064d4 <xPortStartScheduler+0x124>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4a3f      	ldr	r2, [pc, #252]	@ (80064dc <xPortStartScheduler+0x12c>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d10b      	bne.n	80063fa <xPortStartScheduler+0x4a>
	__asm volatile
 80063e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063e6:	f383 8811 	msr	BASEPRI, r3
 80063ea:	f3bf 8f6f 	isb	sy
 80063ee:	f3bf 8f4f 	dsb	sy
 80063f2:	60fb      	str	r3, [r7, #12]
}
 80063f4:	bf00      	nop
 80063f6:	bf00      	nop
 80063f8:	e7fd      	b.n	80063f6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80063fa:	4b39      	ldr	r3, [pc, #228]	@ (80064e0 <xPortStartScheduler+0x130>)
 80063fc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80063fe:	697b      	ldr	r3, [r7, #20]
 8006400:	781b      	ldrb	r3, [r3, #0]
 8006402:	b2db      	uxtb	r3, r3
 8006404:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006406:	697b      	ldr	r3, [r7, #20]
 8006408:	22ff      	movs	r2, #255	@ 0xff
 800640a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800640c:	697b      	ldr	r3, [r7, #20]
 800640e:	781b      	ldrb	r3, [r3, #0]
 8006410:	b2db      	uxtb	r3, r3
 8006412:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006414:	78fb      	ldrb	r3, [r7, #3]
 8006416:	b2db      	uxtb	r3, r3
 8006418:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800641c:	b2da      	uxtb	r2, r3
 800641e:	4b31      	ldr	r3, [pc, #196]	@ (80064e4 <xPortStartScheduler+0x134>)
 8006420:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006422:	4b31      	ldr	r3, [pc, #196]	@ (80064e8 <xPortStartScheduler+0x138>)
 8006424:	2207      	movs	r2, #7
 8006426:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006428:	e009      	b.n	800643e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800642a:	4b2f      	ldr	r3, [pc, #188]	@ (80064e8 <xPortStartScheduler+0x138>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	3b01      	subs	r3, #1
 8006430:	4a2d      	ldr	r2, [pc, #180]	@ (80064e8 <xPortStartScheduler+0x138>)
 8006432:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006434:	78fb      	ldrb	r3, [r7, #3]
 8006436:	b2db      	uxtb	r3, r3
 8006438:	005b      	lsls	r3, r3, #1
 800643a:	b2db      	uxtb	r3, r3
 800643c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800643e:	78fb      	ldrb	r3, [r7, #3]
 8006440:	b2db      	uxtb	r3, r3
 8006442:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006446:	2b80      	cmp	r3, #128	@ 0x80
 8006448:	d0ef      	beq.n	800642a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800644a:	4b27      	ldr	r3, [pc, #156]	@ (80064e8 <xPortStartScheduler+0x138>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f1c3 0307 	rsb	r3, r3, #7
 8006452:	2b04      	cmp	r3, #4
 8006454:	d00b      	beq.n	800646e <xPortStartScheduler+0xbe>
	__asm volatile
 8006456:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800645a:	f383 8811 	msr	BASEPRI, r3
 800645e:	f3bf 8f6f 	isb	sy
 8006462:	f3bf 8f4f 	dsb	sy
 8006466:	60bb      	str	r3, [r7, #8]
}
 8006468:	bf00      	nop
 800646a:	bf00      	nop
 800646c:	e7fd      	b.n	800646a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800646e:	4b1e      	ldr	r3, [pc, #120]	@ (80064e8 <xPortStartScheduler+0x138>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	021b      	lsls	r3, r3, #8
 8006474:	4a1c      	ldr	r2, [pc, #112]	@ (80064e8 <xPortStartScheduler+0x138>)
 8006476:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006478:	4b1b      	ldr	r3, [pc, #108]	@ (80064e8 <xPortStartScheduler+0x138>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006480:	4a19      	ldr	r2, [pc, #100]	@ (80064e8 <xPortStartScheduler+0x138>)
 8006482:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	b2da      	uxtb	r2, r3
 8006488:	697b      	ldr	r3, [r7, #20]
 800648a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800648c:	4b17      	ldr	r3, [pc, #92]	@ (80064ec <xPortStartScheduler+0x13c>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a16      	ldr	r2, [pc, #88]	@ (80064ec <xPortStartScheduler+0x13c>)
 8006492:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006496:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006498:	4b14      	ldr	r3, [pc, #80]	@ (80064ec <xPortStartScheduler+0x13c>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4a13      	ldr	r2, [pc, #76]	@ (80064ec <xPortStartScheduler+0x13c>)
 800649e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80064a2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80064a4:	f000 f8da 	bl	800665c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80064a8:	4b11      	ldr	r3, [pc, #68]	@ (80064f0 <xPortStartScheduler+0x140>)
 80064aa:	2200      	movs	r2, #0
 80064ac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80064ae:	f000 f8f9 	bl	80066a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80064b2:	4b10      	ldr	r3, [pc, #64]	@ (80064f4 <xPortStartScheduler+0x144>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4a0f      	ldr	r2, [pc, #60]	@ (80064f4 <xPortStartScheduler+0x144>)
 80064b8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80064bc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80064be:	f7ff ff63 	bl	8006388 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80064c2:	f7ff fc61 	bl	8005d88 <vTaskSwitchContext>
	prvTaskExitError();
 80064c6:	f7ff ff1d 	bl	8006304 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80064ca:	2300      	movs	r3, #0
}
 80064cc:	4618      	mov	r0, r3
 80064ce:	3718      	adds	r7, #24
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bd80      	pop	{r7, pc}
 80064d4:	e000ed00 	.word	0xe000ed00
 80064d8:	410fc271 	.word	0x410fc271
 80064dc:	410fc270 	.word	0x410fc270
 80064e0:	e000e400 	.word	0xe000e400
 80064e4:	200005d0 	.word	0x200005d0
 80064e8:	200005d4 	.word	0x200005d4
 80064ec:	e000ed20 	.word	0xe000ed20
 80064f0:	2000000c 	.word	0x2000000c
 80064f4:	e000ef34 	.word	0xe000ef34

080064f8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80064f8:	b480      	push	{r7}
 80064fa:	b083      	sub	sp, #12
 80064fc:	af00      	add	r7, sp, #0
	__asm volatile
 80064fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006502:	f383 8811 	msr	BASEPRI, r3
 8006506:	f3bf 8f6f 	isb	sy
 800650a:	f3bf 8f4f 	dsb	sy
 800650e:	607b      	str	r3, [r7, #4]
}
 8006510:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006512:	4b10      	ldr	r3, [pc, #64]	@ (8006554 <vPortEnterCritical+0x5c>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	3301      	adds	r3, #1
 8006518:	4a0e      	ldr	r2, [pc, #56]	@ (8006554 <vPortEnterCritical+0x5c>)
 800651a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800651c:	4b0d      	ldr	r3, [pc, #52]	@ (8006554 <vPortEnterCritical+0x5c>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	2b01      	cmp	r3, #1
 8006522:	d110      	bne.n	8006546 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006524:	4b0c      	ldr	r3, [pc, #48]	@ (8006558 <vPortEnterCritical+0x60>)
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	b2db      	uxtb	r3, r3
 800652a:	2b00      	cmp	r3, #0
 800652c:	d00b      	beq.n	8006546 <vPortEnterCritical+0x4e>
	__asm volatile
 800652e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006532:	f383 8811 	msr	BASEPRI, r3
 8006536:	f3bf 8f6f 	isb	sy
 800653a:	f3bf 8f4f 	dsb	sy
 800653e:	603b      	str	r3, [r7, #0]
}
 8006540:	bf00      	nop
 8006542:	bf00      	nop
 8006544:	e7fd      	b.n	8006542 <vPortEnterCritical+0x4a>
	}
}
 8006546:	bf00      	nop
 8006548:	370c      	adds	r7, #12
 800654a:	46bd      	mov	sp, r7
 800654c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006550:	4770      	bx	lr
 8006552:	bf00      	nop
 8006554:	2000000c 	.word	0x2000000c
 8006558:	e000ed04 	.word	0xe000ed04

0800655c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800655c:	b480      	push	{r7}
 800655e:	b083      	sub	sp, #12
 8006560:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006562:	4b12      	ldr	r3, [pc, #72]	@ (80065ac <vPortExitCritical+0x50>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d10b      	bne.n	8006582 <vPortExitCritical+0x26>
	__asm volatile
 800656a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800656e:	f383 8811 	msr	BASEPRI, r3
 8006572:	f3bf 8f6f 	isb	sy
 8006576:	f3bf 8f4f 	dsb	sy
 800657a:	607b      	str	r3, [r7, #4]
}
 800657c:	bf00      	nop
 800657e:	bf00      	nop
 8006580:	e7fd      	b.n	800657e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006582:	4b0a      	ldr	r3, [pc, #40]	@ (80065ac <vPortExitCritical+0x50>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	3b01      	subs	r3, #1
 8006588:	4a08      	ldr	r2, [pc, #32]	@ (80065ac <vPortExitCritical+0x50>)
 800658a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800658c:	4b07      	ldr	r3, [pc, #28]	@ (80065ac <vPortExitCritical+0x50>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d105      	bne.n	80065a0 <vPortExitCritical+0x44>
 8006594:	2300      	movs	r3, #0
 8006596:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	f383 8811 	msr	BASEPRI, r3
}
 800659e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80065a0:	bf00      	nop
 80065a2:	370c      	adds	r7, #12
 80065a4:	46bd      	mov	sp, r7
 80065a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065aa:	4770      	bx	lr
 80065ac:	2000000c 	.word	0x2000000c

080065b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80065b0:	f3ef 8009 	mrs	r0, PSP
 80065b4:	f3bf 8f6f 	isb	sy
 80065b8:	4b15      	ldr	r3, [pc, #84]	@ (8006610 <pxCurrentTCBConst>)
 80065ba:	681a      	ldr	r2, [r3, #0]
 80065bc:	f01e 0f10 	tst.w	lr, #16
 80065c0:	bf08      	it	eq
 80065c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80065c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065ca:	6010      	str	r0, [r2, #0]
 80065cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80065d0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80065d4:	f380 8811 	msr	BASEPRI, r0
 80065d8:	f3bf 8f4f 	dsb	sy
 80065dc:	f3bf 8f6f 	isb	sy
 80065e0:	f7ff fbd2 	bl	8005d88 <vTaskSwitchContext>
 80065e4:	f04f 0000 	mov.w	r0, #0
 80065e8:	f380 8811 	msr	BASEPRI, r0
 80065ec:	bc09      	pop	{r0, r3}
 80065ee:	6819      	ldr	r1, [r3, #0]
 80065f0:	6808      	ldr	r0, [r1, #0]
 80065f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065f6:	f01e 0f10 	tst.w	lr, #16
 80065fa:	bf08      	it	eq
 80065fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006600:	f380 8809 	msr	PSP, r0
 8006604:	f3bf 8f6f 	isb	sy
 8006608:	4770      	bx	lr
 800660a:	bf00      	nop
 800660c:	f3af 8000 	nop.w

08006610 <pxCurrentTCBConst>:
 8006610:	200004a4 	.word	0x200004a4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006614:	bf00      	nop
 8006616:	bf00      	nop

08006618 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b082      	sub	sp, #8
 800661c:	af00      	add	r7, sp, #0
	__asm volatile
 800661e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006622:	f383 8811 	msr	BASEPRI, r3
 8006626:	f3bf 8f6f 	isb	sy
 800662a:	f3bf 8f4f 	dsb	sy
 800662e:	607b      	str	r3, [r7, #4]
}
 8006630:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006632:	f7ff faeb 	bl	8005c0c <xTaskIncrementTick>
 8006636:	4603      	mov	r3, r0
 8006638:	2b00      	cmp	r3, #0
 800663a:	d003      	beq.n	8006644 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800663c:	4b06      	ldr	r3, [pc, #24]	@ (8006658 <SysTick_Handler+0x40>)
 800663e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006642:	601a      	str	r2, [r3, #0]
 8006644:	2300      	movs	r3, #0
 8006646:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	f383 8811 	msr	BASEPRI, r3
}
 800664e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006650:	bf00      	nop
 8006652:	3708      	adds	r7, #8
 8006654:	46bd      	mov	sp, r7
 8006656:	bd80      	pop	{r7, pc}
 8006658:	e000ed04 	.word	0xe000ed04

0800665c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800665c:	b480      	push	{r7}
 800665e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006660:	4b0b      	ldr	r3, [pc, #44]	@ (8006690 <vPortSetupTimerInterrupt+0x34>)
 8006662:	2200      	movs	r2, #0
 8006664:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006666:	4b0b      	ldr	r3, [pc, #44]	@ (8006694 <vPortSetupTimerInterrupt+0x38>)
 8006668:	2200      	movs	r2, #0
 800666a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800666c:	4b0a      	ldr	r3, [pc, #40]	@ (8006698 <vPortSetupTimerInterrupt+0x3c>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4a0a      	ldr	r2, [pc, #40]	@ (800669c <vPortSetupTimerInterrupt+0x40>)
 8006672:	fba2 2303 	umull	r2, r3, r2, r3
 8006676:	099b      	lsrs	r3, r3, #6
 8006678:	4a09      	ldr	r2, [pc, #36]	@ (80066a0 <vPortSetupTimerInterrupt+0x44>)
 800667a:	3b01      	subs	r3, #1
 800667c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800667e:	4b04      	ldr	r3, [pc, #16]	@ (8006690 <vPortSetupTimerInterrupt+0x34>)
 8006680:	2207      	movs	r2, #7
 8006682:	601a      	str	r2, [r3, #0]
}
 8006684:	bf00      	nop
 8006686:	46bd      	mov	sp, r7
 8006688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668c:	4770      	bx	lr
 800668e:	bf00      	nop
 8006690:	e000e010 	.word	0xe000e010
 8006694:	e000e018 	.word	0xe000e018
 8006698:	20000000 	.word	0x20000000
 800669c:	10624dd3 	.word	0x10624dd3
 80066a0:	e000e014 	.word	0xe000e014

080066a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80066a4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80066b4 <vPortEnableVFP+0x10>
 80066a8:	6801      	ldr	r1, [r0, #0]
 80066aa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80066ae:	6001      	str	r1, [r0, #0]
 80066b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80066b2:	bf00      	nop
 80066b4:	e000ed88 	.word	0xe000ed88

080066b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80066b8:	b480      	push	{r7}
 80066ba:	b085      	sub	sp, #20
 80066bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80066be:	f3ef 8305 	mrs	r3, IPSR
 80066c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	2b0f      	cmp	r3, #15
 80066c8:	d915      	bls.n	80066f6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80066ca:	4a18      	ldr	r2, [pc, #96]	@ (800672c <vPortValidateInterruptPriority+0x74>)
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	4413      	add	r3, r2
 80066d0:	781b      	ldrb	r3, [r3, #0]
 80066d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80066d4:	4b16      	ldr	r3, [pc, #88]	@ (8006730 <vPortValidateInterruptPriority+0x78>)
 80066d6:	781b      	ldrb	r3, [r3, #0]
 80066d8:	7afa      	ldrb	r2, [r7, #11]
 80066da:	429a      	cmp	r2, r3
 80066dc:	d20b      	bcs.n	80066f6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80066de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066e2:	f383 8811 	msr	BASEPRI, r3
 80066e6:	f3bf 8f6f 	isb	sy
 80066ea:	f3bf 8f4f 	dsb	sy
 80066ee:	607b      	str	r3, [r7, #4]
}
 80066f0:	bf00      	nop
 80066f2:	bf00      	nop
 80066f4:	e7fd      	b.n	80066f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80066f6:	4b0f      	ldr	r3, [pc, #60]	@ (8006734 <vPortValidateInterruptPriority+0x7c>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80066fe:	4b0e      	ldr	r3, [pc, #56]	@ (8006738 <vPortValidateInterruptPriority+0x80>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	429a      	cmp	r2, r3
 8006704:	d90b      	bls.n	800671e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006706:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800670a:	f383 8811 	msr	BASEPRI, r3
 800670e:	f3bf 8f6f 	isb	sy
 8006712:	f3bf 8f4f 	dsb	sy
 8006716:	603b      	str	r3, [r7, #0]
}
 8006718:	bf00      	nop
 800671a:	bf00      	nop
 800671c:	e7fd      	b.n	800671a <vPortValidateInterruptPriority+0x62>
	}
 800671e:	bf00      	nop
 8006720:	3714      	adds	r7, #20
 8006722:	46bd      	mov	sp, r7
 8006724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006728:	4770      	bx	lr
 800672a:	bf00      	nop
 800672c:	e000e3f0 	.word	0xe000e3f0
 8006730:	200005d0 	.word	0x200005d0
 8006734:	e000ed0c 	.word	0xe000ed0c
 8006738:	200005d4 	.word	0x200005d4

0800673c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b08a      	sub	sp, #40	@ 0x28
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006744:	2300      	movs	r3, #0
 8006746:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006748:	f7ff f9b4 	bl	8005ab4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800674c:	4b5a      	ldr	r3, [pc, #360]	@ (80068b8 <pvPortMalloc+0x17c>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d101      	bne.n	8006758 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006754:	f000 f916 	bl	8006984 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006758:	4b58      	ldr	r3, [pc, #352]	@ (80068bc <pvPortMalloc+0x180>)
 800675a:	681a      	ldr	r2, [r3, #0]
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	4013      	ands	r3, r2
 8006760:	2b00      	cmp	r3, #0
 8006762:	f040 8090 	bne.w	8006886 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d01e      	beq.n	80067aa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800676c:	2208      	movs	r2, #8
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	4413      	add	r3, r2
 8006772:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	f003 0307 	and.w	r3, r3, #7
 800677a:	2b00      	cmp	r3, #0
 800677c:	d015      	beq.n	80067aa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	f023 0307 	bic.w	r3, r3, #7
 8006784:	3308      	adds	r3, #8
 8006786:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	f003 0307 	and.w	r3, r3, #7
 800678e:	2b00      	cmp	r3, #0
 8006790:	d00b      	beq.n	80067aa <pvPortMalloc+0x6e>
	__asm volatile
 8006792:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006796:	f383 8811 	msr	BASEPRI, r3
 800679a:	f3bf 8f6f 	isb	sy
 800679e:	f3bf 8f4f 	dsb	sy
 80067a2:	617b      	str	r3, [r7, #20]
}
 80067a4:	bf00      	nop
 80067a6:	bf00      	nop
 80067a8:	e7fd      	b.n	80067a6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d06a      	beq.n	8006886 <pvPortMalloc+0x14a>
 80067b0:	4b43      	ldr	r3, [pc, #268]	@ (80068c0 <pvPortMalloc+0x184>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	687a      	ldr	r2, [r7, #4]
 80067b6:	429a      	cmp	r2, r3
 80067b8:	d865      	bhi.n	8006886 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80067ba:	4b42      	ldr	r3, [pc, #264]	@ (80068c4 <pvPortMalloc+0x188>)
 80067bc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80067be:	4b41      	ldr	r3, [pc, #260]	@ (80068c4 <pvPortMalloc+0x188>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80067c4:	e004      	b.n	80067d0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80067c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067c8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80067ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80067d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067d2:	685b      	ldr	r3, [r3, #4]
 80067d4:	687a      	ldr	r2, [r7, #4]
 80067d6:	429a      	cmp	r2, r3
 80067d8:	d903      	bls.n	80067e2 <pvPortMalloc+0xa6>
 80067da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d1f1      	bne.n	80067c6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80067e2:	4b35      	ldr	r3, [pc, #212]	@ (80068b8 <pvPortMalloc+0x17c>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067e8:	429a      	cmp	r2, r3
 80067ea:	d04c      	beq.n	8006886 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80067ec:	6a3b      	ldr	r3, [r7, #32]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	2208      	movs	r2, #8
 80067f2:	4413      	add	r3, r2
 80067f4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80067f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067f8:	681a      	ldr	r2, [r3, #0]
 80067fa:	6a3b      	ldr	r3, [r7, #32]
 80067fc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80067fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006800:	685a      	ldr	r2, [r3, #4]
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	1ad2      	subs	r2, r2, r3
 8006806:	2308      	movs	r3, #8
 8006808:	005b      	lsls	r3, r3, #1
 800680a:	429a      	cmp	r2, r3
 800680c:	d920      	bls.n	8006850 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800680e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	4413      	add	r3, r2
 8006814:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006816:	69bb      	ldr	r3, [r7, #24]
 8006818:	f003 0307 	and.w	r3, r3, #7
 800681c:	2b00      	cmp	r3, #0
 800681e:	d00b      	beq.n	8006838 <pvPortMalloc+0xfc>
	__asm volatile
 8006820:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006824:	f383 8811 	msr	BASEPRI, r3
 8006828:	f3bf 8f6f 	isb	sy
 800682c:	f3bf 8f4f 	dsb	sy
 8006830:	613b      	str	r3, [r7, #16]
}
 8006832:	bf00      	nop
 8006834:	bf00      	nop
 8006836:	e7fd      	b.n	8006834 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800683a:	685a      	ldr	r2, [r3, #4]
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	1ad2      	subs	r2, r2, r3
 8006840:	69bb      	ldr	r3, [r7, #24]
 8006842:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006846:	687a      	ldr	r2, [r7, #4]
 8006848:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800684a:	69b8      	ldr	r0, [r7, #24]
 800684c:	f000 f8fc 	bl	8006a48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006850:	4b1b      	ldr	r3, [pc, #108]	@ (80068c0 <pvPortMalloc+0x184>)
 8006852:	681a      	ldr	r2, [r3, #0]
 8006854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006856:	685b      	ldr	r3, [r3, #4]
 8006858:	1ad3      	subs	r3, r2, r3
 800685a:	4a19      	ldr	r2, [pc, #100]	@ (80068c0 <pvPortMalloc+0x184>)
 800685c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800685e:	4b18      	ldr	r3, [pc, #96]	@ (80068c0 <pvPortMalloc+0x184>)
 8006860:	681a      	ldr	r2, [r3, #0]
 8006862:	4b19      	ldr	r3, [pc, #100]	@ (80068c8 <pvPortMalloc+0x18c>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	429a      	cmp	r2, r3
 8006868:	d203      	bcs.n	8006872 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800686a:	4b15      	ldr	r3, [pc, #84]	@ (80068c0 <pvPortMalloc+0x184>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4a16      	ldr	r2, [pc, #88]	@ (80068c8 <pvPortMalloc+0x18c>)
 8006870:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006874:	685a      	ldr	r2, [r3, #4]
 8006876:	4b11      	ldr	r3, [pc, #68]	@ (80068bc <pvPortMalloc+0x180>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	431a      	orrs	r2, r3
 800687c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800687e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006882:	2200      	movs	r2, #0
 8006884:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006886:	f7ff f923 	bl	8005ad0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800688a:	69fb      	ldr	r3, [r7, #28]
 800688c:	f003 0307 	and.w	r3, r3, #7
 8006890:	2b00      	cmp	r3, #0
 8006892:	d00b      	beq.n	80068ac <pvPortMalloc+0x170>
	__asm volatile
 8006894:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006898:	f383 8811 	msr	BASEPRI, r3
 800689c:	f3bf 8f6f 	isb	sy
 80068a0:	f3bf 8f4f 	dsb	sy
 80068a4:	60fb      	str	r3, [r7, #12]
}
 80068a6:	bf00      	nop
 80068a8:	bf00      	nop
 80068aa:	e7fd      	b.n	80068a8 <pvPortMalloc+0x16c>
	return pvReturn;
 80068ac:	69fb      	ldr	r3, [r7, #28]
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	3728      	adds	r7, #40	@ 0x28
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bd80      	pop	{r7, pc}
 80068b6:	bf00      	nop
 80068b8:	20002de0 	.word	0x20002de0
 80068bc:	20002dec 	.word	0x20002dec
 80068c0:	20002de4 	.word	0x20002de4
 80068c4:	20002dd8 	.word	0x20002dd8
 80068c8:	20002de8 	.word	0x20002de8

080068cc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b086      	sub	sp, #24
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d04a      	beq.n	8006974 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80068de:	2308      	movs	r3, #8
 80068e0:	425b      	negs	r3, r3
 80068e2:	697a      	ldr	r2, [r7, #20]
 80068e4:	4413      	add	r3, r2
 80068e6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80068e8:	697b      	ldr	r3, [r7, #20]
 80068ea:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80068ec:	693b      	ldr	r3, [r7, #16]
 80068ee:	685a      	ldr	r2, [r3, #4]
 80068f0:	4b22      	ldr	r3, [pc, #136]	@ (800697c <vPortFree+0xb0>)
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4013      	ands	r3, r2
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d10b      	bne.n	8006912 <vPortFree+0x46>
	__asm volatile
 80068fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068fe:	f383 8811 	msr	BASEPRI, r3
 8006902:	f3bf 8f6f 	isb	sy
 8006906:	f3bf 8f4f 	dsb	sy
 800690a:	60fb      	str	r3, [r7, #12]
}
 800690c:	bf00      	nop
 800690e:	bf00      	nop
 8006910:	e7fd      	b.n	800690e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006912:	693b      	ldr	r3, [r7, #16]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d00b      	beq.n	8006932 <vPortFree+0x66>
	__asm volatile
 800691a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800691e:	f383 8811 	msr	BASEPRI, r3
 8006922:	f3bf 8f6f 	isb	sy
 8006926:	f3bf 8f4f 	dsb	sy
 800692a:	60bb      	str	r3, [r7, #8]
}
 800692c:	bf00      	nop
 800692e:	bf00      	nop
 8006930:	e7fd      	b.n	800692e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006932:	693b      	ldr	r3, [r7, #16]
 8006934:	685a      	ldr	r2, [r3, #4]
 8006936:	4b11      	ldr	r3, [pc, #68]	@ (800697c <vPortFree+0xb0>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4013      	ands	r3, r2
 800693c:	2b00      	cmp	r3, #0
 800693e:	d019      	beq.n	8006974 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006940:	693b      	ldr	r3, [r7, #16]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d115      	bne.n	8006974 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006948:	693b      	ldr	r3, [r7, #16]
 800694a:	685a      	ldr	r2, [r3, #4]
 800694c:	4b0b      	ldr	r3, [pc, #44]	@ (800697c <vPortFree+0xb0>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	43db      	mvns	r3, r3
 8006952:	401a      	ands	r2, r3
 8006954:	693b      	ldr	r3, [r7, #16]
 8006956:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006958:	f7ff f8ac 	bl	8005ab4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800695c:	693b      	ldr	r3, [r7, #16]
 800695e:	685a      	ldr	r2, [r3, #4]
 8006960:	4b07      	ldr	r3, [pc, #28]	@ (8006980 <vPortFree+0xb4>)
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4413      	add	r3, r2
 8006966:	4a06      	ldr	r2, [pc, #24]	@ (8006980 <vPortFree+0xb4>)
 8006968:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800696a:	6938      	ldr	r0, [r7, #16]
 800696c:	f000 f86c 	bl	8006a48 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006970:	f7ff f8ae 	bl	8005ad0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006974:	bf00      	nop
 8006976:	3718      	adds	r7, #24
 8006978:	46bd      	mov	sp, r7
 800697a:	bd80      	pop	{r7, pc}
 800697c:	20002dec 	.word	0x20002dec
 8006980:	20002de4 	.word	0x20002de4

08006984 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006984:	b480      	push	{r7}
 8006986:	b085      	sub	sp, #20
 8006988:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800698a:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800698e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006990:	4b27      	ldr	r3, [pc, #156]	@ (8006a30 <prvHeapInit+0xac>)
 8006992:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	f003 0307 	and.w	r3, r3, #7
 800699a:	2b00      	cmp	r3, #0
 800699c:	d00c      	beq.n	80069b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	3307      	adds	r3, #7
 80069a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	f023 0307 	bic.w	r3, r3, #7
 80069aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80069ac:	68ba      	ldr	r2, [r7, #8]
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	1ad3      	subs	r3, r2, r3
 80069b2:	4a1f      	ldr	r2, [pc, #124]	@ (8006a30 <prvHeapInit+0xac>)
 80069b4:	4413      	add	r3, r2
 80069b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80069bc:	4a1d      	ldr	r2, [pc, #116]	@ (8006a34 <prvHeapInit+0xb0>)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80069c2:	4b1c      	ldr	r3, [pc, #112]	@ (8006a34 <prvHeapInit+0xb0>)
 80069c4:	2200      	movs	r2, #0
 80069c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	68ba      	ldr	r2, [r7, #8]
 80069cc:	4413      	add	r3, r2
 80069ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80069d0:	2208      	movs	r2, #8
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	1a9b      	subs	r3, r3, r2
 80069d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	f023 0307 	bic.w	r3, r3, #7
 80069de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	4a15      	ldr	r2, [pc, #84]	@ (8006a38 <prvHeapInit+0xb4>)
 80069e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80069e6:	4b14      	ldr	r3, [pc, #80]	@ (8006a38 <prvHeapInit+0xb4>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	2200      	movs	r2, #0
 80069ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80069ee:	4b12      	ldr	r3, [pc, #72]	@ (8006a38 <prvHeapInit+0xb4>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	2200      	movs	r2, #0
 80069f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	68fa      	ldr	r2, [r7, #12]
 80069fe:	1ad2      	subs	r2, r2, r3
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006a04:	4b0c      	ldr	r3, [pc, #48]	@ (8006a38 <prvHeapInit+0xb4>)
 8006a06:	681a      	ldr	r2, [r3, #0]
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	685b      	ldr	r3, [r3, #4]
 8006a10:	4a0a      	ldr	r2, [pc, #40]	@ (8006a3c <prvHeapInit+0xb8>)
 8006a12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	685b      	ldr	r3, [r3, #4]
 8006a18:	4a09      	ldr	r2, [pc, #36]	@ (8006a40 <prvHeapInit+0xbc>)
 8006a1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006a1c:	4b09      	ldr	r3, [pc, #36]	@ (8006a44 <prvHeapInit+0xc0>)
 8006a1e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006a22:	601a      	str	r2, [r3, #0]
}
 8006a24:	bf00      	nop
 8006a26:	3714      	adds	r7, #20
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2e:	4770      	bx	lr
 8006a30:	200005d8 	.word	0x200005d8
 8006a34:	20002dd8 	.word	0x20002dd8
 8006a38:	20002de0 	.word	0x20002de0
 8006a3c:	20002de8 	.word	0x20002de8
 8006a40:	20002de4 	.word	0x20002de4
 8006a44:	20002dec 	.word	0x20002dec

08006a48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b085      	sub	sp, #20
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006a50:	4b28      	ldr	r3, [pc, #160]	@ (8006af4 <prvInsertBlockIntoFreeList+0xac>)
 8006a52:	60fb      	str	r3, [r7, #12]
 8006a54:	e002      	b.n	8006a5c <prvInsertBlockIntoFreeList+0x14>
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	60fb      	str	r3, [r7, #12]
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	687a      	ldr	r2, [r7, #4]
 8006a62:	429a      	cmp	r2, r3
 8006a64:	d8f7      	bhi.n	8006a56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	685b      	ldr	r3, [r3, #4]
 8006a6e:	68ba      	ldr	r2, [r7, #8]
 8006a70:	4413      	add	r3, r2
 8006a72:	687a      	ldr	r2, [r7, #4]
 8006a74:	429a      	cmp	r2, r3
 8006a76:	d108      	bne.n	8006a8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	685a      	ldr	r2, [r3, #4]
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	685b      	ldr	r3, [r3, #4]
 8006a80:	441a      	add	r2, r3
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	685b      	ldr	r3, [r3, #4]
 8006a92:	68ba      	ldr	r2, [r7, #8]
 8006a94:	441a      	add	r2, r3
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	429a      	cmp	r2, r3
 8006a9c:	d118      	bne.n	8006ad0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681a      	ldr	r2, [r3, #0]
 8006aa2:	4b15      	ldr	r3, [pc, #84]	@ (8006af8 <prvInsertBlockIntoFreeList+0xb0>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	429a      	cmp	r2, r3
 8006aa8:	d00d      	beq.n	8006ac6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	685a      	ldr	r2, [r3, #4]
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	685b      	ldr	r3, [r3, #4]
 8006ab4:	441a      	add	r2, r3
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	681a      	ldr	r2, [r3, #0]
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	601a      	str	r2, [r3, #0]
 8006ac4:	e008      	b.n	8006ad8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006ac6:	4b0c      	ldr	r3, [pc, #48]	@ (8006af8 <prvInsertBlockIntoFreeList+0xb0>)
 8006ac8:	681a      	ldr	r2, [r3, #0]
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	601a      	str	r2, [r3, #0]
 8006ace:	e003      	b.n	8006ad8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681a      	ldr	r2, [r3, #0]
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006ad8:	68fa      	ldr	r2, [r7, #12]
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	429a      	cmp	r2, r3
 8006ade:	d002      	beq.n	8006ae6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	687a      	ldr	r2, [r7, #4]
 8006ae4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006ae6:	bf00      	nop
 8006ae8:	3714      	adds	r7, #20
 8006aea:	46bd      	mov	sp, r7
 8006aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af0:	4770      	bx	lr
 8006af2:	bf00      	nop
 8006af4:	20002dd8 	.word	0x20002dd8
 8006af8:	20002de0 	.word	0x20002de0

08006afc <memset>:
 8006afc:	4402      	add	r2, r0
 8006afe:	4603      	mov	r3, r0
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d100      	bne.n	8006b06 <memset+0xa>
 8006b04:	4770      	bx	lr
 8006b06:	f803 1b01 	strb.w	r1, [r3], #1
 8006b0a:	e7f9      	b.n	8006b00 <memset+0x4>

08006b0c <__libc_init_array>:
 8006b0c:	b570      	push	{r4, r5, r6, lr}
 8006b0e:	4d0d      	ldr	r5, [pc, #52]	@ (8006b44 <__libc_init_array+0x38>)
 8006b10:	4c0d      	ldr	r4, [pc, #52]	@ (8006b48 <__libc_init_array+0x3c>)
 8006b12:	1b64      	subs	r4, r4, r5
 8006b14:	10a4      	asrs	r4, r4, #2
 8006b16:	2600      	movs	r6, #0
 8006b18:	42a6      	cmp	r6, r4
 8006b1a:	d109      	bne.n	8006b30 <__libc_init_array+0x24>
 8006b1c:	4d0b      	ldr	r5, [pc, #44]	@ (8006b4c <__libc_init_array+0x40>)
 8006b1e:	4c0c      	ldr	r4, [pc, #48]	@ (8006b50 <__libc_init_array+0x44>)
 8006b20:	f000 f826 	bl	8006b70 <_init>
 8006b24:	1b64      	subs	r4, r4, r5
 8006b26:	10a4      	asrs	r4, r4, #2
 8006b28:	2600      	movs	r6, #0
 8006b2a:	42a6      	cmp	r6, r4
 8006b2c:	d105      	bne.n	8006b3a <__libc_init_array+0x2e>
 8006b2e:	bd70      	pop	{r4, r5, r6, pc}
 8006b30:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b34:	4798      	blx	r3
 8006b36:	3601      	adds	r6, #1
 8006b38:	e7ee      	b.n	8006b18 <__libc_init_array+0xc>
 8006b3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b3e:	4798      	blx	r3
 8006b40:	3601      	adds	r6, #1
 8006b42:	e7f2      	b.n	8006b2a <__libc_init_array+0x1e>
 8006b44:	08006c48 	.word	0x08006c48
 8006b48:	08006c48 	.word	0x08006c48
 8006b4c:	08006c48 	.word	0x08006c48
 8006b50:	08006c4c 	.word	0x08006c4c

08006b54 <memcpy>:
 8006b54:	440a      	add	r2, r1
 8006b56:	4291      	cmp	r1, r2
 8006b58:	f100 33ff 	add.w	r3, r0, #4294967295
 8006b5c:	d100      	bne.n	8006b60 <memcpy+0xc>
 8006b5e:	4770      	bx	lr
 8006b60:	b510      	push	{r4, lr}
 8006b62:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b66:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006b6a:	4291      	cmp	r1, r2
 8006b6c:	d1f9      	bne.n	8006b62 <memcpy+0xe>
 8006b6e:	bd10      	pop	{r4, pc}

08006b70 <_init>:
 8006b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b72:	bf00      	nop
 8006b74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b76:	bc08      	pop	{r3}
 8006b78:	469e      	mov	lr, r3
 8006b7a:	4770      	bx	lr

08006b7c <_fini>:
 8006b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b7e:	bf00      	nop
 8006b80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b82:	bc08      	pop	{r3}
 8006b84:	469e      	mov	lr, r3
 8006b86:	4770      	bx	lr
