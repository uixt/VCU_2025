
VCU_2025.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000058a8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  08005a38  08005a38  00006a38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005aec  08005aec  00007010  2**0
                  CONTENTS
  4 .ARM          00000000  08005aec  08005aec  00007010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005aec  08005aec  00007010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005aec  08005aec  00006aec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005af0  08005af0  00006af0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08005af4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001124  20000010  08005b04  00007010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001134  08005b04  00007134  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001607a  00000000  00000000  00007040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000323e  00000000  00000000  0001d0ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012f0  00000000  00000000  000202f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000eb5  00000000  00000000  000215e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e2a4  00000000  00000000  0002249d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017554  00000000  00000000  00040741  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b0edb  00000000  00000000  00057c95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00108b70  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f08  00000000  00000000  00108bb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  0010dabc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005a20 	.word	0x08005a20

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08005a20 	.word	0x08005a20

080001d0 <makeFrame>:
uint32_t val;
struct CANframe temp;
struct CANframe  receivedFrame;


struct CANframe makeFrame(CAN_RxHeaderTypeDef header, uint8_t data[8]){
 80001d0:	b084      	sub	sp, #16
 80001d2:	b490      	push	{r4, r7}
 80001d4:	b086      	sub	sp, #24
 80001d6:	af00      	add	r7, sp, #0
 80001d8:	6078      	str	r0, [r7, #4]
 80001da:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80001de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	struct CANframe temp;

	temp.ID = header.StdId;
 80001e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80001e4:	60fb      	str	r3, [r7, #12]
	temp.rxData[0] = data[0];
 80001e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80001e8:	781b      	ldrb	r3, [r3, #0]
 80001ea:	743b      	strb	r3, [r7, #16]
	temp.rxData[1] = data[1];
 80001ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80001ee:	785b      	ldrb	r3, [r3, #1]
 80001f0:	747b      	strb	r3, [r7, #17]
	temp.rxData[2] = data[2];
 80001f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80001f4:	789b      	ldrb	r3, [r3, #2]
 80001f6:	74bb      	strb	r3, [r7, #18]
	temp.rxData[3] = data[3];
 80001f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80001fa:	78db      	ldrb	r3, [r3, #3]
 80001fc:	74fb      	strb	r3, [r7, #19]
	temp.rxData[4] = data[4];
 80001fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000200:	791b      	ldrb	r3, [r3, #4]
 8000202:	753b      	strb	r3, [r7, #20]
	temp.rxData[5] = data[5];
 8000204:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000206:	795b      	ldrb	r3, [r3, #5]
 8000208:	757b      	strb	r3, [r7, #21]
	temp.rxData[6] = data[6];
 800020a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800020c:	799b      	ldrb	r3, [r3, #6]
 800020e:	75bb      	strb	r3, [r7, #22]
	temp.rxData[7] = data[7];
 8000210:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000212:	79db      	ldrb	r3, [r3, #7]
 8000214:	75fb      	strb	r3, [r7, #23]

	return temp;
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	461c      	mov	r4, r3
 800021a:	f107 030c 	add.w	r3, r7, #12
 800021e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000222:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8000226:	6878      	ldr	r0, [r7, #4]
 8000228:	3718      	adds	r7, #24
 800022a:	46bd      	mov	sp, r7
 800022c:	bc90      	pop	{r4, r7}
 800022e:	b004      	add	sp, #16
 8000230:	4770      	bx	lr
	...

08000234 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8000234:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000236:	b08f      	sub	sp, #60	@ 0x3c
 8000238:	af06      	add	r7, sp, #24
 800023a:	61f8      	str	r0, [r7, #28]

        if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 800023c:	4b1b      	ldr	r3, [pc, #108]	@ (80002ac <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 800023e:	4a1c      	ldr	r2, [pc, #112]	@ (80002b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 8000240:	2100      	movs	r1, #0
 8000242:	69f8      	ldr	r0, [r7, #28]
 8000244:	f000 ff1b 	bl	800107e <HAL_CAN_GetRxMessage>
 8000248:	4603      	mov	r3, r0
 800024a:	2b00      	cmp	r3, #0
 800024c:	d001      	beq.n	8000252 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
        {
        	//write to queue



            Error_Handler();
 800024e:	f000 fa5d 	bl	800070c <Error_Handler>
        }
        HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 8000252:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000256:	4817      	ldr	r0, [pc, #92]	@ (80002b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 8000258:	f001 fcf4 	bl	8001c44 <HAL_GPIO_TogglePin>
        temp = makeFrame(RxHeader, RxData);
 800025c:	4b16      	ldr	r3, [pc, #88]	@ (80002b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>)
 800025e:	607b      	str	r3, [r7, #4]
 8000260:	f107 0608 	add.w	r6, r7, #8
 8000264:	4c12      	ldr	r4, [pc, #72]	@ (80002b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 8000266:	4b11      	ldr	r3, [pc, #68]	@ (80002ac <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 8000268:	9304      	str	r3, [sp, #16]
 800026a:	466d      	mov	r5, sp
 800026c:	f104 030c 	add.w	r3, r4, #12
 8000270:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000272:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000276:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800027a:	4630      	mov	r0, r6
 800027c:	f7ff ffa8 	bl	80001d0 <makeFrame>
 8000280:	687c      	ldr	r4, [r7, #4]
 8000282:	f107 0308 	add.w	r3, r7, #8
 8000286:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800028a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        xQueueSendToBackFromISR(CANq, &temp, 1);
 800028e:	4b0b      	ldr	r3, [pc, #44]	@ (80002bc <HAL_CAN_RxFifo0MsgPendingCallback+0x88>)
 8000290:	6818      	ldr	r0, [r3, #0]
 8000292:	2300      	movs	r3, #0
 8000294:	2201      	movs	r2, #1
 8000296:	4908      	ldr	r1, [pc, #32]	@ (80002b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>)
 8000298:	f003 ff90 	bl	80041bc <xQueueGenericSendFromISR>

        datacheck = 1; // signal to your RTOS task
 800029c:	4b08      	ldr	r3, [pc, #32]	@ (80002c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>)
 800029e:	2201      	movs	r2, #1
 80002a0:	701a      	strb	r2, [r3, #0]
}
 80002a2:	bf00      	nop
 80002a4:	3724      	adds	r7, #36	@ 0x24
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002aa:	bf00      	nop
 80002ac:	20000048 	.word	0x20000048
 80002b0:	2000002c 	.word	0x2000002c
 80002b4:	48000400 	.word	0x48000400
 80002b8:	20000050 	.word	0x20000050
 80002bc:	20000390 	.word	0x20000390
 80002c0:	20000394 	.word	0x20000394

080002c4 <StartCanRxTask>:


void StartCanRxTask(void const * argument)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b082      	sub	sp, #8
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	6078      	str	r0, [r7, #4]


    while (1){

    	if (xQueueReceiveFromISR(CANq, &receivedFrame, pdMS_TO_TICKS(100)) == pdPASS)
 80002cc:	4b05      	ldr	r3, [pc, #20]	@ (80002e4 <StartCanRxTask+0x20>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	2264      	movs	r2, #100	@ 0x64
 80002d2:	4905      	ldr	r1, [pc, #20]	@ (80002e8 <StartCanRxTask+0x24>)
 80002d4:	4618      	mov	r0, r3
 80002d6:	f004 f80c 	bl	80042f2 <xQueueReceiveFromISR>
//                sprintf(msg, "RX CAN ID: 0x%X Data: %02X %02X\r\n", rxHeader.StdId, rxData[0], rxData[1]);
//                HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
//            }
//        }

        osDelay(1000); // small delay to avoid hogging CPU
 80002da:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80002de:	f003 fddd 	bl	8003e9c <osDelay>
    	if (xQueueReceiveFromISR(CANq, &receivedFrame, pdMS_TO_TICKS(100)) == pdPASS)
 80002e2:	e7f3      	b.n	80002cc <StartCanRxTask+0x8>
 80002e4:	20000390 	.word	0x20000390
 80002e8:	2000005c 	.word	0x2000005c

080002ec <StartCanTxTask>:

extern CAN_HandleTypeDef hcan;


void StartCanTxTask(void const * argument)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b08c      	sub	sp, #48	@ 0x30
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	6078      	str	r0, [r7, #4]
    CAN_TxHeaderTypeDef txHeader;
    uint8_t txData[8];
    uint32_t txMailbox;

    // Set up header
    txHeader.IDE = CAN_ID_STD;
 80002f4:	2300      	movs	r3, #0
 80002f6:	623b      	str	r3, [r7, #32]
    txHeader.StdId = 0x501;
 80002f8:	f240 5301 	movw	r3, #1281	@ 0x501
 80002fc:	61bb      	str	r3, [r7, #24]
    txHeader.RTR = CAN_RTR_DATA;
 80002fe:	2300      	movs	r3, #0
 8000300:	627b      	str	r3, [r7, #36]	@ 0x24
    txHeader.DLC = 8;
 8000302:	2308      	movs	r3, #8
 8000304:	62bb      	str	r3, [r7, #40]	@ 0x28

    while (1)
    {
    	//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
        txData[0] = 0x0; // your payload
 8000306:	2300      	movs	r3, #0
 8000308:	743b      	strb	r3, [r7, #16]
        txData[1] = 0x0;
 800030a:	2300      	movs	r3, #0
 800030c:	747b      	strb	r3, [r7, #17]
        txData[2] = 0xB4;
 800030e:	23b4      	movs	r3, #180	@ 0xb4
 8000310:	74bb      	strb	r3, [r7, #18]
        txData[3] = 0x43;
 8000312:	2343      	movs	r3, #67	@ 0x43
 8000314:	74fb      	strb	r3, [r7, #19]
        txData[4] = 0xCD;
 8000316:	23cd      	movs	r3, #205	@ 0xcd
 8000318:	753b      	strb	r3, [r7, #20]
        txData[5] = 0xCC;
 800031a:	23cc      	movs	r3, #204	@ 0xcc
 800031c:	757b      	strb	r3, [r7, #21]
        txData[6] = 0x4C;
 800031e:	234c      	movs	r3, #76	@ 0x4c
 8000320:	75bb      	strb	r3, [r7, #22]
        txData[7] = 0x3D;
 8000322:	233d      	movs	r3, #61	@ 0x3d
 8000324:	75fb      	strb	r3, [r7, #23]

        //HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);

        if (HAL_CAN_AddTxMessage(&hcan, &txHeader, txData, &txMailbox) != HAL_OK)
 8000326:	f107 030c 	add.w	r3, r7, #12
 800032a:	f107 0210 	add.w	r2, r7, #16
 800032e:	f107 0118 	add.w	r1, r7, #24
 8000332:	4806      	ldr	r0, [pc, #24]	@ (800034c <StartCanTxTask+0x60>)
 8000334:	f000 fdd3 	bl	8000ede <HAL_CAN_AddTxMessage>
 8000338:	4603      	mov	r3, r0
 800033a:	2b00      	cmp	r3, #0
 800033c:	d001      	beq.n	8000342 <StartCanTxTask+0x56>
        {
            Error_Handler();
 800033e:	f000 f9e5 	bl	800070c <Error_Handler>
        }

        osDelay(500); // send every 1 second
 8000342:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000346:	f003 fda9 	bl	8003e9c <osDelay>
        txData[0] = 0x0; // your payload
 800034a:	e7dc      	b.n	8000306 <StartCanTxTask+0x1a>
 800034c:	200002bc 	.word	0x200002bc

08000350 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000350:	b480      	push	{r7}
 8000352:	b085      	sub	sp, #20
 8000354:	af00      	add	r7, sp, #0
 8000356:	60f8      	str	r0, [r7, #12]
 8000358:	60b9      	str	r1, [r7, #8]
 800035a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800035c:	68fb      	ldr	r3, [r7, #12]
 800035e:	4a07      	ldr	r2, [pc, #28]	@ (800037c <vApplicationGetIdleTaskMemory+0x2c>)
 8000360:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000362:	68bb      	ldr	r3, [r7, #8]
 8000364:	4a06      	ldr	r2, [pc, #24]	@ (8000380 <vApplicationGetIdleTaskMemory+0x30>)
 8000366:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	2280      	movs	r2, #128	@ 0x80
 800036c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800036e:	bf00      	nop
 8000370:	3714      	adds	r7, #20
 8000372:	46bd      	mov	sp, r7
 8000374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000378:	4770      	bx	lr
 800037a:	bf00      	nop
 800037c:	20000068 	.word	0x20000068
 8000380:	200000bc 	.word	0x200000bc

08000384 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000384:	b5b0      	push	{r4, r5, r7, lr}
 8000386:	b098      	sub	sp, #96	@ 0x60
 8000388:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
// define
TxHeader.IDE = CAN_ID_STD;
 800038a:	4b33      	ldr	r3, [pc, #204]	@ (8000458 <main+0xd4>)
 800038c:	2200      	movs	r2, #0
 800038e:	609a      	str	r2, [r3, #8]
TxHeader.StdId = 0x446;
 8000390:	4b31      	ldr	r3, [pc, #196]	@ (8000458 <main+0xd4>)
 8000392:	f240 4246 	movw	r2, #1094	@ 0x446
 8000396:	601a      	str	r2, [r3, #0]
TxHeader.RTR = CAN_RTR_DATA;
 8000398:	4b2f      	ldr	r3, [pc, #188]	@ (8000458 <main+0xd4>)
 800039a:	2200      	movs	r2, #0
 800039c:	60da      	str	r2, [r3, #12]
TxHeader.DLC = 2;
 800039e:	4b2e      	ldr	r3, [pc, #184]	@ (8000458 <main+0xd4>)
 80003a0:	2202      	movs	r2, #2
 80003a2:	611a      	str	r2, [r3, #16]
TxData[0] = 50;
 80003a4:	4b2d      	ldr	r3, [pc, #180]	@ (800045c <main+0xd8>)
 80003a6:	2232      	movs	r2, #50	@ 0x32
 80003a8:	701a      	strb	r2, [r3, #0]
TxData[1] = 0xAA;
 80003aa:	4b2c      	ldr	r3, [pc, #176]	@ (800045c <main+0xd8>)
 80003ac:	22aa      	movs	r2, #170	@ 0xaa
 80003ae:	705a      	strb	r2, [r3, #1]
QueueHandle_t CANq = xQueueCreate(100, sizeof(struct CANframe));
 80003b0:	2200      	movs	r2, #0
 80003b2:	210c      	movs	r1, #12
 80003b4:	2064      	movs	r0, #100	@ 0x64
 80003b6:	f003 fea3 	bl	8004100 <xQueueGenericCreate>
 80003ba:	65f8      	str	r0, [r7, #92]	@ 0x5c
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003bc:	f000 fb50 	bl	8000a60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003c0:	f000 f858 	bl	8000474 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003c4:	f000 f920 	bl	8000608 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80003c8:	f000 f8ee 	bl	80005a8 <MX_USART2_UART_Init>
  MX_CAN_Init();
 80003cc:	f000 f894 	bl	80004f8 <MX_CAN_Init>
  /* USER CODE BEGIN 2 */
HAL_CAN_Start(&hcan);
 80003d0:	4823      	ldr	r0, [pc, #140]	@ (8000460 <main+0xdc>)
 80003d2:	f000 fd40 	bl	8000e56 <HAL_CAN_Start>

if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 80003d6:	2102      	movs	r1, #2
 80003d8:	4821      	ldr	r0, [pc, #132]	@ (8000460 <main+0xdc>)
 80003da:	f000 ff72 	bl	80012c2 <HAL_CAN_ActivateNotification>
 80003de:	4603      	mov	r3, r0
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d001      	beq.n	80003e8 <main+0x64>
{
Error_Handler();
 80003e4:	f000 f992 	bl	800070c <Error_Handler>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of parked */
  osThreadDef(parked, parked_init, osPriorityNormal, 0, 128);
 80003e8:	4b1e      	ldr	r3, [pc, #120]	@ (8000464 <main+0xe0>)
 80003ea:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 80003ee:	461d      	mov	r5, r3
 80003f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80003f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80003f4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80003f8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  parkedHandle = osThreadCreate(osThread(parked), NULL);
 80003fc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000400:	2100      	movs	r1, #0
 8000402:	4618      	mov	r0, r3
 8000404:	f003 fcfe 	bl	8003e04 <osThreadCreate>
 8000408:	4603      	mov	r3, r0
 800040a:	4a17      	ldr	r2, [pc, #92]	@ (8000468 <main+0xe4>)
 800040c:	6013      	str	r3, [r2, #0]

  osThreadDef(canTxTask, StartCanTxTask, osPriorityHigh, 0, 128);
 800040e:	4b17      	ldr	r3, [pc, #92]	@ (800046c <main+0xe8>)
 8000410:	f107 041c 	add.w	r4, r7, #28
 8000414:	461d      	mov	r5, r3
 8000416:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000418:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800041a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800041e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  canTxTaskHandle = osThreadCreate(osThread(canTxTask), NULL);
 8000422:	f107 031c 	add.w	r3, r7, #28
 8000426:	2100      	movs	r1, #0
 8000428:	4618      	mov	r0, r3
 800042a:	f003 fceb 	bl	8003e04 <osThreadCreate>
 800042e:	65b8      	str	r0, [r7, #88]	@ 0x58

  osThreadDef(canRxTask, StartCanRxTask, osPriorityNormal, 0, 128);
 8000430:	4b0f      	ldr	r3, [pc, #60]	@ (8000470 <main+0xec>)
 8000432:	463c      	mov	r4, r7
 8000434:	461d      	mov	r5, r3
 8000436:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000438:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800043a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800043e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  canRxTaskHandle = osThreadCreate(osThread(canRxTask), NULL);
 8000442:	463b      	mov	r3, r7
 8000444:	2100      	movs	r1, #0
 8000446:	4618      	mov	r0, r3
 8000448:	f003 fcdc 	bl	8003e04 <osThreadCreate>
 800044c:	6578      	str	r0, [r7, #84]	@ 0x54
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800044e:	f003 fcd2 	bl	8003df6 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int status;
  while (1)
 8000452:	bf00      	nop
 8000454:	e7fd      	b.n	8000452 <main+0xce>
 8000456:	bf00      	nop
 8000458:	20000370 	.word	0x20000370
 800045c:	20000388 	.word	0x20000388
 8000460:	200002bc 	.word	0x200002bc
 8000464:	08005a40 	.word	0x08005a40
 8000468:	2000036c 	.word	0x2000036c
 800046c:	08005a68 	.word	0x08005a68
 8000470:	08005a90 	.word	0x08005a90

08000474 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b090      	sub	sp, #64	@ 0x40
 8000478:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800047a:	f107 0318 	add.w	r3, r7, #24
 800047e:	2228      	movs	r2, #40	@ 0x28
 8000480:	2100      	movs	r1, #0
 8000482:	4618      	mov	r0, r3
 8000484:	f005 fa92 	bl	80059ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000488:	1d3b      	adds	r3, r7, #4
 800048a:	2200      	movs	r2, #0
 800048c:	601a      	str	r2, [r3, #0]
 800048e:	605a      	str	r2, [r3, #4]
 8000490:	609a      	str	r2, [r3, #8]
 8000492:	60da      	str	r2, [r3, #12]
 8000494:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000496:	2302      	movs	r3, #2
 8000498:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800049a:	2301      	movs	r3, #1
 800049c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800049e:	2310      	movs	r3, #16
 80004a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004a2:	2302      	movs	r3, #2
 80004a4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80004a6:	2300      	movs	r3, #0
 80004a8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80004aa:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 80004ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004b0:	f107 0318 	add.w	r3, r7, #24
 80004b4:	4618      	mov	r0, r3
 80004b6:	f001 fbdf 	bl	8001c78 <HAL_RCC_OscConfig>
 80004ba:	4603      	mov	r3, r0
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d001      	beq.n	80004c4 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80004c0:	f000 f924 	bl	800070c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004c4:	230f      	movs	r3, #15
 80004c6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004c8:	2302      	movs	r3, #2
 80004ca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004cc:	2300      	movs	r3, #0
 80004ce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004d0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80004d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004d6:	2300      	movs	r3, #0
 80004d8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004da:	1d3b      	adds	r3, r7, #4
 80004dc:	2102      	movs	r1, #2
 80004de:	4618      	mov	r0, r3
 80004e0:	f002 fc08 	bl	8002cf4 <HAL_RCC_ClockConfig>
 80004e4:	4603      	mov	r3, r0
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d001      	beq.n	80004ee <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80004ea:	f000 f90f 	bl	800070c <Error_Handler>
  }
}
 80004ee:	bf00      	nop
 80004f0:	3740      	adds	r7, #64	@ 0x40
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bd80      	pop	{r7, pc}
	...

080004f8 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b08a      	sub	sp, #40	@ 0x28
 80004fc:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 80004fe:	4b28      	ldr	r3, [pc, #160]	@ (80005a0 <MX_CAN_Init+0xa8>)
 8000500:	4a28      	ldr	r2, [pc, #160]	@ (80005a4 <MX_CAN_Init+0xac>)
 8000502:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 8;
 8000504:	4b26      	ldr	r3, [pc, #152]	@ (80005a0 <MX_CAN_Init+0xa8>)
 8000506:	2208      	movs	r2, #8
 8000508:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_LOOPBACK;
 800050a:	4b25      	ldr	r3, [pc, #148]	@ (80005a0 <MX_CAN_Init+0xa8>)
 800050c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000510:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000512:	4b23      	ldr	r3, [pc, #140]	@ (80005a0 <MX_CAN_Init+0xa8>)
 8000514:	2200      	movs	r2, #0
 8000516:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000518:	4b21      	ldr	r3, [pc, #132]	@ (80005a0 <MX_CAN_Init+0xa8>)
 800051a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800051e:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_5TQ;
 8000520:	4b1f      	ldr	r3, [pc, #124]	@ (80005a0 <MX_CAN_Init+0xa8>)
 8000522:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000526:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000528:	4b1d      	ldr	r3, [pc, #116]	@ (80005a0 <MX_CAN_Init+0xa8>)
 800052a:	2200      	movs	r2, #0
 800052c:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800052e:	4b1c      	ldr	r3, [pc, #112]	@ (80005a0 <MX_CAN_Init+0xa8>)
 8000530:	2200      	movs	r2, #0
 8000532:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000534:	4b1a      	ldr	r3, [pc, #104]	@ (80005a0 <MX_CAN_Init+0xa8>)
 8000536:	2200      	movs	r2, #0
 8000538:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800053a:	4b19      	ldr	r3, [pc, #100]	@ (80005a0 <MX_CAN_Init+0xa8>)
 800053c:	2200      	movs	r2, #0
 800053e:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000540:	4b17      	ldr	r3, [pc, #92]	@ (80005a0 <MX_CAN_Init+0xa8>)
 8000542:	2200      	movs	r2, #0
 8000544:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000546:	4b16      	ldr	r3, [pc, #88]	@ (80005a0 <MX_CAN_Init+0xa8>)
 8000548:	2200      	movs	r2, #0
 800054a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800054c:	4814      	ldr	r0, [pc, #80]	@ (80005a0 <MX_CAN_Init+0xa8>)
 800054e:	f000 fabd 	bl	8000acc <HAL_CAN_Init>
 8000552:	4603      	mov	r3, r0
 8000554:	2b00      	cmp	r3, #0
 8000556:	d001      	beq.n	800055c <MX_CAN_Init+0x64>
  {
    Error_Handler();
 8000558:	f000 f8d8 	bl	800070c <Error_Handler>
  //Allow all messages to pass through from any ID


  	CAN_FilterTypeDef canfilterconfig;

  	canfilterconfig.FilterActivation = ENABLE;
 800055c:	2301      	movs	r3, #1
 800055e:	623b      	str	r3, [r7, #32]
  	canfilterconfig.FilterBank = 0;
 8000560:	2300      	movs	r3, #0
 8000562:	617b      	str	r3, [r7, #20]
  	canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000564:	2300      	movs	r3, #0
 8000566:	613b      	str	r3, [r7, #16]
  	canfilterconfig.FilterIdHigh = 0x0000;
 8000568:	2300      	movs	r3, #0
 800056a:	603b      	str	r3, [r7, #0]
  	canfilterconfig.FilterIdLow = 0x0000;
 800056c:	2300      	movs	r3, #0
 800056e:	607b      	str	r3, [r7, #4]
  	canfilterconfig.FilterMaskIdHigh = 0x0000;
 8000570:	2300      	movs	r3, #0
 8000572:	60bb      	str	r3, [r7, #8]
  	canfilterconfig.FilterMaskIdLow = 0x0000;
 8000574:	2300      	movs	r3, #0
 8000576:	60fb      	str	r3, [r7, #12]
  	canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000578:	2300      	movs	r3, #0
 800057a:	61bb      	str	r3, [r7, #24]
  	canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800057c:	2301      	movs	r3, #1
 800057e:	61fb      	str	r3, [r7, #28]
  	canfilterconfig.SlaveStartFilterBank = 14;
 8000580:	230e      	movs	r3, #14
 8000582:	627b      	str	r3, [r7, #36]	@ 0x24

  	HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 8000584:	463b      	mov	r3, r7
 8000586:	4619      	mov	r1, r3
 8000588:	4805      	ldr	r0, [pc, #20]	@ (80005a0 <MX_CAN_Init+0xa8>)
 800058a:	f000 fb9a 	bl	8000cc2 <HAL_CAN_ConfigFilter>


  	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 800058e:	2102      	movs	r1, #2
 8000590:	4803      	ldr	r0, [pc, #12]	@ (80005a0 <MX_CAN_Init+0xa8>)
 8000592:	f000 fe96 	bl	80012c2 <HAL_CAN_ActivateNotification>

  /* USER CODE END CAN_Init 2 */

}
 8000596:	bf00      	nop
 8000598:	3728      	adds	r7, #40	@ 0x28
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	200002bc 	.word	0x200002bc
 80005a4:	40006400 	.word	0x40006400

080005a8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005ac:	4b14      	ldr	r3, [pc, #80]	@ (8000600 <MX_USART2_UART_Init+0x58>)
 80005ae:	4a15      	ldr	r2, [pc, #84]	@ (8000604 <MX_USART2_UART_Init+0x5c>)
 80005b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 80005b2:	4b13      	ldr	r3, [pc, #76]	@ (8000600 <MX_USART2_UART_Init+0x58>)
 80005b4:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 80005b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005ba:	4b11      	ldr	r3, [pc, #68]	@ (8000600 <MX_USART2_UART_Init+0x58>)
 80005bc:	2200      	movs	r2, #0
 80005be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005c0:	4b0f      	ldr	r3, [pc, #60]	@ (8000600 <MX_USART2_UART_Init+0x58>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005c6:	4b0e      	ldr	r3, [pc, #56]	@ (8000600 <MX_USART2_UART_Init+0x58>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005cc:	4b0c      	ldr	r3, [pc, #48]	@ (8000600 <MX_USART2_UART_Init+0x58>)
 80005ce:	220c      	movs	r2, #12
 80005d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005d2:	4b0b      	ldr	r3, [pc, #44]	@ (8000600 <MX_USART2_UART_Init+0x58>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005d8:	4b09      	ldr	r3, [pc, #36]	@ (8000600 <MX_USART2_UART_Init+0x58>)
 80005da:	2200      	movs	r2, #0
 80005dc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005de:	4b08      	ldr	r3, [pc, #32]	@ (8000600 <MX_USART2_UART_Init+0x58>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005e4:	4b06      	ldr	r3, [pc, #24]	@ (8000600 <MX_USART2_UART_Init+0x58>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005ea:	4805      	ldr	r0, [pc, #20]	@ (8000600 <MX_USART2_UART_Init+0x58>)
 80005ec:	f003 f84c 	bl	8003688 <HAL_UART_Init>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80005f6:	f000 f889 	bl	800070c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80005fa:	bf00      	nop
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	200002e4 	.word	0x200002e4
 8000604:	40004400 	.word	0x40004400

08000608 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b08a      	sub	sp, #40	@ 0x28
 800060c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800060e:	f107 0314 	add.w	r3, r7, #20
 8000612:	2200      	movs	r2, #0
 8000614:	601a      	str	r2, [r3, #0]
 8000616:	605a      	str	r2, [r3, #4]
 8000618:	609a      	str	r2, [r3, #8]
 800061a:	60da      	str	r2, [r3, #12]
 800061c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800061e:	4b2b      	ldr	r3, [pc, #172]	@ (80006cc <MX_GPIO_Init+0xc4>)
 8000620:	695b      	ldr	r3, [r3, #20]
 8000622:	4a2a      	ldr	r2, [pc, #168]	@ (80006cc <MX_GPIO_Init+0xc4>)
 8000624:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000628:	6153      	str	r3, [r2, #20]
 800062a:	4b28      	ldr	r3, [pc, #160]	@ (80006cc <MX_GPIO_Init+0xc4>)
 800062c:	695b      	ldr	r3, [r3, #20]
 800062e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000632:	613b      	str	r3, [r7, #16]
 8000634:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000636:	4b25      	ldr	r3, [pc, #148]	@ (80006cc <MX_GPIO_Init+0xc4>)
 8000638:	695b      	ldr	r3, [r3, #20]
 800063a:	4a24      	ldr	r2, [pc, #144]	@ (80006cc <MX_GPIO_Init+0xc4>)
 800063c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000640:	6153      	str	r3, [r2, #20]
 8000642:	4b22      	ldr	r3, [pc, #136]	@ (80006cc <MX_GPIO_Init+0xc4>)
 8000644:	695b      	ldr	r3, [r3, #20]
 8000646:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800064a:	60fb      	str	r3, [r7, #12]
 800064c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800064e:	4b1f      	ldr	r3, [pc, #124]	@ (80006cc <MX_GPIO_Init+0xc4>)
 8000650:	695b      	ldr	r3, [r3, #20]
 8000652:	4a1e      	ldr	r2, [pc, #120]	@ (80006cc <MX_GPIO_Init+0xc4>)
 8000654:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000658:	6153      	str	r3, [r2, #20]
 800065a:	4b1c      	ldr	r3, [pc, #112]	@ (80006cc <MX_GPIO_Init+0xc4>)
 800065c:	695b      	ldr	r3, [r3, #20]
 800065e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000662:	60bb      	str	r3, [r7, #8]
 8000664:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000666:	4b19      	ldr	r3, [pc, #100]	@ (80006cc <MX_GPIO_Init+0xc4>)
 8000668:	695b      	ldr	r3, [r3, #20]
 800066a:	4a18      	ldr	r2, [pc, #96]	@ (80006cc <MX_GPIO_Init+0xc4>)
 800066c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000670:	6153      	str	r3, [r2, #20]
 8000672:	4b16      	ldr	r3, [pc, #88]	@ (80006cc <MX_GPIO_Init+0xc4>)
 8000674:	695b      	ldr	r3, [r3, #20]
 8000676:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800067a:	607b      	str	r3, [r7, #4]
 800067c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800067e:	2200      	movs	r2, #0
 8000680:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000684:	4812      	ldr	r0, [pc, #72]	@ (80006d0 <MX_GPIO_Init+0xc8>)
 8000686:	f001 fac5 	bl	8001c14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800068a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800068e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000690:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000694:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000696:	2300      	movs	r3, #0
 8000698:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800069a:	f107 0314 	add.w	r3, r7, #20
 800069e:	4619      	mov	r1, r3
 80006a0:	480c      	ldr	r0, [pc, #48]	@ (80006d4 <MX_GPIO_Init+0xcc>)
 80006a2:	f001 f945 	bl	8001930 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80006a6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ac:	2301      	movs	r3, #1
 80006ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b0:	2300      	movs	r3, #0
 80006b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b4:	2300      	movs	r3, #0
 80006b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80006b8:	f107 0314 	add.w	r3, r7, #20
 80006bc:	4619      	mov	r1, r3
 80006be:	4804      	ldr	r0, [pc, #16]	@ (80006d0 <MX_GPIO_Init+0xc8>)
 80006c0:	f001 f936 	bl	8001930 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006c4:	bf00      	nop
 80006c6:	3728      	adds	r7, #40	@ 0x28
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	40021000 	.word	0x40021000
 80006d0:	48000400 	.word	0x48000400
 80006d4:	48000800 	.word	0x48000800

080006d8 <parked_init>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_parked_init */
void parked_init(void const * argument)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  osDelay(1);
 80006e0:	2001      	movs	r0, #1
 80006e2:	f003 fbdb 	bl	8003e9c <osDelay>
 80006e6:	e7fb      	b.n	80006e0 <parked_init+0x8>

080006e8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	4a04      	ldr	r2, [pc, #16]	@ (8000708 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80006f6:	4293      	cmp	r3, r2
 80006f8:	d101      	bne.n	80006fe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80006fa:	f000 f9c7 	bl	8000a8c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80006fe:	bf00      	nop
 8000700:	3708      	adds	r7, #8
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	40012c00 	.word	0x40012c00

0800070c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000710:	b672      	cpsid	i
}
 8000712:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000714:	bf00      	nop
 8000716:	e7fd      	b.n	8000714 <Error_Handler+0x8>

08000718 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800071e:	4b11      	ldr	r3, [pc, #68]	@ (8000764 <HAL_MspInit+0x4c>)
 8000720:	699b      	ldr	r3, [r3, #24]
 8000722:	4a10      	ldr	r2, [pc, #64]	@ (8000764 <HAL_MspInit+0x4c>)
 8000724:	f043 0301 	orr.w	r3, r3, #1
 8000728:	6193      	str	r3, [r2, #24]
 800072a:	4b0e      	ldr	r3, [pc, #56]	@ (8000764 <HAL_MspInit+0x4c>)
 800072c:	699b      	ldr	r3, [r3, #24]
 800072e:	f003 0301 	and.w	r3, r3, #1
 8000732:	607b      	str	r3, [r7, #4]
 8000734:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000736:	4b0b      	ldr	r3, [pc, #44]	@ (8000764 <HAL_MspInit+0x4c>)
 8000738:	69db      	ldr	r3, [r3, #28]
 800073a:	4a0a      	ldr	r2, [pc, #40]	@ (8000764 <HAL_MspInit+0x4c>)
 800073c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000740:	61d3      	str	r3, [r2, #28]
 8000742:	4b08      	ldr	r3, [pc, #32]	@ (8000764 <HAL_MspInit+0x4c>)
 8000744:	69db      	ldr	r3, [r3, #28]
 8000746:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800074a:	603b      	str	r3, [r7, #0]
 800074c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800074e:	2200      	movs	r2, #0
 8000750:	210f      	movs	r1, #15
 8000752:	f06f 0001 	mvn.w	r0, #1
 8000756:	f001 f8c1 	bl	80018dc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800075a:	bf00      	nop
 800075c:	3708      	adds	r7, #8
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	40021000 	.word	0x40021000

08000768 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b08a      	sub	sp, #40	@ 0x28
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000770:	f107 0314 	add.w	r3, r7, #20
 8000774:	2200      	movs	r2, #0
 8000776:	601a      	str	r2, [r3, #0]
 8000778:	605a      	str	r2, [r3, #4]
 800077a:	609a      	str	r2, [r3, #8]
 800077c:	60da      	str	r2, [r3, #12]
 800077e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	4a25      	ldr	r2, [pc, #148]	@ (800081c <HAL_CAN_MspInit+0xb4>)
 8000786:	4293      	cmp	r3, r2
 8000788:	d143      	bne.n	8000812 <HAL_CAN_MspInit+0xaa>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800078a:	4b25      	ldr	r3, [pc, #148]	@ (8000820 <HAL_CAN_MspInit+0xb8>)
 800078c:	69db      	ldr	r3, [r3, #28]
 800078e:	4a24      	ldr	r2, [pc, #144]	@ (8000820 <HAL_CAN_MspInit+0xb8>)
 8000790:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000794:	61d3      	str	r3, [r2, #28]
 8000796:	4b22      	ldr	r3, [pc, #136]	@ (8000820 <HAL_CAN_MspInit+0xb8>)
 8000798:	69db      	ldr	r3, [r3, #28]
 800079a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800079e:	613b      	str	r3, [r7, #16]
 80007a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a2:	4b1f      	ldr	r3, [pc, #124]	@ (8000820 <HAL_CAN_MspInit+0xb8>)
 80007a4:	695b      	ldr	r3, [r3, #20]
 80007a6:	4a1e      	ldr	r2, [pc, #120]	@ (8000820 <HAL_CAN_MspInit+0xb8>)
 80007a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007ac:	6153      	str	r3, [r2, #20]
 80007ae:	4b1c      	ldr	r3, [pc, #112]	@ (8000820 <HAL_CAN_MspInit+0xb8>)
 80007b0:	695b      	ldr	r3, [r3, #20]
 80007b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80007b6:	60fb      	str	r3, [r7, #12]
 80007b8:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80007ba:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80007be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c0:	2302      	movs	r3, #2
 80007c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007c4:	2301      	movs	r3, #1
 80007c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007c8:	2303      	movs	r3, #3
 80007ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM1;
 80007cc:	2309      	movs	r3, #9
 80007ce:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d0:	f107 0314 	add.w	r3, r7, #20
 80007d4:	4619      	mov	r1, r3
 80007d6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007da:	f001 f8a9 	bl	8001930 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80007de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e4:	2302      	movs	r3, #2
 80007e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e8:	2300      	movs	r3, #0
 80007ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007ec:	2303      	movs	r3, #3
 80007ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM1;
 80007f0:	2309      	movs	r3, #9
 80007f2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007f4:	f107 0314 	add.w	r3, r7, #20
 80007f8:	4619      	mov	r1, r3
 80007fa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007fe:	f001 f897 	bl	8001930 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 5, 0);
 8000802:	2200      	movs	r2, #0
 8000804:	2105      	movs	r1, #5
 8000806:	2014      	movs	r0, #20
 8000808:	f001 f868 	bl	80018dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 800080c:	2014      	movs	r0, #20
 800080e:	f001 f881 	bl	8001914 <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN_MspInit 1 */

  }

}
 8000812:	bf00      	nop
 8000814:	3728      	adds	r7, #40	@ 0x28
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	40006400 	.word	0x40006400
 8000820:	40021000 	.word	0x40021000

08000824 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b08a      	sub	sp, #40	@ 0x28
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800082c:	f107 0314 	add.w	r3, r7, #20
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	60da      	str	r2, [r3, #12]
 800083a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4a17      	ldr	r2, [pc, #92]	@ (80008a0 <HAL_UART_MspInit+0x7c>)
 8000842:	4293      	cmp	r3, r2
 8000844:	d128      	bne.n	8000898 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000846:	4b17      	ldr	r3, [pc, #92]	@ (80008a4 <HAL_UART_MspInit+0x80>)
 8000848:	69db      	ldr	r3, [r3, #28]
 800084a:	4a16      	ldr	r2, [pc, #88]	@ (80008a4 <HAL_UART_MspInit+0x80>)
 800084c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000850:	61d3      	str	r3, [r2, #28]
 8000852:	4b14      	ldr	r3, [pc, #80]	@ (80008a4 <HAL_UART_MspInit+0x80>)
 8000854:	69db      	ldr	r3, [r3, #28]
 8000856:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800085a:	613b      	str	r3, [r7, #16]
 800085c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800085e:	4b11      	ldr	r3, [pc, #68]	@ (80008a4 <HAL_UART_MspInit+0x80>)
 8000860:	695b      	ldr	r3, [r3, #20]
 8000862:	4a10      	ldr	r2, [pc, #64]	@ (80008a4 <HAL_UART_MspInit+0x80>)
 8000864:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000868:	6153      	str	r3, [r2, #20]
 800086a:	4b0e      	ldr	r3, [pc, #56]	@ (80008a4 <HAL_UART_MspInit+0x80>)
 800086c:	695b      	ldr	r3, [r3, #20]
 800086e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000872:	60fb      	str	r3, [r7, #12]
 8000874:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000876:	230c      	movs	r3, #12
 8000878:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800087a:	2302      	movs	r3, #2
 800087c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087e:	2300      	movs	r3, #0
 8000880:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000882:	2300      	movs	r3, #0
 8000884:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000886:	2307      	movs	r3, #7
 8000888:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800088a:	f107 0314 	add.w	r3, r7, #20
 800088e:	4619      	mov	r1, r3
 8000890:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000894:	f001 f84c 	bl	8001930 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000898:	bf00      	nop
 800089a:	3728      	adds	r7, #40	@ 0x28
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	40004400 	.word	0x40004400
 80008a4:	40021000 	.word	0x40021000

080008a8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b08c      	sub	sp, #48	@ 0x30
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80008b0:	2300      	movs	r3, #0
 80008b2:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 80008b4:	2300      	movs	r3, #0
 80008b6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80008b8:	4b2e      	ldr	r3, [pc, #184]	@ (8000974 <HAL_InitTick+0xcc>)
 80008ba:	699b      	ldr	r3, [r3, #24]
 80008bc:	4a2d      	ldr	r2, [pc, #180]	@ (8000974 <HAL_InitTick+0xcc>)
 80008be:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80008c2:	6193      	str	r3, [r2, #24]
 80008c4:	4b2b      	ldr	r3, [pc, #172]	@ (8000974 <HAL_InitTick+0xcc>)
 80008c6:	699b      	ldr	r3, [r3, #24]
 80008c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80008cc:	60bb      	str	r3, [r7, #8]
 80008ce:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008d0:	f107 020c 	add.w	r2, r7, #12
 80008d4:	f107 0310 	add.w	r3, r7, #16
 80008d8:	4611      	mov	r1, r2
 80008da:	4618      	mov	r0, r3
 80008dc:	f002 fc2a 	bl	8003134 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80008e0:	f002 fc06 	bl	80030f0 <HAL_RCC_GetPCLK2Freq>
 80008e4:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80008e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80008e8:	4a23      	ldr	r2, [pc, #140]	@ (8000978 <HAL_InitTick+0xd0>)
 80008ea:	fba2 2303 	umull	r2, r3, r2, r3
 80008ee:	0c9b      	lsrs	r3, r3, #18
 80008f0:	3b01      	subs	r3, #1
 80008f2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80008f4:	4b21      	ldr	r3, [pc, #132]	@ (800097c <HAL_InitTick+0xd4>)
 80008f6:	4a22      	ldr	r2, [pc, #136]	@ (8000980 <HAL_InitTick+0xd8>)
 80008f8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80008fa:	4b20      	ldr	r3, [pc, #128]	@ (800097c <HAL_InitTick+0xd4>)
 80008fc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000900:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000902:	4a1e      	ldr	r2, [pc, #120]	@ (800097c <HAL_InitTick+0xd4>)
 8000904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000906:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000908:	4b1c      	ldr	r3, [pc, #112]	@ (800097c <HAL_InitTick+0xd4>)
 800090a:	2200      	movs	r2, #0
 800090c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800090e:	4b1b      	ldr	r3, [pc, #108]	@ (800097c <HAL_InitTick+0xd4>)
 8000910:	2200      	movs	r2, #0
 8000912:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000914:	4b19      	ldr	r3, [pc, #100]	@ (800097c <HAL_InitTick+0xd4>)
 8000916:	2200      	movs	r2, #0
 8000918:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800091a:	4818      	ldr	r0, [pc, #96]	@ (800097c <HAL_InitTick+0xd4>)
 800091c:	f002 fc3c 	bl	8003198 <HAL_TIM_Base_Init>
 8000920:	4603      	mov	r3, r0
 8000922:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000926:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800092a:	2b00      	cmp	r3, #0
 800092c:	d11b      	bne.n	8000966 <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800092e:	4813      	ldr	r0, [pc, #76]	@ (800097c <HAL_InitTick+0xd4>)
 8000930:	f002 fc94 	bl	800325c <HAL_TIM_Base_Start_IT>
 8000934:	4603      	mov	r3, r0
 8000936:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 800093a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800093e:	2b00      	cmp	r3, #0
 8000940:	d111      	bne.n	8000966 <HAL_InitTick+0xbe>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000942:	2019      	movs	r0, #25
 8000944:	f000 ffe6 	bl	8001914 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	2b0f      	cmp	r3, #15
 800094c:	d808      	bhi.n	8000960 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 800094e:	2200      	movs	r2, #0
 8000950:	6879      	ldr	r1, [r7, #4]
 8000952:	2019      	movs	r0, #25
 8000954:	f000 ffc2 	bl	80018dc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000958:	4a0a      	ldr	r2, [pc, #40]	@ (8000984 <HAL_InitTick+0xdc>)
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	6013      	str	r3, [r2, #0]
 800095e:	e002      	b.n	8000966 <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 8000960:	2301      	movs	r3, #1
 8000962:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000966:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800096a:	4618      	mov	r0, r3
 800096c:	3730      	adds	r7, #48	@ 0x30
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	40021000 	.word	0x40021000
 8000978:	431bde83 	.word	0x431bde83
 800097c:	20000398 	.word	0x20000398
 8000980:	40012c00 	.word	0x40012c00
 8000984:	20000004 	.word	0x20000004

08000988 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800098c:	bf00      	nop
 800098e:	e7fd      	b.n	800098c <NMI_Handler+0x4>

08000990 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000994:	bf00      	nop
 8000996:	e7fd      	b.n	8000994 <HardFault_Handler+0x4>

08000998 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800099c:	bf00      	nop
 800099e:	e7fd      	b.n	800099c <MemManage_Handler+0x4>

080009a0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009a4:	bf00      	nop
 80009a6:	e7fd      	b.n	80009a4 <BusFault_Handler+0x4>

080009a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009ac:	bf00      	nop
 80009ae:	e7fd      	b.n	80009ac <UsageFault_Handler+0x4>

080009b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009b4:	bf00      	nop
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr
	...

080009c0 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles CAN RX0 and USB low priority interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80009c4:	4802      	ldr	r0, [pc, #8]	@ (80009d0 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 80009c6:	f000 fca2 	bl	800130e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 80009ca:	bf00      	nop
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	200002bc 	.word	0x200002bc

080009d4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80009d8:	4802      	ldr	r0, [pc, #8]	@ (80009e4 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80009da:	f002 fc93 	bl	8003304 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80009de:	bf00      	nop
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	20000398 	.word	0x20000398

080009e8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009ec:	4b06      	ldr	r3, [pc, #24]	@ (8000a08 <SystemInit+0x20>)
 80009ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009f2:	4a05      	ldr	r2, [pc, #20]	@ (8000a08 <SystemInit+0x20>)
 80009f4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009f8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009fc:	bf00      	nop
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	e000ed00 	.word	0xe000ed00

08000a0c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a0c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a44 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a10:	f7ff ffea 	bl	80009e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a14:	480c      	ldr	r0, [pc, #48]	@ (8000a48 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a16:	490d      	ldr	r1, [pc, #52]	@ (8000a4c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a18:	4a0d      	ldr	r2, [pc, #52]	@ (8000a50 <LoopForever+0xe>)
  movs r3, #0
 8000a1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a1c:	e002      	b.n	8000a24 <LoopCopyDataInit>

08000a1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a22:	3304      	adds	r3, #4

08000a24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a28:	d3f9      	bcc.n	8000a1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a2a:	4a0a      	ldr	r2, [pc, #40]	@ (8000a54 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a2c:	4c0a      	ldr	r4, [pc, #40]	@ (8000a58 <LoopForever+0x16>)
  movs r3, #0
 8000a2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a30:	e001      	b.n	8000a36 <LoopFillZerobss>

08000a32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a34:	3204      	adds	r2, #4

08000a36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a38:	d3fb      	bcc.n	8000a32 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a3a:	f004 ffbf 	bl	80059bc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a3e:	f7ff fca1 	bl	8000384 <main>

08000a42 <LoopForever>:

LoopForever:
    b LoopForever
 8000a42:	e7fe      	b.n	8000a42 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a44:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000a48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a4c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000a50:	08005af4 	.word	0x08005af4
  ldr r2, =_sbss
 8000a54:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000a58:	20001134 	.word	0x20001134

08000a5c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a5c:	e7fe      	b.n	8000a5c <ADC1_IRQHandler>
	...

08000a60 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a64:	4b08      	ldr	r3, [pc, #32]	@ (8000a88 <HAL_Init+0x28>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a07      	ldr	r2, [pc, #28]	@ (8000a88 <HAL_Init+0x28>)
 8000a6a:	f043 0310 	orr.w	r3, r3, #16
 8000a6e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a70:	2003      	movs	r0, #3
 8000a72:	f000 ff28 	bl	80018c6 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a76:	200f      	movs	r0, #15
 8000a78:	f7ff ff16 	bl	80008a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a7c:	f7ff fe4c 	bl	8000718 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a80:	2300      	movs	r3, #0
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	40022000 	.word	0x40022000

08000a8c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a90:	4b06      	ldr	r3, [pc, #24]	@ (8000aac <HAL_IncTick+0x20>)
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	461a      	mov	r2, r3
 8000a96:	4b06      	ldr	r3, [pc, #24]	@ (8000ab0 <HAL_IncTick+0x24>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	4413      	add	r3, r2
 8000a9c:	4a04      	ldr	r2, [pc, #16]	@ (8000ab0 <HAL_IncTick+0x24>)
 8000a9e:	6013      	str	r3, [r2, #0]
}
 8000aa0:	bf00      	nop
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop
 8000aac:	20000008 	.word	0x20000008
 8000ab0:	200003e4 	.word	0x200003e4

08000ab4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  return uwTick;  
 8000ab8:	4b03      	ldr	r3, [pc, #12]	@ (8000ac8 <HAL_GetTick+0x14>)
 8000aba:	681b      	ldr	r3, [r3, #0]
}
 8000abc:	4618      	mov	r0, r3
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	200003e4 	.word	0x200003e4

08000acc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b084      	sub	sp, #16
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d101      	bne.n	8000ade <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000ada:	2301      	movs	r3, #1
 8000adc:	e0ed      	b.n	8000cba <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ae4:	b2db      	uxtb	r3, r3
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d102      	bne.n	8000af0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000aea:	6878      	ldr	r0, [r7, #4]
 8000aec:	f7ff fe3c 	bl	8000768 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	681a      	ldr	r2, [r3, #0]
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	f042 0201 	orr.w	r2, r2, #1
 8000afe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000b00:	f7ff ffd8 	bl	8000ab4 <HAL_GetTick>
 8000b04:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000b06:	e012      	b.n	8000b2e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000b08:	f7ff ffd4 	bl	8000ab4 <HAL_GetTick>
 8000b0c:	4602      	mov	r2, r0
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	1ad3      	subs	r3, r2, r3
 8000b12:	2b0a      	cmp	r3, #10
 8000b14:	d90b      	bls.n	8000b2e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b1a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	2205      	movs	r2, #5
 8000b26:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	e0c5      	b.n	8000cba <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	685b      	ldr	r3, [r3, #4]
 8000b34:	f003 0301 	and.w	r3, r3, #1
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d0e5      	beq.n	8000b08 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	681a      	ldr	r2, [r3, #0]
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	f022 0202 	bic.w	r2, r2, #2
 8000b4a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000b4c:	f7ff ffb2 	bl	8000ab4 <HAL_GetTick>
 8000b50:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000b52:	e012      	b.n	8000b7a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000b54:	f7ff ffae 	bl	8000ab4 <HAL_GetTick>
 8000b58:	4602      	mov	r2, r0
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	1ad3      	subs	r3, r2, r3
 8000b5e:	2b0a      	cmp	r3, #10
 8000b60:	d90b      	bls.n	8000b7a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b66:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	2205      	movs	r2, #5
 8000b72:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000b76:	2301      	movs	r3, #1
 8000b78:	e09f      	b.n	8000cba <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	685b      	ldr	r3, [r3, #4]
 8000b80:	f003 0302 	and.w	r3, r3, #2
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d1e5      	bne.n	8000b54 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	7e1b      	ldrb	r3, [r3, #24]
 8000b8c:	2b01      	cmp	r3, #1
 8000b8e:	d108      	bne.n	8000ba2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	681a      	ldr	r2, [r3, #0]
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000b9e:	601a      	str	r2, [r3, #0]
 8000ba0:	e007      	b.n	8000bb2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	681a      	ldr	r2, [r3, #0]
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000bb0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	7e5b      	ldrb	r3, [r3, #25]
 8000bb6:	2b01      	cmp	r3, #1
 8000bb8:	d108      	bne.n	8000bcc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	681a      	ldr	r2, [r3, #0]
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000bc8:	601a      	str	r2, [r3, #0]
 8000bca:	e007      	b.n	8000bdc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	681a      	ldr	r2, [r3, #0]
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000bda:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	7e9b      	ldrb	r3, [r3, #26]
 8000be0:	2b01      	cmp	r3, #1
 8000be2:	d108      	bne.n	8000bf6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	681a      	ldr	r2, [r3, #0]
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	f042 0220 	orr.w	r2, r2, #32
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	e007      	b.n	8000c06 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	681a      	ldr	r2, [r3, #0]
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	f022 0220 	bic.w	r2, r2, #32
 8000c04:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	7edb      	ldrb	r3, [r3, #27]
 8000c0a:	2b01      	cmp	r3, #1
 8000c0c:	d108      	bne.n	8000c20 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	681a      	ldr	r2, [r3, #0]
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	f022 0210 	bic.w	r2, r2, #16
 8000c1c:	601a      	str	r2, [r3, #0]
 8000c1e:	e007      	b.n	8000c30 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	681a      	ldr	r2, [r3, #0]
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	f042 0210 	orr.w	r2, r2, #16
 8000c2e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	7f1b      	ldrb	r3, [r3, #28]
 8000c34:	2b01      	cmp	r3, #1
 8000c36:	d108      	bne.n	8000c4a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	681a      	ldr	r2, [r3, #0]
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	f042 0208 	orr.w	r2, r2, #8
 8000c46:	601a      	str	r2, [r3, #0]
 8000c48:	e007      	b.n	8000c5a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	681a      	ldr	r2, [r3, #0]
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	f022 0208 	bic.w	r2, r2, #8
 8000c58:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	7f5b      	ldrb	r3, [r3, #29]
 8000c5e:	2b01      	cmp	r3, #1
 8000c60:	d108      	bne.n	8000c74 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	681a      	ldr	r2, [r3, #0]
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	f042 0204 	orr.w	r2, r2, #4
 8000c70:	601a      	str	r2, [r3, #0]
 8000c72:	e007      	b.n	8000c84 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	681a      	ldr	r2, [r3, #0]
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	f022 0204 	bic.w	r2, r2, #4
 8000c82:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	689a      	ldr	r2, [r3, #8]
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	68db      	ldr	r3, [r3, #12]
 8000c8c:	431a      	orrs	r2, r3
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	691b      	ldr	r3, [r3, #16]
 8000c92:	431a      	orrs	r2, r3
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	695b      	ldr	r3, [r3, #20]
 8000c98:	ea42 0103 	orr.w	r1, r2, r3
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	1e5a      	subs	r2, r3, #1
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	430a      	orrs	r2, r1
 8000ca8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	2200      	movs	r2, #0
 8000cae:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000cb8:	2300      	movs	r3, #0
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	3710      	adds	r7, #16
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}

08000cc2 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000cc2:	b480      	push	{r7}
 8000cc4:	b087      	sub	sp, #28
 8000cc6:	af00      	add	r7, sp, #0
 8000cc8:	6078      	str	r0, [r7, #4]
 8000cca:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000cd8:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000cda:	7cfb      	ldrb	r3, [r7, #19]
 8000cdc:	2b01      	cmp	r3, #1
 8000cde:	d003      	beq.n	8000ce8 <HAL_CAN_ConfigFilter+0x26>
 8000ce0:	7cfb      	ldrb	r3, [r7, #19]
 8000ce2:	2b02      	cmp	r3, #2
 8000ce4:	f040 80aa 	bne.w	8000e3c <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000cee:	f043 0201 	orr.w	r2, r3, #1
 8000cf2:	697b      	ldr	r3, [r7, #20]
 8000cf4:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	695b      	ldr	r3, [r3, #20]
 8000cfc:	f003 031f 	and.w	r3, r3, #31
 8000d00:	2201      	movs	r2, #1
 8000d02:	fa02 f303 	lsl.w	r3, r2, r3
 8000d06:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	43db      	mvns	r3, r3
 8000d12:	401a      	ands	r2, r3
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	69db      	ldr	r3, [r3, #28]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d123      	bne.n	8000d6a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000d22:	697b      	ldr	r3, [r7, #20]
 8000d24:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	43db      	mvns	r3, r3
 8000d2c:	401a      	ands	r2, r3
 8000d2e:	697b      	ldr	r3, [r7, #20]
 8000d30:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	68db      	ldr	r3, [r3, #12]
 8000d38:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000d40:	683a      	ldr	r2, [r7, #0]
 8000d42:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000d44:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000d46:	697b      	ldr	r3, [r7, #20]
 8000d48:	3248      	adds	r2, #72	@ 0x48
 8000d4a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	689b      	ldr	r3, [r3, #8]
 8000d52:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000d5e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d60:	6979      	ldr	r1, [r7, #20]
 8000d62:	3348      	adds	r3, #72	@ 0x48
 8000d64:	00db      	lsls	r3, r3, #3
 8000d66:	440b      	add	r3, r1
 8000d68:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	69db      	ldr	r3, [r3, #28]
 8000d6e:	2b01      	cmp	r3, #1
 8000d70:	d122      	bne.n	8000db8 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	431a      	orrs	r2, r3
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000d8e:	683a      	ldr	r2, [r7, #0]
 8000d90:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000d92:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	3248      	adds	r2, #72	@ 0x48
 8000d98:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	689b      	ldr	r3, [r3, #8]
 8000da0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	68db      	ldr	r3, [r3, #12]
 8000da6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000dac:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000dae:	6979      	ldr	r1, [r7, #20]
 8000db0:	3348      	adds	r3, #72	@ 0x48
 8000db2:	00db      	lsls	r3, r3, #3
 8000db4:	440b      	add	r3, r1
 8000db6:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	699b      	ldr	r3, [r3, #24]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d109      	bne.n	8000dd4 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	43db      	mvns	r3, r3
 8000dca:	401a      	ands	r2, r3
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8000dd2:	e007      	b.n	8000de4 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	431a      	orrs	r2, r3
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	691b      	ldr	r3, [r3, #16]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d109      	bne.n	8000e00 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	43db      	mvns	r3, r3
 8000df6:	401a      	ands	r2, r3
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8000dfe:	e007      	b.n	8000e10 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	431a      	orrs	r2, r3
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	6a1b      	ldr	r3, [r3, #32]
 8000e14:	2b01      	cmp	r3, #1
 8000e16:	d107      	bne.n	8000e28 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	431a      	orrs	r2, r3
 8000e22:	697b      	ldr	r3, [r7, #20]
 8000e24:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000e2e:	f023 0201 	bic.w	r2, r3, #1
 8000e32:	697b      	ldr	r3, [r7, #20]
 8000e34:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	e006      	b.n	8000e4a <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e40:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000e48:	2301      	movs	r3, #1
  }
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	371c      	adds	r7, #28
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr

08000e56 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000e56:	b580      	push	{r7, lr}
 8000e58:	b084      	sub	sp, #16
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e64:	b2db      	uxtb	r3, r3
 8000e66:	2b01      	cmp	r3, #1
 8000e68:	d12e      	bne.n	8000ec8 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	2202      	movs	r2, #2
 8000e6e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	681a      	ldr	r2, [r3, #0]
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f022 0201 	bic.w	r2, r2, #1
 8000e80:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000e82:	f7ff fe17 	bl	8000ab4 <HAL_GetTick>
 8000e86:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000e88:	e012      	b.n	8000eb0 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e8a:	f7ff fe13 	bl	8000ab4 <HAL_GetTick>
 8000e8e:	4602      	mov	r2, r0
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	1ad3      	subs	r3, r2, r3
 8000e94:	2b0a      	cmp	r3, #10
 8000e96:	d90b      	bls.n	8000eb0 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e9c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	2205      	movs	r2, #5
 8000ea8:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000eac:	2301      	movs	r3, #1
 8000eae:	e012      	b.n	8000ed6 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	f003 0301 	and.w	r3, r3, #1
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d1e5      	bne.n	8000e8a <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	e006      	b.n	8000ed6 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ecc:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000ed4:	2301      	movs	r3, #1
  }
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	3710      	adds	r7, #16
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}

08000ede <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8000ede:	b480      	push	{r7}
 8000ee0:	b089      	sub	sp, #36	@ 0x24
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	60f8      	str	r0, [r7, #12]
 8000ee6:	60b9      	str	r1, [r7, #8]
 8000ee8:	607a      	str	r2, [r7, #4]
 8000eea:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ef2:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	689b      	ldr	r3, [r3, #8]
 8000efa:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000efc:	7ffb      	ldrb	r3, [r7, #31]
 8000efe:	2b01      	cmp	r3, #1
 8000f00:	d003      	beq.n	8000f0a <HAL_CAN_AddTxMessage+0x2c>
 8000f02:	7ffb      	ldrb	r3, [r7, #31]
 8000f04:	2b02      	cmp	r3, #2
 8000f06:	f040 80ad 	bne.w	8001064 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000f0a:	69bb      	ldr	r3, [r7, #24]
 8000f0c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d10a      	bne.n	8000f2a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000f14:	69bb      	ldr	r3, [r7, #24]
 8000f16:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d105      	bne.n	8000f2a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000f1e:	69bb      	ldr	r3, [r7, #24]
 8000f20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	f000 8095 	beq.w	8001054 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000f2a:	69bb      	ldr	r3, [r7, #24]
 8000f2c:	0e1b      	lsrs	r3, r3, #24
 8000f2e:	f003 0303 	and.w	r3, r3, #3
 8000f32:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000f34:	2201      	movs	r2, #1
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	409a      	lsls	r2, r3
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000f3e:	68bb      	ldr	r3, [r7, #8]
 8000f40:	689b      	ldr	r3, [r3, #8]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d10d      	bne.n	8000f62 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000f46:	68bb      	ldr	r3, [r7, #8]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000f4c:	68bb      	ldr	r3, [r7, #8]
 8000f4e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000f50:	68f9      	ldr	r1, [r7, #12]
 8000f52:	6809      	ldr	r1, [r1, #0]
 8000f54:	431a      	orrs	r2, r3
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	3318      	adds	r3, #24
 8000f5a:	011b      	lsls	r3, r3, #4
 8000f5c:	440b      	add	r3, r1
 8000f5e:	601a      	str	r2, [r3, #0]
 8000f60:	e00f      	b.n	8000f82 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000f62:	68bb      	ldr	r3, [r7, #8]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000f6c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000f6e:	68bb      	ldr	r3, [r7, #8]
 8000f70:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000f72:	68f9      	ldr	r1, [r7, #12]
 8000f74:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000f76:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	3318      	adds	r3, #24
 8000f7c:	011b      	lsls	r3, r3, #4
 8000f7e:	440b      	add	r3, r1
 8000f80:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	6819      	ldr	r1, [r3, #0]
 8000f86:	68bb      	ldr	r3, [r7, #8]
 8000f88:	691a      	ldr	r2, [r3, #16]
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	3318      	adds	r3, #24
 8000f8e:	011b      	lsls	r3, r3, #4
 8000f90:	440b      	add	r3, r1
 8000f92:	3304      	adds	r3, #4
 8000f94:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000f96:	68bb      	ldr	r3, [r7, #8]
 8000f98:	7d1b      	ldrb	r3, [r3, #20]
 8000f9a:	2b01      	cmp	r3, #1
 8000f9c:	d111      	bne.n	8000fc2 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	697b      	ldr	r3, [r7, #20]
 8000fa4:	3318      	adds	r3, #24
 8000fa6:	011b      	lsls	r3, r3, #4
 8000fa8:	4413      	add	r3, r2
 8000faa:	3304      	adds	r3, #4
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	68fa      	ldr	r2, [r7, #12]
 8000fb0:	6811      	ldr	r1, [r2, #0]
 8000fb2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	3318      	adds	r3, #24
 8000fba:	011b      	lsls	r3, r3, #4
 8000fbc:	440b      	add	r3, r1
 8000fbe:	3304      	adds	r3, #4
 8000fc0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	3307      	adds	r3, #7
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	061a      	lsls	r2, r3, #24
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	3306      	adds	r3, #6
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	041b      	lsls	r3, r3, #16
 8000fd2:	431a      	orrs	r2, r3
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	3305      	adds	r3, #5
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	021b      	lsls	r3, r3, #8
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	687a      	ldr	r2, [r7, #4]
 8000fe0:	3204      	adds	r2, #4
 8000fe2:	7812      	ldrb	r2, [r2, #0]
 8000fe4:	4610      	mov	r0, r2
 8000fe6:	68fa      	ldr	r2, [r7, #12]
 8000fe8:	6811      	ldr	r1, [r2, #0]
 8000fea:	ea43 0200 	orr.w	r2, r3, r0
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	011b      	lsls	r3, r3, #4
 8000ff2:	440b      	add	r3, r1
 8000ff4:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8000ff8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	3303      	adds	r3, #3
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	061a      	lsls	r2, r3, #24
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	3302      	adds	r3, #2
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	041b      	lsls	r3, r3, #16
 800100a:	431a      	orrs	r2, r3
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	3301      	adds	r3, #1
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	021b      	lsls	r3, r3, #8
 8001014:	4313      	orrs	r3, r2
 8001016:	687a      	ldr	r2, [r7, #4]
 8001018:	7812      	ldrb	r2, [r2, #0]
 800101a:	4610      	mov	r0, r2
 800101c:	68fa      	ldr	r2, [r7, #12]
 800101e:	6811      	ldr	r1, [r2, #0]
 8001020:	ea43 0200 	orr.w	r2, r3, r0
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	011b      	lsls	r3, r3, #4
 8001028:	440b      	add	r3, r1
 800102a:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 800102e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	681a      	ldr	r2, [r3, #0]
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	3318      	adds	r3, #24
 8001038:	011b      	lsls	r3, r3, #4
 800103a:	4413      	add	r3, r2
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	68fa      	ldr	r2, [r7, #12]
 8001040:	6811      	ldr	r1, [r2, #0]
 8001042:	f043 0201 	orr.w	r2, r3, #1
 8001046:	697b      	ldr	r3, [r7, #20]
 8001048:	3318      	adds	r3, #24
 800104a:	011b      	lsls	r3, r3, #4
 800104c:	440b      	add	r3, r1
 800104e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001050:	2300      	movs	r3, #0
 8001052:	e00e      	b.n	8001072 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001058:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001060:	2301      	movs	r3, #1
 8001062:	e006      	b.n	8001072 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001068:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001070:	2301      	movs	r3, #1
  }
}
 8001072:	4618      	mov	r0, r3
 8001074:	3724      	adds	r7, #36	@ 0x24
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr

0800107e <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800107e:	b480      	push	{r7}
 8001080:	b087      	sub	sp, #28
 8001082:	af00      	add	r7, sp, #0
 8001084:	60f8      	str	r0, [r7, #12]
 8001086:	60b9      	str	r1, [r7, #8]
 8001088:	607a      	str	r2, [r7, #4]
 800108a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001092:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001094:	7dfb      	ldrb	r3, [r7, #23]
 8001096:	2b01      	cmp	r3, #1
 8001098:	d003      	beq.n	80010a2 <HAL_CAN_GetRxMessage+0x24>
 800109a:	7dfb      	ldrb	r3, [r7, #23]
 800109c:	2b02      	cmp	r3, #2
 800109e:	f040 8103 	bne.w	80012a8 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80010a2:	68bb      	ldr	r3, [r7, #8]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d10e      	bne.n	80010c6 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	68db      	ldr	r3, [r3, #12]
 80010ae:	f003 0303 	and.w	r3, r3, #3
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d116      	bne.n	80010e4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010ba:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80010c2:	2301      	movs	r3, #1
 80010c4:	e0f7      	b.n	80012b6 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	691b      	ldr	r3, [r3, #16]
 80010cc:	f003 0303 	and.w	r3, r3, #3
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d107      	bne.n	80010e4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010d8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80010e0:	2301      	movs	r3, #1
 80010e2:	e0e8      	b.n	80012b6 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	681a      	ldr	r2, [r3, #0]
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	331b      	adds	r3, #27
 80010ec:	011b      	lsls	r3, r3, #4
 80010ee:	4413      	add	r3, r2
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f003 0204 	and.w	r2, r3, #4
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	689b      	ldr	r3, [r3, #8]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d10c      	bne.n	800111c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	68bb      	ldr	r3, [r7, #8]
 8001108:	331b      	adds	r3, #27
 800110a:	011b      	lsls	r3, r3, #4
 800110c:	4413      	add	r3, r2
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	0d5b      	lsrs	r3, r3, #21
 8001112:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	601a      	str	r2, [r3, #0]
 800111a:	e00b      	b.n	8001134 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	331b      	adds	r3, #27
 8001124:	011b      	lsls	r3, r3, #4
 8001126:	4413      	add	r3, r2
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	08db      	lsrs	r3, r3, #3
 800112c:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	681a      	ldr	r2, [r3, #0]
 8001138:	68bb      	ldr	r3, [r7, #8]
 800113a:	331b      	adds	r3, #27
 800113c:	011b      	lsls	r3, r3, #4
 800113e:	4413      	add	r3, r2
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f003 0202 	and.w	r2, r3, #2
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	68bb      	ldr	r3, [r7, #8]
 8001150:	331b      	adds	r3, #27
 8001152:	011b      	lsls	r3, r3, #4
 8001154:	4413      	add	r3, r2
 8001156:	3304      	adds	r3, #4
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f003 0308 	and.w	r3, r3, #8
 800115e:	2b00      	cmp	r3, #0
 8001160:	d003      	beq.n	800116a <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	2208      	movs	r2, #8
 8001166:	611a      	str	r2, [r3, #16]
 8001168:	e00b      	b.n	8001182 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	681a      	ldr	r2, [r3, #0]
 800116e:	68bb      	ldr	r3, [r7, #8]
 8001170:	331b      	adds	r3, #27
 8001172:	011b      	lsls	r3, r3, #4
 8001174:	4413      	add	r3, r2
 8001176:	3304      	adds	r3, #4
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f003 020f 	and.w	r2, r3, #15
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	68bb      	ldr	r3, [r7, #8]
 8001188:	331b      	adds	r3, #27
 800118a:	011b      	lsls	r3, r3, #4
 800118c:	4413      	add	r3, r2
 800118e:	3304      	adds	r3, #4
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	0a1b      	lsrs	r3, r3, #8
 8001194:	b2da      	uxtb	r2, r3
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	68bb      	ldr	r3, [r7, #8]
 80011a0:	331b      	adds	r3, #27
 80011a2:	011b      	lsls	r3, r3, #4
 80011a4:	4413      	add	r3, r2
 80011a6:	3304      	adds	r3, #4
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	0c1b      	lsrs	r3, r3, #16
 80011ac:	b29a      	uxth	r2, r3
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	68bb      	ldr	r3, [r7, #8]
 80011b8:	011b      	lsls	r3, r3, #4
 80011ba:	4413      	add	r3, r2
 80011bc:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	b2da      	uxtb	r2, r3
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	011b      	lsls	r3, r3, #4
 80011d0:	4413      	add	r3, r2
 80011d2:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	0a1a      	lsrs	r2, r3, #8
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	3301      	adds	r3, #1
 80011de:	b2d2      	uxtb	r2, r2
 80011e0:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	681a      	ldr	r2, [r3, #0]
 80011e6:	68bb      	ldr	r3, [r7, #8]
 80011e8:	011b      	lsls	r3, r3, #4
 80011ea:	4413      	add	r3, r2
 80011ec:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	0c1a      	lsrs	r2, r3, #16
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	3302      	adds	r3, #2
 80011f8:	b2d2      	uxtb	r2, r2
 80011fa:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	681a      	ldr	r2, [r3, #0]
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	011b      	lsls	r3, r3, #4
 8001204:	4413      	add	r3, r2
 8001206:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	0e1a      	lsrs	r2, r3, #24
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	3303      	adds	r3, #3
 8001212:	b2d2      	uxtb	r2, r2
 8001214:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	681a      	ldr	r2, [r3, #0]
 800121a:	68bb      	ldr	r3, [r7, #8]
 800121c:	011b      	lsls	r3, r3, #4
 800121e:	4413      	add	r3, r2
 8001220:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001224:	681a      	ldr	r2, [r3, #0]
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	3304      	adds	r3, #4
 800122a:	b2d2      	uxtb	r2, r2
 800122c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	68bb      	ldr	r3, [r7, #8]
 8001234:	011b      	lsls	r3, r3, #4
 8001236:	4413      	add	r3, r2
 8001238:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	0a1a      	lsrs	r2, r3, #8
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	3305      	adds	r3, #5
 8001244:	b2d2      	uxtb	r2, r2
 8001246:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	011b      	lsls	r3, r3, #4
 8001250:	4413      	add	r3, r2
 8001252:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	0c1a      	lsrs	r2, r3, #16
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	3306      	adds	r3, #6
 800125e:	b2d2      	uxtb	r2, r2
 8001260:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	68bb      	ldr	r3, [r7, #8]
 8001268:	011b      	lsls	r3, r3, #4
 800126a:	4413      	add	r3, r2
 800126c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	0e1a      	lsrs	r2, r3, #24
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	3307      	adds	r3, #7
 8001278:	b2d2      	uxtb	r2, r2
 800127a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d108      	bne.n	8001294 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	68da      	ldr	r2, [r3, #12]
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f042 0220 	orr.w	r2, r2, #32
 8001290:	60da      	str	r2, [r3, #12]
 8001292:	e007      	b.n	80012a4 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	691a      	ldr	r2, [r3, #16]
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f042 0220 	orr.w	r2, r2, #32
 80012a2:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80012a4:	2300      	movs	r3, #0
 80012a6:	e006      	b.n	80012b6 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012ac:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80012b4:	2301      	movs	r3, #1
  }
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	371c      	adds	r7, #28
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr

080012c2 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80012c2:	b480      	push	{r7}
 80012c4:	b085      	sub	sp, #20
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	6078      	str	r0, [r7, #4]
 80012ca:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012d2:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80012d4:	7bfb      	ldrb	r3, [r7, #15]
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	d002      	beq.n	80012e0 <HAL_CAN_ActivateNotification+0x1e>
 80012da:	7bfb      	ldrb	r3, [r7, #15]
 80012dc:	2b02      	cmp	r3, #2
 80012de:	d109      	bne.n	80012f4 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	6959      	ldr	r1, [r3, #20]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	683a      	ldr	r2, [r7, #0]
 80012ec:	430a      	orrs	r2, r1
 80012ee:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80012f0:	2300      	movs	r3, #0
 80012f2:	e006      	b.n	8001302 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012f8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001300:	2301      	movs	r3, #1
  }
}
 8001302:	4618      	mov	r0, r3
 8001304:	3714      	adds	r7, #20
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr

0800130e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800130e:	b580      	push	{r7, lr}
 8001310:	b08a      	sub	sp, #40	@ 0x28
 8001312:	af00      	add	r7, sp, #0
 8001314:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001316:	2300      	movs	r3, #0
 8001318:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	695b      	ldr	r3, [r3, #20]
 8001320:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	689b      	ldr	r3, [r3, #8]
 8001330:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	68db      	ldr	r3, [r3, #12]
 8001338:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	691b      	ldr	r3, [r3, #16]
 8001340:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	699b      	ldr	r3, [r3, #24]
 8001348:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800134a:	6a3b      	ldr	r3, [r7, #32]
 800134c:	f003 0301 	and.w	r3, r3, #1
 8001350:	2b00      	cmp	r3, #0
 8001352:	d07c      	beq.n	800144e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001354:	69bb      	ldr	r3, [r7, #24]
 8001356:	f003 0301 	and.w	r3, r3, #1
 800135a:	2b00      	cmp	r3, #0
 800135c:	d023      	beq.n	80013a6 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	2201      	movs	r2, #1
 8001364:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001366:	69bb      	ldr	r3, [r7, #24]
 8001368:	f003 0302 	and.w	r3, r3, #2
 800136c:	2b00      	cmp	r3, #0
 800136e:	d003      	beq.n	8001378 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	f000 f983 	bl	800167c <HAL_CAN_TxMailbox0CompleteCallback>
 8001376:	e016      	b.n	80013a6 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001378:	69bb      	ldr	r3, [r7, #24]
 800137a:	f003 0304 	and.w	r3, r3, #4
 800137e:	2b00      	cmp	r3, #0
 8001380:	d004      	beq.n	800138c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001384:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001388:	627b      	str	r3, [r7, #36]	@ 0x24
 800138a:	e00c      	b.n	80013a6 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800138c:	69bb      	ldr	r3, [r7, #24]
 800138e:	f003 0308 	and.w	r3, r3, #8
 8001392:	2b00      	cmp	r3, #0
 8001394:	d004      	beq.n	80013a0 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001398:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800139c:	627b      	str	r3, [r7, #36]	@ 0x24
 800139e:	e002      	b.n	80013a6 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80013a0:	6878      	ldr	r0, [r7, #4]
 80013a2:	f000 f989 	bl	80016b8 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80013a6:	69bb      	ldr	r3, [r7, #24]
 80013a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d024      	beq.n	80013fa <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80013b8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80013ba:	69bb      	ldr	r3, [r7, #24]
 80013bc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d003      	beq.n	80013cc <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80013c4:	6878      	ldr	r0, [r7, #4]
 80013c6:	f000 f963 	bl	8001690 <HAL_CAN_TxMailbox1CompleteCallback>
 80013ca:	e016      	b.n	80013fa <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80013cc:	69bb      	ldr	r3, [r7, #24]
 80013ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d004      	beq.n	80013e0 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80013d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013d8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80013dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80013de:	e00c      	b.n	80013fa <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80013e0:	69bb      	ldr	r3, [r7, #24]
 80013e2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d004      	beq.n	80013f4 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80013ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013ec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80013f2:	e002      	b.n	80013fa <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80013f4:	6878      	ldr	r0, [r7, #4]
 80013f6:	f000 f969 	bl	80016cc <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80013fa:	69bb      	ldr	r3, [r7, #24]
 80013fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001400:	2b00      	cmp	r3, #0
 8001402:	d024      	beq.n	800144e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800140c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800140e:	69bb      	ldr	r3, [r7, #24]
 8001410:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001414:	2b00      	cmp	r3, #0
 8001416:	d003      	beq.n	8001420 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001418:	6878      	ldr	r0, [r7, #4]
 800141a:	f000 f943 	bl	80016a4 <HAL_CAN_TxMailbox2CompleteCallback>
 800141e:	e016      	b.n	800144e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001420:	69bb      	ldr	r3, [r7, #24]
 8001422:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001426:	2b00      	cmp	r3, #0
 8001428:	d004      	beq.n	8001434 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800142a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800142c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001430:	627b      	str	r3, [r7, #36]	@ 0x24
 8001432:	e00c      	b.n	800144e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001434:	69bb      	ldr	r3, [r7, #24]
 8001436:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800143a:	2b00      	cmp	r3, #0
 800143c:	d004      	beq.n	8001448 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800143e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001440:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001444:	627b      	str	r3, [r7, #36]	@ 0x24
 8001446:	e002      	b.n	800144e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001448:	6878      	ldr	r0, [r7, #4]
 800144a:	f000 f949 	bl	80016e0 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800144e:	6a3b      	ldr	r3, [r7, #32]
 8001450:	f003 0308 	and.w	r3, r3, #8
 8001454:	2b00      	cmp	r3, #0
 8001456:	d00c      	beq.n	8001472 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	f003 0310 	and.w	r3, r3, #16
 800145e:	2b00      	cmp	r3, #0
 8001460:	d007      	beq.n	8001472 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001464:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001468:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	2210      	movs	r2, #16
 8001470:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001472:	6a3b      	ldr	r3, [r7, #32]
 8001474:	f003 0304 	and.w	r3, r3, #4
 8001478:	2b00      	cmp	r3, #0
 800147a:	d00b      	beq.n	8001494 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	f003 0308 	and.w	r3, r3, #8
 8001482:	2b00      	cmp	r3, #0
 8001484:	d006      	beq.n	8001494 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	2208      	movs	r2, #8
 800148c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	f000 f930 	bl	80016f4 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001494:	6a3b      	ldr	r3, [r7, #32]
 8001496:	f003 0302 	and.w	r3, r3, #2
 800149a:	2b00      	cmp	r3, #0
 800149c:	d009      	beq.n	80014b2 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	68db      	ldr	r3, [r3, #12]
 80014a4:	f003 0303 	and.w	r3, r3, #3
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d002      	beq.n	80014b2 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80014ac:	6878      	ldr	r0, [r7, #4]
 80014ae:	f7fe fec1 	bl	8000234 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80014b2:	6a3b      	ldr	r3, [r7, #32]
 80014b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d00c      	beq.n	80014d6 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	f003 0310 	and.w	r3, r3, #16
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d007      	beq.n	80014d6 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80014c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014c8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80014cc:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	2210      	movs	r2, #16
 80014d4:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80014d6:	6a3b      	ldr	r3, [r7, #32]
 80014d8:	f003 0320 	and.w	r3, r3, #32
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d00b      	beq.n	80014f8 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	f003 0308 	and.w	r3, r3, #8
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d006      	beq.n	80014f8 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	2208      	movs	r2, #8
 80014f0:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80014f2:	6878      	ldr	r0, [r7, #4]
 80014f4:	f000 f912 	bl	800171c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80014f8:	6a3b      	ldr	r3, [r7, #32]
 80014fa:	f003 0310 	and.w	r3, r3, #16
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d009      	beq.n	8001516 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	691b      	ldr	r3, [r3, #16]
 8001508:	f003 0303 	and.w	r3, r3, #3
 800150c:	2b00      	cmp	r3, #0
 800150e:	d002      	beq.n	8001516 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001510:	6878      	ldr	r0, [r7, #4]
 8001512:	f000 f8f9 	bl	8001708 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001516:	6a3b      	ldr	r3, [r7, #32]
 8001518:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800151c:	2b00      	cmp	r3, #0
 800151e:	d00b      	beq.n	8001538 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001520:	69fb      	ldr	r3, [r7, #28]
 8001522:	f003 0310 	and.w	r3, r3, #16
 8001526:	2b00      	cmp	r3, #0
 8001528:	d006      	beq.n	8001538 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	2210      	movs	r2, #16
 8001530:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001532:	6878      	ldr	r0, [r7, #4]
 8001534:	f000 f8fc 	bl	8001730 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001538:	6a3b      	ldr	r3, [r7, #32]
 800153a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800153e:	2b00      	cmp	r3, #0
 8001540:	d00b      	beq.n	800155a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	f003 0308 	and.w	r3, r3, #8
 8001548:	2b00      	cmp	r3, #0
 800154a:	d006      	beq.n	800155a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	2208      	movs	r2, #8
 8001552:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001554:	6878      	ldr	r0, [r7, #4]
 8001556:	f000 f8f5 	bl	8001744 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800155a:	6a3b      	ldr	r3, [r7, #32]
 800155c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001560:	2b00      	cmp	r3, #0
 8001562:	d07b      	beq.n	800165c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001564:	69fb      	ldr	r3, [r7, #28]
 8001566:	f003 0304 	and.w	r3, r3, #4
 800156a:	2b00      	cmp	r3, #0
 800156c:	d072      	beq.n	8001654 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800156e:	6a3b      	ldr	r3, [r7, #32]
 8001570:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001574:	2b00      	cmp	r3, #0
 8001576:	d008      	beq.n	800158a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800157e:	2b00      	cmp	r3, #0
 8001580:	d003      	beq.n	800158a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001584:	f043 0301 	orr.w	r3, r3, #1
 8001588:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800158a:	6a3b      	ldr	r3, [r7, #32]
 800158c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001590:	2b00      	cmp	r3, #0
 8001592:	d008      	beq.n	80015a6 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800159a:	2b00      	cmp	r3, #0
 800159c:	d003      	beq.n	80015a6 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800159e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015a0:	f043 0302 	orr.w	r3, r3, #2
 80015a4:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80015a6:	6a3b      	ldr	r3, [r7, #32]
 80015a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d008      	beq.n	80015c2 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d003      	beq.n	80015c2 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80015ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015bc:	f043 0304 	orr.w	r3, r3, #4
 80015c0:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80015c2:	6a3b      	ldr	r3, [r7, #32]
 80015c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d043      	beq.n	8001654 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d03e      	beq.n	8001654 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80015dc:	2b60      	cmp	r3, #96	@ 0x60
 80015de:	d02b      	beq.n	8001638 <HAL_CAN_IRQHandler+0x32a>
 80015e0:	2b60      	cmp	r3, #96	@ 0x60
 80015e2:	d82e      	bhi.n	8001642 <HAL_CAN_IRQHandler+0x334>
 80015e4:	2b50      	cmp	r3, #80	@ 0x50
 80015e6:	d022      	beq.n	800162e <HAL_CAN_IRQHandler+0x320>
 80015e8:	2b50      	cmp	r3, #80	@ 0x50
 80015ea:	d82a      	bhi.n	8001642 <HAL_CAN_IRQHandler+0x334>
 80015ec:	2b40      	cmp	r3, #64	@ 0x40
 80015ee:	d019      	beq.n	8001624 <HAL_CAN_IRQHandler+0x316>
 80015f0:	2b40      	cmp	r3, #64	@ 0x40
 80015f2:	d826      	bhi.n	8001642 <HAL_CAN_IRQHandler+0x334>
 80015f4:	2b30      	cmp	r3, #48	@ 0x30
 80015f6:	d010      	beq.n	800161a <HAL_CAN_IRQHandler+0x30c>
 80015f8:	2b30      	cmp	r3, #48	@ 0x30
 80015fa:	d822      	bhi.n	8001642 <HAL_CAN_IRQHandler+0x334>
 80015fc:	2b10      	cmp	r3, #16
 80015fe:	d002      	beq.n	8001606 <HAL_CAN_IRQHandler+0x2f8>
 8001600:	2b20      	cmp	r3, #32
 8001602:	d005      	beq.n	8001610 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001604:	e01d      	b.n	8001642 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001608:	f043 0308 	orr.w	r3, r3, #8
 800160c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800160e:	e019      	b.n	8001644 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001612:	f043 0310 	orr.w	r3, r3, #16
 8001616:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001618:	e014      	b.n	8001644 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800161a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800161c:	f043 0320 	orr.w	r3, r3, #32
 8001620:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001622:	e00f      	b.n	8001644 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001626:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800162a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800162c:	e00a      	b.n	8001644 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800162e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001630:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001634:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001636:	e005      	b.n	8001644 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800163a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800163e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001640:	e000      	b.n	8001644 <HAL_CAN_IRQHandler+0x336>
            break;
 8001642:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	699a      	ldr	r2, [r3, #24]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001652:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	2204      	movs	r2, #4
 800165a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800165c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800165e:	2b00      	cmp	r3, #0
 8001660:	d008      	beq.n	8001674 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001668:	431a      	orrs	r2, r3
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800166e:	6878      	ldr	r0, [r7, #4]
 8001670:	f000 f872 	bl	8001758 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001674:	bf00      	nop
 8001676:	3728      	adds	r7, #40	@ 0x28
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}

0800167c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001684:	bf00      	nop
 8001686:	370c      	adds	r7, #12
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr

08001690 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001698:	bf00      	nop
 800169a:	370c      	adds	r7, #12
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr

080016a4 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b083      	sub	sp, #12
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80016ac:	bf00      	nop
 80016ae:	370c      	adds	r7, #12
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr

080016b8 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80016c0:	bf00      	nop
 80016c2:	370c      	adds	r7, #12
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr

080016cc <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80016d4:	bf00      	nop
 80016d6:	370c      	adds	r7, #12
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr

080016e0 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80016e8:	bf00      	nop
 80016ea:	370c      	adds	r7, #12
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr

080016f4 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80016fc:	bf00      	nop
 80016fe:	370c      	adds	r7, #12
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr

08001708 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001710:	bf00      	nop
 8001712:	370c      	adds	r7, #12
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr

0800171c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001724:	bf00      	nop
 8001726:	370c      	adds	r7, #12
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr

08001730 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001738:	bf00      	nop
 800173a:	370c      	adds	r7, #12
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr

08001744 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800174c:	bf00      	nop
 800174e:	370c      	adds	r7, #12
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr

08001758 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001760:	bf00      	nop
 8001762:	370c      	adds	r7, #12
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr

0800176c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800176c:	b480      	push	{r7}
 800176e:	b085      	sub	sp, #20
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	f003 0307 	and.w	r3, r3, #7
 800177a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800177c:	4b0c      	ldr	r3, [pc, #48]	@ (80017b0 <__NVIC_SetPriorityGrouping+0x44>)
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001782:	68ba      	ldr	r2, [r7, #8]
 8001784:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001788:	4013      	ands	r3, r2
 800178a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001794:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001798:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800179c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800179e:	4a04      	ldr	r2, [pc, #16]	@ (80017b0 <__NVIC_SetPriorityGrouping+0x44>)
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	60d3      	str	r3, [r2, #12]
}
 80017a4:	bf00      	nop
 80017a6:	3714      	adds	r7, #20
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr
 80017b0:	e000ed00 	.word	0xe000ed00

080017b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017b8:	4b04      	ldr	r3, [pc, #16]	@ (80017cc <__NVIC_GetPriorityGrouping+0x18>)
 80017ba:	68db      	ldr	r3, [r3, #12]
 80017bc:	0a1b      	lsrs	r3, r3, #8
 80017be:	f003 0307 	and.w	r3, r3, #7
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr
 80017cc:	e000ed00 	.word	0xe000ed00

080017d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	4603      	mov	r3, r0
 80017d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	db0b      	blt.n	80017fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017e2:	79fb      	ldrb	r3, [r7, #7]
 80017e4:	f003 021f 	and.w	r2, r3, #31
 80017e8:	4907      	ldr	r1, [pc, #28]	@ (8001808 <__NVIC_EnableIRQ+0x38>)
 80017ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ee:	095b      	lsrs	r3, r3, #5
 80017f0:	2001      	movs	r0, #1
 80017f2:	fa00 f202 	lsl.w	r2, r0, r2
 80017f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017fa:	bf00      	nop
 80017fc:	370c      	adds	r7, #12
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	e000e100 	.word	0xe000e100

0800180c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	4603      	mov	r3, r0
 8001814:	6039      	str	r1, [r7, #0]
 8001816:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001818:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800181c:	2b00      	cmp	r3, #0
 800181e:	db0a      	blt.n	8001836 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	b2da      	uxtb	r2, r3
 8001824:	490c      	ldr	r1, [pc, #48]	@ (8001858 <__NVIC_SetPriority+0x4c>)
 8001826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800182a:	0112      	lsls	r2, r2, #4
 800182c:	b2d2      	uxtb	r2, r2
 800182e:	440b      	add	r3, r1
 8001830:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001834:	e00a      	b.n	800184c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	b2da      	uxtb	r2, r3
 800183a:	4908      	ldr	r1, [pc, #32]	@ (800185c <__NVIC_SetPriority+0x50>)
 800183c:	79fb      	ldrb	r3, [r7, #7]
 800183e:	f003 030f 	and.w	r3, r3, #15
 8001842:	3b04      	subs	r3, #4
 8001844:	0112      	lsls	r2, r2, #4
 8001846:	b2d2      	uxtb	r2, r2
 8001848:	440b      	add	r3, r1
 800184a:	761a      	strb	r2, [r3, #24]
}
 800184c:	bf00      	nop
 800184e:	370c      	adds	r7, #12
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr
 8001858:	e000e100 	.word	0xe000e100
 800185c:	e000ed00 	.word	0xe000ed00

08001860 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001860:	b480      	push	{r7}
 8001862:	b089      	sub	sp, #36	@ 0x24
 8001864:	af00      	add	r7, sp, #0
 8001866:	60f8      	str	r0, [r7, #12]
 8001868:	60b9      	str	r1, [r7, #8]
 800186a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	f003 0307 	and.w	r3, r3, #7
 8001872:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001874:	69fb      	ldr	r3, [r7, #28]
 8001876:	f1c3 0307 	rsb	r3, r3, #7
 800187a:	2b04      	cmp	r3, #4
 800187c:	bf28      	it	cs
 800187e:	2304      	movcs	r3, #4
 8001880:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	3304      	adds	r3, #4
 8001886:	2b06      	cmp	r3, #6
 8001888:	d902      	bls.n	8001890 <NVIC_EncodePriority+0x30>
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	3b03      	subs	r3, #3
 800188e:	e000      	b.n	8001892 <NVIC_EncodePriority+0x32>
 8001890:	2300      	movs	r3, #0
 8001892:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001894:	f04f 32ff 	mov.w	r2, #4294967295
 8001898:	69bb      	ldr	r3, [r7, #24]
 800189a:	fa02 f303 	lsl.w	r3, r2, r3
 800189e:	43da      	mvns	r2, r3
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	401a      	ands	r2, r3
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018a8:	f04f 31ff 	mov.w	r1, #4294967295
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	fa01 f303 	lsl.w	r3, r1, r3
 80018b2:	43d9      	mvns	r1, r3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018b8:	4313      	orrs	r3, r2
         );
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3724      	adds	r7, #36	@ 0x24
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr

080018c6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018c6:	b580      	push	{r7, lr}
 80018c8:	b082      	sub	sp, #8
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018ce:	6878      	ldr	r0, [r7, #4]
 80018d0:	f7ff ff4c 	bl	800176c <__NVIC_SetPriorityGrouping>
}
 80018d4:	bf00      	nop
 80018d6:	3708      	adds	r7, #8
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}

080018dc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b086      	sub	sp, #24
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	4603      	mov	r3, r0
 80018e4:	60b9      	str	r1, [r7, #8]
 80018e6:	607a      	str	r2, [r7, #4]
 80018e8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018ea:	2300      	movs	r3, #0
 80018ec:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018ee:	f7ff ff61 	bl	80017b4 <__NVIC_GetPriorityGrouping>
 80018f2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018f4:	687a      	ldr	r2, [r7, #4]
 80018f6:	68b9      	ldr	r1, [r7, #8]
 80018f8:	6978      	ldr	r0, [r7, #20]
 80018fa:	f7ff ffb1 	bl	8001860 <NVIC_EncodePriority>
 80018fe:	4602      	mov	r2, r0
 8001900:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001904:	4611      	mov	r1, r2
 8001906:	4618      	mov	r0, r3
 8001908:	f7ff ff80 	bl	800180c <__NVIC_SetPriority>
}
 800190c:	bf00      	nop
 800190e:	3718      	adds	r7, #24
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}

08001914 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
 800191a:	4603      	mov	r3, r0
 800191c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800191e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001922:	4618      	mov	r0, r3
 8001924:	f7ff ff54 	bl	80017d0 <__NVIC_EnableIRQ>
}
 8001928:	bf00      	nop
 800192a:	3708      	adds	r7, #8
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}

08001930 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001930:	b480      	push	{r7}
 8001932:	b087      	sub	sp, #28
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800193a:	2300      	movs	r3, #0
 800193c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800193e:	e14e      	b.n	8001bde <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	2101      	movs	r1, #1
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	fa01 f303 	lsl.w	r3, r1, r3
 800194c:	4013      	ands	r3, r2
 800194e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	2b00      	cmp	r3, #0
 8001954:	f000 8140 	beq.w	8001bd8 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f003 0303 	and.w	r3, r3, #3
 8001960:	2b01      	cmp	r3, #1
 8001962:	d005      	beq.n	8001970 <HAL_GPIO_Init+0x40>
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f003 0303 	and.w	r3, r3, #3
 800196c:	2b02      	cmp	r3, #2
 800196e:	d130      	bne.n	80019d2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	005b      	lsls	r3, r3, #1
 800197a:	2203      	movs	r2, #3
 800197c:	fa02 f303 	lsl.w	r3, r2, r3
 8001980:	43db      	mvns	r3, r3
 8001982:	693a      	ldr	r2, [r7, #16]
 8001984:	4013      	ands	r3, r2
 8001986:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	68da      	ldr	r2, [r3, #12]
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	005b      	lsls	r3, r3, #1
 8001990:	fa02 f303 	lsl.w	r3, r2, r3
 8001994:	693a      	ldr	r2, [r7, #16]
 8001996:	4313      	orrs	r3, r2
 8001998:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	693a      	ldr	r2, [r7, #16]
 800199e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019a6:	2201      	movs	r2, #1
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	fa02 f303 	lsl.w	r3, r2, r3
 80019ae:	43db      	mvns	r3, r3
 80019b0:	693a      	ldr	r2, [r7, #16]
 80019b2:	4013      	ands	r3, r2
 80019b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	091b      	lsrs	r3, r3, #4
 80019bc:	f003 0201 	and.w	r2, r3, #1
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	fa02 f303 	lsl.w	r3, r2, r3
 80019c6:	693a      	ldr	r2, [r7, #16]
 80019c8:	4313      	orrs	r3, r2
 80019ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	693a      	ldr	r2, [r7, #16]
 80019d0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	f003 0303 	and.w	r3, r3, #3
 80019da:	2b03      	cmp	r3, #3
 80019dc:	d017      	beq.n	8001a0e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	68db      	ldr	r3, [r3, #12]
 80019e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	005b      	lsls	r3, r3, #1
 80019e8:	2203      	movs	r2, #3
 80019ea:	fa02 f303 	lsl.w	r3, r2, r3
 80019ee:	43db      	mvns	r3, r3
 80019f0:	693a      	ldr	r2, [r7, #16]
 80019f2:	4013      	ands	r3, r2
 80019f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	689a      	ldr	r2, [r3, #8]
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	005b      	lsls	r3, r3, #1
 80019fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001a02:	693a      	ldr	r2, [r7, #16]
 8001a04:	4313      	orrs	r3, r2
 8001a06:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	693a      	ldr	r2, [r7, #16]
 8001a0c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	f003 0303 	and.w	r3, r3, #3
 8001a16:	2b02      	cmp	r3, #2
 8001a18:	d123      	bne.n	8001a62 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	08da      	lsrs	r2, r3, #3
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	3208      	adds	r2, #8
 8001a22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a26:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	f003 0307 	and.w	r3, r3, #7
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	220f      	movs	r2, #15
 8001a32:	fa02 f303 	lsl.w	r3, r2, r3
 8001a36:	43db      	mvns	r3, r3
 8001a38:	693a      	ldr	r2, [r7, #16]
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	691a      	ldr	r2, [r3, #16]
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	f003 0307 	and.w	r3, r3, #7
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4e:	693a      	ldr	r2, [r7, #16]
 8001a50:	4313      	orrs	r3, r2
 8001a52:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	08da      	lsrs	r2, r3, #3
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	3208      	adds	r2, #8
 8001a5c:	6939      	ldr	r1, [r7, #16]
 8001a5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	005b      	lsls	r3, r3, #1
 8001a6c:	2203      	movs	r2, #3
 8001a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a72:	43db      	mvns	r3, r3
 8001a74:	693a      	ldr	r2, [r7, #16]
 8001a76:	4013      	ands	r3, r2
 8001a78:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	f003 0203 	and.w	r2, r3, #3
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	005b      	lsls	r3, r3, #1
 8001a86:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8a:	693a      	ldr	r2, [r7, #16]
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	693a      	ldr	r2, [r7, #16]
 8001a94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	f000 809a 	beq.w	8001bd8 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aa4:	4b55      	ldr	r3, [pc, #340]	@ (8001bfc <HAL_GPIO_Init+0x2cc>)
 8001aa6:	699b      	ldr	r3, [r3, #24]
 8001aa8:	4a54      	ldr	r2, [pc, #336]	@ (8001bfc <HAL_GPIO_Init+0x2cc>)
 8001aaa:	f043 0301 	orr.w	r3, r3, #1
 8001aae:	6193      	str	r3, [r2, #24]
 8001ab0:	4b52      	ldr	r3, [pc, #328]	@ (8001bfc <HAL_GPIO_Init+0x2cc>)
 8001ab2:	699b      	ldr	r3, [r3, #24]
 8001ab4:	f003 0301 	and.w	r3, r3, #1
 8001ab8:	60bb      	str	r3, [r7, #8]
 8001aba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001abc:	4a50      	ldr	r2, [pc, #320]	@ (8001c00 <HAL_GPIO_Init+0x2d0>)
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	089b      	lsrs	r3, r3, #2
 8001ac2:	3302      	adds	r3, #2
 8001ac4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ac8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	f003 0303 	and.w	r3, r3, #3
 8001ad0:	009b      	lsls	r3, r3, #2
 8001ad2:	220f      	movs	r2, #15
 8001ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad8:	43db      	mvns	r3, r3
 8001ada:	693a      	ldr	r2, [r7, #16]
 8001adc:	4013      	ands	r3, r2
 8001ade:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001ae6:	d013      	beq.n	8001b10 <HAL_GPIO_Init+0x1e0>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	4a46      	ldr	r2, [pc, #280]	@ (8001c04 <HAL_GPIO_Init+0x2d4>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d00d      	beq.n	8001b0c <HAL_GPIO_Init+0x1dc>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	4a45      	ldr	r2, [pc, #276]	@ (8001c08 <HAL_GPIO_Init+0x2d8>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d007      	beq.n	8001b08 <HAL_GPIO_Init+0x1d8>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	4a44      	ldr	r2, [pc, #272]	@ (8001c0c <HAL_GPIO_Init+0x2dc>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d101      	bne.n	8001b04 <HAL_GPIO_Init+0x1d4>
 8001b00:	2303      	movs	r3, #3
 8001b02:	e006      	b.n	8001b12 <HAL_GPIO_Init+0x1e2>
 8001b04:	2305      	movs	r3, #5
 8001b06:	e004      	b.n	8001b12 <HAL_GPIO_Init+0x1e2>
 8001b08:	2302      	movs	r3, #2
 8001b0a:	e002      	b.n	8001b12 <HAL_GPIO_Init+0x1e2>
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	e000      	b.n	8001b12 <HAL_GPIO_Init+0x1e2>
 8001b10:	2300      	movs	r3, #0
 8001b12:	697a      	ldr	r2, [r7, #20]
 8001b14:	f002 0203 	and.w	r2, r2, #3
 8001b18:	0092      	lsls	r2, r2, #2
 8001b1a:	4093      	lsls	r3, r2
 8001b1c:	693a      	ldr	r2, [r7, #16]
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b22:	4937      	ldr	r1, [pc, #220]	@ (8001c00 <HAL_GPIO_Init+0x2d0>)
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	089b      	lsrs	r3, r3, #2
 8001b28:	3302      	adds	r3, #2
 8001b2a:	693a      	ldr	r2, [r7, #16]
 8001b2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b30:	4b37      	ldr	r3, [pc, #220]	@ (8001c10 <HAL_GPIO_Init+0x2e0>)
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	43db      	mvns	r3, r3
 8001b3a:	693a      	ldr	r2, [r7, #16]
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d003      	beq.n	8001b54 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001b4c:	693a      	ldr	r2, [r7, #16]
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	4313      	orrs	r3, r2
 8001b52:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001b54:	4a2e      	ldr	r2, [pc, #184]	@ (8001c10 <HAL_GPIO_Init+0x2e0>)
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b5a:	4b2d      	ldr	r3, [pc, #180]	@ (8001c10 <HAL_GPIO_Init+0x2e0>)
 8001b5c:	68db      	ldr	r3, [r3, #12]
 8001b5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	43db      	mvns	r3, r3
 8001b64:	693a      	ldr	r2, [r7, #16]
 8001b66:	4013      	ands	r3, r2
 8001b68:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d003      	beq.n	8001b7e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001b76:	693a      	ldr	r2, [r7, #16]
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001b7e:	4a24      	ldr	r2, [pc, #144]	@ (8001c10 <HAL_GPIO_Init+0x2e0>)
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b84:	4b22      	ldr	r3, [pc, #136]	@ (8001c10 <HAL_GPIO_Init+0x2e0>)
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	43db      	mvns	r3, r3
 8001b8e:	693a      	ldr	r2, [r7, #16]
 8001b90:	4013      	ands	r3, r2
 8001b92:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d003      	beq.n	8001ba8 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001ba0:	693a      	ldr	r2, [r7, #16]
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001ba8:	4a19      	ldr	r2, [pc, #100]	@ (8001c10 <HAL_GPIO_Init+0x2e0>)
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bae:	4b18      	ldr	r3, [pc, #96]	@ (8001c10 <HAL_GPIO_Init+0x2e0>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	43db      	mvns	r3, r3
 8001bb8:	693a      	ldr	r2, [r7, #16]
 8001bba:	4013      	ands	r3, r2
 8001bbc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d003      	beq.n	8001bd2 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001bca:	693a      	ldr	r2, [r7, #16]
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001bd2:	4a0f      	ldr	r2, [pc, #60]	@ (8001c10 <HAL_GPIO_Init+0x2e0>)
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	3301      	adds	r3, #1
 8001bdc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	fa22 f303 	lsr.w	r3, r2, r3
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	f47f aea9 	bne.w	8001940 <HAL_GPIO_Init+0x10>
  }
}
 8001bee:	bf00      	nop
 8001bf0:	bf00      	nop
 8001bf2:	371c      	adds	r7, #28
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr
 8001bfc:	40021000 	.word	0x40021000
 8001c00:	40010000 	.word	0x40010000
 8001c04:	48000400 	.word	0x48000400
 8001c08:	48000800 	.word	0x48000800
 8001c0c:	48000c00 	.word	0x48000c00
 8001c10:	40010400 	.word	0x40010400

08001c14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	460b      	mov	r3, r1
 8001c1e:	807b      	strh	r3, [r7, #2]
 8001c20:	4613      	mov	r3, r2
 8001c22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c24:	787b      	ldrb	r3, [r7, #1]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d003      	beq.n	8001c32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c2a:	887a      	ldrh	r2, [r7, #2]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c30:	e002      	b.n	8001c38 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c32:	887a      	ldrh	r2, [r7, #2]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001c38:	bf00      	nop
 8001c3a:	370c      	adds	r7, #12
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr

08001c44 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b085      	sub	sp, #20
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
 8001c4c:	460b      	mov	r3, r1
 8001c4e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	695b      	ldr	r3, [r3, #20]
 8001c54:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c56:	887a      	ldrh	r2, [r7, #2]
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	041a      	lsls	r2, r3, #16
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	43d9      	mvns	r1, r3
 8001c62:	887b      	ldrh	r3, [r7, #2]
 8001c64:	400b      	ands	r3, r1
 8001c66:	431a      	orrs	r2, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	619a      	str	r2, [r3, #24]
}
 8001c6c:	bf00      	nop
 8001c6e:	3714      	adds	r7, #20
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr

08001c78 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c84:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c88:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c8a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c8e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d102      	bne.n	8001c9e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	f001 b823 	b.w	8002ce4 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ca2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 0301 	and.w	r3, r3, #1
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	f000 817d 	beq.w	8001fae <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001cb4:	4bbc      	ldr	r3, [pc, #752]	@ (8001fa8 <HAL_RCC_OscConfig+0x330>)
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f003 030c 	and.w	r3, r3, #12
 8001cbc:	2b04      	cmp	r3, #4
 8001cbe:	d00c      	beq.n	8001cda <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001cc0:	4bb9      	ldr	r3, [pc, #740]	@ (8001fa8 <HAL_RCC_OscConfig+0x330>)
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f003 030c 	and.w	r3, r3, #12
 8001cc8:	2b08      	cmp	r3, #8
 8001cca:	d15c      	bne.n	8001d86 <HAL_RCC_OscConfig+0x10e>
 8001ccc:	4bb6      	ldr	r3, [pc, #728]	@ (8001fa8 <HAL_RCC_OscConfig+0x330>)
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cd4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001cd8:	d155      	bne.n	8001d86 <HAL_RCC_OscConfig+0x10e>
 8001cda:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001cde:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ce2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8001ce6:	fa93 f3a3 	rbit	r3, r3
 8001cea:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001cee:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cf2:	fab3 f383 	clz	r3, r3
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	095b      	lsrs	r3, r3, #5
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	f043 0301 	orr.w	r3, r3, #1
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d102      	bne.n	8001d0c <HAL_RCC_OscConfig+0x94>
 8001d06:	4ba8      	ldr	r3, [pc, #672]	@ (8001fa8 <HAL_RCC_OscConfig+0x330>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	e015      	b.n	8001d38 <HAL_RCC_OscConfig+0xc0>
 8001d0c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001d10:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d14:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8001d18:	fa93 f3a3 	rbit	r3, r3
 8001d1c:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8001d20:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001d24:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001d28:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8001d2c:	fa93 f3a3 	rbit	r3, r3
 8001d30:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8001d34:	4b9c      	ldr	r3, [pc, #624]	@ (8001fa8 <HAL_RCC_OscConfig+0x330>)
 8001d36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d38:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001d3c:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8001d40:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8001d44:	fa92 f2a2 	rbit	r2, r2
 8001d48:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8001d4c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8001d50:	fab2 f282 	clz	r2, r2
 8001d54:	b2d2      	uxtb	r2, r2
 8001d56:	f042 0220 	orr.w	r2, r2, #32
 8001d5a:	b2d2      	uxtb	r2, r2
 8001d5c:	f002 021f 	and.w	r2, r2, #31
 8001d60:	2101      	movs	r1, #1
 8001d62:	fa01 f202 	lsl.w	r2, r1, r2
 8001d66:	4013      	ands	r3, r2
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	f000 811f 	beq.w	8001fac <HAL_RCC_OscConfig+0x334>
 8001d6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d72:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	f040 8116 	bne.w	8001fac <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	f000 bfaf 	b.w	8002ce4 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d8a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d96:	d106      	bne.n	8001da6 <HAL_RCC_OscConfig+0x12e>
 8001d98:	4b83      	ldr	r3, [pc, #524]	@ (8001fa8 <HAL_RCC_OscConfig+0x330>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a82      	ldr	r2, [pc, #520]	@ (8001fa8 <HAL_RCC_OscConfig+0x330>)
 8001d9e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001da2:	6013      	str	r3, [r2, #0]
 8001da4:	e036      	b.n	8001e14 <HAL_RCC_OscConfig+0x19c>
 8001da6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001daa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d10c      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x158>
 8001db6:	4b7c      	ldr	r3, [pc, #496]	@ (8001fa8 <HAL_RCC_OscConfig+0x330>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a7b      	ldr	r2, [pc, #492]	@ (8001fa8 <HAL_RCC_OscConfig+0x330>)
 8001dbc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001dc0:	6013      	str	r3, [r2, #0]
 8001dc2:	4b79      	ldr	r3, [pc, #484]	@ (8001fa8 <HAL_RCC_OscConfig+0x330>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a78      	ldr	r2, [pc, #480]	@ (8001fa8 <HAL_RCC_OscConfig+0x330>)
 8001dc8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001dcc:	6013      	str	r3, [r2, #0]
 8001dce:	e021      	b.n	8001e14 <HAL_RCC_OscConfig+0x19c>
 8001dd0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dd4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001de0:	d10c      	bne.n	8001dfc <HAL_RCC_OscConfig+0x184>
 8001de2:	4b71      	ldr	r3, [pc, #452]	@ (8001fa8 <HAL_RCC_OscConfig+0x330>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a70      	ldr	r2, [pc, #448]	@ (8001fa8 <HAL_RCC_OscConfig+0x330>)
 8001de8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001dec:	6013      	str	r3, [r2, #0]
 8001dee:	4b6e      	ldr	r3, [pc, #440]	@ (8001fa8 <HAL_RCC_OscConfig+0x330>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a6d      	ldr	r2, [pc, #436]	@ (8001fa8 <HAL_RCC_OscConfig+0x330>)
 8001df4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001df8:	6013      	str	r3, [r2, #0]
 8001dfa:	e00b      	b.n	8001e14 <HAL_RCC_OscConfig+0x19c>
 8001dfc:	4b6a      	ldr	r3, [pc, #424]	@ (8001fa8 <HAL_RCC_OscConfig+0x330>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a69      	ldr	r2, [pc, #420]	@ (8001fa8 <HAL_RCC_OscConfig+0x330>)
 8001e02:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e06:	6013      	str	r3, [r2, #0]
 8001e08:	4b67      	ldr	r3, [pc, #412]	@ (8001fa8 <HAL_RCC_OscConfig+0x330>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a66      	ldr	r2, [pc, #408]	@ (8001fa8 <HAL_RCC_OscConfig+0x330>)
 8001e0e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e12:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e14:	4b64      	ldr	r3, [pc, #400]	@ (8001fa8 <HAL_RCC_OscConfig+0x330>)
 8001e16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e18:	f023 020f 	bic.w	r2, r3, #15
 8001e1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e20:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	495f      	ldr	r1, [pc, #380]	@ (8001fa8 <HAL_RCC_OscConfig+0x330>)
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e32:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d059      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e3e:	f7fe fe39 	bl	8000ab4 <HAL_GetTick>
 8001e42:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e46:	e00a      	b.n	8001e5e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e48:	f7fe fe34 	bl	8000ab4 <HAL_GetTick>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001e52:	1ad3      	subs	r3, r2, r3
 8001e54:	2b64      	cmp	r3, #100	@ 0x64
 8001e56:	d902      	bls.n	8001e5e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001e58:	2303      	movs	r3, #3
 8001e5a:	f000 bf43 	b.w	8002ce4 <HAL_RCC_OscConfig+0x106c>
 8001e5e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001e62:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e66:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001e6a:	fa93 f3a3 	rbit	r3, r3
 8001e6e:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8001e72:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e76:	fab3 f383 	clz	r3, r3
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	095b      	lsrs	r3, r3, #5
 8001e7e:	b2db      	uxtb	r3, r3
 8001e80:	f043 0301 	orr.w	r3, r3, #1
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d102      	bne.n	8001e90 <HAL_RCC_OscConfig+0x218>
 8001e8a:	4b47      	ldr	r3, [pc, #284]	@ (8001fa8 <HAL_RCC_OscConfig+0x330>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	e015      	b.n	8001ebc <HAL_RCC_OscConfig+0x244>
 8001e90:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001e94:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e98:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8001e9c:	fa93 f3a3 	rbit	r3, r3
 8001ea0:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001ea4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001ea8:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001eac:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8001eb0:	fa93 f3a3 	rbit	r3, r3
 8001eb4:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8001eb8:	4b3b      	ldr	r3, [pc, #236]	@ (8001fa8 <HAL_RCC_OscConfig+0x330>)
 8001eba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ebc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001ec0:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8001ec4:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8001ec8:	fa92 f2a2 	rbit	r2, r2
 8001ecc:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8001ed0:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8001ed4:	fab2 f282 	clz	r2, r2
 8001ed8:	b2d2      	uxtb	r2, r2
 8001eda:	f042 0220 	orr.w	r2, r2, #32
 8001ede:	b2d2      	uxtb	r2, r2
 8001ee0:	f002 021f 	and.w	r2, r2, #31
 8001ee4:	2101      	movs	r1, #1
 8001ee6:	fa01 f202 	lsl.w	r2, r1, r2
 8001eea:	4013      	ands	r3, r2
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d0ab      	beq.n	8001e48 <HAL_RCC_OscConfig+0x1d0>
 8001ef0:	e05d      	b.n	8001fae <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ef2:	f7fe fddf 	bl	8000ab4 <HAL_GetTick>
 8001ef6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001efa:	e00a      	b.n	8001f12 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001efc:	f7fe fdda 	bl	8000ab4 <HAL_GetTick>
 8001f00:	4602      	mov	r2, r0
 8001f02:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001f06:	1ad3      	subs	r3, r2, r3
 8001f08:	2b64      	cmp	r3, #100	@ 0x64
 8001f0a:	d902      	bls.n	8001f12 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001f0c:	2303      	movs	r3, #3
 8001f0e:	f000 bee9 	b.w	8002ce4 <HAL_RCC_OscConfig+0x106c>
 8001f12:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001f16:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f1a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8001f1e:	fa93 f3a3 	rbit	r3, r3
 8001f22:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8001f26:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f2a:	fab3 f383 	clz	r3, r3
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	095b      	lsrs	r3, r3, #5
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	f043 0301 	orr.w	r3, r3, #1
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d102      	bne.n	8001f44 <HAL_RCC_OscConfig+0x2cc>
 8001f3e:	4b1a      	ldr	r3, [pc, #104]	@ (8001fa8 <HAL_RCC_OscConfig+0x330>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	e015      	b.n	8001f70 <HAL_RCC_OscConfig+0x2f8>
 8001f44:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001f48:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f4c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8001f50:	fa93 f3a3 	rbit	r3, r3
 8001f54:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001f58:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001f5c:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001f60:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8001f64:	fa93 f3a3 	rbit	r3, r3
 8001f68:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8001f6c:	4b0e      	ldr	r3, [pc, #56]	@ (8001fa8 <HAL_RCC_OscConfig+0x330>)
 8001f6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f70:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001f74:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8001f78:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001f7c:	fa92 f2a2 	rbit	r2, r2
 8001f80:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8001f84:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001f88:	fab2 f282 	clz	r2, r2
 8001f8c:	b2d2      	uxtb	r2, r2
 8001f8e:	f042 0220 	orr.w	r2, r2, #32
 8001f92:	b2d2      	uxtb	r2, r2
 8001f94:	f002 021f 	and.w	r2, r2, #31
 8001f98:	2101      	movs	r1, #1
 8001f9a:	fa01 f202 	lsl.w	r2, r1, r2
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d1ab      	bne.n	8001efc <HAL_RCC_OscConfig+0x284>
 8001fa4:	e003      	b.n	8001fae <HAL_RCC_OscConfig+0x336>
 8001fa6:	bf00      	nop
 8001fa8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fb2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0302 	and.w	r3, r3, #2
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	f000 817d 	beq.w	80022be <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001fc4:	4ba6      	ldr	r3, [pc, #664]	@ (8002260 <HAL_RCC_OscConfig+0x5e8>)
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	f003 030c 	and.w	r3, r3, #12
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d00b      	beq.n	8001fe8 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001fd0:	4ba3      	ldr	r3, [pc, #652]	@ (8002260 <HAL_RCC_OscConfig+0x5e8>)
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f003 030c 	and.w	r3, r3, #12
 8001fd8:	2b08      	cmp	r3, #8
 8001fda:	d172      	bne.n	80020c2 <HAL_RCC_OscConfig+0x44a>
 8001fdc:	4ba0      	ldr	r3, [pc, #640]	@ (8002260 <HAL_RCC_OscConfig+0x5e8>)
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d16c      	bne.n	80020c2 <HAL_RCC_OscConfig+0x44a>
 8001fe8:	2302      	movs	r3, #2
 8001fea:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fee:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001ff2:	fa93 f3a3 	rbit	r3, r3
 8001ff6:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8001ffa:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ffe:	fab3 f383 	clz	r3, r3
 8002002:	b2db      	uxtb	r3, r3
 8002004:	095b      	lsrs	r3, r3, #5
 8002006:	b2db      	uxtb	r3, r3
 8002008:	f043 0301 	orr.w	r3, r3, #1
 800200c:	b2db      	uxtb	r3, r3
 800200e:	2b01      	cmp	r3, #1
 8002010:	d102      	bne.n	8002018 <HAL_RCC_OscConfig+0x3a0>
 8002012:	4b93      	ldr	r3, [pc, #588]	@ (8002260 <HAL_RCC_OscConfig+0x5e8>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	e013      	b.n	8002040 <HAL_RCC_OscConfig+0x3c8>
 8002018:	2302      	movs	r3, #2
 800201a:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800201e:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8002022:	fa93 f3a3 	rbit	r3, r3
 8002026:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 800202a:	2302      	movs	r3, #2
 800202c:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8002030:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8002034:	fa93 f3a3 	rbit	r3, r3
 8002038:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 800203c:	4b88      	ldr	r3, [pc, #544]	@ (8002260 <HAL_RCC_OscConfig+0x5e8>)
 800203e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002040:	2202      	movs	r2, #2
 8002042:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8002046:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 800204a:	fa92 f2a2 	rbit	r2, r2
 800204e:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8002052:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8002056:	fab2 f282 	clz	r2, r2
 800205a:	b2d2      	uxtb	r2, r2
 800205c:	f042 0220 	orr.w	r2, r2, #32
 8002060:	b2d2      	uxtb	r2, r2
 8002062:	f002 021f 	and.w	r2, r2, #31
 8002066:	2101      	movs	r1, #1
 8002068:	fa01 f202 	lsl.w	r2, r1, r2
 800206c:	4013      	ands	r3, r2
 800206e:	2b00      	cmp	r3, #0
 8002070:	d00a      	beq.n	8002088 <HAL_RCC_OscConfig+0x410>
 8002072:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002076:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	691b      	ldr	r3, [r3, #16]
 800207e:	2b01      	cmp	r3, #1
 8002080:	d002      	beq.n	8002088 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	f000 be2e 	b.w	8002ce4 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002088:	4b75      	ldr	r3, [pc, #468]	@ (8002260 <HAL_RCC_OscConfig+0x5e8>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002090:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002094:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	695b      	ldr	r3, [r3, #20]
 800209c:	21f8      	movs	r1, #248	@ 0xf8
 800209e:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020a2:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80020a6:	fa91 f1a1 	rbit	r1, r1
 80020aa:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 80020ae:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 80020b2:	fab1 f181 	clz	r1, r1
 80020b6:	b2c9      	uxtb	r1, r1
 80020b8:	408b      	lsls	r3, r1
 80020ba:	4969      	ldr	r1, [pc, #420]	@ (8002260 <HAL_RCC_OscConfig+0x5e8>)
 80020bc:	4313      	orrs	r3, r2
 80020be:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020c0:	e0fd      	b.n	80022be <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020c6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	691b      	ldr	r3, [r3, #16]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	f000 8088 	beq.w	80021e4 <HAL_RCC_OscConfig+0x56c>
 80020d4:	2301      	movs	r3, #1
 80020d6:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020da:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 80020de:	fa93 f3a3 	rbit	r3, r3
 80020e2:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 80020e6:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020ea:	fab3 f383 	clz	r3, r3
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80020f4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	461a      	mov	r2, r3
 80020fc:	2301      	movs	r3, #1
 80020fe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002100:	f7fe fcd8 	bl	8000ab4 <HAL_GetTick>
 8002104:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002108:	e00a      	b.n	8002120 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800210a:	f7fe fcd3 	bl	8000ab4 <HAL_GetTick>
 800210e:	4602      	mov	r2, r0
 8002110:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	2b02      	cmp	r3, #2
 8002118:	d902      	bls.n	8002120 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800211a:	2303      	movs	r3, #3
 800211c:	f000 bde2 	b.w	8002ce4 <HAL_RCC_OscConfig+0x106c>
 8002120:	2302      	movs	r3, #2
 8002122:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002126:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 800212a:	fa93 f3a3 	rbit	r3, r3
 800212e:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8002132:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002136:	fab3 f383 	clz	r3, r3
 800213a:	b2db      	uxtb	r3, r3
 800213c:	095b      	lsrs	r3, r3, #5
 800213e:	b2db      	uxtb	r3, r3
 8002140:	f043 0301 	orr.w	r3, r3, #1
 8002144:	b2db      	uxtb	r3, r3
 8002146:	2b01      	cmp	r3, #1
 8002148:	d102      	bne.n	8002150 <HAL_RCC_OscConfig+0x4d8>
 800214a:	4b45      	ldr	r3, [pc, #276]	@ (8002260 <HAL_RCC_OscConfig+0x5e8>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	e013      	b.n	8002178 <HAL_RCC_OscConfig+0x500>
 8002150:	2302      	movs	r3, #2
 8002152:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002156:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800215a:	fa93 f3a3 	rbit	r3, r3
 800215e:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8002162:	2302      	movs	r3, #2
 8002164:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8002168:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800216c:	fa93 f3a3 	rbit	r3, r3
 8002170:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8002174:	4b3a      	ldr	r3, [pc, #232]	@ (8002260 <HAL_RCC_OscConfig+0x5e8>)
 8002176:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002178:	2202      	movs	r2, #2
 800217a:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 800217e:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8002182:	fa92 f2a2 	rbit	r2, r2
 8002186:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 800218a:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 800218e:	fab2 f282 	clz	r2, r2
 8002192:	b2d2      	uxtb	r2, r2
 8002194:	f042 0220 	orr.w	r2, r2, #32
 8002198:	b2d2      	uxtb	r2, r2
 800219a:	f002 021f 	and.w	r2, r2, #31
 800219e:	2101      	movs	r1, #1
 80021a0:	fa01 f202 	lsl.w	r2, r1, r2
 80021a4:	4013      	ands	r3, r2
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d0af      	beq.n	800210a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021aa:	4b2d      	ldr	r3, [pc, #180]	@ (8002260 <HAL_RCC_OscConfig+0x5e8>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80021b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021b6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	695b      	ldr	r3, [r3, #20]
 80021be:	21f8      	movs	r1, #248	@ 0xf8
 80021c0:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c4:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80021c8:	fa91 f1a1 	rbit	r1, r1
 80021cc:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 80021d0:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 80021d4:	fab1 f181 	clz	r1, r1
 80021d8:	b2c9      	uxtb	r1, r1
 80021da:	408b      	lsls	r3, r1
 80021dc:	4920      	ldr	r1, [pc, #128]	@ (8002260 <HAL_RCC_OscConfig+0x5e8>)
 80021de:	4313      	orrs	r3, r2
 80021e0:	600b      	str	r3, [r1, #0]
 80021e2:	e06c      	b.n	80022be <HAL_RCC_OscConfig+0x646>
 80021e4:	2301      	movs	r3, #1
 80021e6:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ea:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80021ee:	fa93 f3a3 	rbit	r3, r3
 80021f2:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 80021f6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021fa:	fab3 f383 	clz	r3, r3
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002204:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	461a      	mov	r2, r3
 800220c:	2300      	movs	r3, #0
 800220e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002210:	f7fe fc50 	bl	8000ab4 <HAL_GetTick>
 8002214:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002218:	e00a      	b.n	8002230 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800221a:	f7fe fc4b 	bl	8000ab4 <HAL_GetTick>
 800221e:	4602      	mov	r2, r0
 8002220:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	2b02      	cmp	r3, #2
 8002228:	d902      	bls.n	8002230 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800222a:	2303      	movs	r3, #3
 800222c:	f000 bd5a 	b.w	8002ce4 <HAL_RCC_OscConfig+0x106c>
 8002230:	2302      	movs	r3, #2
 8002232:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002236:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800223a:	fa93 f3a3 	rbit	r3, r3
 800223e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8002242:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002246:	fab3 f383 	clz	r3, r3
 800224a:	b2db      	uxtb	r3, r3
 800224c:	095b      	lsrs	r3, r3, #5
 800224e:	b2db      	uxtb	r3, r3
 8002250:	f043 0301 	orr.w	r3, r3, #1
 8002254:	b2db      	uxtb	r3, r3
 8002256:	2b01      	cmp	r3, #1
 8002258:	d104      	bne.n	8002264 <HAL_RCC_OscConfig+0x5ec>
 800225a:	4b01      	ldr	r3, [pc, #4]	@ (8002260 <HAL_RCC_OscConfig+0x5e8>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	e015      	b.n	800228c <HAL_RCC_OscConfig+0x614>
 8002260:	40021000 	.word	0x40021000
 8002264:	2302      	movs	r3, #2
 8002266:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800226a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800226e:	fa93 f3a3 	rbit	r3, r3
 8002272:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002276:	2302      	movs	r3, #2
 8002278:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 800227c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002280:	fa93 f3a3 	rbit	r3, r3
 8002284:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002288:	4bc8      	ldr	r3, [pc, #800]	@ (80025ac <HAL_RCC_OscConfig+0x934>)
 800228a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800228c:	2202      	movs	r2, #2
 800228e:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8002292:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8002296:	fa92 f2a2 	rbit	r2, r2
 800229a:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 800229e:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80022a2:	fab2 f282 	clz	r2, r2
 80022a6:	b2d2      	uxtb	r2, r2
 80022a8:	f042 0220 	orr.w	r2, r2, #32
 80022ac:	b2d2      	uxtb	r2, r2
 80022ae:	f002 021f 	and.w	r2, r2, #31
 80022b2:	2101      	movs	r1, #1
 80022b4:	fa01 f202 	lsl.w	r2, r1, r2
 80022b8:	4013      	ands	r3, r2
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d1ad      	bne.n	800221a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022c2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0308 	and.w	r3, r3, #8
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	f000 8110 	beq.w	80024f4 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022d8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	699b      	ldr	r3, [r3, #24]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d079      	beq.n	80023d8 <HAL_RCC_OscConfig+0x760>
 80022e4:	2301      	movs	r3, #1
 80022e6:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ea:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80022ee:	fa93 f3a3 	rbit	r3, r3
 80022f2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 80022f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022fa:	fab3 f383 	clz	r3, r3
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	461a      	mov	r2, r3
 8002302:	4bab      	ldr	r3, [pc, #684]	@ (80025b0 <HAL_RCC_OscConfig+0x938>)
 8002304:	4413      	add	r3, r2
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	461a      	mov	r2, r3
 800230a:	2301      	movs	r3, #1
 800230c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800230e:	f7fe fbd1 	bl	8000ab4 <HAL_GetTick>
 8002312:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002316:	e00a      	b.n	800232e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002318:	f7fe fbcc 	bl	8000ab4 <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002322:	1ad3      	subs	r3, r2, r3
 8002324:	2b02      	cmp	r3, #2
 8002326:	d902      	bls.n	800232e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002328:	2303      	movs	r3, #3
 800232a:	f000 bcdb 	b.w	8002ce4 <HAL_RCC_OscConfig+0x106c>
 800232e:	2302      	movs	r3, #2
 8002330:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002334:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002338:	fa93 f3a3 	rbit	r3, r3
 800233c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002340:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002344:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002348:	2202      	movs	r2, #2
 800234a:	601a      	str	r2, [r3, #0]
 800234c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002350:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	fa93 f2a3 	rbit	r2, r3
 800235a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800235e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002362:	601a      	str	r2, [r3, #0]
 8002364:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002368:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800236c:	2202      	movs	r2, #2
 800236e:	601a      	str	r2, [r3, #0]
 8002370:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002374:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	fa93 f2a3 	rbit	r2, r3
 800237e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002382:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002386:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002388:	4b88      	ldr	r3, [pc, #544]	@ (80025ac <HAL_RCC_OscConfig+0x934>)
 800238a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800238c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002390:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002394:	2102      	movs	r1, #2
 8002396:	6019      	str	r1, [r3, #0]
 8002398:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800239c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	fa93 f1a3 	rbit	r1, r3
 80023a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023aa:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80023ae:	6019      	str	r1, [r3, #0]
  return result;
 80023b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023b4:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	fab3 f383 	clz	r3, r3
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	f003 031f 	and.w	r3, r3, #31
 80023ca:	2101      	movs	r1, #1
 80023cc:	fa01 f303 	lsl.w	r3, r1, r3
 80023d0:	4013      	ands	r3, r2
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d0a0      	beq.n	8002318 <HAL_RCC_OscConfig+0x6a0>
 80023d6:	e08d      	b.n	80024f4 <HAL_RCC_OscConfig+0x87c>
 80023d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023dc:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80023e0:	2201      	movs	r2, #1
 80023e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023e8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	fa93 f2a3 	rbit	r2, r3
 80023f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023f6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80023fa:	601a      	str	r2, [r3, #0]
  return result;
 80023fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002400:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002404:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002406:	fab3 f383 	clz	r3, r3
 800240a:	b2db      	uxtb	r3, r3
 800240c:	461a      	mov	r2, r3
 800240e:	4b68      	ldr	r3, [pc, #416]	@ (80025b0 <HAL_RCC_OscConfig+0x938>)
 8002410:	4413      	add	r3, r2
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	461a      	mov	r2, r3
 8002416:	2300      	movs	r3, #0
 8002418:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800241a:	f7fe fb4b 	bl	8000ab4 <HAL_GetTick>
 800241e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002422:	e00a      	b.n	800243a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002424:	f7fe fb46 	bl	8000ab4 <HAL_GetTick>
 8002428:	4602      	mov	r2, r0
 800242a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800242e:	1ad3      	subs	r3, r2, r3
 8002430:	2b02      	cmp	r3, #2
 8002432:	d902      	bls.n	800243a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002434:	2303      	movs	r3, #3
 8002436:	f000 bc55 	b.w	8002ce4 <HAL_RCC_OscConfig+0x106c>
 800243a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800243e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002442:	2202      	movs	r2, #2
 8002444:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002446:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800244a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	fa93 f2a3 	rbit	r2, r3
 8002454:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002458:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800245c:	601a      	str	r2, [r3, #0]
 800245e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002462:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002466:	2202      	movs	r2, #2
 8002468:	601a      	str	r2, [r3, #0]
 800246a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800246e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	fa93 f2a3 	rbit	r2, r3
 8002478:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800247c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002480:	601a      	str	r2, [r3, #0]
 8002482:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002486:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800248a:	2202      	movs	r2, #2
 800248c:	601a      	str	r2, [r3, #0]
 800248e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002492:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	fa93 f2a3 	rbit	r2, r3
 800249c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024a0:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80024a4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024a6:	4b41      	ldr	r3, [pc, #260]	@ (80025ac <HAL_RCC_OscConfig+0x934>)
 80024a8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80024aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024ae:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80024b2:	2102      	movs	r1, #2
 80024b4:	6019      	str	r1, [r3, #0]
 80024b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024ba:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	fa93 f1a3 	rbit	r1, r3
 80024c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024c8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80024cc:	6019      	str	r1, [r3, #0]
  return result;
 80024ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024d2:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	fab3 f383 	clz	r3, r3
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	f003 031f 	and.w	r3, r3, #31
 80024e8:	2101      	movs	r1, #1
 80024ea:	fa01 f303 	lsl.w	r3, r1, r3
 80024ee:	4013      	ands	r3, r2
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d197      	bne.n	8002424 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024f8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 0304 	and.w	r3, r3, #4
 8002504:	2b00      	cmp	r3, #0
 8002506:	f000 81a1 	beq.w	800284c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800250a:	2300      	movs	r3, #0
 800250c:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002510:	4b26      	ldr	r3, [pc, #152]	@ (80025ac <HAL_RCC_OscConfig+0x934>)
 8002512:	69db      	ldr	r3, [r3, #28]
 8002514:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002518:	2b00      	cmp	r3, #0
 800251a:	d116      	bne.n	800254a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800251c:	4b23      	ldr	r3, [pc, #140]	@ (80025ac <HAL_RCC_OscConfig+0x934>)
 800251e:	69db      	ldr	r3, [r3, #28]
 8002520:	4a22      	ldr	r2, [pc, #136]	@ (80025ac <HAL_RCC_OscConfig+0x934>)
 8002522:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002526:	61d3      	str	r3, [r2, #28]
 8002528:	4b20      	ldr	r3, [pc, #128]	@ (80025ac <HAL_RCC_OscConfig+0x934>)
 800252a:	69db      	ldr	r3, [r3, #28]
 800252c:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8002530:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002534:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002538:	601a      	str	r2, [r3, #0]
 800253a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800253e:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002542:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002544:	2301      	movs	r3, #1
 8002546:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800254a:	4b1a      	ldr	r3, [pc, #104]	@ (80025b4 <HAL_RCC_OscConfig+0x93c>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002552:	2b00      	cmp	r3, #0
 8002554:	d11a      	bne.n	800258c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002556:	4b17      	ldr	r3, [pc, #92]	@ (80025b4 <HAL_RCC_OscConfig+0x93c>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a16      	ldr	r2, [pc, #88]	@ (80025b4 <HAL_RCC_OscConfig+0x93c>)
 800255c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002560:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002562:	f7fe faa7 	bl	8000ab4 <HAL_GetTick>
 8002566:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800256a:	e009      	b.n	8002580 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800256c:	f7fe faa2 	bl	8000ab4 <HAL_GetTick>
 8002570:	4602      	mov	r2, r0
 8002572:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002576:	1ad3      	subs	r3, r2, r3
 8002578:	2b64      	cmp	r3, #100	@ 0x64
 800257a:	d901      	bls.n	8002580 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 800257c:	2303      	movs	r3, #3
 800257e:	e3b1      	b.n	8002ce4 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002580:	4b0c      	ldr	r3, [pc, #48]	@ (80025b4 <HAL_RCC_OscConfig+0x93c>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002588:	2b00      	cmp	r3, #0
 800258a:	d0ef      	beq.n	800256c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800258c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002590:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	2b01      	cmp	r3, #1
 800259a:	d10d      	bne.n	80025b8 <HAL_RCC_OscConfig+0x940>
 800259c:	4b03      	ldr	r3, [pc, #12]	@ (80025ac <HAL_RCC_OscConfig+0x934>)
 800259e:	6a1b      	ldr	r3, [r3, #32]
 80025a0:	4a02      	ldr	r2, [pc, #8]	@ (80025ac <HAL_RCC_OscConfig+0x934>)
 80025a2:	f043 0301 	orr.w	r3, r3, #1
 80025a6:	6213      	str	r3, [r2, #32]
 80025a8:	e03c      	b.n	8002624 <HAL_RCC_OscConfig+0x9ac>
 80025aa:	bf00      	nop
 80025ac:	40021000 	.word	0x40021000
 80025b0:	10908120 	.word	0x10908120
 80025b4:	40007000 	.word	0x40007000
 80025b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025bc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d10c      	bne.n	80025e2 <HAL_RCC_OscConfig+0x96a>
 80025c8:	4bc1      	ldr	r3, [pc, #772]	@ (80028d0 <HAL_RCC_OscConfig+0xc58>)
 80025ca:	6a1b      	ldr	r3, [r3, #32]
 80025cc:	4ac0      	ldr	r2, [pc, #768]	@ (80028d0 <HAL_RCC_OscConfig+0xc58>)
 80025ce:	f023 0301 	bic.w	r3, r3, #1
 80025d2:	6213      	str	r3, [r2, #32]
 80025d4:	4bbe      	ldr	r3, [pc, #760]	@ (80028d0 <HAL_RCC_OscConfig+0xc58>)
 80025d6:	6a1b      	ldr	r3, [r3, #32]
 80025d8:	4abd      	ldr	r2, [pc, #756]	@ (80028d0 <HAL_RCC_OscConfig+0xc58>)
 80025da:	f023 0304 	bic.w	r3, r3, #4
 80025de:	6213      	str	r3, [r2, #32]
 80025e0:	e020      	b.n	8002624 <HAL_RCC_OscConfig+0x9ac>
 80025e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025e6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	68db      	ldr	r3, [r3, #12]
 80025ee:	2b05      	cmp	r3, #5
 80025f0:	d10c      	bne.n	800260c <HAL_RCC_OscConfig+0x994>
 80025f2:	4bb7      	ldr	r3, [pc, #732]	@ (80028d0 <HAL_RCC_OscConfig+0xc58>)
 80025f4:	6a1b      	ldr	r3, [r3, #32]
 80025f6:	4ab6      	ldr	r2, [pc, #728]	@ (80028d0 <HAL_RCC_OscConfig+0xc58>)
 80025f8:	f043 0304 	orr.w	r3, r3, #4
 80025fc:	6213      	str	r3, [r2, #32]
 80025fe:	4bb4      	ldr	r3, [pc, #720]	@ (80028d0 <HAL_RCC_OscConfig+0xc58>)
 8002600:	6a1b      	ldr	r3, [r3, #32]
 8002602:	4ab3      	ldr	r2, [pc, #716]	@ (80028d0 <HAL_RCC_OscConfig+0xc58>)
 8002604:	f043 0301 	orr.w	r3, r3, #1
 8002608:	6213      	str	r3, [r2, #32]
 800260a:	e00b      	b.n	8002624 <HAL_RCC_OscConfig+0x9ac>
 800260c:	4bb0      	ldr	r3, [pc, #704]	@ (80028d0 <HAL_RCC_OscConfig+0xc58>)
 800260e:	6a1b      	ldr	r3, [r3, #32]
 8002610:	4aaf      	ldr	r2, [pc, #700]	@ (80028d0 <HAL_RCC_OscConfig+0xc58>)
 8002612:	f023 0301 	bic.w	r3, r3, #1
 8002616:	6213      	str	r3, [r2, #32]
 8002618:	4bad      	ldr	r3, [pc, #692]	@ (80028d0 <HAL_RCC_OscConfig+0xc58>)
 800261a:	6a1b      	ldr	r3, [r3, #32]
 800261c:	4aac      	ldr	r2, [pc, #688]	@ (80028d0 <HAL_RCC_OscConfig+0xc58>)
 800261e:	f023 0304 	bic.w	r3, r3, #4
 8002622:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002624:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002628:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	2b00      	cmp	r3, #0
 8002632:	f000 8081 	beq.w	8002738 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002636:	f7fe fa3d 	bl	8000ab4 <HAL_GetTick>
 800263a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800263e:	e00b      	b.n	8002658 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002640:	f7fe fa38 	bl	8000ab4 <HAL_GetTick>
 8002644:	4602      	mov	r2, r0
 8002646:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800264a:	1ad3      	subs	r3, r2, r3
 800264c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002650:	4293      	cmp	r3, r2
 8002652:	d901      	bls.n	8002658 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002654:	2303      	movs	r3, #3
 8002656:	e345      	b.n	8002ce4 <HAL_RCC_OscConfig+0x106c>
 8002658:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800265c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002660:	2202      	movs	r2, #2
 8002662:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002664:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002668:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	fa93 f2a3 	rbit	r2, r3
 8002672:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002676:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800267a:	601a      	str	r2, [r3, #0]
 800267c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002680:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002684:	2202      	movs	r2, #2
 8002686:	601a      	str	r2, [r3, #0]
 8002688:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800268c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	fa93 f2a3 	rbit	r2, r3
 8002696:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800269a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800269e:	601a      	str	r2, [r3, #0]
  return result;
 80026a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026a4:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80026a8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026aa:	fab3 f383 	clz	r3, r3
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	095b      	lsrs	r3, r3, #5
 80026b2:	b2db      	uxtb	r3, r3
 80026b4:	f043 0302 	orr.w	r3, r3, #2
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	2b02      	cmp	r3, #2
 80026bc:	d102      	bne.n	80026c4 <HAL_RCC_OscConfig+0xa4c>
 80026be:	4b84      	ldr	r3, [pc, #528]	@ (80028d0 <HAL_RCC_OscConfig+0xc58>)
 80026c0:	6a1b      	ldr	r3, [r3, #32]
 80026c2:	e013      	b.n	80026ec <HAL_RCC_OscConfig+0xa74>
 80026c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026c8:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80026cc:	2202      	movs	r2, #2
 80026ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026d4:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	fa93 f2a3 	rbit	r2, r3
 80026de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026e2:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80026e6:	601a      	str	r2, [r3, #0]
 80026e8:	4b79      	ldr	r3, [pc, #484]	@ (80028d0 <HAL_RCC_OscConfig+0xc58>)
 80026ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ec:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80026f0:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80026f4:	2102      	movs	r1, #2
 80026f6:	6011      	str	r1, [r2, #0]
 80026f8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80026fc:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002700:	6812      	ldr	r2, [r2, #0]
 8002702:	fa92 f1a2 	rbit	r1, r2
 8002706:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800270a:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800270e:	6011      	str	r1, [r2, #0]
  return result;
 8002710:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002714:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002718:	6812      	ldr	r2, [r2, #0]
 800271a:	fab2 f282 	clz	r2, r2
 800271e:	b2d2      	uxtb	r2, r2
 8002720:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002724:	b2d2      	uxtb	r2, r2
 8002726:	f002 021f 	and.w	r2, r2, #31
 800272a:	2101      	movs	r1, #1
 800272c:	fa01 f202 	lsl.w	r2, r1, r2
 8002730:	4013      	ands	r3, r2
 8002732:	2b00      	cmp	r3, #0
 8002734:	d084      	beq.n	8002640 <HAL_RCC_OscConfig+0x9c8>
 8002736:	e07f      	b.n	8002838 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002738:	f7fe f9bc 	bl	8000ab4 <HAL_GetTick>
 800273c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002740:	e00b      	b.n	800275a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002742:	f7fe f9b7 	bl	8000ab4 <HAL_GetTick>
 8002746:	4602      	mov	r2, r0
 8002748:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002752:	4293      	cmp	r3, r2
 8002754:	d901      	bls.n	800275a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002756:	2303      	movs	r3, #3
 8002758:	e2c4      	b.n	8002ce4 <HAL_RCC_OscConfig+0x106c>
 800275a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800275e:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002762:	2202      	movs	r2, #2
 8002764:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002766:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800276a:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	fa93 f2a3 	rbit	r2, r3
 8002774:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002778:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800277c:	601a      	str	r2, [r3, #0]
 800277e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002782:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002786:	2202      	movs	r2, #2
 8002788:	601a      	str	r2, [r3, #0]
 800278a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800278e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	fa93 f2a3 	rbit	r2, r3
 8002798:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800279c:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80027a0:	601a      	str	r2, [r3, #0]
  return result;
 80027a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027a6:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80027aa:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027ac:	fab3 f383 	clz	r3, r3
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	095b      	lsrs	r3, r3, #5
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	f043 0302 	orr.w	r3, r3, #2
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	2b02      	cmp	r3, #2
 80027be:	d102      	bne.n	80027c6 <HAL_RCC_OscConfig+0xb4e>
 80027c0:	4b43      	ldr	r3, [pc, #268]	@ (80028d0 <HAL_RCC_OscConfig+0xc58>)
 80027c2:	6a1b      	ldr	r3, [r3, #32]
 80027c4:	e013      	b.n	80027ee <HAL_RCC_OscConfig+0xb76>
 80027c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027ca:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80027ce:	2202      	movs	r2, #2
 80027d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027d6:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	fa93 f2a3 	rbit	r2, r3
 80027e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027e4:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80027e8:	601a      	str	r2, [r3, #0]
 80027ea:	4b39      	ldr	r3, [pc, #228]	@ (80028d0 <HAL_RCC_OscConfig+0xc58>)
 80027ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ee:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80027f2:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80027f6:	2102      	movs	r1, #2
 80027f8:	6011      	str	r1, [r2, #0]
 80027fa:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80027fe:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002802:	6812      	ldr	r2, [r2, #0]
 8002804:	fa92 f1a2 	rbit	r1, r2
 8002808:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800280c:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002810:	6011      	str	r1, [r2, #0]
  return result;
 8002812:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002816:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800281a:	6812      	ldr	r2, [r2, #0]
 800281c:	fab2 f282 	clz	r2, r2
 8002820:	b2d2      	uxtb	r2, r2
 8002822:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002826:	b2d2      	uxtb	r2, r2
 8002828:	f002 021f 	and.w	r2, r2, #31
 800282c:	2101      	movs	r1, #1
 800282e:	fa01 f202 	lsl.w	r2, r1, r2
 8002832:	4013      	ands	r3, r2
 8002834:	2b00      	cmp	r3, #0
 8002836:	d184      	bne.n	8002742 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002838:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 800283c:	2b01      	cmp	r3, #1
 800283e:	d105      	bne.n	800284c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002840:	4b23      	ldr	r3, [pc, #140]	@ (80028d0 <HAL_RCC_OscConfig+0xc58>)
 8002842:	69db      	ldr	r3, [r3, #28]
 8002844:	4a22      	ldr	r2, [pc, #136]	@ (80028d0 <HAL_RCC_OscConfig+0xc58>)
 8002846:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800284a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800284c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002850:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	69db      	ldr	r3, [r3, #28]
 8002858:	2b00      	cmp	r3, #0
 800285a:	f000 8242 	beq.w	8002ce2 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800285e:	4b1c      	ldr	r3, [pc, #112]	@ (80028d0 <HAL_RCC_OscConfig+0xc58>)
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	f003 030c 	and.w	r3, r3, #12
 8002866:	2b08      	cmp	r3, #8
 8002868:	f000 8213 	beq.w	8002c92 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800286c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002870:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	69db      	ldr	r3, [r3, #28]
 8002878:	2b02      	cmp	r3, #2
 800287a:	f040 8162 	bne.w	8002b42 <HAL_RCC_OscConfig+0xeca>
 800287e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002882:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002886:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800288a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800288c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002890:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	fa93 f2a3 	rbit	r2, r3
 800289a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800289e:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80028a2:	601a      	str	r2, [r3, #0]
  return result;
 80028a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028a8:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80028ac:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028ae:	fab3 f383 	clz	r3, r3
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80028b8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	461a      	mov	r2, r3
 80028c0:	2300      	movs	r3, #0
 80028c2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028c4:	f7fe f8f6 	bl	8000ab4 <HAL_GetTick>
 80028c8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028cc:	e00c      	b.n	80028e8 <HAL_RCC_OscConfig+0xc70>
 80028ce:	bf00      	nop
 80028d0:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028d4:	f7fe f8ee 	bl	8000ab4 <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80028de:	1ad3      	subs	r3, r2, r3
 80028e0:	2b02      	cmp	r3, #2
 80028e2:	d901      	bls.n	80028e8 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80028e4:	2303      	movs	r3, #3
 80028e6:	e1fd      	b.n	8002ce4 <HAL_RCC_OscConfig+0x106c>
 80028e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028ec:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80028f0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80028f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028fa:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	fa93 f2a3 	rbit	r2, r3
 8002904:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002908:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800290c:	601a      	str	r2, [r3, #0]
  return result;
 800290e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002912:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002916:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002918:	fab3 f383 	clz	r3, r3
 800291c:	b2db      	uxtb	r3, r3
 800291e:	095b      	lsrs	r3, r3, #5
 8002920:	b2db      	uxtb	r3, r3
 8002922:	f043 0301 	orr.w	r3, r3, #1
 8002926:	b2db      	uxtb	r3, r3
 8002928:	2b01      	cmp	r3, #1
 800292a:	d102      	bne.n	8002932 <HAL_RCC_OscConfig+0xcba>
 800292c:	4bb0      	ldr	r3, [pc, #704]	@ (8002bf0 <HAL_RCC_OscConfig+0xf78>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	e027      	b.n	8002982 <HAL_RCC_OscConfig+0xd0a>
 8002932:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002936:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800293a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800293e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002940:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002944:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	fa93 f2a3 	rbit	r2, r3
 800294e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002952:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002956:	601a      	str	r2, [r3, #0]
 8002958:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800295c:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002960:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002964:	601a      	str	r2, [r3, #0]
 8002966:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800296a:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	fa93 f2a3 	rbit	r2, r3
 8002974:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002978:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800297c:	601a      	str	r2, [r3, #0]
 800297e:	4b9c      	ldr	r3, [pc, #624]	@ (8002bf0 <HAL_RCC_OscConfig+0xf78>)
 8002980:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002982:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002986:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 800298a:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800298e:	6011      	str	r1, [r2, #0]
 8002990:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002994:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002998:	6812      	ldr	r2, [r2, #0]
 800299a:	fa92 f1a2 	rbit	r1, r2
 800299e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80029a2:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80029a6:	6011      	str	r1, [r2, #0]
  return result;
 80029a8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80029ac:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80029b0:	6812      	ldr	r2, [r2, #0]
 80029b2:	fab2 f282 	clz	r2, r2
 80029b6:	b2d2      	uxtb	r2, r2
 80029b8:	f042 0220 	orr.w	r2, r2, #32
 80029bc:	b2d2      	uxtb	r2, r2
 80029be:	f002 021f 	and.w	r2, r2, #31
 80029c2:	2101      	movs	r1, #1
 80029c4:	fa01 f202 	lsl.w	r2, r1, r2
 80029c8:	4013      	ands	r3, r2
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d182      	bne.n	80028d4 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029ce:	4b88      	ldr	r3, [pc, #544]	@ (8002bf0 <HAL_RCC_OscConfig+0xf78>)
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80029d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029da:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80029e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029e6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	6a1b      	ldr	r3, [r3, #32]
 80029ee:	430b      	orrs	r3, r1
 80029f0:	497f      	ldr	r1, [pc, #508]	@ (8002bf0 <HAL_RCC_OscConfig+0xf78>)
 80029f2:	4313      	orrs	r3, r2
 80029f4:	604b      	str	r3, [r1, #4]
 80029f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029fa:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80029fe:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002a02:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a04:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a08:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	fa93 f2a3 	rbit	r2, r3
 8002a12:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a16:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002a1a:	601a      	str	r2, [r3, #0]
  return result;
 8002a1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a20:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002a24:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a26:	fab3 f383 	clz	r3, r3
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002a30:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	461a      	mov	r2, r3
 8002a38:	2301      	movs	r3, #1
 8002a3a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a3c:	f7fe f83a 	bl	8000ab4 <HAL_GetTick>
 8002a40:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a44:	e009      	b.n	8002a5a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a46:	f7fe f835 	bl	8000ab4 <HAL_GetTick>
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	2b02      	cmp	r3, #2
 8002a54:	d901      	bls.n	8002a5a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002a56:	2303      	movs	r3, #3
 8002a58:	e144      	b.n	8002ce4 <HAL_RCC_OscConfig+0x106c>
 8002a5a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a5e:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002a62:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002a66:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a68:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a6c:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	fa93 f2a3 	rbit	r2, r3
 8002a76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a7a:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002a7e:	601a      	str	r2, [r3, #0]
  return result;
 8002a80:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a84:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002a88:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a8a:	fab3 f383 	clz	r3, r3
 8002a8e:	b2db      	uxtb	r3, r3
 8002a90:	095b      	lsrs	r3, r3, #5
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	f043 0301 	orr.w	r3, r3, #1
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d102      	bne.n	8002aa4 <HAL_RCC_OscConfig+0xe2c>
 8002a9e:	4b54      	ldr	r3, [pc, #336]	@ (8002bf0 <HAL_RCC_OscConfig+0xf78>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	e027      	b.n	8002af4 <HAL_RCC_OscConfig+0xe7c>
 8002aa4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002aa8:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002aac:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002ab0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ab2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ab6:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	fa93 f2a3 	rbit	r2, r3
 8002ac0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ac4:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002ac8:	601a      	str	r2, [r3, #0]
 8002aca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ace:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002ad2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002ad6:	601a      	str	r2, [r3, #0]
 8002ad8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002adc:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	fa93 f2a3 	rbit	r2, r3
 8002ae6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002aea:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002aee:	601a      	str	r2, [r3, #0]
 8002af0:	4b3f      	ldr	r3, [pc, #252]	@ (8002bf0 <HAL_RCC_OscConfig+0xf78>)
 8002af2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002af4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002af8:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002afc:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002b00:	6011      	str	r1, [r2, #0]
 8002b02:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002b06:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002b0a:	6812      	ldr	r2, [r2, #0]
 8002b0c:	fa92 f1a2 	rbit	r1, r2
 8002b10:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002b14:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002b18:	6011      	str	r1, [r2, #0]
  return result;
 8002b1a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002b1e:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002b22:	6812      	ldr	r2, [r2, #0]
 8002b24:	fab2 f282 	clz	r2, r2
 8002b28:	b2d2      	uxtb	r2, r2
 8002b2a:	f042 0220 	orr.w	r2, r2, #32
 8002b2e:	b2d2      	uxtb	r2, r2
 8002b30:	f002 021f 	and.w	r2, r2, #31
 8002b34:	2101      	movs	r1, #1
 8002b36:	fa01 f202 	lsl.w	r2, r1, r2
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d082      	beq.n	8002a46 <HAL_RCC_OscConfig+0xdce>
 8002b40:	e0cf      	b.n	8002ce2 <HAL_RCC_OscConfig+0x106a>
 8002b42:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b46:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002b4a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002b4e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b50:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b54:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	fa93 f2a3 	rbit	r2, r3
 8002b5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b62:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002b66:	601a      	str	r2, [r3, #0]
  return result;
 8002b68:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b6c:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002b70:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b72:	fab3 f383 	clz	r3, r3
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002b7c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	461a      	mov	r2, r3
 8002b84:	2300      	movs	r3, #0
 8002b86:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b88:	f7fd ff94 	bl	8000ab4 <HAL_GetTick>
 8002b8c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b90:	e009      	b.n	8002ba6 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b92:	f7fd ff8f 	bl	8000ab4 <HAL_GetTick>
 8002b96:	4602      	mov	r2, r0
 8002b98:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	2b02      	cmp	r3, #2
 8002ba0:	d901      	bls.n	8002ba6 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	e09e      	b.n	8002ce4 <HAL_RCC_OscConfig+0x106c>
 8002ba6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002baa:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002bae:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002bb2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bb8:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	fa93 f2a3 	rbit	r2, r3
 8002bc2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bc6:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002bca:	601a      	str	r2, [r3, #0]
  return result;
 8002bcc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bd0:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002bd4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bd6:	fab3 f383 	clz	r3, r3
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	095b      	lsrs	r3, r3, #5
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	f043 0301 	orr.w	r3, r3, #1
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d104      	bne.n	8002bf4 <HAL_RCC_OscConfig+0xf7c>
 8002bea:	4b01      	ldr	r3, [pc, #4]	@ (8002bf0 <HAL_RCC_OscConfig+0xf78>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	e029      	b.n	8002c44 <HAL_RCC_OscConfig+0xfcc>
 8002bf0:	40021000 	.word	0x40021000
 8002bf4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bf8:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002bfc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002c00:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c06:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	fa93 f2a3 	rbit	r2, r3
 8002c10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c14:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002c18:	601a      	str	r2, [r3, #0]
 8002c1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c1e:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002c22:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002c26:	601a      	str	r2, [r3, #0]
 8002c28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c2c:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	fa93 f2a3 	rbit	r2, r3
 8002c36:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c3a:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002c3e:	601a      	str	r2, [r3, #0]
 8002c40:	4b2b      	ldr	r3, [pc, #172]	@ (8002cf0 <HAL_RCC_OscConfig+0x1078>)
 8002c42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c44:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002c48:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002c4c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002c50:	6011      	str	r1, [r2, #0]
 8002c52:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002c56:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002c5a:	6812      	ldr	r2, [r2, #0]
 8002c5c:	fa92 f1a2 	rbit	r1, r2
 8002c60:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002c64:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002c68:	6011      	str	r1, [r2, #0]
  return result;
 8002c6a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002c6e:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002c72:	6812      	ldr	r2, [r2, #0]
 8002c74:	fab2 f282 	clz	r2, r2
 8002c78:	b2d2      	uxtb	r2, r2
 8002c7a:	f042 0220 	orr.w	r2, r2, #32
 8002c7e:	b2d2      	uxtb	r2, r2
 8002c80:	f002 021f 	and.w	r2, r2, #31
 8002c84:	2101      	movs	r1, #1
 8002c86:	fa01 f202 	lsl.w	r2, r1, r2
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d180      	bne.n	8002b92 <HAL_RCC_OscConfig+0xf1a>
 8002c90:	e027      	b.n	8002ce2 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c96:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	69db      	ldr	r3, [r3, #28]
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d101      	bne.n	8002ca6 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e01e      	b.n	8002ce4 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ca6:	4b12      	ldr	r3, [pc, #72]	@ (8002cf0 <HAL_RCC_OscConfig+0x1078>)
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002cae:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002cb2:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002cb6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cba:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	6a1b      	ldr	r3, [r3, #32]
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	d10b      	bne.n	8002cde <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002cc6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002cca:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002cce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cd2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	d001      	beq.n	8002ce2 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e000      	b.n	8002ce4 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002ce2:	2300      	movs	r3, #0
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	40021000 	.word	0x40021000

08002cf4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b09e      	sub	sp, #120	@ 0x78
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d101      	bne.n	8002d0c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e162      	b.n	8002fd2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d0c:	4b90      	ldr	r3, [pc, #576]	@ (8002f50 <HAL_RCC_ClockConfig+0x25c>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 0307 	and.w	r3, r3, #7
 8002d14:	683a      	ldr	r2, [r7, #0]
 8002d16:	429a      	cmp	r2, r3
 8002d18:	d910      	bls.n	8002d3c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d1a:	4b8d      	ldr	r3, [pc, #564]	@ (8002f50 <HAL_RCC_ClockConfig+0x25c>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f023 0207 	bic.w	r2, r3, #7
 8002d22:	498b      	ldr	r1, [pc, #556]	@ (8002f50 <HAL_RCC_ClockConfig+0x25c>)
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	4313      	orrs	r3, r2
 8002d28:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d2a:	4b89      	ldr	r3, [pc, #548]	@ (8002f50 <HAL_RCC_ClockConfig+0x25c>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 0307 	and.w	r3, r3, #7
 8002d32:	683a      	ldr	r2, [r7, #0]
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d001      	beq.n	8002d3c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e14a      	b.n	8002fd2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 0302 	and.w	r3, r3, #2
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d008      	beq.n	8002d5a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d48:	4b82      	ldr	r3, [pc, #520]	@ (8002f54 <HAL_RCC_ClockConfig+0x260>)
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	497f      	ldr	r1, [pc, #508]	@ (8002f54 <HAL_RCC_ClockConfig+0x260>)
 8002d56:	4313      	orrs	r3, r2
 8002d58:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 0301 	and.w	r3, r3, #1
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	f000 80dc 	beq.w	8002f20 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d13c      	bne.n	8002dea <HAL_RCC_ClockConfig+0xf6>
 8002d70:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002d74:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d76:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002d78:	fa93 f3a3 	rbit	r3, r3
 8002d7c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002d7e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d80:	fab3 f383 	clz	r3, r3
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	095b      	lsrs	r3, r3, #5
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	f043 0301 	orr.w	r3, r3, #1
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d102      	bne.n	8002d9a <HAL_RCC_ClockConfig+0xa6>
 8002d94:	4b6f      	ldr	r3, [pc, #444]	@ (8002f54 <HAL_RCC_ClockConfig+0x260>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	e00f      	b.n	8002dba <HAL_RCC_ClockConfig+0xc6>
 8002d9a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002d9e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002da0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002da2:	fa93 f3a3 	rbit	r3, r3
 8002da6:	667b      	str	r3, [r7, #100]	@ 0x64
 8002da8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002dac:	663b      	str	r3, [r7, #96]	@ 0x60
 8002dae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002db0:	fa93 f3a3 	rbit	r3, r3
 8002db4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002db6:	4b67      	ldr	r3, [pc, #412]	@ (8002f54 <HAL_RCC_ClockConfig+0x260>)
 8002db8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dba:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002dbe:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002dc0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002dc2:	fa92 f2a2 	rbit	r2, r2
 8002dc6:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8002dc8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002dca:	fab2 f282 	clz	r2, r2
 8002dce:	b2d2      	uxtb	r2, r2
 8002dd0:	f042 0220 	orr.w	r2, r2, #32
 8002dd4:	b2d2      	uxtb	r2, r2
 8002dd6:	f002 021f 	and.w	r2, r2, #31
 8002dda:	2101      	movs	r1, #1
 8002ddc:	fa01 f202 	lsl.w	r2, r1, r2
 8002de0:	4013      	ands	r3, r2
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d17b      	bne.n	8002ede <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e0f3      	b.n	8002fd2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	2b02      	cmp	r3, #2
 8002df0:	d13c      	bne.n	8002e6c <HAL_RCC_ClockConfig+0x178>
 8002df2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002df6:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002df8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002dfa:	fa93 f3a3 	rbit	r3, r3
 8002dfe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002e00:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e02:	fab3 f383 	clz	r3, r3
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	095b      	lsrs	r3, r3, #5
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	f043 0301 	orr.w	r3, r3, #1
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d102      	bne.n	8002e1c <HAL_RCC_ClockConfig+0x128>
 8002e16:	4b4f      	ldr	r3, [pc, #316]	@ (8002f54 <HAL_RCC_ClockConfig+0x260>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	e00f      	b.n	8002e3c <HAL_RCC_ClockConfig+0x148>
 8002e1c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002e20:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e22:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002e24:	fa93 f3a3 	rbit	r3, r3
 8002e28:	647b      	str	r3, [r7, #68]	@ 0x44
 8002e2a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002e2e:	643b      	str	r3, [r7, #64]	@ 0x40
 8002e30:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e32:	fa93 f3a3 	rbit	r3, r3
 8002e36:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002e38:	4b46      	ldr	r3, [pc, #280]	@ (8002f54 <HAL_RCC_ClockConfig+0x260>)
 8002e3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e3c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002e40:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002e42:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002e44:	fa92 f2a2 	rbit	r2, r2
 8002e48:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8002e4a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002e4c:	fab2 f282 	clz	r2, r2
 8002e50:	b2d2      	uxtb	r2, r2
 8002e52:	f042 0220 	orr.w	r2, r2, #32
 8002e56:	b2d2      	uxtb	r2, r2
 8002e58:	f002 021f 	and.w	r2, r2, #31
 8002e5c:	2101      	movs	r1, #1
 8002e5e:	fa01 f202 	lsl.w	r2, r1, r2
 8002e62:	4013      	ands	r3, r2
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d13a      	bne.n	8002ede <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e0b2      	b.n	8002fd2 <HAL_RCC_ClockConfig+0x2de>
 8002e6c:	2302      	movs	r3, #2
 8002e6e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e72:	fa93 f3a3 	rbit	r3, r3
 8002e76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002e78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e7a:	fab3 f383 	clz	r3, r3
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	095b      	lsrs	r3, r3, #5
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	f043 0301 	orr.w	r3, r3, #1
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d102      	bne.n	8002e94 <HAL_RCC_ClockConfig+0x1a0>
 8002e8e:	4b31      	ldr	r3, [pc, #196]	@ (8002f54 <HAL_RCC_ClockConfig+0x260>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	e00d      	b.n	8002eb0 <HAL_RCC_ClockConfig+0x1bc>
 8002e94:	2302      	movs	r3, #2
 8002e96:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e9a:	fa93 f3a3 	rbit	r3, r3
 8002e9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ea0:	2302      	movs	r3, #2
 8002ea2:	623b      	str	r3, [r7, #32]
 8002ea4:	6a3b      	ldr	r3, [r7, #32]
 8002ea6:	fa93 f3a3 	rbit	r3, r3
 8002eaa:	61fb      	str	r3, [r7, #28]
 8002eac:	4b29      	ldr	r3, [pc, #164]	@ (8002f54 <HAL_RCC_ClockConfig+0x260>)
 8002eae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eb0:	2202      	movs	r2, #2
 8002eb2:	61ba      	str	r2, [r7, #24]
 8002eb4:	69ba      	ldr	r2, [r7, #24]
 8002eb6:	fa92 f2a2 	rbit	r2, r2
 8002eba:	617a      	str	r2, [r7, #20]
  return result;
 8002ebc:	697a      	ldr	r2, [r7, #20]
 8002ebe:	fab2 f282 	clz	r2, r2
 8002ec2:	b2d2      	uxtb	r2, r2
 8002ec4:	f042 0220 	orr.w	r2, r2, #32
 8002ec8:	b2d2      	uxtb	r2, r2
 8002eca:	f002 021f 	and.w	r2, r2, #31
 8002ece:	2101      	movs	r1, #1
 8002ed0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d101      	bne.n	8002ede <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e079      	b.n	8002fd2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ede:	4b1d      	ldr	r3, [pc, #116]	@ (8002f54 <HAL_RCC_ClockConfig+0x260>)
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	f023 0203 	bic.w	r2, r3, #3
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	491a      	ldr	r1, [pc, #104]	@ (8002f54 <HAL_RCC_ClockConfig+0x260>)
 8002eec:	4313      	orrs	r3, r2
 8002eee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ef0:	f7fd fde0 	bl	8000ab4 <HAL_GetTick>
 8002ef4:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ef6:	e00a      	b.n	8002f0e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ef8:	f7fd fddc 	bl	8000ab4 <HAL_GetTick>
 8002efc:	4602      	mov	r2, r0
 8002efe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d901      	bls.n	8002f0e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002f0a:	2303      	movs	r3, #3
 8002f0c:	e061      	b.n	8002fd2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f0e:	4b11      	ldr	r3, [pc, #68]	@ (8002f54 <HAL_RCC_ClockConfig+0x260>)
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	f003 020c 	and.w	r2, r3, #12
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d1eb      	bne.n	8002ef8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f20:	4b0b      	ldr	r3, [pc, #44]	@ (8002f50 <HAL_RCC_ClockConfig+0x25c>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 0307 	and.w	r3, r3, #7
 8002f28:	683a      	ldr	r2, [r7, #0]
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	d214      	bcs.n	8002f58 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f2e:	4b08      	ldr	r3, [pc, #32]	@ (8002f50 <HAL_RCC_ClockConfig+0x25c>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f023 0207 	bic.w	r2, r3, #7
 8002f36:	4906      	ldr	r1, [pc, #24]	@ (8002f50 <HAL_RCC_ClockConfig+0x25c>)
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f3e:	4b04      	ldr	r3, [pc, #16]	@ (8002f50 <HAL_RCC_ClockConfig+0x25c>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 0307 	and.w	r3, r3, #7
 8002f46:	683a      	ldr	r2, [r7, #0]
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d005      	beq.n	8002f58 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e040      	b.n	8002fd2 <HAL_RCC_ClockConfig+0x2de>
 8002f50:	40022000 	.word	0x40022000
 8002f54:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 0304 	and.w	r3, r3, #4
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d008      	beq.n	8002f76 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f64:	4b1d      	ldr	r3, [pc, #116]	@ (8002fdc <HAL_RCC_ClockConfig+0x2e8>)
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	68db      	ldr	r3, [r3, #12]
 8002f70:	491a      	ldr	r1, [pc, #104]	@ (8002fdc <HAL_RCC_ClockConfig+0x2e8>)
 8002f72:	4313      	orrs	r3, r2
 8002f74:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 0308 	and.w	r3, r3, #8
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d009      	beq.n	8002f96 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f82:	4b16      	ldr	r3, [pc, #88]	@ (8002fdc <HAL_RCC_ClockConfig+0x2e8>)
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	691b      	ldr	r3, [r3, #16]
 8002f8e:	00db      	lsls	r3, r3, #3
 8002f90:	4912      	ldr	r1, [pc, #72]	@ (8002fdc <HAL_RCC_ClockConfig+0x2e8>)
 8002f92:	4313      	orrs	r3, r2
 8002f94:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002f96:	f000 f829 	bl	8002fec <HAL_RCC_GetSysClockFreq>
 8002f9a:	4601      	mov	r1, r0
 8002f9c:	4b0f      	ldr	r3, [pc, #60]	@ (8002fdc <HAL_RCC_ClockConfig+0x2e8>)
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002fa4:	22f0      	movs	r2, #240	@ 0xf0
 8002fa6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fa8:	693a      	ldr	r2, [r7, #16]
 8002faa:	fa92 f2a2 	rbit	r2, r2
 8002fae:	60fa      	str	r2, [r7, #12]
  return result;
 8002fb0:	68fa      	ldr	r2, [r7, #12]
 8002fb2:	fab2 f282 	clz	r2, r2
 8002fb6:	b2d2      	uxtb	r2, r2
 8002fb8:	40d3      	lsrs	r3, r2
 8002fba:	4a09      	ldr	r2, [pc, #36]	@ (8002fe0 <HAL_RCC_ClockConfig+0x2ec>)
 8002fbc:	5cd3      	ldrb	r3, [r2, r3]
 8002fbe:	fa21 f303 	lsr.w	r3, r1, r3
 8002fc2:	4a08      	ldr	r2, [pc, #32]	@ (8002fe4 <HAL_RCC_ClockConfig+0x2f0>)
 8002fc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002fc6:	4b08      	ldr	r3, [pc, #32]	@ (8002fe8 <HAL_RCC_ClockConfig+0x2f4>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f7fd fc6c 	bl	80008a8 <HAL_InitTick>
  
  return HAL_OK;
 8002fd0:	2300      	movs	r3, #0
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3778      	adds	r7, #120	@ 0x78
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	40021000 	.word	0x40021000
 8002fe0:	08005ab4 	.word	0x08005ab4
 8002fe4:	20000000 	.word	0x20000000
 8002fe8:	20000004 	.word	0x20000004

08002fec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b087      	sub	sp, #28
 8002ff0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	60fb      	str	r3, [r7, #12]
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	60bb      	str	r3, [r7, #8]
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	617b      	str	r3, [r7, #20]
 8002ffe:	2300      	movs	r3, #0
 8003000:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003002:	2300      	movs	r3, #0
 8003004:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003006:	4b1e      	ldr	r3, [pc, #120]	@ (8003080 <HAL_RCC_GetSysClockFreq+0x94>)
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	f003 030c 	and.w	r3, r3, #12
 8003012:	2b04      	cmp	r3, #4
 8003014:	d002      	beq.n	800301c <HAL_RCC_GetSysClockFreq+0x30>
 8003016:	2b08      	cmp	r3, #8
 8003018:	d003      	beq.n	8003022 <HAL_RCC_GetSysClockFreq+0x36>
 800301a:	e026      	b.n	800306a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800301c:	4b19      	ldr	r3, [pc, #100]	@ (8003084 <HAL_RCC_GetSysClockFreq+0x98>)
 800301e:	613b      	str	r3, [r7, #16]
      break;
 8003020:	e026      	b.n	8003070 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	0c9b      	lsrs	r3, r3, #18
 8003026:	f003 030f 	and.w	r3, r3, #15
 800302a:	4a17      	ldr	r2, [pc, #92]	@ (8003088 <HAL_RCC_GetSysClockFreq+0x9c>)
 800302c:	5cd3      	ldrb	r3, [r2, r3]
 800302e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8003030:	4b13      	ldr	r3, [pc, #76]	@ (8003080 <HAL_RCC_GetSysClockFreq+0x94>)
 8003032:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003034:	f003 030f 	and.w	r3, r3, #15
 8003038:	4a14      	ldr	r2, [pc, #80]	@ (800308c <HAL_RCC_GetSysClockFreq+0xa0>)
 800303a:	5cd3      	ldrb	r3, [r2, r3]
 800303c:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003044:	2b00      	cmp	r3, #0
 8003046:	d008      	beq.n	800305a <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003048:	4a0e      	ldr	r2, [pc, #56]	@ (8003084 <HAL_RCC_GetSysClockFreq+0x98>)
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	fb02 f303 	mul.w	r3, r2, r3
 8003056:	617b      	str	r3, [r7, #20]
 8003058:	e004      	b.n	8003064 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	4a0c      	ldr	r2, [pc, #48]	@ (8003090 <HAL_RCC_GetSysClockFreq+0xa4>)
 800305e:	fb02 f303 	mul.w	r3, r2, r3
 8003062:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	613b      	str	r3, [r7, #16]
      break;
 8003068:	e002      	b.n	8003070 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800306a:	4b06      	ldr	r3, [pc, #24]	@ (8003084 <HAL_RCC_GetSysClockFreq+0x98>)
 800306c:	613b      	str	r3, [r7, #16]
      break;
 800306e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003070:	693b      	ldr	r3, [r7, #16]
}
 8003072:	4618      	mov	r0, r3
 8003074:	371c      	adds	r7, #28
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr
 800307e:	bf00      	nop
 8003080:	40021000 	.word	0x40021000
 8003084:	007a1200 	.word	0x007a1200
 8003088:	08005acc 	.word	0x08005acc
 800308c:	08005adc 	.word	0x08005adc
 8003090:	003d0900 	.word	0x003d0900

08003094 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003094:	b480      	push	{r7}
 8003096:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003098:	4b03      	ldr	r3, [pc, #12]	@ (80030a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800309a:	681b      	ldr	r3, [r3, #0]
}
 800309c:	4618      	mov	r0, r3
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr
 80030a6:	bf00      	nop
 80030a8:	20000000 	.word	0x20000000

080030ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b082      	sub	sp, #8
 80030b0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80030b2:	f7ff ffef 	bl	8003094 <HAL_RCC_GetHCLKFreq>
 80030b6:	4601      	mov	r1, r0
 80030b8:	4b0b      	ldr	r3, [pc, #44]	@ (80030e8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80030c0:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80030c4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030c6:	687a      	ldr	r2, [r7, #4]
 80030c8:	fa92 f2a2 	rbit	r2, r2
 80030cc:	603a      	str	r2, [r7, #0]
  return result;
 80030ce:	683a      	ldr	r2, [r7, #0]
 80030d0:	fab2 f282 	clz	r2, r2
 80030d4:	b2d2      	uxtb	r2, r2
 80030d6:	40d3      	lsrs	r3, r2
 80030d8:	4a04      	ldr	r2, [pc, #16]	@ (80030ec <HAL_RCC_GetPCLK1Freq+0x40>)
 80030da:	5cd3      	ldrb	r3, [r2, r3]
 80030dc:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80030e0:	4618      	mov	r0, r3
 80030e2:	3708      	adds	r7, #8
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}
 80030e8:	40021000 	.word	0x40021000
 80030ec:	08005ac4 	.word	0x08005ac4

080030f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b082      	sub	sp, #8
 80030f4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80030f6:	f7ff ffcd 	bl	8003094 <HAL_RCC_GetHCLKFreq>
 80030fa:	4601      	mov	r1, r0
 80030fc:	4b0b      	ldr	r3, [pc, #44]	@ (800312c <HAL_RCC_GetPCLK2Freq+0x3c>)
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8003104:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8003108:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	fa92 f2a2 	rbit	r2, r2
 8003110:	603a      	str	r2, [r7, #0]
  return result;
 8003112:	683a      	ldr	r2, [r7, #0]
 8003114:	fab2 f282 	clz	r2, r2
 8003118:	b2d2      	uxtb	r2, r2
 800311a:	40d3      	lsrs	r3, r2
 800311c:	4a04      	ldr	r2, [pc, #16]	@ (8003130 <HAL_RCC_GetPCLK2Freq+0x40>)
 800311e:	5cd3      	ldrb	r3, [r2, r3]
 8003120:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003124:	4618      	mov	r0, r3
 8003126:	3708      	adds	r7, #8
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}
 800312c:	40021000 	.word	0x40021000
 8003130:	08005ac4 	.word	0x08005ac4

08003134 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003134:	b480      	push	{r7}
 8003136:	b083      	sub	sp, #12
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
 800313c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	220f      	movs	r2, #15
 8003142:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003144:	4b12      	ldr	r3, [pc, #72]	@ (8003190 <HAL_RCC_GetClockConfig+0x5c>)
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	f003 0203 	and.w	r2, r3, #3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8003150:	4b0f      	ldr	r3, [pc, #60]	@ (8003190 <HAL_RCC_GetClockConfig+0x5c>)
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 800315c:	4b0c      	ldr	r3, [pc, #48]	@ (8003190 <HAL_RCC_GetClockConfig+0x5c>)
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003168:	4b09      	ldr	r3, [pc, #36]	@ (8003190 <HAL_RCC_GetClockConfig+0x5c>)
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	08db      	lsrs	r3, r3, #3
 800316e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8003176:	4b07      	ldr	r3, [pc, #28]	@ (8003194 <HAL_RCC_GetClockConfig+0x60>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 0207 	and.w	r2, r3, #7
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	601a      	str	r2, [r3, #0]
}
 8003182:	bf00      	nop
 8003184:	370c      	adds	r7, #12
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr
 800318e:	bf00      	nop
 8003190:	40021000 	.word	0x40021000
 8003194:	40022000 	.word	0x40022000

08003198 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b082      	sub	sp, #8
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d101      	bne.n	80031aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e049      	b.n	800323e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d106      	bne.n	80031c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f000 f841 	bl	8003246 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2202      	movs	r2, #2
 80031c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	3304      	adds	r3, #4
 80031d4:	4619      	mov	r1, r3
 80031d6:	4610      	mov	r0, r2
 80031d8:	f000 f9be 	bl	8003558 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2201      	movs	r2, #1
 80031e0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2201      	movs	r2, #1
 80031e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2201      	movs	r2, #1
 80031f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2201      	movs	r2, #1
 80031f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2201      	movs	r2, #1
 8003200:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2201      	movs	r2, #1
 8003208:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2201      	movs	r2, #1
 8003210:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2201      	movs	r2, #1
 8003218:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2201      	movs	r2, #1
 8003220:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2201      	movs	r2, #1
 8003228:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2201      	movs	r2, #1
 8003230:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2201      	movs	r2, #1
 8003238:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800323c:	2300      	movs	r3, #0
}
 800323e:	4618      	mov	r0, r3
 8003240:	3708      	adds	r7, #8
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}

08003246 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003246:	b480      	push	{r7}
 8003248:	b083      	sub	sp, #12
 800324a:	af00      	add	r7, sp, #0
 800324c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800324e:	bf00      	nop
 8003250:	370c      	adds	r7, #12
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr
	...

0800325c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800325c:	b480      	push	{r7}
 800325e:	b085      	sub	sp, #20
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800326a:	b2db      	uxtb	r3, r3
 800326c:	2b01      	cmp	r3, #1
 800326e:	d001      	beq.n	8003274 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	e03b      	b.n	80032ec <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2202      	movs	r2, #2
 8003278:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	68da      	ldr	r2, [r3, #12]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f042 0201 	orr.w	r2, r2, #1
 800328a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a19      	ldr	r2, [pc, #100]	@ (80032f8 <HAL_TIM_Base_Start_IT+0x9c>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d009      	beq.n	80032aa <HAL_TIM_Base_Start_IT+0x4e>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800329e:	d004      	beq.n	80032aa <HAL_TIM_Base_Start_IT+0x4e>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a15      	ldr	r2, [pc, #84]	@ (80032fc <HAL_TIM_Base_Start_IT+0xa0>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d115      	bne.n	80032d6 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	689a      	ldr	r2, [r3, #8]
 80032b0:	4b13      	ldr	r3, [pc, #76]	@ (8003300 <HAL_TIM_Base_Start_IT+0xa4>)
 80032b2:	4013      	ands	r3, r2
 80032b4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2b06      	cmp	r3, #6
 80032ba:	d015      	beq.n	80032e8 <HAL_TIM_Base_Start_IT+0x8c>
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032c2:	d011      	beq.n	80032e8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f042 0201 	orr.w	r2, r2, #1
 80032d2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032d4:	e008      	b.n	80032e8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f042 0201 	orr.w	r2, r2, #1
 80032e4:	601a      	str	r2, [r3, #0]
 80032e6:	e000      	b.n	80032ea <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032e8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80032ea:	2300      	movs	r3, #0
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	3714      	adds	r7, #20
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr
 80032f8:	40012c00 	.word	0x40012c00
 80032fc:	40014000 	.word	0x40014000
 8003300:	00010007 	.word	0x00010007

08003304 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b084      	sub	sp, #16
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	68db      	ldr	r3, [r3, #12]
 8003312:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	691b      	ldr	r3, [r3, #16]
 800331a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	f003 0302 	and.w	r3, r3, #2
 8003322:	2b00      	cmp	r3, #0
 8003324:	d020      	beq.n	8003368 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	f003 0302 	and.w	r3, r3, #2
 800332c:	2b00      	cmp	r3, #0
 800332e:	d01b      	beq.n	8003368 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f06f 0202 	mvn.w	r2, #2
 8003338:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2201      	movs	r2, #1
 800333e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	699b      	ldr	r3, [r3, #24]
 8003346:	f003 0303 	and.w	r3, r3, #3
 800334a:	2b00      	cmp	r3, #0
 800334c:	d003      	beq.n	8003356 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f000 f8e4 	bl	800351c <HAL_TIM_IC_CaptureCallback>
 8003354:	e005      	b.n	8003362 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	f000 f8d6 	bl	8003508 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800335c:	6878      	ldr	r0, [r7, #4]
 800335e:	f000 f8e7 	bl	8003530 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2200      	movs	r2, #0
 8003366:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	f003 0304 	and.w	r3, r3, #4
 800336e:	2b00      	cmp	r3, #0
 8003370:	d020      	beq.n	80033b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	f003 0304 	and.w	r3, r3, #4
 8003378:	2b00      	cmp	r3, #0
 800337a:	d01b      	beq.n	80033b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f06f 0204 	mvn.w	r2, #4
 8003384:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2202      	movs	r2, #2
 800338a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	699b      	ldr	r3, [r3, #24]
 8003392:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003396:	2b00      	cmp	r3, #0
 8003398:	d003      	beq.n	80033a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f000 f8be 	bl	800351c <HAL_TIM_IC_CaptureCallback>
 80033a0:	e005      	b.n	80033ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f000 f8b0 	bl	8003508 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033a8:	6878      	ldr	r0, [r7, #4]
 80033aa:	f000 f8c1 	bl	8003530 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2200      	movs	r2, #0
 80033b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	f003 0308 	and.w	r3, r3, #8
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d020      	beq.n	8003400 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	f003 0308 	and.w	r3, r3, #8
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d01b      	beq.n	8003400 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f06f 0208 	mvn.w	r2, #8
 80033d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2204      	movs	r2, #4
 80033d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	69db      	ldr	r3, [r3, #28]
 80033de:	f003 0303 	and.w	r3, r3, #3
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d003      	beq.n	80033ee <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f000 f898 	bl	800351c <HAL_TIM_IC_CaptureCallback>
 80033ec:	e005      	b.n	80033fa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f000 f88a 	bl	8003508 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	f000 f89b 	bl	8003530 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2200      	movs	r2, #0
 80033fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	f003 0310 	and.w	r3, r3, #16
 8003406:	2b00      	cmp	r3, #0
 8003408:	d020      	beq.n	800344c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	f003 0310 	and.w	r3, r3, #16
 8003410:	2b00      	cmp	r3, #0
 8003412:	d01b      	beq.n	800344c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f06f 0210 	mvn.w	r2, #16
 800341c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2208      	movs	r2, #8
 8003422:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	69db      	ldr	r3, [r3, #28]
 800342a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800342e:	2b00      	cmp	r3, #0
 8003430:	d003      	beq.n	800343a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f000 f872 	bl	800351c <HAL_TIM_IC_CaptureCallback>
 8003438:	e005      	b.n	8003446 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f000 f864 	bl	8003508 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	f000 f875 	bl	8003530 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2200      	movs	r2, #0
 800344a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	f003 0301 	and.w	r3, r3, #1
 8003452:	2b00      	cmp	r3, #0
 8003454:	d00c      	beq.n	8003470 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	f003 0301 	and.w	r3, r3, #1
 800345c:	2b00      	cmp	r3, #0
 800345e:	d007      	beq.n	8003470 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f06f 0201 	mvn.w	r2, #1
 8003468:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f7fd f93c 	bl	80006e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003476:	2b00      	cmp	r3, #0
 8003478:	d00c      	beq.n	8003494 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003480:	2b00      	cmp	r3, #0
 8003482:	d007      	beq.n	8003494 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800348c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f000 f8e6 	bl	8003660 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800349a:	2b00      	cmp	r3, #0
 800349c:	d00c      	beq.n	80034b8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d007      	beq.n	80034b8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80034b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f000 f8de 	bl	8003674 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d00c      	beq.n	80034dc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d007      	beq.n	80034dc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80034d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f000 f834 	bl	8003544 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	f003 0320 	and.w	r3, r3, #32
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d00c      	beq.n	8003500 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	f003 0320 	and.w	r3, r3, #32
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d007      	beq.n	8003500 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f06f 0220 	mvn.w	r2, #32
 80034f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f000 f8a6 	bl	800364c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003500:	bf00      	nop
 8003502:	3710      	adds	r7, #16
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}

08003508 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003508:	b480      	push	{r7}
 800350a:	b083      	sub	sp, #12
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003510:	bf00      	nop
 8003512:	370c      	adds	r7, #12
 8003514:	46bd      	mov	sp, r7
 8003516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351a:	4770      	bx	lr

0800351c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800351c:	b480      	push	{r7}
 800351e:	b083      	sub	sp, #12
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003524:	bf00      	nop
 8003526:	370c      	adds	r7, #12
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr

08003530 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003530:	b480      	push	{r7}
 8003532:	b083      	sub	sp, #12
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003538:	bf00      	nop
 800353a:	370c      	adds	r7, #12
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr

08003544 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003544:	b480      	push	{r7}
 8003546:	b083      	sub	sp, #12
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800354c:	bf00      	nop
 800354e:	370c      	adds	r7, #12
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr

08003558 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003558:	b480      	push	{r7}
 800355a:	b085      	sub	sp, #20
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
 8003560:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	4a34      	ldr	r2, [pc, #208]	@ (800363c <TIM_Base_SetConfig+0xe4>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d003      	beq.n	8003578 <TIM_Base_SetConfig+0x20>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003576:	d108      	bne.n	800358a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800357e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	68fa      	ldr	r2, [r7, #12]
 8003586:	4313      	orrs	r3, r2
 8003588:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	4a2b      	ldr	r2, [pc, #172]	@ (800363c <TIM_Base_SetConfig+0xe4>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d00f      	beq.n	80035b2 <TIM_Base_SetConfig+0x5a>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003598:	d00b      	beq.n	80035b2 <TIM_Base_SetConfig+0x5a>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	4a28      	ldr	r2, [pc, #160]	@ (8003640 <TIM_Base_SetConfig+0xe8>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d007      	beq.n	80035b2 <TIM_Base_SetConfig+0x5a>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	4a27      	ldr	r2, [pc, #156]	@ (8003644 <TIM_Base_SetConfig+0xec>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d003      	beq.n	80035b2 <TIM_Base_SetConfig+0x5a>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	4a26      	ldr	r2, [pc, #152]	@ (8003648 <TIM_Base_SetConfig+0xf0>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d108      	bne.n	80035c4 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80035b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	68db      	ldr	r3, [r3, #12]
 80035be:	68fa      	ldr	r2, [r7, #12]
 80035c0:	4313      	orrs	r3, r2
 80035c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	695b      	ldr	r3, [r3, #20]
 80035ce:	4313      	orrs	r3, r2
 80035d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	68fa      	ldr	r2, [r7, #12]
 80035d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	689a      	ldr	r2, [r3, #8]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	4a14      	ldr	r2, [pc, #80]	@ (800363c <TIM_Base_SetConfig+0xe4>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d00b      	beq.n	8003608 <TIM_Base_SetConfig+0xb0>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	4a13      	ldr	r2, [pc, #76]	@ (8003640 <TIM_Base_SetConfig+0xe8>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d007      	beq.n	8003608 <TIM_Base_SetConfig+0xb0>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	4a12      	ldr	r2, [pc, #72]	@ (8003644 <TIM_Base_SetConfig+0xec>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d003      	beq.n	8003608 <TIM_Base_SetConfig+0xb0>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	4a11      	ldr	r2, [pc, #68]	@ (8003648 <TIM_Base_SetConfig+0xf0>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d103      	bne.n	8003610 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	691a      	ldr	r2, [r3, #16]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2201      	movs	r2, #1
 8003614:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	691b      	ldr	r3, [r3, #16]
 800361a:	f003 0301 	and.w	r3, r3, #1
 800361e:	2b01      	cmp	r3, #1
 8003620:	d105      	bne.n	800362e <TIM_Base_SetConfig+0xd6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	691b      	ldr	r3, [r3, #16]
 8003626:	f023 0201 	bic.w	r2, r3, #1
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	611a      	str	r2, [r3, #16]
  }
}
 800362e:	bf00      	nop
 8003630:	3714      	adds	r7, #20
 8003632:	46bd      	mov	sp, r7
 8003634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003638:	4770      	bx	lr
 800363a:	bf00      	nop
 800363c:	40012c00 	.word	0x40012c00
 8003640:	40014000 	.word	0x40014000
 8003644:	40014400 	.word	0x40014400
 8003648:	40014800 	.word	0x40014800

0800364c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800364c:	b480      	push	{r7}
 800364e:	b083      	sub	sp, #12
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003654:	bf00      	nop
 8003656:	370c      	adds	r7, #12
 8003658:	46bd      	mov	sp, r7
 800365a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365e:	4770      	bx	lr

08003660 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003660:	b480      	push	{r7}
 8003662:	b083      	sub	sp, #12
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003668:	bf00      	nop
 800366a:	370c      	adds	r7, #12
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr

08003674 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003674:	b480      	push	{r7}
 8003676:	b083      	sub	sp, #12
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800367c:	bf00      	nop
 800367e:	370c      	adds	r7, #12
 8003680:	46bd      	mov	sp, r7
 8003682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003686:	4770      	bx	lr

08003688 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b082      	sub	sp, #8
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d101      	bne.n	800369a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e040      	b.n	800371c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d106      	bne.n	80036b0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2200      	movs	r2, #0
 80036a6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f7fd f8ba 	bl	8000824 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2224      	movs	r2, #36	@ 0x24
 80036b4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f022 0201 	bic.w	r2, r2, #1
 80036c4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d002      	beq.n	80036d4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f000 f95e 	bl	8003990 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80036d4:	6878      	ldr	r0, [r7, #4]
 80036d6:	f000 f825 	bl	8003724 <UART_SetConfig>
 80036da:	4603      	mov	r3, r0
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d101      	bne.n	80036e4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	e01b      	b.n	800371c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	685a      	ldr	r2, [r3, #4]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80036f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	689a      	ldr	r2, [r3, #8]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003702:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f042 0201 	orr.w	r2, r2, #1
 8003712:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003714:	6878      	ldr	r0, [r7, #4]
 8003716:	f000 f9dd 	bl	8003ad4 <UART_CheckIdleState>
 800371a:	4603      	mov	r3, r0
}
 800371c:	4618      	mov	r0, r3
 800371e:	3708      	adds	r7, #8
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}

08003724 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b088      	sub	sp, #32
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800372c:	2300      	movs	r3, #0
 800372e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	689a      	ldr	r2, [r3, #8]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	691b      	ldr	r3, [r3, #16]
 8003738:	431a      	orrs	r2, r3
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	695b      	ldr	r3, [r3, #20]
 800373e:	431a      	orrs	r2, r3
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	69db      	ldr	r3, [r3, #28]
 8003744:	4313      	orrs	r3, r2
 8003746:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	4b8a      	ldr	r3, [pc, #552]	@ (8003978 <UART_SetConfig+0x254>)
 8003750:	4013      	ands	r3, r2
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	6812      	ldr	r2, [r2, #0]
 8003756:	6979      	ldr	r1, [r7, #20]
 8003758:	430b      	orrs	r3, r1
 800375a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	68da      	ldr	r2, [r3, #12]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	430a      	orrs	r2, r1
 8003770:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	699b      	ldr	r3, [r3, #24]
 8003776:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6a1b      	ldr	r3, [r3, #32]
 800377c:	697a      	ldr	r2, [r7, #20]
 800377e:	4313      	orrs	r3, r2
 8003780:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	697a      	ldr	r2, [r7, #20]
 8003792:	430a      	orrs	r2, r1
 8003794:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a78      	ldr	r2, [pc, #480]	@ (800397c <UART_SetConfig+0x258>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d120      	bne.n	80037e2 <UART_SetConfig+0xbe>
 80037a0:	4b77      	ldr	r3, [pc, #476]	@ (8003980 <UART_SetConfig+0x25c>)
 80037a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037a4:	f003 0303 	and.w	r3, r3, #3
 80037a8:	2b03      	cmp	r3, #3
 80037aa:	d817      	bhi.n	80037dc <UART_SetConfig+0xb8>
 80037ac:	a201      	add	r2, pc, #4	@ (adr r2, 80037b4 <UART_SetConfig+0x90>)
 80037ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037b2:	bf00      	nop
 80037b4:	080037c5 	.word	0x080037c5
 80037b8:	080037d1 	.word	0x080037d1
 80037bc:	080037d7 	.word	0x080037d7
 80037c0:	080037cb 	.word	0x080037cb
 80037c4:	2300      	movs	r3, #0
 80037c6:	77fb      	strb	r3, [r7, #31]
 80037c8:	e01d      	b.n	8003806 <UART_SetConfig+0xe2>
 80037ca:	2302      	movs	r3, #2
 80037cc:	77fb      	strb	r3, [r7, #31]
 80037ce:	e01a      	b.n	8003806 <UART_SetConfig+0xe2>
 80037d0:	2304      	movs	r3, #4
 80037d2:	77fb      	strb	r3, [r7, #31]
 80037d4:	e017      	b.n	8003806 <UART_SetConfig+0xe2>
 80037d6:	2308      	movs	r3, #8
 80037d8:	77fb      	strb	r3, [r7, #31]
 80037da:	e014      	b.n	8003806 <UART_SetConfig+0xe2>
 80037dc:	2310      	movs	r3, #16
 80037de:	77fb      	strb	r3, [r7, #31]
 80037e0:	e011      	b.n	8003806 <UART_SetConfig+0xe2>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a67      	ldr	r2, [pc, #412]	@ (8003984 <UART_SetConfig+0x260>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d102      	bne.n	80037f2 <UART_SetConfig+0xce>
 80037ec:	2300      	movs	r3, #0
 80037ee:	77fb      	strb	r3, [r7, #31]
 80037f0:	e009      	b.n	8003806 <UART_SetConfig+0xe2>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a64      	ldr	r2, [pc, #400]	@ (8003988 <UART_SetConfig+0x264>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d102      	bne.n	8003802 <UART_SetConfig+0xde>
 80037fc:	2300      	movs	r3, #0
 80037fe:	77fb      	strb	r3, [r7, #31]
 8003800:	e001      	b.n	8003806 <UART_SetConfig+0xe2>
 8003802:	2310      	movs	r3, #16
 8003804:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	69db      	ldr	r3, [r3, #28]
 800380a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800380e:	d15a      	bne.n	80038c6 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8003810:	7ffb      	ldrb	r3, [r7, #31]
 8003812:	2b08      	cmp	r3, #8
 8003814:	d827      	bhi.n	8003866 <UART_SetConfig+0x142>
 8003816:	a201      	add	r2, pc, #4	@ (adr r2, 800381c <UART_SetConfig+0xf8>)
 8003818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800381c:	08003841 	.word	0x08003841
 8003820:	08003849 	.word	0x08003849
 8003824:	08003851 	.word	0x08003851
 8003828:	08003867 	.word	0x08003867
 800382c:	08003857 	.word	0x08003857
 8003830:	08003867 	.word	0x08003867
 8003834:	08003867 	.word	0x08003867
 8003838:	08003867 	.word	0x08003867
 800383c:	0800385f 	.word	0x0800385f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003840:	f7ff fc34 	bl	80030ac <HAL_RCC_GetPCLK1Freq>
 8003844:	61b8      	str	r0, [r7, #24]
        break;
 8003846:	e013      	b.n	8003870 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003848:	f7ff fc52 	bl	80030f0 <HAL_RCC_GetPCLK2Freq>
 800384c:	61b8      	str	r0, [r7, #24]
        break;
 800384e:	e00f      	b.n	8003870 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003850:	4b4e      	ldr	r3, [pc, #312]	@ (800398c <UART_SetConfig+0x268>)
 8003852:	61bb      	str	r3, [r7, #24]
        break;
 8003854:	e00c      	b.n	8003870 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003856:	f7ff fbc9 	bl	8002fec <HAL_RCC_GetSysClockFreq>
 800385a:	61b8      	str	r0, [r7, #24]
        break;
 800385c:	e008      	b.n	8003870 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800385e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003862:	61bb      	str	r3, [r7, #24]
        break;
 8003864:	e004      	b.n	8003870 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8003866:	2300      	movs	r3, #0
 8003868:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	77bb      	strb	r3, [r7, #30]
        break;
 800386e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003870:	69bb      	ldr	r3, [r7, #24]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d074      	beq.n	8003960 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003876:	69bb      	ldr	r3, [r7, #24]
 8003878:	005a      	lsls	r2, r3, #1
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	085b      	lsrs	r3, r3, #1
 8003880:	441a      	add	r2, r3
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	fbb2 f3f3 	udiv	r3, r2, r3
 800388a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	2b0f      	cmp	r3, #15
 8003890:	d916      	bls.n	80038c0 <UART_SetConfig+0x19c>
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003898:	d212      	bcs.n	80038c0 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	b29b      	uxth	r3, r3
 800389e:	f023 030f 	bic.w	r3, r3, #15
 80038a2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	085b      	lsrs	r3, r3, #1
 80038a8:	b29b      	uxth	r3, r3
 80038aa:	f003 0307 	and.w	r3, r3, #7
 80038ae:	b29a      	uxth	r2, r3
 80038b0:	89fb      	ldrh	r3, [r7, #14]
 80038b2:	4313      	orrs	r3, r2
 80038b4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	89fa      	ldrh	r2, [r7, #14]
 80038bc:	60da      	str	r2, [r3, #12]
 80038be:	e04f      	b.n	8003960 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	77bb      	strb	r3, [r7, #30]
 80038c4:	e04c      	b.n	8003960 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80038c6:	7ffb      	ldrb	r3, [r7, #31]
 80038c8:	2b08      	cmp	r3, #8
 80038ca:	d828      	bhi.n	800391e <UART_SetConfig+0x1fa>
 80038cc:	a201      	add	r2, pc, #4	@ (adr r2, 80038d4 <UART_SetConfig+0x1b0>)
 80038ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038d2:	bf00      	nop
 80038d4:	080038f9 	.word	0x080038f9
 80038d8:	08003901 	.word	0x08003901
 80038dc:	08003909 	.word	0x08003909
 80038e0:	0800391f 	.word	0x0800391f
 80038e4:	0800390f 	.word	0x0800390f
 80038e8:	0800391f 	.word	0x0800391f
 80038ec:	0800391f 	.word	0x0800391f
 80038f0:	0800391f 	.word	0x0800391f
 80038f4:	08003917 	.word	0x08003917
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038f8:	f7ff fbd8 	bl	80030ac <HAL_RCC_GetPCLK1Freq>
 80038fc:	61b8      	str	r0, [r7, #24]
        break;
 80038fe:	e013      	b.n	8003928 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003900:	f7ff fbf6 	bl	80030f0 <HAL_RCC_GetPCLK2Freq>
 8003904:	61b8      	str	r0, [r7, #24]
        break;
 8003906:	e00f      	b.n	8003928 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003908:	4b20      	ldr	r3, [pc, #128]	@ (800398c <UART_SetConfig+0x268>)
 800390a:	61bb      	str	r3, [r7, #24]
        break;
 800390c:	e00c      	b.n	8003928 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800390e:	f7ff fb6d 	bl	8002fec <HAL_RCC_GetSysClockFreq>
 8003912:	61b8      	str	r0, [r7, #24]
        break;
 8003914:	e008      	b.n	8003928 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003916:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800391a:	61bb      	str	r3, [r7, #24]
        break;
 800391c:	e004      	b.n	8003928 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800391e:	2300      	movs	r3, #0
 8003920:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	77bb      	strb	r3, [r7, #30]
        break;
 8003926:	bf00      	nop
    }

    if (pclk != 0U)
 8003928:	69bb      	ldr	r3, [r7, #24]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d018      	beq.n	8003960 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	085a      	lsrs	r2, r3, #1
 8003934:	69bb      	ldr	r3, [r7, #24]
 8003936:	441a      	add	r2, r3
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003940:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	2b0f      	cmp	r3, #15
 8003946:	d909      	bls.n	800395c <UART_SetConfig+0x238>
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800394e:	d205      	bcs.n	800395c <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	b29a      	uxth	r2, r3
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	60da      	str	r2, [r3, #12]
 800395a:	e001      	b.n	8003960 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2200      	movs	r2, #0
 8003964:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2200      	movs	r2, #0
 800396a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800396c:	7fbb      	ldrb	r3, [r7, #30]
}
 800396e:	4618      	mov	r0, r3
 8003970:	3720      	adds	r7, #32
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}
 8003976:	bf00      	nop
 8003978:	efff69f3 	.word	0xefff69f3
 800397c:	40013800 	.word	0x40013800
 8003980:	40021000 	.word	0x40021000
 8003984:	40004400 	.word	0x40004400
 8003988:	40004800 	.word	0x40004800
 800398c:	007a1200 	.word	0x007a1200

08003990 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003990:	b480      	push	{r7}
 8003992:	b083      	sub	sp, #12
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800399c:	f003 0308 	and.w	r3, r3, #8
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d00a      	beq.n	80039ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	430a      	orrs	r2, r1
 80039b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039be:	f003 0301 	and.w	r3, r3, #1
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d00a      	beq.n	80039dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	430a      	orrs	r2, r1
 80039da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039e0:	f003 0302 	and.w	r3, r3, #2
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d00a      	beq.n	80039fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	430a      	orrs	r2, r1
 80039fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a02:	f003 0304 	and.w	r3, r3, #4
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d00a      	beq.n	8003a20 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	430a      	orrs	r2, r1
 8003a1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a24:	f003 0310 	and.w	r3, r3, #16
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d00a      	beq.n	8003a42 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	430a      	orrs	r2, r1
 8003a40:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a46:	f003 0320 	and.w	r3, r3, #32
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d00a      	beq.n	8003a64 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	430a      	orrs	r2, r1
 8003a62:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d01a      	beq.n	8003aa6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	430a      	orrs	r2, r1
 8003a84:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a8a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003a8e:	d10a      	bne.n	8003aa6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	430a      	orrs	r2, r1
 8003aa4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aaa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d00a      	beq.n	8003ac8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	430a      	orrs	r2, r1
 8003ac6:	605a      	str	r2, [r3, #4]
  }
}
 8003ac8:	bf00      	nop
 8003aca:	370c      	adds	r7, #12
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr

08003ad4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b098      	sub	sp, #96	@ 0x60
 8003ad8:	af02      	add	r7, sp, #8
 8003ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003ae4:	f7fc ffe6 	bl	8000ab4 <HAL_GetTick>
 8003ae8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 0308 	and.w	r3, r3, #8
 8003af4:	2b08      	cmp	r3, #8
 8003af6:	d12e      	bne.n	8003b56 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003af8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003afc:	9300      	str	r3, [sp, #0]
 8003afe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b00:	2200      	movs	r2, #0
 8003b02:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f000 f88c 	bl	8003c24 <UART_WaitOnFlagUntilTimeout>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d021      	beq.n	8003b56 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b1a:	e853 3f00 	ldrex	r3, [r3]
 8003b1e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003b20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b22:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003b26:	653b      	str	r3, [r7, #80]	@ 0x50
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	461a      	mov	r2, r3
 8003b2e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003b30:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b32:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b34:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003b36:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003b38:	e841 2300 	strex	r3, r2, [r1]
 8003b3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003b3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d1e6      	bne.n	8003b12 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2220      	movs	r2, #32
 8003b48:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b52:	2303      	movs	r3, #3
 8003b54:	e062      	b.n	8003c1c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 0304 	and.w	r3, r3, #4
 8003b60:	2b04      	cmp	r3, #4
 8003b62:	d149      	bne.n	8003bf8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b64:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003b68:	9300      	str	r3, [sp, #0]
 8003b6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f000 f856 	bl	8003c24 <UART_WaitOnFlagUntilTimeout>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d03c      	beq.n	8003bf8 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b86:	e853 3f00 	ldrex	r3, [r3]
 8003b8a:	623b      	str	r3, [r7, #32]
   return(result);
 8003b8c:	6a3b      	ldr	r3, [r7, #32]
 8003b8e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003b92:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	461a      	mov	r2, r3
 8003b9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b9c:	633b      	str	r3, [r7, #48]	@ 0x30
 8003b9e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ba0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003ba2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ba4:	e841 2300 	strex	r3, r2, [r1]
 8003ba8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003baa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d1e6      	bne.n	8003b7e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	3308      	adds	r3, #8
 8003bb6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	e853 3f00 	ldrex	r3, [r3]
 8003bbe:	60fb      	str	r3, [r7, #12]
   return(result);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	f023 0301 	bic.w	r3, r3, #1
 8003bc6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	3308      	adds	r3, #8
 8003bce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003bd0:	61fa      	str	r2, [r7, #28]
 8003bd2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bd4:	69b9      	ldr	r1, [r7, #24]
 8003bd6:	69fa      	ldr	r2, [r7, #28]
 8003bd8:	e841 2300 	strex	r3, r2, [r1]
 8003bdc:	617b      	str	r3, [r7, #20]
   return(result);
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d1e5      	bne.n	8003bb0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2220      	movs	r2, #32
 8003be8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003bf4:	2303      	movs	r3, #3
 8003bf6:	e011      	b.n	8003c1c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2220      	movs	r2, #32
 8003bfc:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2220      	movs	r2, #32
 8003c02:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2200      	movs	r2, #0
 8003c16:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003c1a:	2300      	movs	r3, #0
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	3758      	adds	r7, #88	@ 0x58
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}

08003c24 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b084      	sub	sp, #16
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	60f8      	str	r0, [r7, #12]
 8003c2c:	60b9      	str	r1, [r7, #8]
 8003c2e:	603b      	str	r3, [r7, #0]
 8003c30:	4613      	mov	r3, r2
 8003c32:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c34:	e04f      	b.n	8003cd6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c36:	69bb      	ldr	r3, [r7, #24]
 8003c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c3c:	d04b      	beq.n	8003cd6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c3e:	f7fc ff39 	bl	8000ab4 <HAL_GetTick>
 8003c42:	4602      	mov	r2, r0
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	1ad3      	subs	r3, r2, r3
 8003c48:	69ba      	ldr	r2, [r7, #24]
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d302      	bcc.n	8003c54 <UART_WaitOnFlagUntilTimeout+0x30>
 8003c4e:	69bb      	ldr	r3, [r7, #24]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d101      	bne.n	8003c58 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003c54:	2303      	movs	r3, #3
 8003c56:	e04e      	b.n	8003cf6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f003 0304 	and.w	r3, r3, #4
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d037      	beq.n	8003cd6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	2b80      	cmp	r3, #128	@ 0x80
 8003c6a:	d034      	beq.n	8003cd6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	2b40      	cmp	r3, #64	@ 0x40
 8003c70:	d031      	beq.n	8003cd6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	69db      	ldr	r3, [r3, #28]
 8003c78:	f003 0308 	and.w	r3, r3, #8
 8003c7c:	2b08      	cmp	r3, #8
 8003c7e:	d110      	bne.n	8003ca2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	2208      	movs	r2, #8
 8003c86:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003c88:	68f8      	ldr	r0, [r7, #12]
 8003c8a:	f000 f838 	bl	8003cfe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2208      	movs	r2, #8
 8003c92:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e029      	b.n	8003cf6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	69db      	ldr	r3, [r3, #28]
 8003ca8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003cac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003cb0:	d111      	bne.n	8003cd6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003cba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003cbc:	68f8      	ldr	r0, [r7, #12]
 8003cbe:	f000 f81e 	bl	8003cfe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2220      	movs	r2, #32
 8003cc6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	e00f      	b.n	8003cf6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	69da      	ldr	r2, [r3, #28]
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	4013      	ands	r3, r2
 8003ce0:	68ba      	ldr	r2, [r7, #8]
 8003ce2:	429a      	cmp	r2, r3
 8003ce4:	bf0c      	ite	eq
 8003ce6:	2301      	moveq	r3, #1
 8003ce8:	2300      	movne	r3, #0
 8003cea:	b2db      	uxtb	r3, r3
 8003cec:	461a      	mov	r2, r3
 8003cee:	79fb      	ldrb	r3, [r7, #7]
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d0a0      	beq.n	8003c36 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003cf4:	2300      	movs	r3, #0
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3710      	adds	r7, #16
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}

08003cfe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003cfe:	b480      	push	{r7}
 8003d00:	b095      	sub	sp, #84	@ 0x54
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d0e:	e853 3f00 	ldrex	r3, [r3]
 8003d12:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003d14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d16:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003d1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	461a      	mov	r2, r3
 8003d22:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003d24:	643b      	str	r3, [r7, #64]	@ 0x40
 8003d26:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d28:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003d2a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003d2c:	e841 2300 	strex	r3, r2, [r1]
 8003d30:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003d32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d1e6      	bne.n	8003d06 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	3308      	adds	r3, #8
 8003d3e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d40:	6a3b      	ldr	r3, [r7, #32]
 8003d42:	e853 3f00 	ldrex	r3, [r3]
 8003d46:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d48:	69fb      	ldr	r3, [r7, #28]
 8003d4a:	f023 0301 	bic.w	r3, r3, #1
 8003d4e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	3308      	adds	r3, #8
 8003d56:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003d58:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003d5a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d5c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003d5e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d60:	e841 2300 	strex	r3, r2, [r1]
 8003d64:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d1e5      	bne.n	8003d38 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d118      	bne.n	8003da6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	e853 3f00 	ldrex	r3, [r3]
 8003d80:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	f023 0310 	bic.w	r3, r3, #16
 8003d88:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	461a      	mov	r2, r3
 8003d90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d92:	61bb      	str	r3, [r7, #24]
 8003d94:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d96:	6979      	ldr	r1, [r7, #20]
 8003d98:	69ba      	ldr	r2, [r7, #24]
 8003d9a:	e841 2300 	strex	r3, r2, [r1]
 8003d9e:	613b      	str	r3, [r7, #16]
   return(result);
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d1e6      	bne.n	8003d74 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2220      	movs	r2, #32
 8003daa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2200      	movs	r2, #0
 8003db2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2200      	movs	r2, #0
 8003db8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003dba:	bf00      	nop
 8003dbc:	3754      	adds	r7, #84	@ 0x54
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc4:	4770      	bx	lr

08003dc6 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003dc6:	b480      	push	{r7}
 8003dc8:	b085      	sub	sp, #20
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	4603      	mov	r3, r0
 8003dce:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003dd4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003dd8:	2b84      	cmp	r3, #132	@ 0x84
 8003dda:	d005      	beq.n	8003de8 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003ddc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	4413      	add	r3, r2
 8003de4:	3303      	adds	r3, #3
 8003de6:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003de8:	68fb      	ldr	r3, [r7, #12]
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	3714      	adds	r7, #20
 8003dee:	46bd      	mov	sp, r7
 8003df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df4:	4770      	bx	lr

08003df6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003df6:	b580      	push	{r7, lr}
 8003df8:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003dfa:	f000 fd51 	bl	80048a0 <vTaskStartScheduler>
  
  return osOK;
 8003dfe:	2300      	movs	r3, #0
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	bd80      	pop	{r7, pc}

08003e04 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003e04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e06:	b089      	sub	sp, #36	@ 0x24
 8003e08:	af04      	add	r7, sp, #16
 8003e0a:	6078      	str	r0, [r7, #4]
 8003e0c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	695b      	ldr	r3, [r3, #20]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d020      	beq.n	8003e58 <osThreadCreate+0x54>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	699b      	ldr	r3, [r3, #24]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d01c      	beq.n	8003e58 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	685c      	ldr	r4, [r3, #4]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	691e      	ldr	r6, [r3, #16]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003e30:	4618      	mov	r0, r3
 8003e32:	f7ff ffc8 	bl	8003dc6 <makeFreeRtosPriority>
 8003e36:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	695b      	ldr	r3, [r3, #20]
 8003e3c:	687a      	ldr	r2, [r7, #4]
 8003e3e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003e40:	9202      	str	r2, [sp, #8]
 8003e42:	9301      	str	r3, [sp, #4]
 8003e44:	9100      	str	r1, [sp, #0]
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	4632      	mov	r2, r6
 8003e4a:	4629      	mov	r1, r5
 8003e4c:	4620      	mov	r0, r4
 8003e4e:	f000 fb62 	bl	8004516 <xTaskCreateStatic>
 8003e52:	4603      	mov	r3, r0
 8003e54:	60fb      	str	r3, [r7, #12]
 8003e56:	e01c      	b.n	8003e92 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	685c      	ldr	r4, [r3, #4]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003e64:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f7ff ffaa 	bl	8003dc6 <makeFreeRtosPriority>
 8003e72:	4602      	mov	r2, r0
 8003e74:	f107 030c 	add.w	r3, r7, #12
 8003e78:	9301      	str	r3, [sp, #4]
 8003e7a:	9200      	str	r2, [sp, #0]
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	4632      	mov	r2, r6
 8003e80:	4629      	mov	r1, r5
 8003e82:	4620      	mov	r0, r4
 8003e84:	f000 fba6 	bl	80045d4 <xTaskCreate>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d001      	beq.n	8003e92 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	e000      	b.n	8003e94 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003e92:	68fb      	ldr	r3, [r7, #12]
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3714      	adds	r7, #20
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003e9c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b084      	sub	sp, #16
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d001      	beq.n	8003eb2 <osDelay+0x16>
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	e000      	b.n	8003eb4 <osDelay+0x18>
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f000 fcbd 	bl	8004834 <vTaskDelay>
  
  return osOK;
 8003eba:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	3710      	adds	r7, #16
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}

08003ec4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b083      	sub	sp, #12
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	f103 0208 	add.w	r2, r3, #8
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	f04f 32ff 	mov.w	r2, #4294967295
 8003edc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	f103 0208 	add.w	r2, r3, #8
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	f103 0208 	add.w	r2, r3, #8
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003ef8:	bf00      	nop
 8003efa:	370c      	adds	r7, #12
 8003efc:	46bd      	mov	sp, r7
 8003efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f02:	4770      	bx	lr

08003f04 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003f04:	b480      	push	{r7}
 8003f06:	b083      	sub	sp, #12
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003f12:	bf00      	nop
 8003f14:	370c      	adds	r7, #12
 8003f16:	46bd      	mov	sp, r7
 8003f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1c:	4770      	bx	lr

08003f1e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003f1e:	b480      	push	{r7}
 8003f20:	b085      	sub	sp, #20
 8003f22:	af00      	add	r7, sp, #0
 8003f24:	6078      	str	r0, [r7, #4]
 8003f26:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	68fa      	ldr	r2, [r7, #12]
 8003f32:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	689a      	ldr	r2, [r3, #8]
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	683a      	ldr	r2, [r7, #0]
 8003f42:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	683a      	ldr	r2, [r7, #0]
 8003f48:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	687a      	ldr	r2, [r7, #4]
 8003f4e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	1c5a      	adds	r2, r3, #1
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	601a      	str	r2, [r3, #0]
}
 8003f5a:	bf00      	nop
 8003f5c:	3714      	adds	r7, #20
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f64:	4770      	bx	lr

08003f66 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003f66:	b480      	push	{r7}
 8003f68:	b085      	sub	sp, #20
 8003f6a:	af00      	add	r7, sp, #0
 8003f6c:	6078      	str	r0, [r7, #4]
 8003f6e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f7c:	d103      	bne.n	8003f86 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	691b      	ldr	r3, [r3, #16]
 8003f82:	60fb      	str	r3, [r7, #12]
 8003f84:	e00c      	b.n	8003fa0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	3308      	adds	r3, #8
 8003f8a:	60fb      	str	r3, [r7, #12]
 8003f8c:	e002      	b.n	8003f94 <vListInsert+0x2e>
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	60fb      	str	r3, [r7, #12]
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	68ba      	ldr	r2, [r7, #8]
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d2f6      	bcs.n	8003f8e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	685a      	ldr	r2, [r3, #4]
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	683a      	ldr	r2, [r7, #0]
 8003fae:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	68fa      	ldr	r2, [r7, #12]
 8003fb4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	683a      	ldr	r2, [r7, #0]
 8003fba:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	687a      	ldr	r2, [r7, #4]
 8003fc0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	1c5a      	adds	r2, r3, #1
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	601a      	str	r2, [r3, #0]
}
 8003fcc:	bf00      	nop
 8003fce:	3714      	adds	r7, #20
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd6:	4770      	bx	lr

08003fd8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b085      	sub	sp, #20
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	691b      	ldr	r3, [r3, #16]
 8003fe4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	687a      	ldr	r2, [r7, #4]
 8003fec:	6892      	ldr	r2, [r2, #8]
 8003fee:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	687a      	ldr	r2, [r7, #4]
 8003ff6:	6852      	ldr	r2, [r2, #4]
 8003ff8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	687a      	ldr	r2, [r7, #4]
 8004000:	429a      	cmp	r2, r3
 8004002:	d103      	bne.n	800400c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	689a      	ldr	r2, [r3, #8]
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2200      	movs	r2, #0
 8004010:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	1e5a      	subs	r2, r3, #1
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
}
 8004020:	4618      	mov	r0, r3
 8004022:	3714      	adds	r7, #20
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr

0800402c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b084      	sub	sp, #16
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
 8004034:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d10b      	bne.n	8004058 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004040:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004044:	f383 8811 	msr	BASEPRI, r3
 8004048:	f3bf 8f6f 	isb	sy
 800404c:	f3bf 8f4f 	dsb	sy
 8004050:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004052:	bf00      	nop
 8004054:	bf00      	nop
 8004056:	e7fd      	b.n	8004054 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004058:	f001 f9a6 	bl	80053a8 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004064:	68f9      	ldr	r1, [r7, #12]
 8004066:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004068:	fb01 f303 	mul.w	r3, r1, r3
 800406c:	441a      	add	r2, r3
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2200      	movs	r2, #0
 8004076:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004088:	3b01      	subs	r3, #1
 800408a:	68f9      	ldr	r1, [r7, #12]
 800408c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800408e:	fb01 f303 	mul.w	r3, r1, r3
 8004092:	441a      	add	r2, r3
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	22ff      	movs	r2, #255	@ 0xff
 800409c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	22ff      	movs	r2, #255	@ 0xff
 80040a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d114      	bne.n	80040d8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	691b      	ldr	r3, [r3, #16]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d01a      	beq.n	80040ec <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	3310      	adds	r3, #16
 80040ba:	4618      	mov	r0, r3
 80040bc:	f000 fe18 	bl	8004cf0 <xTaskRemoveFromEventList>
 80040c0:	4603      	mov	r3, r0
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d012      	beq.n	80040ec <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80040c6:	4b0d      	ldr	r3, [pc, #52]	@ (80040fc <xQueueGenericReset+0xd0>)
 80040c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80040cc:	601a      	str	r2, [r3, #0]
 80040ce:	f3bf 8f4f 	dsb	sy
 80040d2:	f3bf 8f6f 	isb	sy
 80040d6:	e009      	b.n	80040ec <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	3310      	adds	r3, #16
 80040dc:	4618      	mov	r0, r3
 80040de:	f7ff fef1 	bl	8003ec4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	3324      	adds	r3, #36	@ 0x24
 80040e6:	4618      	mov	r0, r3
 80040e8:	f7ff feec 	bl	8003ec4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80040ec:	f001 f98e 	bl	800540c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80040f0:	2301      	movs	r3, #1
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3710      	adds	r7, #16
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}
 80040fa:	bf00      	nop
 80040fc:	e000ed04 	.word	0xe000ed04

08004100 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004100:	b580      	push	{r7, lr}
 8004102:	b08a      	sub	sp, #40	@ 0x28
 8004104:	af02      	add	r7, sp, #8
 8004106:	60f8      	str	r0, [r7, #12]
 8004108:	60b9      	str	r1, [r7, #8]
 800410a:	4613      	mov	r3, r2
 800410c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d10b      	bne.n	800412c <xQueueGenericCreate+0x2c>
	__asm volatile
 8004114:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004118:	f383 8811 	msr	BASEPRI, r3
 800411c:	f3bf 8f6f 	isb	sy
 8004120:	f3bf 8f4f 	dsb	sy
 8004124:	613b      	str	r3, [r7, #16]
}
 8004126:	bf00      	nop
 8004128:	bf00      	nop
 800412a:	e7fd      	b.n	8004128 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d102      	bne.n	8004138 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8004132:	2300      	movs	r3, #0
 8004134:	61fb      	str	r3, [r7, #28]
 8004136:	e004      	b.n	8004142 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	68ba      	ldr	r2, [r7, #8]
 800413c:	fb02 f303 	mul.w	r3, r2, r3
 8004140:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8004142:	69fb      	ldr	r3, [r7, #28]
 8004144:	3348      	adds	r3, #72	@ 0x48
 8004146:	4618      	mov	r0, r3
 8004148:	f001 fa50 	bl	80055ec <pvPortMalloc>
 800414c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800414e:	69bb      	ldr	r3, [r7, #24]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d00f      	beq.n	8004174 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8004154:	69bb      	ldr	r3, [r7, #24]
 8004156:	3348      	adds	r3, #72	@ 0x48
 8004158:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800415a:	69bb      	ldr	r3, [r7, #24]
 800415c:	2200      	movs	r2, #0
 800415e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004162:	79fa      	ldrb	r2, [r7, #7]
 8004164:	69bb      	ldr	r3, [r7, #24]
 8004166:	9300      	str	r3, [sp, #0]
 8004168:	4613      	mov	r3, r2
 800416a:	697a      	ldr	r2, [r7, #20]
 800416c:	68b9      	ldr	r1, [r7, #8]
 800416e:	68f8      	ldr	r0, [r7, #12]
 8004170:	f000 f805 	bl	800417e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004174:	69bb      	ldr	r3, [r7, #24]
	}
 8004176:	4618      	mov	r0, r3
 8004178:	3720      	adds	r7, #32
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}

0800417e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800417e:	b580      	push	{r7, lr}
 8004180:	b084      	sub	sp, #16
 8004182:	af00      	add	r7, sp, #0
 8004184:	60f8      	str	r0, [r7, #12]
 8004186:	60b9      	str	r1, [r7, #8]
 8004188:	607a      	str	r2, [r7, #4]
 800418a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d103      	bne.n	800419a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004192:	69bb      	ldr	r3, [r7, #24]
 8004194:	69ba      	ldr	r2, [r7, #24]
 8004196:	601a      	str	r2, [r3, #0]
 8004198:	e002      	b.n	80041a0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800419a:	69bb      	ldr	r3, [r7, #24]
 800419c:	687a      	ldr	r2, [r7, #4]
 800419e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80041a0:	69bb      	ldr	r3, [r7, #24]
 80041a2:	68fa      	ldr	r2, [r7, #12]
 80041a4:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80041a6:	69bb      	ldr	r3, [r7, #24]
 80041a8:	68ba      	ldr	r2, [r7, #8]
 80041aa:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80041ac:	2101      	movs	r1, #1
 80041ae:	69b8      	ldr	r0, [r7, #24]
 80041b0:	f7ff ff3c 	bl	800402c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80041b4:	bf00      	nop
 80041b6:	3710      	adds	r7, #16
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}

080041bc <xQueueGenericSendFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b08e      	sub	sp, #56	@ 0x38
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	60f8      	str	r0, [r7, #12]
 80041c4:	60b9      	str	r1, [r7, #8]
 80041c6:	607a      	str	r2, [r7, #4]
 80041c8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80041ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d10b      	bne.n	80041ec <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80041d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041d8:	f383 8811 	msr	BASEPRI, r3
 80041dc:	f3bf 8f6f 	isb	sy
 80041e0:	f3bf 8f4f 	dsb	sy
 80041e4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80041e6:	bf00      	nop
 80041e8:	bf00      	nop
 80041ea:	e7fd      	b.n	80041e8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d103      	bne.n	80041fa <xQueueGenericSendFromISR+0x3e>
 80041f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d101      	bne.n	80041fe <xQueueGenericSendFromISR+0x42>
 80041fa:	2301      	movs	r3, #1
 80041fc:	e000      	b.n	8004200 <xQueueGenericSendFromISR+0x44>
 80041fe:	2300      	movs	r3, #0
 8004200:	2b00      	cmp	r3, #0
 8004202:	d10b      	bne.n	800421c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8004204:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004208:	f383 8811 	msr	BASEPRI, r3
 800420c:	f3bf 8f6f 	isb	sy
 8004210:	f3bf 8f4f 	dsb	sy
 8004214:	623b      	str	r3, [r7, #32]
}
 8004216:	bf00      	nop
 8004218:	bf00      	nop
 800421a:	e7fd      	b.n	8004218 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	2b02      	cmp	r3, #2
 8004220:	d103      	bne.n	800422a <xQueueGenericSendFromISR+0x6e>
 8004222:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004224:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004226:	2b01      	cmp	r3, #1
 8004228:	d101      	bne.n	800422e <xQueueGenericSendFromISR+0x72>
 800422a:	2301      	movs	r3, #1
 800422c:	e000      	b.n	8004230 <xQueueGenericSendFromISR+0x74>
 800422e:	2300      	movs	r3, #0
 8004230:	2b00      	cmp	r3, #0
 8004232:	d10b      	bne.n	800424c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8004234:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004238:	f383 8811 	msr	BASEPRI, r3
 800423c:	f3bf 8f6f 	isb	sy
 8004240:	f3bf 8f4f 	dsb	sy
 8004244:	61fb      	str	r3, [r7, #28]
}
 8004246:	bf00      	nop
 8004248:	bf00      	nop
 800424a:	e7fd      	b.n	8004248 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800424c:	f001 f98c 	bl	8005568 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004250:	f3ef 8211 	mrs	r2, BASEPRI
 8004254:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004258:	f383 8811 	msr	BASEPRI, r3
 800425c:	f3bf 8f6f 	isb	sy
 8004260:	f3bf 8f4f 	dsb	sy
 8004264:	61ba      	str	r2, [r7, #24]
 8004266:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004268:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800426a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800426c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800426e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004270:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004272:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004274:	429a      	cmp	r2, r3
 8004276:	d302      	bcc.n	800427e <xQueueGenericSendFromISR+0xc2>
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	2b02      	cmp	r3, #2
 800427c:	d12c      	bne.n	80042d8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800427e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004280:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004284:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004288:	683a      	ldr	r2, [r7, #0]
 800428a:	68b9      	ldr	r1, [r7, #8]
 800428c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800428e:	f000 f8b2 	bl	80043f6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004292:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8004296:	f1b3 3fff 	cmp.w	r3, #4294967295
 800429a:	d112      	bne.n	80042c2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800429c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800429e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d016      	beq.n	80042d2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80042a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042a6:	3324      	adds	r3, #36	@ 0x24
 80042a8:	4618      	mov	r0, r3
 80042aa:	f000 fd21 	bl	8004cf0 <xTaskRemoveFromEventList>
 80042ae:	4603      	mov	r3, r0
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d00e      	beq.n	80042d2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d00b      	beq.n	80042d2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2201      	movs	r2, #1
 80042be:	601a      	str	r2, [r3, #0]
 80042c0:	e007      	b.n	80042d2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80042c2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80042c6:	3301      	adds	r3, #1
 80042c8:	b2db      	uxtb	r3, r3
 80042ca:	b25a      	sxtb	r2, r3
 80042cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80042d2:	2301      	movs	r3, #1
 80042d4:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 80042d6:	e001      	b.n	80042dc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80042d8:	2300      	movs	r3, #0
 80042da:	637b      	str	r3, [r7, #52]	@ 0x34
 80042dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042de:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80042e6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80042e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3738      	adds	r7, #56	@ 0x38
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}

080042f2 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80042f2:	b580      	push	{r7, lr}
 80042f4:	b08e      	sub	sp, #56	@ 0x38
 80042f6:	af00      	add	r7, sp, #0
 80042f8:	60f8      	str	r0, [r7, #12]
 80042fa:	60b9      	str	r1, [r7, #8]
 80042fc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004302:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004304:	2b00      	cmp	r3, #0
 8004306:	d10b      	bne.n	8004320 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8004308:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800430c:	f383 8811 	msr	BASEPRI, r3
 8004310:	f3bf 8f6f 	isb	sy
 8004314:	f3bf 8f4f 	dsb	sy
 8004318:	623b      	str	r3, [r7, #32]
}
 800431a:	bf00      	nop
 800431c:	bf00      	nop
 800431e:	e7fd      	b.n	800431c <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d103      	bne.n	800432e <xQueueReceiveFromISR+0x3c>
 8004326:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800432a:	2b00      	cmp	r3, #0
 800432c:	d101      	bne.n	8004332 <xQueueReceiveFromISR+0x40>
 800432e:	2301      	movs	r3, #1
 8004330:	e000      	b.n	8004334 <xQueueReceiveFromISR+0x42>
 8004332:	2300      	movs	r3, #0
 8004334:	2b00      	cmp	r3, #0
 8004336:	d10b      	bne.n	8004350 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8004338:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800433c:	f383 8811 	msr	BASEPRI, r3
 8004340:	f3bf 8f6f 	isb	sy
 8004344:	f3bf 8f4f 	dsb	sy
 8004348:	61fb      	str	r3, [r7, #28]
}
 800434a:	bf00      	nop
 800434c:	bf00      	nop
 800434e:	e7fd      	b.n	800434c <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004350:	f001 f90a 	bl	8005568 <vPortValidateInterruptPriority>
	__asm volatile
 8004354:	f3ef 8211 	mrs	r2, BASEPRI
 8004358:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800435c:	f383 8811 	msr	BASEPRI, r3
 8004360:	f3bf 8f6f 	isb	sy
 8004364:	f3bf 8f4f 	dsb	sy
 8004368:	61ba      	str	r2, [r7, #24]
 800436a:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800436c:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800436e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004370:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004372:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004374:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004376:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004378:	2b00      	cmp	r3, #0
 800437a:	d02f      	beq.n	80043dc <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800437c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800437e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004382:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004386:	68b9      	ldr	r1, [r7, #8]
 8004388:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800438a:	f000 f89e 	bl	80044ca <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800438e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004390:	1e5a      	subs	r2, r3, #1
 8004392:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004394:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004396:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800439a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800439e:	d112      	bne.n	80043c6 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80043a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043a2:	691b      	ldr	r3, [r3, #16]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d016      	beq.n	80043d6 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80043a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043aa:	3310      	adds	r3, #16
 80043ac:	4618      	mov	r0, r3
 80043ae:	f000 fc9f 	bl	8004cf0 <xTaskRemoveFromEventList>
 80043b2:	4603      	mov	r3, r0
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d00e      	beq.n	80043d6 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d00b      	beq.n	80043d6 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2201      	movs	r2, #1
 80043c2:	601a      	str	r2, [r3, #0]
 80043c4:	e007      	b.n	80043d6 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80043c6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80043ca:	3301      	adds	r3, #1
 80043cc:	b2db      	uxtb	r3, r3
 80043ce:	b25a      	sxtb	r2, r3
 80043d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043d2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 80043d6:	2301      	movs	r3, #1
 80043d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80043da:	e001      	b.n	80043e0 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 80043dc:	2300      	movs	r3, #0
 80043de:	637b      	str	r3, [r7, #52]	@ 0x34
 80043e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043e2:	613b      	str	r3, [r7, #16]
	__asm volatile
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	f383 8811 	msr	BASEPRI, r3
}
 80043ea:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80043ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3738      	adds	r7, #56	@ 0x38
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}

080043f6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80043f6:	b580      	push	{r7, lr}
 80043f8:	b086      	sub	sp, #24
 80043fa:	af00      	add	r7, sp, #0
 80043fc:	60f8      	str	r0, [r7, #12]
 80043fe:	60b9      	str	r1, [r7, #8]
 8004400:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004402:	2300      	movs	r3, #0
 8004404:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800440a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004410:	2b00      	cmp	r3, #0
 8004412:	d10d      	bne.n	8004430 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d14d      	bne.n	80044b8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	4618      	mov	r0, r3
 8004422:	f000 fda5 	bl	8004f70 <xTaskPriorityDisinherit>
 8004426:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2200      	movs	r2, #0
 800442c:	605a      	str	r2, [r3, #4]
 800442e:	e043      	b.n	80044b8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d119      	bne.n	800446a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	6898      	ldr	r0, [r3, #8]
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800443e:	461a      	mov	r2, r3
 8004440:	68b9      	ldr	r1, [r7, #8]
 8004442:	f001 fadf 	bl	8005a04 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	689a      	ldr	r2, [r3, #8]
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800444e:	441a      	add	r2, r3
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	689a      	ldr	r2, [r3, #8]
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	429a      	cmp	r2, r3
 800445e:	d32b      	bcc.n	80044b8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681a      	ldr	r2, [r3, #0]
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	609a      	str	r2, [r3, #8]
 8004468:	e026      	b.n	80044b8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	68d8      	ldr	r0, [r3, #12]
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004472:	461a      	mov	r2, r3
 8004474:	68b9      	ldr	r1, [r7, #8]
 8004476:	f001 fac5 	bl	8005a04 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	68da      	ldr	r2, [r3, #12]
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004482:	425b      	negs	r3, r3
 8004484:	441a      	add	r2, r3
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	68da      	ldr	r2, [r3, #12]
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	429a      	cmp	r2, r3
 8004494:	d207      	bcs.n	80044a6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	685a      	ldr	r2, [r3, #4]
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800449e:	425b      	negs	r3, r3
 80044a0:	441a      	add	r2, r3
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2b02      	cmp	r3, #2
 80044aa:	d105      	bne.n	80044b8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d002      	beq.n	80044b8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	3b01      	subs	r3, #1
 80044b6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	1c5a      	adds	r2, r3, #1
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80044c0:	697b      	ldr	r3, [r7, #20]
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3718      	adds	r7, #24
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}

080044ca <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80044ca:	b580      	push	{r7, lr}
 80044cc:	b082      	sub	sp, #8
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	6078      	str	r0, [r7, #4]
 80044d2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d018      	beq.n	800450e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	68da      	ldr	r2, [r3, #12]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044e4:	441a      	add	r2, r3
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	68da      	ldr	r2, [r3, #12]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	429a      	cmp	r2, r3
 80044f4:	d303      	bcc.n	80044fe <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	68d9      	ldr	r1, [r3, #12]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004506:	461a      	mov	r2, r3
 8004508:	6838      	ldr	r0, [r7, #0]
 800450a:	f001 fa7b 	bl	8005a04 <memcpy>
	}
}
 800450e:	bf00      	nop
 8004510:	3708      	adds	r7, #8
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}

08004516 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004516:	b580      	push	{r7, lr}
 8004518:	b08e      	sub	sp, #56	@ 0x38
 800451a:	af04      	add	r7, sp, #16
 800451c:	60f8      	str	r0, [r7, #12]
 800451e:	60b9      	str	r1, [r7, #8]
 8004520:	607a      	str	r2, [r7, #4]
 8004522:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004524:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004526:	2b00      	cmp	r3, #0
 8004528:	d10b      	bne.n	8004542 <xTaskCreateStatic+0x2c>
	__asm volatile
 800452a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800452e:	f383 8811 	msr	BASEPRI, r3
 8004532:	f3bf 8f6f 	isb	sy
 8004536:	f3bf 8f4f 	dsb	sy
 800453a:	623b      	str	r3, [r7, #32]
}
 800453c:	bf00      	nop
 800453e:	bf00      	nop
 8004540:	e7fd      	b.n	800453e <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004542:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004544:	2b00      	cmp	r3, #0
 8004546:	d10b      	bne.n	8004560 <xTaskCreateStatic+0x4a>
	__asm volatile
 8004548:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800454c:	f383 8811 	msr	BASEPRI, r3
 8004550:	f3bf 8f6f 	isb	sy
 8004554:	f3bf 8f4f 	dsb	sy
 8004558:	61fb      	str	r3, [r7, #28]
}
 800455a:	bf00      	nop
 800455c:	bf00      	nop
 800455e:	e7fd      	b.n	800455c <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004560:	2354      	movs	r3, #84	@ 0x54
 8004562:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	2b54      	cmp	r3, #84	@ 0x54
 8004568:	d00b      	beq.n	8004582 <xTaskCreateStatic+0x6c>
	__asm volatile
 800456a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800456e:	f383 8811 	msr	BASEPRI, r3
 8004572:	f3bf 8f6f 	isb	sy
 8004576:	f3bf 8f4f 	dsb	sy
 800457a:	61bb      	str	r3, [r7, #24]
}
 800457c:	bf00      	nop
 800457e:	bf00      	nop
 8004580:	e7fd      	b.n	800457e <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004582:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004584:	2b00      	cmp	r3, #0
 8004586:	d01e      	beq.n	80045c6 <xTaskCreateStatic+0xb0>
 8004588:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800458a:	2b00      	cmp	r3, #0
 800458c:	d01b      	beq.n	80045c6 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800458e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004590:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004594:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004596:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800459a:	2202      	movs	r2, #2
 800459c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80045a0:	2300      	movs	r3, #0
 80045a2:	9303      	str	r3, [sp, #12]
 80045a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045a6:	9302      	str	r3, [sp, #8]
 80045a8:	f107 0314 	add.w	r3, r7, #20
 80045ac:	9301      	str	r3, [sp, #4]
 80045ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045b0:	9300      	str	r3, [sp, #0]
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	687a      	ldr	r2, [r7, #4]
 80045b6:	68b9      	ldr	r1, [r7, #8]
 80045b8:	68f8      	ldr	r0, [r7, #12]
 80045ba:	f000 f850 	bl	800465e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80045be:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80045c0:	f000 f8ce 	bl	8004760 <prvAddNewTaskToReadyList>
 80045c4:	e001      	b.n	80045ca <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 80045c6:	2300      	movs	r3, #0
 80045c8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80045ca:	697b      	ldr	r3, [r7, #20]
	}
 80045cc:	4618      	mov	r0, r3
 80045ce:	3728      	adds	r7, #40	@ 0x28
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}

080045d4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b08c      	sub	sp, #48	@ 0x30
 80045d8:	af04      	add	r7, sp, #16
 80045da:	60f8      	str	r0, [r7, #12]
 80045dc:	60b9      	str	r1, [r7, #8]
 80045de:	603b      	str	r3, [r7, #0]
 80045e0:	4613      	mov	r3, r2
 80045e2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80045e4:	88fb      	ldrh	r3, [r7, #6]
 80045e6:	009b      	lsls	r3, r3, #2
 80045e8:	4618      	mov	r0, r3
 80045ea:	f000 ffff 	bl	80055ec <pvPortMalloc>
 80045ee:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d00e      	beq.n	8004614 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80045f6:	2054      	movs	r0, #84	@ 0x54
 80045f8:	f000 fff8 	bl	80055ec <pvPortMalloc>
 80045fc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80045fe:	69fb      	ldr	r3, [r7, #28]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d003      	beq.n	800460c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004604:	69fb      	ldr	r3, [r7, #28]
 8004606:	697a      	ldr	r2, [r7, #20]
 8004608:	631a      	str	r2, [r3, #48]	@ 0x30
 800460a:	e005      	b.n	8004618 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800460c:	6978      	ldr	r0, [r7, #20]
 800460e:	f001 f8b5 	bl	800577c <vPortFree>
 8004612:	e001      	b.n	8004618 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004614:	2300      	movs	r3, #0
 8004616:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004618:	69fb      	ldr	r3, [r7, #28]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d017      	beq.n	800464e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800461e:	69fb      	ldr	r3, [r7, #28]
 8004620:	2200      	movs	r2, #0
 8004622:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004626:	88fa      	ldrh	r2, [r7, #6]
 8004628:	2300      	movs	r3, #0
 800462a:	9303      	str	r3, [sp, #12]
 800462c:	69fb      	ldr	r3, [r7, #28]
 800462e:	9302      	str	r3, [sp, #8]
 8004630:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004632:	9301      	str	r3, [sp, #4]
 8004634:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004636:	9300      	str	r3, [sp, #0]
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	68b9      	ldr	r1, [r7, #8]
 800463c:	68f8      	ldr	r0, [r7, #12]
 800463e:	f000 f80e 	bl	800465e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004642:	69f8      	ldr	r0, [r7, #28]
 8004644:	f000 f88c 	bl	8004760 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004648:	2301      	movs	r3, #1
 800464a:	61bb      	str	r3, [r7, #24]
 800464c:	e002      	b.n	8004654 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800464e:	f04f 33ff 	mov.w	r3, #4294967295
 8004652:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004654:	69bb      	ldr	r3, [r7, #24]
	}
 8004656:	4618      	mov	r0, r3
 8004658:	3720      	adds	r7, #32
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}

0800465e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800465e:	b580      	push	{r7, lr}
 8004660:	b088      	sub	sp, #32
 8004662:	af00      	add	r7, sp, #0
 8004664:	60f8      	str	r0, [r7, #12]
 8004666:	60b9      	str	r1, [r7, #8]
 8004668:	607a      	str	r2, [r7, #4]
 800466a:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800466c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800466e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004676:	3b01      	subs	r3, #1
 8004678:	009b      	lsls	r3, r3, #2
 800467a:	4413      	add	r3, r2
 800467c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800467e:	69bb      	ldr	r3, [r7, #24]
 8004680:	f023 0307 	bic.w	r3, r3, #7
 8004684:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004686:	69bb      	ldr	r3, [r7, #24]
 8004688:	f003 0307 	and.w	r3, r3, #7
 800468c:	2b00      	cmp	r3, #0
 800468e:	d00b      	beq.n	80046a8 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8004690:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004694:	f383 8811 	msr	BASEPRI, r3
 8004698:	f3bf 8f6f 	isb	sy
 800469c:	f3bf 8f4f 	dsb	sy
 80046a0:	617b      	str	r3, [r7, #20]
}
 80046a2:	bf00      	nop
 80046a4:	bf00      	nop
 80046a6:	e7fd      	b.n	80046a4 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80046a8:	2300      	movs	r3, #0
 80046aa:	61fb      	str	r3, [r7, #28]
 80046ac:	e012      	b.n	80046d4 <prvInitialiseNewTask+0x76>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80046ae:	68ba      	ldr	r2, [r7, #8]
 80046b0:	69fb      	ldr	r3, [r7, #28]
 80046b2:	4413      	add	r3, r2
 80046b4:	7819      	ldrb	r1, [r3, #0]
 80046b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80046b8:	69fb      	ldr	r3, [r7, #28]
 80046ba:	4413      	add	r3, r2
 80046bc:	3334      	adds	r3, #52	@ 0x34
 80046be:	460a      	mov	r2, r1
 80046c0:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80046c2:	68ba      	ldr	r2, [r7, #8]
 80046c4:	69fb      	ldr	r3, [r7, #28]
 80046c6:	4413      	add	r3, r2
 80046c8:	781b      	ldrb	r3, [r3, #0]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d006      	beq.n	80046dc <prvInitialiseNewTask+0x7e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80046ce:	69fb      	ldr	r3, [r7, #28]
 80046d0:	3301      	adds	r3, #1
 80046d2:	61fb      	str	r3, [r7, #28]
 80046d4:	69fb      	ldr	r3, [r7, #28]
 80046d6:	2b0f      	cmp	r3, #15
 80046d8:	d9e9      	bls.n	80046ae <prvInitialiseNewTask+0x50>
 80046da:	e000      	b.n	80046de <prvInitialiseNewTask+0x80>
		{
			break;
 80046dc:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80046de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046e0:	2200      	movs	r2, #0
 80046e2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80046e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046e8:	2b06      	cmp	r3, #6
 80046ea:	d901      	bls.n	80046f0 <prvInitialiseNewTask+0x92>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80046ec:	2306      	movs	r3, #6
 80046ee:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80046f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046f2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80046f4:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80046f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046f8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80046fa:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80046fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046fe:	2200      	movs	r2, #0
 8004700:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004702:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004704:	3304      	adds	r3, #4
 8004706:	4618      	mov	r0, r3
 8004708:	f7ff fbfc 	bl	8003f04 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800470c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800470e:	3318      	adds	r3, #24
 8004710:	4618      	mov	r0, r3
 8004712:	f7ff fbf7 	bl	8003f04 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004718:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800471a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800471c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800471e:	f1c3 0207 	rsb	r2, r3, #7
 8004722:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004724:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004726:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004728:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800472a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800472c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800472e:	2200      	movs	r2, #0
 8004730:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004732:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004734:	2200      	movs	r2, #0
 8004736:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800473a:	683a      	ldr	r2, [r7, #0]
 800473c:	68f9      	ldr	r1, [r7, #12]
 800473e:	69b8      	ldr	r0, [r7, #24]
 8004740:	f000 fd04 	bl	800514c <pxPortInitialiseStack>
 8004744:	4602      	mov	r2, r0
 8004746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004748:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800474a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800474c:	2b00      	cmp	r3, #0
 800474e:	d002      	beq.n	8004756 <prvInitialiseNewTask+0xf8>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004750:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004752:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004754:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004756:	bf00      	nop
 8004758:	3720      	adds	r7, #32
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}
	...

08004760 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b082      	sub	sp, #8
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004768:	f000 fe1e 	bl	80053a8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800476c:	4b2a      	ldr	r3, [pc, #168]	@ (8004818 <prvAddNewTaskToReadyList+0xb8>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	3301      	adds	r3, #1
 8004772:	4a29      	ldr	r2, [pc, #164]	@ (8004818 <prvAddNewTaskToReadyList+0xb8>)
 8004774:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004776:	4b29      	ldr	r3, [pc, #164]	@ (800481c <prvAddNewTaskToReadyList+0xbc>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d109      	bne.n	8004792 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800477e:	4a27      	ldr	r2, [pc, #156]	@ (800481c <prvAddNewTaskToReadyList+0xbc>)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004784:	4b24      	ldr	r3, [pc, #144]	@ (8004818 <prvAddNewTaskToReadyList+0xb8>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	2b01      	cmp	r3, #1
 800478a:	d110      	bne.n	80047ae <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800478c:	f000 fb2c 	bl	8004de8 <prvInitialiseTaskLists>
 8004790:	e00d      	b.n	80047ae <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004792:	4b23      	ldr	r3, [pc, #140]	@ (8004820 <prvAddNewTaskToReadyList+0xc0>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d109      	bne.n	80047ae <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800479a:	4b20      	ldr	r3, [pc, #128]	@ (800481c <prvAddNewTaskToReadyList+0xbc>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d802      	bhi.n	80047ae <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80047a8:	4a1c      	ldr	r2, [pc, #112]	@ (800481c <prvAddNewTaskToReadyList+0xbc>)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80047ae:	4b1d      	ldr	r3, [pc, #116]	@ (8004824 <prvAddNewTaskToReadyList+0xc4>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	3301      	adds	r3, #1
 80047b4:	4a1b      	ldr	r2, [pc, #108]	@ (8004824 <prvAddNewTaskToReadyList+0xc4>)
 80047b6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047bc:	2201      	movs	r2, #1
 80047be:	409a      	lsls	r2, r3
 80047c0:	4b19      	ldr	r3, [pc, #100]	@ (8004828 <prvAddNewTaskToReadyList+0xc8>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4313      	orrs	r3, r2
 80047c6:	4a18      	ldr	r2, [pc, #96]	@ (8004828 <prvAddNewTaskToReadyList+0xc8>)
 80047c8:	6013      	str	r3, [r2, #0]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047ce:	4613      	mov	r3, r2
 80047d0:	009b      	lsls	r3, r3, #2
 80047d2:	4413      	add	r3, r2
 80047d4:	009b      	lsls	r3, r3, #2
 80047d6:	4a15      	ldr	r2, [pc, #84]	@ (800482c <prvAddNewTaskToReadyList+0xcc>)
 80047d8:	441a      	add	r2, r3
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	3304      	adds	r3, #4
 80047de:	4619      	mov	r1, r3
 80047e0:	4610      	mov	r0, r2
 80047e2:	f7ff fb9c 	bl	8003f1e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80047e6:	f000 fe11 	bl	800540c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80047ea:	4b0d      	ldr	r3, [pc, #52]	@ (8004820 <prvAddNewTaskToReadyList+0xc0>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d00e      	beq.n	8004810 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80047f2:	4b0a      	ldr	r3, [pc, #40]	@ (800481c <prvAddNewTaskToReadyList+0xbc>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047fc:	429a      	cmp	r2, r3
 80047fe:	d207      	bcs.n	8004810 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004800:	4b0b      	ldr	r3, [pc, #44]	@ (8004830 <prvAddNewTaskToReadyList+0xd0>)
 8004802:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004806:	601a      	str	r2, [r3, #0]
 8004808:	f3bf 8f4f 	dsb	sy
 800480c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004810:	bf00      	nop
 8004812:	3708      	adds	r7, #8
 8004814:	46bd      	mov	sp, r7
 8004816:	bd80      	pop	{r7, pc}
 8004818:	200004e8 	.word	0x200004e8
 800481c:	200003e8 	.word	0x200003e8
 8004820:	200004f4 	.word	0x200004f4
 8004824:	20000504 	.word	0x20000504
 8004828:	200004f0 	.word	0x200004f0
 800482c:	200003ec 	.word	0x200003ec
 8004830:	e000ed04 	.word	0xe000ed04

08004834 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004834:	b580      	push	{r7, lr}
 8004836:	b084      	sub	sp, #16
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800483c:	2300      	movs	r3, #0
 800483e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d018      	beq.n	8004878 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004846:	4b14      	ldr	r3, [pc, #80]	@ (8004898 <vTaskDelay+0x64>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d00b      	beq.n	8004866 <vTaskDelay+0x32>
	__asm volatile
 800484e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004852:	f383 8811 	msr	BASEPRI, r3
 8004856:	f3bf 8f6f 	isb	sy
 800485a:	f3bf 8f4f 	dsb	sy
 800485e:	60bb      	str	r3, [r7, #8]
}
 8004860:	bf00      	nop
 8004862:	bf00      	nop
 8004864:	e7fd      	b.n	8004862 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004866:	f000 f87d 	bl	8004964 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800486a:	2100      	movs	r1, #0
 800486c:	6878      	ldr	r0, [r7, #4]
 800486e:	f000 fc07 	bl	8005080 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004872:	f000 f885 	bl	8004980 <xTaskResumeAll>
 8004876:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d107      	bne.n	800488e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800487e:	4b07      	ldr	r3, [pc, #28]	@ (800489c <vTaskDelay+0x68>)
 8004880:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004884:	601a      	str	r2, [r3, #0]
 8004886:	f3bf 8f4f 	dsb	sy
 800488a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800488e:	bf00      	nop
 8004890:	3710      	adds	r7, #16
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}
 8004896:	bf00      	nop
 8004898:	20000510 	.word	0x20000510
 800489c:	e000ed04 	.word	0xe000ed04

080048a0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b08a      	sub	sp, #40	@ 0x28
 80048a4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80048a6:	2300      	movs	r3, #0
 80048a8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80048aa:	2300      	movs	r3, #0
 80048ac:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80048ae:	463a      	mov	r2, r7
 80048b0:	1d39      	adds	r1, r7, #4
 80048b2:	f107 0308 	add.w	r3, r7, #8
 80048b6:	4618      	mov	r0, r3
 80048b8:	f7fb fd4a 	bl	8000350 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80048bc:	6839      	ldr	r1, [r7, #0]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	68ba      	ldr	r2, [r7, #8]
 80048c2:	9202      	str	r2, [sp, #8]
 80048c4:	9301      	str	r3, [sp, #4]
 80048c6:	2300      	movs	r3, #0
 80048c8:	9300      	str	r3, [sp, #0]
 80048ca:	2300      	movs	r3, #0
 80048cc:	460a      	mov	r2, r1
 80048ce:	491f      	ldr	r1, [pc, #124]	@ (800494c <vTaskStartScheduler+0xac>)
 80048d0:	481f      	ldr	r0, [pc, #124]	@ (8004950 <vTaskStartScheduler+0xb0>)
 80048d2:	f7ff fe20 	bl	8004516 <xTaskCreateStatic>
 80048d6:	4603      	mov	r3, r0
 80048d8:	4a1e      	ldr	r2, [pc, #120]	@ (8004954 <vTaskStartScheduler+0xb4>)
 80048da:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80048dc:	4b1d      	ldr	r3, [pc, #116]	@ (8004954 <vTaskStartScheduler+0xb4>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d002      	beq.n	80048ea <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80048e4:	2301      	movs	r3, #1
 80048e6:	617b      	str	r3, [r7, #20]
 80048e8:	e001      	b.n	80048ee <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80048ea:	2300      	movs	r3, #0
 80048ec:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d116      	bne.n	8004922 <vTaskStartScheduler+0x82>
	__asm volatile
 80048f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048f8:	f383 8811 	msr	BASEPRI, r3
 80048fc:	f3bf 8f6f 	isb	sy
 8004900:	f3bf 8f4f 	dsb	sy
 8004904:	613b      	str	r3, [r7, #16]
}
 8004906:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004908:	4b13      	ldr	r3, [pc, #76]	@ (8004958 <vTaskStartScheduler+0xb8>)
 800490a:	f04f 32ff 	mov.w	r2, #4294967295
 800490e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004910:	4b12      	ldr	r3, [pc, #72]	@ (800495c <vTaskStartScheduler+0xbc>)
 8004912:	2201      	movs	r2, #1
 8004914:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004916:	4b12      	ldr	r3, [pc, #72]	@ (8004960 <vTaskStartScheduler+0xc0>)
 8004918:	2200      	movs	r2, #0
 800491a:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800491c:	f000 fca0 	bl	8005260 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004920:	e00f      	b.n	8004942 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004928:	d10b      	bne.n	8004942 <vTaskStartScheduler+0xa2>
	__asm volatile
 800492a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800492e:	f383 8811 	msr	BASEPRI, r3
 8004932:	f3bf 8f6f 	isb	sy
 8004936:	f3bf 8f4f 	dsb	sy
 800493a:	60fb      	str	r3, [r7, #12]
}
 800493c:	bf00      	nop
 800493e:	bf00      	nop
 8004940:	e7fd      	b.n	800493e <vTaskStartScheduler+0x9e>
}
 8004942:	bf00      	nop
 8004944:	3718      	adds	r7, #24
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}
 800494a:	bf00      	nop
 800494c:	08005aac 	.word	0x08005aac
 8004950:	08004db9 	.word	0x08004db9
 8004954:	2000050c 	.word	0x2000050c
 8004958:	20000508 	.word	0x20000508
 800495c:	200004f4 	.word	0x200004f4
 8004960:	200004ec 	.word	0x200004ec

08004964 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004964:	b480      	push	{r7}
 8004966:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004968:	4b04      	ldr	r3, [pc, #16]	@ (800497c <vTaskSuspendAll+0x18>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	3301      	adds	r3, #1
 800496e:	4a03      	ldr	r2, [pc, #12]	@ (800497c <vTaskSuspendAll+0x18>)
 8004970:	6013      	str	r3, [r2, #0]
}
 8004972:	bf00      	nop
 8004974:	46bd      	mov	sp, r7
 8004976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497a:	4770      	bx	lr
 800497c:	20000510 	.word	0x20000510

08004980 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b084      	sub	sp, #16
 8004984:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004986:	2300      	movs	r3, #0
 8004988:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800498a:	2300      	movs	r3, #0
 800498c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800498e:	4b42      	ldr	r3, [pc, #264]	@ (8004a98 <xTaskResumeAll+0x118>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d10b      	bne.n	80049ae <xTaskResumeAll+0x2e>
	__asm volatile
 8004996:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800499a:	f383 8811 	msr	BASEPRI, r3
 800499e:	f3bf 8f6f 	isb	sy
 80049a2:	f3bf 8f4f 	dsb	sy
 80049a6:	603b      	str	r3, [r7, #0]
}
 80049a8:	bf00      	nop
 80049aa:	bf00      	nop
 80049ac:	e7fd      	b.n	80049aa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80049ae:	f000 fcfb 	bl	80053a8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80049b2:	4b39      	ldr	r3, [pc, #228]	@ (8004a98 <xTaskResumeAll+0x118>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	3b01      	subs	r3, #1
 80049b8:	4a37      	ldr	r2, [pc, #220]	@ (8004a98 <xTaskResumeAll+0x118>)
 80049ba:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80049bc:	4b36      	ldr	r3, [pc, #216]	@ (8004a98 <xTaskResumeAll+0x118>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d161      	bne.n	8004a88 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80049c4:	4b35      	ldr	r3, [pc, #212]	@ (8004a9c <xTaskResumeAll+0x11c>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d05d      	beq.n	8004a88 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80049cc:	e02e      	b.n	8004a2c <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80049ce:	4b34      	ldr	r3, [pc, #208]	@ (8004aa0 <xTaskResumeAll+0x120>)
 80049d0:	68db      	ldr	r3, [r3, #12]
 80049d2:	68db      	ldr	r3, [r3, #12]
 80049d4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	3318      	adds	r3, #24
 80049da:	4618      	mov	r0, r3
 80049dc:	f7ff fafc 	bl	8003fd8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	3304      	adds	r3, #4
 80049e4:	4618      	mov	r0, r3
 80049e6:	f7ff faf7 	bl	8003fd8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049ee:	2201      	movs	r2, #1
 80049f0:	409a      	lsls	r2, r3
 80049f2:	4b2c      	ldr	r3, [pc, #176]	@ (8004aa4 <xTaskResumeAll+0x124>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4313      	orrs	r3, r2
 80049f8:	4a2a      	ldr	r2, [pc, #168]	@ (8004aa4 <xTaskResumeAll+0x124>)
 80049fa:	6013      	str	r3, [r2, #0]
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a00:	4613      	mov	r3, r2
 8004a02:	009b      	lsls	r3, r3, #2
 8004a04:	4413      	add	r3, r2
 8004a06:	009b      	lsls	r3, r3, #2
 8004a08:	4a27      	ldr	r2, [pc, #156]	@ (8004aa8 <xTaskResumeAll+0x128>)
 8004a0a:	441a      	add	r2, r3
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	3304      	adds	r3, #4
 8004a10:	4619      	mov	r1, r3
 8004a12:	4610      	mov	r0, r2
 8004a14:	f7ff fa83 	bl	8003f1e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a1c:	4b23      	ldr	r3, [pc, #140]	@ (8004aac <xTaskResumeAll+0x12c>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a22:	429a      	cmp	r2, r3
 8004a24:	d302      	bcc.n	8004a2c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004a26:	4b22      	ldr	r3, [pc, #136]	@ (8004ab0 <xTaskResumeAll+0x130>)
 8004a28:	2201      	movs	r2, #1
 8004a2a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004a2c:	4b1c      	ldr	r3, [pc, #112]	@ (8004aa0 <xTaskResumeAll+0x120>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d1cc      	bne.n	80049ce <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d001      	beq.n	8004a3e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004a3a:	f000 fa73 	bl	8004f24 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004a3e:	4b1d      	ldr	r3, [pc, #116]	@ (8004ab4 <xTaskResumeAll+0x134>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d010      	beq.n	8004a6c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004a4a:	f000 f837 	bl	8004abc <xTaskIncrementTick>
 8004a4e:	4603      	mov	r3, r0
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d002      	beq.n	8004a5a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004a54:	4b16      	ldr	r3, [pc, #88]	@ (8004ab0 <xTaskResumeAll+0x130>)
 8004a56:	2201      	movs	r2, #1
 8004a58:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	3b01      	subs	r3, #1
 8004a5e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d1f1      	bne.n	8004a4a <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8004a66:	4b13      	ldr	r3, [pc, #76]	@ (8004ab4 <xTaskResumeAll+0x134>)
 8004a68:	2200      	movs	r2, #0
 8004a6a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004a6c:	4b10      	ldr	r3, [pc, #64]	@ (8004ab0 <xTaskResumeAll+0x130>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d009      	beq.n	8004a88 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004a74:	2301      	movs	r3, #1
 8004a76:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004a78:	4b0f      	ldr	r3, [pc, #60]	@ (8004ab8 <xTaskResumeAll+0x138>)
 8004a7a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a7e:	601a      	str	r2, [r3, #0]
 8004a80:	f3bf 8f4f 	dsb	sy
 8004a84:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004a88:	f000 fcc0 	bl	800540c <vPortExitCritical>

	return xAlreadyYielded;
 8004a8c:	68bb      	ldr	r3, [r7, #8]
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3710      	adds	r7, #16
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}
 8004a96:	bf00      	nop
 8004a98:	20000510 	.word	0x20000510
 8004a9c:	200004e8 	.word	0x200004e8
 8004aa0:	200004a8 	.word	0x200004a8
 8004aa4:	200004f0 	.word	0x200004f0
 8004aa8:	200003ec 	.word	0x200003ec
 8004aac:	200003e8 	.word	0x200003e8
 8004ab0:	200004fc 	.word	0x200004fc
 8004ab4:	200004f8 	.word	0x200004f8
 8004ab8:	e000ed04 	.word	0xe000ed04

08004abc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b086      	sub	sp, #24
 8004ac0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ac6:	4b51      	ldr	r3, [pc, #324]	@ (8004c0c <xTaskIncrementTick+0x150>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	f040 808e 	bne.w	8004bec <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004ad0:	4b4f      	ldr	r3, [pc, #316]	@ (8004c10 <xTaskIncrementTick+0x154>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	3301      	adds	r3, #1
 8004ad6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004ad8:	4a4d      	ldr	r2, [pc, #308]	@ (8004c10 <xTaskIncrementTick+0x154>)
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d121      	bne.n	8004b28 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004ae4:	4b4b      	ldr	r3, [pc, #300]	@ (8004c14 <xTaskIncrementTick+0x158>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d00b      	beq.n	8004b06 <xTaskIncrementTick+0x4a>
	__asm volatile
 8004aee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004af2:	f383 8811 	msr	BASEPRI, r3
 8004af6:	f3bf 8f6f 	isb	sy
 8004afa:	f3bf 8f4f 	dsb	sy
 8004afe:	603b      	str	r3, [r7, #0]
}
 8004b00:	bf00      	nop
 8004b02:	bf00      	nop
 8004b04:	e7fd      	b.n	8004b02 <xTaskIncrementTick+0x46>
 8004b06:	4b43      	ldr	r3, [pc, #268]	@ (8004c14 <xTaskIncrementTick+0x158>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	60fb      	str	r3, [r7, #12]
 8004b0c:	4b42      	ldr	r3, [pc, #264]	@ (8004c18 <xTaskIncrementTick+0x15c>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a40      	ldr	r2, [pc, #256]	@ (8004c14 <xTaskIncrementTick+0x158>)
 8004b12:	6013      	str	r3, [r2, #0]
 8004b14:	4a40      	ldr	r2, [pc, #256]	@ (8004c18 <xTaskIncrementTick+0x15c>)
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	6013      	str	r3, [r2, #0]
 8004b1a:	4b40      	ldr	r3, [pc, #256]	@ (8004c1c <xTaskIncrementTick+0x160>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	3301      	adds	r3, #1
 8004b20:	4a3e      	ldr	r2, [pc, #248]	@ (8004c1c <xTaskIncrementTick+0x160>)
 8004b22:	6013      	str	r3, [r2, #0]
 8004b24:	f000 f9fe 	bl	8004f24 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004b28:	4b3d      	ldr	r3, [pc, #244]	@ (8004c20 <xTaskIncrementTick+0x164>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	693a      	ldr	r2, [r7, #16]
 8004b2e:	429a      	cmp	r2, r3
 8004b30:	d34d      	bcc.n	8004bce <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004b32:	4b38      	ldr	r3, [pc, #224]	@ (8004c14 <xTaskIncrementTick+0x158>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d101      	bne.n	8004b40 <xTaskIncrementTick+0x84>
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	e000      	b.n	8004b42 <xTaskIncrementTick+0x86>
 8004b40:	2300      	movs	r3, #0
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d004      	beq.n	8004b50 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b46:	4b36      	ldr	r3, [pc, #216]	@ (8004c20 <xTaskIncrementTick+0x164>)
 8004b48:	f04f 32ff 	mov.w	r2, #4294967295
 8004b4c:	601a      	str	r2, [r3, #0]
					break;
 8004b4e:	e03e      	b.n	8004bce <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004b50:	4b30      	ldr	r3, [pc, #192]	@ (8004c14 <xTaskIncrementTick+0x158>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	68db      	ldr	r3, [r3, #12]
 8004b56:	68db      	ldr	r3, [r3, #12]
 8004b58:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004b60:	693a      	ldr	r2, [r7, #16]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d203      	bcs.n	8004b70 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004b68:	4a2d      	ldr	r2, [pc, #180]	@ (8004c20 <xTaskIncrementTick+0x164>)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6013      	str	r3, [r2, #0]
						break;
 8004b6e:	e02e      	b.n	8004bce <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	3304      	adds	r3, #4
 8004b74:	4618      	mov	r0, r3
 8004b76:	f7ff fa2f 	bl	8003fd8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d004      	beq.n	8004b8c <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	3318      	adds	r3, #24
 8004b86:	4618      	mov	r0, r3
 8004b88:	f7ff fa26 	bl	8003fd8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b90:	2201      	movs	r2, #1
 8004b92:	409a      	lsls	r2, r3
 8004b94:	4b23      	ldr	r3, [pc, #140]	@ (8004c24 <xTaskIncrementTick+0x168>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	4a22      	ldr	r2, [pc, #136]	@ (8004c24 <xTaskIncrementTick+0x168>)
 8004b9c:	6013      	str	r3, [r2, #0]
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ba2:	4613      	mov	r3, r2
 8004ba4:	009b      	lsls	r3, r3, #2
 8004ba6:	4413      	add	r3, r2
 8004ba8:	009b      	lsls	r3, r3, #2
 8004baa:	4a1f      	ldr	r2, [pc, #124]	@ (8004c28 <xTaskIncrementTick+0x16c>)
 8004bac:	441a      	add	r2, r3
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	3304      	adds	r3, #4
 8004bb2:	4619      	mov	r1, r3
 8004bb4:	4610      	mov	r0, r2
 8004bb6:	f7ff f9b2 	bl	8003f1e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004bbe:	4b1b      	ldr	r3, [pc, #108]	@ (8004c2c <xTaskIncrementTick+0x170>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	d3b4      	bcc.n	8004b32 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004bcc:	e7b1      	b.n	8004b32 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004bce:	4b17      	ldr	r3, [pc, #92]	@ (8004c2c <xTaskIncrementTick+0x170>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004bd4:	4914      	ldr	r1, [pc, #80]	@ (8004c28 <xTaskIncrementTick+0x16c>)
 8004bd6:	4613      	mov	r3, r2
 8004bd8:	009b      	lsls	r3, r3, #2
 8004bda:	4413      	add	r3, r2
 8004bdc:	009b      	lsls	r3, r3, #2
 8004bde:	440b      	add	r3, r1
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	2b01      	cmp	r3, #1
 8004be4:	d907      	bls.n	8004bf6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8004be6:	2301      	movs	r3, #1
 8004be8:	617b      	str	r3, [r7, #20]
 8004bea:	e004      	b.n	8004bf6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004bec:	4b10      	ldr	r3, [pc, #64]	@ (8004c30 <xTaskIncrementTick+0x174>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	3301      	adds	r3, #1
 8004bf2:	4a0f      	ldr	r2, [pc, #60]	@ (8004c30 <xTaskIncrementTick+0x174>)
 8004bf4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004bf6:	4b0f      	ldr	r3, [pc, #60]	@ (8004c34 <xTaskIncrementTick+0x178>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d001      	beq.n	8004c02 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004c02:	697b      	ldr	r3, [r7, #20]
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	3718      	adds	r7, #24
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}
 8004c0c:	20000510 	.word	0x20000510
 8004c10:	200004ec 	.word	0x200004ec
 8004c14:	200004a0 	.word	0x200004a0
 8004c18:	200004a4 	.word	0x200004a4
 8004c1c:	20000500 	.word	0x20000500
 8004c20:	20000508 	.word	0x20000508
 8004c24:	200004f0 	.word	0x200004f0
 8004c28:	200003ec 	.word	0x200003ec
 8004c2c:	200003e8 	.word	0x200003e8
 8004c30:	200004f8 	.word	0x200004f8
 8004c34:	200004fc 	.word	0x200004fc

08004c38 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b087      	sub	sp, #28
 8004c3c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004c3e:	4b27      	ldr	r3, [pc, #156]	@ (8004cdc <vTaskSwitchContext+0xa4>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d003      	beq.n	8004c4e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004c46:	4b26      	ldr	r3, [pc, #152]	@ (8004ce0 <vTaskSwitchContext+0xa8>)
 8004c48:	2201      	movs	r2, #1
 8004c4a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004c4c:	e040      	b.n	8004cd0 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8004c4e:	4b24      	ldr	r3, [pc, #144]	@ (8004ce0 <vTaskSwitchContext+0xa8>)
 8004c50:	2200      	movs	r2, #0
 8004c52:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004c54:	4b23      	ldr	r3, [pc, #140]	@ (8004ce4 <vTaskSwitchContext+0xac>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	fab3 f383 	clz	r3, r3
 8004c60:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004c62:	7afb      	ldrb	r3, [r7, #11]
 8004c64:	f1c3 031f 	rsb	r3, r3, #31
 8004c68:	617b      	str	r3, [r7, #20]
 8004c6a:	491f      	ldr	r1, [pc, #124]	@ (8004ce8 <vTaskSwitchContext+0xb0>)
 8004c6c:	697a      	ldr	r2, [r7, #20]
 8004c6e:	4613      	mov	r3, r2
 8004c70:	009b      	lsls	r3, r3, #2
 8004c72:	4413      	add	r3, r2
 8004c74:	009b      	lsls	r3, r3, #2
 8004c76:	440b      	add	r3, r1
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d10b      	bne.n	8004c96 <vTaskSwitchContext+0x5e>
	__asm volatile
 8004c7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c82:	f383 8811 	msr	BASEPRI, r3
 8004c86:	f3bf 8f6f 	isb	sy
 8004c8a:	f3bf 8f4f 	dsb	sy
 8004c8e:	607b      	str	r3, [r7, #4]
}
 8004c90:	bf00      	nop
 8004c92:	bf00      	nop
 8004c94:	e7fd      	b.n	8004c92 <vTaskSwitchContext+0x5a>
 8004c96:	697a      	ldr	r2, [r7, #20]
 8004c98:	4613      	mov	r3, r2
 8004c9a:	009b      	lsls	r3, r3, #2
 8004c9c:	4413      	add	r3, r2
 8004c9e:	009b      	lsls	r3, r3, #2
 8004ca0:	4a11      	ldr	r2, [pc, #68]	@ (8004ce8 <vTaskSwitchContext+0xb0>)
 8004ca2:	4413      	add	r3, r2
 8004ca4:	613b      	str	r3, [r7, #16]
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	685a      	ldr	r2, [r3, #4]
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	605a      	str	r2, [r3, #4]
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	685a      	ldr	r2, [r3, #4]
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	3308      	adds	r3, #8
 8004cb8:	429a      	cmp	r2, r3
 8004cba:	d104      	bne.n	8004cc6 <vTaskSwitchContext+0x8e>
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	685a      	ldr	r2, [r3, #4]
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	605a      	str	r2, [r3, #4]
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	68db      	ldr	r3, [r3, #12]
 8004ccc:	4a07      	ldr	r2, [pc, #28]	@ (8004cec <vTaskSwitchContext+0xb4>)
 8004cce:	6013      	str	r3, [r2, #0]
}
 8004cd0:	bf00      	nop
 8004cd2:	371c      	adds	r7, #28
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cda:	4770      	bx	lr
 8004cdc:	20000510 	.word	0x20000510
 8004ce0:	200004fc 	.word	0x200004fc
 8004ce4:	200004f0 	.word	0x200004f0
 8004ce8:	200003ec 	.word	0x200003ec
 8004cec:	200003e8 	.word	0x200003e8

08004cf0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b086      	sub	sp, #24
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	68db      	ldr	r3, [r3, #12]
 8004cfc:	68db      	ldr	r3, [r3, #12]
 8004cfe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d10b      	bne.n	8004d1e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8004d06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d0a:	f383 8811 	msr	BASEPRI, r3
 8004d0e:	f3bf 8f6f 	isb	sy
 8004d12:	f3bf 8f4f 	dsb	sy
 8004d16:	60fb      	str	r3, [r7, #12]
}
 8004d18:	bf00      	nop
 8004d1a:	bf00      	nop
 8004d1c:	e7fd      	b.n	8004d1a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	3318      	adds	r3, #24
 8004d22:	4618      	mov	r0, r3
 8004d24:	f7ff f958 	bl	8003fd8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d28:	4b1d      	ldr	r3, [pc, #116]	@ (8004da0 <xTaskRemoveFromEventList+0xb0>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d11c      	bne.n	8004d6a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	3304      	adds	r3, #4
 8004d34:	4618      	mov	r0, r3
 8004d36:	f7ff f94f 	bl	8003fd8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d3e:	2201      	movs	r2, #1
 8004d40:	409a      	lsls	r2, r3
 8004d42:	4b18      	ldr	r3, [pc, #96]	@ (8004da4 <xTaskRemoveFromEventList+0xb4>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4313      	orrs	r3, r2
 8004d48:	4a16      	ldr	r2, [pc, #88]	@ (8004da4 <xTaskRemoveFromEventList+0xb4>)
 8004d4a:	6013      	str	r3, [r2, #0]
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d50:	4613      	mov	r3, r2
 8004d52:	009b      	lsls	r3, r3, #2
 8004d54:	4413      	add	r3, r2
 8004d56:	009b      	lsls	r3, r3, #2
 8004d58:	4a13      	ldr	r2, [pc, #76]	@ (8004da8 <xTaskRemoveFromEventList+0xb8>)
 8004d5a:	441a      	add	r2, r3
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	3304      	adds	r3, #4
 8004d60:	4619      	mov	r1, r3
 8004d62:	4610      	mov	r0, r2
 8004d64:	f7ff f8db 	bl	8003f1e <vListInsertEnd>
 8004d68:	e005      	b.n	8004d76 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	3318      	adds	r3, #24
 8004d6e:	4619      	mov	r1, r3
 8004d70:	480e      	ldr	r0, [pc, #56]	@ (8004dac <xTaskRemoveFromEventList+0xbc>)
 8004d72:	f7ff f8d4 	bl	8003f1e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d7a:	4b0d      	ldr	r3, [pc, #52]	@ (8004db0 <xTaskRemoveFromEventList+0xc0>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d80:	429a      	cmp	r2, r3
 8004d82:	d905      	bls.n	8004d90 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004d84:	2301      	movs	r3, #1
 8004d86:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004d88:	4b0a      	ldr	r3, [pc, #40]	@ (8004db4 <xTaskRemoveFromEventList+0xc4>)
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	601a      	str	r2, [r3, #0]
 8004d8e:	e001      	b.n	8004d94 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004d90:	2300      	movs	r3, #0
 8004d92:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8004d94:	697b      	ldr	r3, [r7, #20]
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	3718      	adds	r7, #24
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}
 8004d9e:	bf00      	nop
 8004da0:	20000510 	.word	0x20000510
 8004da4:	200004f0 	.word	0x200004f0
 8004da8:	200003ec 	.word	0x200003ec
 8004dac:	200004a8 	.word	0x200004a8
 8004db0:	200003e8 	.word	0x200003e8
 8004db4:	200004fc 	.word	0x200004fc

08004db8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b082      	sub	sp, #8
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004dc0:	f000 f852 	bl	8004e68 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004dc4:	4b06      	ldr	r3, [pc, #24]	@ (8004de0 <prvIdleTask+0x28>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	2b01      	cmp	r3, #1
 8004dca:	d9f9      	bls.n	8004dc0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004dcc:	4b05      	ldr	r3, [pc, #20]	@ (8004de4 <prvIdleTask+0x2c>)
 8004dce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004dd2:	601a      	str	r2, [r3, #0]
 8004dd4:	f3bf 8f4f 	dsb	sy
 8004dd8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004ddc:	e7f0      	b.n	8004dc0 <prvIdleTask+0x8>
 8004dde:	bf00      	nop
 8004de0:	200003ec 	.word	0x200003ec
 8004de4:	e000ed04 	.word	0xe000ed04

08004de8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b082      	sub	sp, #8
 8004dec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004dee:	2300      	movs	r3, #0
 8004df0:	607b      	str	r3, [r7, #4]
 8004df2:	e00c      	b.n	8004e0e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004df4:	687a      	ldr	r2, [r7, #4]
 8004df6:	4613      	mov	r3, r2
 8004df8:	009b      	lsls	r3, r3, #2
 8004dfa:	4413      	add	r3, r2
 8004dfc:	009b      	lsls	r3, r3, #2
 8004dfe:	4a12      	ldr	r2, [pc, #72]	@ (8004e48 <prvInitialiseTaskLists+0x60>)
 8004e00:	4413      	add	r3, r2
 8004e02:	4618      	mov	r0, r3
 8004e04:	f7ff f85e 	bl	8003ec4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	3301      	adds	r3, #1
 8004e0c:	607b      	str	r3, [r7, #4]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2b06      	cmp	r3, #6
 8004e12:	d9ef      	bls.n	8004df4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004e14:	480d      	ldr	r0, [pc, #52]	@ (8004e4c <prvInitialiseTaskLists+0x64>)
 8004e16:	f7ff f855 	bl	8003ec4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004e1a:	480d      	ldr	r0, [pc, #52]	@ (8004e50 <prvInitialiseTaskLists+0x68>)
 8004e1c:	f7ff f852 	bl	8003ec4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004e20:	480c      	ldr	r0, [pc, #48]	@ (8004e54 <prvInitialiseTaskLists+0x6c>)
 8004e22:	f7ff f84f 	bl	8003ec4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004e26:	480c      	ldr	r0, [pc, #48]	@ (8004e58 <prvInitialiseTaskLists+0x70>)
 8004e28:	f7ff f84c 	bl	8003ec4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004e2c:	480b      	ldr	r0, [pc, #44]	@ (8004e5c <prvInitialiseTaskLists+0x74>)
 8004e2e:	f7ff f849 	bl	8003ec4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004e32:	4b0b      	ldr	r3, [pc, #44]	@ (8004e60 <prvInitialiseTaskLists+0x78>)
 8004e34:	4a05      	ldr	r2, [pc, #20]	@ (8004e4c <prvInitialiseTaskLists+0x64>)
 8004e36:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004e38:	4b0a      	ldr	r3, [pc, #40]	@ (8004e64 <prvInitialiseTaskLists+0x7c>)
 8004e3a:	4a05      	ldr	r2, [pc, #20]	@ (8004e50 <prvInitialiseTaskLists+0x68>)
 8004e3c:	601a      	str	r2, [r3, #0]
}
 8004e3e:	bf00      	nop
 8004e40:	3708      	adds	r7, #8
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}
 8004e46:	bf00      	nop
 8004e48:	200003ec 	.word	0x200003ec
 8004e4c:	20000478 	.word	0x20000478
 8004e50:	2000048c 	.word	0x2000048c
 8004e54:	200004a8 	.word	0x200004a8
 8004e58:	200004bc 	.word	0x200004bc
 8004e5c:	200004d4 	.word	0x200004d4
 8004e60:	200004a0 	.word	0x200004a0
 8004e64:	200004a4 	.word	0x200004a4

08004e68 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b082      	sub	sp, #8
 8004e6c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004e6e:	e019      	b.n	8004ea4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004e70:	f000 fa9a 	bl	80053a8 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004e74:	4b10      	ldr	r3, [pc, #64]	@ (8004eb8 <prvCheckTasksWaitingTermination+0x50>)
 8004e76:	68db      	ldr	r3, [r3, #12]
 8004e78:	68db      	ldr	r3, [r3, #12]
 8004e7a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	3304      	adds	r3, #4
 8004e80:	4618      	mov	r0, r3
 8004e82:	f7ff f8a9 	bl	8003fd8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004e86:	4b0d      	ldr	r3, [pc, #52]	@ (8004ebc <prvCheckTasksWaitingTermination+0x54>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	3b01      	subs	r3, #1
 8004e8c:	4a0b      	ldr	r2, [pc, #44]	@ (8004ebc <prvCheckTasksWaitingTermination+0x54>)
 8004e8e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004e90:	4b0b      	ldr	r3, [pc, #44]	@ (8004ec0 <prvCheckTasksWaitingTermination+0x58>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	3b01      	subs	r3, #1
 8004e96:	4a0a      	ldr	r2, [pc, #40]	@ (8004ec0 <prvCheckTasksWaitingTermination+0x58>)
 8004e98:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004e9a:	f000 fab7 	bl	800540c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f000 f810 	bl	8004ec4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004ea4:	4b06      	ldr	r3, [pc, #24]	@ (8004ec0 <prvCheckTasksWaitingTermination+0x58>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d1e1      	bne.n	8004e70 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004eac:	bf00      	nop
 8004eae:	bf00      	nop
 8004eb0:	3708      	adds	r7, #8
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}
 8004eb6:	bf00      	nop
 8004eb8:	200004bc 	.word	0x200004bc
 8004ebc:	200004e8 	.word	0x200004e8
 8004ec0:	200004d0 	.word	0x200004d0

08004ec4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b084      	sub	sp, #16
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d108      	bne.n	8004ee8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eda:	4618      	mov	r0, r3
 8004edc:	f000 fc4e 	bl	800577c <vPortFree>
				vPortFree( pxTCB );
 8004ee0:	6878      	ldr	r0, [r7, #4]
 8004ee2:	f000 fc4b 	bl	800577c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004ee6:	e019      	b.n	8004f1c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004eee:	2b01      	cmp	r3, #1
 8004ef0:	d103      	bne.n	8004efa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	f000 fc42 	bl	800577c <vPortFree>
	}
 8004ef8:	e010      	b.n	8004f1c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004f00:	2b02      	cmp	r3, #2
 8004f02:	d00b      	beq.n	8004f1c <prvDeleteTCB+0x58>
	__asm volatile
 8004f04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f08:	f383 8811 	msr	BASEPRI, r3
 8004f0c:	f3bf 8f6f 	isb	sy
 8004f10:	f3bf 8f4f 	dsb	sy
 8004f14:	60fb      	str	r3, [r7, #12]
}
 8004f16:	bf00      	nop
 8004f18:	bf00      	nop
 8004f1a:	e7fd      	b.n	8004f18 <prvDeleteTCB+0x54>
	}
 8004f1c:	bf00      	nop
 8004f1e:	3710      	adds	r7, #16
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}

08004f24 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004f24:	b480      	push	{r7}
 8004f26:	b083      	sub	sp, #12
 8004f28:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f2a:	4b0f      	ldr	r3, [pc, #60]	@ (8004f68 <prvResetNextTaskUnblockTime+0x44>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d101      	bne.n	8004f38 <prvResetNextTaskUnblockTime+0x14>
 8004f34:	2301      	movs	r3, #1
 8004f36:	e000      	b.n	8004f3a <prvResetNextTaskUnblockTime+0x16>
 8004f38:	2300      	movs	r3, #0
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d004      	beq.n	8004f48 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004f3e:	4b0b      	ldr	r3, [pc, #44]	@ (8004f6c <prvResetNextTaskUnblockTime+0x48>)
 8004f40:	f04f 32ff 	mov.w	r2, #4294967295
 8004f44:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004f46:	e008      	b.n	8004f5a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004f48:	4b07      	ldr	r3, [pc, #28]	@ (8004f68 <prvResetNextTaskUnblockTime+0x44>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	68db      	ldr	r3, [r3, #12]
 8004f4e:	68db      	ldr	r3, [r3, #12]
 8004f50:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	4a05      	ldr	r2, [pc, #20]	@ (8004f6c <prvResetNextTaskUnblockTime+0x48>)
 8004f58:	6013      	str	r3, [r2, #0]
}
 8004f5a:	bf00      	nop
 8004f5c:	370c      	adds	r7, #12
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f64:	4770      	bx	lr
 8004f66:	bf00      	nop
 8004f68:	200004a0 	.word	0x200004a0
 8004f6c:	20000508 	.word	0x20000508

08004f70 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b086      	sub	sp, #24
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d070      	beq.n	8005068 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004f86:	4b3b      	ldr	r3, [pc, #236]	@ (8005074 <xTaskPriorityDisinherit+0x104>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	693a      	ldr	r2, [r7, #16]
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	d00b      	beq.n	8004fa8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004f90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f94:	f383 8811 	msr	BASEPRI, r3
 8004f98:	f3bf 8f6f 	isb	sy
 8004f9c:	f3bf 8f4f 	dsb	sy
 8004fa0:	60fb      	str	r3, [r7, #12]
}
 8004fa2:	bf00      	nop
 8004fa4:	bf00      	nop
 8004fa6:	e7fd      	b.n	8004fa4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004fa8:	693b      	ldr	r3, [r7, #16]
 8004faa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d10b      	bne.n	8004fc8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004fb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fb4:	f383 8811 	msr	BASEPRI, r3
 8004fb8:	f3bf 8f6f 	isb	sy
 8004fbc:	f3bf 8f4f 	dsb	sy
 8004fc0:	60bb      	str	r3, [r7, #8]
}
 8004fc2:	bf00      	nop
 8004fc4:	bf00      	nop
 8004fc6:	e7fd      	b.n	8004fc4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fcc:	1e5a      	subs	r2, r3, #1
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fda:	429a      	cmp	r2, r3
 8004fdc:	d044      	beq.n	8005068 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d140      	bne.n	8005068 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	3304      	adds	r3, #4
 8004fea:	4618      	mov	r0, r3
 8004fec:	f7fe fff4 	bl	8003fd8 <uxListRemove>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d115      	bne.n	8005022 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ffa:	491f      	ldr	r1, [pc, #124]	@ (8005078 <xTaskPriorityDisinherit+0x108>)
 8004ffc:	4613      	mov	r3, r2
 8004ffe:	009b      	lsls	r3, r3, #2
 8005000:	4413      	add	r3, r2
 8005002:	009b      	lsls	r3, r3, #2
 8005004:	440b      	add	r3, r1
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d10a      	bne.n	8005022 <xTaskPriorityDisinherit+0xb2>
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005010:	2201      	movs	r2, #1
 8005012:	fa02 f303 	lsl.w	r3, r2, r3
 8005016:	43da      	mvns	r2, r3
 8005018:	4b18      	ldr	r3, [pc, #96]	@ (800507c <xTaskPriorityDisinherit+0x10c>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4013      	ands	r3, r2
 800501e:	4a17      	ldr	r2, [pc, #92]	@ (800507c <xTaskPriorityDisinherit+0x10c>)
 8005020:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800502e:	f1c3 0207 	rsb	r2, r3, #7
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800503a:	2201      	movs	r2, #1
 800503c:	409a      	lsls	r2, r3
 800503e:	4b0f      	ldr	r3, [pc, #60]	@ (800507c <xTaskPriorityDisinherit+0x10c>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4313      	orrs	r3, r2
 8005044:	4a0d      	ldr	r2, [pc, #52]	@ (800507c <xTaskPriorityDisinherit+0x10c>)
 8005046:	6013      	str	r3, [r2, #0]
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800504c:	4613      	mov	r3, r2
 800504e:	009b      	lsls	r3, r3, #2
 8005050:	4413      	add	r3, r2
 8005052:	009b      	lsls	r3, r3, #2
 8005054:	4a08      	ldr	r2, [pc, #32]	@ (8005078 <xTaskPriorityDisinherit+0x108>)
 8005056:	441a      	add	r2, r3
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	3304      	adds	r3, #4
 800505c:	4619      	mov	r1, r3
 800505e:	4610      	mov	r0, r2
 8005060:	f7fe ff5d 	bl	8003f1e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005064:	2301      	movs	r3, #1
 8005066:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005068:	697b      	ldr	r3, [r7, #20]
	}
 800506a:	4618      	mov	r0, r3
 800506c:	3718      	adds	r7, #24
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}
 8005072:	bf00      	nop
 8005074:	200003e8 	.word	0x200003e8
 8005078:	200003ec 	.word	0x200003ec
 800507c:	200004f0 	.word	0x200004f0

08005080 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b084      	sub	sp, #16
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
 8005088:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800508a:	4b29      	ldr	r3, [pc, #164]	@ (8005130 <prvAddCurrentTaskToDelayedList+0xb0>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005090:	4b28      	ldr	r3, [pc, #160]	@ (8005134 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	3304      	adds	r3, #4
 8005096:	4618      	mov	r0, r3
 8005098:	f7fe ff9e 	bl	8003fd8 <uxListRemove>
 800509c:	4603      	mov	r3, r0
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d10b      	bne.n	80050ba <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80050a2:	4b24      	ldr	r3, [pc, #144]	@ (8005134 <prvAddCurrentTaskToDelayedList+0xb4>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050a8:	2201      	movs	r2, #1
 80050aa:	fa02 f303 	lsl.w	r3, r2, r3
 80050ae:	43da      	mvns	r2, r3
 80050b0:	4b21      	ldr	r3, [pc, #132]	@ (8005138 <prvAddCurrentTaskToDelayedList+0xb8>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4013      	ands	r3, r2
 80050b6:	4a20      	ldr	r2, [pc, #128]	@ (8005138 <prvAddCurrentTaskToDelayedList+0xb8>)
 80050b8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050c0:	d10a      	bne.n	80050d8 <prvAddCurrentTaskToDelayedList+0x58>
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d007      	beq.n	80050d8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80050c8:	4b1a      	ldr	r3, [pc, #104]	@ (8005134 <prvAddCurrentTaskToDelayedList+0xb4>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	3304      	adds	r3, #4
 80050ce:	4619      	mov	r1, r3
 80050d0:	481a      	ldr	r0, [pc, #104]	@ (800513c <prvAddCurrentTaskToDelayedList+0xbc>)
 80050d2:	f7fe ff24 	bl	8003f1e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80050d6:	e026      	b.n	8005126 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80050d8:	68fa      	ldr	r2, [r7, #12]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	4413      	add	r3, r2
 80050de:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80050e0:	4b14      	ldr	r3, [pc, #80]	@ (8005134 <prvAddCurrentTaskToDelayedList+0xb4>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	68ba      	ldr	r2, [r7, #8]
 80050e6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80050e8:	68ba      	ldr	r2, [r7, #8]
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	429a      	cmp	r2, r3
 80050ee:	d209      	bcs.n	8005104 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80050f0:	4b13      	ldr	r3, [pc, #76]	@ (8005140 <prvAddCurrentTaskToDelayedList+0xc0>)
 80050f2:	681a      	ldr	r2, [r3, #0]
 80050f4:	4b0f      	ldr	r3, [pc, #60]	@ (8005134 <prvAddCurrentTaskToDelayedList+0xb4>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	3304      	adds	r3, #4
 80050fa:	4619      	mov	r1, r3
 80050fc:	4610      	mov	r0, r2
 80050fe:	f7fe ff32 	bl	8003f66 <vListInsert>
}
 8005102:	e010      	b.n	8005126 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005104:	4b0f      	ldr	r3, [pc, #60]	@ (8005144 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005106:	681a      	ldr	r2, [r3, #0]
 8005108:	4b0a      	ldr	r3, [pc, #40]	@ (8005134 <prvAddCurrentTaskToDelayedList+0xb4>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	3304      	adds	r3, #4
 800510e:	4619      	mov	r1, r3
 8005110:	4610      	mov	r0, r2
 8005112:	f7fe ff28 	bl	8003f66 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005116:	4b0c      	ldr	r3, [pc, #48]	@ (8005148 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	68ba      	ldr	r2, [r7, #8]
 800511c:	429a      	cmp	r2, r3
 800511e:	d202      	bcs.n	8005126 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005120:	4a09      	ldr	r2, [pc, #36]	@ (8005148 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	6013      	str	r3, [r2, #0]
}
 8005126:	bf00      	nop
 8005128:	3710      	adds	r7, #16
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}
 800512e:	bf00      	nop
 8005130:	200004ec 	.word	0x200004ec
 8005134:	200003e8 	.word	0x200003e8
 8005138:	200004f0 	.word	0x200004f0
 800513c:	200004d4 	.word	0x200004d4
 8005140:	200004a4 	.word	0x200004a4
 8005144:	200004a0 	.word	0x200004a0
 8005148:	20000508 	.word	0x20000508

0800514c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800514c:	b480      	push	{r7}
 800514e:	b085      	sub	sp, #20
 8005150:	af00      	add	r7, sp, #0
 8005152:	60f8      	str	r0, [r7, #12]
 8005154:	60b9      	str	r1, [r7, #8]
 8005156:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	3b04      	subs	r3, #4
 800515c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005164:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	3b04      	subs	r3, #4
 800516a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	f023 0201 	bic.w	r2, r3, #1
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	3b04      	subs	r3, #4
 800517a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800517c:	4a0c      	ldr	r2, [pc, #48]	@ (80051b0 <pxPortInitialiseStack+0x64>)
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	3b14      	subs	r3, #20
 8005186:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005188:	687a      	ldr	r2, [r7, #4]
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	3b04      	subs	r3, #4
 8005192:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	f06f 0202 	mvn.w	r2, #2
 800519a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	3b20      	subs	r3, #32
 80051a0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80051a2:	68fb      	ldr	r3, [r7, #12]
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	3714      	adds	r7, #20
 80051a8:	46bd      	mov	sp, r7
 80051aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ae:	4770      	bx	lr
 80051b0:	080051b5 	.word	0x080051b5

080051b4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80051b4:	b480      	push	{r7}
 80051b6:	b085      	sub	sp, #20
 80051b8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80051ba:	2300      	movs	r3, #0
 80051bc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80051be:	4b13      	ldr	r3, [pc, #76]	@ (800520c <prvTaskExitError+0x58>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051c6:	d00b      	beq.n	80051e0 <prvTaskExitError+0x2c>
	__asm volatile
 80051c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051cc:	f383 8811 	msr	BASEPRI, r3
 80051d0:	f3bf 8f6f 	isb	sy
 80051d4:	f3bf 8f4f 	dsb	sy
 80051d8:	60fb      	str	r3, [r7, #12]
}
 80051da:	bf00      	nop
 80051dc:	bf00      	nop
 80051de:	e7fd      	b.n	80051dc <prvTaskExitError+0x28>
	__asm volatile
 80051e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051e4:	f383 8811 	msr	BASEPRI, r3
 80051e8:	f3bf 8f6f 	isb	sy
 80051ec:	f3bf 8f4f 	dsb	sy
 80051f0:	60bb      	str	r3, [r7, #8]
}
 80051f2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80051f4:	bf00      	nop
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d0fc      	beq.n	80051f6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80051fc:	bf00      	nop
 80051fe:	bf00      	nop
 8005200:	3714      	adds	r7, #20
 8005202:	46bd      	mov	sp, r7
 8005204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005208:	4770      	bx	lr
 800520a:	bf00      	nop
 800520c:	2000000c 	.word	0x2000000c

08005210 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005210:	4b07      	ldr	r3, [pc, #28]	@ (8005230 <pxCurrentTCBConst2>)
 8005212:	6819      	ldr	r1, [r3, #0]
 8005214:	6808      	ldr	r0, [r1, #0]
 8005216:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800521a:	f380 8809 	msr	PSP, r0
 800521e:	f3bf 8f6f 	isb	sy
 8005222:	f04f 0000 	mov.w	r0, #0
 8005226:	f380 8811 	msr	BASEPRI, r0
 800522a:	4770      	bx	lr
 800522c:	f3af 8000 	nop.w

08005230 <pxCurrentTCBConst2>:
 8005230:	200003e8 	.word	0x200003e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005234:	bf00      	nop
 8005236:	bf00      	nop

08005238 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005238:	4808      	ldr	r0, [pc, #32]	@ (800525c <prvPortStartFirstTask+0x24>)
 800523a:	6800      	ldr	r0, [r0, #0]
 800523c:	6800      	ldr	r0, [r0, #0]
 800523e:	f380 8808 	msr	MSP, r0
 8005242:	f04f 0000 	mov.w	r0, #0
 8005246:	f380 8814 	msr	CONTROL, r0
 800524a:	b662      	cpsie	i
 800524c:	b661      	cpsie	f
 800524e:	f3bf 8f4f 	dsb	sy
 8005252:	f3bf 8f6f 	isb	sy
 8005256:	df00      	svc	0
 8005258:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800525a:	bf00      	nop
 800525c:	e000ed08 	.word	0xe000ed08

08005260 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b086      	sub	sp, #24
 8005264:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005266:	4b47      	ldr	r3, [pc, #284]	@ (8005384 <xPortStartScheduler+0x124>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a47      	ldr	r2, [pc, #284]	@ (8005388 <xPortStartScheduler+0x128>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d10b      	bne.n	8005288 <xPortStartScheduler+0x28>
	__asm volatile
 8005270:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005274:	f383 8811 	msr	BASEPRI, r3
 8005278:	f3bf 8f6f 	isb	sy
 800527c:	f3bf 8f4f 	dsb	sy
 8005280:	613b      	str	r3, [r7, #16]
}
 8005282:	bf00      	nop
 8005284:	bf00      	nop
 8005286:	e7fd      	b.n	8005284 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005288:	4b3e      	ldr	r3, [pc, #248]	@ (8005384 <xPortStartScheduler+0x124>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a3f      	ldr	r2, [pc, #252]	@ (800538c <xPortStartScheduler+0x12c>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d10b      	bne.n	80052aa <xPortStartScheduler+0x4a>
	__asm volatile
 8005292:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005296:	f383 8811 	msr	BASEPRI, r3
 800529a:	f3bf 8f6f 	isb	sy
 800529e:	f3bf 8f4f 	dsb	sy
 80052a2:	60fb      	str	r3, [r7, #12]
}
 80052a4:	bf00      	nop
 80052a6:	bf00      	nop
 80052a8:	e7fd      	b.n	80052a6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80052aa:	4b39      	ldr	r3, [pc, #228]	@ (8005390 <xPortStartScheduler+0x130>)
 80052ac:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	781b      	ldrb	r3, [r3, #0]
 80052b2:	b2db      	uxtb	r3, r3
 80052b4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	22ff      	movs	r2, #255	@ 0xff
 80052ba:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	781b      	ldrb	r3, [r3, #0]
 80052c0:	b2db      	uxtb	r3, r3
 80052c2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80052c4:	78fb      	ldrb	r3, [r7, #3]
 80052c6:	b2db      	uxtb	r3, r3
 80052c8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80052cc:	b2da      	uxtb	r2, r3
 80052ce:	4b31      	ldr	r3, [pc, #196]	@ (8005394 <xPortStartScheduler+0x134>)
 80052d0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80052d2:	4b31      	ldr	r3, [pc, #196]	@ (8005398 <xPortStartScheduler+0x138>)
 80052d4:	2207      	movs	r2, #7
 80052d6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80052d8:	e009      	b.n	80052ee <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80052da:	4b2f      	ldr	r3, [pc, #188]	@ (8005398 <xPortStartScheduler+0x138>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	3b01      	subs	r3, #1
 80052e0:	4a2d      	ldr	r2, [pc, #180]	@ (8005398 <xPortStartScheduler+0x138>)
 80052e2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80052e4:	78fb      	ldrb	r3, [r7, #3]
 80052e6:	b2db      	uxtb	r3, r3
 80052e8:	005b      	lsls	r3, r3, #1
 80052ea:	b2db      	uxtb	r3, r3
 80052ec:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80052ee:	78fb      	ldrb	r3, [r7, #3]
 80052f0:	b2db      	uxtb	r3, r3
 80052f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052f6:	2b80      	cmp	r3, #128	@ 0x80
 80052f8:	d0ef      	beq.n	80052da <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80052fa:	4b27      	ldr	r3, [pc, #156]	@ (8005398 <xPortStartScheduler+0x138>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f1c3 0307 	rsb	r3, r3, #7
 8005302:	2b04      	cmp	r3, #4
 8005304:	d00b      	beq.n	800531e <xPortStartScheduler+0xbe>
	__asm volatile
 8005306:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800530a:	f383 8811 	msr	BASEPRI, r3
 800530e:	f3bf 8f6f 	isb	sy
 8005312:	f3bf 8f4f 	dsb	sy
 8005316:	60bb      	str	r3, [r7, #8]
}
 8005318:	bf00      	nop
 800531a:	bf00      	nop
 800531c:	e7fd      	b.n	800531a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800531e:	4b1e      	ldr	r3, [pc, #120]	@ (8005398 <xPortStartScheduler+0x138>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	021b      	lsls	r3, r3, #8
 8005324:	4a1c      	ldr	r2, [pc, #112]	@ (8005398 <xPortStartScheduler+0x138>)
 8005326:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005328:	4b1b      	ldr	r3, [pc, #108]	@ (8005398 <xPortStartScheduler+0x138>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005330:	4a19      	ldr	r2, [pc, #100]	@ (8005398 <xPortStartScheduler+0x138>)
 8005332:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	b2da      	uxtb	r2, r3
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800533c:	4b17      	ldr	r3, [pc, #92]	@ (800539c <xPortStartScheduler+0x13c>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a16      	ldr	r2, [pc, #88]	@ (800539c <xPortStartScheduler+0x13c>)
 8005342:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005346:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005348:	4b14      	ldr	r3, [pc, #80]	@ (800539c <xPortStartScheduler+0x13c>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a13      	ldr	r2, [pc, #76]	@ (800539c <xPortStartScheduler+0x13c>)
 800534e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005352:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005354:	f000 f8da 	bl	800550c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005358:	4b11      	ldr	r3, [pc, #68]	@ (80053a0 <xPortStartScheduler+0x140>)
 800535a:	2200      	movs	r2, #0
 800535c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800535e:	f000 f8f9 	bl	8005554 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005362:	4b10      	ldr	r3, [pc, #64]	@ (80053a4 <xPortStartScheduler+0x144>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a0f      	ldr	r2, [pc, #60]	@ (80053a4 <xPortStartScheduler+0x144>)
 8005368:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800536c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800536e:	f7ff ff63 	bl	8005238 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005372:	f7ff fc61 	bl	8004c38 <vTaskSwitchContext>
	prvTaskExitError();
 8005376:	f7ff ff1d 	bl	80051b4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800537a:	2300      	movs	r3, #0
}
 800537c:	4618      	mov	r0, r3
 800537e:	3718      	adds	r7, #24
 8005380:	46bd      	mov	sp, r7
 8005382:	bd80      	pop	{r7, pc}
 8005384:	e000ed00 	.word	0xe000ed00
 8005388:	410fc271 	.word	0x410fc271
 800538c:	410fc270 	.word	0x410fc270
 8005390:	e000e400 	.word	0xe000e400
 8005394:	20000514 	.word	0x20000514
 8005398:	20000518 	.word	0x20000518
 800539c:	e000ed20 	.word	0xe000ed20
 80053a0:	2000000c 	.word	0x2000000c
 80053a4:	e000ef34 	.word	0xe000ef34

080053a8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80053a8:	b480      	push	{r7}
 80053aa:	b083      	sub	sp, #12
 80053ac:	af00      	add	r7, sp, #0
	__asm volatile
 80053ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053b2:	f383 8811 	msr	BASEPRI, r3
 80053b6:	f3bf 8f6f 	isb	sy
 80053ba:	f3bf 8f4f 	dsb	sy
 80053be:	607b      	str	r3, [r7, #4]
}
 80053c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80053c2:	4b10      	ldr	r3, [pc, #64]	@ (8005404 <vPortEnterCritical+0x5c>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	3301      	adds	r3, #1
 80053c8:	4a0e      	ldr	r2, [pc, #56]	@ (8005404 <vPortEnterCritical+0x5c>)
 80053ca:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80053cc:	4b0d      	ldr	r3, [pc, #52]	@ (8005404 <vPortEnterCritical+0x5c>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	2b01      	cmp	r3, #1
 80053d2:	d110      	bne.n	80053f6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80053d4:	4b0c      	ldr	r3, [pc, #48]	@ (8005408 <vPortEnterCritical+0x60>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	b2db      	uxtb	r3, r3
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d00b      	beq.n	80053f6 <vPortEnterCritical+0x4e>
	__asm volatile
 80053de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053e2:	f383 8811 	msr	BASEPRI, r3
 80053e6:	f3bf 8f6f 	isb	sy
 80053ea:	f3bf 8f4f 	dsb	sy
 80053ee:	603b      	str	r3, [r7, #0]
}
 80053f0:	bf00      	nop
 80053f2:	bf00      	nop
 80053f4:	e7fd      	b.n	80053f2 <vPortEnterCritical+0x4a>
	}
}
 80053f6:	bf00      	nop
 80053f8:	370c      	adds	r7, #12
 80053fa:	46bd      	mov	sp, r7
 80053fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005400:	4770      	bx	lr
 8005402:	bf00      	nop
 8005404:	2000000c 	.word	0x2000000c
 8005408:	e000ed04 	.word	0xe000ed04

0800540c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800540c:	b480      	push	{r7}
 800540e:	b083      	sub	sp, #12
 8005410:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005412:	4b12      	ldr	r3, [pc, #72]	@ (800545c <vPortExitCritical+0x50>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d10b      	bne.n	8005432 <vPortExitCritical+0x26>
	__asm volatile
 800541a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800541e:	f383 8811 	msr	BASEPRI, r3
 8005422:	f3bf 8f6f 	isb	sy
 8005426:	f3bf 8f4f 	dsb	sy
 800542a:	607b      	str	r3, [r7, #4]
}
 800542c:	bf00      	nop
 800542e:	bf00      	nop
 8005430:	e7fd      	b.n	800542e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005432:	4b0a      	ldr	r3, [pc, #40]	@ (800545c <vPortExitCritical+0x50>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	3b01      	subs	r3, #1
 8005438:	4a08      	ldr	r2, [pc, #32]	@ (800545c <vPortExitCritical+0x50>)
 800543a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800543c:	4b07      	ldr	r3, [pc, #28]	@ (800545c <vPortExitCritical+0x50>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d105      	bne.n	8005450 <vPortExitCritical+0x44>
 8005444:	2300      	movs	r3, #0
 8005446:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	f383 8811 	msr	BASEPRI, r3
}
 800544e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005450:	bf00      	nop
 8005452:	370c      	adds	r7, #12
 8005454:	46bd      	mov	sp, r7
 8005456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545a:	4770      	bx	lr
 800545c:	2000000c 	.word	0x2000000c

08005460 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005460:	f3ef 8009 	mrs	r0, PSP
 8005464:	f3bf 8f6f 	isb	sy
 8005468:	4b15      	ldr	r3, [pc, #84]	@ (80054c0 <pxCurrentTCBConst>)
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	f01e 0f10 	tst.w	lr, #16
 8005470:	bf08      	it	eq
 8005472:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005476:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800547a:	6010      	str	r0, [r2, #0]
 800547c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005480:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005484:	f380 8811 	msr	BASEPRI, r0
 8005488:	f3bf 8f4f 	dsb	sy
 800548c:	f3bf 8f6f 	isb	sy
 8005490:	f7ff fbd2 	bl	8004c38 <vTaskSwitchContext>
 8005494:	f04f 0000 	mov.w	r0, #0
 8005498:	f380 8811 	msr	BASEPRI, r0
 800549c:	bc09      	pop	{r0, r3}
 800549e:	6819      	ldr	r1, [r3, #0]
 80054a0:	6808      	ldr	r0, [r1, #0]
 80054a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054a6:	f01e 0f10 	tst.w	lr, #16
 80054aa:	bf08      	it	eq
 80054ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80054b0:	f380 8809 	msr	PSP, r0
 80054b4:	f3bf 8f6f 	isb	sy
 80054b8:	4770      	bx	lr
 80054ba:	bf00      	nop
 80054bc:	f3af 8000 	nop.w

080054c0 <pxCurrentTCBConst>:
 80054c0:	200003e8 	.word	0x200003e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80054c4:	bf00      	nop
 80054c6:	bf00      	nop

080054c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b082      	sub	sp, #8
 80054cc:	af00      	add	r7, sp, #0
	__asm volatile
 80054ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054d2:	f383 8811 	msr	BASEPRI, r3
 80054d6:	f3bf 8f6f 	isb	sy
 80054da:	f3bf 8f4f 	dsb	sy
 80054de:	607b      	str	r3, [r7, #4]
}
 80054e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80054e2:	f7ff faeb 	bl	8004abc <xTaskIncrementTick>
 80054e6:	4603      	mov	r3, r0
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d003      	beq.n	80054f4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80054ec:	4b06      	ldr	r3, [pc, #24]	@ (8005508 <SysTick_Handler+0x40>)
 80054ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80054f2:	601a      	str	r2, [r3, #0]
 80054f4:	2300      	movs	r3, #0
 80054f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	f383 8811 	msr	BASEPRI, r3
}
 80054fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005500:	bf00      	nop
 8005502:	3708      	adds	r7, #8
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}
 8005508:	e000ed04 	.word	0xe000ed04

0800550c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800550c:	b480      	push	{r7}
 800550e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005510:	4b0b      	ldr	r3, [pc, #44]	@ (8005540 <vPortSetupTimerInterrupt+0x34>)
 8005512:	2200      	movs	r2, #0
 8005514:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005516:	4b0b      	ldr	r3, [pc, #44]	@ (8005544 <vPortSetupTimerInterrupt+0x38>)
 8005518:	2200      	movs	r2, #0
 800551a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800551c:	4b0a      	ldr	r3, [pc, #40]	@ (8005548 <vPortSetupTimerInterrupt+0x3c>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a0a      	ldr	r2, [pc, #40]	@ (800554c <vPortSetupTimerInterrupt+0x40>)
 8005522:	fba2 2303 	umull	r2, r3, r2, r3
 8005526:	099b      	lsrs	r3, r3, #6
 8005528:	4a09      	ldr	r2, [pc, #36]	@ (8005550 <vPortSetupTimerInterrupt+0x44>)
 800552a:	3b01      	subs	r3, #1
 800552c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800552e:	4b04      	ldr	r3, [pc, #16]	@ (8005540 <vPortSetupTimerInterrupt+0x34>)
 8005530:	2207      	movs	r2, #7
 8005532:	601a      	str	r2, [r3, #0]
}
 8005534:	bf00      	nop
 8005536:	46bd      	mov	sp, r7
 8005538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553c:	4770      	bx	lr
 800553e:	bf00      	nop
 8005540:	e000e010 	.word	0xe000e010
 8005544:	e000e018 	.word	0xe000e018
 8005548:	20000000 	.word	0x20000000
 800554c:	10624dd3 	.word	0x10624dd3
 8005550:	e000e014 	.word	0xe000e014

08005554 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005554:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005564 <vPortEnableVFP+0x10>
 8005558:	6801      	ldr	r1, [r0, #0]
 800555a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800555e:	6001      	str	r1, [r0, #0]
 8005560:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005562:	bf00      	nop
 8005564:	e000ed88 	.word	0xe000ed88

08005568 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005568:	b480      	push	{r7}
 800556a:	b085      	sub	sp, #20
 800556c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800556e:	f3ef 8305 	mrs	r3, IPSR
 8005572:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	2b0f      	cmp	r3, #15
 8005578:	d915      	bls.n	80055a6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800557a:	4a18      	ldr	r2, [pc, #96]	@ (80055dc <vPortValidateInterruptPriority+0x74>)
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	4413      	add	r3, r2
 8005580:	781b      	ldrb	r3, [r3, #0]
 8005582:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005584:	4b16      	ldr	r3, [pc, #88]	@ (80055e0 <vPortValidateInterruptPriority+0x78>)
 8005586:	781b      	ldrb	r3, [r3, #0]
 8005588:	7afa      	ldrb	r2, [r7, #11]
 800558a:	429a      	cmp	r2, r3
 800558c:	d20b      	bcs.n	80055a6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800558e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005592:	f383 8811 	msr	BASEPRI, r3
 8005596:	f3bf 8f6f 	isb	sy
 800559a:	f3bf 8f4f 	dsb	sy
 800559e:	607b      	str	r3, [r7, #4]
}
 80055a0:	bf00      	nop
 80055a2:	bf00      	nop
 80055a4:	e7fd      	b.n	80055a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80055a6:	4b0f      	ldr	r3, [pc, #60]	@ (80055e4 <vPortValidateInterruptPriority+0x7c>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80055ae:	4b0e      	ldr	r3, [pc, #56]	@ (80055e8 <vPortValidateInterruptPriority+0x80>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	429a      	cmp	r2, r3
 80055b4:	d90b      	bls.n	80055ce <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80055b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055ba:	f383 8811 	msr	BASEPRI, r3
 80055be:	f3bf 8f6f 	isb	sy
 80055c2:	f3bf 8f4f 	dsb	sy
 80055c6:	603b      	str	r3, [r7, #0]
}
 80055c8:	bf00      	nop
 80055ca:	bf00      	nop
 80055cc:	e7fd      	b.n	80055ca <vPortValidateInterruptPriority+0x62>
	}
 80055ce:	bf00      	nop
 80055d0:	3714      	adds	r7, #20
 80055d2:	46bd      	mov	sp, r7
 80055d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d8:	4770      	bx	lr
 80055da:	bf00      	nop
 80055dc:	e000e3f0 	.word	0xe000e3f0
 80055e0:	20000514 	.word	0x20000514
 80055e4:	e000ed0c 	.word	0xe000ed0c
 80055e8:	20000518 	.word	0x20000518

080055ec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b08a      	sub	sp, #40	@ 0x28
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80055f4:	2300      	movs	r3, #0
 80055f6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80055f8:	f7ff f9b4 	bl	8004964 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80055fc:	4b5a      	ldr	r3, [pc, #360]	@ (8005768 <pvPortMalloc+0x17c>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d101      	bne.n	8005608 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005604:	f000 f916 	bl	8005834 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005608:	4b58      	ldr	r3, [pc, #352]	@ (800576c <pvPortMalloc+0x180>)
 800560a:	681a      	ldr	r2, [r3, #0]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	4013      	ands	r3, r2
 8005610:	2b00      	cmp	r3, #0
 8005612:	f040 8090 	bne.w	8005736 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d01e      	beq.n	800565a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800561c:	2208      	movs	r2, #8
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	4413      	add	r3, r2
 8005622:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	f003 0307 	and.w	r3, r3, #7
 800562a:	2b00      	cmp	r3, #0
 800562c:	d015      	beq.n	800565a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	f023 0307 	bic.w	r3, r3, #7
 8005634:	3308      	adds	r3, #8
 8005636:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	f003 0307 	and.w	r3, r3, #7
 800563e:	2b00      	cmp	r3, #0
 8005640:	d00b      	beq.n	800565a <pvPortMalloc+0x6e>
	__asm volatile
 8005642:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005646:	f383 8811 	msr	BASEPRI, r3
 800564a:	f3bf 8f6f 	isb	sy
 800564e:	f3bf 8f4f 	dsb	sy
 8005652:	617b      	str	r3, [r7, #20]
}
 8005654:	bf00      	nop
 8005656:	bf00      	nop
 8005658:	e7fd      	b.n	8005656 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d06a      	beq.n	8005736 <pvPortMalloc+0x14a>
 8005660:	4b43      	ldr	r3, [pc, #268]	@ (8005770 <pvPortMalloc+0x184>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	687a      	ldr	r2, [r7, #4]
 8005666:	429a      	cmp	r2, r3
 8005668:	d865      	bhi.n	8005736 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800566a:	4b42      	ldr	r3, [pc, #264]	@ (8005774 <pvPortMalloc+0x188>)
 800566c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800566e:	4b41      	ldr	r3, [pc, #260]	@ (8005774 <pvPortMalloc+0x188>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005674:	e004      	b.n	8005680 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005678:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800567a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	687a      	ldr	r2, [r7, #4]
 8005686:	429a      	cmp	r2, r3
 8005688:	d903      	bls.n	8005692 <pvPortMalloc+0xa6>
 800568a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d1f1      	bne.n	8005676 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005692:	4b35      	ldr	r3, [pc, #212]	@ (8005768 <pvPortMalloc+0x17c>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005698:	429a      	cmp	r2, r3
 800569a:	d04c      	beq.n	8005736 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800569c:	6a3b      	ldr	r3, [r7, #32]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	2208      	movs	r2, #8
 80056a2:	4413      	add	r3, r2
 80056a4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80056a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056a8:	681a      	ldr	r2, [r3, #0]
 80056aa:	6a3b      	ldr	r3, [r7, #32]
 80056ac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80056ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056b0:	685a      	ldr	r2, [r3, #4]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	1ad2      	subs	r2, r2, r3
 80056b6:	2308      	movs	r3, #8
 80056b8:	005b      	lsls	r3, r3, #1
 80056ba:	429a      	cmp	r2, r3
 80056bc:	d920      	bls.n	8005700 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80056be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	4413      	add	r3, r2
 80056c4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80056c6:	69bb      	ldr	r3, [r7, #24]
 80056c8:	f003 0307 	and.w	r3, r3, #7
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d00b      	beq.n	80056e8 <pvPortMalloc+0xfc>
	__asm volatile
 80056d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056d4:	f383 8811 	msr	BASEPRI, r3
 80056d8:	f3bf 8f6f 	isb	sy
 80056dc:	f3bf 8f4f 	dsb	sy
 80056e0:	613b      	str	r3, [r7, #16]
}
 80056e2:	bf00      	nop
 80056e4:	bf00      	nop
 80056e6:	e7fd      	b.n	80056e4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80056e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056ea:	685a      	ldr	r2, [r3, #4]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	1ad2      	subs	r2, r2, r3
 80056f0:	69bb      	ldr	r3, [r7, #24]
 80056f2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80056f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056f6:	687a      	ldr	r2, [r7, #4]
 80056f8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80056fa:	69b8      	ldr	r0, [r7, #24]
 80056fc:	f000 f8fc 	bl	80058f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005700:	4b1b      	ldr	r3, [pc, #108]	@ (8005770 <pvPortMalloc+0x184>)
 8005702:	681a      	ldr	r2, [r3, #0]
 8005704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	1ad3      	subs	r3, r2, r3
 800570a:	4a19      	ldr	r2, [pc, #100]	@ (8005770 <pvPortMalloc+0x184>)
 800570c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800570e:	4b18      	ldr	r3, [pc, #96]	@ (8005770 <pvPortMalloc+0x184>)
 8005710:	681a      	ldr	r2, [r3, #0]
 8005712:	4b19      	ldr	r3, [pc, #100]	@ (8005778 <pvPortMalloc+0x18c>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	429a      	cmp	r2, r3
 8005718:	d203      	bcs.n	8005722 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800571a:	4b15      	ldr	r3, [pc, #84]	@ (8005770 <pvPortMalloc+0x184>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a16      	ldr	r2, [pc, #88]	@ (8005778 <pvPortMalloc+0x18c>)
 8005720:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005724:	685a      	ldr	r2, [r3, #4]
 8005726:	4b11      	ldr	r3, [pc, #68]	@ (800576c <pvPortMalloc+0x180>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	431a      	orrs	r2, r3
 800572c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800572e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005732:	2200      	movs	r2, #0
 8005734:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005736:	f7ff f923 	bl	8004980 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800573a:	69fb      	ldr	r3, [r7, #28]
 800573c:	f003 0307 	and.w	r3, r3, #7
 8005740:	2b00      	cmp	r3, #0
 8005742:	d00b      	beq.n	800575c <pvPortMalloc+0x170>
	__asm volatile
 8005744:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005748:	f383 8811 	msr	BASEPRI, r3
 800574c:	f3bf 8f6f 	isb	sy
 8005750:	f3bf 8f4f 	dsb	sy
 8005754:	60fb      	str	r3, [r7, #12]
}
 8005756:	bf00      	nop
 8005758:	bf00      	nop
 800575a:	e7fd      	b.n	8005758 <pvPortMalloc+0x16c>
	return pvReturn;
 800575c:	69fb      	ldr	r3, [r7, #28]
}
 800575e:	4618      	mov	r0, r3
 8005760:	3728      	adds	r7, #40	@ 0x28
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}
 8005766:	bf00      	nop
 8005768:	20001124 	.word	0x20001124
 800576c:	20001130 	.word	0x20001130
 8005770:	20001128 	.word	0x20001128
 8005774:	2000111c 	.word	0x2000111c
 8005778:	2000112c 	.word	0x2000112c

0800577c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b086      	sub	sp, #24
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d04a      	beq.n	8005824 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800578e:	2308      	movs	r3, #8
 8005790:	425b      	negs	r3, r3
 8005792:	697a      	ldr	r2, [r7, #20]
 8005794:	4413      	add	r3, r2
 8005796:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	685a      	ldr	r2, [r3, #4]
 80057a0:	4b22      	ldr	r3, [pc, #136]	@ (800582c <vPortFree+0xb0>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4013      	ands	r3, r2
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d10b      	bne.n	80057c2 <vPortFree+0x46>
	__asm volatile
 80057aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057ae:	f383 8811 	msr	BASEPRI, r3
 80057b2:	f3bf 8f6f 	isb	sy
 80057b6:	f3bf 8f4f 	dsb	sy
 80057ba:	60fb      	str	r3, [r7, #12]
}
 80057bc:	bf00      	nop
 80057be:	bf00      	nop
 80057c0:	e7fd      	b.n	80057be <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d00b      	beq.n	80057e2 <vPortFree+0x66>
	__asm volatile
 80057ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057ce:	f383 8811 	msr	BASEPRI, r3
 80057d2:	f3bf 8f6f 	isb	sy
 80057d6:	f3bf 8f4f 	dsb	sy
 80057da:	60bb      	str	r3, [r7, #8]
}
 80057dc:	bf00      	nop
 80057de:	bf00      	nop
 80057e0:	e7fd      	b.n	80057de <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	685a      	ldr	r2, [r3, #4]
 80057e6:	4b11      	ldr	r3, [pc, #68]	@ (800582c <vPortFree+0xb0>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4013      	ands	r3, r2
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d019      	beq.n	8005824 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d115      	bne.n	8005824 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	685a      	ldr	r2, [r3, #4]
 80057fc:	4b0b      	ldr	r3, [pc, #44]	@ (800582c <vPortFree+0xb0>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	43db      	mvns	r3, r3
 8005802:	401a      	ands	r2, r3
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005808:	f7ff f8ac 	bl	8004964 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	685a      	ldr	r2, [r3, #4]
 8005810:	4b07      	ldr	r3, [pc, #28]	@ (8005830 <vPortFree+0xb4>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4413      	add	r3, r2
 8005816:	4a06      	ldr	r2, [pc, #24]	@ (8005830 <vPortFree+0xb4>)
 8005818:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800581a:	6938      	ldr	r0, [r7, #16]
 800581c:	f000 f86c 	bl	80058f8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005820:	f7ff f8ae 	bl	8004980 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005824:	bf00      	nop
 8005826:	3718      	adds	r7, #24
 8005828:	46bd      	mov	sp, r7
 800582a:	bd80      	pop	{r7, pc}
 800582c:	20001130 	.word	0x20001130
 8005830:	20001128 	.word	0x20001128

08005834 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005834:	b480      	push	{r7}
 8005836:	b085      	sub	sp, #20
 8005838:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800583a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800583e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005840:	4b27      	ldr	r3, [pc, #156]	@ (80058e0 <prvHeapInit+0xac>)
 8005842:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	f003 0307 	and.w	r3, r3, #7
 800584a:	2b00      	cmp	r3, #0
 800584c:	d00c      	beq.n	8005868 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	3307      	adds	r3, #7
 8005852:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	f023 0307 	bic.w	r3, r3, #7
 800585a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800585c:	68ba      	ldr	r2, [r7, #8]
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	1ad3      	subs	r3, r2, r3
 8005862:	4a1f      	ldr	r2, [pc, #124]	@ (80058e0 <prvHeapInit+0xac>)
 8005864:	4413      	add	r3, r2
 8005866:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800586c:	4a1d      	ldr	r2, [pc, #116]	@ (80058e4 <prvHeapInit+0xb0>)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005872:	4b1c      	ldr	r3, [pc, #112]	@ (80058e4 <prvHeapInit+0xb0>)
 8005874:	2200      	movs	r2, #0
 8005876:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	68ba      	ldr	r2, [r7, #8]
 800587c:	4413      	add	r3, r2
 800587e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005880:	2208      	movs	r2, #8
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	1a9b      	subs	r3, r3, r2
 8005886:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	f023 0307 	bic.w	r3, r3, #7
 800588e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	4a15      	ldr	r2, [pc, #84]	@ (80058e8 <prvHeapInit+0xb4>)
 8005894:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005896:	4b14      	ldr	r3, [pc, #80]	@ (80058e8 <prvHeapInit+0xb4>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	2200      	movs	r2, #0
 800589c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800589e:	4b12      	ldr	r3, [pc, #72]	@ (80058e8 <prvHeapInit+0xb4>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	2200      	movs	r2, #0
 80058a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	68fa      	ldr	r2, [r7, #12]
 80058ae:	1ad2      	subs	r2, r2, r3
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80058b4:	4b0c      	ldr	r3, [pc, #48]	@ (80058e8 <prvHeapInit+0xb4>)
 80058b6:	681a      	ldr	r2, [r3, #0]
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	4a0a      	ldr	r2, [pc, #40]	@ (80058ec <prvHeapInit+0xb8>)
 80058c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	685b      	ldr	r3, [r3, #4]
 80058c8:	4a09      	ldr	r2, [pc, #36]	@ (80058f0 <prvHeapInit+0xbc>)
 80058ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80058cc:	4b09      	ldr	r3, [pc, #36]	@ (80058f4 <prvHeapInit+0xc0>)
 80058ce:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80058d2:	601a      	str	r2, [r3, #0]
}
 80058d4:	bf00      	nop
 80058d6:	3714      	adds	r7, #20
 80058d8:	46bd      	mov	sp, r7
 80058da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058de:	4770      	bx	lr
 80058e0:	2000051c 	.word	0x2000051c
 80058e4:	2000111c 	.word	0x2000111c
 80058e8:	20001124 	.word	0x20001124
 80058ec:	2000112c 	.word	0x2000112c
 80058f0:	20001128 	.word	0x20001128
 80058f4:	20001130 	.word	0x20001130

080058f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80058f8:	b480      	push	{r7}
 80058fa:	b085      	sub	sp, #20
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005900:	4b28      	ldr	r3, [pc, #160]	@ (80059a4 <prvInsertBlockIntoFreeList+0xac>)
 8005902:	60fb      	str	r3, [r7, #12]
 8005904:	e002      	b.n	800590c <prvInsertBlockIntoFreeList+0x14>
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	60fb      	str	r3, [r7, #12]
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	687a      	ldr	r2, [r7, #4]
 8005912:	429a      	cmp	r2, r3
 8005914:	d8f7      	bhi.n	8005906 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	685b      	ldr	r3, [r3, #4]
 800591e:	68ba      	ldr	r2, [r7, #8]
 8005920:	4413      	add	r3, r2
 8005922:	687a      	ldr	r2, [r7, #4]
 8005924:	429a      	cmp	r2, r3
 8005926:	d108      	bne.n	800593a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	685a      	ldr	r2, [r3, #4]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	441a      	add	r2, r3
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	68ba      	ldr	r2, [r7, #8]
 8005944:	441a      	add	r2, r3
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	429a      	cmp	r2, r3
 800594c:	d118      	bne.n	8005980 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681a      	ldr	r2, [r3, #0]
 8005952:	4b15      	ldr	r3, [pc, #84]	@ (80059a8 <prvInsertBlockIntoFreeList+0xb0>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	429a      	cmp	r2, r3
 8005958:	d00d      	beq.n	8005976 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	685a      	ldr	r2, [r3, #4]
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	441a      	add	r2, r3
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	681a      	ldr	r2, [r3, #0]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	601a      	str	r2, [r3, #0]
 8005974:	e008      	b.n	8005988 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005976:	4b0c      	ldr	r3, [pc, #48]	@ (80059a8 <prvInsertBlockIntoFreeList+0xb0>)
 8005978:	681a      	ldr	r2, [r3, #0]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	601a      	str	r2, [r3, #0]
 800597e:	e003      	b.n	8005988 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681a      	ldr	r2, [r3, #0]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005988:	68fa      	ldr	r2, [r7, #12]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	429a      	cmp	r2, r3
 800598e:	d002      	beq.n	8005996 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	687a      	ldr	r2, [r7, #4]
 8005994:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005996:	bf00      	nop
 8005998:	3714      	adds	r7, #20
 800599a:	46bd      	mov	sp, r7
 800599c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a0:	4770      	bx	lr
 80059a2:	bf00      	nop
 80059a4:	2000111c 	.word	0x2000111c
 80059a8:	20001124 	.word	0x20001124

080059ac <memset>:
 80059ac:	4402      	add	r2, r0
 80059ae:	4603      	mov	r3, r0
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d100      	bne.n	80059b6 <memset+0xa>
 80059b4:	4770      	bx	lr
 80059b6:	f803 1b01 	strb.w	r1, [r3], #1
 80059ba:	e7f9      	b.n	80059b0 <memset+0x4>

080059bc <__libc_init_array>:
 80059bc:	b570      	push	{r4, r5, r6, lr}
 80059be:	4d0d      	ldr	r5, [pc, #52]	@ (80059f4 <__libc_init_array+0x38>)
 80059c0:	4c0d      	ldr	r4, [pc, #52]	@ (80059f8 <__libc_init_array+0x3c>)
 80059c2:	1b64      	subs	r4, r4, r5
 80059c4:	10a4      	asrs	r4, r4, #2
 80059c6:	2600      	movs	r6, #0
 80059c8:	42a6      	cmp	r6, r4
 80059ca:	d109      	bne.n	80059e0 <__libc_init_array+0x24>
 80059cc:	4d0b      	ldr	r5, [pc, #44]	@ (80059fc <__libc_init_array+0x40>)
 80059ce:	4c0c      	ldr	r4, [pc, #48]	@ (8005a00 <__libc_init_array+0x44>)
 80059d0:	f000 f826 	bl	8005a20 <_init>
 80059d4:	1b64      	subs	r4, r4, r5
 80059d6:	10a4      	asrs	r4, r4, #2
 80059d8:	2600      	movs	r6, #0
 80059da:	42a6      	cmp	r6, r4
 80059dc:	d105      	bne.n	80059ea <__libc_init_array+0x2e>
 80059de:	bd70      	pop	{r4, r5, r6, pc}
 80059e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80059e4:	4798      	blx	r3
 80059e6:	3601      	adds	r6, #1
 80059e8:	e7ee      	b.n	80059c8 <__libc_init_array+0xc>
 80059ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80059ee:	4798      	blx	r3
 80059f0:	3601      	adds	r6, #1
 80059f2:	e7f2      	b.n	80059da <__libc_init_array+0x1e>
 80059f4:	08005aec 	.word	0x08005aec
 80059f8:	08005aec 	.word	0x08005aec
 80059fc:	08005aec 	.word	0x08005aec
 8005a00:	08005af0 	.word	0x08005af0

08005a04 <memcpy>:
 8005a04:	440a      	add	r2, r1
 8005a06:	4291      	cmp	r1, r2
 8005a08:	f100 33ff 	add.w	r3, r0, #4294967295
 8005a0c:	d100      	bne.n	8005a10 <memcpy+0xc>
 8005a0e:	4770      	bx	lr
 8005a10:	b510      	push	{r4, lr}
 8005a12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a16:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a1a:	4291      	cmp	r1, r2
 8005a1c:	d1f9      	bne.n	8005a12 <memcpy+0xe>
 8005a1e:	bd10      	pop	{r4, pc}

08005a20 <_init>:
 8005a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a22:	bf00      	nop
 8005a24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a26:	bc08      	pop	{r3}
 8005a28:	469e      	mov	lr, r3
 8005a2a:	4770      	bx	lr

08005a2c <_fini>:
 8005a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a2e:	bf00      	nop
 8005a30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a32:	bc08      	pop	{r3}
 8005a34:	469e      	mov	lr, r3
 8005a36:	4770      	bx	lr
