
VCU_2025.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000802c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  080081bc  080081bc  000091bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080082c0  080082c0  0000a064  2**0
                  CONTENTS
  4 .ARM          00000008  080082c0  080082c0  000092c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080082c8  080082c8  0000a064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080082c8  080082c8  000092c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080082cc  080082cc  000092cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  080082d0  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002f78  20000064  08008334  0000a064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002fdc  08008334  0000afdc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a064  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a15f  00000000  00000000  0000a094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003cf2  00000000  00000000  000241f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001608  00000000  00000000  00027ee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001117  00000000  00000000  000294f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001fe38  00000000  00000000  0002a607  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c890  00000000  00000000  0004a43f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b872b  00000000  00000000  00066ccf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011f3fa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000061c4  00000000  00000000  0011f440  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  00125604  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000064 	.word	0x20000064
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080081a4 	.word	0x080081a4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000068 	.word	0x20000068
 80001cc:	080081a4 	.word	0x080081a4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_d2f>:
 80005f8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80005fc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000600:	bf24      	itt	cs
 8000602:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000606:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800060a:	d90d      	bls.n	8000628 <__aeabi_d2f+0x30>
 800060c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000610:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000614:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000618:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 800061c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000620:	bf08      	it	eq
 8000622:	f020 0001 	biceq.w	r0, r0, #1
 8000626:	4770      	bx	lr
 8000628:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 800062c:	d121      	bne.n	8000672 <__aeabi_d2f+0x7a>
 800062e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000632:	bfbc      	itt	lt
 8000634:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000638:	4770      	bxlt	lr
 800063a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800063e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000642:	f1c2 0218 	rsb	r2, r2, #24
 8000646:	f1c2 0c20 	rsb	ip, r2, #32
 800064a:	fa10 f30c 	lsls.w	r3, r0, ip
 800064e:	fa20 f002 	lsr.w	r0, r0, r2
 8000652:	bf18      	it	ne
 8000654:	f040 0001 	orrne.w	r0, r0, #1
 8000658:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800065c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000660:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000664:	ea40 000c 	orr.w	r0, r0, ip
 8000668:	fa23 f302 	lsr.w	r3, r3, r2
 800066c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000670:	e7cc      	b.n	800060c <__aeabi_d2f+0x14>
 8000672:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000676:	d107      	bne.n	8000688 <__aeabi_d2f+0x90>
 8000678:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800067c:	bf1e      	ittt	ne
 800067e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000682:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000686:	4770      	bxne	lr
 8000688:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 800068c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000690:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000694:	4770      	bx	lr
 8000696:	bf00      	nop

08000698 <makeCANFrame>:
#define HEATSINK_ID_MC2      0x60B
#define BMS_TEMP_ID          0x0
#define BMS_VOLTAGE_ID       0x0
#define BMS_CURRENT_ID       0x0

struct CANFrame makeCANFrame(CAN_RxHeaderTypeDef header, uint8_t data[8]) {
 8000698:	b084      	sub	sp, #16
 800069a:	b490      	push	{r4, r7}
 800069c:	b086      	sub	sp, #24
 800069e:	af00      	add	r7, sp, #0
 80006a0:	6078      	str	r0, [r7, #4]
 80006a2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80006a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	struct CANFrame temp;

	temp.ID = header.StdId;
 80006aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006ac:	60fb      	str	r3, [r7, #12]
	temp.rxData[0] = data[0];
 80006ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	743b      	strb	r3, [r7, #16]
	temp.rxData[1] = data[1];
 80006b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80006b6:	785b      	ldrb	r3, [r3, #1]
 80006b8:	747b      	strb	r3, [r7, #17]
	temp.rxData[2] = data[2];
 80006ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80006bc:	789b      	ldrb	r3, [r3, #2]
 80006be:	74bb      	strb	r3, [r7, #18]
	temp.rxData[3] = data[3];
 80006c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80006c2:	78db      	ldrb	r3, [r3, #3]
 80006c4:	74fb      	strb	r3, [r7, #19]
	temp.rxData[4] = data[4];
 80006c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80006c8:	791b      	ldrb	r3, [r3, #4]
 80006ca:	753b      	strb	r3, [r7, #20]
	temp.rxData[5] = data[5];
 80006cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80006ce:	795b      	ldrb	r3, [r3, #5]
 80006d0:	757b      	strb	r3, [r7, #21]
	temp.rxData[6] = data[6];
 80006d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80006d4:	799b      	ldrb	r3, [r3, #6]
 80006d6:	75bb      	strb	r3, [r7, #22]
	temp.rxData[7] = data[7];
 80006d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80006da:	79db      	ldrb	r3, [r3, #7]
 80006dc:	75fb      	strb	r3, [r7, #23]

	return temp;
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	461c      	mov	r4, r3
 80006e2:	f107 030c 	add.w	r3, r7, #12
 80006e6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80006ea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80006ee:	6878      	ldr	r0, [r7, #4]
 80006f0:	3718      	adds	r7, #24
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bc90      	pop	{r4, r7}
 80006f6:	b004      	add	sp, #16
 80006f8:	4770      	bx	lr
	...

080006fc <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 80006fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006fe:	b08f      	sub	sp, #60	@ 0x3c
 8000700:	af06      	add	r7, sp, #24
 8000702:	61f8      	str	r0, [r7, #28]

	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK) {
 8000704:	4b18      	ldr	r3, [pc, #96]	@ (8000768 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 8000706:	4a19      	ldr	r2, [pc, #100]	@ (800076c <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8000708:	2100      	movs	r1, #0
 800070a:	69f8      	ldr	r0, [r7, #28]
 800070c:	f002 f805 	bl	800271a <HAL_CAN_GetRxMessage>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
		Error_Handler();
 8000716:	f000 fc87 	bl	8001028 <Error_Handler>
	}
//	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
	temp = makeCANFrame(RxHeader, RxData);
 800071a:	4b15      	ldr	r3, [pc, #84]	@ (8000770 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 800071c:	607b      	str	r3, [r7, #4]
 800071e:	f107 0608 	add.w	r6, r7, #8
 8000722:	4c12      	ldr	r4, [pc, #72]	@ (800076c <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8000724:	4b10      	ldr	r3, [pc, #64]	@ (8000768 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 8000726:	9304      	str	r3, [sp, #16]
 8000728:	466d      	mov	r5, sp
 800072a:	f104 030c 	add.w	r3, r4, #12
 800072e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000730:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000734:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8000738:	4630      	mov	r0, r6
 800073a:	f7ff ffad 	bl	8000698 <makeCANFrame>
 800073e:	687c      	ldr	r4, [r7, #4]
 8000740:	f107 0308 	add.w	r3, r7, #8
 8000744:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000748:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	xQueueSendToBackFromISR(CANq, &temp, 1);
 800074c:	4b09      	ldr	r3, [pc, #36]	@ (8000774 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 800074e:	6818      	ldr	r0, [r3, #0]
 8000750:	2300      	movs	r3, #0
 8000752:	2201      	movs	r2, #1
 8000754:	4906      	ldr	r1, [pc, #24]	@ (8000770 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 8000756:	f005 fc4b 	bl	8005ff0 <xQueueGenericSendFromISR>

	datacheck = 1; // signal to your RTOS task
 800075a:	4b07      	ldr	r3, [pc, #28]	@ (8000778 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 800075c:	2201      	movs	r2, #1
 800075e:	701a      	strb	r2, [r3, #0]
}
 8000760:	bf00      	nop
 8000762:	3724      	adds	r7, #36	@ 0x24
 8000764:	46bd      	mov	sp, r7
 8000766:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000768:	2000009c 	.word	0x2000009c
 800076c:	20000080 	.word	0x20000080
 8000770:	200000a4 	.word	0x200000a4
 8000774:	200004ac 	.word	0x200004ac
 8000778:	200004b0 	.word	0x200004b0

0800077c <StartCanRxTask>:

void StartCanRxTask(void const *argument) {
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
//	int count;
//	CANq = xQueueCreate(100, sizeof(struct CANFrame)); // I didn't realize this was here ca..
	vQueueAddToRegistry(CANq, "CAN queue");
 8000784:	4b26      	ldr	r3, [pc, #152]	@ (8000820 <StartCanRxTask+0xa4>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	4926      	ldr	r1, [pc, #152]	@ (8000824 <StartCanRxTask+0xa8>)
 800078a:	4618      	mov	r0, r3
 800078c:	f005 fdde 	bl	800634c <vQueueAddToRegistry>

	while (1) {

		if (xQueueReceiveFromISR(CANq, &receivedFrame,
 8000790:	4b23      	ldr	r3, [pc, #140]	@ (8000820 <StartCanRxTask+0xa4>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	2264      	movs	r2, #100	@ 0x64
 8000796:	4924      	ldr	r1, [pc, #144]	@ (8000828 <StartCanRxTask+0xac>)
 8000798:	4618      	mov	r0, r3
 800079a:	f005 fcc4 	bl	8006126 <xQueueReceiveFromISR>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b01      	cmp	r3, #1
 80007a2:	d1f5      	bne.n	8000790 <StartCanRxTask+0x14>
				pdMS_TO_TICKS(100)) == pdPASS) {
			switch (receivedFrame.ID) {
 80007a4:	4b20      	ldr	r3, [pc, #128]	@ (8000828 <StartCanRxTask+0xac>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	f240 5203 	movw	r2, #1283	@ 0x503
 80007ac:	4293      	cmp	r3, r2
 80007ae:	d004      	beq.n	80007ba <StartCanRxTask+0x3e>
 80007b0:	f240 6203 	movw	r2, #1539	@ 0x603
 80007b4:	4293      	cmp	r3, r2
 80007b6:	d00f      	beq.n	80007d8 <StartCanRxTask+0x5c>
 80007b8:	e01d      	b.n	80007f6 <StartCanRxTask+0x7a>
//
//					// Motor Controllers
//					// Vehicle velocity
			case VELOCITY_ID_MC1:
				//type: float
				memcpy(TelemRPM_1.byte, RxData, MCmsgSize);
 80007ba:	4b1c      	ldr	r3, [pc, #112]	@ (800082c <StartCanRxTask+0xb0>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	461a      	mov	r2, r3
 80007c0:	491b      	ldr	r1, [pc, #108]	@ (8000830 <StartCanRxTask+0xb4>)
 80007c2:	481c      	ldr	r0, [pc, #112]	@ (8000834 <StartCanRxTask+0xb8>)
 80007c4:	f007 f8a2 	bl	800790c <memcpy>
				memcpy(TelemVelocity_1.byte, RxData + 5, MCmsgSize); // m/s, convert to mph
 80007c8:	491b      	ldr	r1, [pc, #108]	@ (8000838 <StartCanRxTask+0xbc>)
 80007ca:	4b18      	ldr	r3, [pc, #96]	@ (800082c <StartCanRxTask+0xb0>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	461a      	mov	r2, r3
 80007d0:	481a      	ldr	r0, [pc, #104]	@ (800083c <StartCanRxTask+0xc0>)
 80007d2:	f007 f89b 	bl	800790c <memcpy>
				break;
 80007d6:	e00e      	b.n	80007f6 <StartCanRxTask+0x7a>

			case VELOCITY_ID_MC2:
				//type: float
				memcpy(TelemRPM_2.byte, RxData, MCmsgSize);
 80007d8:	4b14      	ldr	r3, [pc, #80]	@ (800082c <StartCanRxTask+0xb0>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	461a      	mov	r2, r3
 80007de:	4914      	ldr	r1, [pc, #80]	@ (8000830 <StartCanRxTask+0xb4>)
 80007e0:	4817      	ldr	r0, [pc, #92]	@ (8000840 <StartCanRxTask+0xc4>)
 80007e2:	f007 f893 	bl	800790c <memcpy>
				memcpy(TelemVelocity_2.byte, RxData + 5, MCmsgSize); // m/s, convert to mph
 80007e6:	4914      	ldr	r1, [pc, #80]	@ (8000838 <StartCanRxTask+0xbc>)
 80007e8:	4b10      	ldr	r3, [pc, #64]	@ (800082c <StartCanRxTask+0xb0>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	461a      	mov	r2, r3
 80007ee:	4815      	ldr	r0, [pc, #84]	@ (8000844 <StartCanRxTask+0xc8>)
 80007f0:	f007 f88c 	bl	800790c <memcpy>
				break;
 80007f4:	bf00      	nop
//					//type: float
//					memcpy(BMS_CurrentDraw.byte, RxData, CurrentDrawSize);
//					break;
			}
//			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
			AvgVelocity.f = (TelemVelocity_1.f + TelemVelocity_2.f) / 2.0f;
 80007f6:	4b11      	ldr	r3, [pc, #68]	@ (800083c <StartCanRxTask+0xc0>)
 80007f8:	ed93 7a00 	vldr	s14, [r3]
 80007fc:	4b11      	ldr	r3, [pc, #68]	@ (8000844 <StartCanRxTask+0xc8>)
 80007fe:	edd3 7a00 	vldr	s15, [r3]
 8000802:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000806:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800080a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800080e:	4b0e      	ldr	r3, [pc, #56]	@ (8000848 <StartCanRxTask+0xcc>)
 8000810:	edc3 7a00 	vstr	s15, [r3]
			osDelay(1000);
 8000814:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000818:	f005 fa5a 	bl	8005cd0 <osDelay>
		if (xQueueReceiveFromISR(CANq, &receivedFrame,
 800081c:	e7b8      	b.n	8000790 <StartCanRxTask+0x14>
 800081e:	bf00      	nop
 8000820:	200004ac 	.word	0x200004ac
 8000824:	080081bc 	.word	0x080081bc
 8000828:	200000b0 	.word	0x200000b0
 800082c:	20000000 	.word	0x20000000
 8000830:	2000009c 	.word	0x2000009c
 8000834:	200000d4 	.word	0x200000d4
 8000838:	200000a1 	.word	0x200000a1
 800083c:	200000bc 	.word	0x200000bc
 8000840:	200000dc 	.word	0x200000dc
 8000844:	200000c4 	.word	0x200000c4
 8000848:	200000cc 	.word	0x200000cc
 800084c:	00000000 	.word	0x00000000

08000850 <StartCanTxTask>:
//	int i;
//	float f;
//	uint8_t byte[8];
//};

void StartCanTxTask(void const *argument) {
 8000850:	b580      	push	{r7, lr}
 8000852:	b09c      	sub	sp, #112	@ 0x70
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
	CAN_TxHeaderTypeDef txHeader;
	uint8_t txData[8];
	uint32_t txMailbox;
	union Data Current; //how best to control motors? Current, Velocity, mix of both?
	union Data Velocity;
	float sum = 0;
 8000858:	f04f 0300 	mov.w	r3, #0
 800085c:	66fb      	str	r3, [r7, #108]	@ 0x6c
	float avg = 0;
 800085e:	f04f 0300 	mov.w	r3, #0
 8000862:	667b      	str	r3, [r7, #100]	@ 0x64
	char msg[32]; // plenty of space for float + newline
	// Set up header
	txHeader.IDE = CAN_ID_STD;
 8000864:	2300      	movs	r3, #0
 8000866:	653b      	str	r3, [r7, #80]	@ 0x50
	txHeader.StdId = 0x401;
 8000868:	f240 4301 	movw	r3, #1025	@ 0x401
 800086c:	64bb      	str	r3, [r7, #72]	@ 0x48
	txHeader.RTR = CAN_RTR_DATA;
 800086e:	2300      	movs	r3, #0
 8000870:	657b      	str	r3, [r7, #84]	@ 0x54
	txHeader.DLC = 8;
 8000872:	2308      	movs	r3, #8
 8000874:	65bb      	str	r3, [r7, #88]	@ 0x58
	Velocity.f = 500.0f;
 8000876:	4b66      	ldr	r3, [pc, #408]	@ (8000a10 <StartCanTxTask+0x1c0>)
 8000878:	62fb      	str	r3, [r7, #44]	@ 0x2c

	while (1) {
		sum = 0;
 800087a:	f04f 0300 	mov.w	r3, #0
 800087e:	66fb      	str	r3, [r7, #108]	@ 0x6c

		for (int i = 0; i < ADC_BUF_LEN; i++) {
 8000880:	2300      	movs	r3, #0
 8000882:	66bb      	str	r3, [r7, #104]	@ 0x68
 8000884:	e010      	b.n	80008a8 <StartCanTxTask+0x58>
			sum += adc_buf[i];
 8000886:	4a63      	ldr	r2, [pc, #396]	@ (8000a14 <StartCanTxTask+0x1c4>)
 8000888:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800088a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800088e:	ee07 3a90 	vmov	s15, r3
 8000892:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000896:	ed97 7a1b 	vldr	s14, [r7, #108]	@ 0x6c
 800089a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800089e:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
		for (int i = 0; i < ADC_BUF_LEN; i++) {
 80008a2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80008a4:	3301      	adds	r3, #1
 80008a6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80008a8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80008aa:	2b0f      	cmp	r3, #15
 80008ac:	ddeb      	ble.n	8000886 <StartCanTxTask+0x36>
		}


		avg = fabs(sum / ADC_BUF_LEN);
 80008ae:	ed97 7a1b 	vldr	s14, [r7, #108]	@ 0x6c
 80008b2:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 80008b6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80008ba:	eef0 7ae7 	vabs.f32	s15, s15
 80008be:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
//		HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);

//		Current.f = avg / 25600.0f;

		// 2. Convert to integer representation (0-100)
		uint8_t display_value = (uint8_t) (Current.f * 100.0f);
 80008c2:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80008c6:	ed9f 7a54 	vldr	s14, [pc, #336]	@ 8000a18 <StartCanTxTask+0x1c8>
 80008ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80008ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80008d2:	edc7 7a00 	vstr	s15, [r7]
 80008d6:	783b      	ldrb	r3, [r7, #0]
 80008d8:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
//
//		// 3. Print with implied decimal
		snprintf(msg, sizeof(msg), "Value: 0.%02d\r\n", display_value); // Prints 0.00-0.10
 80008dc:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 80008e0:	f107 000c 	add.w	r0, r7, #12
 80008e4:	4a4d      	ldr	r2, [pc, #308]	@ (8000a1c <StartCanTxTask+0x1cc>)
 80008e6:	2120      	movs	r1, #32
 80008e8:	f006 ffa8 	bl	800783c <sniprintf>

		Current.f = fabs(0.15 - avg / 25600.0f);	//low for testing purposes, maps to max 0.15
 80008ec:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 80008f0:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 8000a20 <StartCanTxTask+0x1d0>
 80008f4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80008f8:	ee16 0a90 	vmov	r0, s13
 80008fc:	f7ff fe24 	bl	8000548 <__aeabi_f2d>
 8000900:	4602      	mov	r2, r0
 8000902:	460b      	mov	r3, r1
 8000904:	a140      	add	r1, pc, #256	@ (adr r1, 8000a08 <StartCanTxTask+0x1b8>)
 8000906:	e9d1 0100 	ldrd	r0, r1, [r1]
 800090a:	f7ff fcbd 	bl	8000288 <__aeabi_dsub>
 800090e:	4602      	mov	r2, r0
 8000910:	460b      	mov	r3, r1
 8000912:	4610      	mov	r0, r2
 8000914:	4619      	mov	r1, r3
 8000916:	f7ff fe6f 	bl	80005f8 <__aeabi_d2f>
 800091a:	ee07 0a90 	vmov	s15, r0
 800091e:	eef0 7ae7 	vabs.f32	s15, s15
 8000922:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
		HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8000926:	f107 030c 	add.w	r3, r7, #12
 800092a:	4618      	mov	r0, r3
 800092c:	f7ff fc50 	bl	80001d0 <strlen>
 8000930:	4603      	mov	r3, r0
 8000932:	b29a      	uxth	r2, r3
 8000934:	f107 010c 	add.w	r1, r7, #12
 8000938:	f04f 33ff 	mov.w	r3, #4294967295
 800093c:	4839      	ldr	r0, [pc, #228]	@ (8000a24 <StartCanTxTask+0x1d4>)
 800093e:	f004 fd81 	bl	8005444 <HAL_UART_Transmit>

		// gear selection
		// have to write in conditions for braking later
		//drive
		if (!HAL_GPIO_ReadPin(GPIOA, Drive_Pin) && AvgVelocity.f >= 0) {
 8000942:	2180      	movs	r1, #128	@ 0x80
 8000944:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000948:	f002 fe4a 	bl	80035e0 <HAL_GPIO_ReadPin>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d10a      	bne.n	8000968 <StartCanTxTask+0x118>
 8000952:	4b35      	ldr	r3, [pc, #212]	@ (8000a28 <StartCanTxTask+0x1d8>)
 8000954:	edd3 7a00 	vldr	s15, [r3]
 8000958:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800095c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000960:	db02      	blt.n	8000968 <StartCanTxTask+0x118>
			Velocity.f = 500.0f;
 8000962:	4b2b      	ldr	r3, [pc, #172]	@ (8000a10 <StartCanTxTask+0x1c0>)
 8000964:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000966:	e018      	b.n	800099a <StartCanTxTask+0x14a>
		//reverse
		} else if (!HAL_GPIO_ReadPin(GPIOA, Reverse_Pin) && AvgVelocity.f <= 0){
 8000968:	2120      	movs	r1, #32
 800096a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800096e:	f002 fe37 	bl	80035e0 <HAL_GPIO_ReadPin>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d10a      	bne.n	800098e <StartCanTxTask+0x13e>
 8000978:	4b2b      	ldr	r3, [pc, #172]	@ (8000a28 <StartCanTxTask+0x1d8>)
 800097a:	edd3 7a00 	vldr	s15, [r3]
 800097e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000982:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000986:	d802      	bhi.n	800098e <StartCanTxTask+0x13e>
			Velocity.f = -500.0f;
 8000988:	4b28      	ldr	r3, [pc, #160]	@ (8000a2c <StartCanTxTask+0x1dc>)
 800098a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800098c:	e005      	b.n	800099a <StartCanTxTask+0x14a>
		//neutral
		} else {
			Velocity.f = 0;
 800098e:	f04f 0300 	mov.w	r3, #0
 8000992:	62fb      	str	r3, [r7, #44]	@ 0x2c
			Current.f = 0;
 8000994:	f04f 0300 	mov.w	r3, #0
 8000998:	637b      	str	r3, [r7, #52]	@ 0x34
		}


//		Current.f = 0.00000006*(pow(avg*0.1, 2));
		txData[0] = Velocity.byte[0];
 800099a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800099e:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
		txData[1] = Velocity.byte[1];
 80009a2:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80009a6:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
		txData[2] = Velocity.byte[2];
 80009aa:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80009ae:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
		txData[3] = Velocity.byte[3];
 80009b2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80009b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

		txData[4] = Current.byte[0];
 80009ba:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80009be:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
		txData[5] = Current.byte[1];
 80009c2:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80009c6:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
		txData[6] = Current.byte[2];
 80009ca:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80009ce:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
		txData[7] = Current.byte[3];
 80009d2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80009d6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
//		txData[6] = 0x4C;
//		txData[7] = 0x3D;

		//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);

		if (HAL_CAN_AddTxMessage(&hcan, &txHeader, txData, &txMailbox)
 80009da:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80009de:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80009e2:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 80009e6:	4812      	ldr	r0, [pc, #72]	@ (8000a30 <StartCanTxTask+0x1e0>)
 80009e8:	f001 fdc7 	bl	800257a <HAL_CAN_AddTxMessage>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <StartCanTxTask+0x1a6>
				!= HAL_OK) {
			Error_Handler();
 80009f2:	f000 fb19 	bl	8001028 <Error_Handler>
		}
//		  HAL_UART_Transmit(&huart2, "hello world\n", 20, HAL_MAX_DELAY);

		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 80009f6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009fa:	480e      	ldr	r0, [pc, #56]	@ (8000a34 <StartCanTxTask+0x1e4>)
 80009fc:	f002 fe20 	bl	8003640 <HAL_GPIO_TogglePin>

		osDelay(100); // send every 1 second
 8000a00:	2064      	movs	r0, #100	@ 0x64
 8000a02:	f005 f965 	bl	8005cd0 <osDelay>
	while (1) {
 8000a06:	e738      	b.n	800087a <StartCanTxTask+0x2a>
 8000a08:	33333333 	.word	0x33333333
 8000a0c:	3fc33333 	.word	0x3fc33333
 8000a10:	43fa0000 	.word	0x43fa0000
 8000a14:	20000484 	.word	0x20000484
 8000a18:	42c80000 	.word	0x42c80000
 8000a1c:	080081c8 	.word	0x080081c8
 8000a20:	46c80000 	.word	0x46c80000
 8000a24:	200003f4 	.word	0x200003f4
 8000a28:	200000cc 	.word	0x200000cc
 8000a2c:	c3fa0000 	.word	0xc3fa0000
 8000a30:	200003cc 	.word	0x200003cc
 8000a34:	48000400 	.word	0x48000400

08000a38 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b085      	sub	sp, #20
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	60f8      	str	r0, [r7, #12]
 8000a40:	60b9      	str	r1, [r7, #8]
 8000a42:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	4a07      	ldr	r2, [pc, #28]	@ (8000a64 <vApplicationGetIdleTaskMemory+0x2c>)
 8000a48:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000a4a:	68bb      	ldr	r3, [r7, #8]
 8000a4c:	4a06      	ldr	r2, [pc, #24]	@ (8000a68 <vApplicationGetIdleTaskMemory+0x30>)
 8000a4e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	2280      	movs	r2, #128	@ 0x80
 8000a54:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000a56:	bf00      	nop
 8000a58:	3714      	adds	r7, #20
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	200000e4 	.word	0x200000e4
 8000a68:	20000138 	.word	0x20000138

08000a6c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000a6c:	b5b0      	push	{r4, r5, r7, lr}
 8000a6e:	b096      	sub	sp, #88	@ 0x58
 8000a70:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000a72:	f000 fd21 	bl	80014b8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000a76:	f000 f875 	bl	8000b64 <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
CANq = xQueueCreate(100, sizeof(struct CANFrame));
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	210c      	movs	r1, #12
 8000a7e:	2064      	movs	r0, #100	@ 0x64
 8000a80:	f005 fa58 	bl	8005f34 <xQueueGenericCreate>
 8000a84:	4603      	mov	r3, r0
 8000a86:	4a2d      	ldr	r2, [pc, #180]	@ (8000b3c <main+0xd0>)
 8000a88:	6013      	str	r3, [r2, #0]
	osThreadDef(parked, parked_init, osPriorityNormal, 0, 128);
 8000a8a:	4b2d      	ldr	r3, [pc, #180]	@ (8000b40 <main+0xd4>)
 8000a8c:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8000a90:	461d      	mov	r5, r3
 8000a92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a96:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a9a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	parkedHandle = osThreadCreate(osThread(parked), NULL);
 8000a9e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000aa2:	2100      	movs	r1, #0
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f005 f8c7 	bl	8005c38 <osThreadCreate>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	4a25      	ldr	r2, [pc, #148]	@ (8000b44 <main+0xd8>)
 8000aae:	6013      	str	r3, [r2, #0]

	osThreadDef(canTxTask, StartCanTxTask, osPriorityHigh, 0, 128);
 8000ab0:	4b25      	ldr	r3, [pc, #148]	@ (8000b48 <main+0xdc>)
 8000ab2:	f107 0420 	add.w	r4, r7, #32
 8000ab6:	461d      	mov	r5, r3
 8000ab8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000aba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000abc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ac0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	canTxTaskHandle = osThreadCreate(osThread(canTxTask), NULL);
 8000ac4:	f107 0320 	add.w	r3, r7, #32
 8000ac8:	2100      	movs	r1, #0
 8000aca:	4618      	mov	r0, r3
 8000acc:	f005 f8b4 	bl	8005c38 <osThreadCreate>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	4a1e      	ldr	r2, [pc, #120]	@ (8000b4c <main+0xe0>)
 8000ad4:	6013      	str	r3, [r2, #0]

	osThreadDef(canRxTask, StartCanRxTask, osPriorityNormal, 0, 128);
 8000ad6:	4b1e      	ldr	r3, [pc, #120]	@ (8000b50 <main+0xe4>)
 8000ad8:	1d3c      	adds	r4, r7, #4
 8000ada:	461d      	mov	r5, r3
 8000adc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ade:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ae0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ae4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	canRxTaskHandle = osThreadCreate(osThread(canRxTask), NULL);
 8000ae8:	1d3b      	adds	r3, r7, #4
 8000aea:	2100      	movs	r1, #0
 8000aec:	4618      	mov	r0, r3
 8000aee:	f005 f8a3 	bl	8005c38 <osThreadCreate>
 8000af2:	4603      	mov	r3, r0
 8000af4:	4a17      	ldr	r2, [pc, #92]	@ (8000b54 <main+0xe8>)
 8000af6:	6013      	str	r3, [r2, #0]

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000af8:	f000 f9b8 	bl	8000e6c <MX_GPIO_Init>
	MX_ADC1_Init();
 8000afc:	f000 f88a 	bl	8000c14 <MX_ADC1_Init>
	MX_DMA_Init();
 8000b00:	f000 f970 	bl	8000de4 <MX_DMA_Init>
	MX_USART2_UART_Init();
 8000b04:	f000 f93e 	bl	8000d84 <MX_USART2_UART_Init>
	MX_CAN_Init();
 8000b08:	f000 f8e8 	bl	8000cdc <MX_CAN_Init>

	/* USER CODE BEGIN 2 */
	HAL_CAN_Start(&hcan);
 8000b0c:	4812      	ldr	r0, [pc, #72]	@ (8000b58 <main+0xec>)
 8000b0e:	f001 fcf0 	bl	80024f2 <HAL_CAN_Start>

	if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING)
 8000b12:	2102      	movs	r1, #2
 8000b14:	4810      	ldr	r0, [pc, #64]	@ (8000b58 <main+0xec>)
 8000b16:	f001 ff22 	bl	800295e <HAL_CAN_ActivateNotification>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <main+0xb8>
			!= HAL_OK) {
		Error_Handler();
 8000b20:	f000 fa82 	bl	8001028 <Error_Handler>
	}

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc_buf, ADC_BUF_LEN);
 8000b24:	2210      	movs	r2, #16
 8000b26:	490d      	ldr	r1, [pc, #52]	@ (8000b5c <main+0xf0>)
 8000b28:	480d      	ldr	r0, [pc, #52]	@ (8000b60 <main+0xf4>)
 8000b2a:	f000 fe9f 	bl	800186c <HAL_ADC_Start_DMA>


	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 8000b2e:	f005 f87c 	bl	8005c2a <osKernelStart>
    Enable_DMA_Interrupts();
 8000b32:	f000 fa31 	bl	8000f98 <Enable_DMA_Interrupts>

	/* We should never get here as control is now taken by the scheduler */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000b36:	bf00      	nop
 8000b38:	e7fd      	b.n	8000b36 <main+0xca>
 8000b3a:	bf00      	nop
 8000b3c:	200004ac 	.word	0x200004ac
 8000b40:	080081e0 	.word	0x080081e0
 8000b44:	2000047c 	.word	0x2000047c
 8000b48:	08008208 	.word	0x08008208
 8000b4c:	200004a4 	.word	0x200004a4
 8000b50:	08008230 	.word	0x08008230
 8000b54:	200004a8 	.word	0x200004a8
 8000b58:	200003cc 	.word	0x200003cc
 8000b5c:	20000484 	.word	0x20000484
 8000b60:	20000338 	.word	0x20000338

08000b64 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b09c      	sub	sp, #112	@ 0x70
 8000b68:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000b6a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000b6e:	2228      	movs	r2, #40	@ 0x28
 8000b70:	2100      	movs	r1, #0
 8000b72:	4618      	mov	r0, r3
 8000b74:	f006 fe96 	bl	80078a4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000b78:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	601a      	str	r2, [r3, #0]
 8000b80:	605a      	str	r2, [r3, #4]
 8000b82:	609a      	str	r2, [r3, #8]
 8000b84:	60da      	str	r2, [r3, #12]
 8000b86:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8000b88:	463b      	mov	r3, r7
 8000b8a:	2234      	movs	r2, #52	@ 0x34
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f006 fe88 	bl	80078a4 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b94:	2302      	movs	r3, #2
 8000b96:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b98:	2301      	movs	r3, #1
 8000b9a:	65bb      	str	r3, [r7, #88]	@ 0x58
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b9c:	2310      	movs	r3, #16
 8000b9e:	65fb      	str	r3, [r7, #92]	@ 0x5c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	667b      	str	r3, [r7, #100]	@ 0x64
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	66bb      	str	r3, [r7, #104]	@ 0x68
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000ba8:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8000bac:	66fb      	str	r3, [r7, #108]	@ 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000bae:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f002 fd5e 	bl	8003674 <HAL_RCC_OscConfig>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <SystemClock_Config+0x5e>
		Error_Handler();
 8000bbe:	f000 fa33 	bl	8001028 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000bc2:	230f      	movs	r3, #15
 8000bc4:	637b      	str	r3, [r7, #52]	@ 0x34
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bc6:	2302      	movs	r3, #2
 8000bc8:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000bd2:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	647b      	str	r3, [r7, #68]	@ 0x44

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000bd8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000bdc:	2102      	movs	r1, #2
 8000bde:	4618      	mov	r0, r3
 8000be0:	f003 fd86 	bl	80046f0 <HAL_RCC_ClockConfig>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <SystemClock_Config+0x8a>
		Error_Handler();
 8000bea:	f000 fa1d 	bl	8001028 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC1;
 8000bee:	2380      	movs	r3, #128	@ 0x80
 8000bf0:	603b      	str	r3, [r7, #0]
	PeriphClkInit.Adc1ClockSelection = RCC_ADC1PLLCLK_DIV1;
 8000bf2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000bf6:	61bb      	str	r3, [r7, #24]

	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8000bf8:	463b      	mov	r3, r7
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f003 ffca 	bl	8004b94 <HAL_RCCEx_PeriphCLKConfig>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <SystemClock_Config+0xa6>
		Error_Handler();
 8000c06:	f000 fa0f 	bl	8001028 <Error_Handler>
	}
}
 8000c0a:	bf00      	nop
 8000c0c:	3770      	adds	r7, #112	@ 0x70
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
	...

08000c14 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b086      	sub	sp, #24
 8000c18:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000c1a:	463b      	mov	r3, r7
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	601a      	str	r2, [r3, #0]
 8000c20:	605a      	str	r2, [r3, #4]
 8000c22:	609a      	str	r2, [r3, #8]
 8000c24:	60da      	str	r2, [r3, #12]
 8000c26:	611a      	str	r2, [r3, #16]
 8000c28:	615a      	str	r2, [r3, #20]
	__HAL_LINKDMA(&hadc1, DMA_Handle, hdma_adc1);
 8000c2a:	4b2a      	ldr	r3, [pc, #168]	@ (8000cd4 <MX_ADC1_Init+0xc0>)
 8000c2c:	4a2a      	ldr	r2, [pc, #168]	@ (8000cd8 <MX_ADC1_Init+0xc4>)
 8000c2e:	639a      	str	r2, [r3, #56]	@ 0x38
 8000c30:	4b29      	ldr	r3, [pc, #164]	@ (8000cd8 <MX_ADC1_Init+0xc4>)
 8000c32:	4a28      	ldr	r2, [pc, #160]	@ (8000cd4 <MX_ADC1_Init+0xc0>)
 8000c34:	625a      	str	r2, [r3, #36]	@ 0x24

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 8000c36:	4b27      	ldr	r3, [pc, #156]	@ (8000cd4 <MX_ADC1_Init+0xc0>)
 8000c38:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000c3c:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000c3e:	4b25      	ldr	r3, [pc, #148]	@ (8000cd4 <MX_ADC1_Init+0xc0>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c44:	4b23      	ldr	r3, [pc, #140]	@ (8000cd4 <MX_ADC1_Init+0xc0>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c4a:	4b22      	ldr	r3, [pc, #136]	@ (8000cd4 <MX_ADC1_Init+0xc0>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8000c50:	4b20      	ldr	r3, [pc, #128]	@ (8000cd4 <MX_ADC1_Init+0xc0>)
 8000c52:	2201      	movs	r2, #1
 8000c54:	765a      	strb	r2, [r3, #25]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c56:	4b1f      	ldr	r3, [pc, #124]	@ (8000cd4 <MX_ADC1_Init+0xc0>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c5e:	4b1d      	ldr	r3, [pc, #116]	@ (8000cd4 <MX_ADC1_Init+0xc0>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	62da      	str	r2, [r3, #44]	@ 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c64:	4b1b      	ldr	r3, [pc, #108]	@ (8000cd4 <MX_ADC1_Init+0xc0>)
 8000c66:	2201      	movs	r2, #1
 8000c68:	629a      	str	r2, [r3, #40]	@ 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c6a:	4b1a      	ldr	r3, [pc, #104]	@ (8000cd4 <MX_ADC1_Init+0xc0>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 8000c70:	4b18      	ldr	r3, [pc, #96]	@ (8000cd4 <MX_ADC1_Init+0xc0>)
 8000c72:	2201      	movs	r2, #1
 8000c74:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = ENABLE;
 8000c76:	4b17      	ldr	r3, [pc, #92]	@ (8000cd4 <MX_ADC1_Init+0xc0>)
 8000c78:	2201      	movs	r2, #1
 8000c7a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c7e:	4b15      	ldr	r3, [pc, #84]	@ (8000cd4 <MX_ADC1_Init+0xc0>)
 8000c80:	2204      	movs	r2, #4
 8000c82:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 8000c84:	4b13      	ldr	r3, [pc, #76]	@ (8000cd4 <MX_ADC1_Init+0xc0>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	761a      	strb	r2, [r3, #24]
	hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000c8a:	4b12      	ldr	r3, [pc, #72]	@ (8000cd4 <MX_ADC1_Init+0xc0>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	635a      	str	r2, [r3, #52]	@ 0x34
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8000c90:	4810      	ldr	r0, [pc, #64]	@ (8000cd4 <MX_ADC1_Init+0xc0>)
 8000c92:	f000 fc65 	bl	8001560 <HAL_ADC_Init>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <MX_ADC1_Init+0x8c>
		Error_Handler();
 8000c9c:	f000 f9c4 	bl	8001028 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	607b      	str	r3, [r7, #4]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	60fb      	str	r3, [r7, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLE_5;
 8000cac:	2301      	movs	r3, #1
 8000cae:	60bb      	str	r3, [r7, #8]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	613b      	str	r3, [r7, #16]
	sConfig.Offset = 0;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	617b      	str	r3, [r7, #20]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000cb8:	463b      	mov	r3, r7
 8000cba:	4619      	mov	r1, r3
 8000cbc:	4805      	ldr	r0, [pc, #20]	@ (8000cd4 <MX_ADC1_Init+0xc0>)
 8000cbe:	f000 fe71 	bl	80019a4 <HAL_ADC_ConfigChannel>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <MX_ADC1_Init+0xb8>
		Error_Handler();
 8000cc8:	f000 f9ae 	bl	8001028 <Error_Handler>
//  }
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8000ccc:	bf00      	nop
 8000cce:	3718      	adds	r7, #24
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	20000338 	.word	0x20000338
 8000cd8:	20000388 	.word	0x20000388

08000cdc <MX_CAN_Init>:
/**
 * @brief CAN Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN_Init(void) {
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b08a      	sub	sp, #40	@ 0x28
 8000ce0:	af00      	add	r7, sp, #0
	/* USER CODE END CAN_Init 0 */

	/* USER CODE BEGIN CAN_Init 1 */

	/* USER CODE END CAN_Init 1 */
	hcan.Instance = CAN;
 8000ce2:	4b26      	ldr	r3, [pc, #152]	@ (8000d7c <MX_CAN_Init+0xa0>)
 8000ce4:	4a26      	ldr	r2, [pc, #152]	@ (8000d80 <MX_CAN_Init+0xa4>)
 8000ce6:	601a      	str	r2, [r3, #0]
	hcan.Init.Prescaler = 8;
 8000ce8:	4b24      	ldr	r3, [pc, #144]	@ (8000d7c <MX_CAN_Init+0xa0>)
 8000cea:	2208      	movs	r2, #8
 8000cec:	605a      	str	r2, [r3, #4]
	hcan.Init.Mode = CAN_MODE_LOOPBACK;
 8000cee:	4b23      	ldr	r3, [pc, #140]	@ (8000d7c <MX_CAN_Init+0xa0>)
 8000cf0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000cf4:	609a      	str	r2, [r3, #8]
	hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000cf6:	4b21      	ldr	r3, [pc, #132]	@ (8000d7c <MX_CAN_Init+0xa0>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	60da      	str	r2, [r3, #12]
	hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000cfc:	4b1f      	ldr	r3, [pc, #124]	@ (8000d7c <MX_CAN_Init+0xa0>)
 8000cfe:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000d02:	611a      	str	r2, [r3, #16]
	hcan.Init.TimeSeg2 = CAN_BS2_5TQ;
 8000d04:	4b1d      	ldr	r3, [pc, #116]	@ (8000d7c <MX_CAN_Init+0xa0>)
 8000d06:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000d0a:	615a      	str	r2, [r3, #20]
	hcan.Init.TimeTriggeredMode = DISABLE;
 8000d0c:	4b1b      	ldr	r3, [pc, #108]	@ (8000d7c <MX_CAN_Init+0xa0>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	761a      	strb	r2, [r3, #24]
	hcan.Init.AutoBusOff = DISABLE;
 8000d12:	4b1a      	ldr	r3, [pc, #104]	@ (8000d7c <MX_CAN_Init+0xa0>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	765a      	strb	r2, [r3, #25]
	hcan.Init.AutoWakeUp = DISABLE;
 8000d18:	4b18      	ldr	r3, [pc, #96]	@ (8000d7c <MX_CAN_Init+0xa0>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	769a      	strb	r2, [r3, #26]
	hcan.Init.AutoRetransmission = DISABLE;
 8000d1e:	4b17      	ldr	r3, [pc, #92]	@ (8000d7c <MX_CAN_Init+0xa0>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	76da      	strb	r2, [r3, #27]
	hcan.Init.ReceiveFifoLocked = DISABLE;
 8000d24:	4b15      	ldr	r3, [pc, #84]	@ (8000d7c <MX_CAN_Init+0xa0>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	771a      	strb	r2, [r3, #28]
	hcan.Init.TransmitFifoPriority = DISABLE;
 8000d2a:	4b14      	ldr	r3, [pc, #80]	@ (8000d7c <MX_CAN_Init+0xa0>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan) != HAL_OK) {
 8000d30:	4812      	ldr	r0, [pc, #72]	@ (8000d7c <MX_CAN_Init+0xa0>)
 8000d32:	f001 fa19 	bl	8002168 <HAL_CAN_Init>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <MX_CAN_Init+0x64>
		Error_Handler();
 8000d3c:	f000 f974 	bl	8001028 <Error_Handler>

	//Set a up a filter
	//Allow all messages to pass through from any ID
	CAN_FilterTypeDef canfilterconfig;

	canfilterconfig.FilterActivation = ENABLE;
 8000d40:	2301      	movs	r3, #1
 8000d42:	623b      	str	r3, [r7, #32]
	canfilterconfig.FilterBank = 0;
 8000d44:	2300      	movs	r3, #0
 8000d46:	617b      	str	r3, [r7, #20]
	canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	613b      	str	r3, [r7, #16]
	canfilterconfig.FilterIdHigh = 0x0000;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	603b      	str	r3, [r7, #0]
	canfilterconfig.FilterIdLow = 0x0000;
 8000d50:	2300      	movs	r3, #0
 8000d52:	607b      	str	r3, [r7, #4]
	canfilterconfig.FilterMaskIdHigh = 0x0000;
 8000d54:	2300      	movs	r3, #0
 8000d56:	60bb      	str	r3, [r7, #8]
	canfilterconfig.FilterMaskIdLow = 0x0000;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	60fb      	str	r3, [r7, #12]
	canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	61bb      	str	r3, [r7, #24]
	canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000d60:	2301      	movs	r3, #1
 8000d62:	61fb      	str	r3, [r7, #28]
	canfilterconfig.SlaveStartFilterBank = 14;
 8000d64:	230e      	movs	r3, #14
 8000d66:	627b      	str	r3, [r7, #36]	@ 0x24

	HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 8000d68:	463b      	mov	r3, r7
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	4803      	ldr	r0, [pc, #12]	@ (8000d7c <MX_CAN_Init+0xa0>)
 8000d6e:	f001 faf6 	bl	800235e <HAL_CAN_ConfigFilter>

	/* USER CODE END CAN_Init 2 */

}
 8000d72:	bf00      	nop
 8000d74:	3728      	adds	r7, #40	@ 0x28
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	200003cc 	.word	0x200003cc
 8000d80:	40006400 	.word	0x40006400

08000d84 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000d88:	4b14      	ldr	r3, [pc, #80]	@ (8000ddc <MX_USART2_UART_Init+0x58>)
 8000d8a:	4a15      	ldr	r2, [pc, #84]	@ (8000de0 <MX_USART2_UART_Init+0x5c>)
 8000d8c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 57600;
 8000d8e:	4b13      	ldr	r3, [pc, #76]	@ (8000ddc <MX_USART2_UART_Init+0x58>)
 8000d90:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 8000d94:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d96:	4b11      	ldr	r3, [pc, #68]	@ (8000ddc <MX_USART2_UART_Init+0x58>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000d9c:	4b0f      	ldr	r3, [pc, #60]	@ (8000ddc <MX_USART2_UART_Init+0x58>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000da2:	4b0e      	ldr	r3, [pc, #56]	@ (8000ddc <MX_USART2_UART_Init+0x58>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000da8:	4b0c      	ldr	r3, [pc, #48]	@ (8000ddc <MX_USART2_UART_Init+0x58>)
 8000daa:	220c      	movs	r2, #12
 8000dac:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dae:	4b0b      	ldr	r3, [pc, #44]	@ (8000ddc <MX_USART2_UART_Init+0x58>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000db4:	4b09      	ldr	r3, [pc, #36]	@ (8000ddc <MX_USART2_UART_Init+0x58>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dba:	4b08      	ldr	r3, [pc, #32]	@ (8000ddc <MX_USART2_UART_Init+0x58>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000dc0:	4b06      	ldr	r3, [pc, #24]	@ (8000ddc <MX_USART2_UART_Init+0x58>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	625a      	str	r2, [r3, #36]	@ 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000dc6:	4805      	ldr	r0, [pc, #20]	@ (8000ddc <MX_USART2_UART_Init+0x58>)
 8000dc8:	f004 faee 	bl	80053a8 <HAL_UART_Init>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <MX_USART2_UART_Init+0x52>
		Error_Handler();
 8000dd2:	f000 f929 	bl	8001028 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000dd6:	bf00      	nop
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	200003f4 	.word	0x200003f4
 8000de0:	40004400 	.word	0x40004400

08000de4 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
//	/* DMA interrupt init */
//	/* DMA1_Channel1_IRQn interrupt configuration */
//	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
//	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
    /* DMA controller clock enable */
    __HAL_RCC_DMA1_CLK_ENABLE();
 8000dea:	4b1c      	ldr	r3, [pc, #112]	@ (8000e5c <MX_DMA_Init+0x78>)
 8000dec:	695b      	ldr	r3, [r3, #20]
 8000dee:	4a1b      	ldr	r2, [pc, #108]	@ (8000e5c <MX_DMA_Init+0x78>)
 8000df0:	f043 0301 	orr.w	r3, r3, #1
 8000df4:	6153      	str	r3, [r2, #20]
 8000df6:	4b19      	ldr	r3, [pc, #100]	@ (8000e5c <MX_DMA_Init+0x78>)
 8000df8:	695b      	ldr	r3, [r3, #20]
 8000dfa:	f003 0301 	and.w	r3, r3, #1
 8000dfe:	607b      	str	r3, [r7, #4]
 8000e00:	687b      	ldr	r3, [r7, #4]

    /* Configure DMA for ADC1 */
    hdma_adc1.Instance = DMA1_Channel1; // replace if using a different channel
 8000e02:	4b17      	ldr	r3, [pc, #92]	@ (8000e60 <MX_DMA_Init+0x7c>)
 8000e04:	4a17      	ldr	r2, [pc, #92]	@ (8000e64 <MX_DMA_Init+0x80>)
 8000e06:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e08:	4b15      	ldr	r3, [pc, #84]	@ (8000e60 <MX_DMA_Init+0x7c>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e0e:	4b14      	ldr	r3, [pc, #80]	@ (8000e60 <MX_DMA_Init+0x7c>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000e14:	4b12      	ldr	r3, [pc, #72]	@ (8000e60 <MX_DMA_Init+0x7c>)
 8000e16:	2280      	movs	r2, #128	@ 0x80
 8000e18:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e1a:	4b11      	ldr	r3, [pc, #68]	@ (8000e60 <MX_DMA_Init+0x7c>)
 8000e1c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000e20:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e22:	4b0f      	ldr	r3, [pc, #60]	@ (8000e60 <MX_DMA_Init+0x7c>)
 8000e24:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e28:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR; // 🔁 circular buffer
 8000e2a:	4b0d      	ldr	r3, [pc, #52]	@ (8000e60 <MX_DMA_Init+0x7c>)
 8000e2c:	2220      	movs	r2, #32
 8000e2e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8000e30:	4b0b      	ldr	r3, [pc, #44]	@ (8000e60 <MX_DMA_Init+0x7c>)
 8000e32:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e36:	61da      	str	r2, [r3, #28]

    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK) {
 8000e38:	4809      	ldr	r0, [pc, #36]	@ (8000e60 <MX_DMA_Init+0x7c>)
 8000e3a:	f002 f8c7 	bl	8002fcc <HAL_DMA_Init>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <MX_DMA_Init+0x64>
        Error_Handler();
 8000e44:	f000 f8f0 	bl	8001028 <Error_Handler>
    }

    // Link DMA to ADC
    __HAL_LINKDMA(&hadc1, DMA_Handle, hdma_adc1);
 8000e48:	4b07      	ldr	r3, [pc, #28]	@ (8000e68 <MX_DMA_Init+0x84>)
 8000e4a:	4a05      	ldr	r2, [pc, #20]	@ (8000e60 <MX_DMA_Init+0x7c>)
 8000e4c:	639a      	str	r2, [r3, #56]	@ 0x38
 8000e4e:	4b04      	ldr	r3, [pc, #16]	@ (8000e60 <MX_DMA_Init+0x7c>)
 8000e50:	4a05      	ldr	r2, [pc, #20]	@ (8000e68 <MX_DMA_Init+0x84>)
 8000e52:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA interrupt init */
//    HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
//    HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
}
 8000e54:	bf00      	nop
 8000e56:	3708      	adds	r7, #8
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	40021000 	.word	0x40021000
 8000e60:	20000388 	.word	0x20000388
 8000e64:	40020008 	.word	0x40020008
 8000e68:	20000338 	.word	0x20000338

08000e6c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b08a      	sub	sp, #40	@ 0x28
 8000e70:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000e72:	f107 0314 	add.w	r3, r7, #20
 8000e76:	2200      	movs	r2, #0
 8000e78:	601a      	str	r2, [r3, #0]
 8000e7a:	605a      	str	r2, [r3, #4]
 8000e7c:	609a      	str	r2, [r3, #8]
 8000e7e:	60da      	str	r2, [r3, #12]
 8000e80:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000e82:	4b42      	ldr	r3, [pc, #264]	@ (8000f8c <MX_GPIO_Init+0x120>)
 8000e84:	695b      	ldr	r3, [r3, #20]
 8000e86:	4a41      	ldr	r2, [pc, #260]	@ (8000f8c <MX_GPIO_Init+0x120>)
 8000e88:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000e8c:	6153      	str	r3, [r2, #20]
 8000e8e:	4b3f      	ldr	r3, [pc, #252]	@ (8000f8c <MX_GPIO_Init+0x120>)
 8000e90:	695b      	ldr	r3, [r3, #20]
 8000e92:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000e96:	613b      	str	r3, [r7, #16]
 8000e98:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8000e9a:	4b3c      	ldr	r3, [pc, #240]	@ (8000f8c <MX_GPIO_Init+0x120>)
 8000e9c:	695b      	ldr	r3, [r3, #20]
 8000e9e:	4a3b      	ldr	r2, [pc, #236]	@ (8000f8c <MX_GPIO_Init+0x120>)
 8000ea0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000ea4:	6153      	str	r3, [r2, #20]
 8000ea6:	4b39      	ldr	r3, [pc, #228]	@ (8000f8c <MX_GPIO_Init+0x120>)
 8000ea8:	695b      	ldr	r3, [r3, #20]
 8000eaa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000eae:	60fb      	str	r3, [r7, #12]
 8000eb0:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb2:	4b36      	ldr	r3, [pc, #216]	@ (8000f8c <MX_GPIO_Init+0x120>)
 8000eb4:	695b      	ldr	r3, [r3, #20]
 8000eb6:	4a35      	ldr	r2, [pc, #212]	@ (8000f8c <MX_GPIO_Init+0x120>)
 8000eb8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ebc:	6153      	str	r3, [r2, #20]
 8000ebe:	4b33      	ldr	r3, [pc, #204]	@ (8000f8c <MX_GPIO_Init+0x120>)
 8000ec0:	695b      	ldr	r3, [r3, #20]
 8000ec2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ec6:	60bb      	str	r3, [r7, #8]
 8000ec8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000eca:	4b30      	ldr	r3, [pc, #192]	@ (8000f8c <MX_GPIO_Init+0x120>)
 8000ecc:	695b      	ldr	r3, [r3, #20]
 8000ece:	4a2f      	ldr	r2, [pc, #188]	@ (8000f8c <MX_GPIO_Init+0x120>)
 8000ed0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ed4:	6153      	str	r3, [r2, #20]
 8000ed6:	4b2d      	ldr	r3, [pc, #180]	@ (8000f8c <MX_GPIO_Init+0x120>)
 8000ed8:	695b      	ldr	r3, [r3, #20]
 8000eda:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000ede:	607b      	str	r3, [r7, #4]
 8000ee0:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ee8:	4829      	ldr	r0, [pc, #164]	@ (8000f90 <MX_GPIO_Init+0x124>)
 8000eea:	f002 fb91 	bl	8003610 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000eee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ef2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ef4:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000ef8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efa:	2300      	movs	r3, #0
 8000efc:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000efe:	f107 0314 	add.w	r3, r7, #20
 8000f02:	4619      	mov	r1, r3
 8000f04:	4823      	ldr	r0, [pc, #140]	@ (8000f94 <MX_GPIO_Init+0x128>)
 8000f06:	f002 f9f9 	bl	80032fc <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8000f0a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f0e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f10:	2301      	movs	r3, #1
 8000f12:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f14:	2300      	movs	r3, #0
 8000f16:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000f1c:	f107 0314 	add.w	r3, r7, #20
 8000f20:	4619      	mov	r1, r3
 8000f22:	481b      	ldr	r0, [pc, #108]	@ (8000f90 <MX_GPIO_Init+0x124>)
 8000f24:	f002 f9ea 	bl	80032fc <HAL_GPIO_Init>

	/*Configure GPIO pin : Drive_Pin */
	GPIO_InitStruct.Pin = Drive_Pin;
 8000f28:	2380      	movs	r3, #128	@ 0x80
 8000f2a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f30:	2301      	movs	r3, #1
 8000f32:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f34:	2300      	movs	r3, #0
 8000f36:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(Drive_GPIO_Port, &GPIO_InitStruct);
 8000f38:	f107 0314 	add.w	r3, r7, #20
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f42:	f002 f9db 	bl	80032fc <HAL_GPIO_Init>

	/*Configure GPIO pin : Neutral_Pin */
	GPIO_InitStruct.Pin = Neutral_Pin;
 8000f46:	2340      	movs	r3, #64	@ 0x40
 8000f48:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f52:	2300      	movs	r3, #0
 8000f54:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f56:	f107 0314 	add.w	r3, r7, #20
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f60:	f002 f9cc 	bl	80032fc <HAL_GPIO_Init>

	/*Configure GPIO pin : Reverse_Pin */
	GPIO_InitStruct.Pin = Reverse_Pin;
 8000f64:	2320      	movs	r3, #32
 8000f66:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f70:	2300      	movs	r3, #0
 8000f72:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f74:	f107 0314 	add.w	r3, r7, #20
 8000f78:	4619      	mov	r1, r3
 8000f7a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f7e:	f002 f9bd 	bl	80032fc <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000f82:	bf00      	nop
 8000f84:	3728      	adds	r7, #40	@ 0x28
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	40021000 	.word	0x40021000
 8000f90:	48000400 	.word	0x48000400
 8000f94:	48000800 	.word	0x48000800

08000f98 <Enable_DMA_Interrupts>:

/* USER CODE BEGIN 4 */

/* Enable DMA interrupts after RTOS is running */
 void Enable_DMA_Interrupts(void) {
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
    /* Give time for RTOS to stabilize */
    osDelay(100);
 8000f9c:	2064      	movs	r0, #100	@ 0x64
 8000f9e:	f004 fe97 	bl	8005cd0 <osDelay>

    /* Configure at lowest priority */
    HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 15, 0); // Lowest priority
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	210f      	movs	r1, #15
 8000fa6:	200b      	movs	r0, #11
 8000fa8:	f001 ffe6 	bl	8002f78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000fac:	200b      	movs	r0, #11
 8000fae:	f001 ffff 	bl	8002fb0 <HAL_NVIC_EnableIRQ>

    /* Activate ADC DMA with interrupts */
    HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buf, ADC_BUF_LEN);
 8000fb2:	2210      	movs	r2, #16
 8000fb4:	4904      	ldr	r1, [pc, #16]	@ (8000fc8 <Enable_DMA_Interrupts+0x30>)
 8000fb6:	4805      	ldr	r0, [pc, #20]	@ (8000fcc <Enable_DMA_Interrupts+0x34>)
 8000fb8:	f000 fc58 	bl	800186c <HAL_ADC_Start_DMA>

    dma_interrupts_enabled = 1;
 8000fbc:	4b04      	ldr	r3, [pc, #16]	@ (8000fd0 <Enable_DMA_Interrupts+0x38>)
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	701a      	strb	r2, [r3, #0]
}
 8000fc2:	bf00      	nop
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	20000484 	.word	0x20000484
 8000fcc:	20000338 	.word	0x20000338
 8000fd0:	20000480 	.word	0x20000480

08000fd4 <DMA1_Channel1_IRQHandler>:

/* Modified DMA IRQ Handler */
void DMA1_Channel1_IRQHandler(void) {
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
    if(dma_interrupts_enabled) {
 8000fd8:	4b04      	ldr	r3, [pc, #16]	@ (8000fec <DMA1_Channel1_IRQHandler+0x18>)
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d002      	beq.n	8000fe8 <DMA1_Channel1_IRQHandler+0x14>
        HAL_DMA_IRQHandler(&hdma_adc1);
 8000fe2:	4803      	ldr	r0, [pc, #12]	@ (8000ff0 <DMA1_Channel1_IRQHandler+0x1c>)
 8000fe4:	f002 f898 	bl	8003118 <HAL_DMA_IRQHandler>
    }
}
 8000fe8:	bf00      	nop
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	20000480 	.word	0x20000480
 8000ff0:	20000388 	.word	0x20000388

08000ff4 <parked_init>:
 * @brief  Function implementing the parked thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_parked_init */
void parked_init(void const *argument) {
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8000ffc:	2001      	movs	r0, #1
 8000ffe:	f004 fe67 	bl	8005cd0 <osDelay>
 8001002:	e7fb      	b.n	8000ffc <parked_init+0x8>

08001004 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1) {
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a04      	ldr	r2, [pc, #16]	@ (8001024 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d101      	bne.n	800101a <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8001016:	f000 fa65 	bl	80014e4 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 800101a:	bf00      	nop
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	40012c00 	.word	0x40012c00

08001028 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800102c:	b672      	cpsid	i
}
 800102e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001030:	bf00      	nop
 8001032:	e7fd      	b.n	8001030 <Error_Handler+0x8>

08001034 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800103a:	4b11      	ldr	r3, [pc, #68]	@ (8001080 <HAL_MspInit+0x4c>)
 800103c:	699b      	ldr	r3, [r3, #24]
 800103e:	4a10      	ldr	r2, [pc, #64]	@ (8001080 <HAL_MspInit+0x4c>)
 8001040:	f043 0301 	orr.w	r3, r3, #1
 8001044:	6193      	str	r3, [r2, #24]
 8001046:	4b0e      	ldr	r3, [pc, #56]	@ (8001080 <HAL_MspInit+0x4c>)
 8001048:	699b      	ldr	r3, [r3, #24]
 800104a:	f003 0301 	and.w	r3, r3, #1
 800104e:	607b      	str	r3, [r7, #4]
 8001050:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001052:	4b0b      	ldr	r3, [pc, #44]	@ (8001080 <HAL_MspInit+0x4c>)
 8001054:	69db      	ldr	r3, [r3, #28]
 8001056:	4a0a      	ldr	r2, [pc, #40]	@ (8001080 <HAL_MspInit+0x4c>)
 8001058:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800105c:	61d3      	str	r3, [r2, #28]
 800105e:	4b08      	ldr	r3, [pc, #32]	@ (8001080 <HAL_MspInit+0x4c>)
 8001060:	69db      	ldr	r3, [r3, #28]
 8001062:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001066:	603b      	str	r3, [r7, #0]
 8001068:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800106a:	2200      	movs	r2, #0
 800106c:	210f      	movs	r1, #15
 800106e:	f06f 0001 	mvn.w	r0, #1
 8001072:	f001 ff81 	bl	8002f78 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001076:	bf00      	nop
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	40021000 	.word	0x40021000

08001084 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b08a      	sub	sp, #40	@ 0x28
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800108c:	f107 0314 	add.w	r3, r7, #20
 8001090:	2200      	movs	r2, #0
 8001092:	601a      	str	r2, [r3, #0]
 8001094:	605a      	str	r2, [r3, #4]
 8001096:	609a      	str	r2, [r3, #8]
 8001098:	60da      	str	r2, [r3, #12]
 800109a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80010a4:	d14c      	bne.n	8001140 <HAL_ADC_MspInit+0xbc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010a6:	4b28      	ldr	r3, [pc, #160]	@ (8001148 <HAL_ADC_MspInit+0xc4>)
 80010a8:	695b      	ldr	r3, [r3, #20]
 80010aa:	4a27      	ldr	r2, [pc, #156]	@ (8001148 <HAL_ADC_MspInit+0xc4>)
 80010ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010b0:	6153      	str	r3, [r2, #20]
 80010b2:	4b25      	ldr	r3, [pc, #148]	@ (8001148 <HAL_ADC_MspInit+0xc4>)
 80010b4:	695b      	ldr	r3, [r3, #20]
 80010b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010ba:	613b      	str	r3, [r7, #16]
 80010bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010be:	4b22      	ldr	r3, [pc, #136]	@ (8001148 <HAL_ADC_MspInit+0xc4>)
 80010c0:	695b      	ldr	r3, [r3, #20]
 80010c2:	4a21      	ldr	r2, [pc, #132]	@ (8001148 <HAL_ADC_MspInit+0xc4>)
 80010c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010c8:	6153      	str	r3, [r2, #20]
 80010ca:	4b1f      	ldr	r3, [pc, #124]	@ (8001148 <HAL_ADC_MspInit+0xc4>)
 80010cc:	695b      	ldr	r3, [r3, #20]
 80010ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010d2:	60fb      	str	r3, [r7, #12]
 80010d4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80010d6:	2301      	movs	r3, #1
 80010d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010da:	2303      	movs	r3, #3
 80010dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010de:	2300      	movs	r3, #0
 80010e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010e2:	f107 0314 	add.w	r3, r7, #20
 80010e6:	4619      	mov	r1, r3
 80010e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010ec:	f002 f906 	bl	80032fc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80010f0:	4b16      	ldr	r3, [pc, #88]	@ (800114c <HAL_ADC_MspInit+0xc8>)
 80010f2:	4a17      	ldr	r2, [pc, #92]	@ (8001150 <HAL_ADC_MspInit+0xcc>)
 80010f4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010f6:	4b15      	ldr	r3, [pc, #84]	@ (800114c <HAL_ADC_MspInit+0xc8>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80010fc:	4b13      	ldr	r3, [pc, #76]	@ (800114c <HAL_ADC_MspInit+0xc8>)
 80010fe:	2200      	movs	r2, #0
 8001100:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001102:	4b12      	ldr	r3, [pc, #72]	@ (800114c <HAL_ADC_MspInit+0xc8>)
 8001104:	2280      	movs	r2, #128	@ 0x80
 8001106:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001108:	4b10      	ldr	r3, [pc, #64]	@ (800114c <HAL_ADC_MspInit+0xc8>)
 800110a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800110e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001110:	4b0e      	ldr	r3, [pc, #56]	@ (800114c <HAL_ADC_MspInit+0xc8>)
 8001112:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001116:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001118:	4b0c      	ldr	r3, [pc, #48]	@ (800114c <HAL_ADC_MspInit+0xc8>)
 800111a:	2200      	movs	r2, #0
 800111c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800111e:	4b0b      	ldr	r3, [pc, #44]	@ (800114c <HAL_ADC_MspInit+0xc8>)
 8001120:	2200      	movs	r2, #0
 8001122:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001124:	4809      	ldr	r0, [pc, #36]	@ (800114c <HAL_ADC_MspInit+0xc8>)
 8001126:	f001 ff51 	bl	8002fcc <HAL_DMA_Init>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 8001130:	f7ff ff7a 	bl	8001028 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	4a05      	ldr	r2, [pc, #20]	@ (800114c <HAL_ADC_MspInit+0xc8>)
 8001138:	639a      	str	r2, [r3, #56]	@ 0x38
 800113a:	4a04      	ldr	r2, [pc, #16]	@ (800114c <HAL_ADC_MspInit+0xc8>)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6253      	str	r3, [r2, #36]	@ 0x24

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001140:	bf00      	nop
 8001142:	3728      	adds	r7, #40	@ 0x28
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	40021000 	.word	0x40021000
 800114c:	20000388 	.word	0x20000388
 8001150:	40020008 	.word	0x40020008

08001154 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b08a      	sub	sp, #40	@ 0x28
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800115c:	f107 0314 	add.w	r3, r7, #20
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	605a      	str	r2, [r3, #4]
 8001166:	609a      	str	r2, [r3, #8]
 8001168:	60da      	str	r2, [r3, #12]
 800116a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a25      	ldr	r2, [pc, #148]	@ (8001208 <HAL_CAN_MspInit+0xb4>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d143      	bne.n	80011fe <HAL_CAN_MspInit+0xaa>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001176:	4b25      	ldr	r3, [pc, #148]	@ (800120c <HAL_CAN_MspInit+0xb8>)
 8001178:	69db      	ldr	r3, [r3, #28]
 800117a:	4a24      	ldr	r2, [pc, #144]	@ (800120c <HAL_CAN_MspInit+0xb8>)
 800117c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001180:	61d3      	str	r3, [r2, #28]
 8001182:	4b22      	ldr	r3, [pc, #136]	@ (800120c <HAL_CAN_MspInit+0xb8>)
 8001184:	69db      	ldr	r3, [r3, #28]
 8001186:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800118a:	613b      	str	r3, [r7, #16]
 800118c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800118e:	4b1f      	ldr	r3, [pc, #124]	@ (800120c <HAL_CAN_MspInit+0xb8>)
 8001190:	695b      	ldr	r3, [r3, #20]
 8001192:	4a1e      	ldr	r2, [pc, #120]	@ (800120c <HAL_CAN_MspInit+0xb8>)
 8001194:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001198:	6153      	str	r3, [r2, #20]
 800119a:	4b1c      	ldr	r3, [pc, #112]	@ (800120c <HAL_CAN_MspInit+0xb8>)
 800119c:	695b      	ldr	r3, [r3, #20]
 800119e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011a2:	60fb      	str	r3, [r7, #12]
 80011a4:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80011a6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80011aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ac:	2302      	movs	r3, #2
 80011ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011b0:	2301      	movs	r3, #1
 80011b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011b4:	2303      	movs	r3, #3
 80011b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM1;
 80011b8:	2309      	movs	r3, #9
 80011ba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011bc:	f107 0314 	add.w	r3, r7, #20
 80011c0:	4619      	mov	r1, r3
 80011c2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011c6:	f002 f899 	bl	80032fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80011ca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d0:	2302      	movs	r3, #2
 80011d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d4:	2300      	movs	r3, #0
 80011d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011d8:	2303      	movs	r3, #3
 80011da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM1;
 80011dc:	2309      	movs	r3, #9
 80011de:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011e0:	f107 0314 	add.w	r3, r7, #20
 80011e4:	4619      	mov	r1, r3
 80011e6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011ea:	f002 f887 	bl	80032fc <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 5, 0);
 80011ee:	2200      	movs	r2, #0
 80011f0:	2105      	movs	r1, #5
 80011f2:	2014      	movs	r0, #20
 80011f4:	f001 fec0 	bl	8002f78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 80011f8:	2014      	movs	r0, #20
 80011fa:	f001 fed9 	bl	8002fb0 <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN_MspInit 1 */

  }

}
 80011fe:	bf00      	nop
 8001200:	3728      	adds	r7, #40	@ 0x28
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	40006400 	.word	0x40006400
 800120c:	40021000 	.word	0x40021000

08001210 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b08a      	sub	sp, #40	@ 0x28
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001218:	f107 0314 	add.w	r3, r7, #20
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]
 8001220:	605a      	str	r2, [r3, #4]
 8001222:	609a      	str	r2, [r3, #8]
 8001224:	60da      	str	r2, [r3, #12]
 8001226:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a17      	ldr	r2, [pc, #92]	@ (800128c <HAL_UART_MspInit+0x7c>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d128      	bne.n	8001284 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001232:	4b17      	ldr	r3, [pc, #92]	@ (8001290 <HAL_UART_MspInit+0x80>)
 8001234:	69db      	ldr	r3, [r3, #28]
 8001236:	4a16      	ldr	r2, [pc, #88]	@ (8001290 <HAL_UART_MspInit+0x80>)
 8001238:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800123c:	61d3      	str	r3, [r2, #28]
 800123e:	4b14      	ldr	r3, [pc, #80]	@ (8001290 <HAL_UART_MspInit+0x80>)
 8001240:	69db      	ldr	r3, [r3, #28]
 8001242:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001246:	613b      	str	r3, [r7, #16]
 8001248:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800124a:	4b11      	ldr	r3, [pc, #68]	@ (8001290 <HAL_UART_MspInit+0x80>)
 800124c:	695b      	ldr	r3, [r3, #20]
 800124e:	4a10      	ldr	r2, [pc, #64]	@ (8001290 <HAL_UART_MspInit+0x80>)
 8001250:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001254:	6153      	str	r3, [r2, #20]
 8001256:	4b0e      	ldr	r3, [pc, #56]	@ (8001290 <HAL_UART_MspInit+0x80>)
 8001258:	695b      	ldr	r3, [r3, #20]
 800125a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800125e:	60fb      	str	r3, [r7, #12]
 8001260:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001262:	230c      	movs	r3, #12
 8001264:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001266:	2302      	movs	r3, #2
 8001268:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126a:	2300      	movs	r3, #0
 800126c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800126e:	2300      	movs	r3, #0
 8001270:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001272:	2307      	movs	r3, #7
 8001274:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001276:	f107 0314 	add.w	r3, r7, #20
 800127a:	4619      	mov	r1, r3
 800127c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001280:	f002 f83c 	bl	80032fc <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001284:	bf00      	nop
 8001286:	3728      	adds	r7, #40	@ 0x28
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	40004400 	.word	0x40004400
 8001290:	40021000 	.word	0x40021000

08001294 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b08c      	sub	sp, #48	@ 0x30
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 800129c:	2300      	movs	r3, #0
 800129e:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 80012a0:	2300      	movs	r3, #0
 80012a2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80012a4:	4b2e      	ldr	r3, [pc, #184]	@ (8001360 <HAL_InitTick+0xcc>)
 80012a6:	699b      	ldr	r3, [r3, #24]
 80012a8:	4a2d      	ldr	r2, [pc, #180]	@ (8001360 <HAL_InitTick+0xcc>)
 80012aa:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80012ae:	6193      	str	r3, [r2, #24]
 80012b0:	4b2b      	ldr	r3, [pc, #172]	@ (8001360 <HAL_InitTick+0xcc>)
 80012b2:	699b      	ldr	r3, [r3, #24]
 80012b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80012b8:	60bb      	str	r3, [r7, #8]
 80012ba:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80012bc:	f107 020c 	add.w	r2, r7, #12
 80012c0:	f107 0310 	add.w	r3, r7, #16
 80012c4:	4611      	mov	r1, r2
 80012c6:	4618      	mov	r0, r3
 80012c8:	f003 fc32 	bl	8004b30 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80012cc:	f003 fc0e 	bl	8004aec <HAL_RCC_GetPCLK2Freq>
 80012d0:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80012d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012d4:	4a23      	ldr	r2, [pc, #140]	@ (8001364 <HAL_InitTick+0xd0>)
 80012d6:	fba2 2303 	umull	r2, r3, r2, r3
 80012da:	0c9b      	lsrs	r3, r3, #18
 80012dc:	3b01      	subs	r3, #1
 80012de:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80012e0:	4b21      	ldr	r3, [pc, #132]	@ (8001368 <HAL_InitTick+0xd4>)
 80012e2:	4a22      	ldr	r2, [pc, #136]	@ (800136c <HAL_InitTick+0xd8>)
 80012e4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80012e6:	4b20      	ldr	r3, [pc, #128]	@ (8001368 <HAL_InitTick+0xd4>)
 80012e8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80012ec:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80012ee:	4a1e      	ldr	r2, [pc, #120]	@ (8001368 <HAL_InitTick+0xd4>)
 80012f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012f2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80012f4:	4b1c      	ldr	r3, [pc, #112]	@ (8001368 <HAL_InitTick+0xd4>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012fa:	4b1b      	ldr	r3, [pc, #108]	@ (8001368 <HAL_InitTick+0xd4>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001300:	4b19      	ldr	r3, [pc, #100]	@ (8001368 <HAL_InitTick+0xd4>)
 8001302:	2200      	movs	r2, #0
 8001304:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001306:	4818      	ldr	r0, [pc, #96]	@ (8001368 <HAL_InitTick+0xd4>)
 8001308:	f003 fdd6 	bl	8004eb8 <HAL_TIM_Base_Init>
 800130c:	4603      	mov	r3, r0
 800130e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001312:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001316:	2b00      	cmp	r3, #0
 8001318:	d11b      	bne.n	8001352 <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800131a:	4813      	ldr	r0, [pc, #76]	@ (8001368 <HAL_InitTick+0xd4>)
 800131c:	f003 fe2e 	bl	8004f7c <HAL_TIM_Base_Start_IT>
 8001320:	4603      	mov	r3, r0
 8001322:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001326:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800132a:	2b00      	cmp	r3, #0
 800132c:	d111      	bne.n	8001352 <HAL_InitTick+0xbe>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800132e:	2019      	movs	r0, #25
 8001330:	f001 fe3e 	bl	8002fb0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2b0f      	cmp	r3, #15
 8001338:	d808      	bhi.n	800134c <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 800133a:	2200      	movs	r2, #0
 800133c:	6879      	ldr	r1, [r7, #4]
 800133e:	2019      	movs	r0, #25
 8001340:	f001 fe1a 	bl	8002f78 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001344:	4a0a      	ldr	r2, [pc, #40]	@ (8001370 <HAL_InitTick+0xdc>)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6013      	str	r3, [r2, #0]
 800134a:	e002      	b.n	8001352 <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 800134c:	2301      	movs	r3, #1
 800134e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001352:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001356:	4618      	mov	r0, r3
 8001358:	3730      	adds	r7, #48	@ 0x30
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	40021000 	.word	0x40021000
 8001364:	431bde83 	.word	0x431bde83
 8001368:	200004b4 	.word	0x200004b4
 800136c:	40012c00 	.word	0x40012c00
 8001370:	20000008 	.word	0x20000008

08001374 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001378:	bf00      	nop
 800137a:	e7fd      	b.n	8001378 <NMI_Handler+0x4>

0800137c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001380:	bf00      	nop
 8001382:	e7fd      	b.n	8001380 <HardFault_Handler+0x4>

08001384 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001388:	bf00      	nop
 800138a:	e7fd      	b.n	8001388 <MemManage_Handler+0x4>

0800138c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001390:	bf00      	nop
 8001392:	e7fd      	b.n	8001390 <BusFault_Handler+0x4>

08001394 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001398:	bf00      	nop
 800139a:	e7fd      	b.n	8001398 <UsageFault_Handler+0x4>

0800139c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013a0:	bf00      	nop
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
	...

080013ac <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles CAN RX0 and USB low priority interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80013b0:	4802      	ldr	r0, [pc, #8]	@ (80013bc <USB_LP_CAN_RX0_IRQHandler+0x10>)
 80013b2:	f001 fafa 	bl	80029aa <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 80013b6:	bf00      	nop
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	200003cc 	.word	0x200003cc

080013c0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80013c4:	4802      	ldr	r0, [pc, #8]	@ (80013d0 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80013c6:	f003 fe2d 	bl	8005024 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80013ca:	bf00      	nop
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	200004b4 	.word	0x200004b4

080013d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b086      	sub	sp, #24
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013dc:	4a14      	ldr	r2, [pc, #80]	@ (8001430 <_sbrk+0x5c>)
 80013de:	4b15      	ldr	r3, [pc, #84]	@ (8001434 <_sbrk+0x60>)
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013e8:	4b13      	ldr	r3, [pc, #76]	@ (8001438 <_sbrk+0x64>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d102      	bne.n	80013f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013f0:	4b11      	ldr	r3, [pc, #68]	@ (8001438 <_sbrk+0x64>)
 80013f2:	4a12      	ldr	r2, [pc, #72]	@ (800143c <_sbrk+0x68>)
 80013f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013f6:	4b10      	ldr	r3, [pc, #64]	@ (8001438 <_sbrk+0x64>)
 80013f8:	681a      	ldr	r2, [r3, #0]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	4413      	add	r3, r2
 80013fe:	693a      	ldr	r2, [r7, #16]
 8001400:	429a      	cmp	r2, r3
 8001402:	d207      	bcs.n	8001414 <_sbrk+0x40>
  {

	  errno = ENOMEM;
 8001404:	f006 fa56 	bl	80078b4 <__errno>
 8001408:	4603      	mov	r3, r0
 800140a:	220c      	movs	r2, #12
 800140c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800140e:	f04f 33ff 	mov.w	r3, #4294967295
 8001412:	e009      	b.n	8001428 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001414:	4b08      	ldr	r3, [pc, #32]	@ (8001438 <_sbrk+0x64>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800141a:	4b07      	ldr	r3, [pc, #28]	@ (8001438 <_sbrk+0x64>)
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	4413      	add	r3, r2
 8001422:	4a05      	ldr	r2, [pc, #20]	@ (8001438 <_sbrk+0x64>)
 8001424:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001426:	68fb      	ldr	r3, [r7, #12]
}
 8001428:	4618      	mov	r0, r3
 800142a:	3718      	adds	r7, #24
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	20004000 	.word	0x20004000
 8001434:	00000400 	.word	0x00000400
 8001438:	20000500 	.word	0x20000500
 800143c:	20002fe0 	.word	0x20002fe0

08001440 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001444:	4b06      	ldr	r3, [pc, #24]	@ (8001460 <SystemInit+0x20>)
 8001446:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800144a:	4a05      	ldr	r2, [pc, #20]	@ (8001460 <SystemInit+0x20>)
 800144c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001450:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001454:	bf00      	nop
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	e000ed00 	.word	0xe000ed00

08001464 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001464:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800149c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001468:	f7ff ffea 	bl	8001440 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800146c:	480c      	ldr	r0, [pc, #48]	@ (80014a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800146e:	490d      	ldr	r1, [pc, #52]	@ (80014a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001470:	4a0d      	ldr	r2, [pc, #52]	@ (80014a8 <LoopForever+0xe>)
  movs r3, #0
 8001472:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001474:	e002      	b.n	800147c <LoopCopyDataInit>

08001476 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001476:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001478:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800147a:	3304      	adds	r3, #4

0800147c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800147c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800147e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001480:	d3f9      	bcc.n	8001476 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001482:	4a0a      	ldr	r2, [pc, #40]	@ (80014ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8001484:	4c0a      	ldr	r4, [pc, #40]	@ (80014b0 <LoopForever+0x16>)
  movs r3, #0
 8001486:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001488:	e001      	b.n	800148e <LoopFillZerobss>

0800148a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800148a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800148c:	3204      	adds	r2, #4

0800148e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800148e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001490:	d3fb      	bcc.n	800148a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001492:	f006 fa15 	bl	80078c0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001496:	f7ff fae9 	bl	8000a6c <main>

0800149a <LoopForever>:

LoopForever:
    b LoopForever
 800149a:	e7fe      	b.n	800149a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800149c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80014a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014a4:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80014a8:	080082d0 	.word	0x080082d0
  ldr r2, =_sbss
 80014ac:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80014b0:	20002fdc 	.word	0x20002fdc

080014b4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80014b4:	e7fe      	b.n	80014b4 <ADC1_IRQHandler>
	...

080014b8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014bc:	4b08      	ldr	r3, [pc, #32]	@ (80014e0 <HAL_Init+0x28>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a07      	ldr	r2, [pc, #28]	@ (80014e0 <HAL_Init+0x28>)
 80014c2:	f043 0310 	orr.w	r3, r3, #16
 80014c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014c8:	2003      	movs	r0, #3
 80014ca:	f001 fd4a 	bl	8002f62 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014ce:	200f      	movs	r0, #15
 80014d0:	f7ff fee0 	bl	8001294 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014d4:	f7ff fdae 	bl	8001034 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014d8:	2300      	movs	r3, #0
}
 80014da:	4618      	mov	r0, r3
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	40022000 	.word	0x40022000

080014e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014e8:	4b06      	ldr	r3, [pc, #24]	@ (8001504 <HAL_IncTick+0x20>)
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	461a      	mov	r2, r3
 80014ee:	4b06      	ldr	r3, [pc, #24]	@ (8001508 <HAL_IncTick+0x24>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4413      	add	r3, r2
 80014f4:	4a04      	ldr	r2, [pc, #16]	@ (8001508 <HAL_IncTick+0x24>)
 80014f6:	6013      	str	r3, [r2, #0]
}
 80014f8:	bf00      	nop
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	2000000c 	.word	0x2000000c
 8001508:	20000504 	.word	0x20000504

0800150c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  return uwTick;  
 8001510:	4b03      	ldr	r3, [pc, #12]	@ (8001520 <HAL_GetTick+0x14>)
 8001512:	681b      	ldr	r3, [r3, #0]
}
 8001514:	4618      	mov	r0, r3
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop
 8001520:	20000504 	.word	0x20000504

08001524 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800152c:	bf00      	nop
 800152e:	370c      	adds	r7, #12
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr

08001538 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001540:	bf00      	nop
 8001542:	370c      	adds	r7, #12
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr

0800154c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001554:	bf00      	nop
 8001556:	370c      	adds	r7, #12
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr

08001560 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b09a      	sub	sp, #104	@ 0x68
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001568:	2300      	movs	r3, #0
 800156a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800156e:	2300      	movs	r3, #0
 8001570:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001572:	2300      	movs	r3, #0
 8001574:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d101      	bne.n	8001580 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 800157c:	2301      	movs	r3, #1
 800157e:	e169      	b.n	8001854 <HAL_ADC_Init+0x2f4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	691b      	ldr	r3, [r3, #16]
 8001584:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800158a:	f003 0310 	and.w	r3, r3, #16
 800158e:	2b00      	cmp	r3, #0
 8001590:	d176      	bne.n	8001680 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001596:	2b00      	cmp	r3, #0
 8001598:	d152      	bne.n	8001640 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2200      	movs	r2, #0
 800159e:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2200      	movs	r2, #0
 80015a4:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2200      	movs	r2, #0
 80015aa:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2200      	movs	r2, #0
 80015b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80015b4:	6878      	ldr	r0, [r7, #4]
 80015b6:	f7ff fd65 	bl	8001084 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d13b      	bne.n	8001640 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80015c8:	6878      	ldr	r0, [r7, #4]
 80015ca:	f000 fd67 	bl	800209c <ADC_Disable>
 80015ce:	4603      	mov	r3, r0
 80015d0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015d8:	f003 0310 	and.w	r3, r3, #16
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d12f      	bne.n	8001640 <HAL_ADC_Init+0xe0>
 80015e0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d12b      	bne.n	8001640 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ec:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80015f0:	f023 0302 	bic.w	r3, r3, #2
 80015f4:	f043 0202 	orr.w	r2, r3, #2
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	689a      	ldr	r2, [r3, #8]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800160a:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	689a      	ldr	r2, [r3, #8]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800161a:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800161c:	4b8f      	ldr	r3, [pc, #572]	@ (800185c <HAL_ADC_Init+0x2fc>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a8f      	ldr	r2, [pc, #572]	@ (8001860 <HAL_ADC_Init+0x300>)
 8001622:	fba2 2303 	umull	r2, r3, r2, r3
 8001626:	0c9a      	lsrs	r2, r3, #18
 8001628:	4613      	mov	r3, r2
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	4413      	add	r3, r2
 800162e:	005b      	lsls	r3, r3, #1
 8001630:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001632:	e002      	b.n	800163a <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	3b01      	subs	r3, #1
 8001638:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800163a:	68bb      	ldr	r3, [r7, #8]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d1f9      	bne.n	8001634 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800164a:	2b00      	cmp	r3, #0
 800164c:	d007      	beq.n	800165e <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001658:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800165c:	d110      	bne.n	8001680 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001662:	f023 0312 	bic.w	r3, r3, #18
 8001666:	f043 0210 	orr.w	r2, r3, #16
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001672:	f043 0201 	orr.w	r2, r3, #1
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001684:	f003 0310 	and.w	r3, r3, #16
 8001688:	2b00      	cmp	r3, #0
 800168a:	f040 80d6 	bne.w	800183a <HAL_ADC_Init+0x2da>
 800168e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8001692:	2b00      	cmp	r3, #0
 8001694:	f040 80d1 	bne.w	800183a <HAL_ADC_Init+0x2da>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	f040 80c9 	bne.w	800183a <HAL_ADC_Init+0x2da>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ac:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80016b0:	f043 0202 	orr.w	r2, r3, #2
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80016b8:	4b6a      	ldr	r3, [pc, #424]	@ (8001864 <HAL_ADC_Init+0x304>)
 80016ba:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80016bc:	2300      	movs	r3, #0
 80016be:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	f003 0303 	and.w	r3, r3, #3
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d108      	bne.n	80016e0 <HAL_ADC_Init+0x180>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f003 0301 	and.w	r3, r3, #1
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d101      	bne.n	80016e0 <HAL_ADC_Init+0x180>
 80016dc:	2301      	movs	r3, #1
 80016de:	e000      	b.n	80016e2 <HAL_ADC_Init+0x182>
 80016e0:	2300      	movs	r3, #0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d11c      	bne.n	8001720 <HAL_ADC_Init+0x1c0>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80016e6:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d010      	beq.n	800170e <HAL_ADC_Init+0x1ae>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	f003 0303 	and.w	r3, r3, #3
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d107      	bne.n	8001708 <HAL_ADC_Init+0x1a8>
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f003 0301 	and.w	r3, r3, #1
 8001700:	2b01      	cmp	r3, #1
 8001702:	d101      	bne.n	8001708 <HAL_ADC_Init+0x1a8>
 8001704:	2301      	movs	r3, #1
 8001706:	e000      	b.n	800170a <HAL_ADC_Init+0x1aa>
 8001708:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800170a:	2b00      	cmp	r3, #0
 800170c:	d108      	bne.n	8001720 <HAL_ADC_Init+0x1c0>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 800170e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	431a      	orrs	r2, r3
 800171c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800171e:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	7e5b      	ldrb	r3, [r3, #25]
 8001724:	035b      	lsls	r3, r3, #13
 8001726:	687a      	ldr	r2, [r7, #4]
 8001728:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800172a:	2a01      	cmp	r2, #1
 800172c:	d002      	beq.n	8001734 <HAL_ADC_Init+0x1d4>
 800172e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001732:	e000      	b.n	8001736 <HAL_ADC_Init+0x1d6>
 8001734:	2200      	movs	r2, #0
 8001736:	431a      	orrs	r2, r3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	68db      	ldr	r3, [r3, #12]
 800173c:	431a      	orrs	r2, r3
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	4313      	orrs	r3, r2
 8001744:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001746:	4313      	orrs	r3, r2
 8001748:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001750:	2b01      	cmp	r3, #1
 8001752:	d11b      	bne.n	800178c <HAL_ADC_Init+0x22c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	7e5b      	ldrb	r3, [r3, #25]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d109      	bne.n	8001770 <HAL_ADC_Init+0x210>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001760:	3b01      	subs	r3, #1
 8001762:	045a      	lsls	r2, r3, #17
 8001764:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001766:	4313      	orrs	r3, r2
 8001768:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800176c:	663b      	str	r3, [r7, #96]	@ 0x60
 800176e:	e00d      	b.n	800178c <HAL_ADC_Init+0x22c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001774:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8001778:	f043 0220 	orr.w	r2, r3, #32
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001784:	f043 0201 	orr.w	r2, r3, #1
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001790:	2b01      	cmp	r3, #1
 8001792:	d007      	beq.n	80017a4 <HAL_ADC_Init+0x244>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800179c:	4313      	orrs	r3, r2
 800179e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80017a0:	4313      	orrs	r3, r2
 80017a2:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	f003 030c 	and.w	r3, r3, #12
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d114      	bne.n	80017dc <HAL_ADC_Init+0x27c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	68db      	ldr	r3, [r3, #12]
 80017b8:	687a      	ldr	r2, [r7, #4]
 80017ba:	6812      	ldr	r2, [r2, #0]
 80017bc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80017c0:	f023 0302 	bic.w	r3, r3, #2
 80017c4:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	7e1b      	ldrb	r3, [r3, #24]
 80017ca:	039a      	lsls	r2, r3, #14
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80017d2:	005b      	lsls	r3, r3, #1
 80017d4:	4313      	orrs	r3, r2
 80017d6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80017d8:	4313      	orrs	r3, r2
 80017da:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	68da      	ldr	r2, [r3, #12]
 80017e2:	4b21      	ldr	r3, [pc, #132]	@ (8001868 <HAL_ADC_Init+0x308>)
 80017e4:	4013      	ands	r3, r2
 80017e6:	687a      	ldr	r2, [r7, #4]
 80017e8:	6812      	ldr	r2, [r2, #0]
 80017ea:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80017ec:	430b      	orrs	r3, r1
 80017ee:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	691b      	ldr	r3, [r3, #16]
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d10c      	bne.n	8001812 <HAL_ADC_Init+0x2b2>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017fe:	f023 010f 	bic.w	r1, r3, #15
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	69db      	ldr	r3, [r3, #28]
 8001806:	1e5a      	subs	r2, r3, #1
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	430a      	orrs	r2, r1
 800180e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001810:	e007      	b.n	8001822 <HAL_ADC_Init+0x2c2>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f022 020f 	bic.w	r2, r2, #15
 8001820:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2200      	movs	r2, #0
 8001826:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800182c:	f023 0303 	bic.w	r3, r3, #3
 8001830:	f043 0201 	orr.w	r2, r3, #1
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	641a      	str	r2, [r3, #64]	@ 0x40
 8001838:	e00a      	b.n	8001850 <HAL_ADC_Init+0x2f0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800183e:	f023 0312 	bic.w	r3, r3, #18
 8001842:	f043 0210 	orr.w	r2, r3, #16
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 800184a:	2301      	movs	r3, #1
 800184c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001850:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8001854:	4618      	mov	r0, r3
 8001856:	3768      	adds	r7, #104	@ 0x68
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	20000004 	.word	0x20000004
 8001860:	431bde83 	.word	0x431bde83
 8001864:	50000300 	.word	0x50000300
 8001868:	fff0c007 	.word	0xfff0c007

0800186c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b086      	sub	sp, #24
 8001870:	af00      	add	r7, sp, #0
 8001872:	60f8      	str	r0, [r7, #12]
 8001874:	60b9      	str	r1, [r7, #8]
 8001876:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001878:	2300      	movs	r3, #0
 800187a:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	f003 0304 	and.w	r3, r3, #4
 8001886:	2b00      	cmp	r3, #0
 8001888:	d17e      	bne.n	8001988 <HAL_ADC_Start_DMA+0x11c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001890:	2b01      	cmp	r3, #1
 8001892:	d101      	bne.n	8001898 <HAL_ADC_Start_DMA+0x2c>
 8001894:	2302      	movs	r3, #2
 8001896:	e07a      	b.n	800198e <HAL_ADC_Start_DMA+0x122>
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	2201      	movs	r2, #1
 800189c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80018a0:	68f8      	ldr	r0, [r7, #12]
 80018a2:	f000 fb97 	bl	8001fd4 <ADC_Enable>
 80018a6:	4603      	mov	r3, r0
 80018a8:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80018aa:	7dfb      	ldrb	r3, [r7, #23]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d166      	bne.n	800197e <HAL_ADC_Start_DMA+0x112>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018b4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80018b8:	f023 0301 	bic.w	r3, r3, #1
 80018bc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	641a      	str	r2, [r3, #64]	@ 0x40
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018c8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	68db      	ldr	r3, [r3, #12]
 80018d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d007      	beq.n	80018ee <HAL_ADC_Start_DMA+0x82>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018e2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80018e6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	641a      	str	r2, [r3, #64]	@ 0x40
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018f2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80018f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80018fa:	d106      	bne.n	800190a <HAL_ADC_Start_DMA+0x9e>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001900:	f023 0206 	bic.w	r2, r3, #6
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	645a      	str	r2, [r3, #68]	@ 0x44
 8001908:	e002      	b.n	8001910 <HAL_ADC_Start_DMA+0xa4>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	2200      	movs	r2, #0
 800190e:	645a      	str	r2, [r3, #68]	@ 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	2200      	movs	r2, #0
 8001914:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800191c:	4a1e      	ldr	r2, [pc, #120]	@ (8001998 <HAL_ADC_Start_DMA+0x12c>)
 800191e:	629a      	str	r2, [r3, #40]	@ 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001924:	4a1d      	ldr	r2, [pc, #116]	@ (800199c <HAL_ADC_Start_DMA+0x130>)
 8001926:	62da      	str	r2, [r3, #44]	@ 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800192c:	4a1c      	ldr	r2, [pc, #112]	@ (80019a0 <HAL_ADC_Start_DMA+0x134>)
 800192e:	631a      	str	r2, [r3, #48]	@ 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	221c      	movs	r2, #28
 8001936:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	685a      	ldr	r2, [r3, #4]
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f042 0210 	orr.w	r2, r2, #16
 8001946:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	68da      	ldr	r2, [r3, #12]
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f042 0201 	orr.w	r2, r2, #1
 8001956:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	3340      	adds	r3, #64	@ 0x40
 8001962:	4619      	mov	r1, r3
 8001964:	68ba      	ldr	r2, [r7, #8]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	f001 fb77 	bl	800305a <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	689a      	ldr	r2, [r3, #8]
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f042 0204 	orr.w	r2, r2, #4
 800197a:	609a      	str	r2, [r3, #8]
 800197c:	e006      	b.n	800198c <HAL_ADC_Start_DMA+0x120>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	2200      	movs	r2, #0
 8001982:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8001986:	e001      	b.n	800198c <HAL_ADC_Start_DMA+0x120>
      __HAL_UNLOCK(hadc);
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001988:	2302      	movs	r3, #2
 800198a:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800198c:	7dfb      	ldrb	r3, [r7, #23]
}
 800198e:	4618      	mov	r0, r3
 8001990:	3718      	adds	r7, #24
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	08001f09 	.word	0x08001f09
 800199c:	08001f83 	.word	0x08001f83
 80019a0:	08001f9f 	.word	0x08001f9f

080019a4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b09b      	sub	sp, #108	@ 0x6c
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019ae:	2300      	movs	r3, #0
 80019b0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80019b4:	2300      	movs	r3, #0
 80019b6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d101      	bne.n	80019c6 <HAL_ADC_ConfigChannel+0x22>
 80019c2:	2302      	movs	r3, #2
 80019c4:	e295      	b.n	8001ef2 <HAL_ADC_ConfigChannel+0x54e>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2201      	movs	r2, #1
 80019ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	f003 0304 	and.w	r3, r3, #4
 80019d8:	2b00      	cmp	r3, #0
 80019da:	f040 8279 	bne.w	8001ed0 <HAL_ADC_ConfigChannel+0x52c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	2b04      	cmp	r3, #4
 80019e4:	d81c      	bhi.n	8001a20 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	685a      	ldr	r2, [r3, #4]
 80019f0:	4613      	mov	r3, r2
 80019f2:	005b      	lsls	r3, r3, #1
 80019f4:	4413      	add	r3, r2
 80019f6:	005b      	lsls	r3, r3, #1
 80019f8:	461a      	mov	r2, r3
 80019fa:	231f      	movs	r3, #31
 80019fc:	4093      	lsls	r3, r2
 80019fe:	43db      	mvns	r3, r3
 8001a00:	4019      	ands	r1, r3
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	6818      	ldr	r0, [r3, #0]
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	685a      	ldr	r2, [r3, #4]
 8001a0a:	4613      	mov	r3, r2
 8001a0c:	005b      	lsls	r3, r3, #1
 8001a0e:	4413      	add	r3, r2
 8001a10:	005b      	lsls	r3, r3, #1
 8001a12:	fa00 f203 	lsl.w	r2, r0, r3
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	430a      	orrs	r2, r1
 8001a1c:	631a      	str	r2, [r3, #48]	@ 0x30
 8001a1e:	e063      	b.n	8001ae8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	2b09      	cmp	r3, #9
 8001a26:	d81e      	bhi.n	8001a66 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	685a      	ldr	r2, [r3, #4]
 8001a32:	4613      	mov	r3, r2
 8001a34:	005b      	lsls	r3, r3, #1
 8001a36:	4413      	add	r3, r2
 8001a38:	005b      	lsls	r3, r3, #1
 8001a3a:	3b1e      	subs	r3, #30
 8001a3c:	221f      	movs	r2, #31
 8001a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a42:	43db      	mvns	r3, r3
 8001a44:	4019      	ands	r1, r3
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	6818      	ldr	r0, [r3, #0]
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	685a      	ldr	r2, [r3, #4]
 8001a4e:	4613      	mov	r3, r2
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	4413      	add	r3, r2
 8001a54:	005b      	lsls	r3, r3, #1
 8001a56:	3b1e      	subs	r3, #30
 8001a58:	fa00 f203 	lsl.w	r2, r0, r3
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	430a      	orrs	r2, r1
 8001a62:	635a      	str	r2, [r3, #52]	@ 0x34
 8001a64:	e040      	b.n	8001ae8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	2b0e      	cmp	r3, #14
 8001a6c:	d81e      	bhi.n	8001aac <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	685a      	ldr	r2, [r3, #4]
 8001a78:	4613      	mov	r3, r2
 8001a7a:	005b      	lsls	r3, r3, #1
 8001a7c:	4413      	add	r3, r2
 8001a7e:	005b      	lsls	r3, r3, #1
 8001a80:	3b3c      	subs	r3, #60	@ 0x3c
 8001a82:	221f      	movs	r2, #31
 8001a84:	fa02 f303 	lsl.w	r3, r2, r3
 8001a88:	43db      	mvns	r3, r3
 8001a8a:	4019      	ands	r1, r3
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	6818      	ldr	r0, [r3, #0]
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	685a      	ldr	r2, [r3, #4]
 8001a94:	4613      	mov	r3, r2
 8001a96:	005b      	lsls	r3, r3, #1
 8001a98:	4413      	add	r3, r2
 8001a9a:	005b      	lsls	r3, r3, #1
 8001a9c:	3b3c      	subs	r3, #60	@ 0x3c
 8001a9e:	fa00 f203 	lsl.w	r2, r0, r3
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	430a      	orrs	r2, r1
 8001aa8:	639a      	str	r2, [r3, #56]	@ 0x38
 8001aaa:	e01d      	b.n	8001ae8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	685a      	ldr	r2, [r3, #4]
 8001ab6:	4613      	mov	r3, r2
 8001ab8:	005b      	lsls	r3, r3, #1
 8001aba:	4413      	add	r3, r2
 8001abc:	005b      	lsls	r3, r3, #1
 8001abe:	3b5a      	subs	r3, #90	@ 0x5a
 8001ac0:	221f      	movs	r2, #31
 8001ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac6:	43db      	mvns	r3, r3
 8001ac8:	4019      	ands	r1, r3
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	6818      	ldr	r0, [r3, #0]
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	685a      	ldr	r2, [r3, #4]
 8001ad2:	4613      	mov	r3, r2
 8001ad4:	005b      	lsls	r3, r3, #1
 8001ad6:	4413      	add	r3, r2
 8001ad8:	005b      	lsls	r3, r3, #1
 8001ada:	3b5a      	subs	r3, #90	@ 0x5a
 8001adc:	fa00 f203 	lsl.w	r2, r0, r3
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	430a      	orrs	r2, r1
 8001ae6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	f003 030c 	and.w	r3, r3, #12
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	f040 80e5 	bne.w	8001cc2 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	2b09      	cmp	r3, #9
 8001afe:	d91c      	bls.n	8001b3a <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	6999      	ldr	r1, [r3, #24]
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	4613      	mov	r3, r2
 8001b0c:	005b      	lsls	r3, r3, #1
 8001b0e:	4413      	add	r3, r2
 8001b10:	3b1e      	subs	r3, #30
 8001b12:	2207      	movs	r2, #7
 8001b14:	fa02 f303 	lsl.w	r3, r2, r3
 8001b18:	43db      	mvns	r3, r3
 8001b1a:	4019      	ands	r1, r3
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	6898      	ldr	r0, [r3, #8]
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	4613      	mov	r3, r2
 8001b26:	005b      	lsls	r3, r3, #1
 8001b28:	4413      	add	r3, r2
 8001b2a:	3b1e      	subs	r3, #30
 8001b2c:	fa00 f203 	lsl.w	r2, r0, r3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	430a      	orrs	r2, r1
 8001b36:	619a      	str	r2, [r3, #24]
 8001b38:	e019      	b.n	8001b6e <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	6959      	ldr	r1, [r3, #20]
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	4613      	mov	r3, r2
 8001b46:	005b      	lsls	r3, r3, #1
 8001b48:	4413      	add	r3, r2
 8001b4a:	2207      	movs	r2, #7
 8001b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b50:	43db      	mvns	r3, r3
 8001b52:	4019      	ands	r1, r3
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	6898      	ldr	r0, [r3, #8]
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	4613      	mov	r3, r2
 8001b5e:	005b      	lsls	r3, r3, #1
 8001b60:	4413      	add	r3, r2
 8001b62:	fa00 f203 	lsl.w	r2, r0, r3
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	430a      	orrs	r2, r1
 8001b6c:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	695a      	ldr	r2, [r3, #20]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	08db      	lsrs	r3, r3, #3
 8001b7a:	f003 0303 	and.w	r3, r3, #3
 8001b7e:	005b      	lsls	r3, r3, #1
 8001b80:	fa02 f303 	lsl.w	r3, r2, r3
 8001b84:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	691b      	ldr	r3, [r3, #16]
 8001b8a:	3b01      	subs	r3, #1
 8001b8c:	2b03      	cmp	r3, #3
 8001b8e:	d84f      	bhi.n	8001c30 <HAL_ADC_ConfigChannel+0x28c>
 8001b90:	a201      	add	r2, pc, #4	@ (adr r2, 8001b98 <HAL_ADC_ConfigChannel+0x1f4>)
 8001b92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b96:	bf00      	nop
 8001b98:	08001ba9 	.word	0x08001ba9
 8001b9c:	08001bcb 	.word	0x08001bcb
 8001ba0:	08001bed 	.word	0x08001bed
 8001ba4:	08001c0f 	.word	0x08001c0f
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001bae:	4b97      	ldr	r3, [pc, #604]	@ (8001e0c <HAL_ADC_ConfigChannel+0x468>)
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	683a      	ldr	r2, [r7, #0]
 8001bb4:	6812      	ldr	r2, [r2, #0]
 8001bb6:	0691      	lsls	r1, r2, #26
 8001bb8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001bba:	430a      	orrs	r2, r1
 8001bbc:	431a      	orrs	r2, r3
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001bc6:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001bc8:	e07b      	b.n	8001cc2 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001bd0:	4b8e      	ldr	r3, [pc, #568]	@ (8001e0c <HAL_ADC_ConfigChannel+0x468>)
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	683a      	ldr	r2, [r7, #0]
 8001bd6:	6812      	ldr	r2, [r2, #0]
 8001bd8:	0691      	lsls	r1, r2, #26
 8001bda:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001bdc:	430a      	orrs	r2, r1
 8001bde:	431a      	orrs	r2, r3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001be8:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001bea:	e06a      	b.n	8001cc2 <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8001bf2:	4b86      	ldr	r3, [pc, #536]	@ (8001e0c <HAL_ADC_ConfigChannel+0x468>)
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	683a      	ldr	r2, [r7, #0]
 8001bf8:	6812      	ldr	r2, [r2, #0]
 8001bfa:	0691      	lsls	r1, r2, #26
 8001bfc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001bfe:	430a      	orrs	r2, r1
 8001c00:	431a      	orrs	r2, r3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001c0a:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001c0c:	e059      	b.n	8001cc2 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001c14:	4b7d      	ldr	r3, [pc, #500]	@ (8001e0c <HAL_ADC_ConfigChannel+0x468>)
 8001c16:	4013      	ands	r3, r2
 8001c18:	683a      	ldr	r2, [r7, #0]
 8001c1a:	6812      	ldr	r2, [r2, #0]
 8001c1c:	0691      	lsls	r1, r2, #26
 8001c1e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001c20:	430a      	orrs	r2, r1
 8001c22:	431a      	orrs	r2, r3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001c2c:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001c2e:	e048      	b.n	8001cc2 <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c36:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	069b      	lsls	r3, r3, #26
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d107      	bne.n	8001c54 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001c52:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001c5a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	069b      	lsls	r3, r3, #26
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d107      	bne.n	8001c78 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001c76:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001c7e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	069b      	lsls	r3, r3, #26
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d107      	bne.n	8001c9c <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001c9a:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001ca2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	069b      	lsls	r3, r3, #26
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d107      	bne.n	8001cc0 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001cbe:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 8001cc0:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	f003 0303 	and.w	r3, r3, #3
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d108      	bne.n	8001ce2 <HAL_ADC_ConfigChannel+0x33e>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 0301 	and.w	r3, r3, #1
 8001cda:	2b01      	cmp	r3, #1
 8001cdc:	d101      	bne.n	8001ce2 <HAL_ADC_ConfigChannel+0x33e>
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e000      	b.n	8001ce4 <HAL_ADC_ConfigChannel+0x340>
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	f040 80fe 	bne.w	8001ee6 <HAL_ADC_ConfigChannel+0x542>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	68db      	ldr	r3, [r3, #12]
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d00f      	beq.n	8001d12 <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	2201      	movs	r2, #1
 8001d00:	fa02 f303 	lsl.w	r3, r2, r3
 8001d04:	43da      	mvns	r2, r3
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	400a      	ands	r2, r1
 8001d0c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 8001d10:	e049      	b.n	8001da6 <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	2201      	movs	r2, #1
 8001d20:	409a      	lsls	r2, r3
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	430a      	orrs	r2, r1
 8001d28:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	2b09      	cmp	r3, #9
 8001d32:	d91c      	bls.n	8001d6e <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	6999      	ldr	r1, [r3, #24]
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	4613      	mov	r3, r2
 8001d40:	005b      	lsls	r3, r3, #1
 8001d42:	4413      	add	r3, r2
 8001d44:	3b1b      	subs	r3, #27
 8001d46:	2207      	movs	r2, #7
 8001d48:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4c:	43db      	mvns	r3, r3
 8001d4e:	4019      	ands	r1, r3
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	6898      	ldr	r0, [r3, #8]
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	4613      	mov	r3, r2
 8001d5a:	005b      	lsls	r3, r3, #1
 8001d5c:	4413      	add	r3, r2
 8001d5e:	3b1b      	subs	r3, #27
 8001d60:	fa00 f203 	lsl.w	r2, r0, r3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	430a      	orrs	r2, r1
 8001d6a:	619a      	str	r2, [r3, #24]
 8001d6c:	e01b      	b.n	8001da6 <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	6959      	ldr	r1, [r3, #20]
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	1c5a      	adds	r2, r3, #1
 8001d7a:	4613      	mov	r3, r2
 8001d7c:	005b      	lsls	r3, r3, #1
 8001d7e:	4413      	add	r3, r2
 8001d80:	2207      	movs	r2, #7
 8001d82:	fa02 f303 	lsl.w	r3, r2, r3
 8001d86:	43db      	mvns	r3, r3
 8001d88:	4019      	ands	r1, r3
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	6898      	ldr	r0, [r3, #8]
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	1c5a      	adds	r2, r3, #1
 8001d94:	4613      	mov	r3, r2
 8001d96:	005b      	lsls	r3, r3, #1
 8001d98:	4413      	add	r3, r2
 8001d9a:	fa00 f203 	lsl.w	r2, r0, r3
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	430a      	orrs	r2, r1
 8001da4:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001da6:	4b1a      	ldr	r3, [pc, #104]	@ (8001e10 <HAL_ADC_ConfigChannel+0x46c>)
 8001da8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	2b10      	cmp	r3, #16
 8001db0:	d105      	bne.n	8001dbe <HAL_ADC_ConfigChannel+0x41a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001db2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d014      	beq.n	8001de8 <HAL_ADC_ConfigChannel+0x444>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001dc2:	2b11      	cmp	r3, #17
 8001dc4:	d105      	bne.n	8001dd2 <HAL_ADC_ConfigChannel+0x42e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001dc6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d00a      	beq.n	8001de8 <HAL_ADC_ConfigChannel+0x444>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001dd6:	2b12      	cmp	r3, #18
 8001dd8:	f040 8085 	bne.w	8001ee6 <HAL_ADC_ConfigChannel+0x542>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001ddc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d17e      	bne.n	8001ee6 <HAL_ADC_ConfigChannel+0x542>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001de8:	2300      	movs	r3, #0
 8001dea:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	f003 0303 	and.w	r3, r3, #3
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d10c      	bne.n	8001e14 <HAL_ADC_ConfigChannel+0x470>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f003 0301 	and.w	r3, r3, #1
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d105      	bne.n	8001e14 <HAL_ADC_ConfigChannel+0x470>
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e004      	b.n	8001e16 <HAL_ADC_ConfigChannel+0x472>
 8001e0c:	83fff000 	.word	0x83fff000
 8001e10:	50000300 	.word	0x50000300
 8001e14:	2300      	movs	r3, #0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d150      	bne.n	8001ebc <HAL_ADC_ConfigChannel+0x518>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001e1a:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d010      	beq.n	8001e42 <HAL_ADC_ConfigChannel+0x49e>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	f003 0303 	and.w	r3, r3, #3
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d107      	bne.n	8001e3c <HAL_ADC_ConfigChannel+0x498>
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 0301 	and.w	r3, r3, #1
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d101      	bne.n	8001e3c <HAL_ADC_ConfigChannel+0x498>
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e000      	b.n	8001e3e <HAL_ADC_ConfigChannel+0x49a>
 8001e3c:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d13c      	bne.n	8001ebc <HAL_ADC_ConfigChannel+0x518>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	2b10      	cmp	r3, #16
 8001e48:	d11d      	bne.n	8001e86 <HAL_ADC_ConfigChannel+0x4e2>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001e52:	d118      	bne.n	8001e86 <HAL_ADC_ConfigChannel+0x4e2>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001e54:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001e5c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001e5e:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001e60:	4b27      	ldr	r3, [pc, #156]	@ (8001f00 <HAL_ADC_ConfigChannel+0x55c>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a27      	ldr	r2, [pc, #156]	@ (8001f04 <HAL_ADC_ConfigChannel+0x560>)
 8001e66:	fba2 2303 	umull	r2, r3, r2, r3
 8001e6a:	0c9a      	lsrs	r2, r3, #18
 8001e6c:	4613      	mov	r3, r2
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	4413      	add	r3, r2
 8001e72:	005b      	lsls	r3, r3, #1
 8001e74:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001e76:	e002      	b.n	8001e7e <HAL_ADC_ConfigChannel+0x4da>
          {
            wait_loop_index--;
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	3b01      	subs	r3, #1
 8001e7c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d1f9      	bne.n	8001e78 <HAL_ADC_ConfigChannel+0x4d4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001e84:	e02e      	b.n	8001ee4 <HAL_ADC_ConfigChannel+0x540>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	2b11      	cmp	r3, #17
 8001e8c:	d10b      	bne.n	8001ea6 <HAL_ADC_ConfigChannel+0x502>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001e96:	d106      	bne.n	8001ea6 <HAL_ADC_ConfigChannel+0x502>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001e98:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8001ea0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001ea2:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001ea4:	e01e      	b.n	8001ee4 <HAL_ADC_ConfigChannel+0x540>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	2b12      	cmp	r3, #18
 8001eac:	d11a      	bne.n	8001ee4 <HAL_ADC_ConfigChannel+0x540>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001eae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001eb6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001eb8:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001eba:	e013      	b.n	8001ee4 <HAL_ADC_ConfigChannel+0x540>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ec0:	f043 0220 	orr.w	r2, r3, #32
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8001ece:	e00a      	b.n	8001ee6 <HAL_ADC_ConfigChannel+0x542>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ed4:	f043 0220 	orr.w	r2, r3, #32
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8001ee2:	e000      	b.n	8001ee6 <HAL_ADC_ConfigChannel+0x542>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001ee4:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001eee:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	376c      	adds	r7, #108	@ 0x6c
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr
 8001efe:	bf00      	nop
 8001f00:	20000004 	.word	0x20000004
 8001f04:	431bde83 	.word	0x431bde83

08001f08 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b084      	sub	sp, #16
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f14:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f1a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d126      	bne.n	8001f70 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f26:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d115      	bne.n	8001f68 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d111      	bne.n	8001f68 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f48:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f54:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d105      	bne.n	8001f68 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f60:	f043 0201 	orr.w	r2, r3, #1
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001f68:	68f8      	ldr	r0, [r7, #12]
 8001f6a:	f7ff fadb 	bl	8001524 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001f6e:	e004      	b.n	8001f7a <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	4798      	blx	r3
}
 8001f7a:	bf00      	nop
 8001f7c:	3710      	adds	r7, #16
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}

08001f82 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001f82:	b580      	push	{r7, lr}
 8001f84:	b084      	sub	sp, #16
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f8e:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001f90:	68f8      	ldr	r0, [r7, #12]
 8001f92:	f7ff fad1 	bl	8001538 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 8001f96:	bf00      	nop
 8001f98:	3710      	adds	r7, #16
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}

08001f9e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001f9e:	b580      	push	{r7, lr}
 8001fa0:	b084      	sub	sp, #16
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001faa:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fb0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	641a      	str	r2, [r3, #64]	@ 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fbc:	f043 0204 	orr.w	r2, r3, #4
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	645a      	str	r2, [r3, #68]	@ 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001fc4:	68f8      	ldr	r0, [r7, #12]
 8001fc6:	f7ff fac1 	bl	800154c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001fca:	bf00      	nop
 8001fcc:	3710      	adds	r7, #16
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
	...

08001fd4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b084      	sub	sp, #16
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	f003 0303 	and.w	r3, r3, #3
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d108      	bne.n	8002000 <ADC_Enable+0x2c>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 0301 	and.w	r3, r3, #1
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d101      	bne.n	8002000 <ADC_Enable+0x2c>
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e000      	b.n	8002002 <ADC_Enable+0x2e>
 8002000:	2300      	movs	r3, #0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d143      	bne.n	800208e <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	689a      	ldr	r2, [r3, #8]
 800200c:	4b22      	ldr	r3, [pc, #136]	@ (8002098 <ADC_Enable+0xc4>)
 800200e:	4013      	ands	r3, r2
 8002010:	2b00      	cmp	r3, #0
 8002012:	d00d      	beq.n	8002030 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002018:	f043 0210 	orr.w	r2, r3, #16
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002024:	f043 0201 	orr.w	r2, r3, #1
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	645a      	str	r2, [r3, #68]	@ 0x44
      
      return HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	e02f      	b.n	8002090 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	689a      	ldr	r2, [r3, #8]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f042 0201 	orr.w	r2, r2, #1
 800203e:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002040:	f7ff fa64 	bl	800150c <HAL_GetTick>
 8002044:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002046:	e01b      	b.n	8002080 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002048:	f7ff fa60 	bl	800150c <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	2b02      	cmp	r3, #2
 8002054:	d914      	bls.n	8002080 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 0301 	and.w	r3, r3, #1
 8002060:	2b01      	cmp	r3, #1
 8002062:	d00d      	beq.n	8002080 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002068:	f043 0210 	orr.w	r2, r3, #16
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002074:	f043 0201 	orr.w	r2, r3, #1
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e007      	b.n	8002090 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 0301 	and.w	r3, r3, #1
 800208a:	2b01      	cmp	r3, #1
 800208c:	d1dc      	bne.n	8002048 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800208e:	2300      	movs	r3, #0
}
 8002090:	4618      	mov	r0, r3
 8002092:	3710      	adds	r7, #16
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}
 8002098:	8000003f 	.word	0x8000003f

0800209c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b084      	sub	sp, #16
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80020a4:	2300      	movs	r3, #0
 80020a6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	f003 0303 	and.w	r3, r3, #3
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d108      	bne.n	80020c8 <ADC_Disable+0x2c>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0301 	and.w	r3, r3, #1
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d101      	bne.n	80020c8 <ADC_Disable+0x2c>
 80020c4:	2301      	movs	r3, #1
 80020c6:	e000      	b.n	80020ca <ADC_Disable+0x2e>
 80020c8:	2300      	movs	r3, #0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d047      	beq.n	800215e <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	f003 030d 	and.w	r3, r3, #13
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d10f      	bne.n	80020fc <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	689a      	ldr	r2, [r3, #8]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f042 0202 	orr.w	r2, r2, #2
 80020ea:	609a      	str	r2, [r3, #8]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	2203      	movs	r2, #3
 80020f2:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80020f4:	f7ff fa0a 	bl	800150c <HAL_GetTick>
 80020f8:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80020fa:	e029      	b.n	8002150 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002100:	f043 0210 	orr.w	r2, r3, #16
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800210c:	f043 0201 	orr.w	r2, r3, #1
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 8002114:	2301      	movs	r3, #1
 8002116:	e023      	b.n	8002160 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002118:	f7ff f9f8 	bl	800150c <HAL_GetTick>
 800211c:	4602      	mov	r2, r0
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	2b02      	cmp	r3, #2
 8002124:	d914      	bls.n	8002150 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	f003 0301 	and.w	r3, r3, #1
 8002130:	2b01      	cmp	r3, #1
 8002132:	d10d      	bne.n	8002150 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002138:	f043 0210 	orr.w	r2, r3, #16
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002144:	f043 0201 	orr.w	r2, r3, #1
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	e007      	b.n	8002160 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	f003 0301 	and.w	r3, r3, #1
 800215a:	2b01      	cmp	r3, #1
 800215c:	d0dc      	beq.n	8002118 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800215e:	2300      	movs	r3, #0
}
 8002160:	4618      	mov	r0, r3
 8002162:	3710      	adds	r7, #16
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}

08002168 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b084      	sub	sp, #16
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d101      	bne.n	800217a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e0ed      	b.n	8002356 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002180:	b2db      	uxtb	r3, r3
 8002182:	2b00      	cmp	r3, #0
 8002184:	d102      	bne.n	800218c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f7fe ffe4 	bl	8001154 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f042 0201 	orr.w	r2, r2, #1
 800219a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800219c:	f7ff f9b6 	bl	800150c <HAL_GetTick>
 80021a0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80021a2:	e012      	b.n	80021ca <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80021a4:	f7ff f9b2 	bl	800150c <HAL_GetTick>
 80021a8:	4602      	mov	r2, r0
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	2b0a      	cmp	r3, #10
 80021b0:	d90b      	bls.n	80021ca <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021b6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2205      	movs	r2, #5
 80021c2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e0c5      	b.n	8002356 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	f003 0301 	and.w	r3, r3, #1
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d0e5      	beq.n	80021a4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f022 0202 	bic.w	r2, r2, #2
 80021e6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80021e8:	f7ff f990 	bl	800150c <HAL_GetTick>
 80021ec:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80021ee:	e012      	b.n	8002216 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80021f0:	f7ff f98c 	bl	800150c <HAL_GetTick>
 80021f4:	4602      	mov	r2, r0
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	2b0a      	cmp	r3, #10
 80021fc:	d90b      	bls.n	8002216 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002202:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2205      	movs	r2, #5
 800220e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e09f      	b.n	8002356 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f003 0302 	and.w	r3, r3, #2
 8002220:	2b00      	cmp	r3, #0
 8002222:	d1e5      	bne.n	80021f0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	7e1b      	ldrb	r3, [r3, #24]
 8002228:	2b01      	cmp	r3, #1
 800222a:	d108      	bne.n	800223e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800223a:	601a      	str	r2, [r3, #0]
 800223c:	e007      	b.n	800224e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800224c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	7e5b      	ldrb	r3, [r3, #25]
 8002252:	2b01      	cmp	r3, #1
 8002254:	d108      	bne.n	8002268 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002264:	601a      	str	r2, [r3, #0]
 8002266:	e007      	b.n	8002278 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002276:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	7e9b      	ldrb	r3, [r3, #26]
 800227c:	2b01      	cmp	r3, #1
 800227e:	d108      	bne.n	8002292 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f042 0220 	orr.w	r2, r2, #32
 800228e:	601a      	str	r2, [r3, #0]
 8002290:	e007      	b.n	80022a2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f022 0220 	bic.w	r2, r2, #32
 80022a0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	7edb      	ldrb	r3, [r3, #27]
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d108      	bne.n	80022bc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f022 0210 	bic.w	r2, r2, #16
 80022b8:	601a      	str	r2, [r3, #0]
 80022ba:	e007      	b.n	80022cc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f042 0210 	orr.w	r2, r2, #16
 80022ca:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	7f1b      	ldrb	r3, [r3, #28]
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d108      	bne.n	80022e6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f042 0208 	orr.w	r2, r2, #8
 80022e2:	601a      	str	r2, [r3, #0]
 80022e4:	e007      	b.n	80022f6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f022 0208 	bic.w	r2, r2, #8
 80022f4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	7f5b      	ldrb	r3, [r3, #29]
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d108      	bne.n	8002310 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f042 0204 	orr.w	r2, r2, #4
 800230c:	601a      	str	r2, [r3, #0]
 800230e:	e007      	b.n	8002320 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f022 0204 	bic.w	r2, r2, #4
 800231e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	689a      	ldr	r2, [r3, #8]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	431a      	orrs	r2, r3
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	691b      	ldr	r3, [r3, #16]
 800232e:	431a      	orrs	r2, r3
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	695b      	ldr	r3, [r3, #20]
 8002334:	ea42 0103 	orr.w	r1, r2, r3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	1e5a      	subs	r2, r3, #1
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	430a      	orrs	r2, r1
 8002344:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2200      	movs	r2, #0
 800234a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2201      	movs	r2, #1
 8002350:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002354:	2300      	movs	r3, #0
}
 8002356:	4618      	mov	r0, r3
 8002358:	3710      	adds	r7, #16
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}

0800235e <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800235e:	b480      	push	{r7}
 8002360:	b087      	sub	sp, #28
 8002362:	af00      	add	r7, sp, #0
 8002364:	6078      	str	r0, [r7, #4]
 8002366:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002374:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002376:	7cfb      	ldrb	r3, [r7, #19]
 8002378:	2b01      	cmp	r3, #1
 800237a:	d003      	beq.n	8002384 <HAL_CAN_ConfigFilter+0x26>
 800237c:	7cfb      	ldrb	r3, [r7, #19]
 800237e:	2b02      	cmp	r3, #2
 8002380:	f040 80aa 	bne.w	80024d8 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800238a:	f043 0201 	orr.w	r2, r3, #1
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	695b      	ldr	r3, [r3, #20]
 8002398:	f003 031f 	and.w	r3, r3, #31
 800239c:	2201      	movs	r2, #1
 800239e:	fa02 f303 	lsl.w	r3, r2, r3
 80023a2:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	43db      	mvns	r3, r3
 80023ae:	401a      	ands	r2, r3
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	69db      	ldr	r3, [r3, #28]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d123      	bne.n	8002406 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	43db      	mvns	r3, r3
 80023c8:	401a      	ands	r2, r3
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80023dc:	683a      	ldr	r2, [r7, #0]
 80023de:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80023e0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	3248      	adds	r2, #72	@ 0x48
 80023e6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80023fa:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80023fc:	6979      	ldr	r1, [r7, #20]
 80023fe:	3348      	adds	r3, #72	@ 0x48
 8002400:	00db      	lsls	r3, r3, #3
 8002402:	440b      	add	r3, r1
 8002404:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	69db      	ldr	r3, [r3, #28]
 800240a:	2b01      	cmp	r3, #1
 800240c:	d122      	bne.n	8002454 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	431a      	orrs	r2, r3
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800242a:	683a      	ldr	r2, [r7, #0]
 800242c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800242e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	3248      	adds	r2, #72	@ 0x48
 8002434:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	68db      	ldr	r3, [r3, #12]
 8002442:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002448:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800244a:	6979      	ldr	r1, [r7, #20]
 800244c:	3348      	adds	r3, #72	@ 0x48
 800244e:	00db      	lsls	r3, r3, #3
 8002450:	440b      	add	r3, r1
 8002452:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	699b      	ldr	r3, [r3, #24]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d109      	bne.n	8002470 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	43db      	mvns	r3, r3
 8002466:	401a      	ands	r2, r3
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800246e:	e007      	b.n	8002480 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	431a      	orrs	r2, r3
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	691b      	ldr	r3, [r3, #16]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d109      	bne.n	800249c <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	43db      	mvns	r3, r3
 8002492:	401a      	ands	r2, r3
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 800249a:	e007      	b.n	80024ac <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	431a      	orrs	r2, r3
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	6a1b      	ldr	r3, [r3, #32]
 80024b0:	2b01      	cmp	r3, #1
 80024b2:	d107      	bne.n	80024c4 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	431a      	orrs	r2, r3
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80024ca:	f023 0201 	bic.w	r2, r3, #1
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80024d4:	2300      	movs	r3, #0
 80024d6:	e006      	b.n	80024e6 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024dc:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
  }
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	371c      	adds	r7, #28
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr

080024f2 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80024f2:	b580      	push	{r7, lr}
 80024f4:	b084      	sub	sp, #16
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002500:	b2db      	uxtb	r3, r3
 8002502:	2b01      	cmp	r3, #1
 8002504:	d12e      	bne.n	8002564 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2202      	movs	r2, #2
 800250a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f022 0201 	bic.w	r2, r2, #1
 800251c:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800251e:	f7fe fff5 	bl	800150c <HAL_GetTick>
 8002522:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002524:	e012      	b.n	800254c <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002526:	f7fe fff1 	bl	800150c <HAL_GetTick>
 800252a:	4602      	mov	r2, r0
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	1ad3      	subs	r3, r2, r3
 8002530:	2b0a      	cmp	r3, #10
 8002532:	d90b      	bls.n	800254c <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002538:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2205      	movs	r2, #5
 8002544:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	e012      	b.n	8002572 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	f003 0301 	and.w	r3, r3, #1
 8002556:	2b00      	cmp	r3, #0
 8002558:	d1e5      	bne.n	8002526 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2200      	movs	r2, #0
 800255e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8002560:	2300      	movs	r3, #0
 8002562:	e006      	b.n	8002572 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002568:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002570:	2301      	movs	r3, #1
  }
}
 8002572:	4618      	mov	r0, r3
 8002574:	3710      	adds	r7, #16
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}

0800257a <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800257a:	b480      	push	{r7}
 800257c:	b089      	sub	sp, #36	@ 0x24
 800257e:	af00      	add	r7, sp, #0
 8002580:	60f8      	str	r0, [r7, #12]
 8002582:	60b9      	str	r1, [r7, #8]
 8002584:	607a      	str	r2, [r7, #4]
 8002586:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800258e:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002598:	7ffb      	ldrb	r3, [r7, #31]
 800259a:	2b01      	cmp	r3, #1
 800259c:	d003      	beq.n	80025a6 <HAL_CAN_AddTxMessage+0x2c>
 800259e:	7ffb      	ldrb	r3, [r7, #31]
 80025a0:	2b02      	cmp	r3, #2
 80025a2:	f040 80ad 	bne.w	8002700 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80025a6:	69bb      	ldr	r3, [r7, #24]
 80025a8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d10a      	bne.n	80025c6 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80025b0:	69bb      	ldr	r3, [r7, #24]
 80025b2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d105      	bne.n	80025c6 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80025ba:	69bb      	ldr	r3, [r7, #24]
 80025bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	f000 8095 	beq.w	80026f0 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80025c6:	69bb      	ldr	r3, [r7, #24]
 80025c8:	0e1b      	lsrs	r3, r3, #24
 80025ca:	f003 0303 	and.w	r3, r3, #3
 80025ce:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80025d0:	2201      	movs	r2, #1
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	409a      	lsls	r2, r3
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d10d      	bne.n	80025fe <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80025ec:	68f9      	ldr	r1, [r7, #12]
 80025ee:	6809      	ldr	r1, [r1, #0]
 80025f0:	431a      	orrs	r2, r3
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	3318      	adds	r3, #24
 80025f6:	011b      	lsls	r3, r3, #4
 80025f8:	440b      	add	r3, r1
 80025fa:	601a      	str	r2, [r3, #0]
 80025fc:	e00f      	b.n	800261e <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002608:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800260e:	68f9      	ldr	r1, [r7, #12]
 8002610:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002612:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	3318      	adds	r3, #24
 8002618:	011b      	lsls	r3, r3, #4
 800261a:	440b      	add	r3, r1
 800261c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	6819      	ldr	r1, [r3, #0]
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	691a      	ldr	r2, [r3, #16]
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	3318      	adds	r3, #24
 800262a:	011b      	lsls	r3, r3, #4
 800262c:	440b      	add	r3, r1
 800262e:	3304      	adds	r3, #4
 8002630:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	7d1b      	ldrb	r3, [r3, #20]
 8002636:	2b01      	cmp	r3, #1
 8002638:	d111      	bne.n	800265e <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	3318      	adds	r3, #24
 8002642:	011b      	lsls	r3, r3, #4
 8002644:	4413      	add	r3, r2
 8002646:	3304      	adds	r3, #4
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	68fa      	ldr	r2, [r7, #12]
 800264c:	6811      	ldr	r1, [r2, #0]
 800264e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	3318      	adds	r3, #24
 8002656:	011b      	lsls	r3, r3, #4
 8002658:	440b      	add	r3, r1
 800265a:	3304      	adds	r3, #4
 800265c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	3307      	adds	r3, #7
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	061a      	lsls	r2, r3, #24
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	3306      	adds	r3, #6
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	041b      	lsls	r3, r3, #16
 800266e:	431a      	orrs	r2, r3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	3305      	adds	r3, #5
 8002674:	781b      	ldrb	r3, [r3, #0]
 8002676:	021b      	lsls	r3, r3, #8
 8002678:	4313      	orrs	r3, r2
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	3204      	adds	r2, #4
 800267e:	7812      	ldrb	r2, [r2, #0]
 8002680:	4610      	mov	r0, r2
 8002682:	68fa      	ldr	r2, [r7, #12]
 8002684:	6811      	ldr	r1, [r2, #0]
 8002686:	ea43 0200 	orr.w	r2, r3, r0
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	011b      	lsls	r3, r3, #4
 800268e:	440b      	add	r3, r1
 8002690:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8002694:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	3303      	adds	r3, #3
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	061a      	lsls	r2, r3, #24
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	3302      	adds	r3, #2
 80026a2:	781b      	ldrb	r3, [r3, #0]
 80026a4:	041b      	lsls	r3, r3, #16
 80026a6:	431a      	orrs	r2, r3
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	3301      	adds	r3, #1
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	021b      	lsls	r3, r3, #8
 80026b0:	4313      	orrs	r3, r2
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	7812      	ldrb	r2, [r2, #0]
 80026b6:	4610      	mov	r0, r2
 80026b8:	68fa      	ldr	r2, [r7, #12]
 80026ba:	6811      	ldr	r1, [r2, #0]
 80026bc:	ea43 0200 	orr.w	r2, r3, r0
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	011b      	lsls	r3, r3, #4
 80026c4:	440b      	add	r3, r1
 80026c6:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80026ca:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	3318      	adds	r3, #24
 80026d4:	011b      	lsls	r3, r3, #4
 80026d6:	4413      	add	r3, r2
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	68fa      	ldr	r2, [r7, #12]
 80026dc:	6811      	ldr	r1, [r2, #0]
 80026de:	f043 0201 	orr.w	r2, r3, #1
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	3318      	adds	r3, #24
 80026e6:	011b      	lsls	r3, r3, #4
 80026e8:	440b      	add	r3, r1
 80026ea:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80026ec:	2300      	movs	r3, #0
 80026ee:	e00e      	b.n	800270e <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026f4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	e006      	b.n	800270e <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002704:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
  }
}
 800270e:	4618      	mov	r0, r3
 8002710:	3724      	adds	r7, #36	@ 0x24
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr

0800271a <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800271a:	b480      	push	{r7}
 800271c:	b087      	sub	sp, #28
 800271e:	af00      	add	r7, sp, #0
 8002720:	60f8      	str	r0, [r7, #12]
 8002722:	60b9      	str	r1, [r7, #8]
 8002724:	607a      	str	r2, [r7, #4]
 8002726:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800272e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002730:	7dfb      	ldrb	r3, [r7, #23]
 8002732:	2b01      	cmp	r3, #1
 8002734:	d003      	beq.n	800273e <HAL_CAN_GetRxMessage+0x24>
 8002736:	7dfb      	ldrb	r3, [r7, #23]
 8002738:	2b02      	cmp	r3, #2
 800273a:	f040 8103 	bne.w	8002944 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d10e      	bne.n	8002762 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	68db      	ldr	r3, [r3, #12]
 800274a:	f003 0303 	and.w	r3, r3, #3
 800274e:	2b00      	cmp	r3, #0
 8002750:	d116      	bne.n	8002780 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002756:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e0f7      	b.n	8002952 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	691b      	ldr	r3, [r3, #16]
 8002768:	f003 0303 	and.w	r3, r3, #3
 800276c:	2b00      	cmp	r3, #0
 800276e:	d107      	bne.n	8002780 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002774:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	e0e8      	b.n	8002952 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	331b      	adds	r3, #27
 8002788:	011b      	lsls	r3, r3, #4
 800278a:	4413      	add	r3, r2
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 0204 	and.w	r2, r3, #4
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d10c      	bne.n	80027b8 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	331b      	adds	r3, #27
 80027a6:	011b      	lsls	r3, r3, #4
 80027a8:	4413      	add	r3, r2
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	0d5b      	lsrs	r3, r3, #21
 80027ae:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	601a      	str	r2, [r3, #0]
 80027b6:	e00b      	b.n	80027d0 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	331b      	adds	r3, #27
 80027c0:	011b      	lsls	r3, r3, #4
 80027c2:	4413      	add	r3, r2
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	08db      	lsrs	r3, r3, #3
 80027c8:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	331b      	adds	r3, #27
 80027d8:	011b      	lsls	r3, r3, #4
 80027da:	4413      	add	r3, r2
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 0202 	and.w	r2, r3, #2
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	331b      	adds	r3, #27
 80027ee:	011b      	lsls	r3, r3, #4
 80027f0:	4413      	add	r3, r2
 80027f2:	3304      	adds	r3, #4
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0308 	and.w	r3, r3, #8
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d003      	beq.n	8002806 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2208      	movs	r2, #8
 8002802:	611a      	str	r2, [r3, #16]
 8002804:	e00b      	b.n	800281e <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	331b      	adds	r3, #27
 800280e:	011b      	lsls	r3, r3, #4
 8002810:	4413      	add	r3, r2
 8002812:	3304      	adds	r3, #4
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 020f 	and.w	r2, r3, #15
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	331b      	adds	r3, #27
 8002826:	011b      	lsls	r3, r3, #4
 8002828:	4413      	add	r3, r2
 800282a:	3304      	adds	r3, #4
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	0a1b      	lsrs	r3, r3, #8
 8002830:	b2da      	uxtb	r2, r3
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	331b      	adds	r3, #27
 800283e:	011b      	lsls	r3, r3, #4
 8002840:	4413      	add	r3, r2
 8002842:	3304      	adds	r3, #4
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	0c1b      	lsrs	r3, r3, #16
 8002848:	b29a      	uxth	r2, r3
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	011b      	lsls	r3, r3, #4
 8002856:	4413      	add	r3, r2
 8002858:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	b2da      	uxtb	r2, r3
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	011b      	lsls	r3, r3, #4
 800286c:	4413      	add	r3, r2
 800286e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	0a1a      	lsrs	r2, r3, #8
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	3301      	adds	r3, #1
 800287a:	b2d2      	uxtb	r2, r2
 800287c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	011b      	lsls	r3, r3, #4
 8002886:	4413      	add	r3, r2
 8002888:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	0c1a      	lsrs	r2, r3, #16
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	3302      	adds	r3, #2
 8002894:	b2d2      	uxtb	r2, r2
 8002896:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	011b      	lsls	r3, r3, #4
 80028a0:	4413      	add	r3, r2
 80028a2:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	0e1a      	lsrs	r2, r3, #24
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	3303      	adds	r3, #3
 80028ae:	b2d2      	uxtb	r2, r2
 80028b0:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	011b      	lsls	r3, r3, #4
 80028ba:	4413      	add	r3, r2
 80028bc:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	3304      	adds	r3, #4
 80028c6:	b2d2      	uxtb	r2, r2
 80028c8:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	011b      	lsls	r3, r3, #4
 80028d2:	4413      	add	r3, r2
 80028d4:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	0a1a      	lsrs	r2, r3, #8
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	3305      	adds	r3, #5
 80028e0:	b2d2      	uxtb	r2, r2
 80028e2:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	011b      	lsls	r3, r3, #4
 80028ec:	4413      	add	r3, r2
 80028ee:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	0c1a      	lsrs	r2, r3, #16
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	3306      	adds	r3, #6
 80028fa:	b2d2      	uxtb	r2, r2
 80028fc:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	011b      	lsls	r3, r3, #4
 8002906:	4413      	add	r3, r2
 8002908:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	0e1a      	lsrs	r2, r3, #24
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	3307      	adds	r3, #7
 8002914:	b2d2      	uxtb	r2, r2
 8002916:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d108      	bne.n	8002930 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	68da      	ldr	r2, [r3, #12]
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f042 0220 	orr.w	r2, r2, #32
 800292c:	60da      	str	r2, [r3, #12]
 800292e:	e007      	b.n	8002940 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	691a      	ldr	r2, [r3, #16]
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f042 0220 	orr.w	r2, r2, #32
 800293e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002940:	2300      	movs	r3, #0
 8002942:	e006      	b.n	8002952 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002948:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002950:	2301      	movs	r3, #1
  }
}
 8002952:	4618      	mov	r0, r3
 8002954:	371c      	adds	r7, #28
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr

0800295e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800295e:	b480      	push	{r7}
 8002960:	b085      	sub	sp, #20
 8002962:	af00      	add	r7, sp, #0
 8002964:	6078      	str	r0, [r7, #4]
 8002966:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800296e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002970:	7bfb      	ldrb	r3, [r7, #15]
 8002972:	2b01      	cmp	r3, #1
 8002974:	d002      	beq.n	800297c <HAL_CAN_ActivateNotification+0x1e>
 8002976:	7bfb      	ldrb	r3, [r7, #15]
 8002978:	2b02      	cmp	r3, #2
 800297a:	d109      	bne.n	8002990 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	6959      	ldr	r1, [r3, #20]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	683a      	ldr	r2, [r7, #0]
 8002988:	430a      	orrs	r2, r1
 800298a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800298c:	2300      	movs	r3, #0
 800298e:	e006      	b.n	800299e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002994:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800299c:	2301      	movs	r3, #1
  }
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3714      	adds	r7, #20
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr

080029aa <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80029aa:	b580      	push	{r7, lr}
 80029ac:	b08a      	sub	sp, #40	@ 0x28
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80029b2:	2300      	movs	r3, #0
 80029b4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	695b      	ldr	r3, [r3, #20]
 80029bc:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	691b      	ldr	r3, [r3, #16]
 80029dc:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	699b      	ldr	r3, [r3, #24]
 80029e4:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80029e6:	6a3b      	ldr	r3, [r7, #32]
 80029e8:	f003 0301 	and.w	r3, r3, #1
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d07c      	beq.n	8002aea <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80029f0:	69bb      	ldr	r3, [r7, #24]
 80029f2:	f003 0301 	and.w	r3, r3, #1
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d023      	beq.n	8002a42 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	2201      	movs	r2, #1
 8002a00:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002a02:	69bb      	ldr	r3, [r7, #24]
 8002a04:	f003 0302 	and.w	r3, r3, #2
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d003      	beq.n	8002a14 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	f000 f983 	bl	8002d18 <HAL_CAN_TxMailbox0CompleteCallback>
 8002a12:	e016      	b.n	8002a42 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002a14:	69bb      	ldr	r3, [r7, #24]
 8002a16:	f003 0304 	and.w	r3, r3, #4
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d004      	beq.n	8002a28 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a20:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002a24:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a26:	e00c      	b.n	8002a42 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002a28:	69bb      	ldr	r3, [r7, #24]
 8002a2a:	f003 0308 	and.w	r3, r3, #8
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d004      	beq.n	8002a3c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a34:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002a38:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a3a:	e002      	b.n	8002a42 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002a3c:	6878      	ldr	r0, [r7, #4]
 8002a3e:	f000 f989 	bl	8002d54 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002a42:	69bb      	ldr	r3, [r7, #24]
 8002a44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d024      	beq.n	8002a96 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002a54:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002a56:	69bb      	ldr	r3, [r7, #24]
 8002a58:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d003      	beq.n	8002a68 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	f000 f963 	bl	8002d2c <HAL_CAN_TxMailbox1CompleteCallback>
 8002a66:	e016      	b.n	8002a96 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002a68:	69bb      	ldr	r3, [r7, #24]
 8002a6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d004      	beq.n	8002a7c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a74:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002a78:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a7a:	e00c      	b.n	8002a96 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002a7c:	69bb      	ldr	r3, [r7, #24]
 8002a7e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d004      	beq.n	8002a90 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a88:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a8e:	e002      	b.n	8002a96 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002a90:	6878      	ldr	r0, [r7, #4]
 8002a92:	f000 f969 	bl	8002d68 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002a96:	69bb      	ldr	r3, [r7, #24]
 8002a98:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d024      	beq.n	8002aea <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002aa8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002aaa:	69bb      	ldr	r3, [r7, #24]
 8002aac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d003      	beq.n	8002abc <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002ab4:	6878      	ldr	r0, [r7, #4]
 8002ab6:	f000 f943 	bl	8002d40 <HAL_CAN_TxMailbox2CompleteCallback>
 8002aba:	e016      	b.n	8002aea <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002abc:	69bb      	ldr	r3, [r7, #24]
 8002abe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d004      	beq.n	8002ad0 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ac8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002acc:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ace:	e00c      	b.n	8002aea <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002ad0:	69bb      	ldr	r3, [r7, #24]
 8002ad2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d004      	beq.n	8002ae4 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002adc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ae0:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ae2:	e002      	b.n	8002aea <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	f000 f949 	bl	8002d7c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002aea:	6a3b      	ldr	r3, [r7, #32]
 8002aec:	f003 0308 	and.w	r3, r3, #8
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d00c      	beq.n	8002b0e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	f003 0310 	and.w	r3, r3, #16
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d007      	beq.n	8002b0e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b00:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002b04:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	2210      	movs	r2, #16
 8002b0c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002b0e:	6a3b      	ldr	r3, [r7, #32]
 8002b10:	f003 0304 	and.w	r3, r3, #4
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d00b      	beq.n	8002b30 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	f003 0308 	and.w	r3, r3, #8
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d006      	beq.n	8002b30 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	2208      	movs	r2, #8
 8002b28:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f000 f930 	bl	8002d90 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002b30:	6a3b      	ldr	r3, [r7, #32]
 8002b32:	f003 0302 	and.w	r3, r3, #2
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d009      	beq.n	8002b4e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	f003 0303 	and.w	r3, r3, #3
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d002      	beq.n	8002b4e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002b48:	6878      	ldr	r0, [r7, #4]
 8002b4a:	f7fd fdd7 	bl	80006fc <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002b4e:	6a3b      	ldr	r3, [r7, #32]
 8002b50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d00c      	beq.n	8002b72 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	f003 0310 	and.w	r3, r3, #16
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d007      	beq.n	8002b72 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b64:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002b68:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	2210      	movs	r2, #16
 8002b70:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002b72:	6a3b      	ldr	r3, [r7, #32]
 8002b74:	f003 0320 	and.w	r3, r3, #32
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d00b      	beq.n	8002b94 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	f003 0308 	and.w	r3, r3, #8
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d006      	beq.n	8002b94 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	2208      	movs	r2, #8
 8002b8c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f000 f912 	bl	8002db8 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002b94:	6a3b      	ldr	r3, [r7, #32]
 8002b96:	f003 0310 	and.w	r3, r3, #16
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d009      	beq.n	8002bb2 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	691b      	ldr	r3, [r3, #16]
 8002ba4:	f003 0303 	and.w	r3, r3, #3
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d002      	beq.n	8002bb2 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	f000 f8f9 	bl	8002da4 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002bb2:	6a3b      	ldr	r3, [r7, #32]
 8002bb4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d00b      	beq.n	8002bd4 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	f003 0310 	and.w	r3, r3, #16
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d006      	beq.n	8002bd4 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	2210      	movs	r2, #16
 8002bcc:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f000 f8fc 	bl	8002dcc <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002bd4:	6a3b      	ldr	r3, [r7, #32]
 8002bd6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d00b      	beq.n	8002bf6 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	f003 0308 	and.w	r3, r3, #8
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d006      	beq.n	8002bf6 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	2208      	movs	r2, #8
 8002bee:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	f000 f8f5 	bl	8002de0 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002bf6:	6a3b      	ldr	r3, [r7, #32]
 8002bf8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d07b      	beq.n	8002cf8 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	f003 0304 	and.w	r3, r3, #4
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d072      	beq.n	8002cf0 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002c0a:	6a3b      	ldr	r3, [r7, #32]
 8002c0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d008      	beq.n	8002c26 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d003      	beq.n	8002c26 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c20:	f043 0301 	orr.w	r3, r3, #1
 8002c24:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002c26:	6a3b      	ldr	r3, [r7, #32]
 8002c28:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d008      	beq.n	8002c42 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d003      	beq.n	8002c42 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c3c:	f043 0302 	orr.w	r3, r3, #2
 8002c40:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002c42:	6a3b      	ldr	r3, [r7, #32]
 8002c44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d008      	beq.n	8002c5e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d003      	beq.n	8002c5e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c58:	f043 0304 	orr.w	r3, r3, #4
 8002c5c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002c5e:	6a3b      	ldr	r3, [r7, #32]
 8002c60:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d043      	beq.n	8002cf0 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d03e      	beq.n	8002cf0 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002c78:	2b60      	cmp	r3, #96	@ 0x60
 8002c7a:	d02b      	beq.n	8002cd4 <HAL_CAN_IRQHandler+0x32a>
 8002c7c:	2b60      	cmp	r3, #96	@ 0x60
 8002c7e:	d82e      	bhi.n	8002cde <HAL_CAN_IRQHandler+0x334>
 8002c80:	2b50      	cmp	r3, #80	@ 0x50
 8002c82:	d022      	beq.n	8002cca <HAL_CAN_IRQHandler+0x320>
 8002c84:	2b50      	cmp	r3, #80	@ 0x50
 8002c86:	d82a      	bhi.n	8002cde <HAL_CAN_IRQHandler+0x334>
 8002c88:	2b40      	cmp	r3, #64	@ 0x40
 8002c8a:	d019      	beq.n	8002cc0 <HAL_CAN_IRQHandler+0x316>
 8002c8c:	2b40      	cmp	r3, #64	@ 0x40
 8002c8e:	d826      	bhi.n	8002cde <HAL_CAN_IRQHandler+0x334>
 8002c90:	2b30      	cmp	r3, #48	@ 0x30
 8002c92:	d010      	beq.n	8002cb6 <HAL_CAN_IRQHandler+0x30c>
 8002c94:	2b30      	cmp	r3, #48	@ 0x30
 8002c96:	d822      	bhi.n	8002cde <HAL_CAN_IRQHandler+0x334>
 8002c98:	2b10      	cmp	r3, #16
 8002c9a:	d002      	beq.n	8002ca2 <HAL_CAN_IRQHandler+0x2f8>
 8002c9c:	2b20      	cmp	r3, #32
 8002c9e:	d005      	beq.n	8002cac <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002ca0:	e01d      	b.n	8002cde <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ca4:	f043 0308 	orr.w	r3, r3, #8
 8002ca8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002caa:	e019      	b.n	8002ce0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002cac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cae:	f043 0310 	orr.w	r3, r3, #16
 8002cb2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002cb4:	e014      	b.n	8002ce0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cb8:	f043 0320 	orr.w	r3, r3, #32
 8002cbc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002cbe:	e00f      	b.n	8002ce0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cc2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002cc6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002cc8:	e00a      	b.n	8002ce0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ccc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002cd0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002cd2:	e005      	b.n	8002ce0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002cd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cd6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cda:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002cdc:	e000      	b.n	8002ce0 <HAL_CAN_IRQHandler+0x336>
            break;
 8002cde:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	699a      	ldr	r2, [r3, #24]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002cee:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	2204      	movs	r2, #4
 8002cf6:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d008      	beq.n	8002d10 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d04:	431a      	orrs	r2, r3
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f000 f872 	bl	8002df4 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002d10:	bf00      	nop
 8002d12:	3728      	adds	r7, #40	@ 0x28
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}

08002d18 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b083      	sub	sp, #12
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002d20:	bf00      	nop
 8002d22:	370c      	adds	r7, #12
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr

08002d2c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002d34:	bf00      	nop
 8002d36:	370c      	adds	r7, #12
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr

08002d40 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b083      	sub	sp, #12
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002d48:	bf00      	nop
 8002d4a:	370c      	adds	r7, #12
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr

08002d54 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002d5c:	bf00      	nop
 8002d5e:	370c      	adds	r7, #12
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr

08002d68 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002d70:	bf00      	nop
 8002d72:	370c      	adds	r7, #12
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr

08002d7c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002d84:	bf00      	nop
 8002d86:	370c      	adds	r7, #12
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr

08002d90 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b083      	sub	sp, #12
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002d98:	bf00      	nop
 8002d9a:	370c      	adds	r7, #12
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr

08002da4 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002dac:	bf00      	nop
 8002dae:	370c      	adds	r7, #12
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr

08002db8 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b083      	sub	sp, #12
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002dc0:	bf00      	nop
 8002dc2:	370c      	adds	r7, #12
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr

08002dcc <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b083      	sub	sp, #12
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002dd4:	bf00      	nop
 8002dd6:	370c      	adds	r7, #12
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr

08002de0 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002de8:	bf00      	nop
 8002dea:	370c      	adds	r7, #12
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr

08002df4 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002dfc:	bf00      	nop
 8002dfe:	370c      	adds	r7, #12
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr

08002e08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b085      	sub	sp, #20
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	f003 0307 	and.w	r3, r3, #7
 8002e16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e18:	4b0c      	ldr	r3, [pc, #48]	@ (8002e4c <__NVIC_SetPriorityGrouping+0x44>)
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e1e:	68ba      	ldr	r2, [r7, #8]
 8002e20:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002e24:	4013      	ands	r3, r2
 8002e26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e30:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002e34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e3a:	4a04      	ldr	r2, [pc, #16]	@ (8002e4c <__NVIC_SetPriorityGrouping+0x44>)
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	60d3      	str	r3, [r2, #12]
}
 8002e40:	bf00      	nop
 8002e42:	3714      	adds	r7, #20
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr
 8002e4c:	e000ed00 	.word	0xe000ed00

08002e50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e50:	b480      	push	{r7}
 8002e52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e54:	4b04      	ldr	r3, [pc, #16]	@ (8002e68 <__NVIC_GetPriorityGrouping+0x18>)
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	0a1b      	lsrs	r3, r3, #8
 8002e5a:	f003 0307 	and.w	r3, r3, #7
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr
 8002e68:	e000ed00 	.word	0xe000ed00

08002e6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b083      	sub	sp, #12
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	4603      	mov	r3, r0
 8002e74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	db0b      	blt.n	8002e96 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e7e:	79fb      	ldrb	r3, [r7, #7]
 8002e80:	f003 021f 	and.w	r2, r3, #31
 8002e84:	4907      	ldr	r1, [pc, #28]	@ (8002ea4 <__NVIC_EnableIRQ+0x38>)
 8002e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e8a:	095b      	lsrs	r3, r3, #5
 8002e8c:	2001      	movs	r0, #1
 8002e8e:	fa00 f202 	lsl.w	r2, r0, r2
 8002e92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002e96:	bf00      	nop
 8002e98:	370c      	adds	r7, #12
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea0:	4770      	bx	lr
 8002ea2:	bf00      	nop
 8002ea4:	e000e100 	.word	0xe000e100

08002ea8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b083      	sub	sp, #12
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	4603      	mov	r3, r0
 8002eb0:	6039      	str	r1, [r7, #0]
 8002eb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002eb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	db0a      	blt.n	8002ed2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	b2da      	uxtb	r2, r3
 8002ec0:	490c      	ldr	r1, [pc, #48]	@ (8002ef4 <__NVIC_SetPriority+0x4c>)
 8002ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ec6:	0112      	lsls	r2, r2, #4
 8002ec8:	b2d2      	uxtb	r2, r2
 8002eca:	440b      	add	r3, r1
 8002ecc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ed0:	e00a      	b.n	8002ee8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	b2da      	uxtb	r2, r3
 8002ed6:	4908      	ldr	r1, [pc, #32]	@ (8002ef8 <__NVIC_SetPriority+0x50>)
 8002ed8:	79fb      	ldrb	r3, [r7, #7]
 8002eda:	f003 030f 	and.w	r3, r3, #15
 8002ede:	3b04      	subs	r3, #4
 8002ee0:	0112      	lsls	r2, r2, #4
 8002ee2:	b2d2      	uxtb	r2, r2
 8002ee4:	440b      	add	r3, r1
 8002ee6:	761a      	strb	r2, [r3, #24]
}
 8002ee8:	bf00      	nop
 8002eea:	370c      	adds	r7, #12
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr
 8002ef4:	e000e100 	.word	0xe000e100
 8002ef8:	e000ed00 	.word	0xe000ed00

08002efc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b089      	sub	sp, #36	@ 0x24
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	60f8      	str	r0, [r7, #12]
 8002f04:	60b9      	str	r1, [r7, #8]
 8002f06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	f003 0307 	and.w	r3, r3, #7
 8002f0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f10:	69fb      	ldr	r3, [r7, #28]
 8002f12:	f1c3 0307 	rsb	r3, r3, #7
 8002f16:	2b04      	cmp	r3, #4
 8002f18:	bf28      	it	cs
 8002f1a:	2304      	movcs	r3, #4
 8002f1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f1e:	69fb      	ldr	r3, [r7, #28]
 8002f20:	3304      	adds	r3, #4
 8002f22:	2b06      	cmp	r3, #6
 8002f24:	d902      	bls.n	8002f2c <NVIC_EncodePriority+0x30>
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	3b03      	subs	r3, #3
 8002f2a:	e000      	b.n	8002f2e <NVIC_EncodePriority+0x32>
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f30:	f04f 32ff 	mov.w	r2, #4294967295
 8002f34:	69bb      	ldr	r3, [r7, #24]
 8002f36:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3a:	43da      	mvns	r2, r3
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	401a      	ands	r2, r3
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f44:	f04f 31ff 	mov.w	r1, #4294967295
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f4e:	43d9      	mvns	r1, r3
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f54:	4313      	orrs	r3, r2
         );
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3724      	adds	r7, #36	@ 0x24
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr

08002f62 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f62:	b580      	push	{r7, lr}
 8002f64:	b082      	sub	sp, #8
 8002f66:	af00      	add	r7, sp, #0
 8002f68:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	f7ff ff4c 	bl	8002e08 <__NVIC_SetPriorityGrouping>
}
 8002f70:	bf00      	nop
 8002f72:	3708      	adds	r7, #8
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}

08002f78 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b086      	sub	sp, #24
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	4603      	mov	r3, r0
 8002f80:	60b9      	str	r1, [r7, #8]
 8002f82:	607a      	str	r2, [r7, #4]
 8002f84:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f86:	2300      	movs	r3, #0
 8002f88:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f8a:	f7ff ff61 	bl	8002e50 <__NVIC_GetPriorityGrouping>
 8002f8e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f90:	687a      	ldr	r2, [r7, #4]
 8002f92:	68b9      	ldr	r1, [r7, #8]
 8002f94:	6978      	ldr	r0, [r7, #20]
 8002f96:	f7ff ffb1 	bl	8002efc <NVIC_EncodePriority>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fa0:	4611      	mov	r1, r2
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f7ff ff80 	bl	8002ea8 <__NVIC_SetPriority>
}
 8002fa8:	bf00      	nop
 8002faa:	3718      	adds	r7, #24
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}

08002fb0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b082      	sub	sp, #8
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f7ff ff54 	bl	8002e6c <__NVIC_EnableIRQ>
}
 8002fc4:	bf00      	nop
 8002fc6:	3708      	adds	r7, #8
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}

08002fcc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b084      	sub	sp, #16
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d101      	bne.n	8002fe2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e037      	b.n	8003052 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2202      	movs	r2, #2
 8002fe6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002ff8:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002ffc:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003006:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003012:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	695b      	ldr	r3, [r3, #20]
 8003018:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800301e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	69db      	ldr	r3, [r3, #28]
 8003024:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003026:	68fa      	ldr	r2, [r7, #12]
 8003028:	4313      	orrs	r3, r2
 800302a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	68fa      	ldr	r2, [r7, #12]
 8003032:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	f000 f941 	bl	80032bc <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2200      	movs	r2, #0
 800303e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2201      	movs	r2, #1
 8003044:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2200      	movs	r2, #0
 800304c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003050:	2300      	movs	r3, #0
}
 8003052:	4618      	mov	r0, r3
 8003054:	3710      	adds	r7, #16
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}

0800305a <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800305a:	b580      	push	{r7, lr}
 800305c:	b086      	sub	sp, #24
 800305e:	af00      	add	r7, sp, #0
 8003060:	60f8      	str	r0, [r7, #12]
 8003062:	60b9      	str	r1, [r7, #8]
 8003064:	607a      	str	r2, [r7, #4]
 8003066:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003068:	2300      	movs	r3, #0
 800306a:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003072:	2b01      	cmp	r3, #1
 8003074:	d101      	bne.n	800307a <HAL_DMA_Start_IT+0x20>
 8003076:	2302      	movs	r3, #2
 8003078:	e04a      	b.n	8003110 <HAL_DMA_Start_IT+0xb6>
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2201      	movs	r2, #1
 800307e:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003088:	2b01      	cmp	r3, #1
 800308a:	d13a      	bne.n	8003102 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2202      	movs	r2, #2
 8003090:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2200      	movs	r2, #0
 8003098:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f022 0201 	bic.w	r2, r2, #1
 80030a8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	687a      	ldr	r2, [r7, #4]
 80030ae:	68b9      	ldr	r1, [r7, #8]
 80030b0:	68f8      	ldr	r0, [r7, #12]
 80030b2:	f000 f8d4 	bl	800325e <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d008      	beq.n	80030d0 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f042 020e 	orr.w	r2, r2, #14
 80030cc:	601a      	str	r2, [r3, #0]
 80030ce:	e00f      	b.n	80030f0 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f042 020a 	orr.w	r2, r2, #10
 80030de:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f022 0204 	bic.w	r2, r2, #4
 80030ee:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f042 0201 	orr.w	r2, r2, #1
 80030fe:	601a      	str	r2, [r3, #0]
 8003100:	e005      	b.n	800310e <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2200      	movs	r2, #0
 8003106:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800310a:	2302      	movs	r3, #2
 800310c:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800310e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003110:	4618      	mov	r0, r3
 8003112:	3718      	adds	r7, #24
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}

08003118 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b084      	sub	sp, #16
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003134:	2204      	movs	r2, #4
 8003136:	409a      	lsls	r2, r3
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	4013      	ands	r3, r2
 800313c:	2b00      	cmp	r3, #0
 800313e:	d024      	beq.n	800318a <HAL_DMA_IRQHandler+0x72>
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	f003 0304 	and.w	r3, r3, #4
 8003146:	2b00      	cmp	r3, #0
 8003148:	d01f      	beq.n	800318a <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 0320 	and.w	r3, r3, #32
 8003154:	2b00      	cmp	r3, #0
 8003156:	d107      	bne.n	8003168 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f022 0204 	bic.w	r2, r2, #4
 8003166:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003170:	2104      	movs	r1, #4
 8003172:	fa01 f202 	lsl.w	r2, r1, r2
 8003176:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800317c:	2b00      	cmp	r3, #0
 800317e:	d06a      	beq.n	8003256 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003184:	6878      	ldr	r0, [r7, #4]
 8003186:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003188:	e065      	b.n	8003256 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800318e:	2202      	movs	r2, #2
 8003190:	409a      	lsls	r2, r3
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	4013      	ands	r3, r2
 8003196:	2b00      	cmp	r3, #0
 8003198:	d02c      	beq.n	80031f4 <HAL_DMA_IRQHandler+0xdc>
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	f003 0302 	and.w	r3, r3, #2
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d027      	beq.n	80031f4 <HAL_DMA_IRQHandler+0xdc>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 0320 	and.w	r3, r3, #32
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d10b      	bne.n	80031ca <HAL_DMA_IRQHandler+0xb2>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f022 020a 	bic.w	r2, r2, #10
 80031c0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2201      	movs	r2, #1
 80031c6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031d2:	2102      	movs	r1, #2
 80031d4:	fa01 f202 	lsl.w	r2, r1, r2
 80031d8:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2200      	movs	r2, #0
 80031de:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d035      	beq.n	8003256 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80031f2:	e030      	b.n	8003256 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031f8:	2208      	movs	r2, #8
 80031fa:	409a      	lsls	r2, r3
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	4013      	ands	r3, r2
 8003200:	2b00      	cmp	r3, #0
 8003202:	d028      	beq.n	8003256 <HAL_DMA_IRQHandler+0x13e>
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	f003 0308 	and.w	r3, r3, #8
 800320a:	2b00      	cmp	r3, #0
 800320c:	d023      	beq.n	8003256 <HAL_DMA_IRQHandler+0x13e>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f022 020e 	bic.w	r2, r2, #14
 800321c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003226:	2101      	movs	r1, #1
 8003228:	fa01 f202 	lsl.w	r2, r1, r2
 800322c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2201      	movs	r2, #1
 8003232:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2201      	movs	r2, #1
 8003238:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2200      	movs	r2, #0
 8003240:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferErrorCallback != NULL)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003248:	2b00      	cmp	r3, #0
 800324a:	d004      	beq.n	8003256 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	4798      	blx	r3
    }
  }
}
 8003254:	e7ff      	b.n	8003256 <HAL_DMA_IRQHandler+0x13e>
 8003256:	bf00      	nop
 8003258:	3710      	adds	r7, #16
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}

0800325e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800325e:	b480      	push	{r7}
 8003260:	b085      	sub	sp, #20
 8003262:	af00      	add	r7, sp, #0
 8003264:	60f8      	str	r0, [r7, #12]
 8003266:	60b9      	str	r1, [r7, #8]
 8003268:	607a      	str	r2, [r7, #4]
 800326a:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003274:	2101      	movs	r1, #1
 8003276:	fa01 f202 	lsl.w	r2, r1, r2
 800327a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	683a      	ldr	r2, [r7, #0]
 8003282:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	2b10      	cmp	r3, #16
 800328a:	d108      	bne.n	800329e <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	68ba      	ldr	r2, [r7, #8]
 800329a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800329c:	e007      	b.n	80032ae <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	68ba      	ldr	r2, [r7, #8]
 80032a4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	60da      	str	r2, [r3, #12]
}
 80032ae:	bf00      	nop
 80032b0:	3714      	adds	r7, #20
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr
	...

080032bc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80032bc:	b480      	push	{r7}
 80032be:	b083      	sub	sp, #12
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	461a      	mov	r2, r3
 80032ca:	4b09      	ldr	r3, [pc, #36]	@ (80032f0 <DMA_CalcBaseAndBitshift+0x34>)
 80032cc:	4413      	add	r3, r2
 80032ce:	4a09      	ldr	r2, [pc, #36]	@ (80032f4 <DMA_CalcBaseAndBitshift+0x38>)
 80032d0:	fba2 2303 	umull	r2, r3, r2, r3
 80032d4:	091b      	lsrs	r3, r3, #4
 80032d6:	009a      	lsls	r2, r3, #2
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	4a06      	ldr	r2, [pc, #24]	@ (80032f8 <DMA_CalcBaseAndBitshift+0x3c>)
 80032e0:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 80032e2:	bf00      	nop
 80032e4:	370c      	adds	r7, #12
 80032e6:	46bd      	mov	sp, r7
 80032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ec:	4770      	bx	lr
 80032ee:	bf00      	nop
 80032f0:	bffdfff8 	.word	0xbffdfff8
 80032f4:	cccccccd 	.word	0xcccccccd
 80032f8:	40020000 	.word	0x40020000

080032fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b087      	sub	sp, #28
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
 8003304:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003306:	2300      	movs	r3, #0
 8003308:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800330a:	e14e      	b.n	80035aa <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	2101      	movs	r1, #1
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	fa01 f303 	lsl.w	r3, r1, r3
 8003318:	4013      	ands	r3, r2
 800331a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2b00      	cmp	r3, #0
 8003320:	f000 8140 	beq.w	80035a4 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	f003 0303 	and.w	r3, r3, #3
 800332c:	2b01      	cmp	r3, #1
 800332e:	d005      	beq.n	800333c <HAL_GPIO_Init+0x40>
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	f003 0303 	and.w	r3, r3, #3
 8003338:	2b02      	cmp	r3, #2
 800333a:	d130      	bne.n	800339e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	005b      	lsls	r3, r3, #1
 8003346:	2203      	movs	r2, #3
 8003348:	fa02 f303 	lsl.w	r3, r2, r3
 800334c:	43db      	mvns	r3, r3
 800334e:	693a      	ldr	r2, [r7, #16]
 8003350:	4013      	ands	r3, r2
 8003352:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	68da      	ldr	r2, [r3, #12]
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	005b      	lsls	r3, r3, #1
 800335c:	fa02 f303 	lsl.w	r3, r2, r3
 8003360:	693a      	ldr	r2, [r7, #16]
 8003362:	4313      	orrs	r3, r2
 8003364:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	693a      	ldr	r2, [r7, #16]
 800336a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003372:	2201      	movs	r2, #1
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	fa02 f303 	lsl.w	r3, r2, r3
 800337a:	43db      	mvns	r3, r3
 800337c:	693a      	ldr	r2, [r7, #16]
 800337e:	4013      	ands	r3, r2
 8003380:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	091b      	lsrs	r3, r3, #4
 8003388:	f003 0201 	and.w	r2, r3, #1
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	fa02 f303 	lsl.w	r3, r2, r3
 8003392:	693a      	ldr	r2, [r7, #16]
 8003394:	4313      	orrs	r3, r2
 8003396:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	693a      	ldr	r2, [r7, #16]
 800339c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	f003 0303 	and.w	r3, r3, #3
 80033a6:	2b03      	cmp	r3, #3
 80033a8:	d017      	beq.n	80033da <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	68db      	ldr	r3, [r3, #12]
 80033ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	005b      	lsls	r3, r3, #1
 80033b4:	2203      	movs	r2, #3
 80033b6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ba:	43db      	mvns	r3, r3
 80033bc:	693a      	ldr	r2, [r7, #16]
 80033be:	4013      	ands	r3, r2
 80033c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	689a      	ldr	r2, [r3, #8]
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	005b      	lsls	r3, r3, #1
 80033ca:	fa02 f303 	lsl.w	r3, r2, r3
 80033ce:	693a      	ldr	r2, [r7, #16]
 80033d0:	4313      	orrs	r3, r2
 80033d2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	693a      	ldr	r2, [r7, #16]
 80033d8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	f003 0303 	and.w	r3, r3, #3
 80033e2:	2b02      	cmp	r3, #2
 80033e4:	d123      	bne.n	800342e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	08da      	lsrs	r2, r3, #3
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	3208      	adds	r2, #8
 80033ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	f003 0307 	and.w	r3, r3, #7
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	220f      	movs	r2, #15
 80033fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003402:	43db      	mvns	r3, r3
 8003404:	693a      	ldr	r2, [r7, #16]
 8003406:	4013      	ands	r3, r2
 8003408:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	691a      	ldr	r2, [r3, #16]
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	f003 0307 	and.w	r3, r3, #7
 8003414:	009b      	lsls	r3, r3, #2
 8003416:	fa02 f303 	lsl.w	r3, r2, r3
 800341a:	693a      	ldr	r2, [r7, #16]
 800341c:	4313      	orrs	r3, r2
 800341e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	08da      	lsrs	r2, r3, #3
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	3208      	adds	r2, #8
 8003428:	6939      	ldr	r1, [r7, #16]
 800342a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	005b      	lsls	r3, r3, #1
 8003438:	2203      	movs	r2, #3
 800343a:	fa02 f303 	lsl.w	r3, r2, r3
 800343e:	43db      	mvns	r3, r3
 8003440:	693a      	ldr	r2, [r7, #16]
 8003442:	4013      	ands	r3, r2
 8003444:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	f003 0203 	and.w	r2, r3, #3
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	005b      	lsls	r3, r3, #1
 8003452:	fa02 f303 	lsl.w	r3, r2, r3
 8003456:	693a      	ldr	r2, [r7, #16]
 8003458:	4313      	orrs	r3, r2
 800345a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	693a      	ldr	r2, [r7, #16]
 8003460:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800346a:	2b00      	cmp	r3, #0
 800346c:	f000 809a 	beq.w	80035a4 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003470:	4b55      	ldr	r3, [pc, #340]	@ (80035c8 <HAL_GPIO_Init+0x2cc>)
 8003472:	699b      	ldr	r3, [r3, #24]
 8003474:	4a54      	ldr	r2, [pc, #336]	@ (80035c8 <HAL_GPIO_Init+0x2cc>)
 8003476:	f043 0301 	orr.w	r3, r3, #1
 800347a:	6193      	str	r3, [r2, #24]
 800347c:	4b52      	ldr	r3, [pc, #328]	@ (80035c8 <HAL_GPIO_Init+0x2cc>)
 800347e:	699b      	ldr	r3, [r3, #24]
 8003480:	f003 0301 	and.w	r3, r3, #1
 8003484:	60bb      	str	r3, [r7, #8]
 8003486:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003488:	4a50      	ldr	r2, [pc, #320]	@ (80035cc <HAL_GPIO_Init+0x2d0>)
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	089b      	lsrs	r3, r3, #2
 800348e:	3302      	adds	r3, #2
 8003490:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003494:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	f003 0303 	and.w	r3, r3, #3
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	220f      	movs	r2, #15
 80034a0:	fa02 f303 	lsl.w	r3, r2, r3
 80034a4:	43db      	mvns	r3, r3
 80034a6:	693a      	ldr	r2, [r7, #16]
 80034a8:	4013      	ands	r3, r2
 80034aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80034b2:	d013      	beq.n	80034dc <HAL_GPIO_Init+0x1e0>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	4a46      	ldr	r2, [pc, #280]	@ (80035d0 <HAL_GPIO_Init+0x2d4>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d00d      	beq.n	80034d8 <HAL_GPIO_Init+0x1dc>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	4a45      	ldr	r2, [pc, #276]	@ (80035d4 <HAL_GPIO_Init+0x2d8>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d007      	beq.n	80034d4 <HAL_GPIO_Init+0x1d8>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	4a44      	ldr	r2, [pc, #272]	@ (80035d8 <HAL_GPIO_Init+0x2dc>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d101      	bne.n	80034d0 <HAL_GPIO_Init+0x1d4>
 80034cc:	2303      	movs	r3, #3
 80034ce:	e006      	b.n	80034de <HAL_GPIO_Init+0x1e2>
 80034d0:	2305      	movs	r3, #5
 80034d2:	e004      	b.n	80034de <HAL_GPIO_Init+0x1e2>
 80034d4:	2302      	movs	r3, #2
 80034d6:	e002      	b.n	80034de <HAL_GPIO_Init+0x1e2>
 80034d8:	2301      	movs	r3, #1
 80034da:	e000      	b.n	80034de <HAL_GPIO_Init+0x1e2>
 80034dc:	2300      	movs	r3, #0
 80034de:	697a      	ldr	r2, [r7, #20]
 80034e0:	f002 0203 	and.w	r2, r2, #3
 80034e4:	0092      	lsls	r2, r2, #2
 80034e6:	4093      	lsls	r3, r2
 80034e8:	693a      	ldr	r2, [r7, #16]
 80034ea:	4313      	orrs	r3, r2
 80034ec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80034ee:	4937      	ldr	r1, [pc, #220]	@ (80035cc <HAL_GPIO_Init+0x2d0>)
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	089b      	lsrs	r3, r3, #2
 80034f4:	3302      	adds	r3, #2
 80034f6:	693a      	ldr	r2, [r7, #16]
 80034f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80034fc:	4b37      	ldr	r3, [pc, #220]	@ (80035dc <HAL_GPIO_Init+0x2e0>)
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	43db      	mvns	r3, r3
 8003506:	693a      	ldr	r2, [r7, #16]
 8003508:	4013      	ands	r3, r2
 800350a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003514:	2b00      	cmp	r3, #0
 8003516:	d003      	beq.n	8003520 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8003518:	693a      	ldr	r2, [r7, #16]
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	4313      	orrs	r3, r2
 800351e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003520:	4a2e      	ldr	r2, [pc, #184]	@ (80035dc <HAL_GPIO_Init+0x2e0>)
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003526:	4b2d      	ldr	r3, [pc, #180]	@ (80035dc <HAL_GPIO_Init+0x2e0>)
 8003528:	68db      	ldr	r3, [r3, #12]
 800352a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	43db      	mvns	r3, r3
 8003530:	693a      	ldr	r2, [r7, #16]
 8003532:	4013      	ands	r3, r2
 8003534:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800353e:	2b00      	cmp	r3, #0
 8003540:	d003      	beq.n	800354a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8003542:	693a      	ldr	r2, [r7, #16]
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	4313      	orrs	r3, r2
 8003548:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800354a:	4a24      	ldr	r2, [pc, #144]	@ (80035dc <HAL_GPIO_Init+0x2e0>)
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003550:	4b22      	ldr	r3, [pc, #136]	@ (80035dc <HAL_GPIO_Init+0x2e0>)
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	43db      	mvns	r3, r3
 800355a:	693a      	ldr	r2, [r7, #16]
 800355c:	4013      	ands	r3, r2
 800355e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003568:	2b00      	cmp	r3, #0
 800356a:	d003      	beq.n	8003574 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 800356c:	693a      	ldr	r2, [r7, #16]
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	4313      	orrs	r3, r2
 8003572:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003574:	4a19      	ldr	r2, [pc, #100]	@ (80035dc <HAL_GPIO_Init+0x2e0>)
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800357a:	4b18      	ldr	r3, [pc, #96]	@ (80035dc <HAL_GPIO_Init+0x2e0>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	43db      	mvns	r3, r3
 8003584:	693a      	ldr	r2, [r7, #16]
 8003586:	4013      	ands	r3, r2
 8003588:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003592:	2b00      	cmp	r3, #0
 8003594:	d003      	beq.n	800359e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8003596:	693a      	ldr	r2, [r7, #16]
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	4313      	orrs	r3, r2
 800359c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800359e:	4a0f      	ldr	r2, [pc, #60]	@ (80035dc <HAL_GPIO_Init+0x2e0>)
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	3301      	adds	r3, #1
 80035a8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	fa22 f303 	lsr.w	r3, r2, r3
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	f47f aea9 	bne.w	800330c <HAL_GPIO_Init+0x10>
  }
}
 80035ba:	bf00      	nop
 80035bc:	bf00      	nop
 80035be:	371c      	adds	r7, #28
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr
 80035c8:	40021000 	.word	0x40021000
 80035cc:	40010000 	.word	0x40010000
 80035d0:	48000400 	.word	0x48000400
 80035d4:	48000800 	.word	0x48000800
 80035d8:	48000c00 	.word	0x48000c00
 80035dc:	40010400 	.word	0x40010400

080035e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b085      	sub	sp, #20
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
 80035e8:	460b      	mov	r3, r1
 80035ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	691a      	ldr	r2, [r3, #16]
 80035f0:	887b      	ldrh	r3, [r7, #2]
 80035f2:	4013      	ands	r3, r2
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d002      	beq.n	80035fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80035f8:	2301      	movs	r3, #1
 80035fa:	73fb      	strb	r3, [r7, #15]
 80035fc:	e001      	b.n	8003602 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80035fe:	2300      	movs	r3, #0
 8003600:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003602:	7bfb      	ldrb	r3, [r7, #15]
}
 8003604:	4618      	mov	r0, r3
 8003606:	3714      	adds	r7, #20
 8003608:	46bd      	mov	sp, r7
 800360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360e:	4770      	bx	lr

08003610 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003610:	b480      	push	{r7}
 8003612:	b083      	sub	sp, #12
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	460b      	mov	r3, r1
 800361a:	807b      	strh	r3, [r7, #2]
 800361c:	4613      	mov	r3, r2
 800361e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003620:	787b      	ldrb	r3, [r7, #1]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d003      	beq.n	800362e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003626:	887a      	ldrh	r2, [r7, #2]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800362c:	e002      	b.n	8003634 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800362e:	887a      	ldrh	r2, [r7, #2]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003634:	bf00      	nop
 8003636:	370c      	adds	r7, #12
 8003638:	46bd      	mov	sp, r7
 800363a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363e:	4770      	bx	lr

08003640 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003640:	b480      	push	{r7}
 8003642:	b085      	sub	sp, #20
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	460b      	mov	r3, r1
 800364a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	695b      	ldr	r3, [r3, #20]
 8003650:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003652:	887a      	ldrh	r2, [r7, #2]
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	4013      	ands	r3, r2
 8003658:	041a      	lsls	r2, r3, #16
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	43d9      	mvns	r1, r3
 800365e:	887b      	ldrh	r3, [r7, #2]
 8003660:	400b      	ands	r3, r1
 8003662:	431a      	orrs	r2, r3
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	619a      	str	r2, [r3, #24]
}
 8003668:	bf00      	nop
 800366a:	3714      	adds	r7, #20
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr

08003674 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 800367a:	af00      	add	r7, sp, #0
 800367c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003680:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003684:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003686:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800368a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d102      	bne.n	800369a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	f001 b823 	b.w	80046e0 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800369a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800369e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f003 0301 	and.w	r3, r3, #1
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	f000 817d 	beq.w	80039aa <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80036b0:	4bbc      	ldr	r3, [pc, #752]	@ (80039a4 <HAL_RCC_OscConfig+0x330>)
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	f003 030c 	and.w	r3, r3, #12
 80036b8:	2b04      	cmp	r3, #4
 80036ba:	d00c      	beq.n	80036d6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80036bc:	4bb9      	ldr	r3, [pc, #740]	@ (80039a4 <HAL_RCC_OscConfig+0x330>)
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	f003 030c 	and.w	r3, r3, #12
 80036c4:	2b08      	cmp	r3, #8
 80036c6:	d15c      	bne.n	8003782 <HAL_RCC_OscConfig+0x10e>
 80036c8:	4bb6      	ldr	r3, [pc, #728]	@ (80039a4 <HAL_RCC_OscConfig+0x330>)
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036d4:	d155      	bne.n	8003782 <HAL_RCC_OscConfig+0x10e>
 80036d6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80036da:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036de:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 80036e2:	fa93 f3a3 	rbit	r3, r3
 80036e6:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80036ea:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036ee:	fab3 f383 	clz	r3, r3
 80036f2:	b2db      	uxtb	r3, r3
 80036f4:	095b      	lsrs	r3, r3, #5
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	f043 0301 	orr.w	r3, r3, #1
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	2b01      	cmp	r3, #1
 8003700:	d102      	bne.n	8003708 <HAL_RCC_OscConfig+0x94>
 8003702:	4ba8      	ldr	r3, [pc, #672]	@ (80039a4 <HAL_RCC_OscConfig+0x330>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	e015      	b.n	8003734 <HAL_RCC_OscConfig+0xc0>
 8003708:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800370c:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003710:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8003714:	fa93 f3a3 	rbit	r3, r3
 8003718:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 800371c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003720:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8003724:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8003728:	fa93 f3a3 	rbit	r3, r3
 800372c:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8003730:	4b9c      	ldr	r3, [pc, #624]	@ (80039a4 <HAL_RCC_OscConfig+0x330>)
 8003732:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003734:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003738:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 800373c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8003740:	fa92 f2a2 	rbit	r2, r2
 8003744:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8003748:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 800374c:	fab2 f282 	clz	r2, r2
 8003750:	b2d2      	uxtb	r2, r2
 8003752:	f042 0220 	orr.w	r2, r2, #32
 8003756:	b2d2      	uxtb	r2, r2
 8003758:	f002 021f 	and.w	r2, r2, #31
 800375c:	2101      	movs	r1, #1
 800375e:	fa01 f202 	lsl.w	r2, r1, r2
 8003762:	4013      	ands	r3, r2
 8003764:	2b00      	cmp	r3, #0
 8003766:	f000 811f 	beq.w	80039a8 <HAL_RCC_OscConfig+0x334>
 800376a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800376e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	2b00      	cmp	r3, #0
 8003778:	f040 8116 	bne.w	80039a8 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	f000 bfaf 	b.w	80046e0 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003782:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003786:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003792:	d106      	bne.n	80037a2 <HAL_RCC_OscConfig+0x12e>
 8003794:	4b83      	ldr	r3, [pc, #524]	@ (80039a4 <HAL_RCC_OscConfig+0x330>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a82      	ldr	r2, [pc, #520]	@ (80039a4 <HAL_RCC_OscConfig+0x330>)
 800379a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800379e:	6013      	str	r3, [r2, #0]
 80037a0:	e036      	b.n	8003810 <HAL_RCC_OscConfig+0x19c>
 80037a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037a6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d10c      	bne.n	80037cc <HAL_RCC_OscConfig+0x158>
 80037b2:	4b7c      	ldr	r3, [pc, #496]	@ (80039a4 <HAL_RCC_OscConfig+0x330>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a7b      	ldr	r2, [pc, #492]	@ (80039a4 <HAL_RCC_OscConfig+0x330>)
 80037b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037bc:	6013      	str	r3, [r2, #0]
 80037be:	4b79      	ldr	r3, [pc, #484]	@ (80039a4 <HAL_RCC_OscConfig+0x330>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a78      	ldr	r2, [pc, #480]	@ (80039a4 <HAL_RCC_OscConfig+0x330>)
 80037c4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80037c8:	6013      	str	r3, [r2, #0]
 80037ca:	e021      	b.n	8003810 <HAL_RCC_OscConfig+0x19c>
 80037cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037d0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80037dc:	d10c      	bne.n	80037f8 <HAL_RCC_OscConfig+0x184>
 80037de:	4b71      	ldr	r3, [pc, #452]	@ (80039a4 <HAL_RCC_OscConfig+0x330>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a70      	ldr	r2, [pc, #448]	@ (80039a4 <HAL_RCC_OscConfig+0x330>)
 80037e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80037e8:	6013      	str	r3, [r2, #0]
 80037ea:	4b6e      	ldr	r3, [pc, #440]	@ (80039a4 <HAL_RCC_OscConfig+0x330>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a6d      	ldr	r2, [pc, #436]	@ (80039a4 <HAL_RCC_OscConfig+0x330>)
 80037f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037f4:	6013      	str	r3, [r2, #0]
 80037f6:	e00b      	b.n	8003810 <HAL_RCC_OscConfig+0x19c>
 80037f8:	4b6a      	ldr	r3, [pc, #424]	@ (80039a4 <HAL_RCC_OscConfig+0x330>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a69      	ldr	r2, [pc, #420]	@ (80039a4 <HAL_RCC_OscConfig+0x330>)
 80037fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003802:	6013      	str	r3, [r2, #0]
 8003804:	4b67      	ldr	r3, [pc, #412]	@ (80039a4 <HAL_RCC_OscConfig+0x330>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a66      	ldr	r2, [pc, #408]	@ (80039a4 <HAL_RCC_OscConfig+0x330>)
 800380a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800380e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003810:	4b64      	ldr	r3, [pc, #400]	@ (80039a4 <HAL_RCC_OscConfig+0x330>)
 8003812:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003814:	f023 020f 	bic.w	r2, r3, #15
 8003818:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800381c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	495f      	ldr	r1, [pc, #380]	@ (80039a4 <HAL_RCC_OscConfig+0x330>)
 8003826:	4313      	orrs	r3, r2
 8003828:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800382a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800382e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d059      	beq.n	80038ee <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800383a:	f7fd fe67 	bl	800150c <HAL_GetTick>
 800383e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003842:	e00a      	b.n	800385a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003844:	f7fd fe62 	bl	800150c <HAL_GetTick>
 8003848:	4602      	mov	r2, r0
 800384a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800384e:	1ad3      	subs	r3, r2, r3
 8003850:	2b64      	cmp	r3, #100	@ 0x64
 8003852:	d902      	bls.n	800385a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8003854:	2303      	movs	r3, #3
 8003856:	f000 bf43 	b.w	80046e0 <HAL_RCC_OscConfig+0x106c>
 800385a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800385e:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003862:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8003866:	fa93 f3a3 	rbit	r3, r3
 800386a:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 800386e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003872:	fab3 f383 	clz	r3, r3
 8003876:	b2db      	uxtb	r3, r3
 8003878:	095b      	lsrs	r3, r3, #5
 800387a:	b2db      	uxtb	r3, r3
 800387c:	f043 0301 	orr.w	r3, r3, #1
 8003880:	b2db      	uxtb	r3, r3
 8003882:	2b01      	cmp	r3, #1
 8003884:	d102      	bne.n	800388c <HAL_RCC_OscConfig+0x218>
 8003886:	4b47      	ldr	r3, [pc, #284]	@ (80039a4 <HAL_RCC_OscConfig+0x330>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	e015      	b.n	80038b8 <HAL_RCC_OscConfig+0x244>
 800388c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003890:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003894:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8003898:	fa93 f3a3 	rbit	r3, r3
 800389c:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80038a0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80038a4:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80038a8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 80038ac:	fa93 f3a3 	rbit	r3, r3
 80038b0:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 80038b4:	4b3b      	ldr	r3, [pc, #236]	@ (80039a4 <HAL_RCC_OscConfig+0x330>)
 80038b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038b8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80038bc:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 80038c0:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80038c4:	fa92 f2a2 	rbit	r2, r2
 80038c8:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 80038cc:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 80038d0:	fab2 f282 	clz	r2, r2
 80038d4:	b2d2      	uxtb	r2, r2
 80038d6:	f042 0220 	orr.w	r2, r2, #32
 80038da:	b2d2      	uxtb	r2, r2
 80038dc:	f002 021f 	and.w	r2, r2, #31
 80038e0:	2101      	movs	r1, #1
 80038e2:	fa01 f202 	lsl.w	r2, r1, r2
 80038e6:	4013      	ands	r3, r2
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d0ab      	beq.n	8003844 <HAL_RCC_OscConfig+0x1d0>
 80038ec:	e05d      	b.n	80039aa <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038ee:	f7fd fe0d 	bl	800150c <HAL_GetTick>
 80038f2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038f6:	e00a      	b.n	800390e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038f8:	f7fd fe08 	bl	800150c <HAL_GetTick>
 80038fc:	4602      	mov	r2, r0
 80038fe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003902:	1ad3      	subs	r3, r2, r3
 8003904:	2b64      	cmp	r3, #100	@ 0x64
 8003906:	d902      	bls.n	800390e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8003908:	2303      	movs	r3, #3
 800390a:	f000 bee9 	b.w	80046e0 <HAL_RCC_OscConfig+0x106c>
 800390e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003912:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003916:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 800391a:	fa93 f3a3 	rbit	r3, r3
 800391e:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8003922:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003926:	fab3 f383 	clz	r3, r3
 800392a:	b2db      	uxtb	r3, r3
 800392c:	095b      	lsrs	r3, r3, #5
 800392e:	b2db      	uxtb	r3, r3
 8003930:	f043 0301 	orr.w	r3, r3, #1
 8003934:	b2db      	uxtb	r3, r3
 8003936:	2b01      	cmp	r3, #1
 8003938:	d102      	bne.n	8003940 <HAL_RCC_OscConfig+0x2cc>
 800393a:	4b1a      	ldr	r3, [pc, #104]	@ (80039a4 <HAL_RCC_OscConfig+0x330>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	e015      	b.n	800396c <HAL_RCC_OscConfig+0x2f8>
 8003940:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003944:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003948:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 800394c:	fa93 f3a3 	rbit	r3, r3
 8003950:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8003954:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003958:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 800395c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8003960:	fa93 f3a3 	rbit	r3, r3
 8003964:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8003968:	4b0e      	ldr	r3, [pc, #56]	@ (80039a4 <HAL_RCC_OscConfig+0x330>)
 800396a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800396c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003970:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8003974:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8003978:	fa92 f2a2 	rbit	r2, r2
 800397c:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8003980:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8003984:	fab2 f282 	clz	r2, r2
 8003988:	b2d2      	uxtb	r2, r2
 800398a:	f042 0220 	orr.w	r2, r2, #32
 800398e:	b2d2      	uxtb	r2, r2
 8003990:	f002 021f 	and.w	r2, r2, #31
 8003994:	2101      	movs	r1, #1
 8003996:	fa01 f202 	lsl.w	r2, r1, r2
 800399a:	4013      	ands	r3, r2
 800399c:	2b00      	cmp	r3, #0
 800399e:	d1ab      	bne.n	80038f8 <HAL_RCC_OscConfig+0x284>
 80039a0:	e003      	b.n	80039aa <HAL_RCC_OscConfig+0x336>
 80039a2:	bf00      	nop
 80039a4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039ae:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 0302 	and.w	r3, r3, #2
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	f000 817d 	beq.w	8003cba <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80039c0:	4ba6      	ldr	r3, [pc, #664]	@ (8003c5c <HAL_RCC_OscConfig+0x5e8>)
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	f003 030c 	and.w	r3, r3, #12
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d00b      	beq.n	80039e4 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80039cc:	4ba3      	ldr	r3, [pc, #652]	@ (8003c5c <HAL_RCC_OscConfig+0x5e8>)
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	f003 030c 	and.w	r3, r3, #12
 80039d4:	2b08      	cmp	r3, #8
 80039d6:	d172      	bne.n	8003abe <HAL_RCC_OscConfig+0x44a>
 80039d8:	4ba0      	ldr	r3, [pc, #640]	@ (8003c5c <HAL_RCC_OscConfig+0x5e8>)
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d16c      	bne.n	8003abe <HAL_RCC_OscConfig+0x44a>
 80039e4:	2302      	movs	r3, #2
 80039e6:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ea:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80039ee:	fa93 f3a3 	rbit	r3, r3
 80039f2:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 80039f6:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039fa:	fab3 f383 	clz	r3, r3
 80039fe:	b2db      	uxtb	r3, r3
 8003a00:	095b      	lsrs	r3, r3, #5
 8003a02:	b2db      	uxtb	r3, r3
 8003a04:	f043 0301 	orr.w	r3, r3, #1
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d102      	bne.n	8003a14 <HAL_RCC_OscConfig+0x3a0>
 8003a0e:	4b93      	ldr	r3, [pc, #588]	@ (8003c5c <HAL_RCC_OscConfig+0x5e8>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	e013      	b.n	8003a3c <HAL_RCC_OscConfig+0x3c8>
 8003a14:	2302      	movs	r3, #2
 8003a16:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a1a:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8003a1e:	fa93 f3a3 	rbit	r3, r3
 8003a22:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8003a26:	2302      	movs	r3, #2
 8003a28:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8003a2c:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8003a30:	fa93 f3a3 	rbit	r3, r3
 8003a34:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8003a38:	4b88      	ldr	r3, [pc, #544]	@ (8003c5c <HAL_RCC_OscConfig+0x5e8>)
 8003a3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a3c:	2202      	movs	r2, #2
 8003a3e:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8003a42:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8003a46:	fa92 f2a2 	rbit	r2, r2
 8003a4a:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8003a4e:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8003a52:	fab2 f282 	clz	r2, r2
 8003a56:	b2d2      	uxtb	r2, r2
 8003a58:	f042 0220 	orr.w	r2, r2, #32
 8003a5c:	b2d2      	uxtb	r2, r2
 8003a5e:	f002 021f 	and.w	r2, r2, #31
 8003a62:	2101      	movs	r1, #1
 8003a64:	fa01 f202 	lsl.w	r2, r1, r2
 8003a68:	4013      	ands	r3, r2
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d00a      	beq.n	8003a84 <HAL_RCC_OscConfig+0x410>
 8003a6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a72:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	691b      	ldr	r3, [r3, #16]
 8003a7a:	2b01      	cmp	r3, #1
 8003a7c:	d002      	beq.n	8003a84 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	f000 be2e 	b.w	80046e0 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a84:	4b75      	ldr	r3, [pc, #468]	@ (8003c5c <HAL_RCC_OscConfig+0x5e8>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003a8c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a90:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	695b      	ldr	r3, [r3, #20]
 8003a98:	21f8      	movs	r1, #248	@ 0xf8
 8003a9a:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a9e:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8003aa2:	fa91 f1a1 	rbit	r1, r1
 8003aa6:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8003aaa:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8003aae:	fab1 f181 	clz	r1, r1
 8003ab2:	b2c9      	uxtb	r1, r1
 8003ab4:	408b      	lsls	r3, r1
 8003ab6:	4969      	ldr	r1, [pc, #420]	@ (8003c5c <HAL_RCC_OscConfig+0x5e8>)
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003abc:	e0fd      	b.n	8003cba <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003abe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ac2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	691b      	ldr	r3, [r3, #16]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	f000 8088 	beq.w	8003be0 <HAL_RCC_OscConfig+0x56c>
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ad6:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8003ada:	fa93 f3a3 	rbit	r3, r3
 8003ade:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8003ae2:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ae6:	fab3 f383 	clz	r3, r3
 8003aea:	b2db      	uxtb	r3, r3
 8003aec:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003af0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003af4:	009b      	lsls	r3, r3, #2
 8003af6:	461a      	mov	r2, r3
 8003af8:	2301      	movs	r3, #1
 8003afa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003afc:	f7fd fd06 	bl	800150c <HAL_GetTick>
 8003b00:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b04:	e00a      	b.n	8003b1c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b06:	f7fd fd01 	bl	800150c <HAL_GetTick>
 8003b0a:	4602      	mov	r2, r0
 8003b0c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003b10:	1ad3      	subs	r3, r2, r3
 8003b12:	2b02      	cmp	r3, #2
 8003b14:	d902      	bls.n	8003b1c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8003b16:	2303      	movs	r3, #3
 8003b18:	f000 bde2 	b.w	80046e0 <HAL_RCC_OscConfig+0x106c>
 8003b1c:	2302      	movs	r3, #2
 8003b1e:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b22:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8003b26:	fa93 f3a3 	rbit	r3, r3
 8003b2a:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8003b2e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b32:	fab3 f383 	clz	r3, r3
 8003b36:	b2db      	uxtb	r3, r3
 8003b38:	095b      	lsrs	r3, r3, #5
 8003b3a:	b2db      	uxtb	r3, r3
 8003b3c:	f043 0301 	orr.w	r3, r3, #1
 8003b40:	b2db      	uxtb	r3, r3
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d102      	bne.n	8003b4c <HAL_RCC_OscConfig+0x4d8>
 8003b46:	4b45      	ldr	r3, [pc, #276]	@ (8003c5c <HAL_RCC_OscConfig+0x5e8>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	e013      	b.n	8003b74 <HAL_RCC_OscConfig+0x500>
 8003b4c:	2302      	movs	r3, #2
 8003b4e:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b52:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8003b56:	fa93 f3a3 	rbit	r3, r3
 8003b5a:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8003b5e:	2302      	movs	r3, #2
 8003b60:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8003b64:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8003b68:	fa93 f3a3 	rbit	r3, r3
 8003b6c:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8003b70:	4b3a      	ldr	r3, [pc, #232]	@ (8003c5c <HAL_RCC_OscConfig+0x5e8>)
 8003b72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b74:	2202      	movs	r2, #2
 8003b76:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8003b7a:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8003b7e:	fa92 f2a2 	rbit	r2, r2
 8003b82:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8003b86:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8003b8a:	fab2 f282 	clz	r2, r2
 8003b8e:	b2d2      	uxtb	r2, r2
 8003b90:	f042 0220 	orr.w	r2, r2, #32
 8003b94:	b2d2      	uxtb	r2, r2
 8003b96:	f002 021f 	and.w	r2, r2, #31
 8003b9a:	2101      	movs	r1, #1
 8003b9c:	fa01 f202 	lsl.w	r2, r1, r2
 8003ba0:	4013      	ands	r3, r2
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d0af      	beq.n	8003b06 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ba6:	4b2d      	ldr	r3, [pc, #180]	@ (8003c5c <HAL_RCC_OscConfig+0x5e8>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003bae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bb2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	695b      	ldr	r3, [r3, #20]
 8003bba:	21f8      	movs	r1, #248	@ 0xf8
 8003bbc:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bc0:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8003bc4:	fa91 f1a1 	rbit	r1, r1
 8003bc8:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8003bcc:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8003bd0:	fab1 f181 	clz	r1, r1
 8003bd4:	b2c9      	uxtb	r1, r1
 8003bd6:	408b      	lsls	r3, r1
 8003bd8:	4920      	ldr	r1, [pc, #128]	@ (8003c5c <HAL_RCC_OscConfig+0x5e8>)
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	600b      	str	r3, [r1, #0]
 8003bde:	e06c      	b.n	8003cba <HAL_RCC_OscConfig+0x646>
 8003be0:	2301      	movs	r3, #1
 8003be2:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003be6:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003bea:	fa93 f3a3 	rbit	r3, r3
 8003bee:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8003bf2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bf6:	fab3 f383 	clz	r3, r3
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003c00:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003c04:	009b      	lsls	r3, r3, #2
 8003c06:	461a      	mov	r2, r3
 8003c08:	2300      	movs	r3, #0
 8003c0a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c0c:	f7fd fc7e 	bl	800150c <HAL_GetTick>
 8003c10:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c14:	e00a      	b.n	8003c2c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c16:	f7fd fc79 	bl	800150c <HAL_GetTick>
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	2b02      	cmp	r3, #2
 8003c24:	d902      	bls.n	8003c2c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8003c26:	2303      	movs	r3, #3
 8003c28:	f000 bd5a 	b.w	80046e0 <HAL_RCC_OscConfig+0x106c>
 8003c2c:	2302      	movs	r3, #2
 8003c2e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c32:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8003c36:	fa93 f3a3 	rbit	r3, r3
 8003c3a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8003c3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c42:	fab3 f383 	clz	r3, r3
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	095b      	lsrs	r3, r3, #5
 8003c4a:	b2db      	uxtb	r3, r3
 8003c4c:	f043 0301 	orr.w	r3, r3, #1
 8003c50:	b2db      	uxtb	r3, r3
 8003c52:	2b01      	cmp	r3, #1
 8003c54:	d104      	bne.n	8003c60 <HAL_RCC_OscConfig+0x5ec>
 8003c56:	4b01      	ldr	r3, [pc, #4]	@ (8003c5c <HAL_RCC_OscConfig+0x5e8>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	e015      	b.n	8003c88 <HAL_RCC_OscConfig+0x614>
 8003c5c:	40021000 	.word	0x40021000
 8003c60:	2302      	movs	r3, #2
 8003c62:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c66:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8003c6a:	fa93 f3a3 	rbit	r3, r3
 8003c6e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8003c72:	2302      	movs	r3, #2
 8003c74:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8003c78:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003c7c:	fa93 f3a3 	rbit	r3, r3
 8003c80:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8003c84:	4bc8      	ldr	r3, [pc, #800]	@ (8003fa8 <HAL_RCC_OscConfig+0x934>)
 8003c86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c88:	2202      	movs	r2, #2
 8003c8a:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8003c8e:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8003c92:	fa92 f2a2 	rbit	r2, r2
 8003c96:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8003c9a:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8003c9e:	fab2 f282 	clz	r2, r2
 8003ca2:	b2d2      	uxtb	r2, r2
 8003ca4:	f042 0220 	orr.w	r2, r2, #32
 8003ca8:	b2d2      	uxtb	r2, r2
 8003caa:	f002 021f 	and.w	r2, r2, #31
 8003cae:	2101      	movs	r1, #1
 8003cb0:	fa01 f202 	lsl.w	r2, r1, r2
 8003cb4:	4013      	ands	r3, r2
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d1ad      	bne.n	8003c16 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003cbe:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 0308 	and.w	r3, r3, #8
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	f000 8110 	beq.w	8003ef0 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003cd0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003cd4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	699b      	ldr	r3, [r3, #24]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d079      	beq.n	8003dd4 <HAL_RCC_OscConfig+0x760>
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ce6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003cea:	fa93 f3a3 	rbit	r3, r3
 8003cee:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8003cf2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cf6:	fab3 f383 	clz	r3, r3
 8003cfa:	b2db      	uxtb	r3, r3
 8003cfc:	461a      	mov	r2, r3
 8003cfe:	4bab      	ldr	r3, [pc, #684]	@ (8003fac <HAL_RCC_OscConfig+0x938>)
 8003d00:	4413      	add	r3, r2
 8003d02:	009b      	lsls	r3, r3, #2
 8003d04:	461a      	mov	r2, r3
 8003d06:	2301      	movs	r3, #1
 8003d08:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d0a:	f7fd fbff 	bl	800150c <HAL_GetTick>
 8003d0e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d12:	e00a      	b.n	8003d2a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d14:	f7fd fbfa 	bl	800150c <HAL_GetTick>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003d1e:	1ad3      	subs	r3, r2, r3
 8003d20:	2b02      	cmp	r3, #2
 8003d22:	d902      	bls.n	8003d2a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8003d24:	2303      	movs	r3, #3
 8003d26:	f000 bcdb 	b.w	80046e0 <HAL_RCC_OscConfig+0x106c>
 8003d2a:	2302      	movs	r3, #2
 8003d2c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d30:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8003d34:	fa93 f3a3 	rbit	r3, r3
 8003d38:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003d3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d40:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003d44:	2202      	movs	r2, #2
 8003d46:	601a      	str	r2, [r3, #0]
 8003d48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d4c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	fa93 f2a3 	rbit	r2, r3
 8003d56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d5a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003d5e:	601a      	str	r2, [r3, #0]
 8003d60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003d68:	2202      	movs	r2, #2
 8003d6a:	601a      	str	r2, [r3, #0]
 8003d6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	fa93 f2a3 	rbit	r2, r3
 8003d7a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d7e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003d82:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d84:	4b88      	ldr	r3, [pc, #544]	@ (8003fa8 <HAL_RCC_OscConfig+0x934>)
 8003d86:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003d88:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d8c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003d90:	2102      	movs	r1, #2
 8003d92:	6019      	str	r1, [r3, #0]
 8003d94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d98:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	fa93 f1a3 	rbit	r1, r3
 8003da2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003da6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003daa:	6019      	str	r1, [r3, #0]
  return result;
 8003dac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003db0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	fab3 f383 	clz	r3, r3
 8003dba:	b2db      	uxtb	r3, r3
 8003dbc:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	f003 031f 	and.w	r3, r3, #31
 8003dc6:	2101      	movs	r1, #1
 8003dc8:	fa01 f303 	lsl.w	r3, r1, r3
 8003dcc:	4013      	ands	r3, r2
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d0a0      	beq.n	8003d14 <HAL_RCC_OscConfig+0x6a0>
 8003dd2:	e08d      	b.n	8003ef0 <HAL_RCC_OscConfig+0x87c>
 8003dd4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003dd8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003ddc:	2201      	movs	r2, #1
 8003dde:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003de0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003de4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	fa93 f2a3 	rbit	r2, r3
 8003dee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003df2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003df6:	601a      	str	r2, [r3, #0]
  return result;
 8003df8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003dfc:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003e00:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e02:	fab3 f383 	clz	r3, r3
 8003e06:	b2db      	uxtb	r3, r3
 8003e08:	461a      	mov	r2, r3
 8003e0a:	4b68      	ldr	r3, [pc, #416]	@ (8003fac <HAL_RCC_OscConfig+0x938>)
 8003e0c:	4413      	add	r3, r2
 8003e0e:	009b      	lsls	r3, r3, #2
 8003e10:	461a      	mov	r2, r3
 8003e12:	2300      	movs	r3, #0
 8003e14:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e16:	f7fd fb79 	bl	800150c <HAL_GetTick>
 8003e1a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e1e:	e00a      	b.n	8003e36 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e20:	f7fd fb74 	bl	800150c <HAL_GetTick>
 8003e24:	4602      	mov	r2, r0
 8003e26:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003e2a:	1ad3      	subs	r3, r2, r3
 8003e2c:	2b02      	cmp	r3, #2
 8003e2e:	d902      	bls.n	8003e36 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8003e30:	2303      	movs	r3, #3
 8003e32:	f000 bc55 	b.w	80046e0 <HAL_RCC_OscConfig+0x106c>
 8003e36:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e3a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003e3e:	2202      	movs	r2, #2
 8003e40:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e42:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e46:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	fa93 f2a3 	rbit	r2, r3
 8003e50:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e54:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8003e58:	601a      	str	r2, [r3, #0]
 8003e5a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e5e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003e62:	2202      	movs	r2, #2
 8003e64:	601a      	str	r2, [r3, #0]
 8003e66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e6a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	fa93 f2a3 	rbit	r2, r3
 8003e74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e78:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003e7c:	601a      	str	r2, [r3, #0]
 8003e7e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e82:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003e86:	2202      	movs	r2, #2
 8003e88:	601a      	str	r2, [r3, #0]
 8003e8a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e8e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	fa93 f2a3 	rbit	r2, r3
 8003e98:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e9c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003ea0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ea2:	4b41      	ldr	r3, [pc, #260]	@ (8003fa8 <HAL_RCC_OscConfig+0x934>)
 8003ea4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003ea6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003eaa:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003eae:	2102      	movs	r1, #2
 8003eb0:	6019      	str	r1, [r3, #0]
 8003eb2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003eb6:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	fa93 f1a3 	rbit	r1, r3
 8003ec0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ec4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003ec8:	6019      	str	r1, [r3, #0]
  return result;
 8003eca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ece:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	fab3 f383 	clz	r3, r3
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003ede:	b2db      	uxtb	r3, r3
 8003ee0:	f003 031f 	and.w	r3, r3, #31
 8003ee4:	2101      	movs	r1, #1
 8003ee6:	fa01 f303 	lsl.w	r3, r1, r3
 8003eea:	4013      	ands	r3, r2
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d197      	bne.n	8003e20 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ef0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ef4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f003 0304 	and.w	r3, r3, #4
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	f000 81a1 	beq.w	8004248 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f06:	2300      	movs	r3, #0
 8003f08:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f0c:	4b26      	ldr	r3, [pc, #152]	@ (8003fa8 <HAL_RCC_OscConfig+0x934>)
 8003f0e:	69db      	ldr	r3, [r3, #28]
 8003f10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d116      	bne.n	8003f46 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f18:	4b23      	ldr	r3, [pc, #140]	@ (8003fa8 <HAL_RCC_OscConfig+0x934>)
 8003f1a:	69db      	ldr	r3, [r3, #28]
 8003f1c:	4a22      	ldr	r2, [pc, #136]	@ (8003fa8 <HAL_RCC_OscConfig+0x934>)
 8003f1e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f22:	61d3      	str	r3, [r2, #28]
 8003f24:	4b20      	ldr	r3, [pc, #128]	@ (8003fa8 <HAL_RCC_OscConfig+0x934>)
 8003f26:	69db      	ldr	r3, [r3, #28]
 8003f28:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8003f2c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f30:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8003f34:	601a      	str	r2, [r3, #0]
 8003f36:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f3a:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8003f3e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003f40:	2301      	movs	r3, #1
 8003f42:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f46:	4b1a      	ldr	r3, [pc, #104]	@ (8003fb0 <HAL_RCC_OscConfig+0x93c>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d11a      	bne.n	8003f88 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f52:	4b17      	ldr	r3, [pc, #92]	@ (8003fb0 <HAL_RCC_OscConfig+0x93c>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a16      	ldr	r2, [pc, #88]	@ (8003fb0 <HAL_RCC_OscConfig+0x93c>)
 8003f58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f5c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f5e:	f7fd fad5 	bl	800150c <HAL_GetTick>
 8003f62:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f66:	e009      	b.n	8003f7c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f68:	f7fd fad0 	bl	800150c <HAL_GetTick>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003f72:	1ad3      	subs	r3, r2, r3
 8003f74:	2b64      	cmp	r3, #100	@ 0x64
 8003f76:	d901      	bls.n	8003f7c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8003f78:	2303      	movs	r3, #3
 8003f7a:	e3b1      	b.n	80046e0 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f7c:	4b0c      	ldr	r3, [pc, #48]	@ (8003fb0 <HAL_RCC_OscConfig+0x93c>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d0ef      	beq.n	8003f68 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f88:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f8c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	68db      	ldr	r3, [r3, #12]
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	d10d      	bne.n	8003fb4 <HAL_RCC_OscConfig+0x940>
 8003f98:	4b03      	ldr	r3, [pc, #12]	@ (8003fa8 <HAL_RCC_OscConfig+0x934>)
 8003f9a:	6a1b      	ldr	r3, [r3, #32]
 8003f9c:	4a02      	ldr	r2, [pc, #8]	@ (8003fa8 <HAL_RCC_OscConfig+0x934>)
 8003f9e:	f043 0301 	orr.w	r3, r3, #1
 8003fa2:	6213      	str	r3, [r2, #32]
 8003fa4:	e03c      	b.n	8004020 <HAL_RCC_OscConfig+0x9ac>
 8003fa6:	bf00      	nop
 8003fa8:	40021000 	.word	0x40021000
 8003fac:	10908120 	.word	0x10908120
 8003fb0:	40007000 	.word	0x40007000
 8003fb4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fb8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	68db      	ldr	r3, [r3, #12]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d10c      	bne.n	8003fde <HAL_RCC_OscConfig+0x96a>
 8003fc4:	4bc1      	ldr	r3, [pc, #772]	@ (80042cc <HAL_RCC_OscConfig+0xc58>)
 8003fc6:	6a1b      	ldr	r3, [r3, #32]
 8003fc8:	4ac0      	ldr	r2, [pc, #768]	@ (80042cc <HAL_RCC_OscConfig+0xc58>)
 8003fca:	f023 0301 	bic.w	r3, r3, #1
 8003fce:	6213      	str	r3, [r2, #32]
 8003fd0:	4bbe      	ldr	r3, [pc, #760]	@ (80042cc <HAL_RCC_OscConfig+0xc58>)
 8003fd2:	6a1b      	ldr	r3, [r3, #32]
 8003fd4:	4abd      	ldr	r2, [pc, #756]	@ (80042cc <HAL_RCC_OscConfig+0xc58>)
 8003fd6:	f023 0304 	bic.w	r3, r3, #4
 8003fda:	6213      	str	r3, [r2, #32]
 8003fdc:	e020      	b.n	8004020 <HAL_RCC_OscConfig+0x9ac>
 8003fde:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fe2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	68db      	ldr	r3, [r3, #12]
 8003fea:	2b05      	cmp	r3, #5
 8003fec:	d10c      	bne.n	8004008 <HAL_RCC_OscConfig+0x994>
 8003fee:	4bb7      	ldr	r3, [pc, #732]	@ (80042cc <HAL_RCC_OscConfig+0xc58>)
 8003ff0:	6a1b      	ldr	r3, [r3, #32]
 8003ff2:	4ab6      	ldr	r2, [pc, #728]	@ (80042cc <HAL_RCC_OscConfig+0xc58>)
 8003ff4:	f043 0304 	orr.w	r3, r3, #4
 8003ff8:	6213      	str	r3, [r2, #32]
 8003ffa:	4bb4      	ldr	r3, [pc, #720]	@ (80042cc <HAL_RCC_OscConfig+0xc58>)
 8003ffc:	6a1b      	ldr	r3, [r3, #32]
 8003ffe:	4ab3      	ldr	r2, [pc, #716]	@ (80042cc <HAL_RCC_OscConfig+0xc58>)
 8004000:	f043 0301 	orr.w	r3, r3, #1
 8004004:	6213      	str	r3, [r2, #32]
 8004006:	e00b      	b.n	8004020 <HAL_RCC_OscConfig+0x9ac>
 8004008:	4bb0      	ldr	r3, [pc, #704]	@ (80042cc <HAL_RCC_OscConfig+0xc58>)
 800400a:	6a1b      	ldr	r3, [r3, #32]
 800400c:	4aaf      	ldr	r2, [pc, #700]	@ (80042cc <HAL_RCC_OscConfig+0xc58>)
 800400e:	f023 0301 	bic.w	r3, r3, #1
 8004012:	6213      	str	r3, [r2, #32]
 8004014:	4bad      	ldr	r3, [pc, #692]	@ (80042cc <HAL_RCC_OscConfig+0xc58>)
 8004016:	6a1b      	ldr	r3, [r3, #32]
 8004018:	4aac      	ldr	r2, [pc, #688]	@ (80042cc <HAL_RCC_OscConfig+0xc58>)
 800401a:	f023 0304 	bic.w	r3, r3, #4
 800401e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004020:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004024:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	68db      	ldr	r3, [r3, #12]
 800402c:	2b00      	cmp	r3, #0
 800402e:	f000 8081 	beq.w	8004134 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004032:	f7fd fa6b 	bl	800150c <HAL_GetTick>
 8004036:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800403a:	e00b      	b.n	8004054 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800403c:	f7fd fa66 	bl	800150c <HAL_GetTick>
 8004040:	4602      	mov	r2, r0
 8004042:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004046:	1ad3      	subs	r3, r2, r3
 8004048:	f241 3288 	movw	r2, #5000	@ 0x1388
 800404c:	4293      	cmp	r3, r2
 800404e:	d901      	bls.n	8004054 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8004050:	2303      	movs	r3, #3
 8004052:	e345      	b.n	80046e0 <HAL_RCC_OscConfig+0x106c>
 8004054:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004058:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800405c:	2202      	movs	r2, #2
 800405e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004060:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004064:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	fa93 f2a3 	rbit	r2, r3
 800406e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004072:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8004076:	601a      	str	r2, [r3, #0]
 8004078:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800407c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004080:	2202      	movs	r2, #2
 8004082:	601a      	str	r2, [r3, #0]
 8004084:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004088:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	fa93 f2a3 	rbit	r2, r3
 8004092:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004096:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800409a:	601a      	str	r2, [r3, #0]
  return result;
 800409c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040a0:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80040a4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040a6:	fab3 f383 	clz	r3, r3
 80040aa:	b2db      	uxtb	r3, r3
 80040ac:	095b      	lsrs	r3, r3, #5
 80040ae:	b2db      	uxtb	r3, r3
 80040b0:	f043 0302 	orr.w	r3, r3, #2
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	2b02      	cmp	r3, #2
 80040b8:	d102      	bne.n	80040c0 <HAL_RCC_OscConfig+0xa4c>
 80040ba:	4b84      	ldr	r3, [pc, #528]	@ (80042cc <HAL_RCC_OscConfig+0xc58>)
 80040bc:	6a1b      	ldr	r3, [r3, #32]
 80040be:	e013      	b.n	80040e8 <HAL_RCC_OscConfig+0xa74>
 80040c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040c4:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80040c8:	2202      	movs	r2, #2
 80040ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040d0:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	fa93 f2a3 	rbit	r2, r3
 80040da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040de:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80040e2:	601a      	str	r2, [r3, #0]
 80040e4:	4b79      	ldr	r3, [pc, #484]	@ (80042cc <HAL_RCC_OscConfig+0xc58>)
 80040e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040e8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80040ec:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80040f0:	2102      	movs	r1, #2
 80040f2:	6011      	str	r1, [r2, #0]
 80040f4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80040f8:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80040fc:	6812      	ldr	r2, [r2, #0]
 80040fe:	fa92 f1a2 	rbit	r1, r2
 8004102:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004106:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800410a:	6011      	str	r1, [r2, #0]
  return result;
 800410c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004110:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8004114:	6812      	ldr	r2, [r2, #0]
 8004116:	fab2 f282 	clz	r2, r2
 800411a:	b2d2      	uxtb	r2, r2
 800411c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004120:	b2d2      	uxtb	r2, r2
 8004122:	f002 021f 	and.w	r2, r2, #31
 8004126:	2101      	movs	r1, #1
 8004128:	fa01 f202 	lsl.w	r2, r1, r2
 800412c:	4013      	ands	r3, r2
 800412e:	2b00      	cmp	r3, #0
 8004130:	d084      	beq.n	800403c <HAL_RCC_OscConfig+0x9c8>
 8004132:	e07f      	b.n	8004234 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004134:	f7fd f9ea 	bl	800150c <HAL_GetTick>
 8004138:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800413c:	e00b      	b.n	8004156 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800413e:	f7fd f9e5 	bl	800150c <HAL_GetTick>
 8004142:	4602      	mov	r2, r0
 8004144:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004148:	1ad3      	subs	r3, r2, r3
 800414a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800414e:	4293      	cmp	r3, r2
 8004150:	d901      	bls.n	8004156 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8004152:	2303      	movs	r3, #3
 8004154:	e2c4      	b.n	80046e0 <HAL_RCC_OscConfig+0x106c>
 8004156:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800415a:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800415e:	2202      	movs	r2, #2
 8004160:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004162:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004166:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	fa93 f2a3 	rbit	r2, r3
 8004170:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004174:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8004178:	601a      	str	r2, [r3, #0]
 800417a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800417e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8004182:	2202      	movs	r2, #2
 8004184:	601a      	str	r2, [r3, #0]
 8004186:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800418a:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	fa93 f2a3 	rbit	r2, r3
 8004194:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004198:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800419c:	601a      	str	r2, [r3, #0]
  return result;
 800419e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041a2:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80041a6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041a8:	fab3 f383 	clz	r3, r3
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	095b      	lsrs	r3, r3, #5
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	f043 0302 	orr.w	r3, r3, #2
 80041b6:	b2db      	uxtb	r3, r3
 80041b8:	2b02      	cmp	r3, #2
 80041ba:	d102      	bne.n	80041c2 <HAL_RCC_OscConfig+0xb4e>
 80041bc:	4b43      	ldr	r3, [pc, #268]	@ (80042cc <HAL_RCC_OscConfig+0xc58>)
 80041be:	6a1b      	ldr	r3, [r3, #32]
 80041c0:	e013      	b.n	80041ea <HAL_RCC_OscConfig+0xb76>
 80041c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041c6:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80041ca:	2202      	movs	r2, #2
 80041cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041d2:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	fa93 f2a3 	rbit	r2, r3
 80041dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041e0:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80041e4:	601a      	str	r2, [r3, #0]
 80041e6:	4b39      	ldr	r3, [pc, #228]	@ (80042cc <HAL_RCC_OscConfig+0xc58>)
 80041e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ea:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80041ee:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80041f2:	2102      	movs	r1, #2
 80041f4:	6011      	str	r1, [r2, #0]
 80041f6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80041fa:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80041fe:	6812      	ldr	r2, [r2, #0]
 8004200:	fa92 f1a2 	rbit	r1, r2
 8004204:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004208:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800420c:	6011      	str	r1, [r2, #0]
  return result;
 800420e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004212:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8004216:	6812      	ldr	r2, [r2, #0]
 8004218:	fab2 f282 	clz	r2, r2
 800421c:	b2d2      	uxtb	r2, r2
 800421e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004222:	b2d2      	uxtb	r2, r2
 8004224:	f002 021f 	and.w	r2, r2, #31
 8004228:	2101      	movs	r1, #1
 800422a:	fa01 f202 	lsl.w	r2, r1, r2
 800422e:	4013      	ands	r3, r2
 8004230:	2b00      	cmp	r3, #0
 8004232:	d184      	bne.n	800413e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004234:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8004238:	2b01      	cmp	r3, #1
 800423a:	d105      	bne.n	8004248 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800423c:	4b23      	ldr	r3, [pc, #140]	@ (80042cc <HAL_RCC_OscConfig+0xc58>)
 800423e:	69db      	ldr	r3, [r3, #28]
 8004240:	4a22      	ldr	r2, [pc, #136]	@ (80042cc <HAL_RCC_OscConfig+0xc58>)
 8004242:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004246:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004248:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800424c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	69db      	ldr	r3, [r3, #28]
 8004254:	2b00      	cmp	r3, #0
 8004256:	f000 8242 	beq.w	80046de <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800425a:	4b1c      	ldr	r3, [pc, #112]	@ (80042cc <HAL_RCC_OscConfig+0xc58>)
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	f003 030c 	and.w	r3, r3, #12
 8004262:	2b08      	cmp	r3, #8
 8004264:	f000 8213 	beq.w	800468e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004268:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800426c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	69db      	ldr	r3, [r3, #28]
 8004274:	2b02      	cmp	r3, #2
 8004276:	f040 8162 	bne.w	800453e <HAL_RCC_OscConfig+0xeca>
 800427a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800427e:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8004282:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004286:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004288:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800428c:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	fa93 f2a3 	rbit	r2, r3
 8004296:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800429a:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800429e:	601a      	str	r2, [r3, #0]
  return result;
 80042a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042a4:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80042a8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042aa:	fab3 f383 	clz	r3, r3
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80042b4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80042b8:	009b      	lsls	r3, r3, #2
 80042ba:	461a      	mov	r2, r3
 80042bc:	2300      	movs	r3, #0
 80042be:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042c0:	f7fd f924 	bl	800150c <HAL_GetTick>
 80042c4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80042c8:	e00c      	b.n	80042e4 <HAL_RCC_OscConfig+0xc70>
 80042ca:	bf00      	nop
 80042cc:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042d0:	f7fd f91c 	bl	800150c <HAL_GetTick>
 80042d4:	4602      	mov	r2, r0
 80042d6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80042da:	1ad3      	subs	r3, r2, r3
 80042dc:	2b02      	cmp	r3, #2
 80042de:	d901      	bls.n	80042e4 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80042e0:	2303      	movs	r3, #3
 80042e2:	e1fd      	b.n	80046e0 <HAL_RCC_OscConfig+0x106c>
 80042e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042e8:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80042ec:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80042f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042f6:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	fa93 f2a3 	rbit	r2, r3
 8004300:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004304:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8004308:	601a      	str	r2, [r3, #0]
  return result;
 800430a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800430e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8004312:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004314:	fab3 f383 	clz	r3, r3
 8004318:	b2db      	uxtb	r3, r3
 800431a:	095b      	lsrs	r3, r3, #5
 800431c:	b2db      	uxtb	r3, r3
 800431e:	f043 0301 	orr.w	r3, r3, #1
 8004322:	b2db      	uxtb	r3, r3
 8004324:	2b01      	cmp	r3, #1
 8004326:	d102      	bne.n	800432e <HAL_RCC_OscConfig+0xcba>
 8004328:	4bb0      	ldr	r3, [pc, #704]	@ (80045ec <HAL_RCC_OscConfig+0xf78>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	e027      	b.n	800437e <HAL_RCC_OscConfig+0xd0a>
 800432e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004332:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8004336:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800433a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800433c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004340:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	fa93 f2a3 	rbit	r2, r3
 800434a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800434e:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8004352:	601a      	str	r2, [r3, #0]
 8004354:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004358:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800435c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004360:	601a      	str	r2, [r3, #0]
 8004362:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004366:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	fa93 f2a3 	rbit	r2, r3
 8004370:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004374:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8004378:	601a      	str	r2, [r3, #0]
 800437a:	4b9c      	ldr	r3, [pc, #624]	@ (80045ec <HAL_RCC_OscConfig+0xf78>)
 800437c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800437e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004382:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8004386:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800438a:	6011      	str	r1, [r2, #0]
 800438c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004390:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8004394:	6812      	ldr	r2, [r2, #0]
 8004396:	fa92 f1a2 	rbit	r1, r2
 800439a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800439e:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80043a2:	6011      	str	r1, [r2, #0]
  return result;
 80043a4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80043a8:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80043ac:	6812      	ldr	r2, [r2, #0]
 80043ae:	fab2 f282 	clz	r2, r2
 80043b2:	b2d2      	uxtb	r2, r2
 80043b4:	f042 0220 	orr.w	r2, r2, #32
 80043b8:	b2d2      	uxtb	r2, r2
 80043ba:	f002 021f 	and.w	r2, r2, #31
 80043be:	2101      	movs	r1, #1
 80043c0:	fa01 f202 	lsl.w	r2, r1, r2
 80043c4:	4013      	ands	r3, r2
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d182      	bne.n	80042d0 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80043ca:	4b88      	ldr	r3, [pc, #544]	@ (80045ec <HAL_RCC_OscConfig+0xf78>)
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80043d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043d6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80043de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043e2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	6a1b      	ldr	r3, [r3, #32]
 80043ea:	430b      	orrs	r3, r1
 80043ec:	497f      	ldr	r1, [pc, #508]	@ (80045ec <HAL_RCC_OscConfig+0xf78>)
 80043ee:	4313      	orrs	r3, r2
 80043f0:	604b      	str	r3, [r1, #4]
 80043f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043f6:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80043fa:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80043fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004400:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004404:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	fa93 f2a3 	rbit	r2, r3
 800440e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004412:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8004416:	601a      	str	r2, [r3, #0]
  return result;
 8004418:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800441c:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8004420:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004422:	fab3 f383 	clz	r3, r3
 8004426:	b2db      	uxtb	r3, r3
 8004428:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800442c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004430:	009b      	lsls	r3, r3, #2
 8004432:	461a      	mov	r2, r3
 8004434:	2301      	movs	r3, #1
 8004436:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004438:	f7fd f868 	bl	800150c <HAL_GetTick>
 800443c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004440:	e009      	b.n	8004456 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004442:	f7fd f863 	bl	800150c <HAL_GetTick>
 8004446:	4602      	mov	r2, r0
 8004448:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800444c:	1ad3      	subs	r3, r2, r3
 800444e:	2b02      	cmp	r3, #2
 8004450:	d901      	bls.n	8004456 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8004452:	2303      	movs	r3, #3
 8004454:	e144      	b.n	80046e0 <HAL_RCC_OscConfig+0x106c>
 8004456:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800445a:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800445e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004462:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004464:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004468:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	fa93 f2a3 	rbit	r2, r3
 8004472:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004476:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800447a:	601a      	str	r2, [r3, #0]
  return result;
 800447c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004480:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8004484:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004486:	fab3 f383 	clz	r3, r3
 800448a:	b2db      	uxtb	r3, r3
 800448c:	095b      	lsrs	r3, r3, #5
 800448e:	b2db      	uxtb	r3, r3
 8004490:	f043 0301 	orr.w	r3, r3, #1
 8004494:	b2db      	uxtb	r3, r3
 8004496:	2b01      	cmp	r3, #1
 8004498:	d102      	bne.n	80044a0 <HAL_RCC_OscConfig+0xe2c>
 800449a:	4b54      	ldr	r3, [pc, #336]	@ (80045ec <HAL_RCC_OscConfig+0xf78>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	e027      	b.n	80044f0 <HAL_RCC_OscConfig+0xe7c>
 80044a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044a4:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80044a8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80044ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044b2:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	fa93 f2a3 	rbit	r2, r3
 80044bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044c0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80044c4:	601a      	str	r2, [r3, #0]
 80044c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044ca:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80044ce:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80044d2:	601a      	str	r2, [r3, #0]
 80044d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044d8:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	fa93 f2a3 	rbit	r2, r3
 80044e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044e6:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80044ea:	601a      	str	r2, [r3, #0]
 80044ec:	4b3f      	ldr	r3, [pc, #252]	@ (80045ec <HAL_RCC_OscConfig+0xf78>)
 80044ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044f0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80044f4:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80044f8:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80044fc:	6011      	str	r1, [r2, #0]
 80044fe:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004502:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8004506:	6812      	ldr	r2, [r2, #0]
 8004508:	fa92 f1a2 	rbit	r1, r2
 800450c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004510:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8004514:	6011      	str	r1, [r2, #0]
  return result;
 8004516:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800451a:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800451e:	6812      	ldr	r2, [r2, #0]
 8004520:	fab2 f282 	clz	r2, r2
 8004524:	b2d2      	uxtb	r2, r2
 8004526:	f042 0220 	orr.w	r2, r2, #32
 800452a:	b2d2      	uxtb	r2, r2
 800452c:	f002 021f 	and.w	r2, r2, #31
 8004530:	2101      	movs	r1, #1
 8004532:	fa01 f202 	lsl.w	r2, r1, r2
 8004536:	4013      	ands	r3, r2
 8004538:	2b00      	cmp	r3, #0
 800453a:	d082      	beq.n	8004442 <HAL_RCC_OscConfig+0xdce>
 800453c:	e0cf      	b.n	80046de <HAL_RCC_OscConfig+0x106a>
 800453e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004542:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8004546:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800454a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800454c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004550:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	fa93 f2a3 	rbit	r2, r3
 800455a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800455e:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8004562:	601a      	str	r2, [r3, #0]
  return result;
 8004564:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004568:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800456c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800456e:	fab3 f383 	clz	r3, r3
 8004572:	b2db      	uxtb	r3, r3
 8004574:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004578:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800457c:	009b      	lsls	r3, r3, #2
 800457e:	461a      	mov	r2, r3
 8004580:	2300      	movs	r3, #0
 8004582:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004584:	f7fc ffc2 	bl	800150c <HAL_GetTick>
 8004588:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800458c:	e009      	b.n	80045a2 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800458e:	f7fc ffbd 	bl	800150c <HAL_GetTick>
 8004592:	4602      	mov	r2, r0
 8004594:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004598:	1ad3      	subs	r3, r2, r3
 800459a:	2b02      	cmp	r3, #2
 800459c:	d901      	bls.n	80045a2 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800459e:	2303      	movs	r3, #3
 80045a0:	e09e      	b.n	80046e0 <HAL_RCC_OscConfig+0x106c>
 80045a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045a6:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80045aa:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80045ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045b4:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	fa93 f2a3 	rbit	r2, r3
 80045be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045c2:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80045c6:	601a      	str	r2, [r3, #0]
  return result;
 80045c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045cc:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80045d0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80045d2:	fab3 f383 	clz	r3, r3
 80045d6:	b2db      	uxtb	r3, r3
 80045d8:	095b      	lsrs	r3, r3, #5
 80045da:	b2db      	uxtb	r3, r3
 80045dc:	f043 0301 	orr.w	r3, r3, #1
 80045e0:	b2db      	uxtb	r3, r3
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d104      	bne.n	80045f0 <HAL_RCC_OscConfig+0xf7c>
 80045e6:	4b01      	ldr	r3, [pc, #4]	@ (80045ec <HAL_RCC_OscConfig+0xf78>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	e029      	b.n	8004640 <HAL_RCC_OscConfig+0xfcc>
 80045ec:	40021000 	.word	0x40021000
 80045f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045f4:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80045f8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80045fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004602:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	fa93 f2a3 	rbit	r2, r3
 800460c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004610:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8004614:	601a      	str	r2, [r3, #0]
 8004616:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800461a:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800461e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004622:	601a      	str	r2, [r3, #0]
 8004624:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004628:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	fa93 f2a3 	rbit	r2, r3
 8004632:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004636:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800463a:	601a      	str	r2, [r3, #0]
 800463c:	4b2b      	ldr	r3, [pc, #172]	@ (80046ec <HAL_RCC_OscConfig+0x1078>)
 800463e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004640:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004644:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8004648:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800464c:	6011      	str	r1, [r2, #0]
 800464e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004652:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8004656:	6812      	ldr	r2, [r2, #0]
 8004658:	fa92 f1a2 	rbit	r1, r2
 800465c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004660:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8004664:	6011      	str	r1, [r2, #0]
  return result;
 8004666:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800466a:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800466e:	6812      	ldr	r2, [r2, #0]
 8004670:	fab2 f282 	clz	r2, r2
 8004674:	b2d2      	uxtb	r2, r2
 8004676:	f042 0220 	orr.w	r2, r2, #32
 800467a:	b2d2      	uxtb	r2, r2
 800467c:	f002 021f 	and.w	r2, r2, #31
 8004680:	2101      	movs	r1, #1
 8004682:	fa01 f202 	lsl.w	r2, r1, r2
 8004686:	4013      	ands	r3, r2
 8004688:	2b00      	cmp	r3, #0
 800468a:	d180      	bne.n	800458e <HAL_RCC_OscConfig+0xf1a>
 800468c:	e027      	b.n	80046de <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800468e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004692:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	69db      	ldr	r3, [r3, #28]
 800469a:	2b01      	cmp	r3, #1
 800469c:	d101      	bne.n	80046a2 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	e01e      	b.n	80046e0 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80046a2:	4b12      	ldr	r3, [pc, #72]	@ (80046ec <HAL_RCC_OscConfig+0x1078>)
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80046aa:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80046ae:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80046b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046b6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	6a1b      	ldr	r3, [r3, #32]
 80046be:	429a      	cmp	r2, r3
 80046c0:	d10b      	bne.n	80046da <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80046c2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80046c6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80046ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046ce:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80046d6:	429a      	cmp	r2, r3
 80046d8:	d001      	beq.n	80046de <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	e000      	b.n	80046e0 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80046de:	2300      	movs	r3, #0
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}
 80046ea:	bf00      	nop
 80046ec:	40021000 	.word	0x40021000

080046f0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b09e      	sub	sp, #120	@ 0x78
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
 80046f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80046fa:	2300      	movs	r3, #0
 80046fc:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d101      	bne.n	8004708 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004704:	2301      	movs	r3, #1
 8004706:	e162      	b.n	80049ce <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004708:	4b90      	ldr	r3, [pc, #576]	@ (800494c <HAL_RCC_ClockConfig+0x25c>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f003 0307 	and.w	r3, r3, #7
 8004710:	683a      	ldr	r2, [r7, #0]
 8004712:	429a      	cmp	r2, r3
 8004714:	d910      	bls.n	8004738 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004716:	4b8d      	ldr	r3, [pc, #564]	@ (800494c <HAL_RCC_ClockConfig+0x25c>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f023 0207 	bic.w	r2, r3, #7
 800471e:	498b      	ldr	r1, [pc, #556]	@ (800494c <HAL_RCC_ClockConfig+0x25c>)
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	4313      	orrs	r3, r2
 8004724:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004726:	4b89      	ldr	r3, [pc, #548]	@ (800494c <HAL_RCC_ClockConfig+0x25c>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 0307 	and.w	r3, r3, #7
 800472e:	683a      	ldr	r2, [r7, #0]
 8004730:	429a      	cmp	r2, r3
 8004732:	d001      	beq.n	8004738 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	e14a      	b.n	80049ce <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f003 0302 	and.w	r3, r3, #2
 8004740:	2b00      	cmp	r3, #0
 8004742:	d008      	beq.n	8004756 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004744:	4b82      	ldr	r3, [pc, #520]	@ (8004950 <HAL_RCC_ClockConfig+0x260>)
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	497f      	ldr	r1, [pc, #508]	@ (8004950 <HAL_RCC_ClockConfig+0x260>)
 8004752:	4313      	orrs	r3, r2
 8004754:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f003 0301 	and.w	r3, r3, #1
 800475e:	2b00      	cmp	r3, #0
 8004760:	f000 80dc 	beq.w	800491c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	2b01      	cmp	r3, #1
 800476a:	d13c      	bne.n	80047e6 <HAL_RCC_ClockConfig+0xf6>
 800476c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004770:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004772:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004774:	fa93 f3a3 	rbit	r3, r3
 8004778:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800477a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800477c:	fab3 f383 	clz	r3, r3
 8004780:	b2db      	uxtb	r3, r3
 8004782:	095b      	lsrs	r3, r3, #5
 8004784:	b2db      	uxtb	r3, r3
 8004786:	f043 0301 	orr.w	r3, r3, #1
 800478a:	b2db      	uxtb	r3, r3
 800478c:	2b01      	cmp	r3, #1
 800478e:	d102      	bne.n	8004796 <HAL_RCC_ClockConfig+0xa6>
 8004790:	4b6f      	ldr	r3, [pc, #444]	@ (8004950 <HAL_RCC_ClockConfig+0x260>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	e00f      	b.n	80047b6 <HAL_RCC_ClockConfig+0xc6>
 8004796:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800479a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800479c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800479e:	fa93 f3a3 	rbit	r3, r3
 80047a2:	667b      	str	r3, [r7, #100]	@ 0x64
 80047a4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80047a8:	663b      	str	r3, [r7, #96]	@ 0x60
 80047aa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80047ac:	fa93 f3a3 	rbit	r3, r3
 80047b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80047b2:	4b67      	ldr	r3, [pc, #412]	@ (8004950 <HAL_RCC_ClockConfig+0x260>)
 80047b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047b6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80047ba:	65ba      	str	r2, [r7, #88]	@ 0x58
 80047bc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80047be:	fa92 f2a2 	rbit	r2, r2
 80047c2:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 80047c4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80047c6:	fab2 f282 	clz	r2, r2
 80047ca:	b2d2      	uxtb	r2, r2
 80047cc:	f042 0220 	orr.w	r2, r2, #32
 80047d0:	b2d2      	uxtb	r2, r2
 80047d2:	f002 021f 	and.w	r2, r2, #31
 80047d6:	2101      	movs	r1, #1
 80047d8:	fa01 f202 	lsl.w	r2, r1, r2
 80047dc:	4013      	ands	r3, r2
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d17b      	bne.n	80048da <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	e0f3      	b.n	80049ce <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	2b02      	cmp	r3, #2
 80047ec:	d13c      	bne.n	8004868 <HAL_RCC_ClockConfig+0x178>
 80047ee:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80047f2:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80047f6:	fa93 f3a3 	rbit	r3, r3
 80047fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80047fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047fe:	fab3 f383 	clz	r3, r3
 8004802:	b2db      	uxtb	r3, r3
 8004804:	095b      	lsrs	r3, r3, #5
 8004806:	b2db      	uxtb	r3, r3
 8004808:	f043 0301 	orr.w	r3, r3, #1
 800480c:	b2db      	uxtb	r3, r3
 800480e:	2b01      	cmp	r3, #1
 8004810:	d102      	bne.n	8004818 <HAL_RCC_ClockConfig+0x128>
 8004812:	4b4f      	ldr	r3, [pc, #316]	@ (8004950 <HAL_RCC_ClockConfig+0x260>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	e00f      	b.n	8004838 <HAL_RCC_ClockConfig+0x148>
 8004818:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800481c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800481e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004820:	fa93 f3a3 	rbit	r3, r3
 8004824:	647b      	str	r3, [r7, #68]	@ 0x44
 8004826:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800482a:	643b      	str	r3, [r7, #64]	@ 0x40
 800482c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800482e:	fa93 f3a3 	rbit	r3, r3
 8004832:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004834:	4b46      	ldr	r3, [pc, #280]	@ (8004950 <HAL_RCC_ClockConfig+0x260>)
 8004836:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004838:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800483c:	63ba      	str	r2, [r7, #56]	@ 0x38
 800483e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004840:	fa92 f2a2 	rbit	r2, r2
 8004844:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8004846:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004848:	fab2 f282 	clz	r2, r2
 800484c:	b2d2      	uxtb	r2, r2
 800484e:	f042 0220 	orr.w	r2, r2, #32
 8004852:	b2d2      	uxtb	r2, r2
 8004854:	f002 021f 	and.w	r2, r2, #31
 8004858:	2101      	movs	r1, #1
 800485a:	fa01 f202 	lsl.w	r2, r1, r2
 800485e:	4013      	ands	r3, r2
 8004860:	2b00      	cmp	r3, #0
 8004862:	d13a      	bne.n	80048da <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004864:	2301      	movs	r3, #1
 8004866:	e0b2      	b.n	80049ce <HAL_RCC_ClockConfig+0x2de>
 8004868:	2302      	movs	r3, #2
 800486a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800486c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800486e:	fa93 f3a3 	rbit	r3, r3
 8004872:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8004874:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004876:	fab3 f383 	clz	r3, r3
 800487a:	b2db      	uxtb	r3, r3
 800487c:	095b      	lsrs	r3, r3, #5
 800487e:	b2db      	uxtb	r3, r3
 8004880:	f043 0301 	orr.w	r3, r3, #1
 8004884:	b2db      	uxtb	r3, r3
 8004886:	2b01      	cmp	r3, #1
 8004888:	d102      	bne.n	8004890 <HAL_RCC_ClockConfig+0x1a0>
 800488a:	4b31      	ldr	r3, [pc, #196]	@ (8004950 <HAL_RCC_ClockConfig+0x260>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	e00d      	b.n	80048ac <HAL_RCC_ClockConfig+0x1bc>
 8004890:	2302      	movs	r3, #2
 8004892:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004894:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004896:	fa93 f3a3 	rbit	r3, r3
 800489a:	627b      	str	r3, [r7, #36]	@ 0x24
 800489c:	2302      	movs	r3, #2
 800489e:	623b      	str	r3, [r7, #32]
 80048a0:	6a3b      	ldr	r3, [r7, #32]
 80048a2:	fa93 f3a3 	rbit	r3, r3
 80048a6:	61fb      	str	r3, [r7, #28]
 80048a8:	4b29      	ldr	r3, [pc, #164]	@ (8004950 <HAL_RCC_ClockConfig+0x260>)
 80048aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048ac:	2202      	movs	r2, #2
 80048ae:	61ba      	str	r2, [r7, #24]
 80048b0:	69ba      	ldr	r2, [r7, #24]
 80048b2:	fa92 f2a2 	rbit	r2, r2
 80048b6:	617a      	str	r2, [r7, #20]
  return result;
 80048b8:	697a      	ldr	r2, [r7, #20]
 80048ba:	fab2 f282 	clz	r2, r2
 80048be:	b2d2      	uxtb	r2, r2
 80048c0:	f042 0220 	orr.w	r2, r2, #32
 80048c4:	b2d2      	uxtb	r2, r2
 80048c6:	f002 021f 	and.w	r2, r2, #31
 80048ca:	2101      	movs	r1, #1
 80048cc:	fa01 f202 	lsl.w	r2, r1, r2
 80048d0:	4013      	ands	r3, r2
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d101      	bne.n	80048da <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	e079      	b.n	80049ce <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80048da:	4b1d      	ldr	r3, [pc, #116]	@ (8004950 <HAL_RCC_ClockConfig+0x260>)
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	f023 0203 	bic.w	r2, r3, #3
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	491a      	ldr	r1, [pc, #104]	@ (8004950 <HAL_RCC_ClockConfig+0x260>)
 80048e8:	4313      	orrs	r3, r2
 80048ea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80048ec:	f7fc fe0e 	bl	800150c <HAL_GetTick>
 80048f0:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048f2:	e00a      	b.n	800490a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048f4:	f7fc fe0a 	bl	800150c <HAL_GetTick>
 80048f8:	4602      	mov	r2, r0
 80048fa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80048fc:	1ad3      	subs	r3, r2, r3
 80048fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004902:	4293      	cmp	r3, r2
 8004904:	d901      	bls.n	800490a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004906:	2303      	movs	r3, #3
 8004908:	e061      	b.n	80049ce <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800490a:	4b11      	ldr	r3, [pc, #68]	@ (8004950 <HAL_RCC_ClockConfig+0x260>)
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	f003 020c 	and.w	r2, r3, #12
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	009b      	lsls	r3, r3, #2
 8004918:	429a      	cmp	r2, r3
 800491a:	d1eb      	bne.n	80048f4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800491c:	4b0b      	ldr	r3, [pc, #44]	@ (800494c <HAL_RCC_ClockConfig+0x25c>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f003 0307 	and.w	r3, r3, #7
 8004924:	683a      	ldr	r2, [r7, #0]
 8004926:	429a      	cmp	r2, r3
 8004928:	d214      	bcs.n	8004954 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800492a:	4b08      	ldr	r3, [pc, #32]	@ (800494c <HAL_RCC_ClockConfig+0x25c>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f023 0207 	bic.w	r2, r3, #7
 8004932:	4906      	ldr	r1, [pc, #24]	@ (800494c <HAL_RCC_ClockConfig+0x25c>)
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	4313      	orrs	r3, r2
 8004938:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800493a:	4b04      	ldr	r3, [pc, #16]	@ (800494c <HAL_RCC_ClockConfig+0x25c>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f003 0307 	and.w	r3, r3, #7
 8004942:	683a      	ldr	r2, [r7, #0]
 8004944:	429a      	cmp	r2, r3
 8004946:	d005      	beq.n	8004954 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	e040      	b.n	80049ce <HAL_RCC_ClockConfig+0x2de>
 800494c:	40022000 	.word	0x40022000
 8004950:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f003 0304 	and.w	r3, r3, #4
 800495c:	2b00      	cmp	r3, #0
 800495e:	d008      	beq.n	8004972 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004960:	4b1d      	ldr	r3, [pc, #116]	@ (80049d8 <HAL_RCC_ClockConfig+0x2e8>)
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	491a      	ldr	r1, [pc, #104]	@ (80049d8 <HAL_RCC_ClockConfig+0x2e8>)
 800496e:	4313      	orrs	r3, r2
 8004970:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f003 0308 	and.w	r3, r3, #8
 800497a:	2b00      	cmp	r3, #0
 800497c:	d009      	beq.n	8004992 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800497e:	4b16      	ldr	r3, [pc, #88]	@ (80049d8 <HAL_RCC_ClockConfig+0x2e8>)
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	691b      	ldr	r3, [r3, #16]
 800498a:	00db      	lsls	r3, r3, #3
 800498c:	4912      	ldr	r1, [pc, #72]	@ (80049d8 <HAL_RCC_ClockConfig+0x2e8>)
 800498e:	4313      	orrs	r3, r2
 8004990:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004992:	f000 f829 	bl	80049e8 <HAL_RCC_GetSysClockFreq>
 8004996:	4601      	mov	r1, r0
 8004998:	4b0f      	ldr	r3, [pc, #60]	@ (80049d8 <HAL_RCC_ClockConfig+0x2e8>)
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80049a0:	22f0      	movs	r2, #240	@ 0xf0
 80049a2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049a4:	693a      	ldr	r2, [r7, #16]
 80049a6:	fa92 f2a2 	rbit	r2, r2
 80049aa:	60fa      	str	r2, [r7, #12]
  return result;
 80049ac:	68fa      	ldr	r2, [r7, #12]
 80049ae:	fab2 f282 	clz	r2, r2
 80049b2:	b2d2      	uxtb	r2, r2
 80049b4:	40d3      	lsrs	r3, r2
 80049b6:	4a09      	ldr	r2, [pc, #36]	@ (80049dc <HAL_RCC_ClockConfig+0x2ec>)
 80049b8:	5cd3      	ldrb	r3, [r2, r3]
 80049ba:	fa21 f303 	lsr.w	r3, r1, r3
 80049be:	4a08      	ldr	r2, [pc, #32]	@ (80049e0 <HAL_RCC_ClockConfig+0x2f0>)
 80049c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80049c2:	4b08      	ldr	r3, [pc, #32]	@ (80049e4 <HAL_RCC_ClockConfig+0x2f4>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4618      	mov	r0, r3
 80049c8:	f7fc fc64 	bl	8001294 <HAL_InitTick>
  
  return HAL_OK;
 80049cc:	2300      	movs	r3, #0
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	3778      	adds	r7, #120	@ 0x78
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}
 80049d6:	bf00      	nop
 80049d8:	40021000 	.word	0x40021000
 80049dc:	08008254 	.word	0x08008254
 80049e0:	20000004 	.word	0x20000004
 80049e4:	20000008 	.word	0x20000008

080049e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b087      	sub	sp, #28
 80049ec:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80049ee:	2300      	movs	r3, #0
 80049f0:	60fb      	str	r3, [r7, #12]
 80049f2:	2300      	movs	r3, #0
 80049f4:	60bb      	str	r3, [r7, #8]
 80049f6:	2300      	movs	r3, #0
 80049f8:	617b      	str	r3, [r7, #20]
 80049fa:	2300      	movs	r3, #0
 80049fc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80049fe:	2300      	movs	r3, #0
 8004a00:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8004a02:	4b1e      	ldr	r3, [pc, #120]	@ (8004a7c <HAL_RCC_GetSysClockFreq+0x94>)
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	f003 030c 	and.w	r3, r3, #12
 8004a0e:	2b04      	cmp	r3, #4
 8004a10:	d002      	beq.n	8004a18 <HAL_RCC_GetSysClockFreq+0x30>
 8004a12:	2b08      	cmp	r3, #8
 8004a14:	d003      	beq.n	8004a1e <HAL_RCC_GetSysClockFreq+0x36>
 8004a16:	e026      	b.n	8004a66 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004a18:	4b19      	ldr	r3, [pc, #100]	@ (8004a80 <HAL_RCC_GetSysClockFreq+0x98>)
 8004a1a:	613b      	str	r3, [r7, #16]
      break;
 8004a1c:	e026      	b.n	8004a6c <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	0c9b      	lsrs	r3, r3, #18
 8004a22:	f003 030f 	and.w	r3, r3, #15
 8004a26:	4a17      	ldr	r2, [pc, #92]	@ (8004a84 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004a28:	5cd3      	ldrb	r3, [r2, r3]
 8004a2a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8004a2c:	4b13      	ldr	r3, [pc, #76]	@ (8004a7c <HAL_RCC_GetSysClockFreq+0x94>)
 8004a2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a30:	f003 030f 	and.w	r3, r3, #15
 8004a34:	4a14      	ldr	r2, [pc, #80]	@ (8004a88 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004a36:	5cd3      	ldrb	r3, [r2, r3]
 8004a38:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d008      	beq.n	8004a56 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004a44:	4a0e      	ldr	r2, [pc, #56]	@ (8004a80 <HAL_RCC_GetSysClockFreq+0x98>)
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	fbb2 f2f3 	udiv	r2, r2, r3
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	fb02 f303 	mul.w	r3, r2, r3
 8004a52:	617b      	str	r3, [r7, #20]
 8004a54:	e004      	b.n	8004a60 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	4a0c      	ldr	r2, [pc, #48]	@ (8004a8c <HAL_RCC_GetSysClockFreq+0xa4>)
 8004a5a:	fb02 f303 	mul.w	r3, r2, r3
 8004a5e:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	613b      	str	r3, [r7, #16]
      break;
 8004a64:	e002      	b.n	8004a6c <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004a66:	4b06      	ldr	r3, [pc, #24]	@ (8004a80 <HAL_RCC_GetSysClockFreq+0x98>)
 8004a68:	613b      	str	r3, [r7, #16]
      break;
 8004a6a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a6c:	693b      	ldr	r3, [r7, #16]
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	371c      	adds	r7, #28
 8004a72:	46bd      	mov	sp, r7
 8004a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a78:	4770      	bx	lr
 8004a7a:	bf00      	nop
 8004a7c:	40021000 	.word	0x40021000
 8004a80:	007a1200 	.word	0x007a1200
 8004a84:	0800826c 	.word	0x0800826c
 8004a88:	0800827c 	.word	0x0800827c
 8004a8c:	003d0900 	.word	0x003d0900

08004a90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a90:	b480      	push	{r7}
 8004a92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a94:	4b03      	ldr	r3, [pc, #12]	@ (8004aa4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004a96:	681b      	ldr	r3, [r3, #0]
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa0:	4770      	bx	lr
 8004aa2:	bf00      	nop
 8004aa4:	20000004 	.word	0x20000004

08004aa8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b082      	sub	sp, #8
 8004aac:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004aae:	f7ff ffef 	bl	8004a90 <HAL_RCC_GetHCLKFreq>
 8004ab2:	4601      	mov	r1, r0
 8004ab4:	4b0b      	ldr	r3, [pc, #44]	@ (8004ae4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004abc:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8004ac0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ac2:	687a      	ldr	r2, [r7, #4]
 8004ac4:	fa92 f2a2 	rbit	r2, r2
 8004ac8:	603a      	str	r2, [r7, #0]
  return result;
 8004aca:	683a      	ldr	r2, [r7, #0]
 8004acc:	fab2 f282 	clz	r2, r2
 8004ad0:	b2d2      	uxtb	r2, r2
 8004ad2:	40d3      	lsrs	r3, r2
 8004ad4:	4a04      	ldr	r2, [pc, #16]	@ (8004ae8 <HAL_RCC_GetPCLK1Freq+0x40>)
 8004ad6:	5cd3      	ldrb	r3, [r2, r3]
 8004ad8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004adc:	4618      	mov	r0, r3
 8004ade:	3708      	adds	r7, #8
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bd80      	pop	{r7, pc}
 8004ae4:	40021000 	.word	0x40021000
 8004ae8:	08008264 	.word	0x08008264

08004aec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b082      	sub	sp, #8
 8004af0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004af2:	f7ff ffcd 	bl	8004a90 <HAL_RCC_GetHCLKFreq>
 8004af6:	4601      	mov	r1, r0
 8004af8:	4b0b      	ldr	r3, [pc, #44]	@ (8004b28 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8004b00:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8004b04:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b06:	687a      	ldr	r2, [r7, #4]
 8004b08:	fa92 f2a2 	rbit	r2, r2
 8004b0c:	603a      	str	r2, [r7, #0]
  return result;
 8004b0e:	683a      	ldr	r2, [r7, #0]
 8004b10:	fab2 f282 	clz	r2, r2
 8004b14:	b2d2      	uxtb	r2, r2
 8004b16:	40d3      	lsrs	r3, r2
 8004b18:	4a04      	ldr	r2, [pc, #16]	@ (8004b2c <HAL_RCC_GetPCLK2Freq+0x40>)
 8004b1a:	5cd3      	ldrb	r3, [r2, r3]
 8004b1c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004b20:	4618      	mov	r0, r3
 8004b22:	3708      	adds	r7, #8
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}
 8004b28:	40021000 	.word	0x40021000
 8004b2c:	08008264 	.word	0x08008264

08004b30 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b083      	sub	sp, #12
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
 8004b38:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	220f      	movs	r2, #15
 8004b3e:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004b40:	4b12      	ldr	r3, [pc, #72]	@ (8004b8c <HAL_RCC_GetClockConfig+0x5c>)
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	f003 0203 	and.w	r2, r3, #3
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8004b4c:	4b0f      	ldr	r3, [pc, #60]	@ (8004b8c <HAL_RCC_GetClockConfig+0x5c>)
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8004b58:	4b0c      	ldr	r3, [pc, #48]	@ (8004b8c <HAL_RCC_GetClockConfig+0x5c>)
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004b64:	4b09      	ldr	r3, [pc, #36]	@ (8004b8c <HAL_RCC_GetClockConfig+0x5c>)
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	08db      	lsrs	r3, r3, #3
 8004b6a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8004b72:	4b07      	ldr	r3, [pc, #28]	@ (8004b90 <HAL_RCC_GetClockConfig+0x60>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f003 0207 	and.w	r2, r3, #7
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	601a      	str	r2, [r3, #0]
}
 8004b7e:	bf00      	nop
 8004b80:	370c      	adds	r7, #12
 8004b82:	46bd      	mov	sp, r7
 8004b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b88:	4770      	bx	lr
 8004b8a:	bf00      	nop
 8004b8c:	40021000 	.word	0x40021000
 8004b90:	40022000 	.word	0x40022000

08004b94 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b092      	sub	sp, #72	@ 0x48
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	f000 80d4 	beq.w	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004bb8:	4b4e      	ldr	r3, [pc, #312]	@ (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bba:	69db      	ldr	r3, [r3, #28]
 8004bbc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d10e      	bne.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004bc4:	4b4b      	ldr	r3, [pc, #300]	@ (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bc6:	69db      	ldr	r3, [r3, #28]
 8004bc8:	4a4a      	ldr	r2, [pc, #296]	@ (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004bce:	61d3      	str	r3, [r2, #28]
 8004bd0:	4b48      	ldr	r3, [pc, #288]	@ (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bd2:	69db      	ldr	r3, [r3, #28]
 8004bd4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004bd8:	60bb      	str	r3, [r7, #8]
 8004bda:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004be2:	4b45      	ldr	r3, [pc, #276]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d118      	bne.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004bee:	4b42      	ldr	r3, [pc, #264]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a41      	ldr	r2, [pc, #260]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004bf4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004bf8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004bfa:	f7fc fc87 	bl	800150c <HAL_GetTick>
 8004bfe:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c00:	e008      	b.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c02:	f7fc fc83 	bl	800150c <HAL_GetTick>
 8004c06:	4602      	mov	r2, r0
 8004c08:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c0a:	1ad3      	subs	r3, r2, r3
 8004c0c:	2b64      	cmp	r3, #100	@ 0x64
 8004c0e:	d901      	bls.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004c10:	2303      	movs	r3, #3
 8004c12:	e14b      	b.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c14:	4b38      	ldr	r3, [pc, #224]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d0f0      	beq.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004c20:	4b34      	ldr	r3, [pc, #208]	@ (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c22:	6a1b      	ldr	r3, [r3, #32]
 8004c24:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c28:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004c2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	f000 8084 	beq.w	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c3a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	d07c      	beq.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004c40:	4b2c      	ldr	r3, [pc, #176]	@ (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c42:	6a1b      	ldr	r3, [r3, #32]
 8004c44:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c48:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004c4a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004c4e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c52:	fa93 f3a3 	rbit	r3, r3
 8004c56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8004c58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004c5a:	fab3 f383 	clz	r3, r3
 8004c5e:	b2db      	uxtb	r3, r3
 8004c60:	461a      	mov	r2, r3
 8004c62:	4b26      	ldr	r3, [pc, #152]	@ (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004c64:	4413      	add	r3, r2
 8004c66:	009b      	lsls	r3, r3, #2
 8004c68:	461a      	mov	r2, r3
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	6013      	str	r3, [r2, #0]
 8004c6e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004c72:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c76:	fa93 f3a3 	rbit	r3, r3
 8004c7a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004c7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004c7e:	fab3 f383 	clz	r3, r3
 8004c82:	b2db      	uxtb	r3, r3
 8004c84:	461a      	mov	r2, r3
 8004c86:	4b1d      	ldr	r3, [pc, #116]	@ (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004c88:	4413      	add	r3, r2
 8004c8a:	009b      	lsls	r3, r3, #2
 8004c8c:	461a      	mov	r2, r3
 8004c8e:	2300      	movs	r3, #0
 8004c90:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004c92:	4a18      	ldr	r2, [pc, #96]	@ (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c96:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004c98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c9a:	f003 0301 	and.w	r3, r3, #1
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d04b      	beq.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ca2:	f7fc fc33 	bl	800150c <HAL_GetTick>
 8004ca6:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ca8:	e00a      	b.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004caa:	f7fc fc2f 	bl	800150c <HAL_GetTick>
 8004cae:	4602      	mov	r2, r0
 8004cb0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004cb2:	1ad3      	subs	r3, r2, r3
 8004cb4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d901      	bls.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004cbc:	2303      	movs	r3, #3
 8004cbe:	e0f5      	b.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x318>
 8004cc0:	2302      	movs	r3, #2
 8004cc2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cc6:	fa93 f3a3 	rbit	r3, r3
 8004cca:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ccc:	2302      	movs	r3, #2
 8004cce:	623b      	str	r3, [r7, #32]
 8004cd0:	6a3b      	ldr	r3, [r7, #32]
 8004cd2:	fa93 f3a3 	rbit	r3, r3
 8004cd6:	61fb      	str	r3, [r7, #28]
  return result;
 8004cd8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cda:	fab3 f383 	clz	r3, r3
 8004cde:	b2db      	uxtb	r3, r3
 8004ce0:	095b      	lsrs	r3, r3, #5
 8004ce2:	b2db      	uxtb	r3, r3
 8004ce4:	f043 0302 	orr.w	r3, r3, #2
 8004ce8:	b2db      	uxtb	r3, r3
 8004cea:	2b02      	cmp	r3, #2
 8004cec:	d108      	bne.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004cee:	4b01      	ldr	r3, [pc, #4]	@ (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cf0:	6a1b      	ldr	r3, [r3, #32]
 8004cf2:	e00d      	b.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004cf4:	40021000 	.word	0x40021000
 8004cf8:	40007000 	.word	0x40007000
 8004cfc:	10908100 	.word	0x10908100
 8004d00:	2302      	movs	r3, #2
 8004d02:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d04:	69bb      	ldr	r3, [r7, #24]
 8004d06:	fa93 f3a3 	rbit	r3, r3
 8004d0a:	617b      	str	r3, [r7, #20]
 8004d0c:	4b69      	ldr	r3, [pc, #420]	@ (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004d0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d10:	2202      	movs	r2, #2
 8004d12:	613a      	str	r2, [r7, #16]
 8004d14:	693a      	ldr	r2, [r7, #16]
 8004d16:	fa92 f2a2 	rbit	r2, r2
 8004d1a:	60fa      	str	r2, [r7, #12]
  return result;
 8004d1c:	68fa      	ldr	r2, [r7, #12]
 8004d1e:	fab2 f282 	clz	r2, r2
 8004d22:	b2d2      	uxtb	r2, r2
 8004d24:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004d28:	b2d2      	uxtb	r2, r2
 8004d2a:	f002 021f 	and.w	r2, r2, #31
 8004d2e:	2101      	movs	r1, #1
 8004d30:	fa01 f202 	lsl.w	r2, r1, r2
 8004d34:	4013      	ands	r3, r2
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d0b7      	beq.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004d3a:	4b5e      	ldr	r3, [pc, #376]	@ (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004d3c:	6a1b      	ldr	r3, [r3, #32]
 8004d3e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	495b      	ldr	r1, [pc, #364]	@ (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004d4c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	d105      	bne.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d54:	4b57      	ldr	r3, [pc, #348]	@ (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004d56:	69db      	ldr	r3, [r3, #28]
 8004d58:	4a56      	ldr	r2, [pc, #344]	@ (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004d5a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d5e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f003 0301 	and.w	r3, r3, #1
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d008      	beq.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004d6c:	4b51      	ldr	r3, [pc, #324]	@ (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004d6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d70:	f023 0203 	bic.w	r2, r3, #3
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	689b      	ldr	r3, [r3, #8]
 8004d78:	494e      	ldr	r1, [pc, #312]	@ (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f003 0320 	and.w	r3, r3, #32
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d008      	beq.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004d8a:	4b4a      	ldr	r3, [pc, #296]	@ (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d8e:	f023 0210 	bic.w	r2, r3, #16
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	68db      	ldr	r3, [r3, #12]
 8004d96:	4947      	ldr	r1, [pc, #284]	@ (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d008      	beq.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004da8:	4b42      	ldr	r3, [pc, #264]	@ (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004db4:	493f      	ldr	r1, [pc, #252]	@ (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004db6:	4313      	orrs	r3, r2
 8004db8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d008      	beq.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004dc6:	4b3b      	ldr	r3, [pc, #236]	@ (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dca:	f023 0220 	bic.w	r2, r3, #32
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	691b      	ldr	r3, [r3, #16]
 8004dd2:	4938      	ldr	r1, [pc, #224]	@ (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d008      	beq.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004de4:	4b33      	ldr	r3, [pc, #204]	@ (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004de6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004de8:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	695b      	ldr	r3, [r3, #20]
 8004df0:	4930      	ldr	r1, [pc, #192]	@ (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004df2:	4313      	orrs	r3, r2
 8004df4:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d008      	beq.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004e02:	4b2c      	ldr	r3, [pc, #176]	@ (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	69db      	ldr	r3, [r3, #28]
 8004e0e:	4929      	ldr	r1, [pc, #164]	@ (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004e10:	4313      	orrs	r3, r2
 8004e12:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d008      	beq.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8004e20:	4b24      	ldr	r3, [pc, #144]	@ (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004e22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e24:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	699b      	ldr	r3, [r3, #24]
 8004e2c:	4921      	ldr	r1, [pc, #132]	@ (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d008      	beq.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004e3e:	4b1d      	ldr	r3, [pc, #116]	@ (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004e40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e42:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6a1b      	ldr	r3, [r3, #32]
 8004e4a:	491a      	ldr	r1, [pc, #104]	@ (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	630b      	str	r3, [r1, #48]	@ 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d008      	beq.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004e5c:	4b15      	ldr	r3, [pc, #84]	@ (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004e5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e60:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e68:	4912      	ldr	r1, [pc, #72]	@ (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d008      	beq.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8004e7a:	4b0e      	ldr	r3, [pc, #56]	@ (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e7e:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e86:	490b      	ldr	r1, [pc, #44]	@ (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d008      	beq.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8004e98:	4b06      	ldr	r3, [pc, #24]	@ (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004e9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e9c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ea4:	4903      	ldr	r1, [pc, #12]	@ (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004eaa:	2300      	movs	r3, #0
}
 8004eac:	4618      	mov	r0, r3
 8004eae:	3748      	adds	r7, #72	@ 0x48
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd80      	pop	{r7, pc}
 8004eb4:	40021000 	.word	0x40021000

08004eb8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b082      	sub	sp, #8
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d101      	bne.n	8004eca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	e049      	b.n	8004f5e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ed0:	b2db      	uxtb	r3, r3
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d106      	bne.n	8004ee4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ede:	6878      	ldr	r0, [r7, #4]
 8004ee0:	f000 f841 	bl	8004f66 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2202      	movs	r2, #2
 8004ee8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681a      	ldr	r2, [r3, #0]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	3304      	adds	r3, #4
 8004ef4:	4619      	mov	r1, r3
 8004ef6:	4610      	mov	r0, r2
 8004ef8:	f000 f9be 	bl	8005278 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2201      	movs	r2, #1
 8004f00:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2201      	movs	r2, #1
 8004f08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2201      	movs	r2, #1
 8004f10:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2201      	movs	r2, #1
 8004f18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2201      	movs	r2, #1
 8004f20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2201      	movs	r2, #1
 8004f28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2201      	movs	r2, #1
 8004f30:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2201      	movs	r2, #1
 8004f38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2201      	movs	r2, #1
 8004f40:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2201      	movs	r2, #1
 8004f48:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2201      	movs	r2, #1
 8004f50:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2201      	movs	r2, #1
 8004f58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004f5c:	2300      	movs	r3, #0
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3708      	adds	r7, #8
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}

08004f66 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004f66:	b480      	push	{r7}
 8004f68:	b083      	sub	sp, #12
 8004f6a:	af00      	add	r7, sp, #0
 8004f6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004f6e:	bf00      	nop
 8004f70:	370c      	adds	r7, #12
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr
	...

08004f7c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b085      	sub	sp, #20
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f8a:	b2db      	uxtb	r3, r3
 8004f8c:	2b01      	cmp	r3, #1
 8004f8e:	d001      	beq.n	8004f94 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004f90:	2301      	movs	r3, #1
 8004f92:	e03b      	b.n	800500c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2202      	movs	r2, #2
 8004f98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	68da      	ldr	r2, [r3, #12]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f042 0201 	orr.w	r2, r2, #1
 8004faa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a19      	ldr	r2, [pc, #100]	@ (8005018 <HAL_TIM_Base_Start_IT+0x9c>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d009      	beq.n	8004fca <HAL_TIM_Base_Start_IT+0x4e>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fbe:	d004      	beq.n	8004fca <HAL_TIM_Base_Start_IT+0x4e>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a15      	ldr	r2, [pc, #84]	@ (800501c <HAL_TIM_Base_Start_IT+0xa0>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d115      	bne.n	8004ff6 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	689a      	ldr	r2, [r3, #8]
 8004fd0:	4b13      	ldr	r3, [pc, #76]	@ (8005020 <HAL_TIM_Base_Start_IT+0xa4>)
 8004fd2:	4013      	ands	r3, r2
 8004fd4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2b06      	cmp	r3, #6
 8004fda:	d015      	beq.n	8005008 <HAL_TIM_Base_Start_IT+0x8c>
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004fe2:	d011      	beq.n	8005008 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	681a      	ldr	r2, [r3, #0]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f042 0201 	orr.w	r2, r2, #1
 8004ff2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ff4:	e008      	b.n	8005008 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	681a      	ldr	r2, [r3, #0]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f042 0201 	orr.w	r2, r2, #1
 8005004:	601a      	str	r2, [r3, #0]
 8005006:	e000      	b.n	800500a <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005008:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800500a:	2300      	movs	r3, #0
}
 800500c:	4618      	mov	r0, r3
 800500e:	3714      	adds	r7, #20
 8005010:	46bd      	mov	sp, r7
 8005012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005016:	4770      	bx	lr
 8005018:	40012c00 	.word	0x40012c00
 800501c:	40014000 	.word	0x40014000
 8005020:	00010007 	.word	0x00010007

08005024 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b084      	sub	sp, #16
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	68db      	ldr	r3, [r3, #12]
 8005032:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	691b      	ldr	r3, [r3, #16]
 800503a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	f003 0302 	and.w	r3, r3, #2
 8005042:	2b00      	cmp	r3, #0
 8005044:	d020      	beq.n	8005088 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	f003 0302 	and.w	r3, r3, #2
 800504c:	2b00      	cmp	r3, #0
 800504e:	d01b      	beq.n	8005088 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f06f 0202 	mvn.w	r2, #2
 8005058:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2201      	movs	r2, #1
 800505e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	699b      	ldr	r3, [r3, #24]
 8005066:	f003 0303 	and.w	r3, r3, #3
 800506a:	2b00      	cmp	r3, #0
 800506c:	d003      	beq.n	8005076 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f000 f8e4 	bl	800523c <HAL_TIM_IC_CaptureCallback>
 8005074:	e005      	b.n	8005082 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	f000 f8d6 	bl	8005228 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800507c:	6878      	ldr	r0, [r7, #4]
 800507e:	f000 f8e7 	bl	8005250 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2200      	movs	r2, #0
 8005086:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	f003 0304 	and.w	r3, r3, #4
 800508e:	2b00      	cmp	r3, #0
 8005090:	d020      	beq.n	80050d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	f003 0304 	and.w	r3, r3, #4
 8005098:	2b00      	cmp	r3, #0
 800509a:	d01b      	beq.n	80050d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f06f 0204 	mvn.w	r2, #4
 80050a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2202      	movs	r2, #2
 80050aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	699b      	ldr	r3, [r3, #24]
 80050b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d003      	beq.n	80050c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f000 f8be 	bl	800523c <HAL_TIM_IC_CaptureCallback>
 80050c0:	e005      	b.n	80050ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	f000 f8b0 	bl	8005228 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050c8:	6878      	ldr	r0, [r7, #4]
 80050ca:	f000 f8c1 	bl	8005250 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2200      	movs	r2, #0
 80050d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	f003 0308 	and.w	r3, r3, #8
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d020      	beq.n	8005120 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	f003 0308 	and.w	r3, r3, #8
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d01b      	beq.n	8005120 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f06f 0208 	mvn.w	r2, #8
 80050f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2204      	movs	r2, #4
 80050f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	69db      	ldr	r3, [r3, #28]
 80050fe:	f003 0303 	and.w	r3, r3, #3
 8005102:	2b00      	cmp	r3, #0
 8005104:	d003      	beq.n	800510e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	f000 f898 	bl	800523c <HAL_TIM_IC_CaptureCallback>
 800510c:	e005      	b.n	800511a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f000 f88a 	bl	8005228 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005114:	6878      	ldr	r0, [r7, #4]
 8005116:	f000 f89b 	bl	8005250 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2200      	movs	r2, #0
 800511e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	f003 0310 	and.w	r3, r3, #16
 8005126:	2b00      	cmp	r3, #0
 8005128:	d020      	beq.n	800516c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	f003 0310 	and.w	r3, r3, #16
 8005130:	2b00      	cmp	r3, #0
 8005132:	d01b      	beq.n	800516c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f06f 0210 	mvn.w	r2, #16
 800513c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2208      	movs	r2, #8
 8005142:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	69db      	ldr	r3, [r3, #28]
 800514a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800514e:	2b00      	cmp	r3, #0
 8005150:	d003      	beq.n	800515a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f000 f872 	bl	800523c <HAL_TIM_IC_CaptureCallback>
 8005158:	e005      	b.n	8005166 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f000 f864 	bl	8005228 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005160:	6878      	ldr	r0, [r7, #4]
 8005162:	f000 f875 	bl	8005250 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2200      	movs	r2, #0
 800516a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	f003 0301 	and.w	r3, r3, #1
 8005172:	2b00      	cmp	r3, #0
 8005174:	d00c      	beq.n	8005190 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	f003 0301 	and.w	r3, r3, #1
 800517c:	2b00      	cmp	r3, #0
 800517e:	d007      	beq.n	8005190 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f06f 0201 	mvn.w	r2, #1
 8005188:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f7fb ff3a 	bl	8001004 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005196:	2b00      	cmp	r3, #0
 8005198:	d00c      	beq.n	80051b4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d007      	beq.n	80051b4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80051ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	f000 f8e6 	bl	8005380 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d00c      	beq.n	80051d8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d007      	beq.n	80051d8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80051d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f000 f8de 	bl	8005394 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d00c      	beq.n	80051fc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d007      	beq.n	80051fc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80051f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	f000 f834 	bl	8005264 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	f003 0320 	and.w	r3, r3, #32
 8005202:	2b00      	cmp	r3, #0
 8005204:	d00c      	beq.n	8005220 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	f003 0320 	and.w	r3, r3, #32
 800520c:	2b00      	cmp	r3, #0
 800520e:	d007      	beq.n	8005220 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f06f 0220 	mvn.w	r2, #32
 8005218:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f000 f8a6 	bl	800536c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005220:	bf00      	nop
 8005222:	3710      	adds	r7, #16
 8005224:	46bd      	mov	sp, r7
 8005226:	bd80      	pop	{r7, pc}

08005228 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005228:	b480      	push	{r7}
 800522a:	b083      	sub	sp, #12
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005230:	bf00      	nop
 8005232:	370c      	adds	r7, #12
 8005234:	46bd      	mov	sp, r7
 8005236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523a:	4770      	bx	lr

0800523c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800523c:	b480      	push	{r7}
 800523e:	b083      	sub	sp, #12
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005244:	bf00      	nop
 8005246:	370c      	adds	r7, #12
 8005248:	46bd      	mov	sp, r7
 800524a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524e:	4770      	bx	lr

08005250 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005250:	b480      	push	{r7}
 8005252:	b083      	sub	sp, #12
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005258:	bf00      	nop
 800525a:	370c      	adds	r7, #12
 800525c:	46bd      	mov	sp, r7
 800525e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005262:	4770      	bx	lr

08005264 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005264:	b480      	push	{r7}
 8005266:	b083      	sub	sp, #12
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800526c:	bf00      	nop
 800526e:	370c      	adds	r7, #12
 8005270:	46bd      	mov	sp, r7
 8005272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005276:	4770      	bx	lr

08005278 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005278:	b480      	push	{r7}
 800527a:	b085      	sub	sp, #20
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
 8005280:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	4a34      	ldr	r2, [pc, #208]	@ (800535c <TIM_Base_SetConfig+0xe4>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d003      	beq.n	8005298 <TIM_Base_SetConfig+0x20>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005296:	d108      	bne.n	80052aa <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800529e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	68fa      	ldr	r2, [r7, #12]
 80052a6:	4313      	orrs	r3, r2
 80052a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	4a2b      	ldr	r2, [pc, #172]	@ (800535c <TIM_Base_SetConfig+0xe4>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d00f      	beq.n	80052d2 <TIM_Base_SetConfig+0x5a>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052b8:	d00b      	beq.n	80052d2 <TIM_Base_SetConfig+0x5a>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	4a28      	ldr	r2, [pc, #160]	@ (8005360 <TIM_Base_SetConfig+0xe8>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d007      	beq.n	80052d2 <TIM_Base_SetConfig+0x5a>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	4a27      	ldr	r2, [pc, #156]	@ (8005364 <TIM_Base_SetConfig+0xec>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d003      	beq.n	80052d2 <TIM_Base_SetConfig+0x5a>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	4a26      	ldr	r2, [pc, #152]	@ (8005368 <TIM_Base_SetConfig+0xf0>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d108      	bne.n	80052e4 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80052d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	68db      	ldr	r3, [r3, #12]
 80052de:	68fa      	ldr	r2, [r7, #12]
 80052e0:	4313      	orrs	r3, r2
 80052e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	695b      	ldr	r3, [r3, #20]
 80052ee:	4313      	orrs	r3, r2
 80052f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	68fa      	ldr	r2, [r7, #12]
 80052f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	689a      	ldr	r2, [r3, #8]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	681a      	ldr	r2, [r3, #0]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	4a14      	ldr	r2, [pc, #80]	@ (800535c <TIM_Base_SetConfig+0xe4>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d00b      	beq.n	8005328 <TIM_Base_SetConfig+0xb0>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	4a13      	ldr	r2, [pc, #76]	@ (8005360 <TIM_Base_SetConfig+0xe8>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d007      	beq.n	8005328 <TIM_Base_SetConfig+0xb0>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	4a12      	ldr	r2, [pc, #72]	@ (8005364 <TIM_Base_SetConfig+0xec>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d003      	beq.n	8005328 <TIM_Base_SetConfig+0xb0>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	4a11      	ldr	r2, [pc, #68]	@ (8005368 <TIM_Base_SetConfig+0xf0>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d103      	bne.n	8005330 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	691a      	ldr	r2, [r3, #16]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2201      	movs	r2, #1
 8005334:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	691b      	ldr	r3, [r3, #16]
 800533a:	f003 0301 	and.w	r3, r3, #1
 800533e:	2b01      	cmp	r3, #1
 8005340:	d105      	bne.n	800534e <TIM_Base_SetConfig+0xd6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	691b      	ldr	r3, [r3, #16]
 8005346:	f023 0201 	bic.w	r2, r3, #1
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	611a      	str	r2, [r3, #16]
  }
}
 800534e:	bf00      	nop
 8005350:	3714      	adds	r7, #20
 8005352:	46bd      	mov	sp, r7
 8005354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005358:	4770      	bx	lr
 800535a:	bf00      	nop
 800535c:	40012c00 	.word	0x40012c00
 8005360:	40014000 	.word	0x40014000
 8005364:	40014400 	.word	0x40014400
 8005368:	40014800 	.word	0x40014800

0800536c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800536c:	b480      	push	{r7}
 800536e:	b083      	sub	sp, #12
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005374:	bf00      	nop
 8005376:	370c      	adds	r7, #12
 8005378:	46bd      	mov	sp, r7
 800537a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537e:	4770      	bx	lr

08005380 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005380:	b480      	push	{r7}
 8005382:	b083      	sub	sp, #12
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005388:	bf00      	nop
 800538a:	370c      	adds	r7, #12
 800538c:	46bd      	mov	sp, r7
 800538e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005392:	4770      	bx	lr

08005394 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005394:	b480      	push	{r7}
 8005396:	b083      	sub	sp, #12
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800539c:	bf00      	nop
 800539e:	370c      	adds	r7, #12
 80053a0:	46bd      	mov	sp, r7
 80053a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a6:	4770      	bx	lr

080053a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b082      	sub	sp, #8
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d101      	bne.n	80053ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80053b6:	2301      	movs	r3, #1
 80053b8:	e040      	b.n	800543c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d106      	bne.n	80053d0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2200      	movs	r2, #0
 80053c6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f7fb ff20 	bl	8001210 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2224      	movs	r2, #36	@ 0x24
 80053d4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	681a      	ldr	r2, [r3, #0]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f022 0201 	bic.w	r2, r2, #1
 80053e4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d002      	beq.n	80053f4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f000 f9e8 	bl	80057c4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80053f4:	6878      	ldr	r0, [r7, #4]
 80053f6:	f000 f8af 	bl	8005558 <UART_SetConfig>
 80053fa:	4603      	mov	r3, r0
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	d101      	bne.n	8005404 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005400:	2301      	movs	r3, #1
 8005402:	e01b      	b.n	800543c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	685a      	ldr	r2, [r3, #4]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005412:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	689a      	ldr	r2, [r3, #8]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005422:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	681a      	ldr	r2, [r3, #0]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f042 0201 	orr.w	r2, r2, #1
 8005432:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	f000 fa67 	bl	8005908 <UART_CheckIdleState>
 800543a:	4603      	mov	r3, r0
}
 800543c:	4618      	mov	r0, r3
 800543e:	3708      	adds	r7, #8
 8005440:	46bd      	mov	sp, r7
 8005442:	bd80      	pop	{r7, pc}

08005444 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b08a      	sub	sp, #40	@ 0x28
 8005448:	af02      	add	r7, sp, #8
 800544a:	60f8      	str	r0, [r7, #12]
 800544c:	60b9      	str	r1, [r7, #8]
 800544e:	603b      	str	r3, [r7, #0]
 8005450:	4613      	mov	r3, r2
 8005452:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005458:	2b20      	cmp	r3, #32
 800545a:	d177      	bne.n	800554c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d002      	beq.n	8005468 <HAL_UART_Transmit+0x24>
 8005462:	88fb      	ldrh	r3, [r7, #6]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d101      	bne.n	800546c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005468:	2301      	movs	r3, #1
 800546a:	e070      	b.n	800554e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2200      	movs	r2, #0
 8005470:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	2221      	movs	r2, #33	@ 0x21
 8005478:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800547a:	f7fc f847 	bl	800150c <HAL_GetTick>
 800547e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	88fa      	ldrh	r2, [r7, #6]
 8005484:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	88fa      	ldrh	r2, [r7, #6]
 800548c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	689b      	ldr	r3, [r3, #8]
 8005494:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005498:	d108      	bne.n	80054ac <HAL_UART_Transmit+0x68>
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	691b      	ldr	r3, [r3, #16]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d104      	bne.n	80054ac <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80054a2:	2300      	movs	r3, #0
 80054a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	61bb      	str	r3, [r7, #24]
 80054aa:	e003      	b.n	80054b4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80054b0:	2300      	movs	r3, #0
 80054b2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80054b4:	e02f      	b.n	8005516 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	9300      	str	r3, [sp, #0]
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	2200      	movs	r2, #0
 80054be:	2180      	movs	r1, #128	@ 0x80
 80054c0:	68f8      	ldr	r0, [r7, #12]
 80054c2:	f000 fac9 	bl	8005a58 <UART_WaitOnFlagUntilTimeout>
 80054c6:	4603      	mov	r3, r0
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d004      	beq.n	80054d6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	2220      	movs	r2, #32
 80054d0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80054d2:	2303      	movs	r3, #3
 80054d4:	e03b      	b.n	800554e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80054d6:	69fb      	ldr	r3, [r7, #28]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d10b      	bne.n	80054f4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80054dc:	69bb      	ldr	r3, [r7, #24]
 80054de:	881a      	ldrh	r2, [r3, #0]
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80054e8:	b292      	uxth	r2, r2
 80054ea:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80054ec:	69bb      	ldr	r3, [r7, #24]
 80054ee:	3302      	adds	r3, #2
 80054f0:	61bb      	str	r3, [r7, #24]
 80054f2:	e007      	b.n	8005504 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80054f4:	69fb      	ldr	r3, [r7, #28]
 80054f6:	781a      	ldrb	r2, [r3, #0]
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80054fe:	69fb      	ldr	r3, [r7, #28]
 8005500:	3301      	adds	r3, #1
 8005502:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800550a:	b29b      	uxth	r3, r3
 800550c:	3b01      	subs	r3, #1
 800550e:	b29a      	uxth	r2, r3
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800551c:	b29b      	uxth	r3, r3
 800551e:	2b00      	cmp	r3, #0
 8005520:	d1c9      	bne.n	80054b6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	9300      	str	r3, [sp, #0]
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	2200      	movs	r2, #0
 800552a:	2140      	movs	r1, #64	@ 0x40
 800552c:	68f8      	ldr	r0, [r7, #12]
 800552e:	f000 fa93 	bl	8005a58 <UART_WaitOnFlagUntilTimeout>
 8005532:	4603      	mov	r3, r0
 8005534:	2b00      	cmp	r3, #0
 8005536:	d004      	beq.n	8005542 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2220      	movs	r2, #32
 800553c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800553e:	2303      	movs	r3, #3
 8005540:	e005      	b.n	800554e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	2220      	movs	r2, #32
 8005546:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005548:	2300      	movs	r3, #0
 800554a:	e000      	b.n	800554e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800554c:	2302      	movs	r3, #2
  }
}
 800554e:	4618      	mov	r0, r3
 8005550:	3720      	adds	r7, #32
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}
	...

08005558 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b088      	sub	sp, #32
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005560:	2300      	movs	r3, #0
 8005562:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	689a      	ldr	r2, [r3, #8]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	691b      	ldr	r3, [r3, #16]
 800556c:	431a      	orrs	r2, r3
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	695b      	ldr	r3, [r3, #20]
 8005572:	431a      	orrs	r2, r3
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	69db      	ldr	r3, [r3, #28]
 8005578:	4313      	orrs	r3, r2
 800557a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	681a      	ldr	r2, [r3, #0]
 8005582:	4b8a      	ldr	r3, [pc, #552]	@ (80057ac <UART_SetConfig+0x254>)
 8005584:	4013      	ands	r3, r2
 8005586:	687a      	ldr	r2, [r7, #4]
 8005588:	6812      	ldr	r2, [r2, #0]
 800558a:	6979      	ldr	r1, [r7, #20]
 800558c:	430b      	orrs	r3, r1
 800558e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	68da      	ldr	r2, [r3, #12]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	430a      	orrs	r2, r1
 80055a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	699b      	ldr	r3, [r3, #24]
 80055aa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6a1b      	ldr	r3, [r3, #32]
 80055b0:	697a      	ldr	r2, [r7, #20]
 80055b2:	4313      	orrs	r3, r2
 80055b4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	689b      	ldr	r3, [r3, #8]
 80055bc:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	697a      	ldr	r2, [r7, #20]
 80055c6:	430a      	orrs	r2, r1
 80055c8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a78      	ldr	r2, [pc, #480]	@ (80057b0 <UART_SetConfig+0x258>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d120      	bne.n	8005616 <UART_SetConfig+0xbe>
 80055d4:	4b77      	ldr	r3, [pc, #476]	@ (80057b4 <UART_SetConfig+0x25c>)
 80055d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055d8:	f003 0303 	and.w	r3, r3, #3
 80055dc:	2b03      	cmp	r3, #3
 80055de:	d817      	bhi.n	8005610 <UART_SetConfig+0xb8>
 80055e0:	a201      	add	r2, pc, #4	@ (adr r2, 80055e8 <UART_SetConfig+0x90>)
 80055e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055e6:	bf00      	nop
 80055e8:	080055f9 	.word	0x080055f9
 80055ec:	08005605 	.word	0x08005605
 80055f0:	0800560b 	.word	0x0800560b
 80055f4:	080055ff 	.word	0x080055ff
 80055f8:	2300      	movs	r3, #0
 80055fa:	77fb      	strb	r3, [r7, #31]
 80055fc:	e01d      	b.n	800563a <UART_SetConfig+0xe2>
 80055fe:	2302      	movs	r3, #2
 8005600:	77fb      	strb	r3, [r7, #31]
 8005602:	e01a      	b.n	800563a <UART_SetConfig+0xe2>
 8005604:	2304      	movs	r3, #4
 8005606:	77fb      	strb	r3, [r7, #31]
 8005608:	e017      	b.n	800563a <UART_SetConfig+0xe2>
 800560a:	2308      	movs	r3, #8
 800560c:	77fb      	strb	r3, [r7, #31]
 800560e:	e014      	b.n	800563a <UART_SetConfig+0xe2>
 8005610:	2310      	movs	r3, #16
 8005612:	77fb      	strb	r3, [r7, #31]
 8005614:	e011      	b.n	800563a <UART_SetConfig+0xe2>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a67      	ldr	r2, [pc, #412]	@ (80057b8 <UART_SetConfig+0x260>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d102      	bne.n	8005626 <UART_SetConfig+0xce>
 8005620:	2300      	movs	r3, #0
 8005622:	77fb      	strb	r3, [r7, #31]
 8005624:	e009      	b.n	800563a <UART_SetConfig+0xe2>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4a64      	ldr	r2, [pc, #400]	@ (80057bc <UART_SetConfig+0x264>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d102      	bne.n	8005636 <UART_SetConfig+0xde>
 8005630:	2300      	movs	r3, #0
 8005632:	77fb      	strb	r3, [r7, #31]
 8005634:	e001      	b.n	800563a <UART_SetConfig+0xe2>
 8005636:	2310      	movs	r3, #16
 8005638:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	69db      	ldr	r3, [r3, #28]
 800563e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005642:	d15a      	bne.n	80056fa <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8005644:	7ffb      	ldrb	r3, [r7, #31]
 8005646:	2b08      	cmp	r3, #8
 8005648:	d827      	bhi.n	800569a <UART_SetConfig+0x142>
 800564a:	a201      	add	r2, pc, #4	@ (adr r2, 8005650 <UART_SetConfig+0xf8>)
 800564c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005650:	08005675 	.word	0x08005675
 8005654:	0800567d 	.word	0x0800567d
 8005658:	08005685 	.word	0x08005685
 800565c:	0800569b 	.word	0x0800569b
 8005660:	0800568b 	.word	0x0800568b
 8005664:	0800569b 	.word	0x0800569b
 8005668:	0800569b 	.word	0x0800569b
 800566c:	0800569b 	.word	0x0800569b
 8005670:	08005693 	.word	0x08005693
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005674:	f7ff fa18 	bl	8004aa8 <HAL_RCC_GetPCLK1Freq>
 8005678:	61b8      	str	r0, [r7, #24]
        break;
 800567a:	e013      	b.n	80056a4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800567c:	f7ff fa36 	bl	8004aec <HAL_RCC_GetPCLK2Freq>
 8005680:	61b8      	str	r0, [r7, #24]
        break;
 8005682:	e00f      	b.n	80056a4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005684:	4b4e      	ldr	r3, [pc, #312]	@ (80057c0 <UART_SetConfig+0x268>)
 8005686:	61bb      	str	r3, [r7, #24]
        break;
 8005688:	e00c      	b.n	80056a4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800568a:	f7ff f9ad 	bl	80049e8 <HAL_RCC_GetSysClockFreq>
 800568e:	61b8      	str	r0, [r7, #24]
        break;
 8005690:	e008      	b.n	80056a4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005692:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005696:	61bb      	str	r3, [r7, #24]
        break;
 8005698:	e004      	b.n	80056a4 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800569a:	2300      	movs	r3, #0
 800569c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800569e:	2301      	movs	r3, #1
 80056a0:	77bb      	strb	r3, [r7, #30]
        break;
 80056a2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80056a4:	69bb      	ldr	r3, [r7, #24]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d074      	beq.n	8005794 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80056aa:	69bb      	ldr	r3, [r7, #24]
 80056ac:	005a      	lsls	r2, r3, #1
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	085b      	lsrs	r3, r3, #1
 80056b4:	441a      	add	r2, r3
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80056be:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	2b0f      	cmp	r3, #15
 80056c4:	d916      	bls.n	80056f4 <UART_SetConfig+0x19c>
 80056c6:	693b      	ldr	r3, [r7, #16]
 80056c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80056cc:	d212      	bcs.n	80056f4 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	b29b      	uxth	r3, r3
 80056d2:	f023 030f 	bic.w	r3, r3, #15
 80056d6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	085b      	lsrs	r3, r3, #1
 80056dc:	b29b      	uxth	r3, r3
 80056de:	f003 0307 	and.w	r3, r3, #7
 80056e2:	b29a      	uxth	r2, r3
 80056e4:	89fb      	ldrh	r3, [r7, #14]
 80056e6:	4313      	orrs	r3, r2
 80056e8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	89fa      	ldrh	r2, [r7, #14]
 80056f0:	60da      	str	r2, [r3, #12]
 80056f2:	e04f      	b.n	8005794 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80056f4:	2301      	movs	r3, #1
 80056f6:	77bb      	strb	r3, [r7, #30]
 80056f8:	e04c      	b.n	8005794 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80056fa:	7ffb      	ldrb	r3, [r7, #31]
 80056fc:	2b08      	cmp	r3, #8
 80056fe:	d828      	bhi.n	8005752 <UART_SetConfig+0x1fa>
 8005700:	a201      	add	r2, pc, #4	@ (adr r2, 8005708 <UART_SetConfig+0x1b0>)
 8005702:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005706:	bf00      	nop
 8005708:	0800572d 	.word	0x0800572d
 800570c:	08005735 	.word	0x08005735
 8005710:	0800573d 	.word	0x0800573d
 8005714:	08005753 	.word	0x08005753
 8005718:	08005743 	.word	0x08005743
 800571c:	08005753 	.word	0x08005753
 8005720:	08005753 	.word	0x08005753
 8005724:	08005753 	.word	0x08005753
 8005728:	0800574b 	.word	0x0800574b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800572c:	f7ff f9bc 	bl	8004aa8 <HAL_RCC_GetPCLK1Freq>
 8005730:	61b8      	str	r0, [r7, #24]
        break;
 8005732:	e013      	b.n	800575c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005734:	f7ff f9da 	bl	8004aec <HAL_RCC_GetPCLK2Freq>
 8005738:	61b8      	str	r0, [r7, #24]
        break;
 800573a:	e00f      	b.n	800575c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800573c:	4b20      	ldr	r3, [pc, #128]	@ (80057c0 <UART_SetConfig+0x268>)
 800573e:	61bb      	str	r3, [r7, #24]
        break;
 8005740:	e00c      	b.n	800575c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005742:	f7ff f951 	bl	80049e8 <HAL_RCC_GetSysClockFreq>
 8005746:	61b8      	str	r0, [r7, #24]
        break;
 8005748:	e008      	b.n	800575c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800574a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800574e:	61bb      	str	r3, [r7, #24]
        break;
 8005750:	e004      	b.n	800575c <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8005752:	2300      	movs	r3, #0
 8005754:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005756:	2301      	movs	r3, #1
 8005758:	77bb      	strb	r3, [r7, #30]
        break;
 800575a:	bf00      	nop
    }

    if (pclk != 0U)
 800575c:	69bb      	ldr	r3, [r7, #24]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d018      	beq.n	8005794 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	085a      	lsrs	r2, r3, #1
 8005768:	69bb      	ldr	r3, [r7, #24]
 800576a:	441a      	add	r2, r3
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	fbb2 f3f3 	udiv	r3, r2, r3
 8005774:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005776:	693b      	ldr	r3, [r7, #16]
 8005778:	2b0f      	cmp	r3, #15
 800577a:	d909      	bls.n	8005790 <UART_SetConfig+0x238>
 800577c:	693b      	ldr	r3, [r7, #16]
 800577e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005782:	d205      	bcs.n	8005790 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005784:	693b      	ldr	r3, [r7, #16]
 8005786:	b29a      	uxth	r2, r3
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	60da      	str	r2, [r3, #12]
 800578e:	e001      	b.n	8005794 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005790:	2301      	movs	r3, #1
 8005792:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2200      	movs	r2, #0
 8005798:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2200      	movs	r2, #0
 800579e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80057a0:	7fbb      	ldrb	r3, [r7, #30]
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	3720      	adds	r7, #32
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}
 80057aa:	bf00      	nop
 80057ac:	efff69f3 	.word	0xefff69f3
 80057b0:	40013800 	.word	0x40013800
 80057b4:	40021000 	.word	0x40021000
 80057b8:	40004400 	.word	0x40004400
 80057bc:	40004800 	.word	0x40004800
 80057c0:	007a1200 	.word	0x007a1200

080057c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80057c4:	b480      	push	{r7}
 80057c6:	b083      	sub	sp, #12
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057d0:	f003 0308 	and.w	r3, r3, #8
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d00a      	beq.n	80057ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	430a      	orrs	r2, r1
 80057ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057f2:	f003 0301 	and.w	r3, r3, #1
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d00a      	beq.n	8005810 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	430a      	orrs	r2, r1
 800580e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005814:	f003 0302 	and.w	r3, r3, #2
 8005818:	2b00      	cmp	r3, #0
 800581a:	d00a      	beq.n	8005832 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	430a      	orrs	r2, r1
 8005830:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005836:	f003 0304 	and.w	r3, r3, #4
 800583a:	2b00      	cmp	r3, #0
 800583c:	d00a      	beq.n	8005854 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	430a      	orrs	r2, r1
 8005852:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005858:	f003 0310 	and.w	r3, r3, #16
 800585c:	2b00      	cmp	r3, #0
 800585e:	d00a      	beq.n	8005876 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	689b      	ldr	r3, [r3, #8]
 8005866:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	430a      	orrs	r2, r1
 8005874:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800587a:	f003 0320 	and.w	r3, r3, #32
 800587e:	2b00      	cmp	r3, #0
 8005880:	d00a      	beq.n	8005898 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	689b      	ldr	r3, [r3, #8]
 8005888:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	430a      	orrs	r2, r1
 8005896:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800589c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d01a      	beq.n	80058da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	430a      	orrs	r2, r1
 80058b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80058c2:	d10a      	bne.n	80058da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	430a      	orrs	r2, r1
 80058d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d00a      	beq.n	80058fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	430a      	orrs	r2, r1
 80058fa:	605a      	str	r2, [r3, #4]
  }
}
 80058fc:	bf00      	nop
 80058fe:	370c      	adds	r7, #12
 8005900:	46bd      	mov	sp, r7
 8005902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005906:	4770      	bx	lr

08005908 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b098      	sub	sp, #96	@ 0x60
 800590c:	af02      	add	r7, sp, #8
 800590e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2200      	movs	r2, #0
 8005914:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005918:	f7fb fdf8 	bl	800150c <HAL_GetTick>
 800591c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f003 0308 	and.w	r3, r3, #8
 8005928:	2b08      	cmp	r3, #8
 800592a:	d12e      	bne.n	800598a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800592c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005930:	9300      	str	r3, [sp, #0]
 8005932:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005934:	2200      	movs	r2, #0
 8005936:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f000 f88c 	bl	8005a58 <UART_WaitOnFlagUntilTimeout>
 8005940:	4603      	mov	r3, r0
 8005942:	2b00      	cmp	r3, #0
 8005944:	d021      	beq.n	800598a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800594c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800594e:	e853 3f00 	ldrex	r3, [r3]
 8005952:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005954:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005956:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800595a:	653b      	str	r3, [r7, #80]	@ 0x50
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	461a      	mov	r2, r3
 8005962:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005964:	647b      	str	r3, [r7, #68]	@ 0x44
 8005966:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005968:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800596a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800596c:	e841 2300 	strex	r3, r2, [r1]
 8005970:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005972:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005974:	2b00      	cmp	r3, #0
 8005976:	d1e6      	bne.n	8005946 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2220      	movs	r2, #32
 800597c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2200      	movs	r2, #0
 8005982:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005986:	2303      	movs	r3, #3
 8005988:	e062      	b.n	8005a50 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f003 0304 	and.w	r3, r3, #4
 8005994:	2b04      	cmp	r3, #4
 8005996:	d149      	bne.n	8005a2c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005998:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800599c:	9300      	str	r3, [sp, #0]
 800599e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80059a0:	2200      	movs	r2, #0
 80059a2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	f000 f856 	bl	8005a58 <UART_WaitOnFlagUntilTimeout>
 80059ac:	4603      	mov	r3, r0
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d03c      	beq.n	8005a2c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059ba:	e853 3f00 	ldrex	r3, [r3]
 80059be:	623b      	str	r3, [r7, #32]
   return(result);
 80059c0:	6a3b      	ldr	r3, [r7, #32]
 80059c2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80059c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	461a      	mov	r2, r3
 80059ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80059d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80059d2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059d4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80059d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80059d8:	e841 2300 	strex	r3, r2, [r1]
 80059dc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80059de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d1e6      	bne.n	80059b2 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	3308      	adds	r3, #8
 80059ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	e853 3f00 	ldrex	r3, [r3]
 80059f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	f023 0301 	bic.w	r3, r3, #1
 80059fa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	3308      	adds	r3, #8
 8005a02:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005a04:	61fa      	str	r2, [r7, #28]
 8005a06:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a08:	69b9      	ldr	r1, [r7, #24]
 8005a0a:	69fa      	ldr	r2, [r7, #28]
 8005a0c:	e841 2300 	strex	r3, r2, [r1]
 8005a10:	617b      	str	r3, [r7, #20]
   return(result);
 8005a12:	697b      	ldr	r3, [r7, #20]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d1e5      	bne.n	80059e4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2220      	movs	r2, #32
 8005a1c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2200      	movs	r2, #0
 8005a24:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a28:	2303      	movs	r3, #3
 8005a2a:	e011      	b.n	8005a50 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2220      	movs	r2, #32
 8005a30:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2220      	movs	r2, #32
 8005a36:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2200      	movs	r2, #0
 8005a44:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005a4e:	2300      	movs	r3, #0
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	3758      	adds	r7, #88	@ 0x58
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bd80      	pop	{r7, pc}

08005a58 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b084      	sub	sp, #16
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	60f8      	str	r0, [r7, #12]
 8005a60:	60b9      	str	r1, [r7, #8]
 8005a62:	603b      	str	r3, [r7, #0]
 8005a64:	4613      	mov	r3, r2
 8005a66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a68:	e04f      	b.n	8005b0a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a6a:	69bb      	ldr	r3, [r7, #24]
 8005a6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a70:	d04b      	beq.n	8005b0a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a72:	f7fb fd4b 	bl	800150c <HAL_GetTick>
 8005a76:	4602      	mov	r2, r0
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	1ad3      	subs	r3, r2, r3
 8005a7c:	69ba      	ldr	r2, [r7, #24]
 8005a7e:	429a      	cmp	r2, r3
 8005a80:	d302      	bcc.n	8005a88 <UART_WaitOnFlagUntilTimeout+0x30>
 8005a82:	69bb      	ldr	r3, [r7, #24]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d101      	bne.n	8005a8c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005a88:	2303      	movs	r3, #3
 8005a8a:	e04e      	b.n	8005b2a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f003 0304 	and.w	r3, r3, #4
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d037      	beq.n	8005b0a <UART_WaitOnFlagUntilTimeout+0xb2>
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	2b80      	cmp	r3, #128	@ 0x80
 8005a9e:	d034      	beq.n	8005b0a <UART_WaitOnFlagUntilTimeout+0xb2>
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	2b40      	cmp	r3, #64	@ 0x40
 8005aa4:	d031      	beq.n	8005b0a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	69db      	ldr	r3, [r3, #28]
 8005aac:	f003 0308 	and.w	r3, r3, #8
 8005ab0:	2b08      	cmp	r3, #8
 8005ab2:	d110      	bne.n	8005ad6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	2208      	movs	r2, #8
 8005aba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005abc:	68f8      	ldr	r0, [r7, #12]
 8005abe:	f000 f838 	bl	8005b32 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2208      	movs	r2, #8
 8005ac6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	2200      	movs	r2, #0
 8005ace:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	e029      	b.n	8005b2a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	69db      	ldr	r3, [r3, #28]
 8005adc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005ae0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005ae4:	d111      	bne.n	8005b0a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005aee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005af0:	68f8      	ldr	r0, [r7, #12]
 8005af2:	f000 f81e 	bl	8005b32 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	2220      	movs	r2, #32
 8005afa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	2200      	movs	r2, #0
 8005b02:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005b06:	2303      	movs	r3, #3
 8005b08:	e00f      	b.n	8005b2a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	69da      	ldr	r2, [r3, #28]
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	4013      	ands	r3, r2
 8005b14:	68ba      	ldr	r2, [r7, #8]
 8005b16:	429a      	cmp	r2, r3
 8005b18:	bf0c      	ite	eq
 8005b1a:	2301      	moveq	r3, #1
 8005b1c:	2300      	movne	r3, #0
 8005b1e:	b2db      	uxtb	r3, r3
 8005b20:	461a      	mov	r2, r3
 8005b22:	79fb      	ldrb	r3, [r7, #7]
 8005b24:	429a      	cmp	r2, r3
 8005b26:	d0a0      	beq.n	8005a6a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b28:	2300      	movs	r3, #0
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	3710      	adds	r7, #16
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}

08005b32 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b32:	b480      	push	{r7}
 8005b34:	b095      	sub	sp, #84	@ 0x54
 8005b36:	af00      	add	r7, sp, #0
 8005b38:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b42:	e853 3f00 	ldrex	r3, [r3]
 8005b46:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005b48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b4a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005b4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	461a      	mov	r2, r3
 8005b56:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b58:	643b      	str	r3, [r7, #64]	@ 0x40
 8005b5a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b5c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005b5e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005b60:	e841 2300 	strex	r3, r2, [r1]
 8005b64:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005b66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d1e6      	bne.n	8005b3a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	3308      	adds	r3, #8
 8005b72:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b74:	6a3b      	ldr	r3, [r7, #32]
 8005b76:	e853 3f00 	ldrex	r3, [r3]
 8005b7a:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b7c:	69fb      	ldr	r3, [r7, #28]
 8005b7e:	f023 0301 	bic.w	r3, r3, #1
 8005b82:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	3308      	adds	r3, #8
 8005b8a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005b8c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005b8e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b90:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005b92:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005b94:	e841 2300 	strex	r3, r2, [r1]
 8005b98:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d1e5      	bne.n	8005b6c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ba4:	2b01      	cmp	r3, #1
 8005ba6:	d118      	bne.n	8005bda <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	e853 3f00 	ldrex	r3, [r3]
 8005bb4:	60bb      	str	r3, [r7, #8]
   return(result);
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	f023 0310 	bic.w	r3, r3, #16
 8005bbc:	647b      	str	r3, [r7, #68]	@ 0x44
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	461a      	mov	r2, r3
 8005bc4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005bc6:	61bb      	str	r3, [r7, #24]
 8005bc8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bca:	6979      	ldr	r1, [r7, #20]
 8005bcc:	69ba      	ldr	r2, [r7, #24]
 8005bce:	e841 2300 	strex	r3, r2, [r1]
 8005bd2:	613b      	str	r3, [r7, #16]
   return(result);
 8005bd4:	693b      	ldr	r3, [r7, #16]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d1e6      	bne.n	8005ba8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2220      	movs	r2, #32
 8005bde:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2200      	movs	r2, #0
 8005be6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2200      	movs	r2, #0
 8005bec:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005bee:	bf00      	nop
 8005bf0:	3754      	adds	r7, #84	@ 0x54
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf8:	4770      	bx	lr

08005bfa <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005bfa:	b480      	push	{r7}
 8005bfc:	b085      	sub	sp, #20
 8005bfe:	af00      	add	r7, sp, #0
 8005c00:	4603      	mov	r3, r0
 8005c02:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005c04:	2300      	movs	r3, #0
 8005c06:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005c08:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005c0c:	2b84      	cmp	r3, #132	@ 0x84
 8005c0e:	d005      	beq.n	8005c1c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005c10:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	4413      	add	r3, r2
 8005c18:	3303      	adds	r3, #3
 8005c1a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	3714      	adds	r7, #20
 8005c22:	46bd      	mov	sp, r7
 8005c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c28:	4770      	bx	lr

08005c2a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005c2a:	b580      	push	{r7, lr}
 8005c2c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005c2e:	f000 fd7b 	bl	8006728 <vTaskStartScheduler>
  
  return osOK;
 8005c32:	2300      	movs	r3, #0
}
 8005c34:	4618      	mov	r0, r3
 8005c36:	bd80      	pop	{r7, pc}

08005c38 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005c38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c3a:	b089      	sub	sp, #36	@ 0x24
 8005c3c:	af04      	add	r7, sp, #16
 8005c3e:	6078      	str	r0, [r7, #4]
 8005c40:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	695b      	ldr	r3, [r3, #20]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d020      	beq.n	8005c8c <osThreadCreate+0x54>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	699b      	ldr	r3, [r3, #24]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d01c      	beq.n	8005c8c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	685c      	ldr	r4, [r3, #4]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	691e      	ldr	r6, [r3, #16]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005c64:	4618      	mov	r0, r3
 8005c66:	f7ff ffc8 	bl	8005bfa <makeFreeRtosPriority>
 8005c6a:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	695b      	ldr	r3, [r3, #20]
 8005c70:	687a      	ldr	r2, [r7, #4]
 8005c72:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005c74:	9202      	str	r2, [sp, #8]
 8005c76:	9301      	str	r3, [sp, #4]
 8005c78:	9100      	str	r1, [sp, #0]
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	4632      	mov	r2, r6
 8005c7e:	4629      	mov	r1, r5
 8005c80:	4620      	mov	r0, r4
 8005c82:	f000 fb8d 	bl	80063a0 <xTaskCreateStatic>
 8005c86:	4603      	mov	r3, r0
 8005c88:	60fb      	str	r3, [r7, #12]
 8005c8a:	e01c      	b.n	8005cc6 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	685c      	ldr	r4, [r3, #4]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005c98:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	f7ff ffaa 	bl	8005bfa <makeFreeRtosPriority>
 8005ca6:	4602      	mov	r2, r0
 8005ca8:	f107 030c 	add.w	r3, r7, #12
 8005cac:	9301      	str	r3, [sp, #4]
 8005cae:	9200      	str	r2, [sp, #0]
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	4632      	mov	r2, r6
 8005cb4:	4629      	mov	r1, r5
 8005cb6:	4620      	mov	r0, r4
 8005cb8:	f000 fbd1 	bl	800645e <xTaskCreate>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	2b01      	cmp	r3, #1
 8005cc0:	d001      	beq.n	8005cc6 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	e000      	b.n	8005cc8 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	3714      	adds	r7, #20
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005cd0 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b084      	sub	sp, #16
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d001      	beq.n	8005ce6 <osDelay+0x16>
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	e000      	b.n	8005ce8 <osDelay+0x18>
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	4618      	mov	r0, r3
 8005cea:	f000 fce7 	bl	80066bc <vTaskDelay>
  
  return osOK;
 8005cee:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	3710      	adds	r7, #16
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bd80      	pop	{r7, pc}

08005cf8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b083      	sub	sp, #12
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	f103 0208 	add.w	r2, r3, #8
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	f04f 32ff 	mov.w	r2, #4294967295
 8005d10:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	f103 0208 	add.w	r2, r3, #8
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	f103 0208 	add.w	r2, r3, #8
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005d2c:	bf00      	nop
 8005d2e:	370c      	adds	r7, #12
 8005d30:	46bd      	mov	sp, r7
 8005d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d36:	4770      	bx	lr

08005d38 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b083      	sub	sp, #12
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2200      	movs	r2, #0
 8005d44:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005d46:	bf00      	nop
 8005d48:	370c      	adds	r7, #12
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d50:	4770      	bx	lr

08005d52 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005d52:	b480      	push	{r7}
 8005d54:	b085      	sub	sp, #20
 8005d56:	af00      	add	r7, sp, #0
 8005d58:	6078      	str	r0, [r7, #4]
 8005d5a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	685b      	ldr	r3, [r3, #4]
 8005d60:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	68fa      	ldr	r2, [r7, #12]
 8005d66:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	689a      	ldr	r2, [r3, #8]
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	689b      	ldr	r3, [r3, #8]
 8005d74:	683a      	ldr	r2, [r7, #0]
 8005d76:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	683a      	ldr	r2, [r7, #0]
 8005d7c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	687a      	ldr	r2, [r7, #4]
 8005d82:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	1c5a      	adds	r2, r3, #1
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	601a      	str	r2, [r3, #0]
}
 8005d8e:	bf00      	nop
 8005d90:	3714      	adds	r7, #20
 8005d92:	46bd      	mov	sp, r7
 8005d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d98:	4770      	bx	lr

08005d9a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005d9a:	b480      	push	{r7}
 8005d9c:	b085      	sub	sp, #20
 8005d9e:	af00      	add	r7, sp, #0
 8005da0:	6078      	str	r0, [r7, #4]
 8005da2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005db0:	d103      	bne.n	8005dba <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	691b      	ldr	r3, [r3, #16]
 8005db6:	60fb      	str	r3, [r7, #12]
 8005db8:	e00c      	b.n	8005dd4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	3308      	adds	r3, #8
 8005dbe:	60fb      	str	r3, [r7, #12]
 8005dc0:	e002      	b.n	8005dc8 <vListInsert+0x2e>
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	60fb      	str	r3, [r7, #12]
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	68ba      	ldr	r2, [r7, #8]
 8005dd0:	429a      	cmp	r2, r3
 8005dd2:	d2f6      	bcs.n	8005dc2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	685a      	ldr	r2, [r3, #4]
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	683a      	ldr	r2, [r7, #0]
 8005de2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	68fa      	ldr	r2, [r7, #12]
 8005de8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	683a      	ldr	r2, [r7, #0]
 8005dee:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	687a      	ldr	r2, [r7, #4]
 8005df4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	1c5a      	adds	r2, r3, #1
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	601a      	str	r2, [r3, #0]
}
 8005e00:	bf00      	nop
 8005e02:	3714      	adds	r7, #20
 8005e04:	46bd      	mov	sp, r7
 8005e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0a:	4770      	bx	lr

08005e0c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b085      	sub	sp, #20
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	691b      	ldr	r3, [r3, #16]
 8005e18:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	687a      	ldr	r2, [r7, #4]
 8005e20:	6892      	ldr	r2, [r2, #8]
 8005e22:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	689b      	ldr	r3, [r3, #8]
 8005e28:	687a      	ldr	r2, [r7, #4]
 8005e2a:	6852      	ldr	r2, [r2, #4]
 8005e2c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	685b      	ldr	r3, [r3, #4]
 8005e32:	687a      	ldr	r2, [r7, #4]
 8005e34:	429a      	cmp	r2, r3
 8005e36:	d103      	bne.n	8005e40 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	689a      	ldr	r2, [r3, #8]
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2200      	movs	r2, #0
 8005e44:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	1e5a      	subs	r2, r3, #1
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
}
 8005e54:	4618      	mov	r0, r3
 8005e56:	3714      	adds	r7, #20
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5e:	4770      	bx	lr

08005e60 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b084      	sub	sp, #16
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
 8005e68:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d10b      	bne.n	8005e8c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005e74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e78:	f383 8811 	msr	BASEPRI, r3
 8005e7c:	f3bf 8f6f 	isb	sy
 8005e80:	f3bf 8f4f 	dsb	sy
 8005e84:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005e86:	bf00      	nop
 8005e88:	bf00      	nop
 8005e8a:	e7fd      	b.n	8005e88 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005e8c:	f001 f9d4 	bl	8007238 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681a      	ldr	r2, [r3, #0]
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e98:	68f9      	ldr	r1, [r7, #12]
 8005e9a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005e9c:	fb01 f303 	mul.w	r3, r1, r3
 8005ea0:	441a      	add	r2, r3
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681a      	ldr	r2, [r3, #0]
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681a      	ldr	r2, [r3, #0]
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ebc:	3b01      	subs	r3, #1
 8005ebe:	68f9      	ldr	r1, [r7, #12]
 8005ec0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005ec2:	fb01 f303 	mul.w	r3, r1, r3
 8005ec6:	441a      	add	r2, r3
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	22ff      	movs	r2, #255	@ 0xff
 8005ed0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	22ff      	movs	r2, #255	@ 0xff
 8005ed8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d114      	bne.n	8005f0c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	691b      	ldr	r3, [r3, #16]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d01a      	beq.n	8005f20 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	3310      	adds	r3, #16
 8005eee:	4618      	mov	r0, r3
 8005ef0:	f000 fe42 	bl	8006b78 <xTaskRemoveFromEventList>
 8005ef4:	4603      	mov	r3, r0
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d012      	beq.n	8005f20 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005efa:	4b0d      	ldr	r3, [pc, #52]	@ (8005f30 <xQueueGenericReset+0xd0>)
 8005efc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f00:	601a      	str	r2, [r3, #0]
 8005f02:	f3bf 8f4f 	dsb	sy
 8005f06:	f3bf 8f6f 	isb	sy
 8005f0a:	e009      	b.n	8005f20 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	3310      	adds	r3, #16
 8005f10:	4618      	mov	r0, r3
 8005f12:	f7ff fef1 	bl	8005cf8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	3324      	adds	r3, #36	@ 0x24
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	f7ff feec 	bl	8005cf8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005f20:	f001 f9bc 	bl	800729c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005f24:	2301      	movs	r3, #1
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	3710      	adds	r7, #16
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd80      	pop	{r7, pc}
 8005f2e:	bf00      	nop
 8005f30:	e000ed04 	.word	0xe000ed04

08005f34 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b08a      	sub	sp, #40	@ 0x28
 8005f38:	af02      	add	r7, sp, #8
 8005f3a:	60f8      	str	r0, [r7, #12]
 8005f3c:	60b9      	str	r1, [r7, #8]
 8005f3e:	4613      	mov	r3, r2
 8005f40:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d10b      	bne.n	8005f60 <xQueueGenericCreate+0x2c>
	__asm volatile
 8005f48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f4c:	f383 8811 	msr	BASEPRI, r3
 8005f50:	f3bf 8f6f 	isb	sy
 8005f54:	f3bf 8f4f 	dsb	sy
 8005f58:	613b      	str	r3, [r7, #16]
}
 8005f5a:	bf00      	nop
 8005f5c:	bf00      	nop
 8005f5e:	e7fd      	b.n	8005f5c <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d102      	bne.n	8005f6c <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005f66:	2300      	movs	r3, #0
 8005f68:	61fb      	str	r3, [r7, #28]
 8005f6a:	e004      	b.n	8005f76 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	68ba      	ldr	r2, [r7, #8]
 8005f70:	fb02 f303 	mul.w	r3, r2, r3
 8005f74:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8005f76:	69fb      	ldr	r3, [r7, #28]
 8005f78:	3348      	adds	r3, #72	@ 0x48
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	f001 fa7e 	bl	800747c <pvPortMalloc>
 8005f80:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005f82:	69bb      	ldr	r3, [r7, #24]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d00f      	beq.n	8005fa8 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8005f88:	69bb      	ldr	r3, [r7, #24]
 8005f8a:	3348      	adds	r3, #72	@ 0x48
 8005f8c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005f8e:	69bb      	ldr	r3, [r7, #24]
 8005f90:	2200      	movs	r2, #0
 8005f92:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005f96:	79fa      	ldrb	r2, [r7, #7]
 8005f98:	69bb      	ldr	r3, [r7, #24]
 8005f9a:	9300      	str	r3, [sp, #0]
 8005f9c:	4613      	mov	r3, r2
 8005f9e:	697a      	ldr	r2, [r7, #20]
 8005fa0:	68b9      	ldr	r1, [r7, #8]
 8005fa2:	68f8      	ldr	r0, [r7, #12]
 8005fa4:	f000 f805 	bl	8005fb2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005fa8:	69bb      	ldr	r3, [r7, #24]
	}
 8005faa:	4618      	mov	r0, r3
 8005fac:	3720      	adds	r7, #32
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd80      	pop	{r7, pc}

08005fb2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005fb2:	b580      	push	{r7, lr}
 8005fb4:	b084      	sub	sp, #16
 8005fb6:	af00      	add	r7, sp, #0
 8005fb8:	60f8      	str	r0, [r7, #12]
 8005fba:	60b9      	str	r1, [r7, #8]
 8005fbc:	607a      	str	r2, [r7, #4]
 8005fbe:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d103      	bne.n	8005fce <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005fc6:	69bb      	ldr	r3, [r7, #24]
 8005fc8:	69ba      	ldr	r2, [r7, #24]
 8005fca:	601a      	str	r2, [r3, #0]
 8005fcc:	e002      	b.n	8005fd4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005fce:	69bb      	ldr	r3, [r7, #24]
 8005fd0:	687a      	ldr	r2, [r7, #4]
 8005fd2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005fd4:	69bb      	ldr	r3, [r7, #24]
 8005fd6:	68fa      	ldr	r2, [r7, #12]
 8005fd8:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005fda:	69bb      	ldr	r3, [r7, #24]
 8005fdc:	68ba      	ldr	r2, [r7, #8]
 8005fde:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005fe0:	2101      	movs	r1, #1
 8005fe2:	69b8      	ldr	r0, [r7, #24]
 8005fe4:	f7ff ff3c 	bl	8005e60 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005fe8:	bf00      	nop
 8005fea:	3710      	adds	r7, #16
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bd80      	pop	{r7, pc}

08005ff0 <xQueueGenericSendFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b08e      	sub	sp, #56	@ 0x38
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	60f8      	str	r0, [r7, #12]
 8005ff8:	60b9      	str	r1, [r7, #8]
 8005ffa:	607a      	str	r2, [r7, #4]
 8005ffc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006002:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006004:	2b00      	cmp	r3, #0
 8006006:	d10b      	bne.n	8006020 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8006008:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800600c:	f383 8811 	msr	BASEPRI, r3
 8006010:	f3bf 8f6f 	isb	sy
 8006014:	f3bf 8f4f 	dsb	sy
 8006018:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800601a:	bf00      	nop
 800601c:	bf00      	nop
 800601e:	e7fd      	b.n	800601c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d103      	bne.n	800602e <xQueueGenericSendFromISR+0x3e>
 8006026:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800602a:	2b00      	cmp	r3, #0
 800602c:	d101      	bne.n	8006032 <xQueueGenericSendFromISR+0x42>
 800602e:	2301      	movs	r3, #1
 8006030:	e000      	b.n	8006034 <xQueueGenericSendFromISR+0x44>
 8006032:	2300      	movs	r3, #0
 8006034:	2b00      	cmp	r3, #0
 8006036:	d10b      	bne.n	8006050 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8006038:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800603c:	f383 8811 	msr	BASEPRI, r3
 8006040:	f3bf 8f6f 	isb	sy
 8006044:	f3bf 8f4f 	dsb	sy
 8006048:	623b      	str	r3, [r7, #32]
}
 800604a:	bf00      	nop
 800604c:	bf00      	nop
 800604e:	e7fd      	b.n	800604c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	2b02      	cmp	r3, #2
 8006054:	d103      	bne.n	800605e <xQueueGenericSendFromISR+0x6e>
 8006056:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006058:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800605a:	2b01      	cmp	r3, #1
 800605c:	d101      	bne.n	8006062 <xQueueGenericSendFromISR+0x72>
 800605e:	2301      	movs	r3, #1
 8006060:	e000      	b.n	8006064 <xQueueGenericSendFromISR+0x74>
 8006062:	2300      	movs	r3, #0
 8006064:	2b00      	cmp	r3, #0
 8006066:	d10b      	bne.n	8006080 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8006068:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800606c:	f383 8811 	msr	BASEPRI, r3
 8006070:	f3bf 8f6f 	isb	sy
 8006074:	f3bf 8f4f 	dsb	sy
 8006078:	61fb      	str	r3, [r7, #28]
}
 800607a:	bf00      	nop
 800607c:	bf00      	nop
 800607e:	e7fd      	b.n	800607c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006080:	f001 f9ba 	bl	80073f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006084:	f3ef 8211 	mrs	r2, BASEPRI
 8006088:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800608c:	f383 8811 	msr	BASEPRI, r3
 8006090:	f3bf 8f6f 	isb	sy
 8006094:	f3bf 8f4f 	dsb	sy
 8006098:	61ba      	str	r2, [r7, #24]
 800609a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800609c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800609e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80060a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060a2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80060a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060a8:	429a      	cmp	r2, r3
 80060aa:	d302      	bcc.n	80060b2 <xQueueGenericSendFromISR+0xc2>
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	2b02      	cmp	r3, #2
 80060b0:	d12c      	bne.n	800610c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80060b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060b4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80060b8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80060bc:	683a      	ldr	r2, [r7, #0]
 80060be:	68b9      	ldr	r1, [r7, #8]
 80060c0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80060c2:	f000 f8b2 	bl	800622a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80060c6:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 80060ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060ce:	d112      	bne.n	80060f6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80060d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d016      	beq.n	8006106 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80060d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060da:	3324      	adds	r3, #36	@ 0x24
 80060dc:	4618      	mov	r0, r3
 80060de:	f000 fd4b 	bl	8006b78 <xTaskRemoveFromEventList>
 80060e2:	4603      	mov	r3, r0
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d00e      	beq.n	8006106 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d00b      	beq.n	8006106 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2201      	movs	r2, #1
 80060f2:	601a      	str	r2, [r3, #0]
 80060f4:	e007      	b.n	8006106 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80060f6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80060fa:	3301      	adds	r3, #1
 80060fc:	b2db      	uxtb	r3, r3
 80060fe:	b25a      	sxtb	r2, r3
 8006100:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006102:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006106:	2301      	movs	r3, #1
 8006108:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 800610a:	e001      	b.n	8006110 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800610c:	2300      	movs	r3, #0
 800610e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006110:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006112:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006114:	693b      	ldr	r3, [r7, #16]
 8006116:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800611a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800611c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800611e:	4618      	mov	r0, r3
 8006120:	3738      	adds	r7, #56	@ 0x38
 8006122:	46bd      	mov	sp, r7
 8006124:	bd80      	pop	{r7, pc}

08006126 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006126:	b580      	push	{r7, lr}
 8006128:	b08e      	sub	sp, #56	@ 0x38
 800612a:	af00      	add	r7, sp, #0
 800612c:	60f8      	str	r0, [r7, #12]
 800612e:	60b9      	str	r1, [r7, #8]
 8006130:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006136:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006138:	2b00      	cmp	r3, #0
 800613a:	d10b      	bne.n	8006154 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800613c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006140:	f383 8811 	msr	BASEPRI, r3
 8006144:	f3bf 8f6f 	isb	sy
 8006148:	f3bf 8f4f 	dsb	sy
 800614c:	623b      	str	r3, [r7, #32]
}
 800614e:	bf00      	nop
 8006150:	bf00      	nop
 8006152:	e7fd      	b.n	8006150 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d103      	bne.n	8006162 <xQueueReceiveFromISR+0x3c>
 800615a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800615c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800615e:	2b00      	cmp	r3, #0
 8006160:	d101      	bne.n	8006166 <xQueueReceiveFromISR+0x40>
 8006162:	2301      	movs	r3, #1
 8006164:	e000      	b.n	8006168 <xQueueReceiveFromISR+0x42>
 8006166:	2300      	movs	r3, #0
 8006168:	2b00      	cmp	r3, #0
 800616a:	d10b      	bne.n	8006184 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800616c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006170:	f383 8811 	msr	BASEPRI, r3
 8006174:	f3bf 8f6f 	isb	sy
 8006178:	f3bf 8f4f 	dsb	sy
 800617c:	61fb      	str	r3, [r7, #28]
}
 800617e:	bf00      	nop
 8006180:	bf00      	nop
 8006182:	e7fd      	b.n	8006180 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006184:	f001 f938 	bl	80073f8 <vPortValidateInterruptPriority>
	__asm volatile
 8006188:	f3ef 8211 	mrs	r2, BASEPRI
 800618c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006190:	f383 8811 	msr	BASEPRI, r3
 8006194:	f3bf 8f6f 	isb	sy
 8006198:	f3bf 8f4f 	dsb	sy
 800619c:	61ba      	str	r2, [r7, #24]
 800619e:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80061a0:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80061a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80061a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061a8:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80061aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d02f      	beq.n	8006210 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80061b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061b2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80061b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80061ba:	68b9      	ldr	r1, [r7, #8]
 80061bc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80061be:	f000 f89e 	bl	80062fe <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80061c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061c4:	1e5a      	subs	r2, r3, #1
 80061c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061c8:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80061ca:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80061ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061d2:	d112      	bne.n	80061fa <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80061d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061d6:	691b      	ldr	r3, [r3, #16]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d016      	beq.n	800620a <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80061dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061de:	3310      	adds	r3, #16
 80061e0:	4618      	mov	r0, r3
 80061e2:	f000 fcc9 	bl	8006b78 <xTaskRemoveFromEventList>
 80061e6:	4603      	mov	r3, r0
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d00e      	beq.n	800620a <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d00b      	beq.n	800620a <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2201      	movs	r2, #1
 80061f6:	601a      	str	r2, [r3, #0]
 80061f8:	e007      	b.n	800620a <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80061fa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80061fe:	3301      	adds	r3, #1
 8006200:	b2db      	uxtb	r3, r3
 8006202:	b25a      	sxtb	r2, r3
 8006204:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006206:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800620a:	2301      	movs	r3, #1
 800620c:	637b      	str	r3, [r7, #52]	@ 0x34
 800620e:	e001      	b.n	8006214 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8006210:	2300      	movs	r3, #0
 8006212:	637b      	str	r3, [r7, #52]	@ 0x34
 8006214:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006216:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006218:	693b      	ldr	r3, [r7, #16]
 800621a:	f383 8811 	msr	BASEPRI, r3
}
 800621e:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006220:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006222:	4618      	mov	r0, r3
 8006224:	3738      	adds	r7, #56	@ 0x38
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}

0800622a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800622a:	b580      	push	{r7, lr}
 800622c:	b086      	sub	sp, #24
 800622e:	af00      	add	r7, sp, #0
 8006230:	60f8      	str	r0, [r7, #12]
 8006232:	60b9      	str	r1, [r7, #8]
 8006234:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006236:	2300      	movs	r3, #0
 8006238:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800623e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006244:	2b00      	cmp	r3, #0
 8006246:	d10d      	bne.n	8006264 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d14d      	bne.n	80062ec <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	4618      	mov	r0, r3
 8006256:	f000 fdcf 	bl	8006df8 <xTaskPriorityDisinherit>
 800625a:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	2200      	movs	r2, #0
 8006260:	605a      	str	r2, [r3, #4]
 8006262:	e043      	b.n	80062ec <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d119      	bne.n	800629e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	6898      	ldr	r0, [r3, #8]
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006272:	461a      	mov	r2, r3
 8006274:	68b9      	ldr	r1, [r7, #8]
 8006276:	f001 fb49 	bl	800790c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	689a      	ldr	r2, [r3, #8]
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006282:	441a      	add	r2, r3
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	689a      	ldr	r2, [r3, #8]
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	685b      	ldr	r3, [r3, #4]
 8006290:	429a      	cmp	r2, r3
 8006292:	d32b      	bcc.n	80062ec <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681a      	ldr	r2, [r3, #0]
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	609a      	str	r2, [r3, #8]
 800629c:	e026      	b.n	80062ec <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	68d8      	ldr	r0, [r3, #12]
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062a6:	461a      	mov	r2, r3
 80062a8:	68b9      	ldr	r1, [r7, #8]
 80062aa:	f001 fb2f 	bl	800790c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	68da      	ldr	r2, [r3, #12]
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062b6:	425b      	negs	r3, r3
 80062b8:	441a      	add	r2, r3
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	68da      	ldr	r2, [r3, #12]
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	429a      	cmp	r2, r3
 80062c8:	d207      	bcs.n	80062da <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	685a      	ldr	r2, [r3, #4]
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062d2:	425b      	negs	r3, r3
 80062d4:	441a      	add	r2, r3
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2b02      	cmp	r3, #2
 80062de:	d105      	bne.n	80062ec <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80062e0:	693b      	ldr	r3, [r7, #16]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d002      	beq.n	80062ec <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80062e6:	693b      	ldr	r3, [r7, #16]
 80062e8:	3b01      	subs	r3, #1
 80062ea:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80062ec:	693b      	ldr	r3, [r7, #16]
 80062ee:	1c5a      	adds	r2, r3, #1
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80062f4:	697b      	ldr	r3, [r7, #20]
}
 80062f6:	4618      	mov	r0, r3
 80062f8:	3718      	adds	r7, #24
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bd80      	pop	{r7, pc}

080062fe <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80062fe:	b580      	push	{r7, lr}
 8006300:	b082      	sub	sp, #8
 8006302:	af00      	add	r7, sp, #0
 8006304:	6078      	str	r0, [r7, #4]
 8006306:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800630c:	2b00      	cmp	r3, #0
 800630e:	d018      	beq.n	8006342 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	68da      	ldr	r2, [r3, #12]
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006318:	441a      	add	r2, r3
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	68da      	ldr	r2, [r3, #12]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	685b      	ldr	r3, [r3, #4]
 8006326:	429a      	cmp	r2, r3
 8006328:	d303      	bcc.n	8006332 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681a      	ldr	r2, [r3, #0]
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	68d9      	ldr	r1, [r3, #12]
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800633a:	461a      	mov	r2, r3
 800633c:	6838      	ldr	r0, [r7, #0]
 800633e:	f001 fae5 	bl	800790c <memcpy>
	}
}
 8006342:	bf00      	nop
 8006344:	3708      	adds	r7, #8
 8006346:	46bd      	mov	sp, r7
 8006348:	bd80      	pop	{r7, pc}
	...

0800634c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800634c:	b480      	push	{r7}
 800634e:	b085      	sub	sp, #20
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
 8006354:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006356:	2300      	movs	r3, #0
 8006358:	60fb      	str	r3, [r7, #12]
 800635a:	e014      	b.n	8006386 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800635c:	4a0f      	ldr	r2, [pc, #60]	@ (800639c <vQueueAddToRegistry+0x50>)
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d10b      	bne.n	8006380 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006368:	490c      	ldr	r1, [pc, #48]	@ (800639c <vQueueAddToRegistry+0x50>)
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	683a      	ldr	r2, [r7, #0]
 800636e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006372:	4a0a      	ldr	r2, [pc, #40]	@ (800639c <vQueueAddToRegistry+0x50>)
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	00db      	lsls	r3, r3, #3
 8006378:	4413      	add	r3, r2
 800637a:	687a      	ldr	r2, [r7, #4]
 800637c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800637e:	e006      	b.n	800638e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	3301      	adds	r3, #1
 8006384:	60fb      	str	r3, [r7, #12]
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	2b07      	cmp	r3, #7
 800638a:	d9e7      	bls.n	800635c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800638c:	bf00      	nop
 800638e:	bf00      	nop
 8006390:	3714      	adds	r7, #20
 8006392:	46bd      	mov	sp, r7
 8006394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006398:	4770      	bx	lr
 800639a:	bf00      	nop
 800639c:	20000508 	.word	0x20000508

080063a0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b08e      	sub	sp, #56	@ 0x38
 80063a4:	af04      	add	r7, sp, #16
 80063a6:	60f8      	str	r0, [r7, #12]
 80063a8:	60b9      	str	r1, [r7, #8]
 80063aa:	607a      	str	r2, [r7, #4]
 80063ac:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80063ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d10b      	bne.n	80063cc <xTaskCreateStatic+0x2c>
	__asm volatile
 80063b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063b8:	f383 8811 	msr	BASEPRI, r3
 80063bc:	f3bf 8f6f 	isb	sy
 80063c0:	f3bf 8f4f 	dsb	sy
 80063c4:	623b      	str	r3, [r7, #32]
}
 80063c6:	bf00      	nop
 80063c8:	bf00      	nop
 80063ca:	e7fd      	b.n	80063c8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80063cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d10b      	bne.n	80063ea <xTaskCreateStatic+0x4a>
	__asm volatile
 80063d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063d6:	f383 8811 	msr	BASEPRI, r3
 80063da:	f3bf 8f6f 	isb	sy
 80063de:	f3bf 8f4f 	dsb	sy
 80063e2:	61fb      	str	r3, [r7, #28]
}
 80063e4:	bf00      	nop
 80063e6:	bf00      	nop
 80063e8:	e7fd      	b.n	80063e6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80063ea:	2354      	movs	r3, #84	@ 0x54
 80063ec:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80063ee:	693b      	ldr	r3, [r7, #16]
 80063f0:	2b54      	cmp	r3, #84	@ 0x54
 80063f2:	d00b      	beq.n	800640c <xTaskCreateStatic+0x6c>
	__asm volatile
 80063f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063f8:	f383 8811 	msr	BASEPRI, r3
 80063fc:	f3bf 8f6f 	isb	sy
 8006400:	f3bf 8f4f 	dsb	sy
 8006404:	61bb      	str	r3, [r7, #24]
}
 8006406:	bf00      	nop
 8006408:	bf00      	nop
 800640a:	e7fd      	b.n	8006408 <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800640c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800640e:	2b00      	cmp	r3, #0
 8006410:	d01e      	beq.n	8006450 <xTaskCreateStatic+0xb0>
 8006412:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006414:	2b00      	cmp	r3, #0
 8006416:	d01b      	beq.n	8006450 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006418:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800641a:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800641c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800641e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006420:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006424:	2202      	movs	r2, #2
 8006426:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800642a:	2300      	movs	r3, #0
 800642c:	9303      	str	r3, [sp, #12]
 800642e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006430:	9302      	str	r3, [sp, #8]
 8006432:	f107 0314 	add.w	r3, r7, #20
 8006436:	9301      	str	r3, [sp, #4]
 8006438:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800643a:	9300      	str	r3, [sp, #0]
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	687a      	ldr	r2, [r7, #4]
 8006440:	68b9      	ldr	r1, [r7, #8]
 8006442:	68f8      	ldr	r0, [r7, #12]
 8006444:	f000 f850 	bl	80064e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006448:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800644a:	f000 f8cd 	bl	80065e8 <prvAddNewTaskToReadyList>
 800644e:	e001      	b.n	8006454 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 8006450:	2300      	movs	r3, #0
 8006452:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006454:	697b      	ldr	r3, [r7, #20]
	}
 8006456:	4618      	mov	r0, r3
 8006458:	3728      	adds	r7, #40	@ 0x28
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}

0800645e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800645e:	b580      	push	{r7, lr}
 8006460:	b08c      	sub	sp, #48	@ 0x30
 8006462:	af04      	add	r7, sp, #16
 8006464:	60f8      	str	r0, [r7, #12]
 8006466:	60b9      	str	r1, [r7, #8]
 8006468:	603b      	str	r3, [r7, #0]
 800646a:	4613      	mov	r3, r2
 800646c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800646e:	88fb      	ldrh	r3, [r7, #6]
 8006470:	009b      	lsls	r3, r3, #2
 8006472:	4618      	mov	r0, r3
 8006474:	f001 f802 	bl	800747c <pvPortMalloc>
 8006478:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800647a:	697b      	ldr	r3, [r7, #20]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d00e      	beq.n	800649e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8006480:	2054      	movs	r0, #84	@ 0x54
 8006482:	f000 fffb 	bl	800747c <pvPortMalloc>
 8006486:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006488:	69fb      	ldr	r3, [r7, #28]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d003      	beq.n	8006496 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800648e:	69fb      	ldr	r3, [r7, #28]
 8006490:	697a      	ldr	r2, [r7, #20]
 8006492:	631a      	str	r2, [r3, #48]	@ 0x30
 8006494:	e005      	b.n	80064a2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006496:	6978      	ldr	r0, [r7, #20]
 8006498:	f001 f8b8 	bl	800760c <vPortFree>
 800649c:	e001      	b.n	80064a2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800649e:	2300      	movs	r3, #0
 80064a0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80064a2:	69fb      	ldr	r3, [r7, #28]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d017      	beq.n	80064d8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80064a8:	69fb      	ldr	r3, [r7, #28]
 80064aa:	2200      	movs	r2, #0
 80064ac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80064b0:	88fa      	ldrh	r2, [r7, #6]
 80064b2:	2300      	movs	r3, #0
 80064b4:	9303      	str	r3, [sp, #12]
 80064b6:	69fb      	ldr	r3, [r7, #28]
 80064b8:	9302      	str	r3, [sp, #8]
 80064ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064bc:	9301      	str	r3, [sp, #4]
 80064be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064c0:	9300      	str	r3, [sp, #0]
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	68b9      	ldr	r1, [r7, #8]
 80064c6:	68f8      	ldr	r0, [r7, #12]
 80064c8:	f000 f80e 	bl	80064e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80064cc:	69f8      	ldr	r0, [r7, #28]
 80064ce:	f000 f88b 	bl	80065e8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80064d2:	2301      	movs	r3, #1
 80064d4:	61bb      	str	r3, [r7, #24]
 80064d6:	e002      	b.n	80064de <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80064d8:	f04f 33ff 	mov.w	r3, #4294967295
 80064dc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80064de:	69bb      	ldr	r3, [r7, #24]
	}
 80064e0:	4618      	mov	r0, r3
 80064e2:	3720      	adds	r7, #32
 80064e4:	46bd      	mov	sp, r7
 80064e6:	bd80      	pop	{r7, pc}

080064e8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b088      	sub	sp, #32
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	60f8      	str	r0, [r7, #12]
 80064f0:	60b9      	str	r1, [r7, #8]
 80064f2:	607a      	str	r2, [r7, #4]
 80064f4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80064f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064f8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006500:	3b01      	subs	r3, #1
 8006502:	009b      	lsls	r3, r3, #2
 8006504:	4413      	add	r3, r2
 8006506:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8006508:	69bb      	ldr	r3, [r7, #24]
 800650a:	f023 0307 	bic.w	r3, r3, #7
 800650e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006510:	69bb      	ldr	r3, [r7, #24]
 8006512:	f003 0307 	and.w	r3, r3, #7
 8006516:	2b00      	cmp	r3, #0
 8006518:	d00b      	beq.n	8006532 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800651a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800651e:	f383 8811 	msr	BASEPRI, r3
 8006522:	f3bf 8f6f 	isb	sy
 8006526:	f3bf 8f4f 	dsb	sy
 800652a:	617b      	str	r3, [r7, #20]
}
 800652c:	bf00      	nop
 800652e:	bf00      	nop
 8006530:	e7fd      	b.n	800652e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006532:	2300      	movs	r3, #0
 8006534:	61fb      	str	r3, [r7, #28]
 8006536:	e012      	b.n	800655e <prvInitialiseNewTask+0x76>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006538:	68ba      	ldr	r2, [r7, #8]
 800653a:	69fb      	ldr	r3, [r7, #28]
 800653c:	4413      	add	r3, r2
 800653e:	7819      	ldrb	r1, [r3, #0]
 8006540:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006542:	69fb      	ldr	r3, [r7, #28]
 8006544:	4413      	add	r3, r2
 8006546:	3334      	adds	r3, #52	@ 0x34
 8006548:	460a      	mov	r2, r1
 800654a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800654c:	68ba      	ldr	r2, [r7, #8]
 800654e:	69fb      	ldr	r3, [r7, #28]
 8006550:	4413      	add	r3, r2
 8006552:	781b      	ldrb	r3, [r3, #0]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d006      	beq.n	8006566 <prvInitialiseNewTask+0x7e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006558:	69fb      	ldr	r3, [r7, #28]
 800655a:	3301      	adds	r3, #1
 800655c:	61fb      	str	r3, [r7, #28]
 800655e:	69fb      	ldr	r3, [r7, #28]
 8006560:	2b0f      	cmp	r3, #15
 8006562:	d9e9      	bls.n	8006538 <prvInitialiseNewTask+0x50>
 8006564:	e000      	b.n	8006568 <prvInitialiseNewTask+0x80>
		{
			break;
 8006566:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006568:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800656a:	2200      	movs	r2, #0
 800656c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006570:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006572:	2b06      	cmp	r3, #6
 8006574:	d901      	bls.n	800657a <prvInitialiseNewTask+0x92>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006576:	2306      	movs	r3, #6
 8006578:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800657a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800657c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800657e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006580:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006582:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006584:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006588:	2200      	movs	r2, #0
 800658a:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800658c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800658e:	3304      	adds	r3, #4
 8006590:	4618      	mov	r0, r3
 8006592:	f7ff fbd1 	bl	8005d38 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006596:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006598:	3318      	adds	r3, #24
 800659a:	4618      	mov	r0, r3
 800659c:	f7ff fbcc 	bl	8005d38 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80065a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80065a4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80065a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065a8:	f1c3 0207 	rsb	r2, r3, #7
 80065ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065ae:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80065b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80065b4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80065b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065b8:	2200      	movs	r2, #0
 80065ba:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80065bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065be:	2200      	movs	r2, #0
 80065c0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80065c4:	683a      	ldr	r2, [r7, #0]
 80065c6:	68f9      	ldr	r1, [r7, #12]
 80065c8:	69b8      	ldr	r0, [r7, #24]
 80065ca:	f000 fd03 	bl	8006fd4 <pxPortInitialiseStack>
 80065ce:	4602      	mov	r2, r0
 80065d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065d2:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80065d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d002      	beq.n	80065e0 <prvInitialiseNewTask+0xf8>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80065da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80065de:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80065e0:	bf00      	nop
 80065e2:	3720      	adds	r7, #32
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd80      	pop	{r7, pc}

080065e8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b082      	sub	sp, #8
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80065f0:	f000 fe22 	bl	8007238 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80065f4:	4b2a      	ldr	r3, [pc, #168]	@ (80066a0 <prvAddNewTaskToReadyList+0xb8>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	3301      	adds	r3, #1
 80065fa:	4a29      	ldr	r2, [pc, #164]	@ (80066a0 <prvAddNewTaskToReadyList+0xb8>)
 80065fc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80065fe:	4b29      	ldr	r3, [pc, #164]	@ (80066a4 <prvAddNewTaskToReadyList+0xbc>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d109      	bne.n	800661a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006606:	4a27      	ldr	r2, [pc, #156]	@ (80066a4 <prvAddNewTaskToReadyList+0xbc>)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800660c:	4b24      	ldr	r3, [pc, #144]	@ (80066a0 <prvAddNewTaskToReadyList+0xb8>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	2b01      	cmp	r3, #1
 8006612:	d110      	bne.n	8006636 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006614:	f000 fb2c 	bl	8006c70 <prvInitialiseTaskLists>
 8006618:	e00d      	b.n	8006636 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800661a:	4b23      	ldr	r3, [pc, #140]	@ (80066a8 <prvAddNewTaskToReadyList+0xc0>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d109      	bne.n	8006636 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006622:	4b20      	ldr	r3, [pc, #128]	@ (80066a4 <prvAddNewTaskToReadyList+0xbc>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800662c:	429a      	cmp	r2, r3
 800662e:	d802      	bhi.n	8006636 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006630:	4a1c      	ldr	r2, [pc, #112]	@ (80066a4 <prvAddNewTaskToReadyList+0xbc>)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006636:	4b1d      	ldr	r3, [pc, #116]	@ (80066ac <prvAddNewTaskToReadyList+0xc4>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	3301      	adds	r3, #1
 800663c:	4a1b      	ldr	r2, [pc, #108]	@ (80066ac <prvAddNewTaskToReadyList+0xc4>)
 800663e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006644:	2201      	movs	r2, #1
 8006646:	409a      	lsls	r2, r3
 8006648:	4b19      	ldr	r3, [pc, #100]	@ (80066b0 <prvAddNewTaskToReadyList+0xc8>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4313      	orrs	r3, r2
 800664e:	4a18      	ldr	r2, [pc, #96]	@ (80066b0 <prvAddNewTaskToReadyList+0xc8>)
 8006650:	6013      	str	r3, [r2, #0]
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006656:	4613      	mov	r3, r2
 8006658:	009b      	lsls	r3, r3, #2
 800665a:	4413      	add	r3, r2
 800665c:	009b      	lsls	r3, r3, #2
 800665e:	4a15      	ldr	r2, [pc, #84]	@ (80066b4 <prvAddNewTaskToReadyList+0xcc>)
 8006660:	441a      	add	r2, r3
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	3304      	adds	r3, #4
 8006666:	4619      	mov	r1, r3
 8006668:	4610      	mov	r0, r2
 800666a:	f7ff fb72 	bl	8005d52 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800666e:	f000 fe15 	bl	800729c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006672:	4b0d      	ldr	r3, [pc, #52]	@ (80066a8 <prvAddNewTaskToReadyList+0xc0>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d00e      	beq.n	8006698 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800667a:	4b0a      	ldr	r3, [pc, #40]	@ (80066a4 <prvAddNewTaskToReadyList+0xbc>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006684:	429a      	cmp	r2, r3
 8006686:	d207      	bcs.n	8006698 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006688:	4b0b      	ldr	r3, [pc, #44]	@ (80066b8 <prvAddNewTaskToReadyList+0xd0>)
 800668a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800668e:	601a      	str	r2, [r3, #0]
 8006690:	f3bf 8f4f 	dsb	sy
 8006694:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006698:	bf00      	nop
 800669a:	3708      	adds	r7, #8
 800669c:	46bd      	mov	sp, r7
 800669e:	bd80      	pop	{r7, pc}
 80066a0:	20000648 	.word	0x20000648
 80066a4:	20000548 	.word	0x20000548
 80066a8:	20000654 	.word	0x20000654
 80066ac:	20000664 	.word	0x20000664
 80066b0:	20000650 	.word	0x20000650
 80066b4:	2000054c 	.word	0x2000054c
 80066b8:	e000ed04 	.word	0xe000ed04

080066bc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b084      	sub	sp, #16
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80066c4:	2300      	movs	r3, #0
 80066c6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d018      	beq.n	8006700 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80066ce:	4b14      	ldr	r3, [pc, #80]	@ (8006720 <vTaskDelay+0x64>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d00b      	beq.n	80066ee <vTaskDelay+0x32>
	__asm volatile
 80066d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066da:	f383 8811 	msr	BASEPRI, r3
 80066de:	f3bf 8f6f 	isb	sy
 80066e2:	f3bf 8f4f 	dsb	sy
 80066e6:	60bb      	str	r3, [r7, #8]
}
 80066e8:	bf00      	nop
 80066ea:	bf00      	nop
 80066ec:	e7fd      	b.n	80066ea <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80066ee:	f000 f87d 	bl	80067ec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80066f2:	2100      	movs	r1, #0
 80066f4:	6878      	ldr	r0, [r7, #4]
 80066f6:	f000 fc07 	bl	8006f08 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80066fa:	f000 f885 	bl	8006808 <xTaskResumeAll>
 80066fe:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d107      	bne.n	8006716 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8006706:	4b07      	ldr	r3, [pc, #28]	@ (8006724 <vTaskDelay+0x68>)
 8006708:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800670c:	601a      	str	r2, [r3, #0]
 800670e:	f3bf 8f4f 	dsb	sy
 8006712:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006716:	bf00      	nop
 8006718:	3710      	adds	r7, #16
 800671a:	46bd      	mov	sp, r7
 800671c:	bd80      	pop	{r7, pc}
 800671e:	bf00      	nop
 8006720:	20000670 	.word	0x20000670
 8006724:	e000ed04 	.word	0xe000ed04

08006728 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b08a      	sub	sp, #40	@ 0x28
 800672c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800672e:	2300      	movs	r3, #0
 8006730:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006732:	2300      	movs	r3, #0
 8006734:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006736:	463a      	mov	r2, r7
 8006738:	1d39      	adds	r1, r7, #4
 800673a:	f107 0308 	add.w	r3, r7, #8
 800673e:	4618      	mov	r0, r3
 8006740:	f7fa f97a 	bl	8000a38 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006744:	6839      	ldr	r1, [r7, #0]
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	68ba      	ldr	r2, [r7, #8]
 800674a:	9202      	str	r2, [sp, #8]
 800674c:	9301      	str	r3, [sp, #4]
 800674e:	2300      	movs	r3, #0
 8006750:	9300      	str	r3, [sp, #0]
 8006752:	2300      	movs	r3, #0
 8006754:	460a      	mov	r2, r1
 8006756:	491f      	ldr	r1, [pc, #124]	@ (80067d4 <vTaskStartScheduler+0xac>)
 8006758:	481f      	ldr	r0, [pc, #124]	@ (80067d8 <vTaskStartScheduler+0xb0>)
 800675a:	f7ff fe21 	bl	80063a0 <xTaskCreateStatic>
 800675e:	4603      	mov	r3, r0
 8006760:	4a1e      	ldr	r2, [pc, #120]	@ (80067dc <vTaskStartScheduler+0xb4>)
 8006762:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006764:	4b1d      	ldr	r3, [pc, #116]	@ (80067dc <vTaskStartScheduler+0xb4>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d002      	beq.n	8006772 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800676c:	2301      	movs	r3, #1
 800676e:	617b      	str	r3, [r7, #20]
 8006770:	e001      	b.n	8006776 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006772:	2300      	movs	r3, #0
 8006774:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006776:	697b      	ldr	r3, [r7, #20]
 8006778:	2b01      	cmp	r3, #1
 800677a:	d116      	bne.n	80067aa <vTaskStartScheduler+0x82>
	__asm volatile
 800677c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006780:	f383 8811 	msr	BASEPRI, r3
 8006784:	f3bf 8f6f 	isb	sy
 8006788:	f3bf 8f4f 	dsb	sy
 800678c:	613b      	str	r3, [r7, #16]
}
 800678e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006790:	4b13      	ldr	r3, [pc, #76]	@ (80067e0 <vTaskStartScheduler+0xb8>)
 8006792:	f04f 32ff 	mov.w	r2, #4294967295
 8006796:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006798:	4b12      	ldr	r3, [pc, #72]	@ (80067e4 <vTaskStartScheduler+0xbc>)
 800679a:	2201      	movs	r2, #1
 800679c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800679e:	4b12      	ldr	r3, [pc, #72]	@ (80067e8 <vTaskStartScheduler+0xc0>)
 80067a0:	2200      	movs	r2, #0
 80067a2:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80067a4:	f000 fca4 	bl	80070f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80067a8:	e00f      	b.n	80067ca <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80067aa:	697b      	ldr	r3, [r7, #20]
 80067ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067b0:	d10b      	bne.n	80067ca <vTaskStartScheduler+0xa2>
	__asm volatile
 80067b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067b6:	f383 8811 	msr	BASEPRI, r3
 80067ba:	f3bf 8f6f 	isb	sy
 80067be:	f3bf 8f4f 	dsb	sy
 80067c2:	60fb      	str	r3, [r7, #12]
}
 80067c4:	bf00      	nop
 80067c6:	bf00      	nop
 80067c8:	e7fd      	b.n	80067c6 <vTaskStartScheduler+0x9e>
}
 80067ca:	bf00      	nop
 80067cc:	3718      	adds	r7, #24
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bd80      	pop	{r7, pc}
 80067d2:	bf00      	nop
 80067d4:	0800824c 	.word	0x0800824c
 80067d8:	08006c41 	.word	0x08006c41
 80067dc:	2000066c 	.word	0x2000066c
 80067e0:	20000668 	.word	0x20000668
 80067e4:	20000654 	.word	0x20000654
 80067e8:	2000064c 	.word	0x2000064c

080067ec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80067ec:	b480      	push	{r7}
 80067ee:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80067f0:	4b04      	ldr	r3, [pc, #16]	@ (8006804 <vTaskSuspendAll+0x18>)
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	3301      	adds	r3, #1
 80067f6:	4a03      	ldr	r2, [pc, #12]	@ (8006804 <vTaskSuspendAll+0x18>)
 80067f8:	6013      	str	r3, [r2, #0]
}
 80067fa:	bf00      	nop
 80067fc:	46bd      	mov	sp, r7
 80067fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006802:	4770      	bx	lr
 8006804:	20000670 	.word	0x20000670

08006808 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b084      	sub	sp, #16
 800680c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800680e:	2300      	movs	r3, #0
 8006810:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006812:	2300      	movs	r3, #0
 8006814:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006816:	4b42      	ldr	r3, [pc, #264]	@ (8006920 <xTaskResumeAll+0x118>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d10b      	bne.n	8006836 <xTaskResumeAll+0x2e>
	__asm volatile
 800681e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006822:	f383 8811 	msr	BASEPRI, r3
 8006826:	f3bf 8f6f 	isb	sy
 800682a:	f3bf 8f4f 	dsb	sy
 800682e:	603b      	str	r3, [r7, #0]
}
 8006830:	bf00      	nop
 8006832:	bf00      	nop
 8006834:	e7fd      	b.n	8006832 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006836:	f000 fcff 	bl	8007238 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800683a:	4b39      	ldr	r3, [pc, #228]	@ (8006920 <xTaskResumeAll+0x118>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	3b01      	subs	r3, #1
 8006840:	4a37      	ldr	r2, [pc, #220]	@ (8006920 <xTaskResumeAll+0x118>)
 8006842:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006844:	4b36      	ldr	r3, [pc, #216]	@ (8006920 <xTaskResumeAll+0x118>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d161      	bne.n	8006910 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800684c:	4b35      	ldr	r3, [pc, #212]	@ (8006924 <xTaskResumeAll+0x11c>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d05d      	beq.n	8006910 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006854:	e02e      	b.n	80068b4 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006856:	4b34      	ldr	r3, [pc, #208]	@ (8006928 <xTaskResumeAll+0x120>)
 8006858:	68db      	ldr	r3, [r3, #12]
 800685a:	68db      	ldr	r3, [r3, #12]
 800685c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	3318      	adds	r3, #24
 8006862:	4618      	mov	r0, r3
 8006864:	f7ff fad2 	bl	8005e0c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	3304      	adds	r3, #4
 800686c:	4618      	mov	r0, r3
 800686e:	f7ff facd 	bl	8005e0c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006876:	2201      	movs	r2, #1
 8006878:	409a      	lsls	r2, r3
 800687a:	4b2c      	ldr	r3, [pc, #176]	@ (800692c <xTaskResumeAll+0x124>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	4313      	orrs	r3, r2
 8006880:	4a2a      	ldr	r2, [pc, #168]	@ (800692c <xTaskResumeAll+0x124>)
 8006882:	6013      	str	r3, [r2, #0]
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006888:	4613      	mov	r3, r2
 800688a:	009b      	lsls	r3, r3, #2
 800688c:	4413      	add	r3, r2
 800688e:	009b      	lsls	r3, r3, #2
 8006890:	4a27      	ldr	r2, [pc, #156]	@ (8006930 <xTaskResumeAll+0x128>)
 8006892:	441a      	add	r2, r3
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	3304      	adds	r3, #4
 8006898:	4619      	mov	r1, r3
 800689a:	4610      	mov	r0, r2
 800689c:	f7ff fa59 	bl	8005d52 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068a4:	4b23      	ldr	r3, [pc, #140]	@ (8006934 <xTaskResumeAll+0x12c>)
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068aa:	429a      	cmp	r2, r3
 80068ac:	d302      	bcc.n	80068b4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80068ae:	4b22      	ldr	r3, [pc, #136]	@ (8006938 <xTaskResumeAll+0x130>)
 80068b0:	2201      	movs	r2, #1
 80068b2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80068b4:	4b1c      	ldr	r3, [pc, #112]	@ (8006928 <xTaskResumeAll+0x120>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d1cc      	bne.n	8006856 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d001      	beq.n	80068c6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80068c2:	f000 fa73 	bl	8006dac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80068c6:	4b1d      	ldr	r3, [pc, #116]	@ (800693c <xTaskResumeAll+0x134>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d010      	beq.n	80068f4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80068d2:	f000 f837 	bl	8006944 <xTaskIncrementTick>
 80068d6:	4603      	mov	r3, r0
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d002      	beq.n	80068e2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80068dc:	4b16      	ldr	r3, [pc, #88]	@ (8006938 <xTaskResumeAll+0x130>)
 80068de:	2201      	movs	r2, #1
 80068e0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	3b01      	subs	r3, #1
 80068e6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d1f1      	bne.n	80068d2 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 80068ee:	4b13      	ldr	r3, [pc, #76]	@ (800693c <xTaskResumeAll+0x134>)
 80068f0:	2200      	movs	r2, #0
 80068f2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80068f4:	4b10      	ldr	r3, [pc, #64]	@ (8006938 <xTaskResumeAll+0x130>)
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d009      	beq.n	8006910 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80068fc:	2301      	movs	r3, #1
 80068fe:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006900:	4b0f      	ldr	r3, [pc, #60]	@ (8006940 <xTaskResumeAll+0x138>)
 8006902:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006906:	601a      	str	r2, [r3, #0]
 8006908:	f3bf 8f4f 	dsb	sy
 800690c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006910:	f000 fcc4 	bl	800729c <vPortExitCritical>

	return xAlreadyYielded;
 8006914:	68bb      	ldr	r3, [r7, #8]
}
 8006916:	4618      	mov	r0, r3
 8006918:	3710      	adds	r7, #16
 800691a:	46bd      	mov	sp, r7
 800691c:	bd80      	pop	{r7, pc}
 800691e:	bf00      	nop
 8006920:	20000670 	.word	0x20000670
 8006924:	20000648 	.word	0x20000648
 8006928:	20000608 	.word	0x20000608
 800692c:	20000650 	.word	0x20000650
 8006930:	2000054c 	.word	0x2000054c
 8006934:	20000548 	.word	0x20000548
 8006938:	2000065c 	.word	0x2000065c
 800693c:	20000658 	.word	0x20000658
 8006940:	e000ed04 	.word	0xe000ed04

08006944 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b086      	sub	sp, #24
 8006948:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800694a:	2300      	movs	r3, #0
 800694c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800694e:	4b51      	ldr	r3, [pc, #324]	@ (8006a94 <xTaskIncrementTick+0x150>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	2b00      	cmp	r3, #0
 8006954:	f040 808e 	bne.w	8006a74 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006958:	4b4f      	ldr	r3, [pc, #316]	@ (8006a98 <xTaskIncrementTick+0x154>)
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	3301      	adds	r3, #1
 800695e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006960:	4a4d      	ldr	r2, [pc, #308]	@ (8006a98 <xTaskIncrementTick+0x154>)
 8006962:	693b      	ldr	r3, [r7, #16]
 8006964:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006966:	693b      	ldr	r3, [r7, #16]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d121      	bne.n	80069b0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800696c:	4b4b      	ldr	r3, [pc, #300]	@ (8006a9c <xTaskIncrementTick+0x158>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d00b      	beq.n	800698e <xTaskIncrementTick+0x4a>
	__asm volatile
 8006976:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800697a:	f383 8811 	msr	BASEPRI, r3
 800697e:	f3bf 8f6f 	isb	sy
 8006982:	f3bf 8f4f 	dsb	sy
 8006986:	603b      	str	r3, [r7, #0]
}
 8006988:	bf00      	nop
 800698a:	bf00      	nop
 800698c:	e7fd      	b.n	800698a <xTaskIncrementTick+0x46>
 800698e:	4b43      	ldr	r3, [pc, #268]	@ (8006a9c <xTaskIncrementTick+0x158>)
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	60fb      	str	r3, [r7, #12]
 8006994:	4b42      	ldr	r3, [pc, #264]	@ (8006aa0 <xTaskIncrementTick+0x15c>)
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4a40      	ldr	r2, [pc, #256]	@ (8006a9c <xTaskIncrementTick+0x158>)
 800699a:	6013      	str	r3, [r2, #0]
 800699c:	4a40      	ldr	r2, [pc, #256]	@ (8006aa0 <xTaskIncrementTick+0x15c>)
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	6013      	str	r3, [r2, #0]
 80069a2:	4b40      	ldr	r3, [pc, #256]	@ (8006aa4 <xTaskIncrementTick+0x160>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	3301      	adds	r3, #1
 80069a8:	4a3e      	ldr	r2, [pc, #248]	@ (8006aa4 <xTaskIncrementTick+0x160>)
 80069aa:	6013      	str	r3, [r2, #0]
 80069ac:	f000 f9fe 	bl	8006dac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80069b0:	4b3d      	ldr	r3, [pc, #244]	@ (8006aa8 <xTaskIncrementTick+0x164>)
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	693a      	ldr	r2, [r7, #16]
 80069b6:	429a      	cmp	r2, r3
 80069b8:	d34d      	bcc.n	8006a56 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80069ba:	4b38      	ldr	r3, [pc, #224]	@ (8006a9c <xTaskIncrementTick+0x158>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d101      	bne.n	80069c8 <xTaskIncrementTick+0x84>
 80069c4:	2301      	movs	r3, #1
 80069c6:	e000      	b.n	80069ca <xTaskIncrementTick+0x86>
 80069c8:	2300      	movs	r3, #0
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d004      	beq.n	80069d8 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80069ce:	4b36      	ldr	r3, [pc, #216]	@ (8006aa8 <xTaskIncrementTick+0x164>)
 80069d0:	f04f 32ff 	mov.w	r2, #4294967295
 80069d4:	601a      	str	r2, [r3, #0]
					break;
 80069d6:	e03e      	b.n	8006a56 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80069d8:	4b30      	ldr	r3, [pc, #192]	@ (8006a9c <xTaskIncrementTick+0x158>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	68db      	ldr	r3, [r3, #12]
 80069de:	68db      	ldr	r3, [r3, #12]
 80069e0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	685b      	ldr	r3, [r3, #4]
 80069e6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80069e8:	693a      	ldr	r2, [r7, #16]
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	429a      	cmp	r2, r3
 80069ee:	d203      	bcs.n	80069f8 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80069f0:	4a2d      	ldr	r2, [pc, #180]	@ (8006aa8 <xTaskIncrementTick+0x164>)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6013      	str	r3, [r2, #0]
						break;
 80069f6:	e02e      	b.n	8006a56 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	3304      	adds	r3, #4
 80069fc:	4618      	mov	r0, r3
 80069fe:	f7ff fa05 	bl	8005e0c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d004      	beq.n	8006a14 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	3318      	adds	r3, #24
 8006a0e:	4618      	mov	r0, r3
 8006a10:	f7ff f9fc 	bl	8005e0c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a18:	2201      	movs	r2, #1
 8006a1a:	409a      	lsls	r2, r3
 8006a1c:	4b23      	ldr	r3, [pc, #140]	@ (8006aac <xTaskIncrementTick+0x168>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4313      	orrs	r3, r2
 8006a22:	4a22      	ldr	r2, [pc, #136]	@ (8006aac <xTaskIncrementTick+0x168>)
 8006a24:	6013      	str	r3, [r2, #0]
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a2a:	4613      	mov	r3, r2
 8006a2c:	009b      	lsls	r3, r3, #2
 8006a2e:	4413      	add	r3, r2
 8006a30:	009b      	lsls	r3, r3, #2
 8006a32:	4a1f      	ldr	r2, [pc, #124]	@ (8006ab0 <xTaskIncrementTick+0x16c>)
 8006a34:	441a      	add	r2, r3
 8006a36:	68bb      	ldr	r3, [r7, #8]
 8006a38:	3304      	adds	r3, #4
 8006a3a:	4619      	mov	r1, r3
 8006a3c:	4610      	mov	r0, r2
 8006a3e:	f7ff f988 	bl	8005d52 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a46:	4b1b      	ldr	r3, [pc, #108]	@ (8006ab4 <xTaskIncrementTick+0x170>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a4c:	429a      	cmp	r2, r3
 8006a4e:	d3b4      	bcc.n	80069ba <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006a50:	2301      	movs	r3, #1
 8006a52:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006a54:	e7b1      	b.n	80069ba <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006a56:	4b17      	ldr	r3, [pc, #92]	@ (8006ab4 <xTaskIncrementTick+0x170>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a5c:	4914      	ldr	r1, [pc, #80]	@ (8006ab0 <xTaskIncrementTick+0x16c>)
 8006a5e:	4613      	mov	r3, r2
 8006a60:	009b      	lsls	r3, r3, #2
 8006a62:	4413      	add	r3, r2
 8006a64:	009b      	lsls	r3, r3, #2
 8006a66:	440b      	add	r3, r1
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	2b01      	cmp	r3, #1
 8006a6c:	d907      	bls.n	8006a7e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8006a6e:	2301      	movs	r3, #1
 8006a70:	617b      	str	r3, [r7, #20]
 8006a72:	e004      	b.n	8006a7e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006a74:	4b10      	ldr	r3, [pc, #64]	@ (8006ab8 <xTaskIncrementTick+0x174>)
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	3301      	adds	r3, #1
 8006a7a:	4a0f      	ldr	r2, [pc, #60]	@ (8006ab8 <xTaskIncrementTick+0x174>)
 8006a7c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006a7e:	4b0f      	ldr	r3, [pc, #60]	@ (8006abc <xTaskIncrementTick+0x178>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d001      	beq.n	8006a8a <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8006a86:	2301      	movs	r3, #1
 8006a88:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006a8a:	697b      	ldr	r3, [r7, #20]
}
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	3718      	adds	r7, #24
 8006a90:	46bd      	mov	sp, r7
 8006a92:	bd80      	pop	{r7, pc}
 8006a94:	20000670 	.word	0x20000670
 8006a98:	2000064c 	.word	0x2000064c
 8006a9c:	20000600 	.word	0x20000600
 8006aa0:	20000604 	.word	0x20000604
 8006aa4:	20000660 	.word	0x20000660
 8006aa8:	20000668 	.word	0x20000668
 8006aac:	20000650 	.word	0x20000650
 8006ab0:	2000054c 	.word	0x2000054c
 8006ab4:	20000548 	.word	0x20000548
 8006ab8:	20000658 	.word	0x20000658
 8006abc:	2000065c 	.word	0x2000065c

08006ac0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006ac0:	b480      	push	{r7}
 8006ac2:	b087      	sub	sp, #28
 8006ac4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006ac6:	4b27      	ldr	r3, [pc, #156]	@ (8006b64 <vTaskSwitchContext+0xa4>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d003      	beq.n	8006ad6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006ace:	4b26      	ldr	r3, [pc, #152]	@ (8006b68 <vTaskSwitchContext+0xa8>)
 8006ad0:	2201      	movs	r2, #1
 8006ad2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006ad4:	e040      	b.n	8006b58 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8006ad6:	4b24      	ldr	r3, [pc, #144]	@ (8006b68 <vTaskSwitchContext+0xa8>)
 8006ad8:	2200      	movs	r2, #0
 8006ada:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006adc:	4b23      	ldr	r3, [pc, #140]	@ (8006b6c <vTaskSwitchContext+0xac>)
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	fab3 f383 	clz	r3, r3
 8006ae8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006aea:	7afb      	ldrb	r3, [r7, #11]
 8006aec:	f1c3 031f 	rsb	r3, r3, #31
 8006af0:	617b      	str	r3, [r7, #20]
 8006af2:	491f      	ldr	r1, [pc, #124]	@ (8006b70 <vTaskSwitchContext+0xb0>)
 8006af4:	697a      	ldr	r2, [r7, #20]
 8006af6:	4613      	mov	r3, r2
 8006af8:	009b      	lsls	r3, r3, #2
 8006afa:	4413      	add	r3, r2
 8006afc:	009b      	lsls	r3, r3, #2
 8006afe:	440b      	add	r3, r1
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d10b      	bne.n	8006b1e <vTaskSwitchContext+0x5e>
	__asm volatile
 8006b06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b0a:	f383 8811 	msr	BASEPRI, r3
 8006b0e:	f3bf 8f6f 	isb	sy
 8006b12:	f3bf 8f4f 	dsb	sy
 8006b16:	607b      	str	r3, [r7, #4]
}
 8006b18:	bf00      	nop
 8006b1a:	bf00      	nop
 8006b1c:	e7fd      	b.n	8006b1a <vTaskSwitchContext+0x5a>
 8006b1e:	697a      	ldr	r2, [r7, #20]
 8006b20:	4613      	mov	r3, r2
 8006b22:	009b      	lsls	r3, r3, #2
 8006b24:	4413      	add	r3, r2
 8006b26:	009b      	lsls	r3, r3, #2
 8006b28:	4a11      	ldr	r2, [pc, #68]	@ (8006b70 <vTaskSwitchContext+0xb0>)
 8006b2a:	4413      	add	r3, r2
 8006b2c:	613b      	str	r3, [r7, #16]
 8006b2e:	693b      	ldr	r3, [r7, #16]
 8006b30:	685b      	ldr	r3, [r3, #4]
 8006b32:	685a      	ldr	r2, [r3, #4]
 8006b34:	693b      	ldr	r3, [r7, #16]
 8006b36:	605a      	str	r2, [r3, #4]
 8006b38:	693b      	ldr	r3, [r7, #16]
 8006b3a:	685a      	ldr	r2, [r3, #4]
 8006b3c:	693b      	ldr	r3, [r7, #16]
 8006b3e:	3308      	adds	r3, #8
 8006b40:	429a      	cmp	r2, r3
 8006b42:	d104      	bne.n	8006b4e <vTaskSwitchContext+0x8e>
 8006b44:	693b      	ldr	r3, [r7, #16]
 8006b46:	685b      	ldr	r3, [r3, #4]
 8006b48:	685a      	ldr	r2, [r3, #4]
 8006b4a:	693b      	ldr	r3, [r7, #16]
 8006b4c:	605a      	str	r2, [r3, #4]
 8006b4e:	693b      	ldr	r3, [r7, #16]
 8006b50:	685b      	ldr	r3, [r3, #4]
 8006b52:	68db      	ldr	r3, [r3, #12]
 8006b54:	4a07      	ldr	r2, [pc, #28]	@ (8006b74 <vTaskSwitchContext+0xb4>)
 8006b56:	6013      	str	r3, [r2, #0]
}
 8006b58:	bf00      	nop
 8006b5a:	371c      	adds	r7, #28
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b62:	4770      	bx	lr
 8006b64:	20000670 	.word	0x20000670
 8006b68:	2000065c 	.word	0x2000065c
 8006b6c:	20000650 	.word	0x20000650
 8006b70:	2000054c 	.word	0x2000054c
 8006b74:	20000548 	.word	0x20000548

08006b78 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b086      	sub	sp, #24
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	68db      	ldr	r3, [r3, #12]
 8006b84:	68db      	ldr	r3, [r3, #12]
 8006b86:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006b88:	693b      	ldr	r3, [r7, #16]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d10b      	bne.n	8006ba6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8006b8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b92:	f383 8811 	msr	BASEPRI, r3
 8006b96:	f3bf 8f6f 	isb	sy
 8006b9a:	f3bf 8f4f 	dsb	sy
 8006b9e:	60fb      	str	r3, [r7, #12]
}
 8006ba0:	bf00      	nop
 8006ba2:	bf00      	nop
 8006ba4:	e7fd      	b.n	8006ba2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006ba6:	693b      	ldr	r3, [r7, #16]
 8006ba8:	3318      	adds	r3, #24
 8006baa:	4618      	mov	r0, r3
 8006bac:	f7ff f92e 	bl	8005e0c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006bb0:	4b1d      	ldr	r3, [pc, #116]	@ (8006c28 <xTaskRemoveFromEventList+0xb0>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d11c      	bne.n	8006bf2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006bb8:	693b      	ldr	r3, [r7, #16]
 8006bba:	3304      	adds	r3, #4
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	f7ff f925 	bl	8005e0c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006bc2:	693b      	ldr	r3, [r7, #16]
 8006bc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	409a      	lsls	r2, r3
 8006bca:	4b18      	ldr	r3, [pc, #96]	@ (8006c2c <xTaskRemoveFromEventList+0xb4>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	4313      	orrs	r3, r2
 8006bd0:	4a16      	ldr	r2, [pc, #88]	@ (8006c2c <xTaskRemoveFromEventList+0xb4>)
 8006bd2:	6013      	str	r3, [r2, #0]
 8006bd4:	693b      	ldr	r3, [r7, #16]
 8006bd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006bd8:	4613      	mov	r3, r2
 8006bda:	009b      	lsls	r3, r3, #2
 8006bdc:	4413      	add	r3, r2
 8006bde:	009b      	lsls	r3, r3, #2
 8006be0:	4a13      	ldr	r2, [pc, #76]	@ (8006c30 <xTaskRemoveFromEventList+0xb8>)
 8006be2:	441a      	add	r2, r3
 8006be4:	693b      	ldr	r3, [r7, #16]
 8006be6:	3304      	adds	r3, #4
 8006be8:	4619      	mov	r1, r3
 8006bea:	4610      	mov	r0, r2
 8006bec:	f7ff f8b1 	bl	8005d52 <vListInsertEnd>
 8006bf0:	e005      	b.n	8006bfe <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006bf2:	693b      	ldr	r3, [r7, #16]
 8006bf4:	3318      	adds	r3, #24
 8006bf6:	4619      	mov	r1, r3
 8006bf8:	480e      	ldr	r0, [pc, #56]	@ (8006c34 <xTaskRemoveFromEventList+0xbc>)
 8006bfa:	f7ff f8aa 	bl	8005d52 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006bfe:	693b      	ldr	r3, [r7, #16]
 8006c00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c02:	4b0d      	ldr	r3, [pc, #52]	@ (8006c38 <xTaskRemoveFromEventList+0xc0>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c08:	429a      	cmp	r2, r3
 8006c0a:	d905      	bls.n	8006c18 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006c10:	4b0a      	ldr	r3, [pc, #40]	@ (8006c3c <xTaskRemoveFromEventList+0xc4>)
 8006c12:	2201      	movs	r2, #1
 8006c14:	601a      	str	r2, [r3, #0]
 8006c16:	e001      	b.n	8006c1c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006c18:	2300      	movs	r3, #0
 8006c1a:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8006c1c:	697b      	ldr	r3, [r7, #20]
}
 8006c1e:	4618      	mov	r0, r3
 8006c20:	3718      	adds	r7, #24
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bd80      	pop	{r7, pc}
 8006c26:	bf00      	nop
 8006c28:	20000670 	.word	0x20000670
 8006c2c:	20000650 	.word	0x20000650
 8006c30:	2000054c 	.word	0x2000054c
 8006c34:	20000608 	.word	0x20000608
 8006c38:	20000548 	.word	0x20000548
 8006c3c:	2000065c 	.word	0x2000065c

08006c40 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b082      	sub	sp, #8
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006c48:	f000 f852 	bl	8006cf0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006c4c:	4b06      	ldr	r3, [pc, #24]	@ (8006c68 <prvIdleTask+0x28>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	2b01      	cmp	r3, #1
 8006c52:	d9f9      	bls.n	8006c48 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006c54:	4b05      	ldr	r3, [pc, #20]	@ (8006c6c <prvIdleTask+0x2c>)
 8006c56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c5a:	601a      	str	r2, [r3, #0]
 8006c5c:	f3bf 8f4f 	dsb	sy
 8006c60:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006c64:	e7f0      	b.n	8006c48 <prvIdleTask+0x8>
 8006c66:	bf00      	nop
 8006c68:	2000054c 	.word	0x2000054c
 8006c6c:	e000ed04 	.word	0xe000ed04

08006c70 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b082      	sub	sp, #8
 8006c74:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006c76:	2300      	movs	r3, #0
 8006c78:	607b      	str	r3, [r7, #4]
 8006c7a:	e00c      	b.n	8006c96 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006c7c:	687a      	ldr	r2, [r7, #4]
 8006c7e:	4613      	mov	r3, r2
 8006c80:	009b      	lsls	r3, r3, #2
 8006c82:	4413      	add	r3, r2
 8006c84:	009b      	lsls	r3, r3, #2
 8006c86:	4a12      	ldr	r2, [pc, #72]	@ (8006cd0 <prvInitialiseTaskLists+0x60>)
 8006c88:	4413      	add	r3, r2
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	f7ff f834 	bl	8005cf8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	3301      	adds	r3, #1
 8006c94:	607b      	str	r3, [r7, #4]
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2b06      	cmp	r3, #6
 8006c9a:	d9ef      	bls.n	8006c7c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006c9c:	480d      	ldr	r0, [pc, #52]	@ (8006cd4 <prvInitialiseTaskLists+0x64>)
 8006c9e:	f7ff f82b 	bl	8005cf8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006ca2:	480d      	ldr	r0, [pc, #52]	@ (8006cd8 <prvInitialiseTaskLists+0x68>)
 8006ca4:	f7ff f828 	bl	8005cf8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006ca8:	480c      	ldr	r0, [pc, #48]	@ (8006cdc <prvInitialiseTaskLists+0x6c>)
 8006caa:	f7ff f825 	bl	8005cf8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006cae:	480c      	ldr	r0, [pc, #48]	@ (8006ce0 <prvInitialiseTaskLists+0x70>)
 8006cb0:	f7ff f822 	bl	8005cf8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006cb4:	480b      	ldr	r0, [pc, #44]	@ (8006ce4 <prvInitialiseTaskLists+0x74>)
 8006cb6:	f7ff f81f 	bl	8005cf8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006cba:	4b0b      	ldr	r3, [pc, #44]	@ (8006ce8 <prvInitialiseTaskLists+0x78>)
 8006cbc:	4a05      	ldr	r2, [pc, #20]	@ (8006cd4 <prvInitialiseTaskLists+0x64>)
 8006cbe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006cc0:	4b0a      	ldr	r3, [pc, #40]	@ (8006cec <prvInitialiseTaskLists+0x7c>)
 8006cc2:	4a05      	ldr	r2, [pc, #20]	@ (8006cd8 <prvInitialiseTaskLists+0x68>)
 8006cc4:	601a      	str	r2, [r3, #0]
}
 8006cc6:	bf00      	nop
 8006cc8:	3708      	adds	r7, #8
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}
 8006cce:	bf00      	nop
 8006cd0:	2000054c 	.word	0x2000054c
 8006cd4:	200005d8 	.word	0x200005d8
 8006cd8:	200005ec 	.word	0x200005ec
 8006cdc:	20000608 	.word	0x20000608
 8006ce0:	2000061c 	.word	0x2000061c
 8006ce4:	20000634 	.word	0x20000634
 8006ce8:	20000600 	.word	0x20000600
 8006cec:	20000604 	.word	0x20000604

08006cf0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b082      	sub	sp, #8
 8006cf4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006cf6:	e019      	b.n	8006d2c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006cf8:	f000 fa9e 	bl	8007238 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006cfc:	4b10      	ldr	r3, [pc, #64]	@ (8006d40 <prvCheckTasksWaitingTermination+0x50>)
 8006cfe:	68db      	ldr	r3, [r3, #12]
 8006d00:	68db      	ldr	r3, [r3, #12]
 8006d02:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	3304      	adds	r3, #4
 8006d08:	4618      	mov	r0, r3
 8006d0a:	f7ff f87f 	bl	8005e0c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006d0e:	4b0d      	ldr	r3, [pc, #52]	@ (8006d44 <prvCheckTasksWaitingTermination+0x54>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	3b01      	subs	r3, #1
 8006d14:	4a0b      	ldr	r2, [pc, #44]	@ (8006d44 <prvCheckTasksWaitingTermination+0x54>)
 8006d16:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006d18:	4b0b      	ldr	r3, [pc, #44]	@ (8006d48 <prvCheckTasksWaitingTermination+0x58>)
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	3b01      	subs	r3, #1
 8006d1e:	4a0a      	ldr	r2, [pc, #40]	@ (8006d48 <prvCheckTasksWaitingTermination+0x58>)
 8006d20:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006d22:	f000 fabb 	bl	800729c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	f000 f810 	bl	8006d4c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006d2c:	4b06      	ldr	r3, [pc, #24]	@ (8006d48 <prvCheckTasksWaitingTermination+0x58>)
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d1e1      	bne.n	8006cf8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006d34:	bf00      	nop
 8006d36:	bf00      	nop
 8006d38:	3708      	adds	r7, #8
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bd80      	pop	{r7, pc}
 8006d3e:	bf00      	nop
 8006d40:	2000061c 	.word	0x2000061c
 8006d44:	20000648 	.word	0x20000648
 8006d48:	20000630 	.word	0x20000630

08006d4c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b084      	sub	sp, #16
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d108      	bne.n	8006d70 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d62:	4618      	mov	r0, r3
 8006d64:	f000 fc52 	bl	800760c <vPortFree>
				vPortFree( pxTCB );
 8006d68:	6878      	ldr	r0, [r7, #4]
 8006d6a:	f000 fc4f 	bl	800760c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006d6e:	e019      	b.n	8006da4 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006d76:	2b01      	cmp	r3, #1
 8006d78:	d103      	bne.n	8006d82 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	f000 fc46 	bl	800760c <vPortFree>
	}
 8006d80:	e010      	b.n	8006da4 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006d88:	2b02      	cmp	r3, #2
 8006d8a:	d00b      	beq.n	8006da4 <prvDeleteTCB+0x58>
	__asm volatile
 8006d8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d90:	f383 8811 	msr	BASEPRI, r3
 8006d94:	f3bf 8f6f 	isb	sy
 8006d98:	f3bf 8f4f 	dsb	sy
 8006d9c:	60fb      	str	r3, [r7, #12]
}
 8006d9e:	bf00      	nop
 8006da0:	bf00      	nop
 8006da2:	e7fd      	b.n	8006da0 <prvDeleteTCB+0x54>
	}
 8006da4:	bf00      	nop
 8006da6:	3710      	adds	r7, #16
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bd80      	pop	{r7, pc}

08006dac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006dac:	b480      	push	{r7}
 8006dae:	b083      	sub	sp, #12
 8006db0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006db2:	4b0f      	ldr	r3, [pc, #60]	@ (8006df0 <prvResetNextTaskUnblockTime+0x44>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d101      	bne.n	8006dc0 <prvResetNextTaskUnblockTime+0x14>
 8006dbc:	2301      	movs	r3, #1
 8006dbe:	e000      	b.n	8006dc2 <prvResetNextTaskUnblockTime+0x16>
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d004      	beq.n	8006dd0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006dc6:	4b0b      	ldr	r3, [pc, #44]	@ (8006df4 <prvResetNextTaskUnblockTime+0x48>)
 8006dc8:	f04f 32ff 	mov.w	r2, #4294967295
 8006dcc:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006dce:	e008      	b.n	8006de2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006dd0:	4b07      	ldr	r3, [pc, #28]	@ (8006df0 <prvResetNextTaskUnblockTime+0x44>)
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	68db      	ldr	r3, [r3, #12]
 8006dd6:	68db      	ldr	r3, [r3, #12]
 8006dd8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	685b      	ldr	r3, [r3, #4]
 8006dde:	4a05      	ldr	r2, [pc, #20]	@ (8006df4 <prvResetNextTaskUnblockTime+0x48>)
 8006de0:	6013      	str	r3, [r2, #0]
}
 8006de2:	bf00      	nop
 8006de4:	370c      	adds	r7, #12
 8006de6:	46bd      	mov	sp, r7
 8006de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dec:	4770      	bx	lr
 8006dee:	bf00      	nop
 8006df0:	20000600 	.word	0x20000600
 8006df4:	20000668 	.word	0x20000668

08006df8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b086      	sub	sp, #24
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006e04:	2300      	movs	r3, #0
 8006e06:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d070      	beq.n	8006ef0 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006e0e:	4b3b      	ldr	r3, [pc, #236]	@ (8006efc <xTaskPriorityDisinherit+0x104>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	693a      	ldr	r2, [r7, #16]
 8006e14:	429a      	cmp	r2, r3
 8006e16:	d00b      	beq.n	8006e30 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006e18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e1c:	f383 8811 	msr	BASEPRI, r3
 8006e20:	f3bf 8f6f 	isb	sy
 8006e24:	f3bf 8f4f 	dsb	sy
 8006e28:	60fb      	str	r3, [r7, #12]
}
 8006e2a:	bf00      	nop
 8006e2c:	bf00      	nop
 8006e2e:	e7fd      	b.n	8006e2c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006e30:	693b      	ldr	r3, [r7, #16]
 8006e32:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d10b      	bne.n	8006e50 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006e38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e3c:	f383 8811 	msr	BASEPRI, r3
 8006e40:	f3bf 8f6f 	isb	sy
 8006e44:	f3bf 8f4f 	dsb	sy
 8006e48:	60bb      	str	r3, [r7, #8]
}
 8006e4a:	bf00      	nop
 8006e4c:	bf00      	nop
 8006e4e:	e7fd      	b.n	8006e4c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006e50:	693b      	ldr	r3, [r7, #16]
 8006e52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006e54:	1e5a      	subs	r2, r3, #1
 8006e56:	693b      	ldr	r3, [r7, #16]
 8006e58:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006e5a:	693b      	ldr	r3, [r7, #16]
 8006e5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e5e:	693b      	ldr	r3, [r7, #16]
 8006e60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e62:	429a      	cmp	r2, r3
 8006e64:	d044      	beq.n	8006ef0 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006e66:	693b      	ldr	r3, [r7, #16]
 8006e68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d140      	bne.n	8006ef0 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006e6e:	693b      	ldr	r3, [r7, #16]
 8006e70:	3304      	adds	r3, #4
 8006e72:	4618      	mov	r0, r3
 8006e74:	f7fe ffca 	bl	8005e0c <uxListRemove>
 8006e78:	4603      	mov	r3, r0
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d115      	bne.n	8006eaa <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006e7e:	693b      	ldr	r3, [r7, #16]
 8006e80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e82:	491f      	ldr	r1, [pc, #124]	@ (8006f00 <xTaskPriorityDisinherit+0x108>)
 8006e84:	4613      	mov	r3, r2
 8006e86:	009b      	lsls	r3, r3, #2
 8006e88:	4413      	add	r3, r2
 8006e8a:	009b      	lsls	r3, r3, #2
 8006e8c:	440b      	add	r3, r1
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d10a      	bne.n	8006eaa <xTaskPriorityDisinherit+0xb2>
 8006e94:	693b      	ldr	r3, [r7, #16]
 8006e96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e98:	2201      	movs	r2, #1
 8006e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8006e9e:	43da      	mvns	r2, r3
 8006ea0:	4b18      	ldr	r3, [pc, #96]	@ (8006f04 <xTaskPriorityDisinherit+0x10c>)
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	4013      	ands	r3, r2
 8006ea6:	4a17      	ldr	r2, [pc, #92]	@ (8006f04 <xTaskPriorityDisinherit+0x10c>)
 8006ea8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006eaa:	693b      	ldr	r3, [r7, #16]
 8006eac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006eae:	693b      	ldr	r3, [r7, #16]
 8006eb0:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006eb2:	693b      	ldr	r3, [r7, #16]
 8006eb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006eb6:	f1c3 0207 	rsb	r2, r3, #7
 8006eba:	693b      	ldr	r3, [r7, #16]
 8006ebc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006ebe:	693b      	ldr	r3, [r7, #16]
 8006ec0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ec2:	2201      	movs	r2, #1
 8006ec4:	409a      	lsls	r2, r3
 8006ec6:	4b0f      	ldr	r3, [pc, #60]	@ (8006f04 <xTaskPriorityDisinherit+0x10c>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	4313      	orrs	r3, r2
 8006ecc:	4a0d      	ldr	r2, [pc, #52]	@ (8006f04 <xTaskPriorityDisinherit+0x10c>)
 8006ece:	6013      	str	r3, [r2, #0]
 8006ed0:	693b      	ldr	r3, [r7, #16]
 8006ed2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ed4:	4613      	mov	r3, r2
 8006ed6:	009b      	lsls	r3, r3, #2
 8006ed8:	4413      	add	r3, r2
 8006eda:	009b      	lsls	r3, r3, #2
 8006edc:	4a08      	ldr	r2, [pc, #32]	@ (8006f00 <xTaskPriorityDisinherit+0x108>)
 8006ede:	441a      	add	r2, r3
 8006ee0:	693b      	ldr	r3, [r7, #16]
 8006ee2:	3304      	adds	r3, #4
 8006ee4:	4619      	mov	r1, r3
 8006ee6:	4610      	mov	r0, r2
 8006ee8:	f7fe ff33 	bl	8005d52 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006eec:	2301      	movs	r3, #1
 8006eee:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006ef0:	697b      	ldr	r3, [r7, #20]
	}
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	3718      	adds	r7, #24
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bd80      	pop	{r7, pc}
 8006efa:	bf00      	nop
 8006efc:	20000548 	.word	0x20000548
 8006f00:	2000054c 	.word	0x2000054c
 8006f04:	20000650 	.word	0x20000650

08006f08 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b084      	sub	sp, #16
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
 8006f10:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006f12:	4b29      	ldr	r3, [pc, #164]	@ (8006fb8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006f18:	4b28      	ldr	r3, [pc, #160]	@ (8006fbc <prvAddCurrentTaskToDelayedList+0xb4>)
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	3304      	adds	r3, #4
 8006f1e:	4618      	mov	r0, r3
 8006f20:	f7fe ff74 	bl	8005e0c <uxListRemove>
 8006f24:	4603      	mov	r3, r0
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d10b      	bne.n	8006f42 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8006f2a:	4b24      	ldr	r3, [pc, #144]	@ (8006fbc <prvAddCurrentTaskToDelayedList+0xb4>)
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f30:	2201      	movs	r2, #1
 8006f32:	fa02 f303 	lsl.w	r3, r2, r3
 8006f36:	43da      	mvns	r2, r3
 8006f38:	4b21      	ldr	r3, [pc, #132]	@ (8006fc0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	4013      	ands	r3, r2
 8006f3e:	4a20      	ldr	r2, [pc, #128]	@ (8006fc0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006f40:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f48:	d10a      	bne.n	8006f60 <prvAddCurrentTaskToDelayedList+0x58>
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d007      	beq.n	8006f60 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f50:	4b1a      	ldr	r3, [pc, #104]	@ (8006fbc <prvAddCurrentTaskToDelayedList+0xb4>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	3304      	adds	r3, #4
 8006f56:	4619      	mov	r1, r3
 8006f58:	481a      	ldr	r0, [pc, #104]	@ (8006fc4 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006f5a:	f7fe fefa 	bl	8005d52 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006f5e:	e026      	b.n	8006fae <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006f60:	68fa      	ldr	r2, [r7, #12]
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	4413      	add	r3, r2
 8006f66:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006f68:	4b14      	ldr	r3, [pc, #80]	@ (8006fbc <prvAddCurrentTaskToDelayedList+0xb4>)
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	68ba      	ldr	r2, [r7, #8]
 8006f6e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006f70:	68ba      	ldr	r2, [r7, #8]
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	429a      	cmp	r2, r3
 8006f76:	d209      	bcs.n	8006f8c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f78:	4b13      	ldr	r3, [pc, #76]	@ (8006fc8 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006f7a:	681a      	ldr	r2, [r3, #0]
 8006f7c:	4b0f      	ldr	r3, [pc, #60]	@ (8006fbc <prvAddCurrentTaskToDelayedList+0xb4>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	3304      	adds	r3, #4
 8006f82:	4619      	mov	r1, r3
 8006f84:	4610      	mov	r0, r2
 8006f86:	f7fe ff08 	bl	8005d9a <vListInsert>
}
 8006f8a:	e010      	b.n	8006fae <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f8c:	4b0f      	ldr	r3, [pc, #60]	@ (8006fcc <prvAddCurrentTaskToDelayedList+0xc4>)
 8006f8e:	681a      	ldr	r2, [r3, #0]
 8006f90:	4b0a      	ldr	r3, [pc, #40]	@ (8006fbc <prvAddCurrentTaskToDelayedList+0xb4>)
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	3304      	adds	r3, #4
 8006f96:	4619      	mov	r1, r3
 8006f98:	4610      	mov	r0, r2
 8006f9a:	f7fe fefe 	bl	8005d9a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006f9e:	4b0c      	ldr	r3, [pc, #48]	@ (8006fd0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	68ba      	ldr	r2, [r7, #8]
 8006fa4:	429a      	cmp	r2, r3
 8006fa6:	d202      	bcs.n	8006fae <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006fa8:	4a09      	ldr	r2, [pc, #36]	@ (8006fd0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006faa:	68bb      	ldr	r3, [r7, #8]
 8006fac:	6013      	str	r3, [r2, #0]
}
 8006fae:	bf00      	nop
 8006fb0:	3710      	adds	r7, #16
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bd80      	pop	{r7, pc}
 8006fb6:	bf00      	nop
 8006fb8:	2000064c 	.word	0x2000064c
 8006fbc:	20000548 	.word	0x20000548
 8006fc0:	20000650 	.word	0x20000650
 8006fc4:	20000634 	.word	0x20000634
 8006fc8:	20000604 	.word	0x20000604
 8006fcc:	20000600 	.word	0x20000600
 8006fd0:	20000668 	.word	0x20000668

08006fd4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006fd4:	b480      	push	{r7}
 8006fd6:	b085      	sub	sp, #20
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	60f8      	str	r0, [r7, #12]
 8006fdc:	60b9      	str	r1, [r7, #8]
 8006fde:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	3b04      	subs	r3, #4
 8006fe4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006fec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	3b04      	subs	r3, #4
 8006ff2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	f023 0201 	bic.w	r2, r3, #1
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	3b04      	subs	r3, #4
 8007002:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007004:	4a0c      	ldr	r2, [pc, #48]	@ (8007038 <pxPortInitialiseStack+0x64>)
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	3b14      	subs	r3, #20
 800700e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007010:	687a      	ldr	r2, [r7, #4]
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	3b04      	subs	r3, #4
 800701a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	f06f 0202 	mvn.w	r2, #2
 8007022:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	3b20      	subs	r3, #32
 8007028:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800702a:	68fb      	ldr	r3, [r7, #12]
}
 800702c:	4618      	mov	r0, r3
 800702e:	3714      	adds	r7, #20
 8007030:	46bd      	mov	sp, r7
 8007032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007036:	4770      	bx	lr
 8007038:	0800703d 	.word	0x0800703d

0800703c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800703c:	b480      	push	{r7}
 800703e:	b085      	sub	sp, #20
 8007040:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007042:	2300      	movs	r3, #0
 8007044:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007046:	4b13      	ldr	r3, [pc, #76]	@ (8007094 <prvTaskExitError+0x58>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800704e:	d00b      	beq.n	8007068 <prvTaskExitError+0x2c>
	__asm volatile
 8007050:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007054:	f383 8811 	msr	BASEPRI, r3
 8007058:	f3bf 8f6f 	isb	sy
 800705c:	f3bf 8f4f 	dsb	sy
 8007060:	60fb      	str	r3, [r7, #12]
}
 8007062:	bf00      	nop
 8007064:	bf00      	nop
 8007066:	e7fd      	b.n	8007064 <prvTaskExitError+0x28>
	__asm volatile
 8007068:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800706c:	f383 8811 	msr	BASEPRI, r3
 8007070:	f3bf 8f6f 	isb	sy
 8007074:	f3bf 8f4f 	dsb	sy
 8007078:	60bb      	str	r3, [r7, #8]
}
 800707a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800707c:	bf00      	nop
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d0fc      	beq.n	800707e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007084:	bf00      	nop
 8007086:	bf00      	nop
 8007088:	3714      	adds	r7, #20
 800708a:	46bd      	mov	sp, r7
 800708c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007090:	4770      	bx	lr
 8007092:	bf00      	nop
 8007094:	20000010 	.word	0x20000010
	...

080070a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80070a0:	4b07      	ldr	r3, [pc, #28]	@ (80070c0 <pxCurrentTCBConst2>)
 80070a2:	6819      	ldr	r1, [r3, #0]
 80070a4:	6808      	ldr	r0, [r1, #0]
 80070a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070aa:	f380 8809 	msr	PSP, r0
 80070ae:	f3bf 8f6f 	isb	sy
 80070b2:	f04f 0000 	mov.w	r0, #0
 80070b6:	f380 8811 	msr	BASEPRI, r0
 80070ba:	4770      	bx	lr
 80070bc:	f3af 8000 	nop.w

080070c0 <pxCurrentTCBConst2>:
 80070c0:	20000548 	.word	0x20000548
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80070c4:	bf00      	nop
 80070c6:	bf00      	nop

080070c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80070c8:	4808      	ldr	r0, [pc, #32]	@ (80070ec <prvPortStartFirstTask+0x24>)
 80070ca:	6800      	ldr	r0, [r0, #0]
 80070cc:	6800      	ldr	r0, [r0, #0]
 80070ce:	f380 8808 	msr	MSP, r0
 80070d2:	f04f 0000 	mov.w	r0, #0
 80070d6:	f380 8814 	msr	CONTROL, r0
 80070da:	b662      	cpsie	i
 80070dc:	b661      	cpsie	f
 80070de:	f3bf 8f4f 	dsb	sy
 80070e2:	f3bf 8f6f 	isb	sy
 80070e6:	df00      	svc	0
 80070e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80070ea:	bf00      	nop
 80070ec:	e000ed08 	.word	0xe000ed08

080070f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b086      	sub	sp, #24
 80070f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80070f6:	4b47      	ldr	r3, [pc, #284]	@ (8007214 <xPortStartScheduler+0x124>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	4a47      	ldr	r2, [pc, #284]	@ (8007218 <xPortStartScheduler+0x128>)
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d10b      	bne.n	8007118 <xPortStartScheduler+0x28>
	__asm volatile
 8007100:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007104:	f383 8811 	msr	BASEPRI, r3
 8007108:	f3bf 8f6f 	isb	sy
 800710c:	f3bf 8f4f 	dsb	sy
 8007110:	613b      	str	r3, [r7, #16]
}
 8007112:	bf00      	nop
 8007114:	bf00      	nop
 8007116:	e7fd      	b.n	8007114 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007118:	4b3e      	ldr	r3, [pc, #248]	@ (8007214 <xPortStartScheduler+0x124>)
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	4a3f      	ldr	r2, [pc, #252]	@ (800721c <xPortStartScheduler+0x12c>)
 800711e:	4293      	cmp	r3, r2
 8007120:	d10b      	bne.n	800713a <xPortStartScheduler+0x4a>
	__asm volatile
 8007122:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007126:	f383 8811 	msr	BASEPRI, r3
 800712a:	f3bf 8f6f 	isb	sy
 800712e:	f3bf 8f4f 	dsb	sy
 8007132:	60fb      	str	r3, [r7, #12]
}
 8007134:	bf00      	nop
 8007136:	bf00      	nop
 8007138:	e7fd      	b.n	8007136 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800713a:	4b39      	ldr	r3, [pc, #228]	@ (8007220 <xPortStartScheduler+0x130>)
 800713c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800713e:	697b      	ldr	r3, [r7, #20]
 8007140:	781b      	ldrb	r3, [r3, #0]
 8007142:	b2db      	uxtb	r3, r3
 8007144:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007146:	697b      	ldr	r3, [r7, #20]
 8007148:	22ff      	movs	r2, #255	@ 0xff
 800714a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800714c:	697b      	ldr	r3, [r7, #20]
 800714e:	781b      	ldrb	r3, [r3, #0]
 8007150:	b2db      	uxtb	r3, r3
 8007152:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007154:	78fb      	ldrb	r3, [r7, #3]
 8007156:	b2db      	uxtb	r3, r3
 8007158:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800715c:	b2da      	uxtb	r2, r3
 800715e:	4b31      	ldr	r3, [pc, #196]	@ (8007224 <xPortStartScheduler+0x134>)
 8007160:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007162:	4b31      	ldr	r3, [pc, #196]	@ (8007228 <xPortStartScheduler+0x138>)
 8007164:	2207      	movs	r2, #7
 8007166:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007168:	e009      	b.n	800717e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800716a:	4b2f      	ldr	r3, [pc, #188]	@ (8007228 <xPortStartScheduler+0x138>)
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	3b01      	subs	r3, #1
 8007170:	4a2d      	ldr	r2, [pc, #180]	@ (8007228 <xPortStartScheduler+0x138>)
 8007172:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007174:	78fb      	ldrb	r3, [r7, #3]
 8007176:	b2db      	uxtb	r3, r3
 8007178:	005b      	lsls	r3, r3, #1
 800717a:	b2db      	uxtb	r3, r3
 800717c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800717e:	78fb      	ldrb	r3, [r7, #3]
 8007180:	b2db      	uxtb	r3, r3
 8007182:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007186:	2b80      	cmp	r3, #128	@ 0x80
 8007188:	d0ef      	beq.n	800716a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800718a:	4b27      	ldr	r3, [pc, #156]	@ (8007228 <xPortStartScheduler+0x138>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f1c3 0307 	rsb	r3, r3, #7
 8007192:	2b04      	cmp	r3, #4
 8007194:	d00b      	beq.n	80071ae <xPortStartScheduler+0xbe>
	__asm volatile
 8007196:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800719a:	f383 8811 	msr	BASEPRI, r3
 800719e:	f3bf 8f6f 	isb	sy
 80071a2:	f3bf 8f4f 	dsb	sy
 80071a6:	60bb      	str	r3, [r7, #8]
}
 80071a8:	bf00      	nop
 80071aa:	bf00      	nop
 80071ac:	e7fd      	b.n	80071aa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80071ae:	4b1e      	ldr	r3, [pc, #120]	@ (8007228 <xPortStartScheduler+0x138>)
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	021b      	lsls	r3, r3, #8
 80071b4:	4a1c      	ldr	r2, [pc, #112]	@ (8007228 <xPortStartScheduler+0x138>)
 80071b6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80071b8:	4b1b      	ldr	r3, [pc, #108]	@ (8007228 <xPortStartScheduler+0x138>)
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80071c0:	4a19      	ldr	r2, [pc, #100]	@ (8007228 <xPortStartScheduler+0x138>)
 80071c2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	b2da      	uxtb	r2, r3
 80071c8:	697b      	ldr	r3, [r7, #20]
 80071ca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80071cc:	4b17      	ldr	r3, [pc, #92]	@ (800722c <xPortStartScheduler+0x13c>)
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	4a16      	ldr	r2, [pc, #88]	@ (800722c <xPortStartScheduler+0x13c>)
 80071d2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80071d6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80071d8:	4b14      	ldr	r3, [pc, #80]	@ (800722c <xPortStartScheduler+0x13c>)
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	4a13      	ldr	r2, [pc, #76]	@ (800722c <xPortStartScheduler+0x13c>)
 80071de:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80071e2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80071e4:	f000 f8da 	bl	800739c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80071e8:	4b11      	ldr	r3, [pc, #68]	@ (8007230 <xPortStartScheduler+0x140>)
 80071ea:	2200      	movs	r2, #0
 80071ec:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80071ee:	f000 f8f9 	bl	80073e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80071f2:	4b10      	ldr	r3, [pc, #64]	@ (8007234 <xPortStartScheduler+0x144>)
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	4a0f      	ldr	r2, [pc, #60]	@ (8007234 <xPortStartScheduler+0x144>)
 80071f8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80071fc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80071fe:	f7ff ff63 	bl	80070c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007202:	f7ff fc5d 	bl	8006ac0 <vTaskSwitchContext>
	prvTaskExitError();
 8007206:	f7ff ff19 	bl	800703c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800720a:	2300      	movs	r3, #0
}
 800720c:	4618      	mov	r0, r3
 800720e:	3718      	adds	r7, #24
 8007210:	46bd      	mov	sp, r7
 8007212:	bd80      	pop	{r7, pc}
 8007214:	e000ed00 	.word	0xe000ed00
 8007218:	410fc271 	.word	0x410fc271
 800721c:	410fc270 	.word	0x410fc270
 8007220:	e000e400 	.word	0xe000e400
 8007224:	20000674 	.word	0x20000674
 8007228:	20000678 	.word	0x20000678
 800722c:	e000ed20 	.word	0xe000ed20
 8007230:	20000010 	.word	0x20000010
 8007234:	e000ef34 	.word	0xe000ef34

08007238 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007238:	b480      	push	{r7}
 800723a:	b083      	sub	sp, #12
 800723c:	af00      	add	r7, sp, #0
	__asm volatile
 800723e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007242:	f383 8811 	msr	BASEPRI, r3
 8007246:	f3bf 8f6f 	isb	sy
 800724a:	f3bf 8f4f 	dsb	sy
 800724e:	607b      	str	r3, [r7, #4]
}
 8007250:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007252:	4b10      	ldr	r3, [pc, #64]	@ (8007294 <vPortEnterCritical+0x5c>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	3301      	adds	r3, #1
 8007258:	4a0e      	ldr	r2, [pc, #56]	@ (8007294 <vPortEnterCritical+0x5c>)
 800725a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800725c:	4b0d      	ldr	r3, [pc, #52]	@ (8007294 <vPortEnterCritical+0x5c>)
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	2b01      	cmp	r3, #1
 8007262:	d110      	bne.n	8007286 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007264:	4b0c      	ldr	r3, [pc, #48]	@ (8007298 <vPortEnterCritical+0x60>)
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	b2db      	uxtb	r3, r3
 800726a:	2b00      	cmp	r3, #0
 800726c:	d00b      	beq.n	8007286 <vPortEnterCritical+0x4e>
	__asm volatile
 800726e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007272:	f383 8811 	msr	BASEPRI, r3
 8007276:	f3bf 8f6f 	isb	sy
 800727a:	f3bf 8f4f 	dsb	sy
 800727e:	603b      	str	r3, [r7, #0]
}
 8007280:	bf00      	nop
 8007282:	bf00      	nop
 8007284:	e7fd      	b.n	8007282 <vPortEnterCritical+0x4a>
	}
}
 8007286:	bf00      	nop
 8007288:	370c      	adds	r7, #12
 800728a:	46bd      	mov	sp, r7
 800728c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007290:	4770      	bx	lr
 8007292:	bf00      	nop
 8007294:	20000010 	.word	0x20000010
 8007298:	e000ed04 	.word	0xe000ed04

0800729c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800729c:	b480      	push	{r7}
 800729e:	b083      	sub	sp, #12
 80072a0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80072a2:	4b12      	ldr	r3, [pc, #72]	@ (80072ec <vPortExitCritical+0x50>)
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d10b      	bne.n	80072c2 <vPortExitCritical+0x26>
	__asm volatile
 80072aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072ae:	f383 8811 	msr	BASEPRI, r3
 80072b2:	f3bf 8f6f 	isb	sy
 80072b6:	f3bf 8f4f 	dsb	sy
 80072ba:	607b      	str	r3, [r7, #4]
}
 80072bc:	bf00      	nop
 80072be:	bf00      	nop
 80072c0:	e7fd      	b.n	80072be <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80072c2:	4b0a      	ldr	r3, [pc, #40]	@ (80072ec <vPortExitCritical+0x50>)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	3b01      	subs	r3, #1
 80072c8:	4a08      	ldr	r2, [pc, #32]	@ (80072ec <vPortExitCritical+0x50>)
 80072ca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80072cc:	4b07      	ldr	r3, [pc, #28]	@ (80072ec <vPortExitCritical+0x50>)
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d105      	bne.n	80072e0 <vPortExitCritical+0x44>
 80072d4:	2300      	movs	r3, #0
 80072d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	f383 8811 	msr	BASEPRI, r3
}
 80072de:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80072e0:	bf00      	nop
 80072e2:	370c      	adds	r7, #12
 80072e4:	46bd      	mov	sp, r7
 80072e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ea:	4770      	bx	lr
 80072ec:	20000010 	.word	0x20000010

080072f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80072f0:	f3ef 8009 	mrs	r0, PSP
 80072f4:	f3bf 8f6f 	isb	sy
 80072f8:	4b15      	ldr	r3, [pc, #84]	@ (8007350 <pxCurrentTCBConst>)
 80072fa:	681a      	ldr	r2, [r3, #0]
 80072fc:	f01e 0f10 	tst.w	lr, #16
 8007300:	bf08      	it	eq
 8007302:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007306:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800730a:	6010      	str	r0, [r2, #0]
 800730c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007310:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007314:	f380 8811 	msr	BASEPRI, r0
 8007318:	f3bf 8f4f 	dsb	sy
 800731c:	f3bf 8f6f 	isb	sy
 8007320:	f7ff fbce 	bl	8006ac0 <vTaskSwitchContext>
 8007324:	f04f 0000 	mov.w	r0, #0
 8007328:	f380 8811 	msr	BASEPRI, r0
 800732c:	bc09      	pop	{r0, r3}
 800732e:	6819      	ldr	r1, [r3, #0]
 8007330:	6808      	ldr	r0, [r1, #0]
 8007332:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007336:	f01e 0f10 	tst.w	lr, #16
 800733a:	bf08      	it	eq
 800733c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007340:	f380 8809 	msr	PSP, r0
 8007344:	f3bf 8f6f 	isb	sy
 8007348:	4770      	bx	lr
 800734a:	bf00      	nop
 800734c:	f3af 8000 	nop.w

08007350 <pxCurrentTCBConst>:
 8007350:	20000548 	.word	0x20000548
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007354:	bf00      	nop
 8007356:	bf00      	nop

08007358 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b082      	sub	sp, #8
 800735c:	af00      	add	r7, sp, #0
	__asm volatile
 800735e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007362:	f383 8811 	msr	BASEPRI, r3
 8007366:	f3bf 8f6f 	isb	sy
 800736a:	f3bf 8f4f 	dsb	sy
 800736e:	607b      	str	r3, [r7, #4]
}
 8007370:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007372:	f7ff fae7 	bl	8006944 <xTaskIncrementTick>
 8007376:	4603      	mov	r3, r0
 8007378:	2b00      	cmp	r3, #0
 800737a:	d003      	beq.n	8007384 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800737c:	4b06      	ldr	r3, [pc, #24]	@ (8007398 <SysTick_Handler+0x40>)
 800737e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007382:	601a      	str	r2, [r3, #0]
 8007384:	2300      	movs	r3, #0
 8007386:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	f383 8811 	msr	BASEPRI, r3
}
 800738e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007390:	bf00      	nop
 8007392:	3708      	adds	r7, #8
 8007394:	46bd      	mov	sp, r7
 8007396:	bd80      	pop	{r7, pc}
 8007398:	e000ed04 	.word	0xe000ed04

0800739c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800739c:	b480      	push	{r7}
 800739e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80073a0:	4b0b      	ldr	r3, [pc, #44]	@ (80073d0 <vPortSetupTimerInterrupt+0x34>)
 80073a2:	2200      	movs	r2, #0
 80073a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80073a6:	4b0b      	ldr	r3, [pc, #44]	@ (80073d4 <vPortSetupTimerInterrupt+0x38>)
 80073a8:	2200      	movs	r2, #0
 80073aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80073ac:	4b0a      	ldr	r3, [pc, #40]	@ (80073d8 <vPortSetupTimerInterrupt+0x3c>)
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	4a0a      	ldr	r2, [pc, #40]	@ (80073dc <vPortSetupTimerInterrupt+0x40>)
 80073b2:	fba2 2303 	umull	r2, r3, r2, r3
 80073b6:	099b      	lsrs	r3, r3, #6
 80073b8:	4a09      	ldr	r2, [pc, #36]	@ (80073e0 <vPortSetupTimerInterrupt+0x44>)
 80073ba:	3b01      	subs	r3, #1
 80073bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80073be:	4b04      	ldr	r3, [pc, #16]	@ (80073d0 <vPortSetupTimerInterrupt+0x34>)
 80073c0:	2207      	movs	r2, #7
 80073c2:	601a      	str	r2, [r3, #0]
}
 80073c4:	bf00      	nop
 80073c6:	46bd      	mov	sp, r7
 80073c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073cc:	4770      	bx	lr
 80073ce:	bf00      	nop
 80073d0:	e000e010 	.word	0xe000e010
 80073d4:	e000e018 	.word	0xe000e018
 80073d8:	20000004 	.word	0x20000004
 80073dc:	10624dd3 	.word	0x10624dd3
 80073e0:	e000e014 	.word	0xe000e014

080073e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80073e4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80073f4 <vPortEnableVFP+0x10>
 80073e8:	6801      	ldr	r1, [r0, #0]
 80073ea:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80073ee:	6001      	str	r1, [r0, #0]
 80073f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80073f2:	bf00      	nop
 80073f4:	e000ed88 	.word	0xe000ed88

080073f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80073f8:	b480      	push	{r7}
 80073fa:	b085      	sub	sp, #20
 80073fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80073fe:	f3ef 8305 	mrs	r3, IPSR
 8007402:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	2b0f      	cmp	r3, #15
 8007408:	d915      	bls.n	8007436 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800740a:	4a18      	ldr	r2, [pc, #96]	@ (800746c <vPortValidateInterruptPriority+0x74>)
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	4413      	add	r3, r2
 8007410:	781b      	ldrb	r3, [r3, #0]
 8007412:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007414:	4b16      	ldr	r3, [pc, #88]	@ (8007470 <vPortValidateInterruptPriority+0x78>)
 8007416:	781b      	ldrb	r3, [r3, #0]
 8007418:	7afa      	ldrb	r2, [r7, #11]
 800741a:	429a      	cmp	r2, r3
 800741c:	d20b      	bcs.n	8007436 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800741e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007422:	f383 8811 	msr	BASEPRI, r3
 8007426:	f3bf 8f6f 	isb	sy
 800742a:	f3bf 8f4f 	dsb	sy
 800742e:	607b      	str	r3, [r7, #4]
}
 8007430:	bf00      	nop
 8007432:	bf00      	nop
 8007434:	e7fd      	b.n	8007432 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007436:	4b0f      	ldr	r3, [pc, #60]	@ (8007474 <vPortValidateInterruptPriority+0x7c>)
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800743e:	4b0e      	ldr	r3, [pc, #56]	@ (8007478 <vPortValidateInterruptPriority+0x80>)
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	429a      	cmp	r2, r3
 8007444:	d90b      	bls.n	800745e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007446:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800744a:	f383 8811 	msr	BASEPRI, r3
 800744e:	f3bf 8f6f 	isb	sy
 8007452:	f3bf 8f4f 	dsb	sy
 8007456:	603b      	str	r3, [r7, #0]
}
 8007458:	bf00      	nop
 800745a:	bf00      	nop
 800745c:	e7fd      	b.n	800745a <vPortValidateInterruptPriority+0x62>
	}
 800745e:	bf00      	nop
 8007460:	3714      	adds	r7, #20
 8007462:	46bd      	mov	sp, r7
 8007464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007468:	4770      	bx	lr
 800746a:	bf00      	nop
 800746c:	e000e3f0 	.word	0xe000e3f0
 8007470:	20000674 	.word	0x20000674
 8007474:	e000ed0c 	.word	0xe000ed0c
 8007478:	20000678 	.word	0x20000678

0800747c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b08a      	sub	sp, #40	@ 0x28
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007484:	2300      	movs	r3, #0
 8007486:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007488:	f7ff f9b0 	bl	80067ec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800748c:	4b5a      	ldr	r3, [pc, #360]	@ (80075f8 <pvPortMalloc+0x17c>)
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d101      	bne.n	8007498 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007494:	f000 f916 	bl	80076c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007498:	4b58      	ldr	r3, [pc, #352]	@ (80075fc <pvPortMalloc+0x180>)
 800749a:	681a      	ldr	r2, [r3, #0]
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	4013      	ands	r3, r2
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	f040 8090 	bne.w	80075c6 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d01e      	beq.n	80074ea <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80074ac:	2208      	movs	r2, #8
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	4413      	add	r3, r2
 80074b2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	f003 0307 	and.w	r3, r3, #7
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d015      	beq.n	80074ea <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	f023 0307 	bic.w	r3, r3, #7
 80074c4:	3308      	adds	r3, #8
 80074c6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	f003 0307 	and.w	r3, r3, #7
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d00b      	beq.n	80074ea <pvPortMalloc+0x6e>
	__asm volatile
 80074d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074d6:	f383 8811 	msr	BASEPRI, r3
 80074da:	f3bf 8f6f 	isb	sy
 80074de:	f3bf 8f4f 	dsb	sy
 80074e2:	617b      	str	r3, [r7, #20]
}
 80074e4:	bf00      	nop
 80074e6:	bf00      	nop
 80074e8:	e7fd      	b.n	80074e6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d06a      	beq.n	80075c6 <pvPortMalloc+0x14a>
 80074f0:	4b43      	ldr	r3, [pc, #268]	@ (8007600 <pvPortMalloc+0x184>)
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	687a      	ldr	r2, [r7, #4]
 80074f6:	429a      	cmp	r2, r3
 80074f8:	d865      	bhi.n	80075c6 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80074fa:	4b42      	ldr	r3, [pc, #264]	@ (8007604 <pvPortMalloc+0x188>)
 80074fc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80074fe:	4b41      	ldr	r3, [pc, #260]	@ (8007604 <pvPortMalloc+0x188>)
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007504:	e004      	b.n	8007510 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007508:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800750a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007512:	685b      	ldr	r3, [r3, #4]
 8007514:	687a      	ldr	r2, [r7, #4]
 8007516:	429a      	cmp	r2, r3
 8007518:	d903      	bls.n	8007522 <pvPortMalloc+0xa6>
 800751a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d1f1      	bne.n	8007506 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007522:	4b35      	ldr	r3, [pc, #212]	@ (80075f8 <pvPortMalloc+0x17c>)
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007528:	429a      	cmp	r2, r3
 800752a:	d04c      	beq.n	80075c6 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800752c:	6a3b      	ldr	r3, [r7, #32]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	2208      	movs	r2, #8
 8007532:	4413      	add	r3, r2
 8007534:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007538:	681a      	ldr	r2, [r3, #0]
 800753a:	6a3b      	ldr	r3, [r7, #32]
 800753c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800753e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007540:	685a      	ldr	r2, [r3, #4]
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	1ad2      	subs	r2, r2, r3
 8007546:	2308      	movs	r3, #8
 8007548:	005b      	lsls	r3, r3, #1
 800754a:	429a      	cmp	r2, r3
 800754c:	d920      	bls.n	8007590 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800754e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	4413      	add	r3, r2
 8007554:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007556:	69bb      	ldr	r3, [r7, #24]
 8007558:	f003 0307 	and.w	r3, r3, #7
 800755c:	2b00      	cmp	r3, #0
 800755e:	d00b      	beq.n	8007578 <pvPortMalloc+0xfc>
	__asm volatile
 8007560:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007564:	f383 8811 	msr	BASEPRI, r3
 8007568:	f3bf 8f6f 	isb	sy
 800756c:	f3bf 8f4f 	dsb	sy
 8007570:	613b      	str	r3, [r7, #16]
}
 8007572:	bf00      	nop
 8007574:	bf00      	nop
 8007576:	e7fd      	b.n	8007574 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800757a:	685a      	ldr	r2, [r3, #4]
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	1ad2      	subs	r2, r2, r3
 8007580:	69bb      	ldr	r3, [r7, #24]
 8007582:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007586:	687a      	ldr	r2, [r7, #4]
 8007588:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800758a:	69b8      	ldr	r0, [r7, #24]
 800758c:	f000 f8fc 	bl	8007788 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007590:	4b1b      	ldr	r3, [pc, #108]	@ (8007600 <pvPortMalloc+0x184>)
 8007592:	681a      	ldr	r2, [r3, #0]
 8007594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007596:	685b      	ldr	r3, [r3, #4]
 8007598:	1ad3      	subs	r3, r2, r3
 800759a:	4a19      	ldr	r2, [pc, #100]	@ (8007600 <pvPortMalloc+0x184>)
 800759c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800759e:	4b18      	ldr	r3, [pc, #96]	@ (8007600 <pvPortMalloc+0x184>)
 80075a0:	681a      	ldr	r2, [r3, #0]
 80075a2:	4b19      	ldr	r3, [pc, #100]	@ (8007608 <pvPortMalloc+0x18c>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	429a      	cmp	r2, r3
 80075a8:	d203      	bcs.n	80075b2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80075aa:	4b15      	ldr	r3, [pc, #84]	@ (8007600 <pvPortMalloc+0x184>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	4a16      	ldr	r2, [pc, #88]	@ (8007608 <pvPortMalloc+0x18c>)
 80075b0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80075b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075b4:	685a      	ldr	r2, [r3, #4]
 80075b6:	4b11      	ldr	r3, [pc, #68]	@ (80075fc <pvPortMalloc+0x180>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	431a      	orrs	r2, r3
 80075bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075be:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80075c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075c2:	2200      	movs	r2, #0
 80075c4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80075c6:	f7ff f91f 	bl	8006808 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80075ca:	69fb      	ldr	r3, [r7, #28]
 80075cc:	f003 0307 	and.w	r3, r3, #7
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d00b      	beq.n	80075ec <pvPortMalloc+0x170>
	__asm volatile
 80075d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075d8:	f383 8811 	msr	BASEPRI, r3
 80075dc:	f3bf 8f6f 	isb	sy
 80075e0:	f3bf 8f4f 	dsb	sy
 80075e4:	60fb      	str	r3, [r7, #12]
}
 80075e6:	bf00      	nop
 80075e8:	bf00      	nop
 80075ea:	e7fd      	b.n	80075e8 <pvPortMalloc+0x16c>
	return pvReturn;
 80075ec:	69fb      	ldr	r3, [r7, #28]
}
 80075ee:	4618      	mov	r0, r3
 80075f0:	3728      	adds	r7, #40	@ 0x28
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bd80      	pop	{r7, pc}
 80075f6:	bf00      	nop
 80075f8:	20002e84 	.word	0x20002e84
 80075fc:	20002e90 	.word	0x20002e90
 8007600:	20002e88 	.word	0x20002e88
 8007604:	20002e7c 	.word	0x20002e7c
 8007608:	20002e8c 	.word	0x20002e8c

0800760c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b086      	sub	sp, #24
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d04a      	beq.n	80076b4 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800761e:	2308      	movs	r3, #8
 8007620:	425b      	negs	r3, r3
 8007622:	697a      	ldr	r2, [r7, #20]
 8007624:	4413      	add	r3, r2
 8007626:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007628:	697b      	ldr	r3, [r7, #20]
 800762a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800762c:	693b      	ldr	r3, [r7, #16]
 800762e:	685a      	ldr	r2, [r3, #4]
 8007630:	4b22      	ldr	r3, [pc, #136]	@ (80076bc <vPortFree+0xb0>)
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	4013      	ands	r3, r2
 8007636:	2b00      	cmp	r3, #0
 8007638:	d10b      	bne.n	8007652 <vPortFree+0x46>
	__asm volatile
 800763a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800763e:	f383 8811 	msr	BASEPRI, r3
 8007642:	f3bf 8f6f 	isb	sy
 8007646:	f3bf 8f4f 	dsb	sy
 800764a:	60fb      	str	r3, [r7, #12]
}
 800764c:	bf00      	nop
 800764e:	bf00      	nop
 8007650:	e7fd      	b.n	800764e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007652:	693b      	ldr	r3, [r7, #16]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d00b      	beq.n	8007672 <vPortFree+0x66>
	__asm volatile
 800765a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800765e:	f383 8811 	msr	BASEPRI, r3
 8007662:	f3bf 8f6f 	isb	sy
 8007666:	f3bf 8f4f 	dsb	sy
 800766a:	60bb      	str	r3, [r7, #8]
}
 800766c:	bf00      	nop
 800766e:	bf00      	nop
 8007670:	e7fd      	b.n	800766e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007672:	693b      	ldr	r3, [r7, #16]
 8007674:	685a      	ldr	r2, [r3, #4]
 8007676:	4b11      	ldr	r3, [pc, #68]	@ (80076bc <vPortFree+0xb0>)
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	4013      	ands	r3, r2
 800767c:	2b00      	cmp	r3, #0
 800767e:	d019      	beq.n	80076b4 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007680:	693b      	ldr	r3, [r7, #16]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d115      	bne.n	80076b4 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007688:	693b      	ldr	r3, [r7, #16]
 800768a:	685a      	ldr	r2, [r3, #4]
 800768c:	4b0b      	ldr	r3, [pc, #44]	@ (80076bc <vPortFree+0xb0>)
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	43db      	mvns	r3, r3
 8007692:	401a      	ands	r2, r3
 8007694:	693b      	ldr	r3, [r7, #16]
 8007696:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007698:	f7ff f8a8 	bl	80067ec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800769c:	693b      	ldr	r3, [r7, #16]
 800769e:	685a      	ldr	r2, [r3, #4]
 80076a0:	4b07      	ldr	r3, [pc, #28]	@ (80076c0 <vPortFree+0xb4>)
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	4413      	add	r3, r2
 80076a6:	4a06      	ldr	r2, [pc, #24]	@ (80076c0 <vPortFree+0xb4>)
 80076a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80076aa:	6938      	ldr	r0, [r7, #16]
 80076ac:	f000 f86c 	bl	8007788 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80076b0:	f7ff f8aa 	bl	8006808 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80076b4:	bf00      	nop
 80076b6:	3718      	adds	r7, #24
 80076b8:	46bd      	mov	sp, r7
 80076ba:	bd80      	pop	{r7, pc}
 80076bc:	20002e90 	.word	0x20002e90
 80076c0:	20002e88 	.word	0x20002e88

080076c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80076c4:	b480      	push	{r7}
 80076c6:	b085      	sub	sp, #20
 80076c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80076ca:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80076ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80076d0:	4b27      	ldr	r3, [pc, #156]	@ (8007770 <prvHeapInit+0xac>)
 80076d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	f003 0307 	and.w	r3, r3, #7
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d00c      	beq.n	80076f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	3307      	adds	r3, #7
 80076e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	f023 0307 	bic.w	r3, r3, #7
 80076ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80076ec:	68ba      	ldr	r2, [r7, #8]
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	1ad3      	subs	r3, r2, r3
 80076f2:	4a1f      	ldr	r2, [pc, #124]	@ (8007770 <prvHeapInit+0xac>)
 80076f4:	4413      	add	r3, r2
 80076f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80076fc:	4a1d      	ldr	r2, [pc, #116]	@ (8007774 <prvHeapInit+0xb0>)
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007702:	4b1c      	ldr	r3, [pc, #112]	@ (8007774 <prvHeapInit+0xb0>)
 8007704:	2200      	movs	r2, #0
 8007706:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	68ba      	ldr	r2, [r7, #8]
 800770c:	4413      	add	r3, r2
 800770e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007710:	2208      	movs	r2, #8
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	1a9b      	subs	r3, r3, r2
 8007716:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	f023 0307 	bic.w	r3, r3, #7
 800771e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	4a15      	ldr	r2, [pc, #84]	@ (8007778 <prvHeapInit+0xb4>)
 8007724:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007726:	4b14      	ldr	r3, [pc, #80]	@ (8007778 <prvHeapInit+0xb4>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	2200      	movs	r2, #0
 800772c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800772e:	4b12      	ldr	r3, [pc, #72]	@ (8007778 <prvHeapInit+0xb4>)
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	2200      	movs	r2, #0
 8007734:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	68fa      	ldr	r2, [r7, #12]
 800773e:	1ad2      	subs	r2, r2, r3
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007744:	4b0c      	ldr	r3, [pc, #48]	@ (8007778 <prvHeapInit+0xb4>)
 8007746:	681a      	ldr	r2, [r3, #0]
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	685b      	ldr	r3, [r3, #4]
 8007750:	4a0a      	ldr	r2, [pc, #40]	@ (800777c <prvHeapInit+0xb8>)
 8007752:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	685b      	ldr	r3, [r3, #4]
 8007758:	4a09      	ldr	r2, [pc, #36]	@ (8007780 <prvHeapInit+0xbc>)
 800775a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800775c:	4b09      	ldr	r3, [pc, #36]	@ (8007784 <prvHeapInit+0xc0>)
 800775e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007762:	601a      	str	r2, [r3, #0]
}
 8007764:	bf00      	nop
 8007766:	3714      	adds	r7, #20
 8007768:	46bd      	mov	sp, r7
 800776a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776e:	4770      	bx	lr
 8007770:	2000067c 	.word	0x2000067c
 8007774:	20002e7c 	.word	0x20002e7c
 8007778:	20002e84 	.word	0x20002e84
 800777c:	20002e8c 	.word	0x20002e8c
 8007780:	20002e88 	.word	0x20002e88
 8007784:	20002e90 	.word	0x20002e90

08007788 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007788:	b480      	push	{r7}
 800778a:	b085      	sub	sp, #20
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007790:	4b28      	ldr	r3, [pc, #160]	@ (8007834 <prvInsertBlockIntoFreeList+0xac>)
 8007792:	60fb      	str	r3, [r7, #12]
 8007794:	e002      	b.n	800779c <prvInsertBlockIntoFreeList+0x14>
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	60fb      	str	r3, [r7, #12]
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	687a      	ldr	r2, [r7, #4]
 80077a2:	429a      	cmp	r2, r3
 80077a4:	d8f7      	bhi.n	8007796 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	685b      	ldr	r3, [r3, #4]
 80077ae:	68ba      	ldr	r2, [r7, #8]
 80077b0:	4413      	add	r3, r2
 80077b2:	687a      	ldr	r2, [r7, #4]
 80077b4:	429a      	cmp	r2, r3
 80077b6:	d108      	bne.n	80077ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	685a      	ldr	r2, [r3, #4]
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	685b      	ldr	r3, [r3, #4]
 80077c0:	441a      	add	r2, r3
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	685b      	ldr	r3, [r3, #4]
 80077d2:	68ba      	ldr	r2, [r7, #8]
 80077d4:	441a      	add	r2, r3
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	429a      	cmp	r2, r3
 80077dc:	d118      	bne.n	8007810 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681a      	ldr	r2, [r3, #0]
 80077e2:	4b15      	ldr	r3, [pc, #84]	@ (8007838 <prvInsertBlockIntoFreeList+0xb0>)
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	429a      	cmp	r2, r3
 80077e8:	d00d      	beq.n	8007806 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	685a      	ldr	r2, [r3, #4]
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	685b      	ldr	r3, [r3, #4]
 80077f4:	441a      	add	r2, r3
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	681a      	ldr	r2, [r3, #0]
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	601a      	str	r2, [r3, #0]
 8007804:	e008      	b.n	8007818 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007806:	4b0c      	ldr	r3, [pc, #48]	@ (8007838 <prvInsertBlockIntoFreeList+0xb0>)
 8007808:	681a      	ldr	r2, [r3, #0]
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	601a      	str	r2, [r3, #0]
 800780e:	e003      	b.n	8007818 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	681a      	ldr	r2, [r3, #0]
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007818:	68fa      	ldr	r2, [r7, #12]
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	429a      	cmp	r2, r3
 800781e:	d002      	beq.n	8007826 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	687a      	ldr	r2, [r7, #4]
 8007824:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007826:	bf00      	nop
 8007828:	3714      	adds	r7, #20
 800782a:	46bd      	mov	sp, r7
 800782c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007830:	4770      	bx	lr
 8007832:	bf00      	nop
 8007834:	20002e7c 	.word	0x20002e7c
 8007838:	20002e84 	.word	0x20002e84

0800783c <sniprintf>:
 800783c:	b40c      	push	{r2, r3}
 800783e:	b530      	push	{r4, r5, lr}
 8007840:	4b17      	ldr	r3, [pc, #92]	@ (80078a0 <sniprintf+0x64>)
 8007842:	1e0c      	subs	r4, r1, #0
 8007844:	681d      	ldr	r5, [r3, #0]
 8007846:	b09d      	sub	sp, #116	@ 0x74
 8007848:	da08      	bge.n	800785c <sniprintf+0x20>
 800784a:	238b      	movs	r3, #139	@ 0x8b
 800784c:	602b      	str	r3, [r5, #0]
 800784e:	f04f 30ff 	mov.w	r0, #4294967295
 8007852:	b01d      	add	sp, #116	@ 0x74
 8007854:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007858:	b002      	add	sp, #8
 800785a:	4770      	bx	lr
 800785c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007860:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007864:	bf14      	ite	ne
 8007866:	f104 33ff 	addne.w	r3, r4, #4294967295
 800786a:	4623      	moveq	r3, r4
 800786c:	9304      	str	r3, [sp, #16]
 800786e:	9307      	str	r3, [sp, #28]
 8007870:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007874:	9002      	str	r0, [sp, #8]
 8007876:	9006      	str	r0, [sp, #24]
 8007878:	f8ad 3016 	strh.w	r3, [sp, #22]
 800787c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800787e:	ab21      	add	r3, sp, #132	@ 0x84
 8007880:	a902      	add	r1, sp, #8
 8007882:	4628      	mov	r0, r5
 8007884:	9301      	str	r3, [sp, #4]
 8007886:	f000 f9a3 	bl	8007bd0 <_svfiprintf_r>
 800788a:	1c43      	adds	r3, r0, #1
 800788c:	bfbc      	itt	lt
 800788e:	238b      	movlt	r3, #139	@ 0x8b
 8007890:	602b      	strlt	r3, [r5, #0]
 8007892:	2c00      	cmp	r4, #0
 8007894:	d0dd      	beq.n	8007852 <sniprintf+0x16>
 8007896:	9b02      	ldr	r3, [sp, #8]
 8007898:	2200      	movs	r2, #0
 800789a:	701a      	strb	r2, [r3, #0]
 800789c:	e7d9      	b.n	8007852 <sniprintf+0x16>
 800789e:	bf00      	nop
 80078a0:	20000014 	.word	0x20000014

080078a4 <memset>:
 80078a4:	4402      	add	r2, r0
 80078a6:	4603      	mov	r3, r0
 80078a8:	4293      	cmp	r3, r2
 80078aa:	d100      	bne.n	80078ae <memset+0xa>
 80078ac:	4770      	bx	lr
 80078ae:	f803 1b01 	strb.w	r1, [r3], #1
 80078b2:	e7f9      	b.n	80078a8 <memset+0x4>

080078b4 <__errno>:
 80078b4:	4b01      	ldr	r3, [pc, #4]	@ (80078bc <__errno+0x8>)
 80078b6:	6818      	ldr	r0, [r3, #0]
 80078b8:	4770      	bx	lr
 80078ba:	bf00      	nop
 80078bc:	20000014 	.word	0x20000014

080078c0 <__libc_init_array>:
 80078c0:	b570      	push	{r4, r5, r6, lr}
 80078c2:	4d0d      	ldr	r5, [pc, #52]	@ (80078f8 <__libc_init_array+0x38>)
 80078c4:	4c0d      	ldr	r4, [pc, #52]	@ (80078fc <__libc_init_array+0x3c>)
 80078c6:	1b64      	subs	r4, r4, r5
 80078c8:	10a4      	asrs	r4, r4, #2
 80078ca:	2600      	movs	r6, #0
 80078cc:	42a6      	cmp	r6, r4
 80078ce:	d109      	bne.n	80078e4 <__libc_init_array+0x24>
 80078d0:	4d0b      	ldr	r5, [pc, #44]	@ (8007900 <__libc_init_array+0x40>)
 80078d2:	4c0c      	ldr	r4, [pc, #48]	@ (8007904 <__libc_init_array+0x44>)
 80078d4:	f000 fc66 	bl	80081a4 <_init>
 80078d8:	1b64      	subs	r4, r4, r5
 80078da:	10a4      	asrs	r4, r4, #2
 80078dc:	2600      	movs	r6, #0
 80078de:	42a6      	cmp	r6, r4
 80078e0:	d105      	bne.n	80078ee <__libc_init_array+0x2e>
 80078e2:	bd70      	pop	{r4, r5, r6, pc}
 80078e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80078e8:	4798      	blx	r3
 80078ea:	3601      	adds	r6, #1
 80078ec:	e7ee      	b.n	80078cc <__libc_init_array+0xc>
 80078ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80078f2:	4798      	blx	r3
 80078f4:	3601      	adds	r6, #1
 80078f6:	e7f2      	b.n	80078de <__libc_init_array+0x1e>
 80078f8:	080082c8 	.word	0x080082c8
 80078fc:	080082c8 	.word	0x080082c8
 8007900:	080082c8 	.word	0x080082c8
 8007904:	080082cc 	.word	0x080082cc

08007908 <__retarget_lock_acquire_recursive>:
 8007908:	4770      	bx	lr

0800790a <__retarget_lock_release_recursive>:
 800790a:	4770      	bx	lr

0800790c <memcpy>:
 800790c:	440a      	add	r2, r1
 800790e:	4291      	cmp	r1, r2
 8007910:	f100 33ff 	add.w	r3, r0, #4294967295
 8007914:	d100      	bne.n	8007918 <memcpy+0xc>
 8007916:	4770      	bx	lr
 8007918:	b510      	push	{r4, lr}
 800791a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800791e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007922:	4291      	cmp	r1, r2
 8007924:	d1f9      	bne.n	800791a <memcpy+0xe>
 8007926:	bd10      	pop	{r4, pc}

08007928 <_free_r>:
 8007928:	b538      	push	{r3, r4, r5, lr}
 800792a:	4605      	mov	r5, r0
 800792c:	2900      	cmp	r1, #0
 800792e:	d041      	beq.n	80079b4 <_free_r+0x8c>
 8007930:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007934:	1f0c      	subs	r4, r1, #4
 8007936:	2b00      	cmp	r3, #0
 8007938:	bfb8      	it	lt
 800793a:	18e4      	addlt	r4, r4, r3
 800793c:	f000 f8e0 	bl	8007b00 <__malloc_lock>
 8007940:	4a1d      	ldr	r2, [pc, #116]	@ (80079b8 <_free_r+0x90>)
 8007942:	6813      	ldr	r3, [r2, #0]
 8007944:	b933      	cbnz	r3, 8007954 <_free_r+0x2c>
 8007946:	6063      	str	r3, [r4, #4]
 8007948:	6014      	str	r4, [r2, #0]
 800794a:	4628      	mov	r0, r5
 800794c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007950:	f000 b8dc 	b.w	8007b0c <__malloc_unlock>
 8007954:	42a3      	cmp	r3, r4
 8007956:	d908      	bls.n	800796a <_free_r+0x42>
 8007958:	6820      	ldr	r0, [r4, #0]
 800795a:	1821      	adds	r1, r4, r0
 800795c:	428b      	cmp	r3, r1
 800795e:	bf01      	itttt	eq
 8007960:	6819      	ldreq	r1, [r3, #0]
 8007962:	685b      	ldreq	r3, [r3, #4]
 8007964:	1809      	addeq	r1, r1, r0
 8007966:	6021      	streq	r1, [r4, #0]
 8007968:	e7ed      	b.n	8007946 <_free_r+0x1e>
 800796a:	461a      	mov	r2, r3
 800796c:	685b      	ldr	r3, [r3, #4]
 800796e:	b10b      	cbz	r3, 8007974 <_free_r+0x4c>
 8007970:	42a3      	cmp	r3, r4
 8007972:	d9fa      	bls.n	800796a <_free_r+0x42>
 8007974:	6811      	ldr	r1, [r2, #0]
 8007976:	1850      	adds	r0, r2, r1
 8007978:	42a0      	cmp	r0, r4
 800797a:	d10b      	bne.n	8007994 <_free_r+0x6c>
 800797c:	6820      	ldr	r0, [r4, #0]
 800797e:	4401      	add	r1, r0
 8007980:	1850      	adds	r0, r2, r1
 8007982:	4283      	cmp	r3, r0
 8007984:	6011      	str	r1, [r2, #0]
 8007986:	d1e0      	bne.n	800794a <_free_r+0x22>
 8007988:	6818      	ldr	r0, [r3, #0]
 800798a:	685b      	ldr	r3, [r3, #4]
 800798c:	6053      	str	r3, [r2, #4]
 800798e:	4408      	add	r0, r1
 8007990:	6010      	str	r0, [r2, #0]
 8007992:	e7da      	b.n	800794a <_free_r+0x22>
 8007994:	d902      	bls.n	800799c <_free_r+0x74>
 8007996:	230c      	movs	r3, #12
 8007998:	602b      	str	r3, [r5, #0]
 800799a:	e7d6      	b.n	800794a <_free_r+0x22>
 800799c:	6820      	ldr	r0, [r4, #0]
 800799e:	1821      	adds	r1, r4, r0
 80079a0:	428b      	cmp	r3, r1
 80079a2:	bf04      	itt	eq
 80079a4:	6819      	ldreq	r1, [r3, #0]
 80079a6:	685b      	ldreq	r3, [r3, #4]
 80079a8:	6063      	str	r3, [r4, #4]
 80079aa:	bf04      	itt	eq
 80079ac:	1809      	addeq	r1, r1, r0
 80079ae:	6021      	streq	r1, [r4, #0]
 80079b0:	6054      	str	r4, [r2, #4]
 80079b2:	e7ca      	b.n	800794a <_free_r+0x22>
 80079b4:	bd38      	pop	{r3, r4, r5, pc}
 80079b6:	bf00      	nop
 80079b8:	20002fd8 	.word	0x20002fd8

080079bc <sbrk_aligned>:
 80079bc:	b570      	push	{r4, r5, r6, lr}
 80079be:	4e0f      	ldr	r6, [pc, #60]	@ (80079fc <sbrk_aligned+0x40>)
 80079c0:	460c      	mov	r4, r1
 80079c2:	6831      	ldr	r1, [r6, #0]
 80079c4:	4605      	mov	r5, r0
 80079c6:	b911      	cbnz	r1, 80079ce <sbrk_aligned+0x12>
 80079c8:	f000 fba6 	bl	8008118 <_sbrk_r>
 80079cc:	6030      	str	r0, [r6, #0]
 80079ce:	4621      	mov	r1, r4
 80079d0:	4628      	mov	r0, r5
 80079d2:	f000 fba1 	bl	8008118 <_sbrk_r>
 80079d6:	1c43      	adds	r3, r0, #1
 80079d8:	d103      	bne.n	80079e2 <sbrk_aligned+0x26>
 80079da:	f04f 34ff 	mov.w	r4, #4294967295
 80079de:	4620      	mov	r0, r4
 80079e0:	bd70      	pop	{r4, r5, r6, pc}
 80079e2:	1cc4      	adds	r4, r0, #3
 80079e4:	f024 0403 	bic.w	r4, r4, #3
 80079e8:	42a0      	cmp	r0, r4
 80079ea:	d0f8      	beq.n	80079de <sbrk_aligned+0x22>
 80079ec:	1a21      	subs	r1, r4, r0
 80079ee:	4628      	mov	r0, r5
 80079f0:	f000 fb92 	bl	8008118 <_sbrk_r>
 80079f4:	3001      	adds	r0, #1
 80079f6:	d1f2      	bne.n	80079de <sbrk_aligned+0x22>
 80079f8:	e7ef      	b.n	80079da <sbrk_aligned+0x1e>
 80079fa:	bf00      	nop
 80079fc:	20002fd4 	.word	0x20002fd4

08007a00 <_malloc_r>:
 8007a00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a04:	1ccd      	adds	r5, r1, #3
 8007a06:	f025 0503 	bic.w	r5, r5, #3
 8007a0a:	3508      	adds	r5, #8
 8007a0c:	2d0c      	cmp	r5, #12
 8007a0e:	bf38      	it	cc
 8007a10:	250c      	movcc	r5, #12
 8007a12:	2d00      	cmp	r5, #0
 8007a14:	4606      	mov	r6, r0
 8007a16:	db01      	blt.n	8007a1c <_malloc_r+0x1c>
 8007a18:	42a9      	cmp	r1, r5
 8007a1a:	d904      	bls.n	8007a26 <_malloc_r+0x26>
 8007a1c:	230c      	movs	r3, #12
 8007a1e:	6033      	str	r3, [r6, #0]
 8007a20:	2000      	movs	r0, #0
 8007a22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a26:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007afc <_malloc_r+0xfc>
 8007a2a:	f000 f869 	bl	8007b00 <__malloc_lock>
 8007a2e:	f8d8 3000 	ldr.w	r3, [r8]
 8007a32:	461c      	mov	r4, r3
 8007a34:	bb44      	cbnz	r4, 8007a88 <_malloc_r+0x88>
 8007a36:	4629      	mov	r1, r5
 8007a38:	4630      	mov	r0, r6
 8007a3a:	f7ff ffbf 	bl	80079bc <sbrk_aligned>
 8007a3e:	1c43      	adds	r3, r0, #1
 8007a40:	4604      	mov	r4, r0
 8007a42:	d158      	bne.n	8007af6 <_malloc_r+0xf6>
 8007a44:	f8d8 4000 	ldr.w	r4, [r8]
 8007a48:	4627      	mov	r7, r4
 8007a4a:	2f00      	cmp	r7, #0
 8007a4c:	d143      	bne.n	8007ad6 <_malloc_r+0xd6>
 8007a4e:	2c00      	cmp	r4, #0
 8007a50:	d04b      	beq.n	8007aea <_malloc_r+0xea>
 8007a52:	6823      	ldr	r3, [r4, #0]
 8007a54:	4639      	mov	r1, r7
 8007a56:	4630      	mov	r0, r6
 8007a58:	eb04 0903 	add.w	r9, r4, r3
 8007a5c:	f000 fb5c 	bl	8008118 <_sbrk_r>
 8007a60:	4581      	cmp	r9, r0
 8007a62:	d142      	bne.n	8007aea <_malloc_r+0xea>
 8007a64:	6821      	ldr	r1, [r4, #0]
 8007a66:	1a6d      	subs	r5, r5, r1
 8007a68:	4629      	mov	r1, r5
 8007a6a:	4630      	mov	r0, r6
 8007a6c:	f7ff ffa6 	bl	80079bc <sbrk_aligned>
 8007a70:	3001      	adds	r0, #1
 8007a72:	d03a      	beq.n	8007aea <_malloc_r+0xea>
 8007a74:	6823      	ldr	r3, [r4, #0]
 8007a76:	442b      	add	r3, r5
 8007a78:	6023      	str	r3, [r4, #0]
 8007a7a:	f8d8 3000 	ldr.w	r3, [r8]
 8007a7e:	685a      	ldr	r2, [r3, #4]
 8007a80:	bb62      	cbnz	r2, 8007adc <_malloc_r+0xdc>
 8007a82:	f8c8 7000 	str.w	r7, [r8]
 8007a86:	e00f      	b.n	8007aa8 <_malloc_r+0xa8>
 8007a88:	6822      	ldr	r2, [r4, #0]
 8007a8a:	1b52      	subs	r2, r2, r5
 8007a8c:	d420      	bmi.n	8007ad0 <_malloc_r+0xd0>
 8007a8e:	2a0b      	cmp	r2, #11
 8007a90:	d917      	bls.n	8007ac2 <_malloc_r+0xc2>
 8007a92:	1961      	adds	r1, r4, r5
 8007a94:	42a3      	cmp	r3, r4
 8007a96:	6025      	str	r5, [r4, #0]
 8007a98:	bf18      	it	ne
 8007a9a:	6059      	strne	r1, [r3, #4]
 8007a9c:	6863      	ldr	r3, [r4, #4]
 8007a9e:	bf08      	it	eq
 8007aa0:	f8c8 1000 	streq.w	r1, [r8]
 8007aa4:	5162      	str	r2, [r4, r5]
 8007aa6:	604b      	str	r3, [r1, #4]
 8007aa8:	4630      	mov	r0, r6
 8007aaa:	f000 f82f 	bl	8007b0c <__malloc_unlock>
 8007aae:	f104 000b 	add.w	r0, r4, #11
 8007ab2:	1d23      	adds	r3, r4, #4
 8007ab4:	f020 0007 	bic.w	r0, r0, #7
 8007ab8:	1ac2      	subs	r2, r0, r3
 8007aba:	bf1c      	itt	ne
 8007abc:	1a1b      	subne	r3, r3, r0
 8007abe:	50a3      	strne	r3, [r4, r2]
 8007ac0:	e7af      	b.n	8007a22 <_malloc_r+0x22>
 8007ac2:	6862      	ldr	r2, [r4, #4]
 8007ac4:	42a3      	cmp	r3, r4
 8007ac6:	bf0c      	ite	eq
 8007ac8:	f8c8 2000 	streq.w	r2, [r8]
 8007acc:	605a      	strne	r2, [r3, #4]
 8007ace:	e7eb      	b.n	8007aa8 <_malloc_r+0xa8>
 8007ad0:	4623      	mov	r3, r4
 8007ad2:	6864      	ldr	r4, [r4, #4]
 8007ad4:	e7ae      	b.n	8007a34 <_malloc_r+0x34>
 8007ad6:	463c      	mov	r4, r7
 8007ad8:	687f      	ldr	r7, [r7, #4]
 8007ada:	e7b6      	b.n	8007a4a <_malloc_r+0x4a>
 8007adc:	461a      	mov	r2, r3
 8007ade:	685b      	ldr	r3, [r3, #4]
 8007ae0:	42a3      	cmp	r3, r4
 8007ae2:	d1fb      	bne.n	8007adc <_malloc_r+0xdc>
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	6053      	str	r3, [r2, #4]
 8007ae8:	e7de      	b.n	8007aa8 <_malloc_r+0xa8>
 8007aea:	230c      	movs	r3, #12
 8007aec:	6033      	str	r3, [r6, #0]
 8007aee:	4630      	mov	r0, r6
 8007af0:	f000 f80c 	bl	8007b0c <__malloc_unlock>
 8007af4:	e794      	b.n	8007a20 <_malloc_r+0x20>
 8007af6:	6005      	str	r5, [r0, #0]
 8007af8:	e7d6      	b.n	8007aa8 <_malloc_r+0xa8>
 8007afa:	bf00      	nop
 8007afc:	20002fd8 	.word	0x20002fd8

08007b00 <__malloc_lock>:
 8007b00:	4801      	ldr	r0, [pc, #4]	@ (8007b08 <__malloc_lock+0x8>)
 8007b02:	f7ff bf01 	b.w	8007908 <__retarget_lock_acquire_recursive>
 8007b06:	bf00      	nop
 8007b08:	20002fd0 	.word	0x20002fd0

08007b0c <__malloc_unlock>:
 8007b0c:	4801      	ldr	r0, [pc, #4]	@ (8007b14 <__malloc_unlock+0x8>)
 8007b0e:	f7ff befc 	b.w	800790a <__retarget_lock_release_recursive>
 8007b12:	bf00      	nop
 8007b14:	20002fd0 	.word	0x20002fd0

08007b18 <__ssputs_r>:
 8007b18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b1c:	688e      	ldr	r6, [r1, #8]
 8007b1e:	461f      	mov	r7, r3
 8007b20:	42be      	cmp	r6, r7
 8007b22:	680b      	ldr	r3, [r1, #0]
 8007b24:	4682      	mov	sl, r0
 8007b26:	460c      	mov	r4, r1
 8007b28:	4690      	mov	r8, r2
 8007b2a:	d82d      	bhi.n	8007b88 <__ssputs_r+0x70>
 8007b2c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007b30:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007b34:	d026      	beq.n	8007b84 <__ssputs_r+0x6c>
 8007b36:	6965      	ldr	r5, [r4, #20]
 8007b38:	6909      	ldr	r1, [r1, #16]
 8007b3a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007b3e:	eba3 0901 	sub.w	r9, r3, r1
 8007b42:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007b46:	1c7b      	adds	r3, r7, #1
 8007b48:	444b      	add	r3, r9
 8007b4a:	106d      	asrs	r5, r5, #1
 8007b4c:	429d      	cmp	r5, r3
 8007b4e:	bf38      	it	cc
 8007b50:	461d      	movcc	r5, r3
 8007b52:	0553      	lsls	r3, r2, #21
 8007b54:	d527      	bpl.n	8007ba6 <__ssputs_r+0x8e>
 8007b56:	4629      	mov	r1, r5
 8007b58:	f7ff ff52 	bl	8007a00 <_malloc_r>
 8007b5c:	4606      	mov	r6, r0
 8007b5e:	b360      	cbz	r0, 8007bba <__ssputs_r+0xa2>
 8007b60:	6921      	ldr	r1, [r4, #16]
 8007b62:	464a      	mov	r2, r9
 8007b64:	f7ff fed2 	bl	800790c <memcpy>
 8007b68:	89a3      	ldrh	r3, [r4, #12]
 8007b6a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007b6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b72:	81a3      	strh	r3, [r4, #12]
 8007b74:	6126      	str	r6, [r4, #16]
 8007b76:	6165      	str	r5, [r4, #20]
 8007b78:	444e      	add	r6, r9
 8007b7a:	eba5 0509 	sub.w	r5, r5, r9
 8007b7e:	6026      	str	r6, [r4, #0]
 8007b80:	60a5      	str	r5, [r4, #8]
 8007b82:	463e      	mov	r6, r7
 8007b84:	42be      	cmp	r6, r7
 8007b86:	d900      	bls.n	8007b8a <__ssputs_r+0x72>
 8007b88:	463e      	mov	r6, r7
 8007b8a:	6820      	ldr	r0, [r4, #0]
 8007b8c:	4632      	mov	r2, r6
 8007b8e:	4641      	mov	r1, r8
 8007b90:	f000 faa8 	bl	80080e4 <memmove>
 8007b94:	68a3      	ldr	r3, [r4, #8]
 8007b96:	1b9b      	subs	r3, r3, r6
 8007b98:	60a3      	str	r3, [r4, #8]
 8007b9a:	6823      	ldr	r3, [r4, #0]
 8007b9c:	4433      	add	r3, r6
 8007b9e:	6023      	str	r3, [r4, #0]
 8007ba0:	2000      	movs	r0, #0
 8007ba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ba6:	462a      	mov	r2, r5
 8007ba8:	f000 fac6 	bl	8008138 <_realloc_r>
 8007bac:	4606      	mov	r6, r0
 8007bae:	2800      	cmp	r0, #0
 8007bb0:	d1e0      	bne.n	8007b74 <__ssputs_r+0x5c>
 8007bb2:	6921      	ldr	r1, [r4, #16]
 8007bb4:	4650      	mov	r0, sl
 8007bb6:	f7ff feb7 	bl	8007928 <_free_r>
 8007bba:	230c      	movs	r3, #12
 8007bbc:	f8ca 3000 	str.w	r3, [sl]
 8007bc0:	89a3      	ldrh	r3, [r4, #12]
 8007bc2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007bc6:	81a3      	strh	r3, [r4, #12]
 8007bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8007bcc:	e7e9      	b.n	8007ba2 <__ssputs_r+0x8a>
	...

08007bd0 <_svfiprintf_r>:
 8007bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bd4:	4698      	mov	r8, r3
 8007bd6:	898b      	ldrh	r3, [r1, #12]
 8007bd8:	061b      	lsls	r3, r3, #24
 8007bda:	b09d      	sub	sp, #116	@ 0x74
 8007bdc:	4607      	mov	r7, r0
 8007bde:	460d      	mov	r5, r1
 8007be0:	4614      	mov	r4, r2
 8007be2:	d510      	bpl.n	8007c06 <_svfiprintf_r+0x36>
 8007be4:	690b      	ldr	r3, [r1, #16]
 8007be6:	b973      	cbnz	r3, 8007c06 <_svfiprintf_r+0x36>
 8007be8:	2140      	movs	r1, #64	@ 0x40
 8007bea:	f7ff ff09 	bl	8007a00 <_malloc_r>
 8007bee:	6028      	str	r0, [r5, #0]
 8007bf0:	6128      	str	r0, [r5, #16]
 8007bf2:	b930      	cbnz	r0, 8007c02 <_svfiprintf_r+0x32>
 8007bf4:	230c      	movs	r3, #12
 8007bf6:	603b      	str	r3, [r7, #0]
 8007bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8007bfc:	b01d      	add	sp, #116	@ 0x74
 8007bfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c02:	2340      	movs	r3, #64	@ 0x40
 8007c04:	616b      	str	r3, [r5, #20]
 8007c06:	2300      	movs	r3, #0
 8007c08:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c0a:	2320      	movs	r3, #32
 8007c0c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007c10:	f8cd 800c 	str.w	r8, [sp, #12]
 8007c14:	2330      	movs	r3, #48	@ 0x30
 8007c16:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007db4 <_svfiprintf_r+0x1e4>
 8007c1a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007c1e:	f04f 0901 	mov.w	r9, #1
 8007c22:	4623      	mov	r3, r4
 8007c24:	469a      	mov	sl, r3
 8007c26:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c2a:	b10a      	cbz	r2, 8007c30 <_svfiprintf_r+0x60>
 8007c2c:	2a25      	cmp	r2, #37	@ 0x25
 8007c2e:	d1f9      	bne.n	8007c24 <_svfiprintf_r+0x54>
 8007c30:	ebba 0b04 	subs.w	fp, sl, r4
 8007c34:	d00b      	beq.n	8007c4e <_svfiprintf_r+0x7e>
 8007c36:	465b      	mov	r3, fp
 8007c38:	4622      	mov	r2, r4
 8007c3a:	4629      	mov	r1, r5
 8007c3c:	4638      	mov	r0, r7
 8007c3e:	f7ff ff6b 	bl	8007b18 <__ssputs_r>
 8007c42:	3001      	adds	r0, #1
 8007c44:	f000 80a7 	beq.w	8007d96 <_svfiprintf_r+0x1c6>
 8007c48:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007c4a:	445a      	add	r2, fp
 8007c4c:	9209      	str	r2, [sp, #36]	@ 0x24
 8007c4e:	f89a 3000 	ldrb.w	r3, [sl]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	f000 809f 	beq.w	8007d96 <_svfiprintf_r+0x1c6>
 8007c58:	2300      	movs	r3, #0
 8007c5a:	f04f 32ff 	mov.w	r2, #4294967295
 8007c5e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007c62:	f10a 0a01 	add.w	sl, sl, #1
 8007c66:	9304      	str	r3, [sp, #16]
 8007c68:	9307      	str	r3, [sp, #28]
 8007c6a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007c6e:	931a      	str	r3, [sp, #104]	@ 0x68
 8007c70:	4654      	mov	r4, sl
 8007c72:	2205      	movs	r2, #5
 8007c74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c78:	484e      	ldr	r0, [pc, #312]	@ (8007db4 <_svfiprintf_r+0x1e4>)
 8007c7a:	f7f8 fab1 	bl	80001e0 <memchr>
 8007c7e:	9a04      	ldr	r2, [sp, #16]
 8007c80:	b9d8      	cbnz	r0, 8007cba <_svfiprintf_r+0xea>
 8007c82:	06d0      	lsls	r0, r2, #27
 8007c84:	bf44      	itt	mi
 8007c86:	2320      	movmi	r3, #32
 8007c88:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007c8c:	0711      	lsls	r1, r2, #28
 8007c8e:	bf44      	itt	mi
 8007c90:	232b      	movmi	r3, #43	@ 0x2b
 8007c92:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007c96:	f89a 3000 	ldrb.w	r3, [sl]
 8007c9a:	2b2a      	cmp	r3, #42	@ 0x2a
 8007c9c:	d015      	beq.n	8007cca <_svfiprintf_r+0xfa>
 8007c9e:	9a07      	ldr	r2, [sp, #28]
 8007ca0:	4654      	mov	r4, sl
 8007ca2:	2000      	movs	r0, #0
 8007ca4:	f04f 0c0a 	mov.w	ip, #10
 8007ca8:	4621      	mov	r1, r4
 8007caa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007cae:	3b30      	subs	r3, #48	@ 0x30
 8007cb0:	2b09      	cmp	r3, #9
 8007cb2:	d94b      	bls.n	8007d4c <_svfiprintf_r+0x17c>
 8007cb4:	b1b0      	cbz	r0, 8007ce4 <_svfiprintf_r+0x114>
 8007cb6:	9207      	str	r2, [sp, #28]
 8007cb8:	e014      	b.n	8007ce4 <_svfiprintf_r+0x114>
 8007cba:	eba0 0308 	sub.w	r3, r0, r8
 8007cbe:	fa09 f303 	lsl.w	r3, r9, r3
 8007cc2:	4313      	orrs	r3, r2
 8007cc4:	9304      	str	r3, [sp, #16]
 8007cc6:	46a2      	mov	sl, r4
 8007cc8:	e7d2      	b.n	8007c70 <_svfiprintf_r+0xa0>
 8007cca:	9b03      	ldr	r3, [sp, #12]
 8007ccc:	1d19      	adds	r1, r3, #4
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	9103      	str	r1, [sp, #12]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	bfbb      	ittet	lt
 8007cd6:	425b      	neglt	r3, r3
 8007cd8:	f042 0202 	orrlt.w	r2, r2, #2
 8007cdc:	9307      	strge	r3, [sp, #28]
 8007cde:	9307      	strlt	r3, [sp, #28]
 8007ce0:	bfb8      	it	lt
 8007ce2:	9204      	strlt	r2, [sp, #16]
 8007ce4:	7823      	ldrb	r3, [r4, #0]
 8007ce6:	2b2e      	cmp	r3, #46	@ 0x2e
 8007ce8:	d10a      	bne.n	8007d00 <_svfiprintf_r+0x130>
 8007cea:	7863      	ldrb	r3, [r4, #1]
 8007cec:	2b2a      	cmp	r3, #42	@ 0x2a
 8007cee:	d132      	bne.n	8007d56 <_svfiprintf_r+0x186>
 8007cf0:	9b03      	ldr	r3, [sp, #12]
 8007cf2:	1d1a      	adds	r2, r3, #4
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	9203      	str	r2, [sp, #12]
 8007cf8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007cfc:	3402      	adds	r4, #2
 8007cfe:	9305      	str	r3, [sp, #20]
 8007d00:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007dc4 <_svfiprintf_r+0x1f4>
 8007d04:	7821      	ldrb	r1, [r4, #0]
 8007d06:	2203      	movs	r2, #3
 8007d08:	4650      	mov	r0, sl
 8007d0a:	f7f8 fa69 	bl	80001e0 <memchr>
 8007d0e:	b138      	cbz	r0, 8007d20 <_svfiprintf_r+0x150>
 8007d10:	9b04      	ldr	r3, [sp, #16]
 8007d12:	eba0 000a 	sub.w	r0, r0, sl
 8007d16:	2240      	movs	r2, #64	@ 0x40
 8007d18:	4082      	lsls	r2, r0
 8007d1a:	4313      	orrs	r3, r2
 8007d1c:	3401      	adds	r4, #1
 8007d1e:	9304      	str	r3, [sp, #16]
 8007d20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d24:	4824      	ldr	r0, [pc, #144]	@ (8007db8 <_svfiprintf_r+0x1e8>)
 8007d26:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007d2a:	2206      	movs	r2, #6
 8007d2c:	f7f8 fa58 	bl	80001e0 <memchr>
 8007d30:	2800      	cmp	r0, #0
 8007d32:	d036      	beq.n	8007da2 <_svfiprintf_r+0x1d2>
 8007d34:	4b21      	ldr	r3, [pc, #132]	@ (8007dbc <_svfiprintf_r+0x1ec>)
 8007d36:	bb1b      	cbnz	r3, 8007d80 <_svfiprintf_r+0x1b0>
 8007d38:	9b03      	ldr	r3, [sp, #12]
 8007d3a:	3307      	adds	r3, #7
 8007d3c:	f023 0307 	bic.w	r3, r3, #7
 8007d40:	3308      	adds	r3, #8
 8007d42:	9303      	str	r3, [sp, #12]
 8007d44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d46:	4433      	add	r3, r6
 8007d48:	9309      	str	r3, [sp, #36]	@ 0x24
 8007d4a:	e76a      	b.n	8007c22 <_svfiprintf_r+0x52>
 8007d4c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007d50:	460c      	mov	r4, r1
 8007d52:	2001      	movs	r0, #1
 8007d54:	e7a8      	b.n	8007ca8 <_svfiprintf_r+0xd8>
 8007d56:	2300      	movs	r3, #0
 8007d58:	3401      	adds	r4, #1
 8007d5a:	9305      	str	r3, [sp, #20]
 8007d5c:	4619      	mov	r1, r3
 8007d5e:	f04f 0c0a 	mov.w	ip, #10
 8007d62:	4620      	mov	r0, r4
 8007d64:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007d68:	3a30      	subs	r2, #48	@ 0x30
 8007d6a:	2a09      	cmp	r2, #9
 8007d6c:	d903      	bls.n	8007d76 <_svfiprintf_r+0x1a6>
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d0c6      	beq.n	8007d00 <_svfiprintf_r+0x130>
 8007d72:	9105      	str	r1, [sp, #20]
 8007d74:	e7c4      	b.n	8007d00 <_svfiprintf_r+0x130>
 8007d76:	fb0c 2101 	mla	r1, ip, r1, r2
 8007d7a:	4604      	mov	r4, r0
 8007d7c:	2301      	movs	r3, #1
 8007d7e:	e7f0      	b.n	8007d62 <_svfiprintf_r+0x192>
 8007d80:	ab03      	add	r3, sp, #12
 8007d82:	9300      	str	r3, [sp, #0]
 8007d84:	462a      	mov	r2, r5
 8007d86:	4b0e      	ldr	r3, [pc, #56]	@ (8007dc0 <_svfiprintf_r+0x1f0>)
 8007d88:	a904      	add	r1, sp, #16
 8007d8a:	4638      	mov	r0, r7
 8007d8c:	f3af 8000 	nop.w
 8007d90:	1c42      	adds	r2, r0, #1
 8007d92:	4606      	mov	r6, r0
 8007d94:	d1d6      	bne.n	8007d44 <_svfiprintf_r+0x174>
 8007d96:	89ab      	ldrh	r3, [r5, #12]
 8007d98:	065b      	lsls	r3, r3, #25
 8007d9a:	f53f af2d 	bmi.w	8007bf8 <_svfiprintf_r+0x28>
 8007d9e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007da0:	e72c      	b.n	8007bfc <_svfiprintf_r+0x2c>
 8007da2:	ab03      	add	r3, sp, #12
 8007da4:	9300      	str	r3, [sp, #0]
 8007da6:	462a      	mov	r2, r5
 8007da8:	4b05      	ldr	r3, [pc, #20]	@ (8007dc0 <_svfiprintf_r+0x1f0>)
 8007daa:	a904      	add	r1, sp, #16
 8007dac:	4638      	mov	r0, r7
 8007dae:	f000 f879 	bl	8007ea4 <_printf_i>
 8007db2:	e7ed      	b.n	8007d90 <_svfiprintf_r+0x1c0>
 8007db4:	0800828c 	.word	0x0800828c
 8007db8:	08008296 	.word	0x08008296
 8007dbc:	00000000 	.word	0x00000000
 8007dc0:	08007b19 	.word	0x08007b19
 8007dc4:	08008292 	.word	0x08008292

08007dc8 <_printf_common>:
 8007dc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007dcc:	4616      	mov	r6, r2
 8007dce:	4698      	mov	r8, r3
 8007dd0:	688a      	ldr	r2, [r1, #8]
 8007dd2:	690b      	ldr	r3, [r1, #16]
 8007dd4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007dd8:	4293      	cmp	r3, r2
 8007dda:	bfb8      	it	lt
 8007ddc:	4613      	movlt	r3, r2
 8007dde:	6033      	str	r3, [r6, #0]
 8007de0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007de4:	4607      	mov	r7, r0
 8007de6:	460c      	mov	r4, r1
 8007de8:	b10a      	cbz	r2, 8007dee <_printf_common+0x26>
 8007dea:	3301      	adds	r3, #1
 8007dec:	6033      	str	r3, [r6, #0]
 8007dee:	6823      	ldr	r3, [r4, #0]
 8007df0:	0699      	lsls	r1, r3, #26
 8007df2:	bf42      	ittt	mi
 8007df4:	6833      	ldrmi	r3, [r6, #0]
 8007df6:	3302      	addmi	r3, #2
 8007df8:	6033      	strmi	r3, [r6, #0]
 8007dfa:	6825      	ldr	r5, [r4, #0]
 8007dfc:	f015 0506 	ands.w	r5, r5, #6
 8007e00:	d106      	bne.n	8007e10 <_printf_common+0x48>
 8007e02:	f104 0a19 	add.w	sl, r4, #25
 8007e06:	68e3      	ldr	r3, [r4, #12]
 8007e08:	6832      	ldr	r2, [r6, #0]
 8007e0a:	1a9b      	subs	r3, r3, r2
 8007e0c:	42ab      	cmp	r3, r5
 8007e0e:	dc26      	bgt.n	8007e5e <_printf_common+0x96>
 8007e10:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007e14:	6822      	ldr	r2, [r4, #0]
 8007e16:	3b00      	subs	r3, #0
 8007e18:	bf18      	it	ne
 8007e1a:	2301      	movne	r3, #1
 8007e1c:	0692      	lsls	r2, r2, #26
 8007e1e:	d42b      	bmi.n	8007e78 <_printf_common+0xb0>
 8007e20:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007e24:	4641      	mov	r1, r8
 8007e26:	4638      	mov	r0, r7
 8007e28:	47c8      	blx	r9
 8007e2a:	3001      	adds	r0, #1
 8007e2c:	d01e      	beq.n	8007e6c <_printf_common+0xa4>
 8007e2e:	6823      	ldr	r3, [r4, #0]
 8007e30:	6922      	ldr	r2, [r4, #16]
 8007e32:	f003 0306 	and.w	r3, r3, #6
 8007e36:	2b04      	cmp	r3, #4
 8007e38:	bf02      	ittt	eq
 8007e3a:	68e5      	ldreq	r5, [r4, #12]
 8007e3c:	6833      	ldreq	r3, [r6, #0]
 8007e3e:	1aed      	subeq	r5, r5, r3
 8007e40:	68a3      	ldr	r3, [r4, #8]
 8007e42:	bf0c      	ite	eq
 8007e44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007e48:	2500      	movne	r5, #0
 8007e4a:	4293      	cmp	r3, r2
 8007e4c:	bfc4      	itt	gt
 8007e4e:	1a9b      	subgt	r3, r3, r2
 8007e50:	18ed      	addgt	r5, r5, r3
 8007e52:	2600      	movs	r6, #0
 8007e54:	341a      	adds	r4, #26
 8007e56:	42b5      	cmp	r5, r6
 8007e58:	d11a      	bne.n	8007e90 <_printf_common+0xc8>
 8007e5a:	2000      	movs	r0, #0
 8007e5c:	e008      	b.n	8007e70 <_printf_common+0xa8>
 8007e5e:	2301      	movs	r3, #1
 8007e60:	4652      	mov	r2, sl
 8007e62:	4641      	mov	r1, r8
 8007e64:	4638      	mov	r0, r7
 8007e66:	47c8      	blx	r9
 8007e68:	3001      	adds	r0, #1
 8007e6a:	d103      	bne.n	8007e74 <_printf_common+0xac>
 8007e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8007e70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e74:	3501      	adds	r5, #1
 8007e76:	e7c6      	b.n	8007e06 <_printf_common+0x3e>
 8007e78:	18e1      	adds	r1, r4, r3
 8007e7a:	1c5a      	adds	r2, r3, #1
 8007e7c:	2030      	movs	r0, #48	@ 0x30
 8007e7e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007e82:	4422      	add	r2, r4
 8007e84:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007e88:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007e8c:	3302      	adds	r3, #2
 8007e8e:	e7c7      	b.n	8007e20 <_printf_common+0x58>
 8007e90:	2301      	movs	r3, #1
 8007e92:	4622      	mov	r2, r4
 8007e94:	4641      	mov	r1, r8
 8007e96:	4638      	mov	r0, r7
 8007e98:	47c8      	blx	r9
 8007e9a:	3001      	adds	r0, #1
 8007e9c:	d0e6      	beq.n	8007e6c <_printf_common+0xa4>
 8007e9e:	3601      	adds	r6, #1
 8007ea0:	e7d9      	b.n	8007e56 <_printf_common+0x8e>
	...

08007ea4 <_printf_i>:
 8007ea4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007ea8:	7e0f      	ldrb	r7, [r1, #24]
 8007eaa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007eac:	2f78      	cmp	r7, #120	@ 0x78
 8007eae:	4691      	mov	r9, r2
 8007eb0:	4680      	mov	r8, r0
 8007eb2:	460c      	mov	r4, r1
 8007eb4:	469a      	mov	sl, r3
 8007eb6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007eba:	d807      	bhi.n	8007ecc <_printf_i+0x28>
 8007ebc:	2f62      	cmp	r7, #98	@ 0x62
 8007ebe:	d80a      	bhi.n	8007ed6 <_printf_i+0x32>
 8007ec0:	2f00      	cmp	r7, #0
 8007ec2:	f000 80d2 	beq.w	800806a <_printf_i+0x1c6>
 8007ec6:	2f58      	cmp	r7, #88	@ 0x58
 8007ec8:	f000 80b9 	beq.w	800803e <_printf_i+0x19a>
 8007ecc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007ed0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007ed4:	e03a      	b.n	8007f4c <_printf_i+0xa8>
 8007ed6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007eda:	2b15      	cmp	r3, #21
 8007edc:	d8f6      	bhi.n	8007ecc <_printf_i+0x28>
 8007ede:	a101      	add	r1, pc, #4	@ (adr r1, 8007ee4 <_printf_i+0x40>)
 8007ee0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007ee4:	08007f3d 	.word	0x08007f3d
 8007ee8:	08007f51 	.word	0x08007f51
 8007eec:	08007ecd 	.word	0x08007ecd
 8007ef0:	08007ecd 	.word	0x08007ecd
 8007ef4:	08007ecd 	.word	0x08007ecd
 8007ef8:	08007ecd 	.word	0x08007ecd
 8007efc:	08007f51 	.word	0x08007f51
 8007f00:	08007ecd 	.word	0x08007ecd
 8007f04:	08007ecd 	.word	0x08007ecd
 8007f08:	08007ecd 	.word	0x08007ecd
 8007f0c:	08007ecd 	.word	0x08007ecd
 8007f10:	08008051 	.word	0x08008051
 8007f14:	08007f7b 	.word	0x08007f7b
 8007f18:	0800800b 	.word	0x0800800b
 8007f1c:	08007ecd 	.word	0x08007ecd
 8007f20:	08007ecd 	.word	0x08007ecd
 8007f24:	08008073 	.word	0x08008073
 8007f28:	08007ecd 	.word	0x08007ecd
 8007f2c:	08007f7b 	.word	0x08007f7b
 8007f30:	08007ecd 	.word	0x08007ecd
 8007f34:	08007ecd 	.word	0x08007ecd
 8007f38:	08008013 	.word	0x08008013
 8007f3c:	6833      	ldr	r3, [r6, #0]
 8007f3e:	1d1a      	adds	r2, r3, #4
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	6032      	str	r2, [r6, #0]
 8007f44:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007f48:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007f4c:	2301      	movs	r3, #1
 8007f4e:	e09d      	b.n	800808c <_printf_i+0x1e8>
 8007f50:	6833      	ldr	r3, [r6, #0]
 8007f52:	6820      	ldr	r0, [r4, #0]
 8007f54:	1d19      	adds	r1, r3, #4
 8007f56:	6031      	str	r1, [r6, #0]
 8007f58:	0606      	lsls	r6, r0, #24
 8007f5a:	d501      	bpl.n	8007f60 <_printf_i+0xbc>
 8007f5c:	681d      	ldr	r5, [r3, #0]
 8007f5e:	e003      	b.n	8007f68 <_printf_i+0xc4>
 8007f60:	0645      	lsls	r5, r0, #25
 8007f62:	d5fb      	bpl.n	8007f5c <_printf_i+0xb8>
 8007f64:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007f68:	2d00      	cmp	r5, #0
 8007f6a:	da03      	bge.n	8007f74 <_printf_i+0xd0>
 8007f6c:	232d      	movs	r3, #45	@ 0x2d
 8007f6e:	426d      	negs	r5, r5
 8007f70:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007f74:	4859      	ldr	r0, [pc, #356]	@ (80080dc <_printf_i+0x238>)
 8007f76:	230a      	movs	r3, #10
 8007f78:	e011      	b.n	8007f9e <_printf_i+0xfa>
 8007f7a:	6821      	ldr	r1, [r4, #0]
 8007f7c:	6833      	ldr	r3, [r6, #0]
 8007f7e:	0608      	lsls	r0, r1, #24
 8007f80:	f853 5b04 	ldr.w	r5, [r3], #4
 8007f84:	d402      	bmi.n	8007f8c <_printf_i+0xe8>
 8007f86:	0649      	lsls	r1, r1, #25
 8007f88:	bf48      	it	mi
 8007f8a:	b2ad      	uxthmi	r5, r5
 8007f8c:	2f6f      	cmp	r7, #111	@ 0x6f
 8007f8e:	4853      	ldr	r0, [pc, #332]	@ (80080dc <_printf_i+0x238>)
 8007f90:	6033      	str	r3, [r6, #0]
 8007f92:	bf14      	ite	ne
 8007f94:	230a      	movne	r3, #10
 8007f96:	2308      	moveq	r3, #8
 8007f98:	2100      	movs	r1, #0
 8007f9a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007f9e:	6866      	ldr	r6, [r4, #4]
 8007fa0:	60a6      	str	r6, [r4, #8]
 8007fa2:	2e00      	cmp	r6, #0
 8007fa4:	bfa2      	ittt	ge
 8007fa6:	6821      	ldrge	r1, [r4, #0]
 8007fa8:	f021 0104 	bicge.w	r1, r1, #4
 8007fac:	6021      	strge	r1, [r4, #0]
 8007fae:	b90d      	cbnz	r5, 8007fb4 <_printf_i+0x110>
 8007fb0:	2e00      	cmp	r6, #0
 8007fb2:	d04b      	beq.n	800804c <_printf_i+0x1a8>
 8007fb4:	4616      	mov	r6, r2
 8007fb6:	fbb5 f1f3 	udiv	r1, r5, r3
 8007fba:	fb03 5711 	mls	r7, r3, r1, r5
 8007fbe:	5dc7      	ldrb	r7, [r0, r7]
 8007fc0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007fc4:	462f      	mov	r7, r5
 8007fc6:	42bb      	cmp	r3, r7
 8007fc8:	460d      	mov	r5, r1
 8007fca:	d9f4      	bls.n	8007fb6 <_printf_i+0x112>
 8007fcc:	2b08      	cmp	r3, #8
 8007fce:	d10b      	bne.n	8007fe8 <_printf_i+0x144>
 8007fd0:	6823      	ldr	r3, [r4, #0]
 8007fd2:	07df      	lsls	r7, r3, #31
 8007fd4:	d508      	bpl.n	8007fe8 <_printf_i+0x144>
 8007fd6:	6923      	ldr	r3, [r4, #16]
 8007fd8:	6861      	ldr	r1, [r4, #4]
 8007fda:	4299      	cmp	r1, r3
 8007fdc:	bfde      	ittt	le
 8007fde:	2330      	movle	r3, #48	@ 0x30
 8007fe0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007fe4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007fe8:	1b92      	subs	r2, r2, r6
 8007fea:	6122      	str	r2, [r4, #16]
 8007fec:	f8cd a000 	str.w	sl, [sp]
 8007ff0:	464b      	mov	r3, r9
 8007ff2:	aa03      	add	r2, sp, #12
 8007ff4:	4621      	mov	r1, r4
 8007ff6:	4640      	mov	r0, r8
 8007ff8:	f7ff fee6 	bl	8007dc8 <_printf_common>
 8007ffc:	3001      	adds	r0, #1
 8007ffe:	d14a      	bne.n	8008096 <_printf_i+0x1f2>
 8008000:	f04f 30ff 	mov.w	r0, #4294967295
 8008004:	b004      	add	sp, #16
 8008006:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800800a:	6823      	ldr	r3, [r4, #0]
 800800c:	f043 0320 	orr.w	r3, r3, #32
 8008010:	6023      	str	r3, [r4, #0]
 8008012:	4833      	ldr	r0, [pc, #204]	@ (80080e0 <_printf_i+0x23c>)
 8008014:	2778      	movs	r7, #120	@ 0x78
 8008016:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800801a:	6823      	ldr	r3, [r4, #0]
 800801c:	6831      	ldr	r1, [r6, #0]
 800801e:	061f      	lsls	r7, r3, #24
 8008020:	f851 5b04 	ldr.w	r5, [r1], #4
 8008024:	d402      	bmi.n	800802c <_printf_i+0x188>
 8008026:	065f      	lsls	r7, r3, #25
 8008028:	bf48      	it	mi
 800802a:	b2ad      	uxthmi	r5, r5
 800802c:	6031      	str	r1, [r6, #0]
 800802e:	07d9      	lsls	r1, r3, #31
 8008030:	bf44      	itt	mi
 8008032:	f043 0320 	orrmi.w	r3, r3, #32
 8008036:	6023      	strmi	r3, [r4, #0]
 8008038:	b11d      	cbz	r5, 8008042 <_printf_i+0x19e>
 800803a:	2310      	movs	r3, #16
 800803c:	e7ac      	b.n	8007f98 <_printf_i+0xf4>
 800803e:	4827      	ldr	r0, [pc, #156]	@ (80080dc <_printf_i+0x238>)
 8008040:	e7e9      	b.n	8008016 <_printf_i+0x172>
 8008042:	6823      	ldr	r3, [r4, #0]
 8008044:	f023 0320 	bic.w	r3, r3, #32
 8008048:	6023      	str	r3, [r4, #0]
 800804a:	e7f6      	b.n	800803a <_printf_i+0x196>
 800804c:	4616      	mov	r6, r2
 800804e:	e7bd      	b.n	8007fcc <_printf_i+0x128>
 8008050:	6833      	ldr	r3, [r6, #0]
 8008052:	6825      	ldr	r5, [r4, #0]
 8008054:	6961      	ldr	r1, [r4, #20]
 8008056:	1d18      	adds	r0, r3, #4
 8008058:	6030      	str	r0, [r6, #0]
 800805a:	062e      	lsls	r6, r5, #24
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	d501      	bpl.n	8008064 <_printf_i+0x1c0>
 8008060:	6019      	str	r1, [r3, #0]
 8008062:	e002      	b.n	800806a <_printf_i+0x1c6>
 8008064:	0668      	lsls	r0, r5, #25
 8008066:	d5fb      	bpl.n	8008060 <_printf_i+0x1bc>
 8008068:	8019      	strh	r1, [r3, #0]
 800806a:	2300      	movs	r3, #0
 800806c:	6123      	str	r3, [r4, #16]
 800806e:	4616      	mov	r6, r2
 8008070:	e7bc      	b.n	8007fec <_printf_i+0x148>
 8008072:	6833      	ldr	r3, [r6, #0]
 8008074:	1d1a      	adds	r2, r3, #4
 8008076:	6032      	str	r2, [r6, #0]
 8008078:	681e      	ldr	r6, [r3, #0]
 800807a:	6862      	ldr	r2, [r4, #4]
 800807c:	2100      	movs	r1, #0
 800807e:	4630      	mov	r0, r6
 8008080:	f7f8 f8ae 	bl	80001e0 <memchr>
 8008084:	b108      	cbz	r0, 800808a <_printf_i+0x1e6>
 8008086:	1b80      	subs	r0, r0, r6
 8008088:	6060      	str	r0, [r4, #4]
 800808a:	6863      	ldr	r3, [r4, #4]
 800808c:	6123      	str	r3, [r4, #16]
 800808e:	2300      	movs	r3, #0
 8008090:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008094:	e7aa      	b.n	8007fec <_printf_i+0x148>
 8008096:	6923      	ldr	r3, [r4, #16]
 8008098:	4632      	mov	r2, r6
 800809a:	4649      	mov	r1, r9
 800809c:	4640      	mov	r0, r8
 800809e:	47d0      	blx	sl
 80080a0:	3001      	adds	r0, #1
 80080a2:	d0ad      	beq.n	8008000 <_printf_i+0x15c>
 80080a4:	6823      	ldr	r3, [r4, #0]
 80080a6:	079b      	lsls	r3, r3, #30
 80080a8:	d413      	bmi.n	80080d2 <_printf_i+0x22e>
 80080aa:	68e0      	ldr	r0, [r4, #12]
 80080ac:	9b03      	ldr	r3, [sp, #12]
 80080ae:	4298      	cmp	r0, r3
 80080b0:	bfb8      	it	lt
 80080b2:	4618      	movlt	r0, r3
 80080b4:	e7a6      	b.n	8008004 <_printf_i+0x160>
 80080b6:	2301      	movs	r3, #1
 80080b8:	4632      	mov	r2, r6
 80080ba:	4649      	mov	r1, r9
 80080bc:	4640      	mov	r0, r8
 80080be:	47d0      	blx	sl
 80080c0:	3001      	adds	r0, #1
 80080c2:	d09d      	beq.n	8008000 <_printf_i+0x15c>
 80080c4:	3501      	adds	r5, #1
 80080c6:	68e3      	ldr	r3, [r4, #12]
 80080c8:	9903      	ldr	r1, [sp, #12]
 80080ca:	1a5b      	subs	r3, r3, r1
 80080cc:	42ab      	cmp	r3, r5
 80080ce:	dcf2      	bgt.n	80080b6 <_printf_i+0x212>
 80080d0:	e7eb      	b.n	80080aa <_printf_i+0x206>
 80080d2:	2500      	movs	r5, #0
 80080d4:	f104 0619 	add.w	r6, r4, #25
 80080d8:	e7f5      	b.n	80080c6 <_printf_i+0x222>
 80080da:	bf00      	nop
 80080dc:	0800829d 	.word	0x0800829d
 80080e0:	080082ae 	.word	0x080082ae

080080e4 <memmove>:
 80080e4:	4288      	cmp	r0, r1
 80080e6:	b510      	push	{r4, lr}
 80080e8:	eb01 0402 	add.w	r4, r1, r2
 80080ec:	d902      	bls.n	80080f4 <memmove+0x10>
 80080ee:	4284      	cmp	r4, r0
 80080f0:	4623      	mov	r3, r4
 80080f2:	d807      	bhi.n	8008104 <memmove+0x20>
 80080f4:	1e43      	subs	r3, r0, #1
 80080f6:	42a1      	cmp	r1, r4
 80080f8:	d008      	beq.n	800810c <memmove+0x28>
 80080fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80080fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008102:	e7f8      	b.n	80080f6 <memmove+0x12>
 8008104:	4402      	add	r2, r0
 8008106:	4601      	mov	r1, r0
 8008108:	428a      	cmp	r2, r1
 800810a:	d100      	bne.n	800810e <memmove+0x2a>
 800810c:	bd10      	pop	{r4, pc}
 800810e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008112:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008116:	e7f7      	b.n	8008108 <memmove+0x24>

08008118 <_sbrk_r>:
 8008118:	b538      	push	{r3, r4, r5, lr}
 800811a:	4d06      	ldr	r5, [pc, #24]	@ (8008134 <_sbrk_r+0x1c>)
 800811c:	2300      	movs	r3, #0
 800811e:	4604      	mov	r4, r0
 8008120:	4608      	mov	r0, r1
 8008122:	602b      	str	r3, [r5, #0]
 8008124:	f7f9 f956 	bl	80013d4 <_sbrk>
 8008128:	1c43      	adds	r3, r0, #1
 800812a:	d102      	bne.n	8008132 <_sbrk_r+0x1a>
 800812c:	682b      	ldr	r3, [r5, #0]
 800812e:	b103      	cbz	r3, 8008132 <_sbrk_r+0x1a>
 8008130:	6023      	str	r3, [r4, #0]
 8008132:	bd38      	pop	{r3, r4, r5, pc}
 8008134:	20002fcc 	.word	0x20002fcc

08008138 <_realloc_r>:
 8008138:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800813c:	4680      	mov	r8, r0
 800813e:	4615      	mov	r5, r2
 8008140:	460c      	mov	r4, r1
 8008142:	b921      	cbnz	r1, 800814e <_realloc_r+0x16>
 8008144:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008148:	4611      	mov	r1, r2
 800814a:	f7ff bc59 	b.w	8007a00 <_malloc_r>
 800814e:	b92a      	cbnz	r2, 800815c <_realloc_r+0x24>
 8008150:	f7ff fbea 	bl	8007928 <_free_r>
 8008154:	2400      	movs	r4, #0
 8008156:	4620      	mov	r0, r4
 8008158:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800815c:	f000 f81a 	bl	8008194 <_malloc_usable_size_r>
 8008160:	4285      	cmp	r5, r0
 8008162:	4606      	mov	r6, r0
 8008164:	d802      	bhi.n	800816c <_realloc_r+0x34>
 8008166:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800816a:	d8f4      	bhi.n	8008156 <_realloc_r+0x1e>
 800816c:	4629      	mov	r1, r5
 800816e:	4640      	mov	r0, r8
 8008170:	f7ff fc46 	bl	8007a00 <_malloc_r>
 8008174:	4607      	mov	r7, r0
 8008176:	2800      	cmp	r0, #0
 8008178:	d0ec      	beq.n	8008154 <_realloc_r+0x1c>
 800817a:	42b5      	cmp	r5, r6
 800817c:	462a      	mov	r2, r5
 800817e:	4621      	mov	r1, r4
 8008180:	bf28      	it	cs
 8008182:	4632      	movcs	r2, r6
 8008184:	f7ff fbc2 	bl	800790c <memcpy>
 8008188:	4621      	mov	r1, r4
 800818a:	4640      	mov	r0, r8
 800818c:	f7ff fbcc 	bl	8007928 <_free_r>
 8008190:	463c      	mov	r4, r7
 8008192:	e7e0      	b.n	8008156 <_realloc_r+0x1e>

08008194 <_malloc_usable_size_r>:
 8008194:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008198:	1f18      	subs	r0, r3, #4
 800819a:	2b00      	cmp	r3, #0
 800819c:	bfbc      	itt	lt
 800819e:	580b      	ldrlt	r3, [r1, r0]
 80081a0:	18c0      	addlt	r0, r0, r3
 80081a2:	4770      	bx	lr

080081a4 <_init>:
 80081a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081a6:	bf00      	nop
 80081a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081aa:	bc08      	pop	{r3}
 80081ac:	469e      	mov	lr, r3
 80081ae:	4770      	bx	lr

080081b0 <_fini>:
 80081b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081b2:	bf00      	nop
 80081b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081b6:	bc08      	pop	{r3}
 80081b8:	469e      	mov	lr, r3
 80081ba:	4770      	bx	lr
