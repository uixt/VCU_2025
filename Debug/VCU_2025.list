
VCU_2025.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b20  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08005cb0  08005cb0  00006cb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d5c  08005d5c  00007060  2**0
                  CONTENTS
  4 .ARM          00000008  08005d5c  08005d5c  00006d5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d64  08005d64  00007060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d64  08005d64  00006d64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005d68  08005d68  00006d68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08005d6c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001258  20000060  08005dcc  00007060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200012b8  08005dcc  000072b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013d2f  00000000  00000000  00007090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002beb  00000000  00000000  0001adbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011c0  00000000  00000000  0001d9b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000dce  00000000  00000000  0001eb70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d0e5  00000000  00000000  0001f93e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001501e  00000000  00000000  0003ca23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b0b81  00000000  00000000  00051a41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001025c2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f48  00000000  00000000  00102608  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  00107550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005c98 	.word	0x08005c98

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08005c98 	.word	0x08005c98

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000280:	b480      	push	{r7}
 8000282:	b085      	sub	sp, #20
 8000284:	af00      	add	r7, sp, #0
 8000286:	60f8      	str	r0, [r7, #12]
 8000288:	60b9      	str	r1, [r7, #8]
 800028a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800028c:	68fb      	ldr	r3, [r7, #12]
 800028e:	4a07      	ldr	r2, [pc, #28]	@ (80002ac <vApplicationGetIdleTaskMemory+0x2c>)
 8000290:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000292:	68bb      	ldr	r3, [r7, #8]
 8000294:	4a06      	ldr	r2, [pc, #24]	@ (80002b0 <vApplicationGetIdleTaskMemory+0x30>)
 8000296:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	2280      	movs	r2, #128	@ 0x80
 800029c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800029e:	bf00      	nop
 80002a0:	3714      	adds	r7, #20
 80002a2:	46bd      	mov	sp, r7
 80002a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a8:	4770      	bx	lr
 80002aa:	bf00      	nop
 80002ac:	2000007c 	.word	0x2000007c
 80002b0:	200000d0 	.word	0x200000d0

080002b4 <HAL_CAN_RxFifo0MsgPendingCallback>:
/* USER CODE BEGIN 0 */
volatile uint8_t datacheck = 0;

CAN_RxHeaderTypeDef   RxHeader;
uint8_t               RxData[8];
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b092      	sub	sp, #72	@ 0x48
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	6078      	str	r0, [r7, #4]
if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 80002bc:	4b12      	ldr	r3, [pc, #72]	@ (8000308 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 80002be:	4a13      	ldr	r2, [pc, #76]	@ (800030c <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 80002c0:	2100      	movs	r1, #0
 80002c2:	6878      	ldr	r0, [r7, #4]
 80002c4:	f000 fec5 	bl	8001052 <HAL_CAN_GetRxMessage>
 80002c8:	4603      	mov	r3, r0
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d001      	beq.n	80002d2 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
{
Error_Handler();
 80002ce:	f000 f9d1 	bl	8000674 <Error_Handler>
}
char msg[64];
sprintf(msg, "Got CAN ID: 0x%X\n", RxHeader.StdId);
 80002d2:	4b0e      	ldr	r3, [pc, #56]	@ (800030c <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 80002d4:	681a      	ldr	r2, [r3, #0]
 80002d6:	f107 0308 	add.w	r3, r7, #8
 80002da:	490d      	ldr	r1, [pc, #52]	@ (8000310 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 80002dc:	4618      	mov	r0, r3
 80002de:	f005 f83b 	bl	8005358 <siprintf>
HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80002e2:	f107 0308 	add.w	r3, r7, #8
 80002e6:	4618      	mov	r0, r3
 80002e8:	f7ff ff72 	bl	80001d0 <strlen>
 80002ec:	4603      	mov	r3, r0
 80002ee:	b29a      	uxth	r2, r3
 80002f0:	f107 0108 	add.w	r1, r7, #8
 80002f4:	f04f 33ff 	mov.w	r3, #4294967295
 80002f8:	4806      	ldr	r0, [pc, #24]	@ (8000314 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 80002fa:	f003 f9fd 	bl	80036f8 <HAL_UART_Transmit>
//if ((RxHeader.StdId == 0x103))
//{
//
//datacheck = 1;
//}
}
 80002fe:	bf00      	nop
 8000300:	3748      	adds	r7, #72	@ 0x48
 8000302:	46bd      	mov	sp, r7
 8000304:	bd80      	pop	{r7, pc}
 8000306:	bf00      	nop
 8000308:	200003c8 	.word	0x200003c8
 800030c:	200003ac 	.word	0x200003ac
 8000310:	08005cb0 	.word	0x08005cb0
 8000314:	200002f8 	.word	0x200002f8

08000318 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000318:	b5b0      	push	{r4, r5, r7, lr}
 800031a:	b088      	sub	sp, #32
 800031c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
// define
TxHeader.IDE = CAN_ID_STD;
 800031e:	4b2b      	ldr	r3, [pc, #172]	@ (80003cc <main+0xb4>)
 8000320:	2200      	movs	r2, #0
 8000322:	609a      	str	r2, [r3, #8]
TxHeader.StdId = 0x446;
 8000324:	4b29      	ldr	r3, [pc, #164]	@ (80003cc <main+0xb4>)
 8000326:	f240 4246 	movw	r2, #1094	@ 0x446
 800032a:	601a      	str	r2, [r3, #0]
TxHeader.RTR = CAN_RTR_DATA;
 800032c:	4b27      	ldr	r3, [pc, #156]	@ (80003cc <main+0xb4>)
 800032e:	2200      	movs	r2, #0
 8000330:	60da      	str	r2, [r3, #12]
TxHeader.DLC = 2;
 8000332:	4b26      	ldr	r3, [pc, #152]	@ (80003cc <main+0xb4>)
 8000334:	2202      	movs	r2, #2
 8000336:	611a      	str	r2, [r3, #16]
TxData[0] = 50;
 8000338:	4b25      	ldr	r3, [pc, #148]	@ (80003d0 <main+0xb8>)
 800033a:	2232      	movs	r2, #50	@ 0x32
 800033c:	701a      	strb	r2, [r3, #0]
TxData[1] = 0xAA;
 800033e:	4b24      	ldr	r3, [pc, #144]	@ (80003d0 <main+0xb8>)
 8000340:	22aa      	movs	r2, #170	@ 0xaa
 8000342:	705a      	strb	r2, [r3, #1]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000344:	f000 fb76 	bl	8000a34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000348:	f000 f850 	bl	80003ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800034c:	f000 f910 	bl	8000570 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000350:	f000 f8de 	bl	8000510 <MX_USART2_UART_Init>
  MX_CAN_Init();
 8000354:	f000 f88c 	bl	8000470 <MX_CAN_Init>
  /* USER CODE BEGIN 2 */
HAL_CAN_Start(&hcan);
 8000358:	481e      	ldr	r0, [pc, #120]	@ (80003d4 <main+0xbc>)
 800035a:	f000 fd66 	bl	8000e2a <HAL_CAN_Start>

if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 800035e:	2102      	movs	r1, #2
 8000360:	481c      	ldr	r0, [pc, #112]	@ (80003d4 <main+0xbc>)
 8000362:	f000 ff98 	bl	8001296 <HAL_CAN_ActivateNotification>
 8000366:	4603      	mov	r3, r0
 8000368:	2b00      	cmp	r3, #0
 800036a:	d001      	beq.n	8000370 <main+0x58>
{
Error_Handler();
 800036c:	f000 f982 	bl	8000674 <Error_Handler>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of parked */
  osThreadDef(parked, parked_init, osPriorityNormal, 0, 128);
 8000370:	4b19      	ldr	r3, [pc, #100]	@ (80003d8 <main+0xc0>)
 8000372:	463c      	mov	r4, r7
 8000374:	461d      	mov	r5, r3
 8000376:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000378:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800037a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800037e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  parkedHandle = osThreadCreate(osThread(parked), NULL);
 8000382:	463b      	mov	r3, r7
 8000384:	2100      	movs	r1, #0
 8000386:	4618      	mov	r0, r3
 8000388:	f003 fdb0 	bl	8003eec <osThreadCreate>
 800038c:	4603      	mov	r3, r0
 800038e:	4a13      	ldr	r2, [pc, #76]	@ (80003dc <main+0xc4>)
 8000390:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000392:	f003 fda4 	bl	8003ede <osKernelStart>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
      //HAL_UART_Transmit(&huart2, (uint8_t*)"hello world\n", 20, HAL_MAX_DELAY);

      status = HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 8000396:	4b12      	ldr	r3, [pc, #72]	@ (80003e0 <main+0xc8>)
 8000398:	4a0d      	ldr	r2, [pc, #52]	@ (80003d0 <main+0xb8>)
 800039a:	490c      	ldr	r1, [pc, #48]	@ (80003cc <main+0xb4>)
 800039c:	480d      	ldr	r0, [pc, #52]	@ (80003d4 <main+0xbc>)
 800039e:	f000 fd88 	bl	8000eb2 <HAL_CAN_AddTxMessage>
 80003a2:	4603      	mov	r3, r0
 80003a4:	61fb      	str	r3, [r7, #28]

	  if (status != HAL_OK)
 80003a6:	69fb      	ldr	r3, [r7, #28]
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d001      	beq.n	80003b0 <main+0x98>
	  {
	  Error_Handler ();
 80003ac:	f000 f962 	bl	8000674 <Error_Handler>
	  }
	  if (datacheck)
 80003b0:	4b0c      	ldr	r3, [pc, #48]	@ (80003e4 <main+0xcc>)
 80003b2:	781b      	ldrb	r3, [r3, #0]
 80003b4:	b2db      	uxtb	r3, r3
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d0ed      	beq.n	8000396 <main+0x7e>
	  {
	      HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13); // Or whatever LED you're using
 80003ba:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80003be:	480a      	ldr	r0, [pc, #40]	@ (80003e8 <main+0xd0>)
 80003c0:	f001 fc2a 	bl	8001c18 <HAL_GPIO_TogglePin>
	      datacheck = 0;
 80003c4:	4b07      	ldr	r3, [pc, #28]	@ (80003e4 <main+0xcc>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	701a      	strb	r2, [r3, #0]
      status = HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 80003ca:	e7e4      	b.n	8000396 <main+0x7e>
 80003cc:	20000384 	.word	0x20000384
 80003d0:	2000039c 	.word	0x2000039c
 80003d4:	200002d0 	.word	0x200002d0
 80003d8:	08005ccc 	.word	0x08005ccc
 80003dc:	20000380 	.word	0x20000380
 80003e0:	200003a4 	.word	0x200003a4
 80003e4:	200003a8 	.word	0x200003a8
 80003e8:	48000400 	.word	0x48000400

080003ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b090      	sub	sp, #64	@ 0x40
 80003f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003f2:	f107 0318 	add.w	r3, r7, #24
 80003f6:	2228      	movs	r2, #40	@ 0x28
 80003f8:	2100      	movs	r1, #0
 80003fa:	4618      	mov	r0, r3
 80003fc:	f004 ffcc 	bl	8005398 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000400:	1d3b      	adds	r3, r7, #4
 8000402:	2200      	movs	r2, #0
 8000404:	601a      	str	r2, [r3, #0]
 8000406:	605a      	str	r2, [r3, #4]
 8000408:	609a      	str	r2, [r3, #8]
 800040a:	60da      	str	r2, [r3, #12]
 800040c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800040e:	2302      	movs	r3, #2
 8000410:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000412:	2301      	movs	r3, #1
 8000414:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000416:	2310      	movs	r3, #16
 8000418:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800041a:	2302      	movs	r3, #2
 800041c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800041e:	2300      	movs	r3, #0
 8000420:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000422:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8000426:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000428:	f107 0318 	add.w	r3, r7, #24
 800042c:	4618      	mov	r0, r3
 800042e:	f001 fc0d 	bl	8001c4c <HAL_RCC_OscConfig>
 8000432:	4603      	mov	r3, r0
 8000434:	2b00      	cmp	r3, #0
 8000436:	d001      	beq.n	800043c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000438:	f000 f91c 	bl	8000674 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800043c:	230f      	movs	r3, #15
 800043e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000440:	2302      	movs	r3, #2
 8000442:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000444:	2300      	movs	r3, #0
 8000446:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000448:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800044c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800044e:	2300      	movs	r3, #0
 8000450:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000452:	1d3b      	adds	r3, r7, #4
 8000454:	2102      	movs	r1, #2
 8000456:	4618      	mov	r0, r3
 8000458:	f002 fc36 	bl	8002cc8 <HAL_RCC_ClockConfig>
 800045c:	4603      	mov	r3, r0
 800045e:	2b00      	cmp	r3, #0
 8000460:	d001      	beq.n	8000466 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000462:	f000 f907 	bl	8000674 <Error_Handler>
  }
}
 8000466:	bf00      	nop
 8000468:	3740      	adds	r7, #64	@ 0x40
 800046a:	46bd      	mov	sp, r7
 800046c:	bd80      	pop	{r7, pc}
	...

08000470 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b08a      	sub	sp, #40	@ 0x28
 8000474:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8000476:	4b24      	ldr	r3, [pc, #144]	@ (8000508 <MX_CAN_Init+0x98>)
 8000478:	4a24      	ldr	r2, [pc, #144]	@ (800050c <MX_CAN_Init+0x9c>)
 800047a:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 8;
 800047c:	4b22      	ldr	r3, [pc, #136]	@ (8000508 <MX_CAN_Init+0x98>)
 800047e:	2208      	movs	r2, #8
 8000480:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000482:	4b21      	ldr	r3, [pc, #132]	@ (8000508 <MX_CAN_Init+0x98>)
 8000484:	2200      	movs	r2, #0
 8000486:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000488:	4b1f      	ldr	r3, [pc, #124]	@ (8000508 <MX_CAN_Init+0x98>)
 800048a:	2200      	movs	r2, #0
 800048c:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 800048e:	4b1e      	ldr	r3, [pc, #120]	@ (8000508 <MX_CAN_Init+0x98>)
 8000490:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000494:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_5TQ;
 8000496:	4b1c      	ldr	r3, [pc, #112]	@ (8000508 <MX_CAN_Init+0x98>)
 8000498:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800049c:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800049e:	4b1a      	ldr	r3, [pc, #104]	@ (8000508 <MX_CAN_Init+0x98>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80004a4:	4b18      	ldr	r3, [pc, #96]	@ (8000508 <MX_CAN_Init+0x98>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80004aa:	4b17      	ldr	r3, [pc, #92]	@ (8000508 <MX_CAN_Init+0x98>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80004b0:	4b15      	ldr	r3, [pc, #84]	@ (8000508 <MX_CAN_Init+0x98>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80004b6:	4b14      	ldr	r3, [pc, #80]	@ (8000508 <MX_CAN_Init+0x98>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80004bc:	4b12      	ldr	r3, [pc, #72]	@ (8000508 <MX_CAN_Init+0x98>)
 80004be:	2200      	movs	r2, #0
 80004c0:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80004c2:	4811      	ldr	r0, [pc, #68]	@ (8000508 <MX_CAN_Init+0x98>)
 80004c4:	f000 faec 	bl	8000aa0 <HAL_CAN_Init>
 80004c8:	4603      	mov	r3, r0
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d001      	beq.n	80004d2 <MX_CAN_Init+0x62>
  {
    Error_Handler();
 80004ce:	f000 f8d1 	bl	8000674 <Error_Handler>
  /* USER CODE BEGIN CAN_Init 2 */

  //Set a up a filter
  //Allow all messages to pass through from any ID
  	CAN_FilterTypeDef cf1;
  	cf1.FilterActivation = CAN_FILTER_ENABLE;
 80004d2:	2301      	movs	r3, #1
 80004d4:	623b      	str	r3, [r7, #32]
  	cf1.FilterBank = 0;
 80004d6:	2300      	movs	r3, #0
 80004d8:	617b      	str	r3, [r7, #20]
  	cf1.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80004da:	2300      	movs	r3, #0
 80004dc:	613b      	str	r3, [r7, #16]
  	cf1.FilterMode = CAN_FILTERMODE_IDMASK;
 80004de:	2300      	movs	r3, #0
 80004e0:	61bb      	str	r3, [r7, #24]
  	cf1.FilterScale = CAN_FILTERSCALE_32BIT;
 80004e2:	2301      	movs	r3, #1
 80004e4:	61fb      	str	r3, [r7, #28]
  	cf1.FilterIdLow = 0x0;
 80004e6:	2300      	movs	r3, #0
 80004e8:	607b      	str	r3, [r7, #4]
  	cf1.FilterIdHigh = 0x0000;
 80004ea:	2300      	movs	r3, #0
 80004ec:	603b      	str	r3, [r7, #0]
  	cf1.FilterMaskIdLow = 0x0;
 80004ee:	2300      	movs	r3, #0
 80004f0:	60fb      	str	r3, [r7, #12]
  	cf1.FilterMaskIdHigh = 0x0000;
 80004f2:	2300      	movs	r3, #0
 80004f4:	60bb      	str	r3, [r7, #8]


  // this function applies the filter to the CAN peripheral
  	HAL_CAN_ConfigFilter(&hcan, &cf1);
 80004f6:	463b      	mov	r3, r7
 80004f8:	4619      	mov	r1, r3
 80004fa:	4803      	ldr	r0, [pc, #12]	@ (8000508 <MX_CAN_Init+0x98>)
 80004fc:	f000 fbcb 	bl	8000c96 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN_Init 2 */

}
 8000500:	bf00      	nop
 8000502:	3728      	adds	r7, #40	@ 0x28
 8000504:	46bd      	mov	sp, r7
 8000506:	bd80      	pop	{r7, pc}
 8000508:	200002d0 	.word	0x200002d0
 800050c:	40006400 	.word	0x40006400

08000510 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000514:	4b14      	ldr	r3, [pc, #80]	@ (8000568 <MX_USART2_UART_Init+0x58>)
 8000516:	4a15      	ldr	r2, [pc, #84]	@ (800056c <MX_USART2_UART_Init+0x5c>)
 8000518:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 800051a:	4b13      	ldr	r3, [pc, #76]	@ (8000568 <MX_USART2_UART_Init+0x58>)
 800051c:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 8000520:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000522:	4b11      	ldr	r3, [pc, #68]	@ (8000568 <MX_USART2_UART_Init+0x58>)
 8000524:	2200      	movs	r2, #0
 8000526:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000528:	4b0f      	ldr	r3, [pc, #60]	@ (8000568 <MX_USART2_UART_Init+0x58>)
 800052a:	2200      	movs	r2, #0
 800052c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800052e:	4b0e      	ldr	r3, [pc, #56]	@ (8000568 <MX_USART2_UART_Init+0x58>)
 8000530:	2200      	movs	r2, #0
 8000532:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000534:	4b0c      	ldr	r3, [pc, #48]	@ (8000568 <MX_USART2_UART_Init+0x58>)
 8000536:	220c      	movs	r2, #12
 8000538:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800053a:	4b0b      	ldr	r3, [pc, #44]	@ (8000568 <MX_USART2_UART_Init+0x58>)
 800053c:	2200      	movs	r2, #0
 800053e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000540:	4b09      	ldr	r3, [pc, #36]	@ (8000568 <MX_USART2_UART_Init+0x58>)
 8000542:	2200      	movs	r2, #0
 8000544:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000546:	4b08      	ldr	r3, [pc, #32]	@ (8000568 <MX_USART2_UART_Init+0x58>)
 8000548:	2200      	movs	r2, #0
 800054a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800054c:	4b06      	ldr	r3, [pc, #24]	@ (8000568 <MX_USART2_UART_Init+0x58>)
 800054e:	2200      	movs	r2, #0
 8000550:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000552:	4805      	ldr	r0, [pc, #20]	@ (8000568 <MX_USART2_UART_Init+0x58>)
 8000554:	f003 f882 	bl	800365c <HAL_UART_Init>
 8000558:	4603      	mov	r3, r0
 800055a:	2b00      	cmp	r3, #0
 800055c:	d001      	beq.n	8000562 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800055e:	f000 f889 	bl	8000674 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000562:	bf00      	nop
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	200002f8 	.word	0x200002f8
 800056c:	40004400 	.word	0x40004400

08000570 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b08a      	sub	sp, #40	@ 0x28
 8000574:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000576:	f107 0314 	add.w	r3, r7, #20
 800057a:	2200      	movs	r2, #0
 800057c:	601a      	str	r2, [r3, #0]
 800057e:	605a      	str	r2, [r3, #4]
 8000580:	609a      	str	r2, [r3, #8]
 8000582:	60da      	str	r2, [r3, #12]
 8000584:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000586:	4b2b      	ldr	r3, [pc, #172]	@ (8000634 <MX_GPIO_Init+0xc4>)
 8000588:	695b      	ldr	r3, [r3, #20]
 800058a:	4a2a      	ldr	r2, [pc, #168]	@ (8000634 <MX_GPIO_Init+0xc4>)
 800058c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000590:	6153      	str	r3, [r2, #20]
 8000592:	4b28      	ldr	r3, [pc, #160]	@ (8000634 <MX_GPIO_Init+0xc4>)
 8000594:	695b      	ldr	r3, [r3, #20]
 8000596:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800059a:	613b      	str	r3, [r7, #16]
 800059c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800059e:	4b25      	ldr	r3, [pc, #148]	@ (8000634 <MX_GPIO_Init+0xc4>)
 80005a0:	695b      	ldr	r3, [r3, #20]
 80005a2:	4a24      	ldr	r2, [pc, #144]	@ (8000634 <MX_GPIO_Init+0xc4>)
 80005a4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80005a8:	6153      	str	r3, [r2, #20]
 80005aa:	4b22      	ldr	r3, [pc, #136]	@ (8000634 <MX_GPIO_Init+0xc4>)
 80005ac:	695b      	ldr	r3, [r3, #20]
 80005ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80005b2:	60fb      	str	r3, [r7, #12]
 80005b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005b6:	4b1f      	ldr	r3, [pc, #124]	@ (8000634 <MX_GPIO_Init+0xc4>)
 80005b8:	695b      	ldr	r3, [r3, #20]
 80005ba:	4a1e      	ldr	r2, [pc, #120]	@ (8000634 <MX_GPIO_Init+0xc4>)
 80005bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80005c0:	6153      	str	r3, [r2, #20]
 80005c2:	4b1c      	ldr	r3, [pc, #112]	@ (8000634 <MX_GPIO_Init+0xc4>)
 80005c4:	695b      	ldr	r3, [r3, #20]
 80005c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80005ca:	60bb      	str	r3, [r7, #8]
 80005cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ce:	4b19      	ldr	r3, [pc, #100]	@ (8000634 <MX_GPIO_Init+0xc4>)
 80005d0:	695b      	ldr	r3, [r3, #20]
 80005d2:	4a18      	ldr	r2, [pc, #96]	@ (8000634 <MX_GPIO_Init+0xc4>)
 80005d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80005d8:	6153      	str	r3, [r2, #20]
 80005da:	4b16      	ldr	r3, [pc, #88]	@ (8000634 <MX_GPIO_Init+0xc4>)
 80005dc:	695b      	ldr	r3, [r3, #20]
 80005de:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80005e2:	607b      	str	r3, [r7, #4]
 80005e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80005e6:	2200      	movs	r2, #0
 80005e8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005ec:	4812      	ldr	r0, [pc, #72]	@ (8000638 <MX_GPIO_Init+0xc8>)
 80005ee:	f001 fafb 	bl	8001be8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005f2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80005f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80005f8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80005fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fe:	2300      	movs	r3, #0
 8000600:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000602:	f107 0314 	add.w	r3, r7, #20
 8000606:	4619      	mov	r1, r3
 8000608:	480c      	ldr	r0, [pc, #48]	@ (800063c <MX_GPIO_Init+0xcc>)
 800060a:	f001 f97b 	bl	8001904 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800060e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000612:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000614:	2301      	movs	r3, #1
 8000616:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000618:	2300      	movs	r3, #0
 800061a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800061c:	2300      	movs	r3, #0
 800061e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000620:	f107 0314 	add.w	r3, r7, #20
 8000624:	4619      	mov	r1, r3
 8000626:	4804      	ldr	r0, [pc, #16]	@ (8000638 <MX_GPIO_Init+0xc8>)
 8000628:	f001 f96c 	bl	8001904 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800062c:	bf00      	nop
 800062e:	3728      	adds	r7, #40	@ 0x28
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	40021000 	.word	0x40021000
 8000638:	48000400 	.word	0x48000400
 800063c:	48000800 	.word	0x48000800

08000640 <parked_init>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_parked_init */
void parked_init(void const * argument)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  osDelay(1);
 8000648:	2001      	movs	r0, #1
 800064a:	f003 fc9b 	bl	8003f84 <osDelay>
 800064e:	e7fb      	b.n	8000648 <parked_init+0x8>

08000650 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a04      	ldr	r2, [pc, #16]	@ (8000670 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800065e:	4293      	cmp	r3, r2
 8000660:	d101      	bne.n	8000666 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000662:	f000 f9fd 	bl	8000a60 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000666:	bf00      	nop
 8000668:	3708      	adds	r7, #8
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	40012c00 	.word	0x40012c00

08000674 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000678:	b672      	cpsid	i
}
 800067a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800067c:	bf00      	nop
 800067e:	e7fd      	b.n	800067c <Error_Handler+0x8>

08000680 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000686:	4b11      	ldr	r3, [pc, #68]	@ (80006cc <HAL_MspInit+0x4c>)
 8000688:	699b      	ldr	r3, [r3, #24]
 800068a:	4a10      	ldr	r2, [pc, #64]	@ (80006cc <HAL_MspInit+0x4c>)
 800068c:	f043 0301 	orr.w	r3, r3, #1
 8000690:	6193      	str	r3, [r2, #24]
 8000692:	4b0e      	ldr	r3, [pc, #56]	@ (80006cc <HAL_MspInit+0x4c>)
 8000694:	699b      	ldr	r3, [r3, #24]
 8000696:	f003 0301 	and.w	r3, r3, #1
 800069a:	607b      	str	r3, [r7, #4]
 800069c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800069e:	4b0b      	ldr	r3, [pc, #44]	@ (80006cc <HAL_MspInit+0x4c>)
 80006a0:	69db      	ldr	r3, [r3, #28]
 80006a2:	4a0a      	ldr	r2, [pc, #40]	@ (80006cc <HAL_MspInit+0x4c>)
 80006a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006a8:	61d3      	str	r3, [r2, #28]
 80006aa:	4b08      	ldr	r3, [pc, #32]	@ (80006cc <HAL_MspInit+0x4c>)
 80006ac:	69db      	ldr	r3, [r3, #28]
 80006ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006b2:	603b      	str	r3, [r7, #0]
 80006b4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80006b6:	2200      	movs	r2, #0
 80006b8:	210f      	movs	r1, #15
 80006ba:	f06f 0001 	mvn.w	r0, #1
 80006be:	f001 f8f7 	bl	80018b0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006c2:	bf00      	nop
 80006c4:	3708      	adds	r7, #8
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	40021000 	.word	0x40021000

080006d0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b08a      	sub	sp, #40	@ 0x28
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d8:	f107 0314 	add.w	r3, r7, #20
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
 80006e0:	605a      	str	r2, [r3, #4]
 80006e2:	609a      	str	r2, [r3, #8]
 80006e4:	60da      	str	r2, [r3, #12]
 80006e6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a25      	ldr	r2, [pc, #148]	@ (8000784 <HAL_CAN_MspInit+0xb4>)
 80006ee:	4293      	cmp	r3, r2
 80006f0:	d143      	bne.n	800077a <HAL_CAN_MspInit+0xaa>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80006f2:	4b25      	ldr	r3, [pc, #148]	@ (8000788 <HAL_CAN_MspInit+0xb8>)
 80006f4:	69db      	ldr	r3, [r3, #28]
 80006f6:	4a24      	ldr	r2, [pc, #144]	@ (8000788 <HAL_CAN_MspInit+0xb8>)
 80006f8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80006fc:	61d3      	str	r3, [r2, #28]
 80006fe:	4b22      	ldr	r3, [pc, #136]	@ (8000788 <HAL_CAN_MspInit+0xb8>)
 8000700:	69db      	ldr	r3, [r3, #28]
 8000702:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000706:	613b      	str	r3, [r7, #16]
 8000708:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800070a:	4b1f      	ldr	r3, [pc, #124]	@ (8000788 <HAL_CAN_MspInit+0xb8>)
 800070c:	695b      	ldr	r3, [r3, #20]
 800070e:	4a1e      	ldr	r2, [pc, #120]	@ (8000788 <HAL_CAN_MspInit+0xb8>)
 8000710:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000714:	6153      	str	r3, [r2, #20]
 8000716:	4b1c      	ldr	r3, [pc, #112]	@ (8000788 <HAL_CAN_MspInit+0xb8>)
 8000718:	695b      	ldr	r3, [r3, #20]
 800071a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800071e:	60fb      	str	r3, [r7, #12]
 8000720:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000722:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000726:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000728:	2302      	movs	r3, #2
 800072a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800072c:	2301      	movs	r3, #1
 800072e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000730:	2303      	movs	r3, #3
 8000732:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM1;
 8000734:	2309      	movs	r3, #9
 8000736:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000738:	f107 0314 	add.w	r3, r7, #20
 800073c:	4619      	mov	r1, r3
 800073e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000742:	f001 f8df 	bl	8001904 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000746:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800074a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800074c:	2302      	movs	r3, #2
 800074e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000750:	2300      	movs	r3, #0
 8000752:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000754:	2303      	movs	r3, #3
 8000756:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM1;
 8000758:	2309      	movs	r3, #9
 800075a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800075c:	f107 0314 	add.w	r3, r7, #20
 8000760:	4619      	mov	r1, r3
 8000762:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000766:	f001 f8cd 	bl	8001904 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 5, 0);
 800076a:	2200      	movs	r2, #0
 800076c:	2105      	movs	r1, #5
 800076e:	2014      	movs	r0, #20
 8000770:	f001 f89e 	bl	80018b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 8000774:	2014      	movs	r0, #20
 8000776:	f001 f8b7 	bl	80018e8 <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN_MspInit 1 */

  }

}
 800077a:	bf00      	nop
 800077c:	3728      	adds	r7, #40	@ 0x28
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	40006400 	.word	0x40006400
 8000788:	40021000 	.word	0x40021000

0800078c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b08a      	sub	sp, #40	@ 0x28
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000794:	f107 0314 	add.w	r3, r7, #20
 8000798:	2200      	movs	r2, #0
 800079a:	601a      	str	r2, [r3, #0]
 800079c:	605a      	str	r2, [r3, #4]
 800079e:	609a      	str	r2, [r3, #8]
 80007a0:	60da      	str	r2, [r3, #12]
 80007a2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4a17      	ldr	r2, [pc, #92]	@ (8000808 <HAL_UART_MspInit+0x7c>)
 80007aa:	4293      	cmp	r3, r2
 80007ac:	d128      	bne.n	8000800 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007ae:	4b17      	ldr	r3, [pc, #92]	@ (800080c <HAL_UART_MspInit+0x80>)
 80007b0:	69db      	ldr	r3, [r3, #28]
 80007b2:	4a16      	ldr	r2, [pc, #88]	@ (800080c <HAL_UART_MspInit+0x80>)
 80007b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007b8:	61d3      	str	r3, [r2, #28]
 80007ba:	4b14      	ldr	r3, [pc, #80]	@ (800080c <HAL_UART_MspInit+0x80>)
 80007bc:	69db      	ldr	r3, [r3, #28]
 80007be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80007c2:	613b      	str	r3, [r7, #16]
 80007c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c6:	4b11      	ldr	r3, [pc, #68]	@ (800080c <HAL_UART_MspInit+0x80>)
 80007c8:	695b      	ldr	r3, [r3, #20]
 80007ca:	4a10      	ldr	r2, [pc, #64]	@ (800080c <HAL_UART_MspInit+0x80>)
 80007cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007d0:	6153      	str	r3, [r2, #20]
 80007d2:	4b0e      	ldr	r3, [pc, #56]	@ (800080c <HAL_UART_MspInit+0x80>)
 80007d4:	695b      	ldr	r3, [r3, #20]
 80007d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80007da:	60fb      	str	r3, [r7, #12]
 80007dc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80007de:	230c      	movs	r3, #12
 80007e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e2:	2302      	movs	r3, #2
 80007e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e6:	2300      	movs	r3, #0
 80007e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ea:	2300      	movs	r3, #0
 80007ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80007ee:	2307      	movs	r3, #7
 80007f0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007f2:	f107 0314 	add.w	r3, r7, #20
 80007f6:	4619      	mov	r1, r3
 80007f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007fc:	f001 f882 	bl	8001904 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000800:	bf00      	nop
 8000802:	3728      	adds	r7, #40	@ 0x28
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	40004400 	.word	0x40004400
 800080c:	40021000 	.word	0x40021000

08000810 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b08c      	sub	sp, #48	@ 0x30
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000818:	2300      	movs	r3, #0
 800081a:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 800081c:	2300      	movs	r3, #0
 800081e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000820:	4b2e      	ldr	r3, [pc, #184]	@ (80008dc <HAL_InitTick+0xcc>)
 8000822:	699b      	ldr	r3, [r3, #24]
 8000824:	4a2d      	ldr	r2, [pc, #180]	@ (80008dc <HAL_InitTick+0xcc>)
 8000826:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800082a:	6193      	str	r3, [r2, #24]
 800082c:	4b2b      	ldr	r3, [pc, #172]	@ (80008dc <HAL_InitTick+0xcc>)
 800082e:	699b      	ldr	r3, [r3, #24]
 8000830:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000834:	60bb      	str	r3, [r7, #8]
 8000836:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000838:	f107 020c 	add.w	r2, r7, #12
 800083c:	f107 0310 	add.w	r3, r7, #16
 8000840:	4611      	mov	r1, r2
 8000842:	4618      	mov	r0, r3
 8000844:	f002 fc60 	bl	8003108 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000848:	f002 fc3c 	bl	80030c4 <HAL_RCC_GetPCLK2Freq>
 800084c:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800084e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000850:	4a23      	ldr	r2, [pc, #140]	@ (80008e0 <HAL_InitTick+0xd0>)
 8000852:	fba2 2303 	umull	r2, r3, r2, r3
 8000856:	0c9b      	lsrs	r3, r3, #18
 8000858:	3b01      	subs	r3, #1
 800085a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800085c:	4b21      	ldr	r3, [pc, #132]	@ (80008e4 <HAL_InitTick+0xd4>)
 800085e:	4a22      	ldr	r2, [pc, #136]	@ (80008e8 <HAL_InitTick+0xd8>)
 8000860:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000862:	4b20      	ldr	r3, [pc, #128]	@ (80008e4 <HAL_InitTick+0xd4>)
 8000864:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000868:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800086a:	4a1e      	ldr	r2, [pc, #120]	@ (80008e4 <HAL_InitTick+0xd4>)
 800086c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800086e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000870:	4b1c      	ldr	r3, [pc, #112]	@ (80008e4 <HAL_InitTick+0xd4>)
 8000872:	2200      	movs	r2, #0
 8000874:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000876:	4b1b      	ldr	r3, [pc, #108]	@ (80008e4 <HAL_InitTick+0xd4>)
 8000878:	2200      	movs	r2, #0
 800087a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800087c:	4b19      	ldr	r3, [pc, #100]	@ (80008e4 <HAL_InitTick+0xd4>)
 800087e:	2200      	movs	r2, #0
 8000880:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000882:	4818      	ldr	r0, [pc, #96]	@ (80008e4 <HAL_InitTick+0xd4>)
 8000884:	f002 fc72 	bl	800316c <HAL_TIM_Base_Init>
 8000888:	4603      	mov	r3, r0
 800088a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800088e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000892:	2b00      	cmp	r3, #0
 8000894:	d11b      	bne.n	80008ce <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000896:	4813      	ldr	r0, [pc, #76]	@ (80008e4 <HAL_InitTick+0xd4>)
 8000898:	f002 fcca 	bl	8003230 <HAL_TIM_Base_Start_IT>
 800089c:	4603      	mov	r3, r0
 800089e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80008a2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d111      	bne.n	80008ce <HAL_InitTick+0xbe>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80008aa:	2019      	movs	r0, #25
 80008ac:	f001 f81c 	bl	80018e8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	2b0f      	cmp	r3, #15
 80008b4:	d808      	bhi.n	80008c8 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 80008b6:	2200      	movs	r2, #0
 80008b8:	6879      	ldr	r1, [r7, #4]
 80008ba:	2019      	movs	r0, #25
 80008bc:	f000 fff8 	bl	80018b0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80008c0:	4a0a      	ldr	r2, [pc, #40]	@ (80008ec <HAL_InitTick+0xdc>)
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	6013      	str	r3, [r2, #0]
 80008c6:	e002      	b.n	80008ce <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 80008c8:	2301      	movs	r3, #1
 80008ca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80008ce:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80008d2:	4618      	mov	r0, r3
 80008d4:	3730      	adds	r7, #48	@ 0x30
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	40021000 	.word	0x40021000
 80008e0:	431bde83 	.word	0x431bde83
 80008e4:	200003d0 	.word	0x200003d0
 80008e8:	40012c00 	.word	0x40012c00
 80008ec:	20000004 	.word	0x20000004

080008f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008f4:	bf00      	nop
 80008f6:	e7fd      	b.n	80008f4 <NMI_Handler+0x4>

080008f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008fc:	bf00      	nop
 80008fe:	e7fd      	b.n	80008fc <HardFault_Handler+0x4>

08000900 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000904:	bf00      	nop
 8000906:	e7fd      	b.n	8000904 <MemManage_Handler+0x4>

08000908 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800090c:	bf00      	nop
 800090e:	e7fd      	b.n	800090c <BusFault_Handler+0x4>

08000910 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000914:	bf00      	nop
 8000916:	e7fd      	b.n	8000914 <UsageFault_Handler+0x4>

08000918 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800091c:	bf00      	nop
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr
	...

08000928 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles CAN RX0 and USB low priority interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 800092c:	4802      	ldr	r0, [pc, #8]	@ (8000938 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 800092e:	f000 fcd8 	bl	80012e2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 8000932:	bf00      	nop
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	200002d0 	.word	0x200002d0

0800093c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000940:	4802      	ldr	r0, [pc, #8]	@ (800094c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000942:	f002 fcc9 	bl	80032d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000946:	bf00      	nop
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	200003d0 	.word	0x200003d0

08000950 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b086      	sub	sp, #24
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000958:	4a14      	ldr	r2, [pc, #80]	@ (80009ac <_sbrk+0x5c>)
 800095a:	4b15      	ldr	r3, [pc, #84]	@ (80009b0 <_sbrk+0x60>)
 800095c:	1ad3      	subs	r3, r2, r3
 800095e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000960:	697b      	ldr	r3, [r7, #20]
 8000962:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000964:	4b13      	ldr	r3, [pc, #76]	@ (80009b4 <_sbrk+0x64>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	2b00      	cmp	r3, #0
 800096a:	d102      	bne.n	8000972 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800096c:	4b11      	ldr	r3, [pc, #68]	@ (80009b4 <_sbrk+0x64>)
 800096e:	4a12      	ldr	r2, [pc, #72]	@ (80009b8 <_sbrk+0x68>)
 8000970:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000972:	4b10      	ldr	r3, [pc, #64]	@ (80009b4 <_sbrk+0x64>)
 8000974:	681a      	ldr	r2, [r3, #0]
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	4413      	add	r3, r2
 800097a:	693a      	ldr	r2, [r7, #16]
 800097c:	429a      	cmp	r2, r3
 800097e:	d207      	bcs.n	8000990 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000980:	f004 fd12 	bl	80053a8 <__errno>
 8000984:	4603      	mov	r3, r0
 8000986:	220c      	movs	r2, #12
 8000988:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800098a:	f04f 33ff 	mov.w	r3, #4294967295
 800098e:	e009      	b.n	80009a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000990:	4b08      	ldr	r3, [pc, #32]	@ (80009b4 <_sbrk+0x64>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000996:	4b07      	ldr	r3, [pc, #28]	@ (80009b4 <_sbrk+0x64>)
 8000998:	681a      	ldr	r2, [r3, #0]
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	4413      	add	r3, r2
 800099e:	4a05      	ldr	r2, [pc, #20]	@ (80009b4 <_sbrk+0x64>)
 80009a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009a2:	68fb      	ldr	r3, [r7, #12]
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	3718      	adds	r7, #24
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	20004000 	.word	0x20004000
 80009b0:	00000400 	.word	0x00000400
 80009b4:	2000041c 	.word	0x2000041c
 80009b8:	200012b8 	.word	0x200012b8

080009bc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009c0:	4b06      	ldr	r3, [pc, #24]	@ (80009dc <SystemInit+0x20>)
 80009c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009c6:	4a05      	ldr	r2, [pc, #20]	@ (80009dc <SystemInit+0x20>)
 80009c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009d0:	bf00      	nop
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop
 80009dc:	e000ed00 	.word	0xe000ed00

080009e0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80009e0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a18 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80009e4:	f7ff ffea 	bl	80009bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009e8:	480c      	ldr	r0, [pc, #48]	@ (8000a1c <LoopForever+0x6>)
  ldr r1, =_edata
 80009ea:	490d      	ldr	r1, [pc, #52]	@ (8000a20 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009ec:	4a0d      	ldr	r2, [pc, #52]	@ (8000a24 <LoopForever+0xe>)
  movs r3, #0
 80009ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009f0:	e002      	b.n	80009f8 <LoopCopyDataInit>

080009f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009f6:	3304      	adds	r3, #4

080009f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009fc:	d3f9      	bcc.n	80009f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009fe:	4a0a      	ldr	r2, [pc, #40]	@ (8000a28 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a00:	4c0a      	ldr	r4, [pc, #40]	@ (8000a2c <LoopForever+0x16>)
  movs r3, #0
 8000a02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a04:	e001      	b.n	8000a0a <LoopFillZerobss>

08000a06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a08:	3204      	adds	r2, #4

08000a0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a0c:	d3fb      	bcc.n	8000a06 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a0e:	f004 fcd1 	bl	80053b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a12:	f7ff fc81 	bl	8000318 <main>

08000a16 <LoopForever>:

LoopForever:
    b LoopForever
 8000a16:	e7fe      	b.n	8000a16 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a18:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000a1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a20:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000a24:	08005d6c 	.word	0x08005d6c
  ldr r2, =_sbss
 8000a28:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000a2c:	200012b8 	.word	0x200012b8

08000a30 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a30:	e7fe      	b.n	8000a30 <ADC1_IRQHandler>
	...

08000a34 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a38:	4b08      	ldr	r3, [pc, #32]	@ (8000a5c <HAL_Init+0x28>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4a07      	ldr	r2, [pc, #28]	@ (8000a5c <HAL_Init+0x28>)
 8000a3e:	f043 0310 	orr.w	r3, r3, #16
 8000a42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a44:	2003      	movs	r0, #3
 8000a46:	f000 ff28 	bl	800189a <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a4a:	200f      	movs	r0, #15
 8000a4c:	f7ff fee0 	bl	8000810 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a50:	f7ff fe16 	bl	8000680 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a54:	2300      	movs	r3, #0
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	40022000 	.word	0x40022000

08000a60 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a64:	4b06      	ldr	r3, [pc, #24]	@ (8000a80 <HAL_IncTick+0x20>)
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	461a      	mov	r2, r3
 8000a6a:	4b06      	ldr	r3, [pc, #24]	@ (8000a84 <HAL_IncTick+0x24>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	4413      	add	r3, r2
 8000a70:	4a04      	ldr	r2, [pc, #16]	@ (8000a84 <HAL_IncTick+0x24>)
 8000a72:	6013      	str	r3, [r2, #0]
}
 8000a74:	bf00      	nop
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	20000008 	.word	0x20000008
 8000a84:	20000420 	.word	0x20000420

08000a88 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  return uwTick;  
 8000a8c:	4b03      	ldr	r3, [pc, #12]	@ (8000a9c <HAL_GetTick+0x14>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
}
 8000a90:	4618      	mov	r0, r3
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop
 8000a9c:	20000420 	.word	0x20000420

08000aa0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b084      	sub	sp, #16
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d101      	bne.n	8000ab2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	e0ed      	b.n	8000c8e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ab8:	b2db      	uxtb	r3, r3
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d102      	bne.n	8000ac4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000abe:	6878      	ldr	r0, [r7, #4]
 8000ac0:	f7ff fe06 	bl	80006d0 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	681a      	ldr	r2, [r3, #0]
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	f042 0201 	orr.w	r2, r2, #1
 8000ad2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000ad4:	f7ff ffd8 	bl	8000a88 <HAL_GetTick>
 8000ad8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000ada:	e012      	b.n	8000b02 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000adc:	f7ff ffd4 	bl	8000a88 <HAL_GetTick>
 8000ae0:	4602      	mov	r2, r0
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	1ad3      	subs	r3, r2, r3
 8000ae6:	2b0a      	cmp	r3, #10
 8000ae8:	d90b      	bls.n	8000b02 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000aee:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	2205      	movs	r2, #5
 8000afa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000afe:	2301      	movs	r3, #1
 8000b00:	e0c5      	b.n	8000c8e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	685b      	ldr	r3, [r3, #4]
 8000b08:	f003 0301 	and.w	r3, r3, #1
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d0e5      	beq.n	8000adc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	681a      	ldr	r2, [r3, #0]
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	f022 0202 	bic.w	r2, r2, #2
 8000b1e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000b20:	f7ff ffb2 	bl	8000a88 <HAL_GetTick>
 8000b24:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000b26:	e012      	b.n	8000b4e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000b28:	f7ff ffae 	bl	8000a88 <HAL_GetTick>
 8000b2c:	4602      	mov	r2, r0
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	1ad3      	subs	r3, r2, r3
 8000b32:	2b0a      	cmp	r3, #10
 8000b34:	d90b      	bls.n	8000b4e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b3a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	2205      	movs	r2, #5
 8000b46:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	e09f      	b.n	8000c8e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	685b      	ldr	r3, [r3, #4]
 8000b54:	f003 0302 	and.w	r3, r3, #2
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d1e5      	bne.n	8000b28 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	7e1b      	ldrb	r3, [r3, #24]
 8000b60:	2b01      	cmp	r3, #1
 8000b62:	d108      	bne.n	8000b76 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	681a      	ldr	r2, [r3, #0]
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000b72:	601a      	str	r2, [r3, #0]
 8000b74:	e007      	b.n	8000b86 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	681a      	ldr	r2, [r3, #0]
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000b84:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	7e5b      	ldrb	r3, [r3, #25]
 8000b8a:	2b01      	cmp	r3, #1
 8000b8c:	d108      	bne.n	8000ba0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	681a      	ldr	r2, [r3, #0]
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000b9c:	601a      	str	r2, [r3, #0]
 8000b9e:	e007      	b.n	8000bb0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	681a      	ldr	r2, [r3, #0]
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000bae:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	7e9b      	ldrb	r3, [r3, #26]
 8000bb4:	2b01      	cmp	r3, #1
 8000bb6:	d108      	bne.n	8000bca <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	681a      	ldr	r2, [r3, #0]
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	f042 0220 	orr.w	r2, r2, #32
 8000bc6:	601a      	str	r2, [r3, #0]
 8000bc8:	e007      	b.n	8000bda <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	681a      	ldr	r2, [r3, #0]
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	f022 0220 	bic.w	r2, r2, #32
 8000bd8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	7edb      	ldrb	r3, [r3, #27]
 8000bde:	2b01      	cmp	r3, #1
 8000be0:	d108      	bne.n	8000bf4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	681a      	ldr	r2, [r3, #0]
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	f022 0210 	bic.w	r2, r2, #16
 8000bf0:	601a      	str	r2, [r3, #0]
 8000bf2:	e007      	b.n	8000c04 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	681a      	ldr	r2, [r3, #0]
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	f042 0210 	orr.w	r2, r2, #16
 8000c02:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	7f1b      	ldrb	r3, [r3, #28]
 8000c08:	2b01      	cmp	r3, #1
 8000c0a:	d108      	bne.n	8000c1e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	681a      	ldr	r2, [r3, #0]
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	f042 0208 	orr.w	r2, r2, #8
 8000c1a:	601a      	str	r2, [r3, #0]
 8000c1c:	e007      	b.n	8000c2e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	681a      	ldr	r2, [r3, #0]
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	f022 0208 	bic.w	r2, r2, #8
 8000c2c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	7f5b      	ldrb	r3, [r3, #29]
 8000c32:	2b01      	cmp	r3, #1
 8000c34:	d108      	bne.n	8000c48 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	681a      	ldr	r2, [r3, #0]
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	f042 0204 	orr.w	r2, r2, #4
 8000c44:	601a      	str	r2, [r3, #0]
 8000c46:	e007      	b.n	8000c58 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	681a      	ldr	r2, [r3, #0]
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	f022 0204 	bic.w	r2, r2, #4
 8000c56:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	689a      	ldr	r2, [r3, #8]
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	68db      	ldr	r3, [r3, #12]
 8000c60:	431a      	orrs	r2, r3
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	691b      	ldr	r3, [r3, #16]
 8000c66:	431a      	orrs	r2, r3
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	695b      	ldr	r3, [r3, #20]
 8000c6c:	ea42 0103 	orr.w	r1, r2, r3
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	685b      	ldr	r3, [r3, #4]
 8000c74:	1e5a      	subs	r2, r3, #1
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	430a      	orrs	r2, r1
 8000c7c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	2200      	movs	r2, #0
 8000c82:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	2201      	movs	r2, #1
 8000c88:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000c8c:	2300      	movs	r3, #0
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	3710      	adds	r7, #16
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}

08000c96 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000c96:	b480      	push	{r7}
 8000c98:	b087      	sub	sp, #28
 8000c9a:	af00      	add	r7, sp, #0
 8000c9c:	6078      	str	r0, [r7, #4]
 8000c9e:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000cac:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000cae:	7cfb      	ldrb	r3, [r7, #19]
 8000cb0:	2b01      	cmp	r3, #1
 8000cb2:	d003      	beq.n	8000cbc <HAL_CAN_ConfigFilter+0x26>
 8000cb4:	7cfb      	ldrb	r3, [r7, #19]
 8000cb6:	2b02      	cmp	r3, #2
 8000cb8:	f040 80aa 	bne.w	8000e10 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000cc2:	f043 0201 	orr.w	r2, r3, #1
 8000cc6:	697b      	ldr	r3, [r7, #20]
 8000cc8:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	695b      	ldr	r3, [r3, #20]
 8000cd0:	f003 031f 	and.w	r3, r3, #31
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cda:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	43db      	mvns	r3, r3
 8000ce6:	401a      	ands	r2, r3
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	69db      	ldr	r3, [r3, #28]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d123      	bne.n	8000d3e <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000cf6:	697b      	ldr	r3, [r7, #20]
 8000cf8:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	43db      	mvns	r3, r3
 8000d00:	401a      	ands	r2, r3
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	68db      	ldr	r3, [r3, #12]
 8000d0c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000d14:	683a      	ldr	r2, [r7, #0]
 8000d16:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000d18:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000d1a:	697b      	ldr	r3, [r7, #20]
 8000d1c:	3248      	adds	r2, #72	@ 0x48
 8000d1e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	689b      	ldr	r3, [r3, #8]
 8000d26:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000d32:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d34:	6979      	ldr	r1, [r7, #20]
 8000d36:	3348      	adds	r3, #72	@ 0x48
 8000d38:	00db      	lsls	r3, r3, #3
 8000d3a:	440b      	add	r3, r1
 8000d3c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	69db      	ldr	r3, [r3, #28]
 8000d42:	2b01      	cmp	r3, #1
 8000d44:	d122      	bne.n	8000d8c <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000d46:	697b      	ldr	r3, [r7, #20]
 8000d48:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	431a      	orrs	r2, r3
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000d62:	683a      	ldr	r2, [r7, #0]
 8000d64:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000d66:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	3248      	adds	r2, #72	@ 0x48
 8000d6c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	689b      	ldr	r3, [r3, #8]
 8000d74:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	68db      	ldr	r3, [r3, #12]
 8000d7a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000d80:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d82:	6979      	ldr	r1, [r7, #20]
 8000d84:	3348      	adds	r3, #72	@ 0x48
 8000d86:	00db      	lsls	r3, r3, #3
 8000d88:	440b      	add	r3, r1
 8000d8a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	699b      	ldr	r3, [r3, #24]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d109      	bne.n	8000da8 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	43db      	mvns	r3, r3
 8000d9e:	401a      	ands	r2, r3
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8000da6:	e007      	b.n	8000db8 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	431a      	orrs	r2, r3
 8000db2:	697b      	ldr	r3, [r7, #20]
 8000db4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	691b      	ldr	r3, [r3, #16]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d109      	bne.n	8000dd4 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	43db      	mvns	r3, r3
 8000dca:	401a      	ands	r2, r3
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8000dd2:	e007      	b.n	8000de4 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	431a      	orrs	r2, r3
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	6a1b      	ldr	r3, [r3, #32]
 8000de8:	2b01      	cmp	r3, #1
 8000dea:	d107      	bne.n	8000dfc <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	431a      	orrs	r2, r3
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000e02:	f023 0201 	bic.w	r2, r3, #1
 8000e06:	697b      	ldr	r3, [r7, #20]
 8000e08:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	e006      	b.n	8000e1e <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e14:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000e1c:	2301      	movs	r3, #1
  }
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	371c      	adds	r7, #28
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr

08000e2a <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000e2a:	b580      	push	{r7, lr}
 8000e2c:	b084      	sub	sp, #16
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e38:	b2db      	uxtb	r3, r3
 8000e3a:	2b01      	cmp	r3, #1
 8000e3c:	d12e      	bne.n	8000e9c <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	2202      	movs	r2, #2
 8000e42:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	681a      	ldr	r2, [r3, #0]
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f022 0201 	bic.w	r2, r2, #1
 8000e54:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000e56:	f7ff fe17 	bl	8000a88 <HAL_GetTick>
 8000e5a:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000e5c:	e012      	b.n	8000e84 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e5e:	f7ff fe13 	bl	8000a88 <HAL_GetTick>
 8000e62:	4602      	mov	r2, r0
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	1ad3      	subs	r3, r2, r3
 8000e68:	2b0a      	cmp	r3, #10
 8000e6a:	d90b      	bls.n	8000e84 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e70:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	2205      	movs	r2, #5
 8000e7c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000e80:	2301      	movs	r3, #1
 8000e82:	e012      	b.n	8000eaa <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	f003 0301 	and.w	r3, r3, #1
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d1e5      	bne.n	8000e5e <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	2200      	movs	r2, #0
 8000e96:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	e006      	b.n	8000eaa <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ea0:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000ea8:	2301      	movs	r3, #1
  }
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	3710      	adds	r7, #16
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}

08000eb2 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8000eb2:	b480      	push	{r7}
 8000eb4:	b089      	sub	sp, #36	@ 0x24
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	60f8      	str	r0, [r7, #12]
 8000eba:	60b9      	str	r1, [r7, #8]
 8000ebc:	607a      	str	r2, [r7, #4]
 8000ebe:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ec6:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	689b      	ldr	r3, [r3, #8]
 8000ece:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000ed0:	7ffb      	ldrb	r3, [r7, #31]
 8000ed2:	2b01      	cmp	r3, #1
 8000ed4:	d003      	beq.n	8000ede <HAL_CAN_AddTxMessage+0x2c>
 8000ed6:	7ffb      	ldrb	r3, [r7, #31]
 8000ed8:	2b02      	cmp	r3, #2
 8000eda:	f040 80ad 	bne.w	8001038 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000ede:	69bb      	ldr	r3, [r7, #24]
 8000ee0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d10a      	bne.n	8000efe <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000ee8:	69bb      	ldr	r3, [r7, #24]
 8000eea:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d105      	bne.n	8000efe <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000ef2:	69bb      	ldr	r3, [r7, #24]
 8000ef4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	f000 8095 	beq.w	8001028 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000efe:	69bb      	ldr	r3, [r7, #24]
 8000f00:	0e1b      	lsrs	r3, r3, #24
 8000f02:	f003 0303 	and.w	r3, r3, #3
 8000f06:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000f08:	2201      	movs	r2, #1
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	409a      	lsls	r2, r3
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000f12:	68bb      	ldr	r3, [r7, #8]
 8000f14:	689b      	ldr	r3, [r3, #8]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d10d      	bne.n	8000f36 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000f1a:	68bb      	ldr	r3, [r7, #8]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000f20:	68bb      	ldr	r3, [r7, #8]
 8000f22:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000f24:	68f9      	ldr	r1, [r7, #12]
 8000f26:	6809      	ldr	r1, [r1, #0]
 8000f28:	431a      	orrs	r2, r3
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	3318      	adds	r3, #24
 8000f2e:	011b      	lsls	r3, r3, #4
 8000f30:	440b      	add	r3, r1
 8000f32:	601a      	str	r2, [r3, #0]
 8000f34:	e00f      	b.n	8000f56 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000f36:	68bb      	ldr	r3, [r7, #8]
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000f3c:	68bb      	ldr	r3, [r7, #8]
 8000f3e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000f40:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000f42:	68bb      	ldr	r3, [r7, #8]
 8000f44:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000f46:	68f9      	ldr	r1, [r7, #12]
 8000f48:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000f4a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	3318      	adds	r3, #24
 8000f50:	011b      	lsls	r3, r3, #4
 8000f52:	440b      	add	r3, r1
 8000f54:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	6819      	ldr	r1, [r3, #0]
 8000f5a:	68bb      	ldr	r3, [r7, #8]
 8000f5c:	691a      	ldr	r2, [r3, #16]
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	3318      	adds	r3, #24
 8000f62:	011b      	lsls	r3, r3, #4
 8000f64:	440b      	add	r3, r1
 8000f66:	3304      	adds	r3, #4
 8000f68:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000f6a:	68bb      	ldr	r3, [r7, #8]
 8000f6c:	7d1b      	ldrb	r3, [r3, #20]
 8000f6e:	2b01      	cmp	r3, #1
 8000f70:	d111      	bne.n	8000f96 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	3318      	adds	r3, #24
 8000f7a:	011b      	lsls	r3, r3, #4
 8000f7c:	4413      	add	r3, r2
 8000f7e:	3304      	adds	r3, #4
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	68fa      	ldr	r2, [r7, #12]
 8000f84:	6811      	ldr	r1, [r2, #0]
 8000f86:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	3318      	adds	r3, #24
 8000f8e:	011b      	lsls	r3, r3, #4
 8000f90:	440b      	add	r3, r1
 8000f92:	3304      	adds	r3, #4
 8000f94:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	3307      	adds	r3, #7
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	061a      	lsls	r2, r3, #24
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	3306      	adds	r3, #6
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	041b      	lsls	r3, r3, #16
 8000fa6:	431a      	orrs	r2, r3
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	3305      	adds	r3, #5
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	021b      	lsls	r3, r3, #8
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	687a      	ldr	r2, [r7, #4]
 8000fb4:	3204      	adds	r2, #4
 8000fb6:	7812      	ldrb	r2, [r2, #0]
 8000fb8:	4610      	mov	r0, r2
 8000fba:	68fa      	ldr	r2, [r7, #12]
 8000fbc:	6811      	ldr	r1, [r2, #0]
 8000fbe:	ea43 0200 	orr.w	r2, r3, r0
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	011b      	lsls	r3, r3, #4
 8000fc6:	440b      	add	r3, r1
 8000fc8:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8000fcc:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	3303      	adds	r3, #3
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	061a      	lsls	r2, r3, #24
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	3302      	adds	r3, #2
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	041b      	lsls	r3, r3, #16
 8000fde:	431a      	orrs	r2, r3
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	3301      	adds	r3, #1
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	021b      	lsls	r3, r3, #8
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	687a      	ldr	r2, [r7, #4]
 8000fec:	7812      	ldrb	r2, [r2, #0]
 8000fee:	4610      	mov	r0, r2
 8000ff0:	68fa      	ldr	r2, [r7, #12]
 8000ff2:	6811      	ldr	r1, [r2, #0]
 8000ff4:	ea43 0200 	orr.w	r2, r3, r0
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	011b      	lsls	r3, r3, #4
 8000ffc:	440b      	add	r3, r1
 8000ffe:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001002:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	681a      	ldr	r2, [r3, #0]
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	3318      	adds	r3, #24
 800100c:	011b      	lsls	r3, r3, #4
 800100e:	4413      	add	r3, r2
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	68fa      	ldr	r2, [r7, #12]
 8001014:	6811      	ldr	r1, [r2, #0]
 8001016:	f043 0201 	orr.w	r2, r3, #1
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	3318      	adds	r3, #24
 800101e:	011b      	lsls	r3, r3, #4
 8001020:	440b      	add	r3, r1
 8001022:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001024:	2300      	movs	r3, #0
 8001026:	e00e      	b.n	8001046 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800102c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001034:	2301      	movs	r3, #1
 8001036:	e006      	b.n	8001046 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800103c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001044:	2301      	movs	r3, #1
  }
}
 8001046:	4618      	mov	r0, r3
 8001048:	3724      	adds	r7, #36	@ 0x24
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr

08001052 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001052:	b480      	push	{r7}
 8001054:	b087      	sub	sp, #28
 8001056:	af00      	add	r7, sp, #0
 8001058:	60f8      	str	r0, [r7, #12]
 800105a:	60b9      	str	r1, [r7, #8]
 800105c:	607a      	str	r2, [r7, #4]
 800105e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001066:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001068:	7dfb      	ldrb	r3, [r7, #23]
 800106a:	2b01      	cmp	r3, #1
 800106c:	d003      	beq.n	8001076 <HAL_CAN_GetRxMessage+0x24>
 800106e:	7dfb      	ldrb	r3, [r7, #23]
 8001070:	2b02      	cmp	r3, #2
 8001072:	f040 8103 	bne.w	800127c <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001076:	68bb      	ldr	r3, [r7, #8]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d10e      	bne.n	800109a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	68db      	ldr	r3, [r3, #12]
 8001082:	f003 0303 	and.w	r3, r3, #3
 8001086:	2b00      	cmp	r3, #0
 8001088:	d116      	bne.n	80010b8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800108e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001096:	2301      	movs	r3, #1
 8001098:	e0f7      	b.n	800128a <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	691b      	ldr	r3, [r3, #16]
 80010a0:	f003 0303 	and.w	r3, r3, #3
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d107      	bne.n	80010b8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010ac:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80010b4:	2301      	movs	r3, #1
 80010b6:	e0e8      	b.n	800128a <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	331b      	adds	r3, #27
 80010c0:	011b      	lsls	r3, r3, #4
 80010c2:	4413      	add	r3, r2
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f003 0204 	and.w	r2, r3, #4
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	689b      	ldr	r3, [r3, #8]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d10c      	bne.n	80010f0 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	681a      	ldr	r2, [r3, #0]
 80010da:	68bb      	ldr	r3, [r7, #8]
 80010dc:	331b      	adds	r3, #27
 80010de:	011b      	lsls	r3, r3, #4
 80010e0:	4413      	add	r3, r2
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	0d5b      	lsrs	r3, r3, #21
 80010e6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	601a      	str	r2, [r3, #0]
 80010ee:	e00b      	b.n	8001108 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	681a      	ldr	r2, [r3, #0]
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	331b      	adds	r3, #27
 80010f8:	011b      	lsls	r3, r3, #4
 80010fa:	4413      	add	r3, r2
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	08db      	lsrs	r3, r3, #3
 8001100:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	681a      	ldr	r2, [r3, #0]
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	331b      	adds	r3, #27
 8001110:	011b      	lsls	r3, r3, #4
 8001112:	4413      	add	r3, r2
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f003 0202 	and.w	r2, r3, #2
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	68bb      	ldr	r3, [r7, #8]
 8001124:	331b      	adds	r3, #27
 8001126:	011b      	lsls	r3, r3, #4
 8001128:	4413      	add	r3, r2
 800112a:	3304      	adds	r3, #4
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f003 0308 	and.w	r3, r3, #8
 8001132:	2b00      	cmp	r3, #0
 8001134:	d003      	beq.n	800113e <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2208      	movs	r2, #8
 800113a:	611a      	str	r2, [r3, #16]
 800113c:	e00b      	b.n	8001156 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	68bb      	ldr	r3, [r7, #8]
 8001144:	331b      	adds	r3, #27
 8001146:	011b      	lsls	r3, r3, #4
 8001148:	4413      	add	r3, r2
 800114a:	3304      	adds	r3, #4
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f003 020f 	and.w	r2, r3, #15
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	68bb      	ldr	r3, [r7, #8]
 800115c:	331b      	adds	r3, #27
 800115e:	011b      	lsls	r3, r3, #4
 8001160:	4413      	add	r3, r2
 8001162:	3304      	adds	r3, #4
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	0a1b      	lsrs	r3, r3, #8
 8001168:	b2da      	uxtb	r2, r3
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	68bb      	ldr	r3, [r7, #8]
 8001174:	331b      	adds	r3, #27
 8001176:	011b      	lsls	r3, r3, #4
 8001178:	4413      	add	r3, r2
 800117a:	3304      	adds	r3, #4
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	0c1b      	lsrs	r3, r3, #16
 8001180:	b29a      	uxth	r2, r3
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	68bb      	ldr	r3, [r7, #8]
 800118c:	011b      	lsls	r3, r3, #4
 800118e:	4413      	add	r3, r2
 8001190:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	b2da      	uxtb	r2, r3
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	011b      	lsls	r3, r3, #4
 80011a4:	4413      	add	r3, r2
 80011a6:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	0a1a      	lsrs	r2, r3, #8
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	3301      	adds	r3, #1
 80011b2:	b2d2      	uxtb	r2, r2
 80011b4:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	68bb      	ldr	r3, [r7, #8]
 80011bc:	011b      	lsls	r3, r3, #4
 80011be:	4413      	add	r3, r2
 80011c0:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	0c1a      	lsrs	r2, r3, #16
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	3302      	adds	r3, #2
 80011cc:	b2d2      	uxtb	r2, r2
 80011ce:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	011b      	lsls	r3, r3, #4
 80011d8:	4413      	add	r3, r2
 80011da:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	0e1a      	lsrs	r2, r3, #24
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	3303      	adds	r3, #3
 80011e6:	b2d2      	uxtb	r2, r2
 80011e8:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	681a      	ldr	r2, [r3, #0]
 80011ee:	68bb      	ldr	r3, [r7, #8]
 80011f0:	011b      	lsls	r3, r3, #4
 80011f2:	4413      	add	r3, r2
 80011f4:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	3304      	adds	r3, #4
 80011fe:	b2d2      	uxtb	r2, r2
 8001200:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	68bb      	ldr	r3, [r7, #8]
 8001208:	011b      	lsls	r3, r3, #4
 800120a:	4413      	add	r3, r2
 800120c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	0a1a      	lsrs	r2, r3, #8
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	3305      	adds	r3, #5
 8001218:	b2d2      	uxtb	r2, r2
 800121a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	011b      	lsls	r3, r3, #4
 8001224:	4413      	add	r3, r2
 8001226:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	0c1a      	lsrs	r2, r3, #16
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	3306      	adds	r3, #6
 8001232:	b2d2      	uxtb	r2, r2
 8001234:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	68bb      	ldr	r3, [r7, #8]
 800123c:	011b      	lsls	r3, r3, #4
 800123e:	4413      	add	r3, r2
 8001240:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	0e1a      	lsrs	r2, r3, #24
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	3307      	adds	r3, #7
 800124c:	b2d2      	uxtb	r2, r2
 800124e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d108      	bne.n	8001268 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	68da      	ldr	r2, [r3, #12]
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f042 0220 	orr.w	r2, r2, #32
 8001264:	60da      	str	r2, [r3, #12]
 8001266:	e007      	b.n	8001278 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	691a      	ldr	r2, [r3, #16]
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f042 0220 	orr.w	r2, r2, #32
 8001276:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001278:	2300      	movs	r3, #0
 800127a:	e006      	b.n	800128a <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001280:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001288:	2301      	movs	r3, #1
  }
}
 800128a:	4618      	mov	r0, r3
 800128c:	371c      	adds	r7, #28
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr

08001296 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001296:	b480      	push	{r7}
 8001298:	b085      	sub	sp, #20
 800129a:	af00      	add	r7, sp, #0
 800129c:	6078      	str	r0, [r7, #4]
 800129e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012a6:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80012a8:	7bfb      	ldrb	r3, [r7, #15]
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	d002      	beq.n	80012b4 <HAL_CAN_ActivateNotification+0x1e>
 80012ae:	7bfb      	ldrb	r3, [r7, #15]
 80012b0:	2b02      	cmp	r3, #2
 80012b2:	d109      	bne.n	80012c8 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	6959      	ldr	r1, [r3, #20]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	683a      	ldr	r2, [r7, #0]
 80012c0:	430a      	orrs	r2, r1
 80012c2:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80012c4:	2300      	movs	r3, #0
 80012c6:	e006      	b.n	80012d6 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012cc:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80012d4:	2301      	movs	r3, #1
  }
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3714      	adds	r7, #20
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr

080012e2 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80012e2:	b580      	push	{r7, lr}
 80012e4:	b08a      	sub	sp, #40	@ 0x28
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80012ea:	2300      	movs	r3, #0
 80012ec:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	695b      	ldr	r3, [r3, #20]
 80012f4:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	689b      	ldr	r3, [r3, #8]
 8001304:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	691b      	ldr	r3, [r3, #16]
 8001314:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	699b      	ldr	r3, [r3, #24]
 800131c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800131e:	6a3b      	ldr	r3, [r7, #32]
 8001320:	f003 0301 	and.w	r3, r3, #1
 8001324:	2b00      	cmp	r3, #0
 8001326:	d07c      	beq.n	8001422 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001328:	69bb      	ldr	r3, [r7, #24]
 800132a:	f003 0301 	and.w	r3, r3, #1
 800132e:	2b00      	cmp	r3, #0
 8001330:	d023      	beq.n	800137a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	2201      	movs	r2, #1
 8001338:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800133a:	69bb      	ldr	r3, [r7, #24]
 800133c:	f003 0302 	and.w	r3, r3, #2
 8001340:	2b00      	cmp	r3, #0
 8001342:	d003      	beq.n	800134c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001344:	6878      	ldr	r0, [r7, #4]
 8001346:	f000 f983 	bl	8001650 <HAL_CAN_TxMailbox0CompleteCallback>
 800134a:	e016      	b.n	800137a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800134c:	69bb      	ldr	r3, [r7, #24]
 800134e:	f003 0304 	and.w	r3, r3, #4
 8001352:	2b00      	cmp	r3, #0
 8001354:	d004      	beq.n	8001360 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001358:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800135c:	627b      	str	r3, [r7, #36]	@ 0x24
 800135e:	e00c      	b.n	800137a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001360:	69bb      	ldr	r3, [r7, #24]
 8001362:	f003 0308 	and.w	r3, r3, #8
 8001366:	2b00      	cmp	r3, #0
 8001368:	d004      	beq.n	8001374 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800136a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800136c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001370:	627b      	str	r3, [r7, #36]	@ 0x24
 8001372:	e002      	b.n	800137a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001374:	6878      	ldr	r0, [r7, #4]
 8001376:	f000 f989 	bl	800168c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800137a:	69bb      	ldr	r3, [r7, #24]
 800137c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001380:	2b00      	cmp	r3, #0
 8001382:	d024      	beq.n	80013ce <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800138c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800138e:	69bb      	ldr	r3, [r7, #24]
 8001390:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001394:	2b00      	cmp	r3, #0
 8001396:	d003      	beq.n	80013a0 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001398:	6878      	ldr	r0, [r7, #4]
 800139a:	f000 f963 	bl	8001664 <HAL_CAN_TxMailbox1CompleteCallback>
 800139e:	e016      	b.n	80013ce <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80013a0:	69bb      	ldr	r3, [r7, #24]
 80013a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d004      	beq.n	80013b4 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80013aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013ac:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80013b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80013b2:	e00c      	b.n	80013ce <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80013b4:	69bb      	ldr	r3, [r7, #24]
 80013b6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d004      	beq.n	80013c8 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80013be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80013c6:	e002      	b.n	80013ce <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80013c8:	6878      	ldr	r0, [r7, #4]
 80013ca:	f000 f969 	bl	80016a0 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80013ce:	69bb      	ldr	r3, [r7, #24]
 80013d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d024      	beq.n	8001422 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80013e0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80013e2:	69bb      	ldr	r3, [r7, #24]
 80013e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d003      	beq.n	80013f4 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80013ec:	6878      	ldr	r0, [r7, #4]
 80013ee:	f000 f943 	bl	8001678 <HAL_CAN_TxMailbox2CompleteCallback>
 80013f2:	e016      	b.n	8001422 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80013f4:	69bb      	ldr	r3, [r7, #24]
 80013f6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d004      	beq.n	8001408 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80013fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001400:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001404:	627b      	str	r3, [r7, #36]	@ 0x24
 8001406:	e00c      	b.n	8001422 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001408:	69bb      	ldr	r3, [r7, #24]
 800140a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800140e:	2b00      	cmp	r3, #0
 8001410:	d004      	beq.n	800141c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001414:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001418:	627b      	str	r3, [r7, #36]	@ 0x24
 800141a:	e002      	b.n	8001422 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800141c:	6878      	ldr	r0, [r7, #4]
 800141e:	f000 f949 	bl	80016b4 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001422:	6a3b      	ldr	r3, [r7, #32]
 8001424:	f003 0308 	and.w	r3, r3, #8
 8001428:	2b00      	cmp	r3, #0
 800142a:	d00c      	beq.n	8001446 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	f003 0310 	and.w	r3, r3, #16
 8001432:	2b00      	cmp	r3, #0
 8001434:	d007      	beq.n	8001446 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001438:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800143c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	2210      	movs	r2, #16
 8001444:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001446:	6a3b      	ldr	r3, [r7, #32]
 8001448:	f003 0304 	and.w	r3, r3, #4
 800144c:	2b00      	cmp	r3, #0
 800144e:	d00b      	beq.n	8001468 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	f003 0308 	and.w	r3, r3, #8
 8001456:	2b00      	cmp	r3, #0
 8001458:	d006      	beq.n	8001468 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	2208      	movs	r2, #8
 8001460:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001462:	6878      	ldr	r0, [r7, #4]
 8001464:	f000 f930 	bl	80016c8 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001468:	6a3b      	ldr	r3, [r7, #32]
 800146a:	f003 0302 	and.w	r3, r3, #2
 800146e:	2b00      	cmp	r3, #0
 8001470:	d009      	beq.n	8001486 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	68db      	ldr	r3, [r3, #12]
 8001478:	f003 0303 	and.w	r3, r3, #3
 800147c:	2b00      	cmp	r3, #0
 800147e:	d002      	beq.n	8001486 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001480:	6878      	ldr	r0, [r7, #4]
 8001482:	f7fe ff17 	bl	80002b4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001486:	6a3b      	ldr	r3, [r7, #32]
 8001488:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800148c:	2b00      	cmp	r3, #0
 800148e:	d00c      	beq.n	80014aa <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	f003 0310 	and.w	r3, r3, #16
 8001496:	2b00      	cmp	r3, #0
 8001498:	d007      	beq.n	80014aa <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800149a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800149c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80014a0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	2210      	movs	r2, #16
 80014a8:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80014aa:	6a3b      	ldr	r3, [r7, #32]
 80014ac:	f003 0320 	and.w	r3, r3, #32
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d00b      	beq.n	80014cc <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	f003 0308 	and.w	r3, r3, #8
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d006      	beq.n	80014cc <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	2208      	movs	r2, #8
 80014c4:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80014c6:	6878      	ldr	r0, [r7, #4]
 80014c8:	f000 f912 	bl	80016f0 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80014cc:	6a3b      	ldr	r3, [r7, #32]
 80014ce:	f003 0310 	and.w	r3, r3, #16
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d009      	beq.n	80014ea <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	691b      	ldr	r3, [r3, #16]
 80014dc:	f003 0303 	and.w	r3, r3, #3
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d002      	beq.n	80014ea <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80014e4:	6878      	ldr	r0, [r7, #4]
 80014e6:	f000 f8f9 	bl	80016dc <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80014ea:	6a3b      	ldr	r3, [r7, #32]
 80014ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d00b      	beq.n	800150c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	f003 0310 	and.w	r3, r3, #16
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d006      	beq.n	800150c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	2210      	movs	r2, #16
 8001504:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001506:	6878      	ldr	r0, [r7, #4]
 8001508:	f000 f8fc 	bl	8001704 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800150c:	6a3b      	ldr	r3, [r7, #32]
 800150e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001512:	2b00      	cmp	r3, #0
 8001514:	d00b      	beq.n	800152e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	f003 0308 	and.w	r3, r3, #8
 800151c:	2b00      	cmp	r3, #0
 800151e:	d006      	beq.n	800152e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	2208      	movs	r2, #8
 8001526:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001528:	6878      	ldr	r0, [r7, #4]
 800152a:	f000 f8f5 	bl	8001718 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800152e:	6a3b      	ldr	r3, [r7, #32]
 8001530:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001534:	2b00      	cmp	r3, #0
 8001536:	d07b      	beq.n	8001630 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001538:	69fb      	ldr	r3, [r7, #28]
 800153a:	f003 0304 	and.w	r3, r3, #4
 800153e:	2b00      	cmp	r3, #0
 8001540:	d072      	beq.n	8001628 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001542:	6a3b      	ldr	r3, [r7, #32]
 8001544:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001548:	2b00      	cmp	r3, #0
 800154a:	d008      	beq.n	800155e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001552:	2b00      	cmp	r3, #0
 8001554:	d003      	beq.n	800155e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001558:	f043 0301 	orr.w	r3, r3, #1
 800155c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800155e:	6a3b      	ldr	r3, [r7, #32]
 8001560:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001564:	2b00      	cmp	r3, #0
 8001566:	d008      	beq.n	800157a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800156e:	2b00      	cmp	r3, #0
 8001570:	d003      	beq.n	800157a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001574:	f043 0302 	orr.w	r3, r3, #2
 8001578:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800157a:	6a3b      	ldr	r3, [r7, #32]
 800157c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001580:	2b00      	cmp	r3, #0
 8001582:	d008      	beq.n	8001596 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800158a:	2b00      	cmp	r3, #0
 800158c:	d003      	beq.n	8001596 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800158e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001590:	f043 0304 	orr.w	r3, r3, #4
 8001594:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001596:	6a3b      	ldr	r3, [r7, #32]
 8001598:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800159c:	2b00      	cmp	r3, #0
 800159e:	d043      	beq.n	8001628 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d03e      	beq.n	8001628 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80015b0:	2b60      	cmp	r3, #96	@ 0x60
 80015b2:	d02b      	beq.n	800160c <HAL_CAN_IRQHandler+0x32a>
 80015b4:	2b60      	cmp	r3, #96	@ 0x60
 80015b6:	d82e      	bhi.n	8001616 <HAL_CAN_IRQHandler+0x334>
 80015b8:	2b50      	cmp	r3, #80	@ 0x50
 80015ba:	d022      	beq.n	8001602 <HAL_CAN_IRQHandler+0x320>
 80015bc:	2b50      	cmp	r3, #80	@ 0x50
 80015be:	d82a      	bhi.n	8001616 <HAL_CAN_IRQHandler+0x334>
 80015c0:	2b40      	cmp	r3, #64	@ 0x40
 80015c2:	d019      	beq.n	80015f8 <HAL_CAN_IRQHandler+0x316>
 80015c4:	2b40      	cmp	r3, #64	@ 0x40
 80015c6:	d826      	bhi.n	8001616 <HAL_CAN_IRQHandler+0x334>
 80015c8:	2b30      	cmp	r3, #48	@ 0x30
 80015ca:	d010      	beq.n	80015ee <HAL_CAN_IRQHandler+0x30c>
 80015cc:	2b30      	cmp	r3, #48	@ 0x30
 80015ce:	d822      	bhi.n	8001616 <HAL_CAN_IRQHandler+0x334>
 80015d0:	2b10      	cmp	r3, #16
 80015d2:	d002      	beq.n	80015da <HAL_CAN_IRQHandler+0x2f8>
 80015d4:	2b20      	cmp	r3, #32
 80015d6:	d005      	beq.n	80015e4 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80015d8:	e01d      	b.n	8001616 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80015da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015dc:	f043 0308 	orr.w	r3, r3, #8
 80015e0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80015e2:	e019      	b.n	8001618 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80015e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015e6:	f043 0310 	orr.w	r3, r3, #16
 80015ea:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80015ec:	e014      	b.n	8001618 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80015ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015f0:	f043 0320 	orr.w	r3, r3, #32
 80015f4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80015f6:	e00f      	b.n	8001618 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80015f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80015fe:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001600:	e00a      	b.n	8001618 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001604:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001608:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800160a:	e005      	b.n	8001618 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800160c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800160e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001612:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001614:	e000      	b.n	8001618 <HAL_CAN_IRQHandler+0x336>
            break;
 8001616:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	699a      	ldr	r2, [r3, #24]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001626:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	2204      	movs	r2, #4
 800162e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001632:	2b00      	cmp	r3, #0
 8001634:	d008      	beq.n	8001648 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800163a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800163c:	431a      	orrs	r2, r3
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	f000 f872 	bl	800172c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001648:	bf00      	nop
 800164a:	3728      	adds	r7, #40	@ 0x28
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}

08001650 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001658:	bf00      	nop
 800165a:	370c      	adds	r7, #12
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr

08001664 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800166c:	bf00      	nop
 800166e:	370c      	adds	r7, #12
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr

08001678 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001680:	bf00      	nop
 8001682:	370c      	adds	r7, #12
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr

0800168c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001694:	bf00      	nop
 8001696:	370c      	adds	r7, #12
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr

080016a0 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b083      	sub	sp, #12
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80016a8:	bf00      	nop
 80016aa:	370c      	adds	r7, #12
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr

080016b4 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80016bc:	bf00      	nop
 80016be:	370c      	adds	r7, #12
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr

080016c8 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80016d0:	bf00      	nop
 80016d2:	370c      	adds	r7, #12
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr

080016dc <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80016e4:	bf00      	nop
 80016e6:	370c      	adds	r7, #12
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr

080016f0 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80016f8:	bf00      	nop
 80016fa:	370c      	adds	r7, #12
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr

08001704 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800170c:	bf00      	nop
 800170e:	370c      	adds	r7, #12
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr

08001718 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001720:	bf00      	nop
 8001722:	370c      	adds	r7, #12
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr

0800172c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001734:	bf00      	nop
 8001736:	370c      	adds	r7, #12
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr

08001740 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001740:	b480      	push	{r7}
 8001742:	b085      	sub	sp, #20
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	f003 0307 	and.w	r3, r3, #7
 800174e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001750:	4b0c      	ldr	r3, [pc, #48]	@ (8001784 <__NVIC_SetPriorityGrouping+0x44>)
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001756:	68ba      	ldr	r2, [r7, #8]
 8001758:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800175c:	4013      	ands	r3, r2
 800175e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001768:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800176c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001770:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001772:	4a04      	ldr	r2, [pc, #16]	@ (8001784 <__NVIC_SetPriorityGrouping+0x44>)
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	60d3      	str	r3, [r2, #12]
}
 8001778:	bf00      	nop
 800177a:	3714      	adds	r7, #20
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr
 8001784:	e000ed00 	.word	0xe000ed00

08001788 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800178c:	4b04      	ldr	r3, [pc, #16]	@ (80017a0 <__NVIC_GetPriorityGrouping+0x18>)
 800178e:	68db      	ldr	r3, [r3, #12]
 8001790:	0a1b      	lsrs	r3, r3, #8
 8001792:	f003 0307 	and.w	r3, r3, #7
}
 8001796:	4618      	mov	r0, r3
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr
 80017a0:	e000ed00 	.word	0xe000ed00

080017a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	4603      	mov	r3, r0
 80017ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	db0b      	blt.n	80017ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017b6:	79fb      	ldrb	r3, [r7, #7]
 80017b8:	f003 021f 	and.w	r2, r3, #31
 80017bc:	4907      	ldr	r1, [pc, #28]	@ (80017dc <__NVIC_EnableIRQ+0x38>)
 80017be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c2:	095b      	lsrs	r3, r3, #5
 80017c4:	2001      	movs	r0, #1
 80017c6:	fa00 f202 	lsl.w	r2, r0, r2
 80017ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017ce:	bf00      	nop
 80017d0:	370c      	adds	r7, #12
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	e000e100 	.word	0xe000e100

080017e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	4603      	mov	r3, r0
 80017e8:	6039      	str	r1, [r7, #0]
 80017ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	db0a      	blt.n	800180a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	b2da      	uxtb	r2, r3
 80017f8:	490c      	ldr	r1, [pc, #48]	@ (800182c <__NVIC_SetPriority+0x4c>)
 80017fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017fe:	0112      	lsls	r2, r2, #4
 8001800:	b2d2      	uxtb	r2, r2
 8001802:	440b      	add	r3, r1
 8001804:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001808:	e00a      	b.n	8001820 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	b2da      	uxtb	r2, r3
 800180e:	4908      	ldr	r1, [pc, #32]	@ (8001830 <__NVIC_SetPriority+0x50>)
 8001810:	79fb      	ldrb	r3, [r7, #7]
 8001812:	f003 030f 	and.w	r3, r3, #15
 8001816:	3b04      	subs	r3, #4
 8001818:	0112      	lsls	r2, r2, #4
 800181a:	b2d2      	uxtb	r2, r2
 800181c:	440b      	add	r3, r1
 800181e:	761a      	strb	r2, [r3, #24]
}
 8001820:	bf00      	nop
 8001822:	370c      	adds	r7, #12
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr
 800182c:	e000e100 	.word	0xe000e100
 8001830:	e000ed00 	.word	0xe000ed00

08001834 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001834:	b480      	push	{r7}
 8001836:	b089      	sub	sp, #36	@ 0x24
 8001838:	af00      	add	r7, sp, #0
 800183a:	60f8      	str	r0, [r7, #12]
 800183c:	60b9      	str	r1, [r7, #8]
 800183e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	f003 0307 	and.w	r3, r3, #7
 8001846:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001848:	69fb      	ldr	r3, [r7, #28]
 800184a:	f1c3 0307 	rsb	r3, r3, #7
 800184e:	2b04      	cmp	r3, #4
 8001850:	bf28      	it	cs
 8001852:	2304      	movcs	r3, #4
 8001854:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001856:	69fb      	ldr	r3, [r7, #28]
 8001858:	3304      	adds	r3, #4
 800185a:	2b06      	cmp	r3, #6
 800185c:	d902      	bls.n	8001864 <NVIC_EncodePriority+0x30>
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	3b03      	subs	r3, #3
 8001862:	e000      	b.n	8001866 <NVIC_EncodePriority+0x32>
 8001864:	2300      	movs	r3, #0
 8001866:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001868:	f04f 32ff 	mov.w	r2, #4294967295
 800186c:	69bb      	ldr	r3, [r7, #24]
 800186e:	fa02 f303 	lsl.w	r3, r2, r3
 8001872:	43da      	mvns	r2, r3
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	401a      	ands	r2, r3
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800187c:	f04f 31ff 	mov.w	r1, #4294967295
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	fa01 f303 	lsl.w	r3, r1, r3
 8001886:	43d9      	mvns	r1, r3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800188c:	4313      	orrs	r3, r2
         );
}
 800188e:	4618      	mov	r0, r3
 8001890:	3724      	adds	r7, #36	@ 0x24
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr

0800189a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800189a:	b580      	push	{r7, lr}
 800189c:	b082      	sub	sp, #8
 800189e:	af00      	add	r7, sp, #0
 80018a0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	f7ff ff4c 	bl	8001740 <__NVIC_SetPriorityGrouping>
}
 80018a8:	bf00      	nop
 80018aa:	3708      	adds	r7, #8
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}

080018b0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b086      	sub	sp, #24
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	4603      	mov	r3, r0
 80018b8:	60b9      	str	r1, [r7, #8]
 80018ba:	607a      	str	r2, [r7, #4]
 80018bc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018be:	2300      	movs	r3, #0
 80018c0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018c2:	f7ff ff61 	bl	8001788 <__NVIC_GetPriorityGrouping>
 80018c6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018c8:	687a      	ldr	r2, [r7, #4]
 80018ca:	68b9      	ldr	r1, [r7, #8]
 80018cc:	6978      	ldr	r0, [r7, #20]
 80018ce:	f7ff ffb1 	bl	8001834 <NVIC_EncodePriority>
 80018d2:	4602      	mov	r2, r0
 80018d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018d8:	4611      	mov	r1, r2
 80018da:	4618      	mov	r0, r3
 80018dc:	f7ff ff80 	bl	80017e0 <__NVIC_SetPriority>
}
 80018e0:	bf00      	nop
 80018e2:	3718      	adds	r7, #24
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}

080018e8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	4603      	mov	r3, r0
 80018f0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f6:	4618      	mov	r0, r3
 80018f8:	f7ff ff54 	bl	80017a4 <__NVIC_EnableIRQ>
}
 80018fc:	bf00      	nop
 80018fe:	3708      	adds	r7, #8
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}

08001904 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001904:	b480      	push	{r7}
 8001906:	b087      	sub	sp, #28
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
 800190c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800190e:	2300      	movs	r3, #0
 8001910:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001912:	e14e      	b.n	8001bb2 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	2101      	movs	r1, #1
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	fa01 f303 	lsl.w	r3, r1, r3
 8001920:	4013      	ands	r3, r2
 8001922:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	2b00      	cmp	r3, #0
 8001928:	f000 8140 	beq.w	8001bac <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f003 0303 	and.w	r3, r3, #3
 8001934:	2b01      	cmp	r3, #1
 8001936:	d005      	beq.n	8001944 <HAL_GPIO_Init+0x40>
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	f003 0303 	and.w	r3, r3, #3
 8001940:	2b02      	cmp	r3, #2
 8001942:	d130      	bne.n	80019a6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	005b      	lsls	r3, r3, #1
 800194e:	2203      	movs	r2, #3
 8001950:	fa02 f303 	lsl.w	r3, r2, r3
 8001954:	43db      	mvns	r3, r3
 8001956:	693a      	ldr	r2, [r7, #16]
 8001958:	4013      	ands	r3, r2
 800195a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	68da      	ldr	r2, [r3, #12]
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	005b      	lsls	r3, r3, #1
 8001964:	fa02 f303 	lsl.w	r3, r2, r3
 8001968:	693a      	ldr	r2, [r7, #16]
 800196a:	4313      	orrs	r3, r2
 800196c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	693a      	ldr	r2, [r7, #16]
 8001972:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800197a:	2201      	movs	r2, #1
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	fa02 f303 	lsl.w	r3, r2, r3
 8001982:	43db      	mvns	r3, r3
 8001984:	693a      	ldr	r2, [r7, #16]
 8001986:	4013      	ands	r3, r2
 8001988:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	091b      	lsrs	r3, r3, #4
 8001990:	f003 0201 	and.w	r2, r3, #1
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	fa02 f303 	lsl.w	r3, r2, r3
 800199a:	693a      	ldr	r2, [r7, #16]
 800199c:	4313      	orrs	r3, r2
 800199e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	693a      	ldr	r2, [r7, #16]
 80019a4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	f003 0303 	and.w	r3, r3, #3
 80019ae:	2b03      	cmp	r3, #3
 80019b0:	d017      	beq.n	80019e2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	68db      	ldr	r3, [r3, #12]
 80019b6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	005b      	lsls	r3, r3, #1
 80019bc:	2203      	movs	r2, #3
 80019be:	fa02 f303 	lsl.w	r3, r2, r3
 80019c2:	43db      	mvns	r3, r3
 80019c4:	693a      	ldr	r2, [r7, #16]
 80019c6:	4013      	ands	r3, r2
 80019c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	689a      	ldr	r2, [r3, #8]
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	005b      	lsls	r3, r3, #1
 80019d2:	fa02 f303 	lsl.w	r3, r2, r3
 80019d6:	693a      	ldr	r2, [r7, #16]
 80019d8:	4313      	orrs	r3, r2
 80019da:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	693a      	ldr	r2, [r7, #16]
 80019e0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	f003 0303 	and.w	r3, r3, #3
 80019ea:	2b02      	cmp	r3, #2
 80019ec:	d123      	bne.n	8001a36 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	08da      	lsrs	r2, r3, #3
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	3208      	adds	r2, #8
 80019f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019fa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	f003 0307 	and.w	r3, r3, #7
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	220f      	movs	r2, #15
 8001a06:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0a:	43db      	mvns	r3, r3
 8001a0c:	693a      	ldr	r2, [r7, #16]
 8001a0e:	4013      	ands	r3, r2
 8001a10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	691a      	ldr	r2, [r3, #16]
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	f003 0307 	and.w	r3, r3, #7
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a22:	693a      	ldr	r2, [r7, #16]
 8001a24:	4313      	orrs	r3, r2
 8001a26:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	08da      	lsrs	r2, r3, #3
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	3208      	adds	r2, #8
 8001a30:	6939      	ldr	r1, [r7, #16]
 8001a32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	005b      	lsls	r3, r3, #1
 8001a40:	2203      	movs	r2, #3
 8001a42:	fa02 f303 	lsl.w	r3, r2, r3
 8001a46:	43db      	mvns	r3, r3
 8001a48:	693a      	ldr	r2, [r7, #16]
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	f003 0203 	and.w	r2, r3, #3
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	005b      	lsls	r3, r3, #1
 8001a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5e:	693a      	ldr	r2, [r7, #16]
 8001a60:	4313      	orrs	r3, r2
 8001a62:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	693a      	ldr	r2, [r7, #16]
 8001a68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	f000 809a 	beq.w	8001bac <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a78:	4b55      	ldr	r3, [pc, #340]	@ (8001bd0 <HAL_GPIO_Init+0x2cc>)
 8001a7a:	699b      	ldr	r3, [r3, #24]
 8001a7c:	4a54      	ldr	r2, [pc, #336]	@ (8001bd0 <HAL_GPIO_Init+0x2cc>)
 8001a7e:	f043 0301 	orr.w	r3, r3, #1
 8001a82:	6193      	str	r3, [r2, #24]
 8001a84:	4b52      	ldr	r3, [pc, #328]	@ (8001bd0 <HAL_GPIO_Init+0x2cc>)
 8001a86:	699b      	ldr	r3, [r3, #24]
 8001a88:	f003 0301 	and.w	r3, r3, #1
 8001a8c:	60bb      	str	r3, [r7, #8]
 8001a8e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001a90:	4a50      	ldr	r2, [pc, #320]	@ (8001bd4 <HAL_GPIO_Init+0x2d0>)
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	089b      	lsrs	r3, r3, #2
 8001a96:	3302      	adds	r3, #2
 8001a98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a9c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	f003 0303 	and.w	r3, r3, #3
 8001aa4:	009b      	lsls	r3, r3, #2
 8001aa6:	220f      	movs	r2, #15
 8001aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aac:	43db      	mvns	r3, r3
 8001aae:	693a      	ldr	r2, [r7, #16]
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001aba:	d013      	beq.n	8001ae4 <HAL_GPIO_Init+0x1e0>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	4a46      	ldr	r2, [pc, #280]	@ (8001bd8 <HAL_GPIO_Init+0x2d4>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d00d      	beq.n	8001ae0 <HAL_GPIO_Init+0x1dc>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	4a45      	ldr	r2, [pc, #276]	@ (8001bdc <HAL_GPIO_Init+0x2d8>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d007      	beq.n	8001adc <HAL_GPIO_Init+0x1d8>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	4a44      	ldr	r2, [pc, #272]	@ (8001be0 <HAL_GPIO_Init+0x2dc>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d101      	bne.n	8001ad8 <HAL_GPIO_Init+0x1d4>
 8001ad4:	2303      	movs	r3, #3
 8001ad6:	e006      	b.n	8001ae6 <HAL_GPIO_Init+0x1e2>
 8001ad8:	2305      	movs	r3, #5
 8001ada:	e004      	b.n	8001ae6 <HAL_GPIO_Init+0x1e2>
 8001adc:	2302      	movs	r3, #2
 8001ade:	e002      	b.n	8001ae6 <HAL_GPIO_Init+0x1e2>
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e000      	b.n	8001ae6 <HAL_GPIO_Init+0x1e2>
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	697a      	ldr	r2, [r7, #20]
 8001ae8:	f002 0203 	and.w	r2, r2, #3
 8001aec:	0092      	lsls	r2, r2, #2
 8001aee:	4093      	lsls	r3, r2
 8001af0:	693a      	ldr	r2, [r7, #16]
 8001af2:	4313      	orrs	r3, r2
 8001af4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001af6:	4937      	ldr	r1, [pc, #220]	@ (8001bd4 <HAL_GPIO_Init+0x2d0>)
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	089b      	lsrs	r3, r3, #2
 8001afc:	3302      	adds	r3, #2
 8001afe:	693a      	ldr	r2, [r7, #16]
 8001b00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b04:	4b37      	ldr	r3, [pc, #220]	@ (8001be4 <HAL_GPIO_Init+0x2e0>)
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	43db      	mvns	r3, r3
 8001b0e:	693a      	ldr	r2, [r7, #16]
 8001b10:	4013      	ands	r3, r2
 8001b12:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d003      	beq.n	8001b28 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001b20:	693a      	ldr	r2, [r7, #16]
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	4313      	orrs	r3, r2
 8001b26:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001b28:	4a2e      	ldr	r2, [pc, #184]	@ (8001be4 <HAL_GPIO_Init+0x2e0>)
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b2e:	4b2d      	ldr	r3, [pc, #180]	@ (8001be4 <HAL_GPIO_Init+0x2e0>)
 8001b30:	68db      	ldr	r3, [r3, #12]
 8001b32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	43db      	mvns	r3, r3
 8001b38:	693a      	ldr	r2, [r7, #16]
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d003      	beq.n	8001b52 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001b4a:	693a      	ldr	r2, [r7, #16]
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001b52:	4a24      	ldr	r2, [pc, #144]	@ (8001be4 <HAL_GPIO_Init+0x2e0>)
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b58:	4b22      	ldr	r3, [pc, #136]	@ (8001be4 <HAL_GPIO_Init+0x2e0>)
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	43db      	mvns	r3, r3
 8001b62:	693a      	ldr	r2, [r7, #16]
 8001b64:	4013      	ands	r3, r2
 8001b66:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d003      	beq.n	8001b7c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001b74:	693a      	ldr	r2, [r7, #16]
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001b7c:	4a19      	ldr	r2, [pc, #100]	@ (8001be4 <HAL_GPIO_Init+0x2e0>)
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b82:	4b18      	ldr	r3, [pc, #96]	@ (8001be4 <HAL_GPIO_Init+0x2e0>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	43db      	mvns	r3, r3
 8001b8c:	693a      	ldr	r2, [r7, #16]
 8001b8e:	4013      	ands	r3, r2
 8001b90:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d003      	beq.n	8001ba6 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001b9e:	693a      	ldr	r2, [r7, #16]
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001ba6:	4a0f      	ldr	r2, [pc, #60]	@ (8001be4 <HAL_GPIO_Init+0x2e0>)
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	3301      	adds	r3, #1
 8001bb0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	fa22 f303 	lsr.w	r3, r2, r3
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	f47f aea9 	bne.w	8001914 <HAL_GPIO_Init+0x10>
  }
}
 8001bc2:	bf00      	nop
 8001bc4:	bf00      	nop
 8001bc6:	371c      	adds	r7, #28
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr
 8001bd0:	40021000 	.word	0x40021000
 8001bd4:	40010000 	.word	0x40010000
 8001bd8:	48000400 	.word	0x48000400
 8001bdc:	48000800 	.word	0x48000800
 8001be0:	48000c00 	.word	0x48000c00
 8001be4:	40010400 	.word	0x40010400

08001be8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	460b      	mov	r3, r1
 8001bf2:	807b      	strh	r3, [r7, #2]
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bf8:	787b      	ldrb	r3, [r7, #1]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d003      	beq.n	8001c06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001bfe:	887a      	ldrh	r2, [r7, #2]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c04:	e002      	b.n	8001c0c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c06:	887a      	ldrh	r2, [r7, #2]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001c0c:	bf00      	nop
 8001c0e:	370c      	adds	r7, #12
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr

08001c18 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b085      	sub	sp, #20
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
 8001c20:	460b      	mov	r3, r1
 8001c22:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	695b      	ldr	r3, [r3, #20]
 8001c28:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c2a:	887a      	ldrh	r2, [r7, #2]
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	4013      	ands	r3, r2
 8001c30:	041a      	lsls	r2, r3, #16
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	43d9      	mvns	r1, r3
 8001c36:	887b      	ldrh	r3, [r7, #2]
 8001c38:	400b      	ands	r3, r1
 8001c3a:	431a      	orrs	r2, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	619a      	str	r2, [r3, #24]
}
 8001c40:	bf00      	nop
 8001c42:	3714      	adds	r7, #20
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr

08001c4c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c58:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c5c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c62:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d102      	bne.n	8001c72 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	f001 b823 	b.w	8002cb8 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c72:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c76:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 0301 	and.w	r3, r3, #1
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	f000 817d 	beq.w	8001f82 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001c88:	4bbc      	ldr	r3, [pc, #752]	@ (8001f7c <HAL_RCC_OscConfig+0x330>)
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	f003 030c 	and.w	r3, r3, #12
 8001c90:	2b04      	cmp	r3, #4
 8001c92:	d00c      	beq.n	8001cae <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c94:	4bb9      	ldr	r3, [pc, #740]	@ (8001f7c <HAL_RCC_OscConfig+0x330>)
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	f003 030c 	and.w	r3, r3, #12
 8001c9c:	2b08      	cmp	r3, #8
 8001c9e:	d15c      	bne.n	8001d5a <HAL_RCC_OscConfig+0x10e>
 8001ca0:	4bb6      	ldr	r3, [pc, #728]	@ (8001f7c <HAL_RCC_OscConfig+0x330>)
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ca8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001cac:	d155      	bne.n	8001d5a <HAL_RCC_OscConfig+0x10e>
 8001cae:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001cb2:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cb6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8001cba:	fa93 f3a3 	rbit	r3, r3
 8001cbe:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001cc2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cc6:	fab3 f383 	clz	r3, r3
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	095b      	lsrs	r3, r3, #5
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	f043 0301 	orr.w	r3, r3, #1
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d102      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x94>
 8001cda:	4ba8      	ldr	r3, [pc, #672]	@ (8001f7c <HAL_RCC_OscConfig+0x330>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	e015      	b.n	8001d0c <HAL_RCC_OscConfig+0xc0>
 8001ce0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001ce4:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ce8:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8001cec:	fa93 f3a3 	rbit	r3, r3
 8001cf0:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8001cf4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001cf8:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001cfc:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8001d00:	fa93 f3a3 	rbit	r3, r3
 8001d04:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8001d08:	4b9c      	ldr	r3, [pc, #624]	@ (8001f7c <HAL_RCC_OscConfig+0x330>)
 8001d0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d0c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001d10:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8001d14:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8001d18:	fa92 f2a2 	rbit	r2, r2
 8001d1c:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8001d20:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8001d24:	fab2 f282 	clz	r2, r2
 8001d28:	b2d2      	uxtb	r2, r2
 8001d2a:	f042 0220 	orr.w	r2, r2, #32
 8001d2e:	b2d2      	uxtb	r2, r2
 8001d30:	f002 021f 	and.w	r2, r2, #31
 8001d34:	2101      	movs	r1, #1
 8001d36:	fa01 f202 	lsl.w	r2, r1, r2
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	f000 811f 	beq.w	8001f80 <HAL_RCC_OscConfig+0x334>
 8001d42:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d46:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	f040 8116 	bne.w	8001f80 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	f000 bfaf 	b.w	8002cb8 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d5a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d5e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d6a:	d106      	bne.n	8001d7a <HAL_RCC_OscConfig+0x12e>
 8001d6c:	4b83      	ldr	r3, [pc, #524]	@ (8001f7c <HAL_RCC_OscConfig+0x330>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a82      	ldr	r2, [pc, #520]	@ (8001f7c <HAL_RCC_OscConfig+0x330>)
 8001d72:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d76:	6013      	str	r3, [r2, #0]
 8001d78:	e036      	b.n	8001de8 <HAL_RCC_OscConfig+0x19c>
 8001d7a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d7e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d10c      	bne.n	8001da4 <HAL_RCC_OscConfig+0x158>
 8001d8a:	4b7c      	ldr	r3, [pc, #496]	@ (8001f7c <HAL_RCC_OscConfig+0x330>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a7b      	ldr	r2, [pc, #492]	@ (8001f7c <HAL_RCC_OscConfig+0x330>)
 8001d90:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d94:	6013      	str	r3, [r2, #0]
 8001d96:	4b79      	ldr	r3, [pc, #484]	@ (8001f7c <HAL_RCC_OscConfig+0x330>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a78      	ldr	r2, [pc, #480]	@ (8001f7c <HAL_RCC_OscConfig+0x330>)
 8001d9c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001da0:	6013      	str	r3, [r2, #0]
 8001da2:	e021      	b.n	8001de8 <HAL_RCC_OscConfig+0x19c>
 8001da4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001da8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001db4:	d10c      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x184>
 8001db6:	4b71      	ldr	r3, [pc, #452]	@ (8001f7c <HAL_RCC_OscConfig+0x330>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a70      	ldr	r2, [pc, #448]	@ (8001f7c <HAL_RCC_OscConfig+0x330>)
 8001dbc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001dc0:	6013      	str	r3, [r2, #0]
 8001dc2:	4b6e      	ldr	r3, [pc, #440]	@ (8001f7c <HAL_RCC_OscConfig+0x330>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a6d      	ldr	r2, [pc, #436]	@ (8001f7c <HAL_RCC_OscConfig+0x330>)
 8001dc8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001dcc:	6013      	str	r3, [r2, #0]
 8001dce:	e00b      	b.n	8001de8 <HAL_RCC_OscConfig+0x19c>
 8001dd0:	4b6a      	ldr	r3, [pc, #424]	@ (8001f7c <HAL_RCC_OscConfig+0x330>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a69      	ldr	r2, [pc, #420]	@ (8001f7c <HAL_RCC_OscConfig+0x330>)
 8001dd6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001dda:	6013      	str	r3, [r2, #0]
 8001ddc:	4b67      	ldr	r3, [pc, #412]	@ (8001f7c <HAL_RCC_OscConfig+0x330>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a66      	ldr	r2, [pc, #408]	@ (8001f7c <HAL_RCC_OscConfig+0x330>)
 8001de2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001de6:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001de8:	4b64      	ldr	r3, [pc, #400]	@ (8001f7c <HAL_RCC_OscConfig+0x330>)
 8001dea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dec:	f023 020f 	bic.w	r2, r3, #15
 8001df0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001df4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	495f      	ldr	r1, [pc, #380]	@ (8001f7c <HAL_RCC_OscConfig+0x330>)
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e06:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d059      	beq.n	8001ec6 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e12:	f7fe fe39 	bl	8000a88 <HAL_GetTick>
 8001e16:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e1a:	e00a      	b.n	8001e32 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e1c:	f7fe fe34 	bl	8000a88 <HAL_GetTick>
 8001e20:	4602      	mov	r2, r0
 8001e22:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	2b64      	cmp	r3, #100	@ 0x64
 8001e2a:	d902      	bls.n	8001e32 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	f000 bf43 	b.w	8002cb8 <HAL_RCC_OscConfig+0x106c>
 8001e32:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001e36:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e3a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001e3e:	fa93 f3a3 	rbit	r3, r3
 8001e42:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8001e46:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e4a:	fab3 f383 	clz	r3, r3
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	095b      	lsrs	r3, r3, #5
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	f043 0301 	orr.w	r3, r3, #1
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d102      	bne.n	8001e64 <HAL_RCC_OscConfig+0x218>
 8001e5e:	4b47      	ldr	r3, [pc, #284]	@ (8001f7c <HAL_RCC_OscConfig+0x330>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	e015      	b.n	8001e90 <HAL_RCC_OscConfig+0x244>
 8001e64:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001e68:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e6c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8001e70:	fa93 f3a3 	rbit	r3, r3
 8001e74:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001e78:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001e7c:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001e80:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8001e84:	fa93 f3a3 	rbit	r3, r3
 8001e88:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8001e8c:	4b3b      	ldr	r3, [pc, #236]	@ (8001f7c <HAL_RCC_OscConfig+0x330>)
 8001e8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e90:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001e94:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8001e98:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8001e9c:	fa92 f2a2 	rbit	r2, r2
 8001ea0:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8001ea4:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8001ea8:	fab2 f282 	clz	r2, r2
 8001eac:	b2d2      	uxtb	r2, r2
 8001eae:	f042 0220 	orr.w	r2, r2, #32
 8001eb2:	b2d2      	uxtb	r2, r2
 8001eb4:	f002 021f 	and.w	r2, r2, #31
 8001eb8:	2101      	movs	r1, #1
 8001eba:	fa01 f202 	lsl.w	r2, r1, r2
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d0ab      	beq.n	8001e1c <HAL_RCC_OscConfig+0x1d0>
 8001ec4:	e05d      	b.n	8001f82 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ec6:	f7fe fddf 	bl	8000a88 <HAL_GetTick>
 8001eca:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ece:	e00a      	b.n	8001ee6 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ed0:	f7fe fdda 	bl	8000a88 <HAL_GetTick>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001eda:	1ad3      	subs	r3, r2, r3
 8001edc:	2b64      	cmp	r3, #100	@ 0x64
 8001ede:	d902      	bls.n	8001ee6 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001ee0:	2303      	movs	r3, #3
 8001ee2:	f000 bee9 	b.w	8002cb8 <HAL_RCC_OscConfig+0x106c>
 8001ee6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001eea:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eee:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8001ef2:	fa93 f3a3 	rbit	r3, r3
 8001ef6:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8001efa:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001efe:	fab3 f383 	clz	r3, r3
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	095b      	lsrs	r3, r3, #5
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	f043 0301 	orr.w	r3, r3, #1
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d102      	bne.n	8001f18 <HAL_RCC_OscConfig+0x2cc>
 8001f12:	4b1a      	ldr	r3, [pc, #104]	@ (8001f7c <HAL_RCC_OscConfig+0x330>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	e015      	b.n	8001f44 <HAL_RCC_OscConfig+0x2f8>
 8001f18:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001f1c:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f20:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8001f24:	fa93 f3a3 	rbit	r3, r3
 8001f28:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001f2c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001f30:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001f34:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8001f38:	fa93 f3a3 	rbit	r3, r3
 8001f3c:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8001f40:	4b0e      	ldr	r3, [pc, #56]	@ (8001f7c <HAL_RCC_OscConfig+0x330>)
 8001f42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f44:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001f48:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8001f4c:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001f50:	fa92 f2a2 	rbit	r2, r2
 8001f54:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8001f58:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001f5c:	fab2 f282 	clz	r2, r2
 8001f60:	b2d2      	uxtb	r2, r2
 8001f62:	f042 0220 	orr.w	r2, r2, #32
 8001f66:	b2d2      	uxtb	r2, r2
 8001f68:	f002 021f 	and.w	r2, r2, #31
 8001f6c:	2101      	movs	r1, #1
 8001f6e:	fa01 f202 	lsl.w	r2, r1, r2
 8001f72:	4013      	ands	r3, r2
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d1ab      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x284>
 8001f78:	e003      	b.n	8001f82 <HAL_RCC_OscConfig+0x336>
 8001f7a:	bf00      	nop
 8001f7c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f82:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f86:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 0302 	and.w	r3, r3, #2
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	f000 817d 	beq.w	8002292 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001f98:	4ba6      	ldr	r3, [pc, #664]	@ (8002234 <HAL_RCC_OscConfig+0x5e8>)
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f003 030c 	and.w	r3, r3, #12
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d00b      	beq.n	8001fbc <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001fa4:	4ba3      	ldr	r3, [pc, #652]	@ (8002234 <HAL_RCC_OscConfig+0x5e8>)
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f003 030c 	and.w	r3, r3, #12
 8001fac:	2b08      	cmp	r3, #8
 8001fae:	d172      	bne.n	8002096 <HAL_RCC_OscConfig+0x44a>
 8001fb0:	4ba0      	ldr	r3, [pc, #640]	@ (8002234 <HAL_RCC_OscConfig+0x5e8>)
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d16c      	bne.n	8002096 <HAL_RCC_OscConfig+0x44a>
 8001fbc:	2302      	movs	r3, #2
 8001fbe:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fc2:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001fc6:	fa93 f3a3 	rbit	r3, r3
 8001fca:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8001fce:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fd2:	fab3 f383 	clz	r3, r3
 8001fd6:	b2db      	uxtb	r3, r3
 8001fd8:	095b      	lsrs	r3, r3, #5
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	f043 0301 	orr.w	r3, r3, #1
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d102      	bne.n	8001fec <HAL_RCC_OscConfig+0x3a0>
 8001fe6:	4b93      	ldr	r3, [pc, #588]	@ (8002234 <HAL_RCC_OscConfig+0x5e8>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	e013      	b.n	8002014 <HAL_RCC_OscConfig+0x3c8>
 8001fec:	2302      	movs	r3, #2
 8001fee:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff2:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8001ff6:	fa93 f3a3 	rbit	r3, r3
 8001ffa:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001ffe:	2302      	movs	r3, #2
 8002000:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8002004:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8002008:	fa93 f3a3 	rbit	r3, r3
 800200c:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8002010:	4b88      	ldr	r3, [pc, #544]	@ (8002234 <HAL_RCC_OscConfig+0x5e8>)
 8002012:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002014:	2202      	movs	r2, #2
 8002016:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 800201a:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 800201e:	fa92 f2a2 	rbit	r2, r2
 8002022:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8002026:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 800202a:	fab2 f282 	clz	r2, r2
 800202e:	b2d2      	uxtb	r2, r2
 8002030:	f042 0220 	orr.w	r2, r2, #32
 8002034:	b2d2      	uxtb	r2, r2
 8002036:	f002 021f 	and.w	r2, r2, #31
 800203a:	2101      	movs	r1, #1
 800203c:	fa01 f202 	lsl.w	r2, r1, r2
 8002040:	4013      	ands	r3, r2
 8002042:	2b00      	cmp	r3, #0
 8002044:	d00a      	beq.n	800205c <HAL_RCC_OscConfig+0x410>
 8002046:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800204a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	691b      	ldr	r3, [r3, #16]
 8002052:	2b01      	cmp	r3, #1
 8002054:	d002      	beq.n	800205c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	f000 be2e 	b.w	8002cb8 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800205c:	4b75      	ldr	r3, [pc, #468]	@ (8002234 <HAL_RCC_OscConfig+0x5e8>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002064:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002068:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	695b      	ldr	r3, [r3, #20]
 8002070:	21f8      	movs	r1, #248	@ 0xf8
 8002072:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002076:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 800207a:	fa91 f1a1 	rbit	r1, r1
 800207e:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8002082:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8002086:	fab1 f181 	clz	r1, r1
 800208a:	b2c9      	uxtb	r1, r1
 800208c:	408b      	lsls	r3, r1
 800208e:	4969      	ldr	r1, [pc, #420]	@ (8002234 <HAL_RCC_OscConfig+0x5e8>)
 8002090:	4313      	orrs	r3, r2
 8002092:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002094:	e0fd      	b.n	8002292 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002096:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800209a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	691b      	ldr	r3, [r3, #16]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	f000 8088 	beq.w	80021b8 <HAL_RCC_OscConfig+0x56c>
 80020a8:	2301      	movs	r3, #1
 80020aa:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ae:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 80020b2:	fa93 f3a3 	rbit	r3, r3
 80020b6:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 80020ba:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020be:	fab3 f383 	clz	r3, r3
 80020c2:	b2db      	uxtb	r3, r3
 80020c4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80020c8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	461a      	mov	r2, r3
 80020d0:	2301      	movs	r3, #1
 80020d2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020d4:	f7fe fcd8 	bl	8000a88 <HAL_GetTick>
 80020d8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020dc:	e00a      	b.n	80020f4 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020de:	f7fe fcd3 	bl	8000a88 <HAL_GetTick>
 80020e2:	4602      	mov	r2, r0
 80020e4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	2b02      	cmp	r3, #2
 80020ec:	d902      	bls.n	80020f4 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80020ee:	2303      	movs	r3, #3
 80020f0:	f000 bde2 	b.w	8002cb8 <HAL_RCC_OscConfig+0x106c>
 80020f4:	2302      	movs	r3, #2
 80020f6:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020fa:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80020fe:	fa93 f3a3 	rbit	r3, r3
 8002102:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8002106:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800210a:	fab3 f383 	clz	r3, r3
 800210e:	b2db      	uxtb	r3, r3
 8002110:	095b      	lsrs	r3, r3, #5
 8002112:	b2db      	uxtb	r3, r3
 8002114:	f043 0301 	orr.w	r3, r3, #1
 8002118:	b2db      	uxtb	r3, r3
 800211a:	2b01      	cmp	r3, #1
 800211c:	d102      	bne.n	8002124 <HAL_RCC_OscConfig+0x4d8>
 800211e:	4b45      	ldr	r3, [pc, #276]	@ (8002234 <HAL_RCC_OscConfig+0x5e8>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	e013      	b.n	800214c <HAL_RCC_OscConfig+0x500>
 8002124:	2302      	movs	r3, #2
 8002126:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800212a:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800212e:	fa93 f3a3 	rbit	r3, r3
 8002132:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8002136:	2302      	movs	r3, #2
 8002138:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 800213c:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8002140:	fa93 f3a3 	rbit	r3, r3
 8002144:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8002148:	4b3a      	ldr	r3, [pc, #232]	@ (8002234 <HAL_RCC_OscConfig+0x5e8>)
 800214a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800214c:	2202      	movs	r2, #2
 800214e:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8002152:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8002156:	fa92 f2a2 	rbit	r2, r2
 800215a:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 800215e:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8002162:	fab2 f282 	clz	r2, r2
 8002166:	b2d2      	uxtb	r2, r2
 8002168:	f042 0220 	orr.w	r2, r2, #32
 800216c:	b2d2      	uxtb	r2, r2
 800216e:	f002 021f 	and.w	r2, r2, #31
 8002172:	2101      	movs	r1, #1
 8002174:	fa01 f202 	lsl.w	r2, r1, r2
 8002178:	4013      	ands	r3, r2
 800217a:	2b00      	cmp	r3, #0
 800217c:	d0af      	beq.n	80020de <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800217e:	4b2d      	ldr	r3, [pc, #180]	@ (8002234 <HAL_RCC_OscConfig+0x5e8>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002186:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800218a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	695b      	ldr	r3, [r3, #20]
 8002192:	21f8      	movs	r1, #248	@ 0xf8
 8002194:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002198:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800219c:	fa91 f1a1 	rbit	r1, r1
 80021a0:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 80021a4:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 80021a8:	fab1 f181 	clz	r1, r1
 80021ac:	b2c9      	uxtb	r1, r1
 80021ae:	408b      	lsls	r3, r1
 80021b0:	4920      	ldr	r1, [pc, #128]	@ (8002234 <HAL_RCC_OscConfig+0x5e8>)
 80021b2:	4313      	orrs	r3, r2
 80021b4:	600b      	str	r3, [r1, #0]
 80021b6:	e06c      	b.n	8002292 <HAL_RCC_OscConfig+0x646>
 80021b8:	2301      	movs	r3, #1
 80021ba:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021be:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80021c2:	fa93 f3a3 	rbit	r3, r3
 80021c6:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 80021ca:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021ce:	fab3 f383 	clz	r3, r3
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80021d8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80021dc:	009b      	lsls	r3, r3, #2
 80021de:	461a      	mov	r2, r3
 80021e0:	2300      	movs	r3, #0
 80021e2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021e4:	f7fe fc50 	bl	8000a88 <HAL_GetTick>
 80021e8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021ec:	e00a      	b.n	8002204 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021ee:	f7fe fc4b 	bl	8000a88 <HAL_GetTick>
 80021f2:	4602      	mov	r2, r0
 80021f4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	2b02      	cmp	r3, #2
 80021fc:	d902      	bls.n	8002204 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80021fe:	2303      	movs	r3, #3
 8002200:	f000 bd5a 	b.w	8002cb8 <HAL_RCC_OscConfig+0x106c>
 8002204:	2302      	movs	r3, #2
 8002206:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800220a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800220e:	fa93 f3a3 	rbit	r3, r3
 8002212:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8002216:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800221a:	fab3 f383 	clz	r3, r3
 800221e:	b2db      	uxtb	r3, r3
 8002220:	095b      	lsrs	r3, r3, #5
 8002222:	b2db      	uxtb	r3, r3
 8002224:	f043 0301 	orr.w	r3, r3, #1
 8002228:	b2db      	uxtb	r3, r3
 800222a:	2b01      	cmp	r3, #1
 800222c:	d104      	bne.n	8002238 <HAL_RCC_OscConfig+0x5ec>
 800222e:	4b01      	ldr	r3, [pc, #4]	@ (8002234 <HAL_RCC_OscConfig+0x5e8>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	e015      	b.n	8002260 <HAL_RCC_OscConfig+0x614>
 8002234:	40021000 	.word	0x40021000
 8002238:	2302      	movs	r3, #2
 800223a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800223e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002242:	fa93 f3a3 	rbit	r3, r3
 8002246:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800224a:	2302      	movs	r3, #2
 800224c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002250:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002254:	fa93 f3a3 	rbit	r3, r3
 8002258:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800225c:	4bc8      	ldr	r3, [pc, #800]	@ (8002580 <HAL_RCC_OscConfig+0x934>)
 800225e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002260:	2202      	movs	r2, #2
 8002262:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8002266:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800226a:	fa92 f2a2 	rbit	r2, r2
 800226e:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8002272:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8002276:	fab2 f282 	clz	r2, r2
 800227a:	b2d2      	uxtb	r2, r2
 800227c:	f042 0220 	orr.w	r2, r2, #32
 8002280:	b2d2      	uxtb	r2, r2
 8002282:	f002 021f 	and.w	r2, r2, #31
 8002286:	2101      	movs	r1, #1
 8002288:	fa01 f202 	lsl.w	r2, r1, r2
 800228c:	4013      	ands	r3, r2
 800228e:	2b00      	cmp	r3, #0
 8002290:	d1ad      	bne.n	80021ee <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002292:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002296:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 0308 	and.w	r3, r3, #8
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	f000 8110 	beq.w	80024c8 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022ac:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	699b      	ldr	r3, [r3, #24]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d079      	beq.n	80023ac <HAL_RCC_OscConfig+0x760>
 80022b8:	2301      	movs	r3, #1
 80022ba:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022be:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80022c2:	fa93 f3a3 	rbit	r3, r3
 80022c6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 80022ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022ce:	fab3 f383 	clz	r3, r3
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	461a      	mov	r2, r3
 80022d6:	4bab      	ldr	r3, [pc, #684]	@ (8002584 <HAL_RCC_OscConfig+0x938>)
 80022d8:	4413      	add	r3, r2
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	461a      	mov	r2, r3
 80022de:	2301      	movs	r3, #1
 80022e0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022e2:	f7fe fbd1 	bl	8000a88 <HAL_GetTick>
 80022e6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022ea:	e00a      	b.n	8002302 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022ec:	f7fe fbcc 	bl	8000a88 <HAL_GetTick>
 80022f0:	4602      	mov	r2, r0
 80022f2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80022f6:	1ad3      	subs	r3, r2, r3
 80022f8:	2b02      	cmp	r3, #2
 80022fa:	d902      	bls.n	8002302 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80022fc:	2303      	movs	r3, #3
 80022fe:	f000 bcdb 	b.w	8002cb8 <HAL_RCC_OscConfig+0x106c>
 8002302:	2302      	movs	r3, #2
 8002304:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002308:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800230c:	fa93 f3a3 	rbit	r3, r3
 8002310:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002314:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002318:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800231c:	2202      	movs	r2, #2
 800231e:	601a      	str	r2, [r3, #0]
 8002320:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002324:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	fa93 f2a3 	rbit	r2, r3
 800232e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002332:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002336:	601a      	str	r2, [r3, #0]
 8002338:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800233c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002340:	2202      	movs	r2, #2
 8002342:	601a      	str	r2, [r3, #0]
 8002344:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002348:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	fa93 f2a3 	rbit	r2, r3
 8002352:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002356:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800235a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800235c:	4b88      	ldr	r3, [pc, #544]	@ (8002580 <HAL_RCC_OscConfig+0x934>)
 800235e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002360:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002364:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002368:	2102      	movs	r1, #2
 800236a:	6019      	str	r1, [r3, #0]
 800236c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002370:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	fa93 f1a3 	rbit	r1, r3
 800237a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800237e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002382:	6019      	str	r1, [r3, #0]
  return result;
 8002384:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002388:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	fab3 f383 	clz	r3, r3
 8002392:	b2db      	uxtb	r3, r3
 8002394:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002398:	b2db      	uxtb	r3, r3
 800239a:	f003 031f 	and.w	r3, r3, #31
 800239e:	2101      	movs	r1, #1
 80023a0:	fa01 f303 	lsl.w	r3, r1, r3
 80023a4:	4013      	ands	r3, r2
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d0a0      	beq.n	80022ec <HAL_RCC_OscConfig+0x6a0>
 80023aa:	e08d      	b.n	80024c8 <HAL_RCC_OscConfig+0x87c>
 80023ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023b0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80023b4:	2201      	movs	r2, #1
 80023b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023bc:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	fa93 f2a3 	rbit	r2, r3
 80023c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023ca:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80023ce:	601a      	str	r2, [r3, #0]
  return result;
 80023d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023d4:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80023d8:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023da:	fab3 f383 	clz	r3, r3
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	461a      	mov	r2, r3
 80023e2:	4b68      	ldr	r3, [pc, #416]	@ (8002584 <HAL_RCC_OscConfig+0x938>)
 80023e4:	4413      	add	r3, r2
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	461a      	mov	r2, r3
 80023ea:	2300      	movs	r3, #0
 80023ec:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023ee:	f7fe fb4b 	bl	8000a88 <HAL_GetTick>
 80023f2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023f6:	e00a      	b.n	800240e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023f8:	f7fe fb46 	bl	8000a88 <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	2b02      	cmp	r3, #2
 8002406:	d902      	bls.n	800240e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002408:	2303      	movs	r3, #3
 800240a:	f000 bc55 	b.w	8002cb8 <HAL_RCC_OscConfig+0x106c>
 800240e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002412:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002416:	2202      	movs	r2, #2
 8002418:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800241a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800241e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	fa93 f2a3 	rbit	r2, r3
 8002428:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800242c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002430:	601a      	str	r2, [r3, #0]
 8002432:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002436:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800243a:	2202      	movs	r2, #2
 800243c:	601a      	str	r2, [r3, #0]
 800243e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002442:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	fa93 f2a3 	rbit	r2, r3
 800244c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002450:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002454:	601a      	str	r2, [r3, #0]
 8002456:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800245a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800245e:	2202      	movs	r2, #2
 8002460:	601a      	str	r2, [r3, #0]
 8002462:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002466:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	fa93 f2a3 	rbit	r2, r3
 8002470:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002474:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002478:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800247a:	4b41      	ldr	r3, [pc, #260]	@ (8002580 <HAL_RCC_OscConfig+0x934>)
 800247c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800247e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002482:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002486:	2102      	movs	r1, #2
 8002488:	6019      	str	r1, [r3, #0]
 800248a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800248e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	fa93 f1a3 	rbit	r1, r3
 8002498:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800249c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80024a0:	6019      	str	r1, [r3, #0]
  return result;
 80024a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024a6:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	fab3 f383 	clz	r3, r3
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	f003 031f 	and.w	r3, r3, #31
 80024bc:	2101      	movs	r1, #1
 80024be:	fa01 f303 	lsl.w	r3, r1, r3
 80024c2:	4013      	ands	r3, r2
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d197      	bne.n	80023f8 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024cc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 0304 	and.w	r3, r3, #4
 80024d8:	2b00      	cmp	r3, #0
 80024da:	f000 81a1 	beq.w	8002820 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024de:	2300      	movs	r3, #0
 80024e0:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024e4:	4b26      	ldr	r3, [pc, #152]	@ (8002580 <HAL_RCC_OscConfig+0x934>)
 80024e6:	69db      	ldr	r3, [r3, #28]
 80024e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d116      	bne.n	800251e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024f0:	4b23      	ldr	r3, [pc, #140]	@ (8002580 <HAL_RCC_OscConfig+0x934>)
 80024f2:	69db      	ldr	r3, [r3, #28]
 80024f4:	4a22      	ldr	r2, [pc, #136]	@ (8002580 <HAL_RCC_OscConfig+0x934>)
 80024f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024fa:	61d3      	str	r3, [r2, #28]
 80024fc:	4b20      	ldr	r3, [pc, #128]	@ (8002580 <HAL_RCC_OscConfig+0x934>)
 80024fe:	69db      	ldr	r3, [r3, #28]
 8002500:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8002504:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002508:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 800250c:	601a      	str	r2, [r3, #0]
 800250e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002512:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002516:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002518:	2301      	movs	r3, #1
 800251a:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800251e:	4b1a      	ldr	r3, [pc, #104]	@ (8002588 <HAL_RCC_OscConfig+0x93c>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002526:	2b00      	cmp	r3, #0
 8002528:	d11a      	bne.n	8002560 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800252a:	4b17      	ldr	r3, [pc, #92]	@ (8002588 <HAL_RCC_OscConfig+0x93c>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a16      	ldr	r2, [pc, #88]	@ (8002588 <HAL_RCC_OscConfig+0x93c>)
 8002530:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002534:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002536:	f7fe faa7 	bl	8000a88 <HAL_GetTick>
 800253a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800253e:	e009      	b.n	8002554 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002540:	f7fe faa2 	bl	8000a88 <HAL_GetTick>
 8002544:	4602      	mov	r2, r0
 8002546:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800254a:	1ad3      	subs	r3, r2, r3
 800254c:	2b64      	cmp	r3, #100	@ 0x64
 800254e:	d901      	bls.n	8002554 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002550:	2303      	movs	r3, #3
 8002552:	e3b1      	b.n	8002cb8 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002554:	4b0c      	ldr	r3, [pc, #48]	@ (8002588 <HAL_RCC_OscConfig+0x93c>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800255c:	2b00      	cmp	r3, #0
 800255e:	d0ef      	beq.n	8002540 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002560:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002564:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	2b01      	cmp	r3, #1
 800256e:	d10d      	bne.n	800258c <HAL_RCC_OscConfig+0x940>
 8002570:	4b03      	ldr	r3, [pc, #12]	@ (8002580 <HAL_RCC_OscConfig+0x934>)
 8002572:	6a1b      	ldr	r3, [r3, #32]
 8002574:	4a02      	ldr	r2, [pc, #8]	@ (8002580 <HAL_RCC_OscConfig+0x934>)
 8002576:	f043 0301 	orr.w	r3, r3, #1
 800257a:	6213      	str	r3, [r2, #32]
 800257c:	e03c      	b.n	80025f8 <HAL_RCC_OscConfig+0x9ac>
 800257e:	bf00      	nop
 8002580:	40021000 	.word	0x40021000
 8002584:	10908120 	.word	0x10908120
 8002588:	40007000 	.word	0x40007000
 800258c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002590:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d10c      	bne.n	80025b6 <HAL_RCC_OscConfig+0x96a>
 800259c:	4bc1      	ldr	r3, [pc, #772]	@ (80028a4 <HAL_RCC_OscConfig+0xc58>)
 800259e:	6a1b      	ldr	r3, [r3, #32]
 80025a0:	4ac0      	ldr	r2, [pc, #768]	@ (80028a4 <HAL_RCC_OscConfig+0xc58>)
 80025a2:	f023 0301 	bic.w	r3, r3, #1
 80025a6:	6213      	str	r3, [r2, #32]
 80025a8:	4bbe      	ldr	r3, [pc, #760]	@ (80028a4 <HAL_RCC_OscConfig+0xc58>)
 80025aa:	6a1b      	ldr	r3, [r3, #32]
 80025ac:	4abd      	ldr	r2, [pc, #756]	@ (80028a4 <HAL_RCC_OscConfig+0xc58>)
 80025ae:	f023 0304 	bic.w	r3, r3, #4
 80025b2:	6213      	str	r3, [r2, #32]
 80025b4:	e020      	b.n	80025f8 <HAL_RCC_OscConfig+0x9ac>
 80025b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025ba:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	68db      	ldr	r3, [r3, #12]
 80025c2:	2b05      	cmp	r3, #5
 80025c4:	d10c      	bne.n	80025e0 <HAL_RCC_OscConfig+0x994>
 80025c6:	4bb7      	ldr	r3, [pc, #732]	@ (80028a4 <HAL_RCC_OscConfig+0xc58>)
 80025c8:	6a1b      	ldr	r3, [r3, #32]
 80025ca:	4ab6      	ldr	r2, [pc, #728]	@ (80028a4 <HAL_RCC_OscConfig+0xc58>)
 80025cc:	f043 0304 	orr.w	r3, r3, #4
 80025d0:	6213      	str	r3, [r2, #32]
 80025d2:	4bb4      	ldr	r3, [pc, #720]	@ (80028a4 <HAL_RCC_OscConfig+0xc58>)
 80025d4:	6a1b      	ldr	r3, [r3, #32]
 80025d6:	4ab3      	ldr	r2, [pc, #716]	@ (80028a4 <HAL_RCC_OscConfig+0xc58>)
 80025d8:	f043 0301 	orr.w	r3, r3, #1
 80025dc:	6213      	str	r3, [r2, #32]
 80025de:	e00b      	b.n	80025f8 <HAL_RCC_OscConfig+0x9ac>
 80025e0:	4bb0      	ldr	r3, [pc, #704]	@ (80028a4 <HAL_RCC_OscConfig+0xc58>)
 80025e2:	6a1b      	ldr	r3, [r3, #32]
 80025e4:	4aaf      	ldr	r2, [pc, #700]	@ (80028a4 <HAL_RCC_OscConfig+0xc58>)
 80025e6:	f023 0301 	bic.w	r3, r3, #1
 80025ea:	6213      	str	r3, [r2, #32]
 80025ec:	4bad      	ldr	r3, [pc, #692]	@ (80028a4 <HAL_RCC_OscConfig+0xc58>)
 80025ee:	6a1b      	ldr	r3, [r3, #32]
 80025f0:	4aac      	ldr	r2, [pc, #688]	@ (80028a4 <HAL_RCC_OscConfig+0xc58>)
 80025f2:	f023 0304 	bic.w	r3, r3, #4
 80025f6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025fc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	2b00      	cmp	r3, #0
 8002606:	f000 8081 	beq.w	800270c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800260a:	f7fe fa3d 	bl	8000a88 <HAL_GetTick>
 800260e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002612:	e00b      	b.n	800262c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002614:	f7fe fa38 	bl	8000a88 <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800261e:	1ad3      	subs	r3, r2, r3
 8002620:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002624:	4293      	cmp	r3, r2
 8002626:	d901      	bls.n	800262c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002628:	2303      	movs	r3, #3
 800262a:	e345      	b.n	8002cb8 <HAL_RCC_OscConfig+0x106c>
 800262c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002630:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002634:	2202      	movs	r2, #2
 8002636:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002638:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800263c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	fa93 f2a3 	rbit	r2, r3
 8002646:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800264a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800264e:	601a      	str	r2, [r3, #0]
 8002650:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002654:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002658:	2202      	movs	r2, #2
 800265a:	601a      	str	r2, [r3, #0]
 800265c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002660:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	fa93 f2a3 	rbit	r2, r3
 800266a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800266e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002672:	601a      	str	r2, [r3, #0]
  return result;
 8002674:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002678:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800267c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800267e:	fab3 f383 	clz	r3, r3
 8002682:	b2db      	uxtb	r3, r3
 8002684:	095b      	lsrs	r3, r3, #5
 8002686:	b2db      	uxtb	r3, r3
 8002688:	f043 0302 	orr.w	r3, r3, #2
 800268c:	b2db      	uxtb	r3, r3
 800268e:	2b02      	cmp	r3, #2
 8002690:	d102      	bne.n	8002698 <HAL_RCC_OscConfig+0xa4c>
 8002692:	4b84      	ldr	r3, [pc, #528]	@ (80028a4 <HAL_RCC_OscConfig+0xc58>)
 8002694:	6a1b      	ldr	r3, [r3, #32]
 8002696:	e013      	b.n	80026c0 <HAL_RCC_OscConfig+0xa74>
 8002698:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800269c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80026a0:	2202      	movs	r2, #2
 80026a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026a8:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	fa93 f2a3 	rbit	r2, r3
 80026b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026b6:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80026ba:	601a      	str	r2, [r3, #0]
 80026bc:	4b79      	ldr	r3, [pc, #484]	@ (80028a4 <HAL_RCC_OscConfig+0xc58>)
 80026be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026c0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80026c4:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80026c8:	2102      	movs	r1, #2
 80026ca:	6011      	str	r1, [r2, #0]
 80026cc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80026d0:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80026d4:	6812      	ldr	r2, [r2, #0]
 80026d6:	fa92 f1a2 	rbit	r1, r2
 80026da:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80026de:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80026e2:	6011      	str	r1, [r2, #0]
  return result;
 80026e4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80026e8:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80026ec:	6812      	ldr	r2, [r2, #0]
 80026ee:	fab2 f282 	clz	r2, r2
 80026f2:	b2d2      	uxtb	r2, r2
 80026f4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80026f8:	b2d2      	uxtb	r2, r2
 80026fa:	f002 021f 	and.w	r2, r2, #31
 80026fe:	2101      	movs	r1, #1
 8002700:	fa01 f202 	lsl.w	r2, r1, r2
 8002704:	4013      	ands	r3, r2
 8002706:	2b00      	cmp	r3, #0
 8002708:	d084      	beq.n	8002614 <HAL_RCC_OscConfig+0x9c8>
 800270a:	e07f      	b.n	800280c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800270c:	f7fe f9bc 	bl	8000a88 <HAL_GetTick>
 8002710:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002714:	e00b      	b.n	800272e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002716:	f7fe f9b7 	bl	8000a88 <HAL_GetTick>
 800271a:	4602      	mov	r2, r0
 800271c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002726:	4293      	cmp	r3, r2
 8002728:	d901      	bls.n	800272e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800272a:	2303      	movs	r3, #3
 800272c:	e2c4      	b.n	8002cb8 <HAL_RCC_OscConfig+0x106c>
 800272e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002732:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002736:	2202      	movs	r2, #2
 8002738:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800273a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800273e:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	fa93 f2a3 	rbit	r2, r3
 8002748:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800274c:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002750:	601a      	str	r2, [r3, #0]
 8002752:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002756:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800275a:	2202      	movs	r2, #2
 800275c:	601a      	str	r2, [r3, #0]
 800275e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002762:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	fa93 f2a3 	rbit	r2, r3
 800276c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002770:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002774:	601a      	str	r2, [r3, #0]
  return result;
 8002776:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800277a:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800277e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002780:	fab3 f383 	clz	r3, r3
 8002784:	b2db      	uxtb	r3, r3
 8002786:	095b      	lsrs	r3, r3, #5
 8002788:	b2db      	uxtb	r3, r3
 800278a:	f043 0302 	orr.w	r3, r3, #2
 800278e:	b2db      	uxtb	r3, r3
 8002790:	2b02      	cmp	r3, #2
 8002792:	d102      	bne.n	800279a <HAL_RCC_OscConfig+0xb4e>
 8002794:	4b43      	ldr	r3, [pc, #268]	@ (80028a4 <HAL_RCC_OscConfig+0xc58>)
 8002796:	6a1b      	ldr	r3, [r3, #32]
 8002798:	e013      	b.n	80027c2 <HAL_RCC_OscConfig+0xb76>
 800279a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800279e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80027a2:	2202      	movs	r2, #2
 80027a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027aa:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	fa93 f2a3 	rbit	r2, r3
 80027b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027b8:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80027bc:	601a      	str	r2, [r3, #0]
 80027be:	4b39      	ldr	r3, [pc, #228]	@ (80028a4 <HAL_RCC_OscConfig+0xc58>)
 80027c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027c2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80027c6:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80027ca:	2102      	movs	r1, #2
 80027cc:	6011      	str	r1, [r2, #0]
 80027ce:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80027d2:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80027d6:	6812      	ldr	r2, [r2, #0]
 80027d8:	fa92 f1a2 	rbit	r1, r2
 80027dc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80027e0:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80027e4:	6011      	str	r1, [r2, #0]
  return result;
 80027e6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80027ea:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80027ee:	6812      	ldr	r2, [r2, #0]
 80027f0:	fab2 f282 	clz	r2, r2
 80027f4:	b2d2      	uxtb	r2, r2
 80027f6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80027fa:	b2d2      	uxtb	r2, r2
 80027fc:	f002 021f 	and.w	r2, r2, #31
 8002800:	2101      	movs	r1, #1
 8002802:	fa01 f202 	lsl.w	r2, r1, r2
 8002806:	4013      	ands	r3, r2
 8002808:	2b00      	cmp	r3, #0
 800280a:	d184      	bne.n	8002716 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800280c:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8002810:	2b01      	cmp	r3, #1
 8002812:	d105      	bne.n	8002820 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002814:	4b23      	ldr	r3, [pc, #140]	@ (80028a4 <HAL_RCC_OscConfig+0xc58>)
 8002816:	69db      	ldr	r3, [r3, #28]
 8002818:	4a22      	ldr	r2, [pc, #136]	@ (80028a4 <HAL_RCC_OscConfig+0xc58>)
 800281a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800281e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002820:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002824:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	69db      	ldr	r3, [r3, #28]
 800282c:	2b00      	cmp	r3, #0
 800282e:	f000 8242 	beq.w	8002cb6 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002832:	4b1c      	ldr	r3, [pc, #112]	@ (80028a4 <HAL_RCC_OscConfig+0xc58>)
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	f003 030c 	and.w	r3, r3, #12
 800283a:	2b08      	cmp	r3, #8
 800283c:	f000 8213 	beq.w	8002c66 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002840:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002844:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	69db      	ldr	r3, [r3, #28]
 800284c:	2b02      	cmp	r3, #2
 800284e:	f040 8162 	bne.w	8002b16 <HAL_RCC_OscConfig+0xeca>
 8002852:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002856:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800285a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800285e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002860:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002864:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	fa93 f2a3 	rbit	r2, r3
 800286e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002872:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002876:	601a      	str	r2, [r3, #0]
  return result;
 8002878:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800287c:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002880:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002882:	fab3 f383 	clz	r3, r3
 8002886:	b2db      	uxtb	r3, r3
 8002888:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800288c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	461a      	mov	r2, r3
 8002894:	2300      	movs	r3, #0
 8002896:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002898:	f7fe f8f6 	bl	8000a88 <HAL_GetTick>
 800289c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028a0:	e00c      	b.n	80028bc <HAL_RCC_OscConfig+0xc70>
 80028a2:	bf00      	nop
 80028a4:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028a8:	f7fe f8ee 	bl	8000a88 <HAL_GetTick>
 80028ac:	4602      	mov	r2, r0
 80028ae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80028b2:	1ad3      	subs	r3, r2, r3
 80028b4:	2b02      	cmp	r3, #2
 80028b6:	d901      	bls.n	80028bc <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80028b8:	2303      	movs	r3, #3
 80028ba:	e1fd      	b.n	8002cb8 <HAL_RCC_OscConfig+0x106c>
 80028bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028c0:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80028c4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80028c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028ce:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	fa93 f2a3 	rbit	r2, r3
 80028d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028dc:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80028e0:	601a      	str	r2, [r3, #0]
  return result;
 80028e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028e6:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80028ea:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028ec:	fab3 f383 	clz	r3, r3
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	095b      	lsrs	r3, r3, #5
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	f043 0301 	orr.w	r3, r3, #1
 80028fa:	b2db      	uxtb	r3, r3
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d102      	bne.n	8002906 <HAL_RCC_OscConfig+0xcba>
 8002900:	4bb0      	ldr	r3, [pc, #704]	@ (8002bc4 <HAL_RCC_OscConfig+0xf78>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	e027      	b.n	8002956 <HAL_RCC_OscConfig+0xd0a>
 8002906:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800290a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800290e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002912:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002914:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002918:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	fa93 f2a3 	rbit	r2, r3
 8002922:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002926:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800292a:	601a      	str	r2, [r3, #0]
 800292c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002930:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002934:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002938:	601a      	str	r2, [r3, #0]
 800293a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800293e:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	fa93 f2a3 	rbit	r2, r3
 8002948:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800294c:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002950:	601a      	str	r2, [r3, #0]
 8002952:	4b9c      	ldr	r3, [pc, #624]	@ (8002bc4 <HAL_RCC_OscConfig+0xf78>)
 8002954:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002956:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800295a:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 800295e:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002962:	6011      	str	r1, [r2, #0]
 8002964:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002968:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 800296c:	6812      	ldr	r2, [r2, #0]
 800296e:	fa92 f1a2 	rbit	r1, r2
 8002972:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002976:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800297a:	6011      	str	r1, [r2, #0]
  return result;
 800297c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002980:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002984:	6812      	ldr	r2, [r2, #0]
 8002986:	fab2 f282 	clz	r2, r2
 800298a:	b2d2      	uxtb	r2, r2
 800298c:	f042 0220 	orr.w	r2, r2, #32
 8002990:	b2d2      	uxtb	r2, r2
 8002992:	f002 021f 	and.w	r2, r2, #31
 8002996:	2101      	movs	r1, #1
 8002998:	fa01 f202 	lsl.w	r2, r1, r2
 800299c:	4013      	ands	r3, r2
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d182      	bne.n	80028a8 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029a2:	4b88      	ldr	r3, [pc, #544]	@ (8002bc4 <HAL_RCC_OscConfig+0xf78>)
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80029aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029ae:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80029b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029ba:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	6a1b      	ldr	r3, [r3, #32]
 80029c2:	430b      	orrs	r3, r1
 80029c4:	497f      	ldr	r1, [pc, #508]	@ (8002bc4 <HAL_RCC_OscConfig+0xf78>)
 80029c6:	4313      	orrs	r3, r2
 80029c8:	604b      	str	r3, [r1, #4]
 80029ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029ce:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80029d2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80029d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029dc:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	fa93 f2a3 	rbit	r2, r3
 80029e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029ea:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80029ee:	601a      	str	r2, [r3, #0]
  return result;
 80029f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029f4:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80029f8:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029fa:	fab3 f383 	clz	r3, r3
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002a04:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	461a      	mov	r2, r3
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a10:	f7fe f83a 	bl	8000a88 <HAL_GetTick>
 8002a14:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a18:	e009      	b.n	8002a2e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a1a:	f7fe f835 	bl	8000a88 <HAL_GetTick>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	2b02      	cmp	r3, #2
 8002a28:	d901      	bls.n	8002a2e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e144      	b.n	8002cb8 <HAL_RCC_OscConfig+0x106c>
 8002a2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a32:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002a36:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002a3a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a40:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	fa93 f2a3 	rbit	r2, r3
 8002a4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a4e:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002a52:	601a      	str	r2, [r3, #0]
  return result;
 8002a54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a58:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002a5c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a5e:	fab3 f383 	clz	r3, r3
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	095b      	lsrs	r3, r3, #5
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	f043 0301 	orr.w	r3, r3, #1
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	2b01      	cmp	r3, #1
 8002a70:	d102      	bne.n	8002a78 <HAL_RCC_OscConfig+0xe2c>
 8002a72:	4b54      	ldr	r3, [pc, #336]	@ (8002bc4 <HAL_RCC_OscConfig+0xf78>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	e027      	b.n	8002ac8 <HAL_RCC_OscConfig+0xe7c>
 8002a78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a7c:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002a80:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002a84:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a8a:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	fa93 f2a3 	rbit	r2, r3
 8002a94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a98:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002a9c:	601a      	str	r2, [r3, #0]
 8002a9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002aa2:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002aa6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002aaa:	601a      	str	r2, [r3, #0]
 8002aac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ab0:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	fa93 f2a3 	rbit	r2, r3
 8002aba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002abe:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002ac2:	601a      	str	r2, [r3, #0]
 8002ac4:	4b3f      	ldr	r3, [pc, #252]	@ (8002bc4 <HAL_RCC_OscConfig+0xf78>)
 8002ac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ac8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002acc:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002ad0:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002ad4:	6011      	str	r1, [r2, #0]
 8002ad6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002ada:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002ade:	6812      	ldr	r2, [r2, #0]
 8002ae0:	fa92 f1a2 	rbit	r1, r2
 8002ae4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002ae8:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002aec:	6011      	str	r1, [r2, #0]
  return result;
 8002aee:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002af2:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002af6:	6812      	ldr	r2, [r2, #0]
 8002af8:	fab2 f282 	clz	r2, r2
 8002afc:	b2d2      	uxtb	r2, r2
 8002afe:	f042 0220 	orr.w	r2, r2, #32
 8002b02:	b2d2      	uxtb	r2, r2
 8002b04:	f002 021f 	and.w	r2, r2, #31
 8002b08:	2101      	movs	r1, #1
 8002b0a:	fa01 f202 	lsl.w	r2, r1, r2
 8002b0e:	4013      	ands	r3, r2
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d082      	beq.n	8002a1a <HAL_RCC_OscConfig+0xdce>
 8002b14:	e0cf      	b.n	8002cb6 <HAL_RCC_OscConfig+0x106a>
 8002b16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b1a:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002b1e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002b22:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b28:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	fa93 f2a3 	rbit	r2, r3
 8002b32:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b36:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002b3a:	601a      	str	r2, [r3, #0]
  return result;
 8002b3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b40:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002b44:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b46:	fab3 f383 	clz	r3, r3
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002b50:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	461a      	mov	r2, r3
 8002b58:	2300      	movs	r3, #0
 8002b5a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b5c:	f7fd ff94 	bl	8000a88 <HAL_GetTick>
 8002b60:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b64:	e009      	b.n	8002b7a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b66:	f7fd ff8f 	bl	8000a88 <HAL_GetTick>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	2b02      	cmp	r3, #2
 8002b74:	d901      	bls.n	8002b7a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002b76:	2303      	movs	r3, #3
 8002b78:	e09e      	b.n	8002cb8 <HAL_RCC_OscConfig+0x106c>
 8002b7a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b7e:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002b82:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002b86:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b88:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b8c:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	fa93 f2a3 	rbit	r2, r3
 8002b96:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b9a:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002b9e:	601a      	str	r2, [r3, #0]
  return result;
 8002ba0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ba4:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002ba8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002baa:	fab3 f383 	clz	r3, r3
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	095b      	lsrs	r3, r3, #5
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	f043 0301 	orr.w	r3, r3, #1
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d104      	bne.n	8002bc8 <HAL_RCC_OscConfig+0xf7c>
 8002bbe:	4b01      	ldr	r3, [pc, #4]	@ (8002bc4 <HAL_RCC_OscConfig+0xf78>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	e029      	b.n	8002c18 <HAL_RCC_OscConfig+0xfcc>
 8002bc4:	40021000 	.word	0x40021000
 8002bc8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bcc:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002bd0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002bd4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bda:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	fa93 f2a3 	rbit	r2, r3
 8002be4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002be8:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002bec:	601a      	str	r2, [r3, #0]
 8002bee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bf2:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002bf6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002bfa:	601a      	str	r2, [r3, #0]
 8002bfc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c00:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	fa93 f2a3 	rbit	r2, r3
 8002c0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c0e:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002c12:	601a      	str	r2, [r3, #0]
 8002c14:	4b2b      	ldr	r3, [pc, #172]	@ (8002cc4 <HAL_RCC_OscConfig+0x1078>)
 8002c16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c18:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002c1c:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002c20:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002c24:	6011      	str	r1, [r2, #0]
 8002c26:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002c2a:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002c2e:	6812      	ldr	r2, [r2, #0]
 8002c30:	fa92 f1a2 	rbit	r1, r2
 8002c34:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002c38:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002c3c:	6011      	str	r1, [r2, #0]
  return result;
 8002c3e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002c42:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002c46:	6812      	ldr	r2, [r2, #0]
 8002c48:	fab2 f282 	clz	r2, r2
 8002c4c:	b2d2      	uxtb	r2, r2
 8002c4e:	f042 0220 	orr.w	r2, r2, #32
 8002c52:	b2d2      	uxtb	r2, r2
 8002c54:	f002 021f 	and.w	r2, r2, #31
 8002c58:	2101      	movs	r1, #1
 8002c5a:	fa01 f202 	lsl.w	r2, r1, r2
 8002c5e:	4013      	ands	r3, r2
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d180      	bne.n	8002b66 <HAL_RCC_OscConfig+0xf1a>
 8002c64:	e027      	b.n	8002cb6 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c6a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	69db      	ldr	r3, [r3, #28]
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d101      	bne.n	8002c7a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e01e      	b.n	8002cb8 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002c7a:	4b12      	ldr	r3, [pc, #72]	@ (8002cc4 <HAL_RCC_OscConfig+0x1078>)
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002c82:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002c86:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002c8a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c8e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	6a1b      	ldr	r3, [r3, #32]
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d10b      	bne.n	8002cb2 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002c9a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002c9e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002ca2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ca6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	d001      	beq.n	8002cb6 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e000      	b.n	8002cb8 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002cb6:	2300      	movs	r3, #0
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	40021000 	.word	0x40021000

08002cc8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b09e      	sub	sp, #120	@ 0x78
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
 8002cd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d101      	bne.n	8002ce0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e162      	b.n	8002fa6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ce0:	4b90      	ldr	r3, [pc, #576]	@ (8002f24 <HAL_RCC_ClockConfig+0x25c>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 0307 	and.w	r3, r3, #7
 8002ce8:	683a      	ldr	r2, [r7, #0]
 8002cea:	429a      	cmp	r2, r3
 8002cec:	d910      	bls.n	8002d10 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cee:	4b8d      	ldr	r3, [pc, #564]	@ (8002f24 <HAL_RCC_ClockConfig+0x25c>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f023 0207 	bic.w	r2, r3, #7
 8002cf6:	498b      	ldr	r1, [pc, #556]	@ (8002f24 <HAL_RCC_ClockConfig+0x25c>)
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cfe:	4b89      	ldr	r3, [pc, #548]	@ (8002f24 <HAL_RCC_ClockConfig+0x25c>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0307 	and.w	r3, r3, #7
 8002d06:	683a      	ldr	r2, [r7, #0]
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d001      	beq.n	8002d10 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e14a      	b.n	8002fa6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 0302 	and.w	r3, r3, #2
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d008      	beq.n	8002d2e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d1c:	4b82      	ldr	r3, [pc, #520]	@ (8002f28 <HAL_RCC_ClockConfig+0x260>)
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	497f      	ldr	r1, [pc, #508]	@ (8002f28 <HAL_RCC_ClockConfig+0x260>)
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0301 	and.w	r3, r3, #1
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	f000 80dc 	beq.w	8002ef4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d13c      	bne.n	8002dbe <HAL_RCC_ClockConfig+0xf6>
 8002d44:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002d48:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d4a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002d4c:	fa93 f3a3 	rbit	r3, r3
 8002d50:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002d52:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d54:	fab3 f383 	clz	r3, r3
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	095b      	lsrs	r3, r3, #5
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	f043 0301 	orr.w	r3, r3, #1
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d102      	bne.n	8002d6e <HAL_RCC_ClockConfig+0xa6>
 8002d68:	4b6f      	ldr	r3, [pc, #444]	@ (8002f28 <HAL_RCC_ClockConfig+0x260>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	e00f      	b.n	8002d8e <HAL_RCC_ClockConfig+0xc6>
 8002d6e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002d72:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d74:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002d76:	fa93 f3a3 	rbit	r3, r3
 8002d7a:	667b      	str	r3, [r7, #100]	@ 0x64
 8002d7c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002d80:	663b      	str	r3, [r7, #96]	@ 0x60
 8002d82:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002d84:	fa93 f3a3 	rbit	r3, r3
 8002d88:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002d8a:	4b67      	ldr	r3, [pc, #412]	@ (8002f28 <HAL_RCC_ClockConfig+0x260>)
 8002d8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d8e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002d92:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002d94:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002d96:	fa92 f2a2 	rbit	r2, r2
 8002d9a:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8002d9c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002d9e:	fab2 f282 	clz	r2, r2
 8002da2:	b2d2      	uxtb	r2, r2
 8002da4:	f042 0220 	orr.w	r2, r2, #32
 8002da8:	b2d2      	uxtb	r2, r2
 8002daa:	f002 021f 	and.w	r2, r2, #31
 8002dae:	2101      	movs	r1, #1
 8002db0:	fa01 f202 	lsl.w	r2, r1, r2
 8002db4:	4013      	ands	r3, r2
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d17b      	bne.n	8002eb2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e0f3      	b.n	8002fa6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	2b02      	cmp	r3, #2
 8002dc4:	d13c      	bne.n	8002e40 <HAL_RCC_ClockConfig+0x178>
 8002dc6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002dca:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dcc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002dce:	fa93 f3a3 	rbit	r3, r3
 8002dd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002dd4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dd6:	fab3 f383 	clz	r3, r3
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	095b      	lsrs	r3, r3, #5
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	f043 0301 	orr.w	r3, r3, #1
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d102      	bne.n	8002df0 <HAL_RCC_ClockConfig+0x128>
 8002dea:	4b4f      	ldr	r3, [pc, #316]	@ (8002f28 <HAL_RCC_ClockConfig+0x260>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	e00f      	b.n	8002e10 <HAL_RCC_ClockConfig+0x148>
 8002df0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002df4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002df6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002df8:	fa93 f3a3 	rbit	r3, r3
 8002dfc:	647b      	str	r3, [r7, #68]	@ 0x44
 8002dfe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002e02:	643b      	str	r3, [r7, #64]	@ 0x40
 8002e04:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e06:	fa93 f3a3 	rbit	r3, r3
 8002e0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002e0c:	4b46      	ldr	r3, [pc, #280]	@ (8002f28 <HAL_RCC_ClockConfig+0x260>)
 8002e0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e10:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002e14:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002e16:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002e18:	fa92 f2a2 	rbit	r2, r2
 8002e1c:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8002e1e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002e20:	fab2 f282 	clz	r2, r2
 8002e24:	b2d2      	uxtb	r2, r2
 8002e26:	f042 0220 	orr.w	r2, r2, #32
 8002e2a:	b2d2      	uxtb	r2, r2
 8002e2c:	f002 021f 	and.w	r2, r2, #31
 8002e30:	2101      	movs	r1, #1
 8002e32:	fa01 f202 	lsl.w	r2, r1, r2
 8002e36:	4013      	ands	r3, r2
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d13a      	bne.n	8002eb2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e0b2      	b.n	8002fa6 <HAL_RCC_ClockConfig+0x2de>
 8002e40:	2302      	movs	r3, #2
 8002e42:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e46:	fa93 f3a3 	rbit	r3, r3
 8002e4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002e4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e4e:	fab3 f383 	clz	r3, r3
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	095b      	lsrs	r3, r3, #5
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	f043 0301 	orr.w	r3, r3, #1
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d102      	bne.n	8002e68 <HAL_RCC_ClockConfig+0x1a0>
 8002e62:	4b31      	ldr	r3, [pc, #196]	@ (8002f28 <HAL_RCC_ClockConfig+0x260>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	e00d      	b.n	8002e84 <HAL_RCC_ClockConfig+0x1bc>
 8002e68:	2302      	movs	r3, #2
 8002e6a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e6e:	fa93 f3a3 	rbit	r3, r3
 8002e72:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e74:	2302      	movs	r3, #2
 8002e76:	623b      	str	r3, [r7, #32]
 8002e78:	6a3b      	ldr	r3, [r7, #32]
 8002e7a:	fa93 f3a3 	rbit	r3, r3
 8002e7e:	61fb      	str	r3, [r7, #28]
 8002e80:	4b29      	ldr	r3, [pc, #164]	@ (8002f28 <HAL_RCC_ClockConfig+0x260>)
 8002e82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e84:	2202      	movs	r2, #2
 8002e86:	61ba      	str	r2, [r7, #24]
 8002e88:	69ba      	ldr	r2, [r7, #24]
 8002e8a:	fa92 f2a2 	rbit	r2, r2
 8002e8e:	617a      	str	r2, [r7, #20]
  return result;
 8002e90:	697a      	ldr	r2, [r7, #20]
 8002e92:	fab2 f282 	clz	r2, r2
 8002e96:	b2d2      	uxtb	r2, r2
 8002e98:	f042 0220 	orr.w	r2, r2, #32
 8002e9c:	b2d2      	uxtb	r2, r2
 8002e9e:	f002 021f 	and.w	r2, r2, #31
 8002ea2:	2101      	movs	r1, #1
 8002ea4:	fa01 f202 	lsl.w	r2, r1, r2
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d101      	bne.n	8002eb2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e079      	b.n	8002fa6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002eb2:	4b1d      	ldr	r3, [pc, #116]	@ (8002f28 <HAL_RCC_ClockConfig+0x260>)
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	f023 0203 	bic.w	r2, r3, #3
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	491a      	ldr	r1, [pc, #104]	@ (8002f28 <HAL_RCC_ClockConfig+0x260>)
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ec4:	f7fd fde0 	bl	8000a88 <HAL_GetTick>
 8002ec8:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eca:	e00a      	b.n	8002ee2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ecc:	f7fd fddc 	bl	8000a88 <HAL_GetTick>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d901      	bls.n	8002ee2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	e061      	b.n	8002fa6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ee2:	4b11      	ldr	r3, [pc, #68]	@ (8002f28 <HAL_RCC_ClockConfig+0x260>)
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	f003 020c 	and.w	r2, r3, #12
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d1eb      	bne.n	8002ecc <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ef4:	4b0b      	ldr	r3, [pc, #44]	@ (8002f24 <HAL_RCC_ClockConfig+0x25c>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0307 	and.w	r3, r3, #7
 8002efc:	683a      	ldr	r2, [r7, #0]
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d214      	bcs.n	8002f2c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f02:	4b08      	ldr	r3, [pc, #32]	@ (8002f24 <HAL_RCC_ClockConfig+0x25c>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f023 0207 	bic.w	r2, r3, #7
 8002f0a:	4906      	ldr	r1, [pc, #24]	@ (8002f24 <HAL_RCC_ClockConfig+0x25c>)
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f12:	4b04      	ldr	r3, [pc, #16]	@ (8002f24 <HAL_RCC_ClockConfig+0x25c>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 0307 	and.w	r3, r3, #7
 8002f1a:	683a      	ldr	r2, [r7, #0]
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d005      	beq.n	8002f2c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	e040      	b.n	8002fa6 <HAL_RCC_ClockConfig+0x2de>
 8002f24:	40022000 	.word	0x40022000
 8002f28:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 0304 	and.w	r3, r3, #4
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d008      	beq.n	8002f4a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f38:	4b1d      	ldr	r3, [pc, #116]	@ (8002fb0 <HAL_RCC_ClockConfig+0x2e8>)
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	491a      	ldr	r1, [pc, #104]	@ (8002fb0 <HAL_RCC_ClockConfig+0x2e8>)
 8002f46:	4313      	orrs	r3, r2
 8002f48:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 0308 	and.w	r3, r3, #8
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d009      	beq.n	8002f6a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f56:	4b16      	ldr	r3, [pc, #88]	@ (8002fb0 <HAL_RCC_ClockConfig+0x2e8>)
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	691b      	ldr	r3, [r3, #16]
 8002f62:	00db      	lsls	r3, r3, #3
 8002f64:	4912      	ldr	r1, [pc, #72]	@ (8002fb0 <HAL_RCC_ClockConfig+0x2e8>)
 8002f66:	4313      	orrs	r3, r2
 8002f68:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002f6a:	f000 f829 	bl	8002fc0 <HAL_RCC_GetSysClockFreq>
 8002f6e:	4601      	mov	r1, r0
 8002f70:	4b0f      	ldr	r3, [pc, #60]	@ (8002fb0 <HAL_RCC_ClockConfig+0x2e8>)
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002f78:	22f0      	movs	r2, #240	@ 0xf0
 8002f7a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f7c:	693a      	ldr	r2, [r7, #16]
 8002f7e:	fa92 f2a2 	rbit	r2, r2
 8002f82:	60fa      	str	r2, [r7, #12]
  return result;
 8002f84:	68fa      	ldr	r2, [r7, #12]
 8002f86:	fab2 f282 	clz	r2, r2
 8002f8a:	b2d2      	uxtb	r2, r2
 8002f8c:	40d3      	lsrs	r3, r2
 8002f8e:	4a09      	ldr	r2, [pc, #36]	@ (8002fb4 <HAL_RCC_ClockConfig+0x2ec>)
 8002f90:	5cd3      	ldrb	r3, [r2, r3]
 8002f92:	fa21 f303 	lsr.w	r3, r1, r3
 8002f96:	4a08      	ldr	r2, [pc, #32]	@ (8002fb8 <HAL_RCC_ClockConfig+0x2f0>)
 8002f98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002f9a:	4b08      	ldr	r3, [pc, #32]	@ (8002fbc <HAL_RCC_ClockConfig+0x2f4>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f7fd fc36 	bl	8000810 <HAL_InitTick>
  
  return HAL_OK;
 8002fa4:	2300      	movs	r3, #0
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3778      	adds	r7, #120	@ 0x78
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	40021000 	.word	0x40021000
 8002fb4:	08005cf0 	.word	0x08005cf0
 8002fb8:	20000000 	.word	0x20000000
 8002fbc:	20000004 	.word	0x20000004

08002fc0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b087      	sub	sp, #28
 8002fc4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	60fb      	str	r3, [r7, #12]
 8002fca:	2300      	movs	r3, #0
 8002fcc:	60bb      	str	r3, [r7, #8]
 8002fce:	2300      	movs	r3, #0
 8002fd0:	617b      	str	r3, [r7, #20]
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002fda:	4b1e      	ldr	r3, [pc, #120]	@ (8003054 <HAL_RCC_GetSysClockFreq+0x94>)
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	f003 030c 	and.w	r3, r3, #12
 8002fe6:	2b04      	cmp	r3, #4
 8002fe8:	d002      	beq.n	8002ff0 <HAL_RCC_GetSysClockFreq+0x30>
 8002fea:	2b08      	cmp	r3, #8
 8002fec:	d003      	beq.n	8002ff6 <HAL_RCC_GetSysClockFreq+0x36>
 8002fee:	e026      	b.n	800303e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ff0:	4b19      	ldr	r3, [pc, #100]	@ (8003058 <HAL_RCC_GetSysClockFreq+0x98>)
 8002ff2:	613b      	str	r3, [r7, #16]
      break;
 8002ff4:	e026      	b.n	8003044 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	0c9b      	lsrs	r3, r3, #18
 8002ffa:	f003 030f 	and.w	r3, r3, #15
 8002ffe:	4a17      	ldr	r2, [pc, #92]	@ (800305c <HAL_RCC_GetSysClockFreq+0x9c>)
 8003000:	5cd3      	ldrb	r3, [r2, r3]
 8003002:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8003004:	4b13      	ldr	r3, [pc, #76]	@ (8003054 <HAL_RCC_GetSysClockFreq+0x94>)
 8003006:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003008:	f003 030f 	and.w	r3, r3, #15
 800300c:	4a14      	ldr	r2, [pc, #80]	@ (8003060 <HAL_RCC_GetSysClockFreq+0xa0>)
 800300e:	5cd3      	ldrb	r3, [r2, r3]
 8003010:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003018:	2b00      	cmp	r3, #0
 800301a:	d008      	beq.n	800302e <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800301c:	4a0e      	ldr	r2, [pc, #56]	@ (8003058 <HAL_RCC_GetSysClockFreq+0x98>)
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	fbb2 f2f3 	udiv	r2, r2, r3
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	fb02 f303 	mul.w	r3, r2, r3
 800302a:	617b      	str	r3, [r7, #20]
 800302c:	e004      	b.n	8003038 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	4a0c      	ldr	r2, [pc, #48]	@ (8003064 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003032:	fb02 f303 	mul.w	r3, r2, r3
 8003036:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	613b      	str	r3, [r7, #16]
      break;
 800303c:	e002      	b.n	8003044 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800303e:	4b06      	ldr	r3, [pc, #24]	@ (8003058 <HAL_RCC_GetSysClockFreq+0x98>)
 8003040:	613b      	str	r3, [r7, #16]
      break;
 8003042:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003044:	693b      	ldr	r3, [r7, #16]
}
 8003046:	4618      	mov	r0, r3
 8003048:	371c      	adds	r7, #28
 800304a:	46bd      	mov	sp, r7
 800304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003050:	4770      	bx	lr
 8003052:	bf00      	nop
 8003054:	40021000 	.word	0x40021000
 8003058:	007a1200 	.word	0x007a1200
 800305c:	08005d08 	.word	0x08005d08
 8003060:	08005d18 	.word	0x08005d18
 8003064:	003d0900 	.word	0x003d0900

08003068 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003068:	b480      	push	{r7}
 800306a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800306c:	4b03      	ldr	r3, [pc, #12]	@ (800307c <HAL_RCC_GetHCLKFreq+0x14>)
 800306e:	681b      	ldr	r3, [r3, #0]
}
 8003070:	4618      	mov	r0, r3
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr
 800307a:	bf00      	nop
 800307c:	20000000 	.word	0x20000000

08003080 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b082      	sub	sp, #8
 8003084:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003086:	f7ff ffef 	bl	8003068 <HAL_RCC_GetHCLKFreq>
 800308a:	4601      	mov	r1, r0
 800308c:	4b0b      	ldr	r3, [pc, #44]	@ (80030bc <HAL_RCC_GetPCLK1Freq+0x3c>)
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003094:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003098:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800309a:	687a      	ldr	r2, [r7, #4]
 800309c:	fa92 f2a2 	rbit	r2, r2
 80030a0:	603a      	str	r2, [r7, #0]
  return result;
 80030a2:	683a      	ldr	r2, [r7, #0]
 80030a4:	fab2 f282 	clz	r2, r2
 80030a8:	b2d2      	uxtb	r2, r2
 80030aa:	40d3      	lsrs	r3, r2
 80030ac:	4a04      	ldr	r2, [pc, #16]	@ (80030c0 <HAL_RCC_GetPCLK1Freq+0x40>)
 80030ae:	5cd3      	ldrb	r3, [r2, r3]
 80030b0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80030b4:	4618      	mov	r0, r3
 80030b6:	3708      	adds	r7, #8
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}
 80030bc:	40021000 	.word	0x40021000
 80030c0:	08005d00 	.word	0x08005d00

080030c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b082      	sub	sp, #8
 80030c8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80030ca:	f7ff ffcd 	bl	8003068 <HAL_RCC_GetHCLKFreq>
 80030ce:	4601      	mov	r1, r0
 80030d0:	4b0b      	ldr	r3, [pc, #44]	@ (8003100 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 80030d8:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 80030dc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030de:	687a      	ldr	r2, [r7, #4]
 80030e0:	fa92 f2a2 	rbit	r2, r2
 80030e4:	603a      	str	r2, [r7, #0]
  return result;
 80030e6:	683a      	ldr	r2, [r7, #0]
 80030e8:	fab2 f282 	clz	r2, r2
 80030ec:	b2d2      	uxtb	r2, r2
 80030ee:	40d3      	lsrs	r3, r2
 80030f0:	4a04      	ldr	r2, [pc, #16]	@ (8003104 <HAL_RCC_GetPCLK2Freq+0x40>)
 80030f2:	5cd3      	ldrb	r3, [r2, r3]
 80030f4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80030f8:	4618      	mov	r0, r3
 80030fa:	3708      	adds	r7, #8
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	40021000 	.word	0x40021000
 8003104:	08005d00 	.word	0x08005d00

08003108 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003108:	b480      	push	{r7}
 800310a:	b083      	sub	sp, #12
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
 8003110:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	220f      	movs	r2, #15
 8003116:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003118:	4b12      	ldr	r3, [pc, #72]	@ (8003164 <HAL_RCC_GetClockConfig+0x5c>)
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	f003 0203 	and.w	r2, r3, #3
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8003124:	4b0f      	ldr	r3, [pc, #60]	@ (8003164 <HAL_RCC_GetClockConfig+0x5c>)
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8003130:	4b0c      	ldr	r3, [pc, #48]	@ (8003164 <HAL_RCC_GetClockConfig+0x5c>)
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800313c:	4b09      	ldr	r3, [pc, #36]	@ (8003164 <HAL_RCC_GetClockConfig+0x5c>)
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	08db      	lsrs	r3, r3, #3
 8003142:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 800314a:	4b07      	ldr	r3, [pc, #28]	@ (8003168 <HAL_RCC_GetClockConfig+0x60>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 0207 	and.w	r2, r3, #7
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	601a      	str	r2, [r3, #0]
}
 8003156:	bf00      	nop
 8003158:	370c      	adds	r7, #12
 800315a:	46bd      	mov	sp, r7
 800315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003160:	4770      	bx	lr
 8003162:	bf00      	nop
 8003164:	40021000 	.word	0x40021000
 8003168:	40022000 	.word	0x40022000

0800316c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b082      	sub	sp, #8
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d101      	bne.n	800317e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e049      	b.n	8003212 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003184:	b2db      	uxtb	r3, r3
 8003186:	2b00      	cmp	r3, #0
 8003188:	d106      	bne.n	8003198 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2200      	movs	r2, #0
 800318e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f000 f841 	bl	800321a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2202      	movs	r2, #2
 800319c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	3304      	adds	r3, #4
 80031a8:	4619      	mov	r1, r3
 80031aa:	4610      	mov	r0, r2
 80031ac:	f000 f9be 	bl	800352c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2201      	movs	r2, #1
 80031b4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2201      	movs	r2, #1
 80031bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2201      	movs	r2, #1
 80031c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2201      	movs	r2, #1
 80031cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2201      	movs	r2, #1
 80031d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2201      	movs	r2, #1
 80031dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2201      	movs	r2, #1
 80031e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2201      	movs	r2, #1
 80031ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2201      	movs	r2, #1
 80031f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2201      	movs	r2, #1
 80031fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2201      	movs	r2, #1
 8003204:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2201      	movs	r2, #1
 800320c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003210:	2300      	movs	r3, #0
}
 8003212:	4618      	mov	r0, r3
 8003214:	3708      	adds	r7, #8
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}

0800321a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800321a:	b480      	push	{r7}
 800321c:	b083      	sub	sp, #12
 800321e:	af00      	add	r7, sp, #0
 8003220:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003222:	bf00      	nop
 8003224:	370c      	adds	r7, #12
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr
	...

08003230 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003230:	b480      	push	{r7}
 8003232:	b085      	sub	sp, #20
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800323e:	b2db      	uxtb	r3, r3
 8003240:	2b01      	cmp	r3, #1
 8003242:	d001      	beq.n	8003248 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	e03b      	b.n	80032c0 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2202      	movs	r2, #2
 800324c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	68da      	ldr	r2, [r3, #12]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f042 0201 	orr.w	r2, r2, #1
 800325e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a19      	ldr	r2, [pc, #100]	@ (80032cc <HAL_TIM_Base_Start_IT+0x9c>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d009      	beq.n	800327e <HAL_TIM_Base_Start_IT+0x4e>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003272:	d004      	beq.n	800327e <HAL_TIM_Base_Start_IT+0x4e>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a15      	ldr	r2, [pc, #84]	@ (80032d0 <HAL_TIM_Base_Start_IT+0xa0>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d115      	bne.n	80032aa <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	689a      	ldr	r2, [r3, #8]
 8003284:	4b13      	ldr	r3, [pc, #76]	@ (80032d4 <HAL_TIM_Base_Start_IT+0xa4>)
 8003286:	4013      	ands	r3, r2
 8003288:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2b06      	cmp	r3, #6
 800328e:	d015      	beq.n	80032bc <HAL_TIM_Base_Start_IT+0x8c>
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003296:	d011      	beq.n	80032bc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f042 0201 	orr.w	r2, r2, #1
 80032a6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032a8:	e008      	b.n	80032bc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f042 0201 	orr.w	r2, r2, #1
 80032b8:	601a      	str	r2, [r3, #0]
 80032ba:	e000      	b.n	80032be <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032bc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80032be:	2300      	movs	r3, #0
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3714      	adds	r7, #20
 80032c4:	46bd      	mov	sp, r7
 80032c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ca:	4770      	bx	lr
 80032cc:	40012c00 	.word	0x40012c00
 80032d0:	40014000 	.word	0x40014000
 80032d4:	00010007 	.word	0x00010007

080032d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b084      	sub	sp, #16
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	68db      	ldr	r3, [r3, #12]
 80032e6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	691b      	ldr	r3, [r3, #16]
 80032ee:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	f003 0302 	and.w	r3, r3, #2
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d020      	beq.n	800333c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	f003 0302 	and.w	r3, r3, #2
 8003300:	2b00      	cmp	r3, #0
 8003302:	d01b      	beq.n	800333c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f06f 0202 	mvn.w	r2, #2
 800330c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2201      	movs	r2, #1
 8003312:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	699b      	ldr	r3, [r3, #24]
 800331a:	f003 0303 	and.w	r3, r3, #3
 800331e:	2b00      	cmp	r3, #0
 8003320:	d003      	beq.n	800332a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f000 f8e4 	bl	80034f0 <HAL_TIM_IC_CaptureCallback>
 8003328:	e005      	b.n	8003336 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	f000 f8d6 	bl	80034dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003330:	6878      	ldr	r0, [r7, #4]
 8003332:	f000 f8e7 	bl	8003504 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	f003 0304 	and.w	r3, r3, #4
 8003342:	2b00      	cmp	r3, #0
 8003344:	d020      	beq.n	8003388 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	f003 0304 	and.w	r3, r3, #4
 800334c:	2b00      	cmp	r3, #0
 800334e:	d01b      	beq.n	8003388 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f06f 0204 	mvn.w	r2, #4
 8003358:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2202      	movs	r2, #2
 800335e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	699b      	ldr	r3, [r3, #24]
 8003366:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800336a:	2b00      	cmp	r3, #0
 800336c:	d003      	beq.n	8003376 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f000 f8be 	bl	80034f0 <HAL_TIM_IC_CaptureCallback>
 8003374:	e005      	b.n	8003382 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f000 f8b0 	bl	80034dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	f000 f8c1 	bl	8003504 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2200      	movs	r2, #0
 8003386:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	f003 0308 	and.w	r3, r3, #8
 800338e:	2b00      	cmp	r3, #0
 8003390:	d020      	beq.n	80033d4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	f003 0308 	and.w	r3, r3, #8
 8003398:	2b00      	cmp	r3, #0
 800339a:	d01b      	beq.n	80033d4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f06f 0208 	mvn.w	r2, #8
 80033a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2204      	movs	r2, #4
 80033aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	69db      	ldr	r3, [r3, #28]
 80033b2:	f003 0303 	and.w	r3, r3, #3
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d003      	beq.n	80033c2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f000 f898 	bl	80034f0 <HAL_TIM_IC_CaptureCallback>
 80033c0:	e005      	b.n	80033ce <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f000 f88a 	bl	80034dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033c8:	6878      	ldr	r0, [r7, #4]
 80033ca:	f000 f89b 	bl	8003504 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2200      	movs	r2, #0
 80033d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	f003 0310 	and.w	r3, r3, #16
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d020      	beq.n	8003420 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	f003 0310 	and.w	r3, r3, #16
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d01b      	beq.n	8003420 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f06f 0210 	mvn.w	r2, #16
 80033f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2208      	movs	r2, #8
 80033f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	69db      	ldr	r3, [r3, #28]
 80033fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003402:	2b00      	cmp	r3, #0
 8003404:	d003      	beq.n	800340e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f000 f872 	bl	80034f0 <HAL_TIM_IC_CaptureCallback>
 800340c:	e005      	b.n	800341a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f000 f864 	bl	80034dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003414:	6878      	ldr	r0, [r7, #4]
 8003416:	f000 f875 	bl	8003504 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	f003 0301 	and.w	r3, r3, #1
 8003426:	2b00      	cmp	r3, #0
 8003428:	d00c      	beq.n	8003444 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	f003 0301 	and.w	r3, r3, #1
 8003430:	2b00      	cmp	r3, #0
 8003432:	d007      	beq.n	8003444 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f06f 0201 	mvn.w	r2, #1
 800343c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f7fd f906 	bl	8000650 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800344a:	2b00      	cmp	r3, #0
 800344c:	d00c      	beq.n	8003468 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003454:	2b00      	cmp	r3, #0
 8003456:	d007      	beq.n	8003468 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003460:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f000 f8e6 	bl	8003634 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800346e:	2b00      	cmp	r3, #0
 8003470:	d00c      	beq.n	800348c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003478:	2b00      	cmp	r3, #0
 800347a:	d007      	beq.n	800348c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003484:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f000 f8de 	bl	8003648 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003492:	2b00      	cmp	r3, #0
 8003494:	d00c      	beq.n	80034b0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800349c:	2b00      	cmp	r3, #0
 800349e:	d007      	beq.n	80034b0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80034a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f000 f834 	bl	8003518 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	f003 0320 	and.w	r3, r3, #32
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d00c      	beq.n	80034d4 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	f003 0320 	and.w	r3, r3, #32
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d007      	beq.n	80034d4 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f06f 0220 	mvn.w	r2, #32
 80034cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f000 f8a6 	bl	8003620 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80034d4:	bf00      	nop
 80034d6:	3710      	adds	r7, #16
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}

080034dc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034dc:	b480      	push	{r7}
 80034de:	b083      	sub	sp, #12
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80034e4:	bf00      	nop
 80034e6:	370c      	adds	r7, #12
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr

080034f0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b083      	sub	sp, #12
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80034f8:	bf00      	nop
 80034fa:	370c      	adds	r7, #12
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr

08003504 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003504:	b480      	push	{r7}
 8003506:	b083      	sub	sp, #12
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800350c:	bf00      	nop
 800350e:	370c      	adds	r7, #12
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr

08003518 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003518:	b480      	push	{r7}
 800351a:	b083      	sub	sp, #12
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003520:	bf00      	nop
 8003522:	370c      	adds	r7, #12
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr

0800352c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800352c:	b480      	push	{r7}
 800352e:	b085      	sub	sp, #20
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	4a34      	ldr	r2, [pc, #208]	@ (8003610 <TIM_Base_SetConfig+0xe4>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d003      	beq.n	800354c <TIM_Base_SetConfig+0x20>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800354a:	d108      	bne.n	800355e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003552:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	68fa      	ldr	r2, [r7, #12]
 800355a:	4313      	orrs	r3, r2
 800355c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4a2b      	ldr	r2, [pc, #172]	@ (8003610 <TIM_Base_SetConfig+0xe4>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d00f      	beq.n	8003586 <TIM_Base_SetConfig+0x5a>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800356c:	d00b      	beq.n	8003586 <TIM_Base_SetConfig+0x5a>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4a28      	ldr	r2, [pc, #160]	@ (8003614 <TIM_Base_SetConfig+0xe8>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d007      	beq.n	8003586 <TIM_Base_SetConfig+0x5a>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4a27      	ldr	r2, [pc, #156]	@ (8003618 <TIM_Base_SetConfig+0xec>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d003      	beq.n	8003586 <TIM_Base_SetConfig+0x5a>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4a26      	ldr	r2, [pc, #152]	@ (800361c <TIM_Base_SetConfig+0xf0>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d108      	bne.n	8003598 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800358c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	68db      	ldr	r3, [r3, #12]
 8003592:	68fa      	ldr	r2, [r7, #12]
 8003594:	4313      	orrs	r3, r2
 8003596:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	695b      	ldr	r3, [r3, #20]
 80035a2:	4313      	orrs	r3, r2
 80035a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	68fa      	ldr	r2, [r7, #12]
 80035aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	689a      	ldr	r2, [r3, #8]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	4a14      	ldr	r2, [pc, #80]	@ (8003610 <TIM_Base_SetConfig+0xe4>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d00b      	beq.n	80035dc <TIM_Base_SetConfig+0xb0>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	4a13      	ldr	r2, [pc, #76]	@ (8003614 <TIM_Base_SetConfig+0xe8>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d007      	beq.n	80035dc <TIM_Base_SetConfig+0xb0>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	4a12      	ldr	r2, [pc, #72]	@ (8003618 <TIM_Base_SetConfig+0xec>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d003      	beq.n	80035dc <TIM_Base_SetConfig+0xb0>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	4a11      	ldr	r2, [pc, #68]	@ (800361c <TIM_Base_SetConfig+0xf0>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d103      	bne.n	80035e4 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	691a      	ldr	r2, [r3, #16]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2201      	movs	r2, #1
 80035e8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	691b      	ldr	r3, [r3, #16]
 80035ee:	f003 0301 	and.w	r3, r3, #1
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d105      	bne.n	8003602 <TIM_Base_SetConfig+0xd6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	691b      	ldr	r3, [r3, #16]
 80035fa:	f023 0201 	bic.w	r2, r3, #1
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	611a      	str	r2, [r3, #16]
  }
}
 8003602:	bf00      	nop
 8003604:	3714      	adds	r7, #20
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr
 800360e:	bf00      	nop
 8003610:	40012c00 	.word	0x40012c00
 8003614:	40014000 	.word	0x40014000
 8003618:	40014400 	.word	0x40014400
 800361c:	40014800 	.word	0x40014800

08003620 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003620:	b480      	push	{r7}
 8003622:	b083      	sub	sp, #12
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003628:	bf00      	nop
 800362a:	370c      	adds	r7, #12
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr

08003634 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003634:	b480      	push	{r7}
 8003636:	b083      	sub	sp, #12
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800363c:	bf00      	nop
 800363e:	370c      	adds	r7, #12
 8003640:	46bd      	mov	sp, r7
 8003642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003646:	4770      	bx	lr

08003648 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003648:	b480      	push	{r7}
 800364a:	b083      	sub	sp, #12
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003650:	bf00      	nop
 8003652:	370c      	adds	r7, #12
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr

0800365c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b082      	sub	sp, #8
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d101      	bne.n	800366e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e040      	b.n	80036f0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003672:	2b00      	cmp	r3, #0
 8003674:	d106      	bne.n	8003684 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2200      	movs	r2, #0
 800367a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f7fd f884 	bl	800078c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2224      	movs	r2, #36	@ 0x24
 8003688:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f022 0201 	bic.w	r2, r2, #1
 8003698:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d002      	beq.n	80036a8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f000 f9e8 	bl	8003a78 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	f000 f8af 	bl	800380c <UART_SetConfig>
 80036ae:	4603      	mov	r3, r0
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	d101      	bne.n	80036b8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	e01b      	b.n	80036f0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	685a      	ldr	r2, [r3, #4]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80036c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	689a      	ldr	r2, [r3, #8]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80036d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f042 0201 	orr.w	r2, r2, #1
 80036e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	f000 fa67 	bl	8003bbc <UART_CheckIdleState>
 80036ee:	4603      	mov	r3, r0
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3708      	adds	r7, #8
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}

080036f8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b08a      	sub	sp, #40	@ 0x28
 80036fc:	af02      	add	r7, sp, #8
 80036fe:	60f8      	str	r0, [r7, #12]
 8003700:	60b9      	str	r1, [r7, #8]
 8003702:	603b      	str	r3, [r7, #0]
 8003704:	4613      	mov	r3, r2
 8003706:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800370c:	2b20      	cmp	r3, #32
 800370e:	d177      	bne.n	8003800 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d002      	beq.n	800371c <HAL_UART_Transmit+0x24>
 8003716:	88fb      	ldrh	r3, [r7, #6]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d101      	bne.n	8003720 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	e070      	b.n	8003802 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2200      	movs	r2, #0
 8003724:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2221      	movs	r2, #33	@ 0x21
 800372c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800372e:	f7fd f9ab 	bl	8000a88 <HAL_GetTick>
 8003732:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	88fa      	ldrh	r2, [r7, #6]
 8003738:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	88fa      	ldrh	r2, [r7, #6]
 8003740:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800374c:	d108      	bne.n	8003760 <HAL_UART_Transmit+0x68>
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	691b      	ldr	r3, [r3, #16]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d104      	bne.n	8003760 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003756:	2300      	movs	r3, #0
 8003758:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	61bb      	str	r3, [r7, #24]
 800375e:	e003      	b.n	8003768 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003764:	2300      	movs	r3, #0
 8003766:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003768:	e02f      	b.n	80037ca <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	9300      	str	r3, [sp, #0]
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	2200      	movs	r2, #0
 8003772:	2180      	movs	r1, #128	@ 0x80
 8003774:	68f8      	ldr	r0, [r7, #12]
 8003776:	f000 fac9 	bl	8003d0c <UART_WaitOnFlagUntilTimeout>
 800377a:	4603      	mov	r3, r0
 800377c:	2b00      	cmp	r3, #0
 800377e:	d004      	beq.n	800378a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2220      	movs	r2, #32
 8003784:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003786:	2303      	movs	r3, #3
 8003788:	e03b      	b.n	8003802 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800378a:	69fb      	ldr	r3, [r7, #28]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d10b      	bne.n	80037a8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003790:	69bb      	ldr	r3, [r7, #24]
 8003792:	881a      	ldrh	r2, [r3, #0]
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800379c:	b292      	uxth	r2, r2
 800379e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80037a0:	69bb      	ldr	r3, [r7, #24]
 80037a2:	3302      	adds	r3, #2
 80037a4:	61bb      	str	r3, [r7, #24]
 80037a6:	e007      	b.n	80037b8 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80037a8:	69fb      	ldr	r3, [r7, #28]
 80037aa:	781a      	ldrb	r2, [r3, #0]
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80037b2:	69fb      	ldr	r3, [r7, #28]
 80037b4:	3301      	adds	r3, #1
 80037b6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80037be:	b29b      	uxth	r3, r3
 80037c0:	3b01      	subs	r3, #1
 80037c2:	b29a      	uxth	r2, r3
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80037d0:	b29b      	uxth	r3, r3
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d1c9      	bne.n	800376a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	9300      	str	r3, [sp, #0]
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	2200      	movs	r2, #0
 80037de:	2140      	movs	r1, #64	@ 0x40
 80037e0:	68f8      	ldr	r0, [r7, #12]
 80037e2:	f000 fa93 	bl	8003d0c <UART_WaitOnFlagUntilTimeout>
 80037e6:	4603      	mov	r3, r0
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d004      	beq.n	80037f6 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2220      	movs	r2, #32
 80037f0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80037f2:	2303      	movs	r3, #3
 80037f4:	e005      	b.n	8003802 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2220      	movs	r2, #32
 80037fa:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80037fc:	2300      	movs	r3, #0
 80037fe:	e000      	b.n	8003802 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003800:	2302      	movs	r3, #2
  }
}
 8003802:	4618      	mov	r0, r3
 8003804:	3720      	adds	r7, #32
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
	...

0800380c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b088      	sub	sp, #32
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003814:	2300      	movs	r3, #0
 8003816:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	689a      	ldr	r2, [r3, #8]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	691b      	ldr	r3, [r3, #16]
 8003820:	431a      	orrs	r2, r3
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	695b      	ldr	r3, [r3, #20]
 8003826:	431a      	orrs	r2, r3
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	69db      	ldr	r3, [r3, #28]
 800382c:	4313      	orrs	r3, r2
 800382e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	4b8a      	ldr	r3, [pc, #552]	@ (8003a60 <UART_SetConfig+0x254>)
 8003838:	4013      	ands	r3, r2
 800383a:	687a      	ldr	r2, [r7, #4]
 800383c:	6812      	ldr	r2, [r2, #0]
 800383e:	6979      	ldr	r1, [r7, #20]
 8003840:	430b      	orrs	r3, r1
 8003842:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	68da      	ldr	r2, [r3, #12]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	430a      	orrs	r2, r1
 8003858:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	699b      	ldr	r3, [r3, #24]
 800385e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6a1b      	ldr	r3, [r3, #32]
 8003864:	697a      	ldr	r2, [r7, #20]
 8003866:	4313      	orrs	r3, r2
 8003868:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	697a      	ldr	r2, [r7, #20]
 800387a:	430a      	orrs	r2, r1
 800387c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a78      	ldr	r2, [pc, #480]	@ (8003a64 <UART_SetConfig+0x258>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d120      	bne.n	80038ca <UART_SetConfig+0xbe>
 8003888:	4b77      	ldr	r3, [pc, #476]	@ (8003a68 <UART_SetConfig+0x25c>)
 800388a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800388c:	f003 0303 	and.w	r3, r3, #3
 8003890:	2b03      	cmp	r3, #3
 8003892:	d817      	bhi.n	80038c4 <UART_SetConfig+0xb8>
 8003894:	a201      	add	r2, pc, #4	@ (adr r2, 800389c <UART_SetConfig+0x90>)
 8003896:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800389a:	bf00      	nop
 800389c:	080038ad 	.word	0x080038ad
 80038a0:	080038b9 	.word	0x080038b9
 80038a4:	080038bf 	.word	0x080038bf
 80038a8:	080038b3 	.word	0x080038b3
 80038ac:	2300      	movs	r3, #0
 80038ae:	77fb      	strb	r3, [r7, #31]
 80038b0:	e01d      	b.n	80038ee <UART_SetConfig+0xe2>
 80038b2:	2302      	movs	r3, #2
 80038b4:	77fb      	strb	r3, [r7, #31]
 80038b6:	e01a      	b.n	80038ee <UART_SetConfig+0xe2>
 80038b8:	2304      	movs	r3, #4
 80038ba:	77fb      	strb	r3, [r7, #31]
 80038bc:	e017      	b.n	80038ee <UART_SetConfig+0xe2>
 80038be:	2308      	movs	r3, #8
 80038c0:	77fb      	strb	r3, [r7, #31]
 80038c2:	e014      	b.n	80038ee <UART_SetConfig+0xe2>
 80038c4:	2310      	movs	r3, #16
 80038c6:	77fb      	strb	r3, [r7, #31]
 80038c8:	e011      	b.n	80038ee <UART_SetConfig+0xe2>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a67      	ldr	r2, [pc, #412]	@ (8003a6c <UART_SetConfig+0x260>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d102      	bne.n	80038da <UART_SetConfig+0xce>
 80038d4:	2300      	movs	r3, #0
 80038d6:	77fb      	strb	r3, [r7, #31]
 80038d8:	e009      	b.n	80038ee <UART_SetConfig+0xe2>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a64      	ldr	r2, [pc, #400]	@ (8003a70 <UART_SetConfig+0x264>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d102      	bne.n	80038ea <UART_SetConfig+0xde>
 80038e4:	2300      	movs	r3, #0
 80038e6:	77fb      	strb	r3, [r7, #31]
 80038e8:	e001      	b.n	80038ee <UART_SetConfig+0xe2>
 80038ea:	2310      	movs	r3, #16
 80038ec:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	69db      	ldr	r3, [r3, #28]
 80038f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80038f6:	d15a      	bne.n	80039ae <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 80038f8:	7ffb      	ldrb	r3, [r7, #31]
 80038fa:	2b08      	cmp	r3, #8
 80038fc:	d827      	bhi.n	800394e <UART_SetConfig+0x142>
 80038fe:	a201      	add	r2, pc, #4	@ (adr r2, 8003904 <UART_SetConfig+0xf8>)
 8003900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003904:	08003929 	.word	0x08003929
 8003908:	08003931 	.word	0x08003931
 800390c:	08003939 	.word	0x08003939
 8003910:	0800394f 	.word	0x0800394f
 8003914:	0800393f 	.word	0x0800393f
 8003918:	0800394f 	.word	0x0800394f
 800391c:	0800394f 	.word	0x0800394f
 8003920:	0800394f 	.word	0x0800394f
 8003924:	08003947 	.word	0x08003947
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003928:	f7ff fbaa 	bl	8003080 <HAL_RCC_GetPCLK1Freq>
 800392c:	61b8      	str	r0, [r7, #24]
        break;
 800392e:	e013      	b.n	8003958 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003930:	f7ff fbc8 	bl	80030c4 <HAL_RCC_GetPCLK2Freq>
 8003934:	61b8      	str	r0, [r7, #24]
        break;
 8003936:	e00f      	b.n	8003958 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003938:	4b4e      	ldr	r3, [pc, #312]	@ (8003a74 <UART_SetConfig+0x268>)
 800393a:	61bb      	str	r3, [r7, #24]
        break;
 800393c:	e00c      	b.n	8003958 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800393e:	f7ff fb3f 	bl	8002fc0 <HAL_RCC_GetSysClockFreq>
 8003942:	61b8      	str	r0, [r7, #24]
        break;
 8003944:	e008      	b.n	8003958 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003946:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800394a:	61bb      	str	r3, [r7, #24]
        break;
 800394c:	e004      	b.n	8003958 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800394e:	2300      	movs	r3, #0
 8003950:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	77bb      	strb	r3, [r7, #30]
        break;
 8003956:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003958:	69bb      	ldr	r3, [r7, #24]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d074      	beq.n	8003a48 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800395e:	69bb      	ldr	r3, [r7, #24]
 8003960:	005a      	lsls	r2, r3, #1
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	085b      	lsrs	r3, r3, #1
 8003968:	441a      	add	r2, r3
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003972:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	2b0f      	cmp	r3, #15
 8003978:	d916      	bls.n	80039a8 <UART_SetConfig+0x19c>
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003980:	d212      	bcs.n	80039a8 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	b29b      	uxth	r3, r3
 8003986:	f023 030f 	bic.w	r3, r3, #15
 800398a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	085b      	lsrs	r3, r3, #1
 8003990:	b29b      	uxth	r3, r3
 8003992:	f003 0307 	and.w	r3, r3, #7
 8003996:	b29a      	uxth	r2, r3
 8003998:	89fb      	ldrh	r3, [r7, #14]
 800399a:	4313      	orrs	r3, r2
 800399c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	89fa      	ldrh	r2, [r7, #14]
 80039a4:	60da      	str	r2, [r3, #12]
 80039a6:	e04f      	b.n	8003a48 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	77bb      	strb	r3, [r7, #30]
 80039ac:	e04c      	b.n	8003a48 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80039ae:	7ffb      	ldrb	r3, [r7, #31]
 80039b0:	2b08      	cmp	r3, #8
 80039b2:	d828      	bhi.n	8003a06 <UART_SetConfig+0x1fa>
 80039b4:	a201      	add	r2, pc, #4	@ (adr r2, 80039bc <UART_SetConfig+0x1b0>)
 80039b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ba:	bf00      	nop
 80039bc:	080039e1 	.word	0x080039e1
 80039c0:	080039e9 	.word	0x080039e9
 80039c4:	080039f1 	.word	0x080039f1
 80039c8:	08003a07 	.word	0x08003a07
 80039cc:	080039f7 	.word	0x080039f7
 80039d0:	08003a07 	.word	0x08003a07
 80039d4:	08003a07 	.word	0x08003a07
 80039d8:	08003a07 	.word	0x08003a07
 80039dc:	080039ff 	.word	0x080039ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039e0:	f7ff fb4e 	bl	8003080 <HAL_RCC_GetPCLK1Freq>
 80039e4:	61b8      	str	r0, [r7, #24]
        break;
 80039e6:	e013      	b.n	8003a10 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80039e8:	f7ff fb6c 	bl	80030c4 <HAL_RCC_GetPCLK2Freq>
 80039ec:	61b8      	str	r0, [r7, #24]
        break;
 80039ee:	e00f      	b.n	8003a10 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039f0:	4b20      	ldr	r3, [pc, #128]	@ (8003a74 <UART_SetConfig+0x268>)
 80039f2:	61bb      	str	r3, [r7, #24]
        break;
 80039f4:	e00c      	b.n	8003a10 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039f6:	f7ff fae3 	bl	8002fc0 <HAL_RCC_GetSysClockFreq>
 80039fa:	61b8      	str	r0, [r7, #24]
        break;
 80039fc:	e008      	b.n	8003a10 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a02:	61bb      	str	r3, [r7, #24]
        break;
 8003a04:	e004      	b.n	8003a10 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8003a06:	2300      	movs	r3, #0
 8003a08:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	77bb      	strb	r3, [r7, #30]
        break;
 8003a0e:	bf00      	nop
    }

    if (pclk != 0U)
 8003a10:	69bb      	ldr	r3, [r7, #24]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d018      	beq.n	8003a48 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	085a      	lsrs	r2, r3, #1
 8003a1c:	69bb      	ldr	r3, [r7, #24]
 8003a1e:	441a      	add	r2, r3
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a28:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	2b0f      	cmp	r3, #15
 8003a2e:	d909      	bls.n	8003a44 <UART_SetConfig+0x238>
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a36:	d205      	bcs.n	8003a44 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	b29a      	uxth	r2, r3
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	60da      	str	r2, [r3, #12]
 8003a42:	e001      	b.n	8003a48 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2200      	movs	r2, #0
 8003a52:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003a54:	7fbb      	ldrb	r3, [r7, #30]
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	3720      	adds	r7, #32
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}
 8003a5e:	bf00      	nop
 8003a60:	efff69f3 	.word	0xefff69f3
 8003a64:	40013800 	.word	0x40013800
 8003a68:	40021000 	.word	0x40021000
 8003a6c:	40004400 	.word	0x40004400
 8003a70:	40004800 	.word	0x40004800
 8003a74:	007a1200 	.word	0x007a1200

08003a78 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b083      	sub	sp, #12
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a84:	f003 0308 	and.w	r3, r3, #8
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d00a      	beq.n	8003aa2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	430a      	orrs	r2, r1
 8003aa0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aa6:	f003 0301 	and.w	r3, r3, #1
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d00a      	beq.n	8003ac4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	430a      	orrs	r2, r1
 8003ac2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ac8:	f003 0302 	and.w	r3, r3, #2
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d00a      	beq.n	8003ae6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	430a      	orrs	r2, r1
 8003ae4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aea:	f003 0304 	and.w	r3, r3, #4
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d00a      	beq.n	8003b08 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	430a      	orrs	r2, r1
 8003b06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b0c:	f003 0310 	and.w	r3, r3, #16
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d00a      	beq.n	8003b2a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	430a      	orrs	r2, r1
 8003b28:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b2e:	f003 0320 	and.w	r3, r3, #32
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d00a      	beq.n	8003b4c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	430a      	orrs	r2, r1
 8003b4a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d01a      	beq.n	8003b8e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	430a      	orrs	r2, r1
 8003b6c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b72:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003b76:	d10a      	bne.n	8003b8e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	430a      	orrs	r2, r1
 8003b8c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d00a      	beq.n	8003bb0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	430a      	orrs	r2, r1
 8003bae:	605a      	str	r2, [r3, #4]
  }
}
 8003bb0:	bf00      	nop
 8003bb2:	370c      	adds	r7, #12
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bba:	4770      	bx	lr

08003bbc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b098      	sub	sp, #96	@ 0x60
 8003bc0:	af02      	add	r7, sp, #8
 8003bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003bcc:	f7fc ff5c 	bl	8000a88 <HAL_GetTick>
 8003bd0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 0308 	and.w	r3, r3, #8
 8003bdc:	2b08      	cmp	r3, #8
 8003bde:	d12e      	bne.n	8003c3e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003be0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003be4:	9300      	str	r3, [sp, #0]
 8003be6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003be8:	2200      	movs	r2, #0
 8003bea:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	f000 f88c 	bl	8003d0c <UART_WaitOnFlagUntilTimeout>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d021      	beq.n	8003c3e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c02:	e853 3f00 	ldrex	r3, [r3]
 8003c06:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003c08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c0a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003c0e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	461a      	mov	r2, r3
 8003c16:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003c18:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c1a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c1c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003c1e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003c20:	e841 2300 	strex	r3, r2, [r1]
 8003c24:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003c26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d1e6      	bne.n	8003bfa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2220      	movs	r2, #32
 8003c30:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c3a:	2303      	movs	r3, #3
 8003c3c:	e062      	b.n	8003d04 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 0304 	and.w	r3, r3, #4
 8003c48:	2b04      	cmp	r3, #4
 8003c4a:	d149      	bne.n	8003ce0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c4c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003c50:	9300      	str	r3, [sp, #0]
 8003c52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c54:	2200      	movs	r2, #0
 8003c56:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f000 f856 	bl	8003d0c <UART_WaitOnFlagUntilTimeout>
 8003c60:	4603      	mov	r3, r0
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d03c      	beq.n	8003ce0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c6e:	e853 3f00 	ldrex	r3, [r3]
 8003c72:	623b      	str	r3, [r7, #32]
   return(result);
 8003c74:	6a3b      	ldr	r3, [r7, #32]
 8003c76:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003c7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	461a      	mov	r2, r3
 8003c82:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c84:	633b      	str	r3, [r7, #48]	@ 0x30
 8003c86:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c88:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003c8a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c8c:	e841 2300 	strex	r3, r2, [r1]
 8003c90:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003c92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d1e6      	bne.n	8003c66 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	3308      	adds	r3, #8
 8003c9e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	e853 3f00 	ldrex	r3, [r3]
 8003ca6:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	f023 0301 	bic.w	r3, r3, #1
 8003cae:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	3308      	adds	r3, #8
 8003cb6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003cb8:	61fa      	str	r2, [r7, #28]
 8003cba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cbc:	69b9      	ldr	r1, [r7, #24]
 8003cbe:	69fa      	ldr	r2, [r7, #28]
 8003cc0:	e841 2300 	strex	r3, r2, [r1]
 8003cc4:	617b      	str	r3, [r7, #20]
   return(result);
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d1e5      	bne.n	8003c98 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2220      	movs	r2, #32
 8003cd0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003cdc:	2303      	movs	r3, #3
 8003cde:	e011      	b.n	8003d04 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2220      	movs	r2, #32
 8003ce4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2220      	movs	r2, #32
 8003cea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003d02:	2300      	movs	r3, #0
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	3758      	adds	r7, #88	@ 0x58
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}

08003d0c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b084      	sub	sp, #16
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	60f8      	str	r0, [r7, #12]
 8003d14:	60b9      	str	r1, [r7, #8]
 8003d16:	603b      	str	r3, [r7, #0]
 8003d18:	4613      	mov	r3, r2
 8003d1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d1c:	e04f      	b.n	8003dbe <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d1e:	69bb      	ldr	r3, [r7, #24]
 8003d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d24:	d04b      	beq.n	8003dbe <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d26:	f7fc feaf 	bl	8000a88 <HAL_GetTick>
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	1ad3      	subs	r3, r2, r3
 8003d30:	69ba      	ldr	r2, [r7, #24]
 8003d32:	429a      	cmp	r2, r3
 8003d34:	d302      	bcc.n	8003d3c <UART_WaitOnFlagUntilTimeout+0x30>
 8003d36:	69bb      	ldr	r3, [r7, #24]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d101      	bne.n	8003d40 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003d3c:	2303      	movs	r3, #3
 8003d3e:	e04e      	b.n	8003dde <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 0304 	and.w	r3, r3, #4
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d037      	beq.n	8003dbe <UART_WaitOnFlagUntilTimeout+0xb2>
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	2b80      	cmp	r3, #128	@ 0x80
 8003d52:	d034      	beq.n	8003dbe <UART_WaitOnFlagUntilTimeout+0xb2>
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	2b40      	cmp	r3, #64	@ 0x40
 8003d58:	d031      	beq.n	8003dbe <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	69db      	ldr	r3, [r3, #28]
 8003d60:	f003 0308 	and.w	r3, r3, #8
 8003d64:	2b08      	cmp	r3, #8
 8003d66:	d110      	bne.n	8003d8a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	2208      	movs	r2, #8
 8003d6e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003d70:	68f8      	ldr	r0, [r7, #12]
 8003d72:	f000 f838 	bl	8003de6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2208      	movs	r2, #8
 8003d7a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2200      	movs	r2, #0
 8003d82:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	e029      	b.n	8003dde <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	69db      	ldr	r3, [r3, #28]
 8003d90:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d94:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d98:	d111      	bne.n	8003dbe <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003da2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003da4:	68f8      	ldr	r0, [r7, #12]
 8003da6:	f000 f81e 	bl	8003de6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2220      	movs	r2, #32
 8003dae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2200      	movs	r2, #0
 8003db6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003dba:	2303      	movs	r3, #3
 8003dbc:	e00f      	b.n	8003dde <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	69da      	ldr	r2, [r3, #28]
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	4013      	ands	r3, r2
 8003dc8:	68ba      	ldr	r2, [r7, #8]
 8003dca:	429a      	cmp	r2, r3
 8003dcc:	bf0c      	ite	eq
 8003dce:	2301      	moveq	r3, #1
 8003dd0:	2300      	movne	r3, #0
 8003dd2:	b2db      	uxtb	r3, r3
 8003dd4:	461a      	mov	r2, r3
 8003dd6:	79fb      	ldrb	r3, [r7, #7]
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d0a0      	beq.n	8003d1e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ddc:	2300      	movs	r3, #0
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	3710      	adds	r7, #16
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}

08003de6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003de6:	b480      	push	{r7}
 8003de8:	b095      	sub	sp, #84	@ 0x54
 8003dea:	af00      	add	r7, sp, #0
 8003dec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003df4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003df6:	e853 3f00 	ldrex	r3, [r3]
 8003dfa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003dfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dfe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003e02:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	461a      	mov	r2, r3
 8003e0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003e0c:	643b      	str	r3, [r7, #64]	@ 0x40
 8003e0e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e10:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003e12:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003e14:	e841 2300 	strex	r3, r2, [r1]
 8003e18:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003e1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d1e6      	bne.n	8003dee <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	3308      	adds	r3, #8
 8003e26:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e28:	6a3b      	ldr	r3, [r7, #32]
 8003e2a:	e853 3f00 	ldrex	r3, [r3]
 8003e2e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e30:	69fb      	ldr	r3, [r7, #28]
 8003e32:	f023 0301 	bic.w	r3, r3, #1
 8003e36:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	3308      	adds	r3, #8
 8003e3e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003e40:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003e42:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e44:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003e46:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003e48:	e841 2300 	strex	r3, r2, [r1]
 8003e4c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d1e5      	bne.n	8003e20 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d118      	bne.n	8003e8e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	e853 3f00 	ldrex	r3, [r3]
 8003e68:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	f023 0310 	bic.w	r3, r3, #16
 8003e70:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	461a      	mov	r2, r3
 8003e78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e7a:	61bb      	str	r3, [r7, #24]
 8003e7c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e7e:	6979      	ldr	r1, [r7, #20]
 8003e80:	69ba      	ldr	r2, [r7, #24]
 8003e82:	e841 2300 	strex	r3, r2, [r1]
 8003e86:	613b      	str	r3, [r7, #16]
   return(result);
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d1e6      	bne.n	8003e5c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2220      	movs	r2, #32
 8003e92:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003ea2:	bf00      	nop
 8003ea4:	3754      	adds	r7, #84	@ 0x54
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr

08003eae <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003eae:	b480      	push	{r7}
 8003eb0:	b085      	sub	sp, #20
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003ebc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003ec0:	2b84      	cmp	r3, #132	@ 0x84
 8003ec2:	d005      	beq.n	8003ed0 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003ec4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	4413      	add	r3, r2
 8003ecc:	3303      	adds	r3, #3
 8003ece:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3714      	adds	r7, #20
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003edc:	4770      	bx	lr

08003ede <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003ede:	b580      	push	{r7, lr}
 8003ee0:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003ee2:	f000 fadb 	bl	800449c <vTaskStartScheduler>
  
  return osOK;
 8003ee6:	2300      	movs	r3, #0
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	bd80      	pop	{r7, pc}

08003eec <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003eec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003eee:	b089      	sub	sp, #36	@ 0x24
 8003ef0:	af04      	add	r7, sp, #16
 8003ef2:	6078      	str	r0, [r7, #4]
 8003ef4:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	695b      	ldr	r3, [r3, #20]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d020      	beq.n	8003f40 <osThreadCreate+0x54>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	699b      	ldr	r3, [r3, #24]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d01c      	beq.n	8003f40 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	685c      	ldr	r4, [r3, #4]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	691e      	ldr	r6, [r3, #16]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f7ff ffc8 	bl	8003eae <makeFreeRtosPriority>
 8003f1e:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	695b      	ldr	r3, [r3, #20]
 8003f24:	687a      	ldr	r2, [r7, #4]
 8003f26:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003f28:	9202      	str	r2, [sp, #8]
 8003f2a:	9301      	str	r3, [sp, #4]
 8003f2c:	9100      	str	r1, [sp, #0]
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	4632      	mov	r2, r6
 8003f32:	4629      	mov	r1, r5
 8003f34:	4620      	mov	r0, r4
 8003f36:	f000 f8ed 	bl	8004114 <xTaskCreateStatic>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	60fb      	str	r3, [r7, #12]
 8003f3e:	e01c      	b.n	8003f7a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	685c      	ldr	r4, [r3, #4]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003f4c:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003f54:	4618      	mov	r0, r3
 8003f56:	f7ff ffaa 	bl	8003eae <makeFreeRtosPriority>
 8003f5a:	4602      	mov	r2, r0
 8003f5c:	f107 030c 	add.w	r3, r7, #12
 8003f60:	9301      	str	r3, [sp, #4]
 8003f62:	9200      	str	r2, [sp, #0]
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	4632      	mov	r2, r6
 8003f68:	4629      	mov	r1, r5
 8003f6a:	4620      	mov	r0, r4
 8003f6c:	f000 f931 	bl	80041d2 <xTaskCreate>
 8003f70:	4603      	mov	r3, r0
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	d001      	beq.n	8003f7a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003f76:	2300      	movs	r3, #0
 8003f78:	e000      	b.n	8003f7c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	3714      	adds	r7, #20
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003f84 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b084      	sub	sp, #16
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d001      	beq.n	8003f9a <osDelay+0x16>
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	e000      	b.n	8003f9c <osDelay+0x18>
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f000 fa47 	bl	8004430 <vTaskDelay>
  
  return osOK;
 8003fa2:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3710      	adds	r7, #16
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}

08003fac <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003fac:	b480      	push	{r7}
 8003fae:	b083      	sub	sp, #12
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	f103 0208 	add.w	r2, r3, #8
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	f04f 32ff 	mov.w	r2, #4294967295
 8003fc4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	f103 0208 	add.w	r2, r3, #8
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	f103 0208 	add.w	r2, r3, #8
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003fe0:	bf00      	nop
 8003fe2:	370c      	adds	r7, #12
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr

08003fec <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003fec:	b480      	push	{r7}
 8003fee:	b083      	sub	sp, #12
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003ffa:	bf00      	nop
 8003ffc:	370c      	adds	r7, #12
 8003ffe:	46bd      	mov	sp, r7
 8004000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004004:	4770      	bx	lr

08004006 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004006:	b480      	push	{r7}
 8004008:	b085      	sub	sp, #20
 800400a:	af00      	add	r7, sp, #0
 800400c:	6078      	str	r0, [r7, #4]
 800400e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	68fa      	ldr	r2, [r7, #12]
 800401a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	689a      	ldr	r2, [r3, #8]
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	683a      	ldr	r2, [r7, #0]
 800402a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	683a      	ldr	r2, [r7, #0]
 8004030:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	1c5a      	adds	r2, r3, #1
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	601a      	str	r2, [r3, #0]
}
 8004042:	bf00      	nop
 8004044:	3714      	adds	r7, #20
 8004046:	46bd      	mov	sp, r7
 8004048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404c:	4770      	bx	lr

0800404e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800404e:	b480      	push	{r7}
 8004050:	b085      	sub	sp, #20
 8004052:	af00      	add	r7, sp, #0
 8004054:	6078      	str	r0, [r7, #4]
 8004056:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004064:	d103      	bne.n	800406e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	691b      	ldr	r3, [r3, #16]
 800406a:	60fb      	str	r3, [r7, #12]
 800406c:	e00c      	b.n	8004088 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	3308      	adds	r3, #8
 8004072:	60fb      	str	r3, [r7, #12]
 8004074:	e002      	b.n	800407c <vListInsert+0x2e>
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	60fb      	str	r3, [r7, #12]
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	68ba      	ldr	r2, [r7, #8]
 8004084:	429a      	cmp	r2, r3
 8004086:	d2f6      	bcs.n	8004076 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	685a      	ldr	r2, [r3, #4]
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	683a      	ldr	r2, [r7, #0]
 8004096:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	68fa      	ldr	r2, [r7, #12]
 800409c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	683a      	ldr	r2, [r7, #0]
 80040a2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	687a      	ldr	r2, [r7, #4]
 80040a8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	1c5a      	adds	r2, r3, #1
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	601a      	str	r2, [r3, #0]
}
 80040b4:	bf00      	nop
 80040b6:	3714      	adds	r7, #20
 80040b8:	46bd      	mov	sp, r7
 80040ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040be:	4770      	bx	lr

080040c0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80040c0:	b480      	push	{r7}
 80040c2:	b085      	sub	sp, #20
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	691b      	ldr	r3, [r3, #16]
 80040cc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	687a      	ldr	r2, [r7, #4]
 80040d4:	6892      	ldr	r2, [r2, #8]
 80040d6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	687a      	ldr	r2, [r7, #4]
 80040de:	6852      	ldr	r2, [r2, #4]
 80040e0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	687a      	ldr	r2, [r7, #4]
 80040e8:	429a      	cmp	r2, r3
 80040ea:	d103      	bne.n	80040f4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	689a      	ldr	r2, [r3, #8]
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2200      	movs	r2, #0
 80040f8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	1e5a      	subs	r2, r3, #1
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
}
 8004108:	4618      	mov	r0, r3
 800410a:	3714      	adds	r7, #20
 800410c:	46bd      	mov	sp, r7
 800410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004112:	4770      	bx	lr

08004114 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004114:	b580      	push	{r7, lr}
 8004116:	b08e      	sub	sp, #56	@ 0x38
 8004118:	af04      	add	r7, sp, #16
 800411a:	60f8      	str	r0, [r7, #12]
 800411c:	60b9      	str	r1, [r7, #8]
 800411e:	607a      	str	r2, [r7, #4]
 8004120:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004122:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004124:	2b00      	cmp	r3, #0
 8004126:	d10b      	bne.n	8004140 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004128:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800412c:	f383 8811 	msr	BASEPRI, r3
 8004130:	f3bf 8f6f 	isb	sy
 8004134:	f3bf 8f4f 	dsb	sy
 8004138:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800413a:	bf00      	nop
 800413c:	bf00      	nop
 800413e:	e7fd      	b.n	800413c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004140:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004142:	2b00      	cmp	r3, #0
 8004144:	d10b      	bne.n	800415e <xTaskCreateStatic+0x4a>
	__asm volatile
 8004146:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800414a:	f383 8811 	msr	BASEPRI, r3
 800414e:	f3bf 8f6f 	isb	sy
 8004152:	f3bf 8f4f 	dsb	sy
 8004156:	61fb      	str	r3, [r7, #28]
}
 8004158:	bf00      	nop
 800415a:	bf00      	nop
 800415c:	e7fd      	b.n	800415a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800415e:	2354      	movs	r3, #84	@ 0x54
 8004160:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	2b54      	cmp	r3, #84	@ 0x54
 8004166:	d00b      	beq.n	8004180 <xTaskCreateStatic+0x6c>
	__asm volatile
 8004168:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800416c:	f383 8811 	msr	BASEPRI, r3
 8004170:	f3bf 8f6f 	isb	sy
 8004174:	f3bf 8f4f 	dsb	sy
 8004178:	61bb      	str	r3, [r7, #24]
}
 800417a:	bf00      	nop
 800417c:	bf00      	nop
 800417e:	e7fd      	b.n	800417c <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004180:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004182:	2b00      	cmp	r3, #0
 8004184:	d01e      	beq.n	80041c4 <xTaskCreateStatic+0xb0>
 8004186:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004188:	2b00      	cmp	r3, #0
 800418a:	d01b      	beq.n	80041c4 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800418c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800418e:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004192:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004194:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004198:	2202      	movs	r2, #2
 800419a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800419e:	2300      	movs	r3, #0
 80041a0:	9303      	str	r3, [sp, #12]
 80041a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041a4:	9302      	str	r3, [sp, #8]
 80041a6:	f107 0314 	add.w	r3, r7, #20
 80041aa:	9301      	str	r3, [sp, #4]
 80041ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041ae:	9300      	str	r3, [sp, #0]
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	687a      	ldr	r2, [r7, #4]
 80041b4:	68b9      	ldr	r1, [r7, #8]
 80041b6:	68f8      	ldr	r0, [r7, #12]
 80041b8:	f000 f850 	bl	800425c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80041bc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80041be:	f000 f8cd 	bl	800435c <prvAddNewTaskToReadyList>
 80041c2:	e001      	b.n	80041c8 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 80041c4:	2300      	movs	r3, #0
 80041c6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80041c8:	697b      	ldr	r3, [r7, #20]
	}
 80041ca:	4618      	mov	r0, r3
 80041cc:	3728      	adds	r7, #40	@ 0x28
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}

080041d2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80041d2:	b580      	push	{r7, lr}
 80041d4:	b08c      	sub	sp, #48	@ 0x30
 80041d6:	af04      	add	r7, sp, #16
 80041d8:	60f8      	str	r0, [r7, #12]
 80041da:	60b9      	str	r1, [r7, #8]
 80041dc:	603b      	str	r3, [r7, #0]
 80041de:	4613      	mov	r3, r2
 80041e0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041e2:	88fb      	ldrh	r3, [r7, #6]
 80041e4:	009b      	lsls	r3, r3, #2
 80041e6:	4618      	mov	r0, r3
 80041e8:	f000 fed6 	bl	8004f98 <pvPortMalloc>
 80041ec:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d00e      	beq.n	8004212 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80041f4:	2054      	movs	r0, #84	@ 0x54
 80041f6:	f000 fecf 	bl	8004f98 <pvPortMalloc>
 80041fa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80041fc:	69fb      	ldr	r3, [r7, #28]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d003      	beq.n	800420a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004202:	69fb      	ldr	r3, [r7, #28]
 8004204:	697a      	ldr	r2, [r7, #20]
 8004206:	631a      	str	r2, [r3, #48]	@ 0x30
 8004208:	e005      	b.n	8004216 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800420a:	6978      	ldr	r0, [r7, #20]
 800420c:	f000 ff8c 	bl	8005128 <vPortFree>
 8004210:	e001      	b.n	8004216 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004212:	2300      	movs	r3, #0
 8004214:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004216:	69fb      	ldr	r3, [r7, #28]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d017      	beq.n	800424c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800421c:	69fb      	ldr	r3, [r7, #28]
 800421e:	2200      	movs	r2, #0
 8004220:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004224:	88fa      	ldrh	r2, [r7, #6]
 8004226:	2300      	movs	r3, #0
 8004228:	9303      	str	r3, [sp, #12]
 800422a:	69fb      	ldr	r3, [r7, #28]
 800422c:	9302      	str	r3, [sp, #8]
 800422e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004230:	9301      	str	r3, [sp, #4]
 8004232:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004234:	9300      	str	r3, [sp, #0]
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	68b9      	ldr	r1, [r7, #8]
 800423a:	68f8      	ldr	r0, [r7, #12]
 800423c:	f000 f80e 	bl	800425c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004240:	69f8      	ldr	r0, [r7, #28]
 8004242:	f000 f88b 	bl	800435c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004246:	2301      	movs	r3, #1
 8004248:	61bb      	str	r3, [r7, #24]
 800424a:	e002      	b.n	8004252 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800424c:	f04f 33ff 	mov.w	r3, #4294967295
 8004250:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004252:	69bb      	ldr	r3, [r7, #24]
	}
 8004254:	4618      	mov	r0, r3
 8004256:	3720      	adds	r7, #32
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}

0800425c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b088      	sub	sp, #32
 8004260:	af00      	add	r7, sp, #0
 8004262:	60f8      	str	r0, [r7, #12]
 8004264:	60b9      	str	r1, [r7, #8]
 8004266:	607a      	str	r2, [r7, #4]
 8004268:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800426a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800426c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004274:	3b01      	subs	r3, #1
 8004276:	009b      	lsls	r3, r3, #2
 8004278:	4413      	add	r3, r2
 800427a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800427c:	69bb      	ldr	r3, [r7, #24]
 800427e:	f023 0307 	bic.w	r3, r3, #7
 8004282:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004284:	69bb      	ldr	r3, [r7, #24]
 8004286:	f003 0307 	and.w	r3, r3, #7
 800428a:	2b00      	cmp	r3, #0
 800428c:	d00b      	beq.n	80042a6 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800428e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004292:	f383 8811 	msr	BASEPRI, r3
 8004296:	f3bf 8f6f 	isb	sy
 800429a:	f3bf 8f4f 	dsb	sy
 800429e:	617b      	str	r3, [r7, #20]
}
 80042a0:	bf00      	nop
 80042a2:	bf00      	nop
 80042a4:	e7fd      	b.n	80042a2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80042a6:	2300      	movs	r3, #0
 80042a8:	61fb      	str	r3, [r7, #28]
 80042aa:	e012      	b.n	80042d2 <prvInitialiseNewTask+0x76>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80042ac:	68ba      	ldr	r2, [r7, #8]
 80042ae:	69fb      	ldr	r3, [r7, #28]
 80042b0:	4413      	add	r3, r2
 80042b2:	7819      	ldrb	r1, [r3, #0]
 80042b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80042b6:	69fb      	ldr	r3, [r7, #28]
 80042b8:	4413      	add	r3, r2
 80042ba:	3334      	adds	r3, #52	@ 0x34
 80042bc:	460a      	mov	r2, r1
 80042be:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80042c0:	68ba      	ldr	r2, [r7, #8]
 80042c2:	69fb      	ldr	r3, [r7, #28]
 80042c4:	4413      	add	r3, r2
 80042c6:	781b      	ldrb	r3, [r3, #0]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d006      	beq.n	80042da <prvInitialiseNewTask+0x7e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80042cc:	69fb      	ldr	r3, [r7, #28]
 80042ce:	3301      	adds	r3, #1
 80042d0:	61fb      	str	r3, [r7, #28]
 80042d2:	69fb      	ldr	r3, [r7, #28]
 80042d4:	2b0f      	cmp	r3, #15
 80042d6:	d9e9      	bls.n	80042ac <prvInitialiseNewTask+0x50>
 80042d8:	e000      	b.n	80042dc <prvInitialiseNewTask+0x80>
		{
			break;
 80042da:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80042dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042de:	2200      	movs	r2, #0
 80042e0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80042e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042e6:	2b06      	cmp	r3, #6
 80042e8:	d901      	bls.n	80042ee <prvInitialiseNewTask+0x92>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80042ea:	2306      	movs	r3, #6
 80042ec:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80042ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042f0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80042f2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80042f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042f6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80042f8:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80042fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042fc:	2200      	movs	r2, #0
 80042fe:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004300:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004302:	3304      	adds	r3, #4
 8004304:	4618      	mov	r0, r3
 8004306:	f7ff fe71 	bl	8003fec <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800430a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800430c:	3318      	adds	r3, #24
 800430e:	4618      	mov	r0, r3
 8004310:	f7ff fe6c 	bl	8003fec <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004314:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004316:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004318:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800431a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800431c:	f1c3 0207 	rsb	r2, r3, #7
 8004320:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004322:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004324:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004326:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004328:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800432a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800432c:	2200      	movs	r2, #0
 800432e:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004330:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004332:	2200      	movs	r2, #0
 8004334:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004338:	683a      	ldr	r2, [r7, #0]
 800433a:	68f9      	ldr	r1, [r7, #12]
 800433c:	69b8      	ldr	r0, [r7, #24]
 800433e:	f000 fc17 	bl	8004b70 <pxPortInitialiseStack>
 8004342:	4602      	mov	r2, r0
 8004344:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004346:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004348:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800434a:	2b00      	cmp	r3, #0
 800434c:	d002      	beq.n	8004354 <prvInitialiseNewTask+0xf8>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800434e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004350:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004352:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004354:	bf00      	nop
 8004356:	3720      	adds	r7, #32
 8004358:	46bd      	mov	sp, r7
 800435a:	bd80      	pop	{r7, pc}

0800435c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b082      	sub	sp, #8
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004364:	f000 fd38 	bl	8004dd8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004368:	4b2a      	ldr	r3, [pc, #168]	@ (8004414 <prvAddNewTaskToReadyList+0xb8>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	3301      	adds	r3, #1
 800436e:	4a29      	ldr	r2, [pc, #164]	@ (8004414 <prvAddNewTaskToReadyList+0xb8>)
 8004370:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004372:	4b29      	ldr	r3, [pc, #164]	@ (8004418 <prvAddNewTaskToReadyList+0xbc>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d109      	bne.n	800438e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800437a:	4a27      	ldr	r2, [pc, #156]	@ (8004418 <prvAddNewTaskToReadyList+0xbc>)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004380:	4b24      	ldr	r3, [pc, #144]	@ (8004414 <prvAddNewTaskToReadyList+0xb8>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	2b01      	cmp	r3, #1
 8004386:	d110      	bne.n	80043aa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004388:	f000 fac8 	bl	800491c <prvInitialiseTaskLists>
 800438c:	e00d      	b.n	80043aa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800438e:	4b23      	ldr	r3, [pc, #140]	@ (800441c <prvAddNewTaskToReadyList+0xc0>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d109      	bne.n	80043aa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004396:	4b20      	ldr	r3, [pc, #128]	@ (8004418 <prvAddNewTaskToReadyList+0xbc>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d802      	bhi.n	80043aa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80043a4:	4a1c      	ldr	r2, [pc, #112]	@ (8004418 <prvAddNewTaskToReadyList+0xbc>)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80043aa:	4b1d      	ldr	r3, [pc, #116]	@ (8004420 <prvAddNewTaskToReadyList+0xc4>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	3301      	adds	r3, #1
 80043b0:	4a1b      	ldr	r2, [pc, #108]	@ (8004420 <prvAddNewTaskToReadyList+0xc4>)
 80043b2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043b8:	2201      	movs	r2, #1
 80043ba:	409a      	lsls	r2, r3
 80043bc:	4b19      	ldr	r3, [pc, #100]	@ (8004424 <prvAddNewTaskToReadyList+0xc8>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4313      	orrs	r3, r2
 80043c2:	4a18      	ldr	r2, [pc, #96]	@ (8004424 <prvAddNewTaskToReadyList+0xc8>)
 80043c4:	6013      	str	r3, [r2, #0]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043ca:	4613      	mov	r3, r2
 80043cc:	009b      	lsls	r3, r3, #2
 80043ce:	4413      	add	r3, r2
 80043d0:	009b      	lsls	r3, r3, #2
 80043d2:	4a15      	ldr	r2, [pc, #84]	@ (8004428 <prvAddNewTaskToReadyList+0xcc>)
 80043d4:	441a      	add	r2, r3
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	3304      	adds	r3, #4
 80043da:	4619      	mov	r1, r3
 80043dc:	4610      	mov	r0, r2
 80043de:	f7ff fe12 	bl	8004006 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80043e2:	f000 fd2b 	bl	8004e3c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80043e6:	4b0d      	ldr	r3, [pc, #52]	@ (800441c <prvAddNewTaskToReadyList+0xc0>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d00e      	beq.n	800440c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80043ee:	4b0a      	ldr	r3, [pc, #40]	@ (8004418 <prvAddNewTaskToReadyList+0xbc>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043f8:	429a      	cmp	r2, r3
 80043fa:	d207      	bcs.n	800440c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80043fc:	4b0b      	ldr	r3, [pc, #44]	@ (800442c <prvAddNewTaskToReadyList+0xd0>)
 80043fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004402:	601a      	str	r2, [r3, #0]
 8004404:	f3bf 8f4f 	dsb	sy
 8004408:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800440c:	bf00      	nop
 800440e:	3708      	adds	r7, #8
 8004410:	46bd      	mov	sp, r7
 8004412:	bd80      	pop	{r7, pc}
 8004414:	20000524 	.word	0x20000524
 8004418:	20000424 	.word	0x20000424
 800441c:	20000530 	.word	0x20000530
 8004420:	20000540 	.word	0x20000540
 8004424:	2000052c 	.word	0x2000052c
 8004428:	20000428 	.word	0x20000428
 800442c:	e000ed04 	.word	0xe000ed04

08004430 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004430:	b580      	push	{r7, lr}
 8004432:	b084      	sub	sp, #16
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004438:	2300      	movs	r3, #0
 800443a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d018      	beq.n	8004474 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004442:	4b14      	ldr	r3, [pc, #80]	@ (8004494 <vTaskDelay+0x64>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d00b      	beq.n	8004462 <vTaskDelay+0x32>
	__asm volatile
 800444a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800444e:	f383 8811 	msr	BASEPRI, r3
 8004452:	f3bf 8f6f 	isb	sy
 8004456:	f3bf 8f4f 	dsb	sy
 800445a:	60bb      	str	r3, [r7, #8]
}
 800445c:	bf00      	nop
 800445e:	bf00      	nop
 8004460:	e7fd      	b.n	800445e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004462:	f000 f87d 	bl	8004560 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004466:	2100      	movs	r1, #0
 8004468:	6878      	ldr	r0, [r7, #4]
 800446a:	f000 fb1b 	bl	8004aa4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800446e:	f000 f885 	bl	800457c <xTaskResumeAll>
 8004472:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d107      	bne.n	800448a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800447a:	4b07      	ldr	r3, [pc, #28]	@ (8004498 <vTaskDelay+0x68>)
 800447c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004480:	601a      	str	r2, [r3, #0]
 8004482:	f3bf 8f4f 	dsb	sy
 8004486:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800448a:	bf00      	nop
 800448c:	3710      	adds	r7, #16
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}
 8004492:	bf00      	nop
 8004494:	2000054c 	.word	0x2000054c
 8004498:	e000ed04 	.word	0xe000ed04

0800449c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b08a      	sub	sp, #40	@ 0x28
 80044a0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80044a2:	2300      	movs	r3, #0
 80044a4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80044a6:	2300      	movs	r3, #0
 80044a8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80044aa:	463a      	mov	r2, r7
 80044ac:	1d39      	adds	r1, r7, #4
 80044ae:	f107 0308 	add.w	r3, r7, #8
 80044b2:	4618      	mov	r0, r3
 80044b4:	f7fb fee4 	bl	8000280 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80044b8:	6839      	ldr	r1, [r7, #0]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	68ba      	ldr	r2, [r7, #8]
 80044be:	9202      	str	r2, [sp, #8]
 80044c0:	9301      	str	r3, [sp, #4]
 80044c2:	2300      	movs	r3, #0
 80044c4:	9300      	str	r3, [sp, #0]
 80044c6:	2300      	movs	r3, #0
 80044c8:	460a      	mov	r2, r1
 80044ca:	491f      	ldr	r1, [pc, #124]	@ (8004548 <vTaskStartScheduler+0xac>)
 80044cc:	481f      	ldr	r0, [pc, #124]	@ (800454c <vTaskStartScheduler+0xb0>)
 80044ce:	f7ff fe21 	bl	8004114 <xTaskCreateStatic>
 80044d2:	4603      	mov	r3, r0
 80044d4:	4a1e      	ldr	r2, [pc, #120]	@ (8004550 <vTaskStartScheduler+0xb4>)
 80044d6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80044d8:	4b1d      	ldr	r3, [pc, #116]	@ (8004550 <vTaskStartScheduler+0xb4>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d002      	beq.n	80044e6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80044e0:	2301      	movs	r3, #1
 80044e2:	617b      	str	r3, [r7, #20]
 80044e4:	e001      	b.n	80044ea <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80044e6:	2300      	movs	r3, #0
 80044e8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	2b01      	cmp	r3, #1
 80044ee:	d116      	bne.n	800451e <vTaskStartScheduler+0x82>
	__asm volatile
 80044f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044f4:	f383 8811 	msr	BASEPRI, r3
 80044f8:	f3bf 8f6f 	isb	sy
 80044fc:	f3bf 8f4f 	dsb	sy
 8004500:	613b      	str	r3, [r7, #16]
}
 8004502:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004504:	4b13      	ldr	r3, [pc, #76]	@ (8004554 <vTaskStartScheduler+0xb8>)
 8004506:	f04f 32ff 	mov.w	r2, #4294967295
 800450a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800450c:	4b12      	ldr	r3, [pc, #72]	@ (8004558 <vTaskStartScheduler+0xbc>)
 800450e:	2201      	movs	r2, #1
 8004510:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004512:	4b12      	ldr	r3, [pc, #72]	@ (800455c <vTaskStartScheduler+0xc0>)
 8004514:	2200      	movs	r2, #0
 8004516:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004518:	f000 fbba 	bl	8004c90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800451c:	e00f      	b.n	800453e <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004524:	d10b      	bne.n	800453e <vTaskStartScheduler+0xa2>
	__asm volatile
 8004526:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800452a:	f383 8811 	msr	BASEPRI, r3
 800452e:	f3bf 8f6f 	isb	sy
 8004532:	f3bf 8f4f 	dsb	sy
 8004536:	60fb      	str	r3, [r7, #12]
}
 8004538:	bf00      	nop
 800453a:	bf00      	nop
 800453c:	e7fd      	b.n	800453a <vTaskStartScheduler+0x9e>
}
 800453e:	bf00      	nop
 8004540:	3718      	adds	r7, #24
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}
 8004546:	bf00      	nop
 8004548:	08005ce8 	.word	0x08005ce8
 800454c:	080048ed 	.word	0x080048ed
 8004550:	20000548 	.word	0x20000548
 8004554:	20000544 	.word	0x20000544
 8004558:	20000530 	.word	0x20000530
 800455c:	20000528 	.word	0x20000528

08004560 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004560:	b480      	push	{r7}
 8004562:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004564:	4b04      	ldr	r3, [pc, #16]	@ (8004578 <vTaskSuspendAll+0x18>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	3301      	adds	r3, #1
 800456a:	4a03      	ldr	r2, [pc, #12]	@ (8004578 <vTaskSuspendAll+0x18>)
 800456c:	6013      	str	r3, [r2, #0]
}
 800456e:	bf00      	nop
 8004570:	46bd      	mov	sp, r7
 8004572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004576:	4770      	bx	lr
 8004578:	2000054c 	.word	0x2000054c

0800457c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b084      	sub	sp, #16
 8004580:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004582:	2300      	movs	r3, #0
 8004584:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004586:	2300      	movs	r3, #0
 8004588:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800458a:	4b42      	ldr	r3, [pc, #264]	@ (8004694 <xTaskResumeAll+0x118>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d10b      	bne.n	80045aa <xTaskResumeAll+0x2e>
	__asm volatile
 8004592:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004596:	f383 8811 	msr	BASEPRI, r3
 800459a:	f3bf 8f6f 	isb	sy
 800459e:	f3bf 8f4f 	dsb	sy
 80045a2:	603b      	str	r3, [r7, #0]
}
 80045a4:	bf00      	nop
 80045a6:	bf00      	nop
 80045a8:	e7fd      	b.n	80045a6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80045aa:	f000 fc15 	bl	8004dd8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80045ae:	4b39      	ldr	r3, [pc, #228]	@ (8004694 <xTaskResumeAll+0x118>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	3b01      	subs	r3, #1
 80045b4:	4a37      	ldr	r2, [pc, #220]	@ (8004694 <xTaskResumeAll+0x118>)
 80045b6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80045b8:	4b36      	ldr	r3, [pc, #216]	@ (8004694 <xTaskResumeAll+0x118>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d161      	bne.n	8004684 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80045c0:	4b35      	ldr	r3, [pc, #212]	@ (8004698 <xTaskResumeAll+0x11c>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d05d      	beq.n	8004684 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80045c8:	e02e      	b.n	8004628 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80045ca:	4b34      	ldr	r3, [pc, #208]	@ (800469c <xTaskResumeAll+0x120>)
 80045cc:	68db      	ldr	r3, [r3, #12]
 80045ce:	68db      	ldr	r3, [r3, #12]
 80045d0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	3318      	adds	r3, #24
 80045d6:	4618      	mov	r0, r3
 80045d8:	f7ff fd72 	bl	80040c0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	3304      	adds	r3, #4
 80045e0:	4618      	mov	r0, r3
 80045e2:	f7ff fd6d 	bl	80040c0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045ea:	2201      	movs	r2, #1
 80045ec:	409a      	lsls	r2, r3
 80045ee:	4b2c      	ldr	r3, [pc, #176]	@ (80046a0 <xTaskResumeAll+0x124>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4313      	orrs	r3, r2
 80045f4:	4a2a      	ldr	r2, [pc, #168]	@ (80046a0 <xTaskResumeAll+0x124>)
 80045f6:	6013      	str	r3, [r2, #0]
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045fc:	4613      	mov	r3, r2
 80045fe:	009b      	lsls	r3, r3, #2
 8004600:	4413      	add	r3, r2
 8004602:	009b      	lsls	r3, r3, #2
 8004604:	4a27      	ldr	r2, [pc, #156]	@ (80046a4 <xTaskResumeAll+0x128>)
 8004606:	441a      	add	r2, r3
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	3304      	adds	r3, #4
 800460c:	4619      	mov	r1, r3
 800460e:	4610      	mov	r0, r2
 8004610:	f7ff fcf9 	bl	8004006 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004618:	4b23      	ldr	r3, [pc, #140]	@ (80046a8 <xTaskResumeAll+0x12c>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800461e:	429a      	cmp	r2, r3
 8004620:	d302      	bcc.n	8004628 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004622:	4b22      	ldr	r3, [pc, #136]	@ (80046ac <xTaskResumeAll+0x130>)
 8004624:	2201      	movs	r2, #1
 8004626:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004628:	4b1c      	ldr	r3, [pc, #112]	@ (800469c <xTaskResumeAll+0x120>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d1cc      	bne.n	80045ca <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d001      	beq.n	800463a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004636:	f000 fa0f 	bl	8004a58 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800463a:	4b1d      	ldr	r3, [pc, #116]	@ (80046b0 <xTaskResumeAll+0x134>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d010      	beq.n	8004668 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004646:	f000 f837 	bl	80046b8 <xTaskIncrementTick>
 800464a:	4603      	mov	r3, r0
 800464c:	2b00      	cmp	r3, #0
 800464e:	d002      	beq.n	8004656 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004650:	4b16      	ldr	r3, [pc, #88]	@ (80046ac <xTaskResumeAll+0x130>)
 8004652:	2201      	movs	r2, #1
 8004654:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	3b01      	subs	r3, #1
 800465a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d1f1      	bne.n	8004646 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8004662:	4b13      	ldr	r3, [pc, #76]	@ (80046b0 <xTaskResumeAll+0x134>)
 8004664:	2200      	movs	r2, #0
 8004666:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004668:	4b10      	ldr	r3, [pc, #64]	@ (80046ac <xTaskResumeAll+0x130>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d009      	beq.n	8004684 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004670:	2301      	movs	r3, #1
 8004672:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004674:	4b0f      	ldr	r3, [pc, #60]	@ (80046b4 <xTaskResumeAll+0x138>)
 8004676:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800467a:	601a      	str	r2, [r3, #0]
 800467c:	f3bf 8f4f 	dsb	sy
 8004680:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004684:	f000 fbda 	bl	8004e3c <vPortExitCritical>

	return xAlreadyYielded;
 8004688:	68bb      	ldr	r3, [r7, #8]
}
 800468a:	4618      	mov	r0, r3
 800468c:	3710      	adds	r7, #16
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}
 8004692:	bf00      	nop
 8004694:	2000054c 	.word	0x2000054c
 8004698:	20000524 	.word	0x20000524
 800469c:	200004e4 	.word	0x200004e4
 80046a0:	2000052c 	.word	0x2000052c
 80046a4:	20000428 	.word	0x20000428
 80046a8:	20000424 	.word	0x20000424
 80046ac:	20000538 	.word	0x20000538
 80046b0:	20000534 	.word	0x20000534
 80046b4:	e000ed04 	.word	0xe000ed04

080046b8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b086      	sub	sp, #24
 80046bc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80046be:	2300      	movs	r3, #0
 80046c0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80046c2:	4b51      	ldr	r3, [pc, #324]	@ (8004808 <xTaskIncrementTick+0x150>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	f040 808e 	bne.w	80047e8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80046cc:	4b4f      	ldr	r3, [pc, #316]	@ (800480c <xTaskIncrementTick+0x154>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	3301      	adds	r3, #1
 80046d2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80046d4:	4a4d      	ldr	r2, [pc, #308]	@ (800480c <xTaskIncrementTick+0x154>)
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d121      	bne.n	8004724 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80046e0:	4b4b      	ldr	r3, [pc, #300]	@ (8004810 <xTaskIncrementTick+0x158>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d00b      	beq.n	8004702 <xTaskIncrementTick+0x4a>
	__asm volatile
 80046ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046ee:	f383 8811 	msr	BASEPRI, r3
 80046f2:	f3bf 8f6f 	isb	sy
 80046f6:	f3bf 8f4f 	dsb	sy
 80046fa:	603b      	str	r3, [r7, #0]
}
 80046fc:	bf00      	nop
 80046fe:	bf00      	nop
 8004700:	e7fd      	b.n	80046fe <xTaskIncrementTick+0x46>
 8004702:	4b43      	ldr	r3, [pc, #268]	@ (8004810 <xTaskIncrementTick+0x158>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	60fb      	str	r3, [r7, #12]
 8004708:	4b42      	ldr	r3, [pc, #264]	@ (8004814 <xTaskIncrementTick+0x15c>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a40      	ldr	r2, [pc, #256]	@ (8004810 <xTaskIncrementTick+0x158>)
 800470e:	6013      	str	r3, [r2, #0]
 8004710:	4a40      	ldr	r2, [pc, #256]	@ (8004814 <xTaskIncrementTick+0x15c>)
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	6013      	str	r3, [r2, #0]
 8004716:	4b40      	ldr	r3, [pc, #256]	@ (8004818 <xTaskIncrementTick+0x160>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	3301      	adds	r3, #1
 800471c:	4a3e      	ldr	r2, [pc, #248]	@ (8004818 <xTaskIncrementTick+0x160>)
 800471e:	6013      	str	r3, [r2, #0]
 8004720:	f000 f99a 	bl	8004a58 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004724:	4b3d      	ldr	r3, [pc, #244]	@ (800481c <xTaskIncrementTick+0x164>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	693a      	ldr	r2, [r7, #16]
 800472a:	429a      	cmp	r2, r3
 800472c:	d34d      	bcc.n	80047ca <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800472e:	4b38      	ldr	r3, [pc, #224]	@ (8004810 <xTaskIncrementTick+0x158>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d101      	bne.n	800473c <xTaskIncrementTick+0x84>
 8004738:	2301      	movs	r3, #1
 800473a:	e000      	b.n	800473e <xTaskIncrementTick+0x86>
 800473c:	2300      	movs	r3, #0
 800473e:	2b00      	cmp	r3, #0
 8004740:	d004      	beq.n	800474c <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004742:	4b36      	ldr	r3, [pc, #216]	@ (800481c <xTaskIncrementTick+0x164>)
 8004744:	f04f 32ff 	mov.w	r2, #4294967295
 8004748:	601a      	str	r2, [r3, #0]
					break;
 800474a:	e03e      	b.n	80047ca <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800474c:	4b30      	ldr	r3, [pc, #192]	@ (8004810 <xTaskIncrementTick+0x158>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	68db      	ldr	r3, [r3, #12]
 8004752:	68db      	ldr	r3, [r3, #12]
 8004754:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800475c:	693a      	ldr	r2, [r7, #16]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	429a      	cmp	r2, r3
 8004762:	d203      	bcs.n	800476c <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004764:	4a2d      	ldr	r2, [pc, #180]	@ (800481c <xTaskIncrementTick+0x164>)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6013      	str	r3, [r2, #0]
						break;
 800476a:	e02e      	b.n	80047ca <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	3304      	adds	r3, #4
 8004770:	4618      	mov	r0, r3
 8004772:	f7ff fca5 	bl	80040c0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800477a:	2b00      	cmp	r3, #0
 800477c:	d004      	beq.n	8004788 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	3318      	adds	r3, #24
 8004782:	4618      	mov	r0, r3
 8004784:	f7ff fc9c 	bl	80040c0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800478c:	2201      	movs	r2, #1
 800478e:	409a      	lsls	r2, r3
 8004790:	4b23      	ldr	r3, [pc, #140]	@ (8004820 <xTaskIncrementTick+0x168>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4313      	orrs	r3, r2
 8004796:	4a22      	ldr	r2, [pc, #136]	@ (8004820 <xTaskIncrementTick+0x168>)
 8004798:	6013      	str	r3, [r2, #0]
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800479e:	4613      	mov	r3, r2
 80047a0:	009b      	lsls	r3, r3, #2
 80047a2:	4413      	add	r3, r2
 80047a4:	009b      	lsls	r3, r3, #2
 80047a6:	4a1f      	ldr	r2, [pc, #124]	@ (8004824 <xTaskIncrementTick+0x16c>)
 80047a8:	441a      	add	r2, r3
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	3304      	adds	r3, #4
 80047ae:	4619      	mov	r1, r3
 80047b0:	4610      	mov	r0, r2
 80047b2:	f7ff fc28 	bl	8004006 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047ba:	4b1b      	ldr	r3, [pc, #108]	@ (8004828 <xTaskIncrementTick+0x170>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047c0:	429a      	cmp	r2, r3
 80047c2:	d3b4      	bcc.n	800472e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80047c4:	2301      	movs	r3, #1
 80047c6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80047c8:	e7b1      	b.n	800472e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80047ca:	4b17      	ldr	r3, [pc, #92]	@ (8004828 <xTaskIncrementTick+0x170>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047d0:	4914      	ldr	r1, [pc, #80]	@ (8004824 <xTaskIncrementTick+0x16c>)
 80047d2:	4613      	mov	r3, r2
 80047d4:	009b      	lsls	r3, r3, #2
 80047d6:	4413      	add	r3, r2
 80047d8:	009b      	lsls	r3, r3, #2
 80047da:	440b      	add	r3, r1
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	2b01      	cmp	r3, #1
 80047e0:	d907      	bls.n	80047f2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80047e2:	2301      	movs	r3, #1
 80047e4:	617b      	str	r3, [r7, #20]
 80047e6:	e004      	b.n	80047f2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80047e8:	4b10      	ldr	r3, [pc, #64]	@ (800482c <xTaskIncrementTick+0x174>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	3301      	adds	r3, #1
 80047ee:	4a0f      	ldr	r2, [pc, #60]	@ (800482c <xTaskIncrementTick+0x174>)
 80047f0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80047f2:	4b0f      	ldr	r3, [pc, #60]	@ (8004830 <xTaskIncrementTick+0x178>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d001      	beq.n	80047fe <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 80047fa:	2301      	movs	r3, #1
 80047fc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80047fe:	697b      	ldr	r3, [r7, #20]
}
 8004800:	4618      	mov	r0, r3
 8004802:	3718      	adds	r7, #24
 8004804:	46bd      	mov	sp, r7
 8004806:	bd80      	pop	{r7, pc}
 8004808:	2000054c 	.word	0x2000054c
 800480c:	20000528 	.word	0x20000528
 8004810:	200004dc 	.word	0x200004dc
 8004814:	200004e0 	.word	0x200004e0
 8004818:	2000053c 	.word	0x2000053c
 800481c:	20000544 	.word	0x20000544
 8004820:	2000052c 	.word	0x2000052c
 8004824:	20000428 	.word	0x20000428
 8004828:	20000424 	.word	0x20000424
 800482c:	20000534 	.word	0x20000534
 8004830:	20000538 	.word	0x20000538

08004834 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004834:	b480      	push	{r7}
 8004836:	b087      	sub	sp, #28
 8004838:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800483a:	4b27      	ldr	r3, [pc, #156]	@ (80048d8 <vTaskSwitchContext+0xa4>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d003      	beq.n	800484a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004842:	4b26      	ldr	r3, [pc, #152]	@ (80048dc <vTaskSwitchContext+0xa8>)
 8004844:	2201      	movs	r2, #1
 8004846:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004848:	e040      	b.n	80048cc <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800484a:	4b24      	ldr	r3, [pc, #144]	@ (80048dc <vTaskSwitchContext+0xa8>)
 800484c:	2200      	movs	r2, #0
 800484e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004850:	4b23      	ldr	r3, [pc, #140]	@ (80048e0 <vTaskSwitchContext+0xac>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	fab3 f383 	clz	r3, r3
 800485c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800485e:	7afb      	ldrb	r3, [r7, #11]
 8004860:	f1c3 031f 	rsb	r3, r3, #31
 8004864:	617b      	str	r3, [r7, #20]
 8004866:	491f      	ldr	r1, [pc, #124]	@ (80048e4 <vTaskSwitchContext+0xb0>)
 8004868:	697a      	ldr	r2, [r7, #20]
 800486a:	4613      	mov	r3, r2
 800486c:	009b      	lsls	r3, r3, #2
 800486e:	4413      	add	r3, r2
 8004870:	009b      	lsls	r3, r3, #2
 8004872:	440b      	add	r3, r1
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d10b      	bne.n	8004892 <vTaskSwitchContext+0x5e>
	__asm volatile
 800487a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800487e:	f383 8811 	msr	BASEPRI, r3
 8004882:	f3bf 8f6f 	isb	sy
 8004886:	f3bf 8f4f 	dsb	sy
 800488a:	607b      	str	r3, [r7, #4]
}
 800488c:	bf00      	nop
 800488e:	bf00      	nop
 8004890:	e7fd      	b.n	800488e <vTaskSwitchContext+0x5a>
 8004892:	697a      	ldr	r2, [r7, #20]
 8004894:	4613      	mov	r3, r2
 8004896:	009b      	lsls	r3, r3, #2
 8004898:	4413      	add	r3, r2
 800489a:	009b      	lsls	r3, r3, #2
 800489c:	4a11      	ldr	r2, [pc, #68]	@ (80048e4 <vTaskSwitchContext+0xb0>)
 800489e:	4413      	add	r3, r2
 80048a0:	613b      	str	r3, [r7, #16]
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	685a      	ldr	r2, [r3, #4]
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	605a      	str	r2, [r3, #4]
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	685a      	ldr	r2, [r3, #4]
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	3308      	adds	r3, #8
 80048b4:	429a      	cmp	r2, r3
 80048b6:	d104      	bne.n	80048c2 <vTaskSwitchContext+0x8e>
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	685a      	ldr	r2, [r3, #4]
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	605a      	str	r2, [r3, #4]
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	68db      	ldr	r3, [r3, #12]
 80048c8:	4a07      	ldr	r2, [pc, #28]	@ (80048e8 <vTaskSwitchContext+0xb4>)
 80048ca:	6013      	str	r3, [r2, #0]
}
 80048cc:	bf00      	nop
 80048ce:	371c      	adds	r7, #28
 80048d0:	46bd      	mov	sp, r7
 80048d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d6:	4770      	bx	lr
 80048d8:	2000054c 	.word	0x2000054c
 80048dc:	20000538 	.word	0x20000538
 80048e0:	2000052c 	.word	0x2000052c
 80048e4:	20000428 	.word	0x20000428
 80048e8:	20000424 	.word	0x20000424

080048ec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b082      	sub	sp, #8
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80048f4:	f000 f852 	bl	800499c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80048f8:	4b06      	ldr	r3, [pc, #24]	@ (8004914 <prvIdleTask+0x28>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	d9f9      	bls.n	80048f4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004900:	4b05      	ldr	r3, [pc, #20]	@ (8004918 <prvIdleTask+0x2c>)
 8004902:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004906:	601a      	str	r2, [r3, #0]
 8004908:	f3bf 8f4f 	dsb	sy
 800490c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004910:	e7f0      	b.n	80048f4 <prvIdleTask+0x8>
 8004912:	bf00      	nop
 8004914:	20000428 	.word	0x20000428
 8004918:	e000ed04 	.word	0xe000ed04

0800491c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b082      	sub	sp, #8
 8004920:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004922:	2300      	movs	r3, #0
 8004924:	607b      	str	r3, [r7, #4]
 8004926:	e00c      	b.n	8004942 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004928:	687a      	ldr	r2, [r7, #4]
 800492a:	4613      	mov	r3, r2
 800492c:	009b      	lsls	r3, r3, #2
 800492e:	4413      	add	r3, r2
 8004930:	009b      	lsls	r3, r3, #2
 8004932:	4a12      	ldr	r2, [pc, #72]	@ (800497c <prvInitialiseTaskLists+0x60>)
 8004934:	4413      	add	r3, r2
 8004936:	4618      	mov	r0, r3
 8004938:	f7ff fb38 	bl	8003fac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	3301      	adds	r3, #1
 8004940:	607b      	str	r3, [r7, #4]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2b06      	cmp	r3, #6
 8004946:	d9ef      	bls.n	8004928 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004948:	480d      	ldr	r0, [pc, #52]	@ (8004980 <prvInitialiseTaskLists+0x64>)
 800494a:	f7ff fb2f 	bl	8003fac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800494e:	480d      	ldr	r0, [pc, #52]	@ (8004984 <prvInitialiseTaskLists+0x68>)
 8004950:	f7ff fb2c 	bl	8003fac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004954:	480c      	ldr	r0, [pc, #48]	@ (8004988 <prvInitialiseTaskLists+0x6c>)
 8004956:	f7ff fb29 	bl	8003fac <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800495a:	480c      	ldr	r0, [pc, #48]	@ (800498c <prvInitialiseTaskLists+0x70>)
 800495c:	f7ff fb26 	bl	8003fac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004960:	480b      	ldr	r0, [pc, #44]	@ (8004990 <prvInitialiseTaskLists+0x74>)
 8004962:	f7ff fb23 	bl	8003fac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004966:	4b0b      	ldr	r3, [pc, #44]	@ (8004994 <prvInitialiseTaskLists+0x78>)
 8004968:	4a05      	ldr	r2, [pc, #20]	@ (8004980 <prvInitialiseTaskLists+0x64>)
 800496a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800496c:	4b0a      	ldr	r3, [pc, #40]	@ (8004998 <prvInitialiseTaskLists+0x7c>)
 800496e:	4a05      	ldr	r2, [pc, #20]	@ (8004984 <prvInitialiseTaskLists+0x68>)
 8004970:	601a      	str	r2, [r3, #0]
}
 8004972:	bf00      	nop
 8004974:	3708      	adds	r7, #8
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}
 800497a:	bf00      	nop
 800497c:	20000428 	.word	0x20000428
 8004980:	200004b4 	.word	0x200004b4
 8004984:	200004c8 	.word	0x200004c8
 8004988:	200004e4 	.word	0x200004e4
 800498c:	200004f8 	.word	0x200004f8
 8004990:	20000510 	.word	0x20000510
 8004994:	200004dc 	.word	0x200004dc
 8004998:	200004e0 	.word	0x200004e0

0800499c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b082      	sub	sp, #8
 80049a0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80049a2:	e019      	b.n	80049d8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80049a4:	f000 fa18 	bl	8004dd8 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80049a8:	4b10      	ldr	r3, [pc, #64]	@ (80049ec <prvCheckTasksWaitingTermination+0x50>)
 80049aa:	68db      	ldr	r3, [r3, #12]
 80049ac:	68db      	ldr	r3, [r3, #12]
 80049ae:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	3304      	adds	r3, #4
 80049b4:	4618      	mov	r0, r3
 80049b6:	f7ff fb83 	bl	80040c0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80049ba:	4b0d      	ldr	r3, [pc, #52]	@ (80049f0 <prvCheckTasksWaitingTermination+0x54>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	3b01      	subs	r3, #1
 80049c0:	4a0b      	ldr	r2, [pc, #44]	@ (80049f0 <prvCheckTasksWaitingTermination+0x54>)
 80049c2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80049c4:	4b0b      	ldr	r3, [pc, #44]	@ (80049f4 <prvCheckTasksWaitingTermination+0x58>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	3b01      	subs	r3, #1
 80049ca:	4a0a      	ldr	r2, [pc, #40]	@ (80049f4 <prvCheckTasksWaitingTermination+0x58>)
 80049cc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80049ce:	f000 fa35 	bl	8004e3c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	f000 f810 	bl	80049f8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80049d8:	4b06      	ldr	r3, [pc, #24]	@ (80049f4 <prvCheckTasksWaitingTermination+0x58>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d1e1      	bne.n	80049a4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80049e0:	bf00      	nop
 80049e2:	bf00      	nop
 80049e4:	3708      	adds	r7, #8
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}
 80049ea:	bf00      	nop
 80049ec:	200004f8 	.word	0x200004f8
 80049f0:	20000524 	.word	0x20000524
 80049f4:	2000050c 	.word	0x2000050c

080049f8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b084      	sub	sp, #16
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d108      	bne.n	8004a1c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f000 fb8a 	bl	8005128 <vPortFree>
				vPortFree( pxTCB );
 8004a14:	6878      	ldr	r0, [r7, #4]
 8004a16:	f000 fb87 	bl	8005128 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004a1a:	e019      	b.n	8004a50 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	d103      	bne.n	8004a2e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f000 fb7e 	bl	8005128 <vPortFree>
	}
 8004a2c:	e010      	b.n	8004a50 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004a34:	2b02      	cmp	r3, #2
 8004a36:	d00b      	beq.n	8004a50 <prvDeleteTCB+0x58>
	__asm volatile
 8004a38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a3c:	f383 8811 	msr	BASEPRI, r3
 8004a40:	f3bf 8f6f 	isb	sy
 8004a44:	f3bf 8f4f 	dsb	sy
 8004a48:	60fb      	str	r3, [r7, #12]
}
 8004a4a:	bf00      	nop
 8004a4c:	bf00      	nop
 8004a4e:	e7fd      	b.n	8004a4c <prvDeleteTCB+0x54>
	}
 8004a50:	bf00      	nop
 8004a52:	3710      	adds	r7, #16
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bd80      	pop	{r7, pc}

08004a58 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b083      	sub	sp, #12
 8004a5c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a5e:	4b0f      	ldr	r3, [pc, #60]	@ (8004a9c <prvResetNextTaskUnblockTime+0x44>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d101      	bne.n	8004a6c <prvResetNextTaskUnblockTime+0x14>
 8004a68:	2301      	movs	r3, #1
 8004a6a:	e000      	b.n	8004a6e <prvResetNextTaskUnblockTime+0x16>
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d004      	beq.n	8004a7c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004a72:	4b0b      	ldr	r3, [pc, #44]	@ (8004aa0 <prvResetNextTaskUnblockTime+0x48>)
 8004a74:	f04f 32ff 	mov.w	r2, #4294967295
 8004a78:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004a7a:	e008      	b.n	8004a8e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004a7c:	4b07      	ldr	r3, [pc, #28]	@ (8004a9c <prvResetNextTaskUnblockTime+0x44>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	68db      	ldr	r3, [r3, #12]
 8004a82:	68db      	ldr	r3, [r3, #12]
 8004a84:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	4a05      	ldr	r2, [pc, #20]	@ (8004aa0 <prvResetNextTaskUnblockTime+0x48>)
 8004a8c:	6013      	str	r3, [r2, #0]
}
 8004a8e:	bf00      	nop
 8004a90:	370c      	adds	r7, #12
 8004a92:	46bd      	mov	sp, r7
 8004a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a98:	4770      	bx	lr
 8004a9a:	bf00      	nop
 8004a9c:	200004dc 	.word	0x200004dc
 8004aa0:	20000544 	.word	0x20000544

08004aa4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b084      	sub	sp, #16
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
 8004aac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004aae:	4b29      	ldr	r3, [pc, #164]	@ (8004b54 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004ab4:	4b28      	ldr	r3, [pc, #160]	@ (8004b58 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	3304      	adds	r3, #4
 8004aba:	4618      	mov	r0, r3
 8004abc:	f7ff fb00 	bl	80040c0 <uxListRemove>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d10b      	bne.n	8004ade <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8004ac6:	4b24      	ldr	r3, [pc, #144]	@ (8004b58 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004acc:	2201      	movs	r2, #1
 8004ace:	fa02 f303 	lsl.w	r3, r2, r3
 8004ad2:	43da      	mvns	r2, r3
 8004ad4:	4b21      	ldr	r3, [pc, #132]	@ (8004b5c <prvAddCurrentTaskToDelayedList+0xb8>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4013      	ands	r3, r2
 8004ada:	4a20      	ldr	r2, [pc, #128]	@ (8004b5c <prvAddCurrentTaskToDelayedList+0xb8>)
 8004adc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ae4:	d10a      	bne.n	8004afc <prvAddCurrentTaskToDelayedList+0x58>
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d007      	beq.n	8004afc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004aec:	4b1a      	ldr	r3, [pc, #104]	@ (8004b58 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	3304      	adds	r3, #4
 8004af2:	4619      	mov	r1, r3
 8004af4:	481a      	ldr	r0, [pc, #104]	@ (8004b60 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004af6:	f7ff fa86 	bl	8004006 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004afa:	e026      	b.n	8004b4a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004afc:	68fa      	ldr	r2, [r7, #12]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	4413      	add	r3, r2
 8004b02:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004b04:	4b14      	ldr	r3, [pc, #80]	@ (8004b58 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	68ba      	ldr	r2, [r7, #8]
 8004b0a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004b0c:	68ba      	ldr	r2, [r7, #8]
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	429a      	cmp	r2, r3
 8004b12:	d209      	bcs.n	8004b28 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004b14:	4b13      	ldr	r3, [pc, #76]	@ (8004b64 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004b16:	681a      	ldr	r2, [r3, #0]
 8004b18:	4b0f      	ldr	r3, [pc, #60]	@ (8004b58 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	3304      	adds	r3, #4
 8004b1e:	4619      	mov	r1, r3
 8004b20:	4610      	mov	r0, r2
 8004b22:	f7ff fa94 	bl	800404e <vListInsert>
}
 8004b26:	e010      	b.n	8004b4a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004b28:	4b0f      	ldr	r3, [pc, #60]	@ (8004b68 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004b2a:	681a      	ldr	r2, [r3, #0]
 8004b2c:	4b0a      	ldr	r3, [pc, #40]	@ (8004b58 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	3304      	adds	r3, #4
 8004b32:	4619      	mov	r1, r3
 8004b34:	4610      	mov	r0, r2
 8004b36:	f7ff fa8a 	bl	800404e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004b3a:	4b0c      	ldr	r3, [pc, #48]	@ (8004b6c <prvAddCurrentTaskToDelayedList+0xc8>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	68ba      	ldr	r2, [r7, #8]
 8004b40:	429a      	cmp	r2, r3
 8004b42:	d202      	bcs.n	8004b4a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004b44:	4a09      	ldr	r2, [pc, #36]	@ (8004b6c <prvAddCurrentTaskToDelayedList+0xc8>)
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	6013      	str	r3, [r2, #0]
}
 8004b4a:	bf00      	nop
 8004b4c:	3710      	adds	r7, #16
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}
 8004b52:	bf00      	nop
 8004b54:	20000528 	.word	0x20000528
 8004b58:	20000424 	.word	0x20000424
 8004b5c:	2000052c 	.word	0x2000052c
 8004b60:	20000510 	.word	0x20000510
 8004b64:	200004e0 	.word	0x200004e0
 8004b68:	200004dc 	.word	0x200004dc
 8004b6c:	20000544 	.word	0x20000544

08004b70 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004b70:	b480      	push	{r7}
 8004b72:	b085      	sub	sp, #20
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	60f8      	str	r0, [r7, #12]
 8004b78:	60b9      	str	r1, [r7, #8]
 8004b7a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	3b04      	subs	r3, #4
 8004b80:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004b88:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	3b04      	subs	r3, #4
 8004b8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	f023 0201 	bic.w	r2, r3, #1
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	3b04      	subs	r3, #4
 8004b9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004ba0:	4a0c      	ldr	r2, [pc, #48]	@ (8004bd4 <pxPortInitialiseStack+0x64>)
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	3b14      	subs	r3, #20
 8004baa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004bac:	687a      	ldr	r2, [r7, #4]
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	3b04      	subs	r3, #4
 8004bb6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f06f 0202 	mvn.w	r2, #2
 8004bbe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	3b20      	subs	r3, #32
 8004bc4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	3714      	adds	r7, #20
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr
 8004bd4:	08004bd9 	.word	0x08004bd9

08004bd8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b085      	sub	sp, #20
 8004bdc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004bde:	2300      	movs	r3, #0
 8004be0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004be2:	4b13      	ldr	r3, [pc, #76]	@ (8004c30 <prvTaskExitError+0x58>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bea:	d00b      	beq.n	8004c04 <prvTaskExitError+0x2c>
	__asm volatile
 8004bec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bf0:	f383 8811 	msr	BASEPRI, r3
 8004bf4:	f3bf 8f6f 	isb	sy
 8004bf8:	f3bf 8f4f 	dsb	sy
 8004bfc:	60fb      	str	r3, [r7, #12]
}
 8004bfe:	bf00      	nop
 8004c00:	bf00      	nop
 8004c02:	e7fd      	b.n	8004c00 <prvTaskExitError+0x28>
	__asm volatile
 8004c04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c08:	f383 8811 	msr	BASEPRI, r3
 8004c0c:	f3bf 8f6f 	isb	sy
 8004c10:	f3bf 8f4f 	dsb	sy
 8004c14:	60bb      	str	r3, [r7, #8]
}
 8004c16:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004c18:	bf00      	nop
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d0fc      	beq.n	8004c1a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004c20:	bf00      	nop
 8004c22:	bf00      	nop
 8004c24:	3714      	adds	r7, #20
 8004c26:	46bd      	mov	sp, r7
 8004c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2c:	4770      	bx	lr
 8004c2e:	bf00      	nop
 8004c30:	2000000c 	.word	0x2000000c
	...

08004c40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004c40:	4b07      	ldr	r3, [pc, #28]	@ (8004c60 <pxCurrentTCBConst2>)
 8004c42:	6819      	ldr	r1, [r3, #0]
 8004c44:	6808      	ldr	r0, [r1, #0]
 8004c46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c4a:	f380 8809 	msr	PSP, r0
 8004c4e:	f3bf 8f6f 	isb	sy
 8004c52:	f04f 0000 	mov.w	r0, #0
 8004c56:	f380 8811 	msr	BASEPRI, r0
 8004c5a:	4770      	bx	lr
 8004c5c:	f3af 8000 	nop.w

08004c60 <pxCurrentTCBConst2>:
 8004c60:	20000424 	.word	0x20000424
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004c64:	bf00      	nop
 8004c66:	bf00      	nop

08004c68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004c68:	4808      	ldr	r0, [pc, #32]	@ (8004c8c <prvPortStartFirstTask+0x24>)
 8004c6a:	6800      	ldr	r0, [r0, #0]
 8004c6c:	6800      	ldr	r0, [r0, #0]
 8004c6e:	f380 8808 	msr	MSP, r0
 8004c72:	f04f 0000 	mov.w	r0, #0
 8004c76:	f380 8814 	msr	CONTROL, r0
 8004c7a:	b662      	cpsie	i
 8004c7c:	b661      	cpsie	f
 8004c7e:	f3bf 8f4f 	dsb	sy
 8004c82:	f3bf 8f6f 	isb	sy
 8004c86:	df00      	svc	0
 8004c88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004c8a:	bf00      	nop
 8004c8c:	e000ed08 	.word	0xe000ed08

08004c90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b086      	sub	sp, #24
 8004c94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004c96:	4b47      	ldr	r3, [pc, #284]	@ (8004db4 <xPortStartScheduler+0x124>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a47      	ldr	r2, [pc, #284]	@ (8004db8 <xPortStartScheduler+0x128>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d10b      	bne.n	8004cb8 <xPortStartScheduler+0x28>
	__asm volatile
 8004ca0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ca4:	f383 8811 	msr	BASEPRI, r3
 8004ca8:	f3bf 8f6f 	isb	sy
 8004cac:	f3bf 8f4f 	dsb	sy
 8004cb0:	613b      	str	r3, [r7, #16]
}
 8004cb2:	bf00      	nop
 8004cb4:	bf00      	nop
 8004cb6:	e7fd      	b.n	8004cb4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004cb8:	4b3e      	ldr	r3, [pc, #248]	@ (8004db4 <xPortStartScheduler+0x124>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a3f      	ldr	r2, [pc, #252]	@ (8004dbc <xPortStartScheduler+0x12c>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d10b      	bne.n	8004cda <xPortStartScheduler+0x4a>
	__asm volatile
 8004cc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cc6:	f383 8811 	msr	BASEPRI, r3
 8004cca:	f3bf 8f6f 	isb	sy
 8004cce:	f3bf 8f4f 	dsb	sy
 8004cd2:	60fb      	str	r3, [r7, #12]
}
 8004cd4:	bf00      	nop
 8004cd6:	bf00      	nop
 8004cd8:	e7fd      	b.n	8004cd6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004cda:	4b39      	ldr	r3, [pc, #228]	@ (8004dc0 <xPortStartScheduler+0x130>)
 8004cdc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	781b      	ldrb	r3, [r3, #0]
 8004ce2:	b2db      	uxtb	r3, r3
 8004ce4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	22ff      	movs	r2, #255	@ 0xff
 8004cea:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	781b      	ldrb	r3, [r3, #0]
 8004cf0:	b2db      	uxtb	r3, r3
 8004cf2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004cf4:	78fb      	ldrb	r3, [r7, #3]
 8004cf6:	b2db      	uxtb	r3, r3
 8004cf8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004cfc:	b2da      	uxtb	r2, r3
 8004cfe:	4b31      	ldr	r3, [pc, #196]	@ (8004dc4 <xPortStartScheduler+0x134>)
 8004d00:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004d02:	4b31      	ldr	r3, [pc, #196]	@ (8004dc8 <xPortStartScheduler+0x138>)
 8004d04:	2207      	movs	r2, #7
 8004d06:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004d08:	e009      	b.n	8004d1e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8004d0a:	4b2f      	ldr	r3, [pc, #188]	@ (8004dc8 <xPortStartScheduler+0x138>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	3b01      	subs	r3, #1
 8004d10:	4a2d      	ldr	r2, [pc, #180]	@ (8004dc8 <xPortStartScheduler+0x138>)
 8004d12:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004d14:	78fb      	ldrb	r3, [r7, #3]
 8004d16:	b2db      	uxtb	r3, r3
 8004d18:	005b      	lsls	r3, r3, #1
 8004d1a:	b2db      	uxtb	r3, r3
 8004d1c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004d1e:	78fb      	ldrb	r3, [r7, #3]
 8004d20:	b2db      	uxtb	r3, r3
 8004d22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d26:	2b80      	cmp	r3, #128	@ 0x80
 8004d28:	d0ef      	beq.n	8004d0a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004d2a:	4b27      	ldr	r3, [pc, #156]	@ (8004dc8 <xPortStartScheduler+0x138>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f1c3 0307 	rsb	r3, r3, #7
 8004d32:	2b04      	cmp	r3, #4
 8004d34:	d00b      	beq.n	8004d4e <xPortStartScheduler+0xbe>
	__asm volatile
 8004d36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d3a:	f383 8811 	msr	BASEPRI, r3
 8004d3e:	f3bf 8f6f 	isb	sy
 8004d42:	f3bf 8f4f 	dsb	sy
 8004d46:	60bb      	str	r3, [r7, #8]
}
 8004d48:	bf00      	nop
 8004d4a:	bf00      	nop
 8004d4c:	e7fd      	b.n	8004d4a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004d4e:	4b1e      	ldr	r3, [pc, #120]	@ (8004dc8 <xPortStartScheduler+0x138>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	021b      	lsls	r3, r3, #8
 8004d54:	4a1c      	ldr	r2, [pc, #112]	@ (8004dc8 <xPortStartScheduler+0x138>)
 8004d56:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004d58:	4b1b      	ldr	r3, [pc, #108]	@ (8004dc8 <xPortStartScheduler+0x138>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004d60:	4a19      	ldr	r2, [pc, #100]	@ (8004dc8 <xPortStartScheduler+0x138>)
 8004d62:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	b2da      	uxtb	r2, r3
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004d6c:	4b17      	ldr	r3, [pc, #92]	@ (8004dcc <xPortStartScheduler+0x13c>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a16      	ldr	r2, [pc, #88]	@ (8004dcc <xPortStartScheduler+0x13c>)
 8004d72:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004d76:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004d78:	4b14      	ldr	r3, [pc, #80]	@ (8004dcc <xPortStartScheduler+0x13c>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a13      	ldr	r2, [pc, #76]	@ (8004dcc <xPortStartScheduler+0x13c>)
 8004d7e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004d82:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004d84:	f000 f8da 	bl	8004f3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004d88:	4b11      	ldr	r3, [pc, #68]	@ (8004dd0 <xPortStartScheduler+0x140>)
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004d8e:	f000 f8f9 	bl	8004f84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004d92:	4b10      	ldr	r3, [pc, #64]	@ (8004dd4 <xPortStartScheduler+0x144>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a0f      	ldr	r2, [pc, #60]	@ (8004dd4 <xPortStartScheduler+0x144>)
 8004d98:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8004d9c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004d9e:	f7ff ff63 	bl	8004c68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004da2:	f7ff fd47 	bl	8004834 <vTaskSwitchContext>
	prvTaskExitError();
 8004da6:	f7ff ff17 	bl	8004bd8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004daa:	2300      	movs	r3, #0
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	3718      	adds	r7, #24
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd80      	pop	{r7, pc}
 8004db4:	e000ed00 	.word	0xe000ed00
 8004db8:	410fc271 	.word	0x410fc271
 8004dbc:	410fc270 	.word	0x410fc270
 8004dc0:	e000e400 	.word	0xe000e400
 8004dc4:	20000550 	.word	0x20000550
 8004dc8:	20000554 	.word	0x20000554
 8004dcc:	e000ed20 	.word	0xe000ed20
 8004dd0:	2000000c 	.word	0x2000000c
 8004dd4:	e000ef34 	.word	0xe000ef34

08004dd8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b083      	sub	sp, #12
 8004ddc:	af00      	add	r7, sp, #0
	__asm volatile
 8004dde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004de2:	f383 8811 	msr	BASEPRI, r3
 8004de6:	f3bf 8f6f 	isb	sy
 8004dea:	f3bf 8f4f 	dsb	sy
 8004dee:	607b      	str	r3, [r7, #4]
}
 8004df0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004df2:	4b10      	ldr	r3, [pc, #64]	@ (8004e34 <vPortEnterCritical+0x5c>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	3301      	adds	r3, #1
 8004df8:	4a0e      	ldr	r2, [pc, #56]	@ (8004e34 <vPortEnterCritical+0x5c>)
 8004dfa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004dfc:	4b0d      	ldr	r3, [pc, #52]	@ (8004e34 <vPortEnterCritical+0x5c>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	d110      	bne.n	8004e26 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004e04:	4b0c      	ldr	r3, [pc, #48]	@ (8004e38 <vPortEnterCritical+0x60>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	b2db      	uxtb	r3, r3
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d00b      	beq.n	8004e26 <vPortEnterCritical+0x4e>
	__asm volatile
 8004e0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e12:	f383 8811 	msr	BASEPRI, r3
 8004e16:	f3bf 8f6f 	isb	sy
 8004e1a:	f3bf 8f4f 	dsb	sy
 8004e1e:	603b      	str	r3, [r7, #0]
}
 8004e20:	bf00      	nop
 8004e22:	bf00      	nop
 8004e24:	e7fd      	b.n	8004e22 <vPortEnterCritical+0x4a>
	}
}
 8004e26:	bf00      	nop
 8004e28:	370c      	adds	r7, #12
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e30:	4770      	bx	lr
 8004e32:	bf00      	nop
 8004e34:	2000000c 	.word	0x2000000c
 8004e38:	e000ed04 	.word	0xe000ed04

08004e3c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b083      	sub	sp, #12
 8004e40:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004e42:	4b12      	ldr	r3, [pc, #72]	@ (8004e8c <vPortExitCritical+0x50>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d10b      	bne.n	8004e62 <vPortExitCritical+0x26>
	__asm volatile
 8004e4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e4e:	f383 8811 	msr	BASEPRI, r3
 8004e52:	f3bf 8f6f 	isb	sy
 8004e56:	f3bf 8f4f 	dsb	sy
 8004e5a:	607b      	str	r3, [r7, #4]
}
 8004e5c:	bf00      	nop
 8004e5e:	bf00      	nop
 8004e60:	e7fd      	b.n	8004e5e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004e62:	4b0a      	ldr	r3, [pc, #40]	@ (8004e8c <vPortExitCritical+0x50>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	3b01      	subs	r3, #1
 8004e68:	4a08      	ldr	r2, [pc, #32]	@ (8004e8c <vPortExitCritical+0x50>)
 8004e6a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004e6c:	4b07      	ldr	r3, [pc, #28]	@ (8004e8c <vPortExitCritical+0x50>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d105      	bne.n	8004e80 <vPortExitCritical+0x44>
 8004e74:	2300      	movs	r3, #0
 8004e76:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004e7e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004e80:	bf00      	nop
 8004e82:	370c      	adds	r7, #12
 8004e84:	46bd      	mov	sp, r7
 8004e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8a:	4770      	bx	lr
 8004e8c:	2000000c 	.word	0x2000000c

08004e90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004e90:	f3ef 8009 	mrs	r0, PSP
 8004e94:	f3bf 8f6f 	isb	sy
 8004e98:	4b15      	ldr	r3, [pc, #84]	@ (8004ef0 <pxCurrentTCBConst>)
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	f01e 0f10 	tst.w	lr, #16
 8004ea0:	bf08      	it	eq
 8004ea2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004ea6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004eaa:	6010      	str	r0, [r2, #0]
 8004eac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004eb0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004eb4:	f380 8811 	msr	BASEPRI, r0
 8004eb8:	f3bf 8f4f 	dsb	sy
 8004ebc:	f3bf 8f6f 	isb	sy
 8004ec0:	f7ff fcb8 	bl	8004834 <vTaskSwitchContext>
 8004ec4:	f04f 0000 	mov.w	r0, #0
 8004ec8:	f380 8811 	msr	BASEPRI, r0
 8004ecc:	bc09      	pop	{r0, r3}
 8004ece:	6819      	ldr	r1, [r3, #0]
 8004ed0:	6808      	ldr	r0, [r1, #0]
 8004ed2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ed6:	f01e 0f10 	tst.w	lr, #16
 8004eda:	bf08      	it	eq
 8004edc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004ee0:	f380 8809 	msr	PSP, r0
 8004ee4:	f3bf 8f6f 	isb	sy
 8004ee8:	4770      	bx	lr
 8004eea:	bf00      	nop
 8004eec:	f3af 8000 	nop.w

08004ef0 <pxCurrentTCBConst>:
 8004ef0:	20000424 	.word	0x20000424
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004ef4:	bf00      	nop
 8004ef6:	bf00      	nop

08004ef8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b082      	sub	sp, #8
 8004efc:	af00      	add	r7, sp, #0
	__asm volatile
 8004efe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f02:	f383 8811 	msr	BASEPRI, r3
 8004f06:	f3bf 8f6f 	isb	sy
 8004f0a:	f3bf 8f4f 	dsb	sy
 8004f0e:	607b      	str	r3, [r7, #4]
}
 8004f10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004f12:	f7ff fbd1 	bl	80046b8 <xTaskIncrementTick>
 8004f16:	4603      	mov	r3, r0
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d003      	beq.n	8004f24 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004f1c:	4b06      	ldr	r3, [pc, #24]	@ (8004f38 <SysTick_Handler+0x40>)
 8004f1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f22:	601a      	str	r2, [r3, #0]
 8004f24:	2300      	movs	r3, #0
 8004f26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	f383 8811 	msr	BASEPRI, r3
}
 8004f2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004f30:	bf00      	nop
 8004f32:	3708      	adds	r7, #8
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd80      	pop	{r7, pc}
 8004f38:	e000ed04 	.word	0xe000ed04

08004f3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004f40:	4b0b      	ldr	r3, [pc, #44]	@ (8004f70 <vPortSetupTimerInterrupt+0x34>)
 8004f42:	2200      	movs	r2, #0
 8004f44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004f46:	4b0b      	ldr	r3, [pc, #44]	@ (8004f74 <vPortSetupTimerInterrupt+0x38>)
 8004f48:	2200      	movs	r2, #0
 8004f4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004f4c:	4b0a      	ldr	r3, [pc, #40]	@ (8004f78 <vPortSetupTimerInterrupt+0x3c>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a0a      	ldr	r2, [pc, #40]	@ (8004f7c <vPortSetupTimerInterrupt+0x40>)
 8004f52:	fba2 2303 	umull	r2, r3, r2, r3
 8004f56:	099b      	lsrs	r3, r3, #6
 8004f58:	4a09      	ldr	r2, [pc, #36]	@ (8004f80 <vPortSetupTimerInterrupt+0x44>)
 8004f5a:	3b01      	subs	r3, #1
 8004f5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004f5e:	4b04      	ldr	r3, [pc, #16]	@ (8004f70 <vPortSetupTimerInterrupt+0x34>)
 8004f60:	2207      	movs	r2, #7
 8004f62:	601a      	str	r2, [r3, #0]
}
 8004f64:	bf00      	nop
 8004f66:	46bd      	mov	sp, r7
 8004f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6c:	4770      	bx	lr
 8004f6e:	bf00      	nop
 8004f70:	e000e010 	.word	0xe000e010
 8004f74:	e000e018 	.word	0xe000e018
 8004f78:	20000000 	.word	0x20000000
 8004f7c:	10624dd3 	.word	0x10624dd3
 8004f80:	e000e014 	.word	0xe000e014

08004f84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004f84:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004f94 <vPortEnableVFP+0x10>
 8004f88:	6801      	ldr	r1, [r0, #0]
 8004f8a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8004f8e:	6001      	str	r1, [r0, #0]
 8004f90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004f92:	bf00      	nop
 8004f94:	e000ed88 	.word	0xe000ed88

08004f98 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b08a      	sub	sp, #40	@ 0x28
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004fa4:	f7ff fadc 	bl	8004560 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004fa8:	4b5a      	ldr	r3, [pc, #360]	@ (8005114 <pvPortMalloc+0x17c>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d101      	bne.n	8004fb4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004fb0:	f000 f916 	bl	80051e0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004fb4:	4b58      	ldr	r3, [pc, #352]	@ (8005118 <pvPortMalloc+0x180>)
 8004fb6:	681a      	ldr	r2, [r3, #0]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	4013      	ands	r3, r2
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	f040 8090 	bne.w	80050e2 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d01e      	beq.n	8005006 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004fc8:	2208      	movs	r2, #8
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	4413      	add	r3, r2
 8004fce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	f003 0307 	and.w	r3, r3, #7
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d015      	beq.n	8005006 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	f023 0307 	bic.w	r3, r3, #7
 8004fe0:	3308      	adds	r3, #8
 8004fe2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	f003 0307 	and.w	r3, r3, #7
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d00b      	beq.n	8005006 <pvPortMalloc+0x6e>
	__asm volatile
 8004fee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ff2:	f383 8811 	msr	BASEPRI, r3
 8004ff6:	f3bf 8f6f 	isb	sy
 8004ffa:	f3bf 8f4f 	dsb	sy
 8004ffe:	617b      	str	r3, [r7, #20]
}
 8005000:	bf00      	nop
 8005002:	bf00      	nop
 8005004:	e7fd      	b.n	8005002 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d06a      	beq.n	80050e2 <pvPortMalloc+0x14a>
 800500c:	4b43      	ldr	r3, [pc, #268]	@ (800511c <pvPortMalloc+0x184>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	687a      	ldr	r2, [r7, #4]
 8005012:	429a      	cmp	r2, r3
 8005014:	d865      	bhi.n	80050e2 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005016:	4b42      	ldr	r3, [pc, #264]	@ (8005120 <pvPortMalloc+0x188>)
 8005018:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800501a:	4b41      	ldr	r3, [pc, #260]	@ (8005120 <pvPortMalloc+0x188>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005020:	e004      	b.n	800502c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005024:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800502c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	687a      	ldr	r2, [r7, #4]
 8005032:	429a      	cmp	r2, r3
 8005034:	d903      	bls.n	800503e <pvPortMalloc+0xa6>
 8005036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d1f1      	bne.n	8005022 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800503e:	4b35      	ldr	r3, [pc, #212]	@ (8005114 <pvPortMalloc+0x17c>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005044:	429a      	cmp	r2, r3
 8005046:	d04c      	beq.n	80050e2 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005048:	6a3b      	ldr	r3, [r7, #32]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	2208      	movs	r2, #8
 800504e:	4413      	add	r3, r2
 8005050:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005054:	681a      	ldr	r2, [r3, #0]
 8005056:	6a3b      	ldr	r3, [r7, #32]
 8005058:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800505a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800505c:	685a      	ldr	r2, [r3, #4]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	1ad2      	subs	r2, r2, r3
 8005062:	2308      	movs	r3, #8
 8005064:	005b      	lsls	r3, r3, #1
 8005066:	429a      	cmp	r2, r3
 8005068:	d920      	bls.n	80050ac <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800506a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	4413      	add	r3, r2
 8005070:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005072:	69bb      	ldr	r3, [r7, #24]
 8005074:	f003 0307 	and.w	r3, r3, #7
 8005078:	2b00      	cmp	r3, #0
 800507a:	d00b      	beq.n	8005094 <pvPortMalloc+0xfc>
	__asm volatile
 800507c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005080:	f383 8811 	msr	BASEPRI, r3
 8005084:	f3bf 8f6f 	isb	sy
 8005088:	f3bf 8f4f 	dsb	sy
 800508c:	613b      	str	r3, [r7, #16]
}
 800508e:	bf00      	nop
 8005090:	bf00      	nop
 8005092:	e7fd      	b.n	8005090 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005096:	685a      	ldr	r2, [r3, #4]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	1ad2      	subs	r2, r2, r3
 800509c:	69bb      	ldr	r3, [r7, #24]
 800509e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80050a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050a2:	687a      	ldr	r2, [r7, #4]
 80050a4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80050a6:	69b8      	ldr	r0, [r7, #24]
 80050a8:	f000 f8fc 	bl	80052a4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80050ac:	4b1b      	ldr	r3, [pc, #108]	@ (800511c <pvPortMalloc+0x184>)
 80050ae:	681a      	ldr	r2, [r3, #0]
 80050b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	1ad3      	subs	r3, r2, r3
 80050b6:	4a19      	ldr	r2, [pc, #100]	@ (800511c <pvPortMalloc+0x184>)
 80050b8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80050ba:	4b18      	ldr	r3, [pc, #96]	@ (800511c <pvPortMalloc+0x184>)
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	4b19      	ldr	r3, [pc, #100]	@ (8005124 <pvPortMalloc+0x18c>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	429a      	cmp	r2, r3
 80050c4:	d203      	bcs.n	80050ce <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80050c6:	4b15      	ldr	r3, [pc, #84]	@ (800511c <pvPortMalloc+0x184>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a16      	ldr	r2, [pc, #88]	@ (8005124 <pvPortMalloc+0x18c>)
 80050cc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80050ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050d0:	685a      	ldr	r2, [r3, #4]
 80050d2:	4b11      	ldr	r3, [pc, #68]	@ (8005118 <pvPortMalloc+0x180>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	431a      	orrs	r2, r3
 80050d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050da:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80050dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050de:	2200      	movs	r2, #0
 80050e0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80050e2:	f7ff fa4b 	bl	800457c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80050e6:	69fb      	ldr	r3, [r7, #28]
 80050e8:	f003 0307 	and.w	r3, r3, #7
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d00b      	beq.n	8005108 <pvPortMalloc+0x170>
	__asm volatile
 80050f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050f4:	f383 8811 	msr	BASEPRI, r3
 80050f8:	f3bf 8f6f 	isb	sy
 80050fc:	f3bf 8f4f 	dsb	sy
 8005100:	60fb      	str	r3, [r7, #12]
}
 8005102:	bf00      	nop
 8005104:	bf00      	nop
 8005106:	e7fd      	b.n	8005104 <pvPortMalloc+0x16c>
	return pvReturn;
 8005108:	69fb      	ldr	r3, [r7, #28]
}
 800510a:	4618      	mov	r0, r3
 800510c:	3728      	adds	r7, #40	@ 0x28
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}
 8005112:	bf00      	nop
 8005114:	20001160 	.word	0x20001160
 8005118:	2000116c 	.word	0x2000116c
 800511c:	20001164 	.word	0x20001164
 8005120:	20001158 	.word	0x20001158
 8005124:	20001168 	.word	0x20001168

08005128 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b086      	sub	sp, #24
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d04a      	beq.n	80051d0 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800513a:	2308      	movs	r3, #8
 800513c:	425b      	negs	r3, r3
 800513e:	697a      	ldr	r2, [r7, #20]
 8005140:	4413      	add	r3, r2
 8005142:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	685a      	ldr	r2, [r3, #4]
 800514c:	4b22      	ldr	r3, [pc, #136]	@ (80051d8 <vPortFree+0xb0>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4013      	ands	r3, r2
 8005152:	2b00      	cmp	r3, #0
 8005154:	d10b      	bne.n	800516e <vPortFree+0x46>
	__asm volatile
 8005156:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800515a:	f383 8811 	msr	BASEPRI, r3
 800515e:	f3bf 8f6f 	isb	sy
 8005162:	f3bf 8f4f 	dsb	sy
 8005166:	60fb      	str	r3, [r7, #12]
}
 8005168:	bf00      	nop
 800516a:	bf00      	nop
 800516c:	e7fd      	b.n	800516a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d00b      	beq.n	800518e <vPortFree+0x66>
	__asm volatile
 8005176:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800517a:	f383 8811 	msr	BASEPRI, r3
 800517e:	f3bf 8f6f 	isb	sy
 8005182:	f3bf 8f4f 	dsb	sy
 8005186:	60bb      	str	r3, [r7, #8]
}
 8005188:	bf00      	nop
 800518a:	bf00      	nop
 800518c:	e7fd      	b.n	800518a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	685a      	ldr	r2, [r3, #4]
 8005192:	4b11      	ldr	r3, [pc, #68]	@ (80051d8 <vPortFree+0xb0>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4013      	ands	r3, r2
 8005198:	2b00      	cmp	r3, #0
 800519a:	d019      	beq.n	80051d0 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d115      	bne.n	80051d0 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	685a      	ldr	r2, [r3, #4]
 80051a8:	4b0b      	ldr	r3, [pc, #44]	@ (80051d8 <vPortFree+0xb0>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	43db      	mvns	r3, r3
 80051ae:	401a      	ands	r2, r3
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80051b4:	f7ff f9d4 	bl	8004560 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80051b8:	693b      	ldr	r3, [r7, #16]
 80051ba:	685a      	ldr	r2, [r3, #4]
 80051bc:	4b07      	ldr	r3, [pc, #28]	@ (80051dc <vPortFree+0xb4>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4413      	add	r3, r2
 80051c2:	4a06      	ldr	r2, [pc, #24]	@ (80051dc <vPortFree+0xb4>)
 80051c4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80051c6:	6938      	ldr	r0, [r7, #16]
 80051c8:	f000 f86c 	bl	80052a4 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80051cc:	f7ff f9d6 	bl	800457c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80051d0:	bf00      	nop
 80051d2:	3718      	adds	r7, #24
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bd80      	pop	{r7, pc}
 80051d8:	2000116c 	.word	0x2000116c
 80051dc:	20001164 	.word	0x20001164

080051e0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80051e0:	b480      	push	{r7}
 80051e2:	b085      	sub	sp, #20
 80051e4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80051e6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80051ea:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80051ec:	4b27      	ldr	r3, [pc, #156]	@ (800528c <prvHeapInit+0xac>)
 80051ee:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	f003 0307 	and.w	r3, r3, #7
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d00c      	beq.n	8005214 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	3307      	adds	r3, #7
 80051fe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	f023 0307 	bic.w	r3, r3, #7
 8005206:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005208:	68ba      	ldr	r2, [r7, #8]
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	1ad3      	subs	r3, r2, r3
 800520e:	4a1f      	ldr	r2, [pc, #124]	@ (800528c <prvHeapInit+0xac>)
 8005210:	4413      	add	r3, r2
 8005212:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005218:	4a1d      	ldr	r2, [pc, #116]	@ (8005290 <prvHeapInit+0xb0>)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800521e:	4b1c      	ldr	r3, [pc, #112]	@ (8005290 <prvHeapInit+0xb0>)
 8005220:	2200      	movs	r2, #0
 8005222:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	68ba      	ldr	r2, [r7, #8]
 8005228:	4413      	add	r3, r2
 800522a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800522c:	2208      	movs	r2, #8
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	1a9b      	subs	r3, r3, r2
 8005232:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	f023 0307 	bic.w	r3, r3, #7
 800523a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	4a15      	ldr	r2, [pc, #84]	@ (8005294 <prvHeapInit+0xb4>)
 8005240:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005242:	4b14      	ldr	r3, [pc, #80]	@ (8005294 <prvHeapInit+0xb4>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	2200      	movs	r2, #0
 8005248:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800524a:	4b12      	ldr	r3, [pc, #72]	@ (8005294 <prvHeapInit+0xb4>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	2200      	movs	r2, #0
 8005250:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	68fa      	ldr	r2, [r7, #12]
 800525a:	1ad2      	subs	r2, r2, r3
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005260:	4b0c      	ldr	r3, [pc, #48]	@ (8005294 <prvHeapInit+0xb4>)
 8005262:	681a      	ldr	r2, [r3, #0]
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	4a0a      	ldr	r2, [pc, #40]	@ (8005298 <prvHeapInit+0xb8>)
 800526e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	4a09      	ldr	r2, [pc, #36]	@ (800529c <prvHeapInit+0xbc>)
 8005276:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005278:	4b09      	ldr	r3, [pc, #36]	@ (80052a0 <prvHeapInit+0xc0>)
 800527a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800527e:	601a      	str	r2, [r3, #0]
}
 8005280:	bf00      	nop
 8005282:	3714      	adds	r7, #20
 8005284:	46bd      	mov	sp, r7
 8005286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528a:	4770      	bx	lr
 800528c:	20000558 	.word	0x20000558
 8005290:	20001158 	.word	0x20001158
 8005294:	20001160 	.word	0x20001160
 8005298:	20001168 	.word	0x20001168
 800529c:	20001164 	.word	0x20001164
 80052a0:	2000116c 	.word	0x2000116c

080052a4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80052a4:	b480      	push	{r7}
 80052a6:	b085      	sub	sp, #20
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80052ac:	4b28      	ldr	r3, [pc, #160]	@ (8005350 <prvInsertBlockIntoFreeList+0xac>)
 80052ae:	60fb      	str	r3, [r7, #12]
 80052b0:	e002      	b.n	80052b8 <prvInsertBlockIntoFreeList+0x14>
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	60fb      	str	r3, [r7, #12]
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	687a      	ldr	r2, [r7, #4]
 80052be:	429a      	cmp	r2, r3
 80052c0:	d8f7      	bhi.n	80052b2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	68ba      	ldr	r2, [r7, #8]
 80052cc:	4413      	add	r3, r2
 80052ce:	687a      	ldr	r2, [r7, #4]
 80052d0:	429a      	cmp	r2, r3
 80052d2:	d108      	bne.n	80052e6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	685a      	ldr	r2, [r3, #4]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	441a      	add	r2, r3
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	68ba      	ldr	r2, [r7, #8]
 80052f0:	441a      	add	r2, r3
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	429a      	cmp	r2, r3
 80052f8:	d118      	bne.n	800532c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681a      	ldr	r2, [r3, #0]
 80052fe:	4b15      	ldr	r3, [pc, #84]	@ (8005354 <prvInsertBlockIntoFreeList+0xb0>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	429a      	cmp	r2, r3
 8005304:	d00d      	beq.n	8005322 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	685a      	ldr	r2, [r3, #4]
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	441a      	add	r2, r3
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	681a      	ldr	r2, [r3, #0]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	601a      	str	r2, [r3, #0]
 8005320:	e008      	b.n	8005334 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005322:	4b0c      	ldr	r3, [pc, #48]	@ (8005354 <prvInsertBlockIntoFreeList+0xb0>)
 8005324:	681a      	ldr	r2, [r3, #0]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	601a      	str	r2, [r3, #0]
 800532a:	e003      	b.n	8005334 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681a      	ldr	r2, [r3, #0]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005334:	68fa      	ldr	r2, [r7, #12]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	429a      	cmp	r2, r3
 800533a:	d002      	beq.n	8005342 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	687a      	ldr	r2, [r7, #4]
 8005340:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005342:	bf00      	nop
 8005344:	3714      	adds	r7, #20
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr
 800534e:	bf00      	nop
 8005350:	20001158 	.word	0x20001158
 8005354:	20001160 	.word	0x20001160

08005358 <siprintf>:
 8005358:	b40e      	push	{r1, r2, r3}
 800535a:	b500      	push	{lr}
 800535c:	b09c      	sub	sp, #112	@ 0x70
 800535e:	ab1d      	add	r3, sp, #116	@ 0x74
 8005360:	9002      	str	r0, [sp, #8]
 8005362:	9006      	str	r0, [sp, #24]
 8005364:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005368:	4809      	ldr	r0, [pc, #36]	@ (8005390 <siprintf+0x38>)
 800536a:	9107      	str	r1, [sp, #28]
 800536c:	9104      	str	r1, [sp, #16]
 800536e:	4909      	ldr	r1, [pc, #36]	@ (8005394 <siprintf+0x3c>)
 8005370:	f853 2b04 	ldr.w	r2, [r3], #4
 8005374:	9105      	str	r1, [sp, #20]
 8005376:	6800      	ldr	r0, [r0, #0]
 8005378:	9301      	str	r3, [sp, #4]
 800537a:	a902      	add	r1, sp, #8
 800537c:	f000 f9a2 	bl	80056c4 <_svfiprintf_r>
 8005380:	9b02      	ldr	r3, [sp, #8]
 8005382:	2200      	movs	r2, #0
 8005384:	701a      	strb	r2, [r3, #0]
 8005386:	b01c      	add	sp, #112	@ 0x70
 8005388:	f85d eb04 	ldr.w	lr, [sp], #4
 800538c:	b003      	add	sp, #12
 800538e:	4770      	bx	lr
 8005390:	20000010 	.word	0x20000010
 8005394:	ffff0208 	.word	0xffff0208

08005398 <memset>:
 8005398:	4402      	add	r2, r0
 800539a:	4603      	mov	r3, r0
 800539c:	4293      	cmp	r3, r2
 800539e:	d100      	bne.n	80053a2 <memset+0xa>
 80053a0:	4770      	bx	lr
 80053a2:	f803 1b01 	strb.w	r1, [r3], #1
 80053a6:	e7f9      	b.n	800539c <memset+0x4>

080053a8 <__errno>:
 80053a8:	4b01      	ldr	r3, [pc, #4]	@ (80053b0 <__errno+0x8>)
 80053aa:	6818      	ldr	r0, [r3, #0]
 80053ac:	4770      	bx	lr
 80053ae:	bf00      	nop
 80053b0:	20000010 	.word	0x20000010

080053b4 <__libc_init_array>:
 80053b4:	b570      	push	{r4, r5, r6, lr}
 80053b6:	4d0d      	ldr	r5, [pc, #52]	@ (80053ec <__libc_init_array+0x38>)
 80053b8:	4c0d      	ldr	r4, [pc, #52]	@ (80053f0 <__libc_init_array+0x3c>)
 80053ba:	1b64      	subs	r4, r4, r5
 80053bc:	10a4      	asrs	r4, r4, #2
 80053be:	2600      	movs	r6, #0
 80053c0:	42a6      	cmp	r6, r4
 80053c2:	d109      	bne.n	80053d8 <__libc_init_array+0x24>
 80053c4:	4d0b      	ldr	r5, [pc, #44]	@ (80053f4 <__libc_init_array+0x40>)
 80053c6:	4c0c      	ldr	r4, [pc, #48]	@ (80053f8 <__libc_init_array+0x44>)
 80053c8:	f000 fc66 	bl	8005c98 <_init>
 80053cc:	1b64      	subs	r4, r4, r5
 80053ce:	10a4      	asrs	r4, r4, #2
 80053d0:	2600      	movs	r6, #0
 80053d2:	42a6      	cmp	r6, r4
 80053d4:	d105      	bne.n	80053e2 <__libc_init_array+0x2e>
 80053d6:	bd70      	pop	{r4, r5, r6, pc}
 80053d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80053dc:	4798      	blx	r3
 80053de:	3601      	adds	r6, #1
 80053e0:	e7ee      	b.n	80053c0 <__libc_init_array+0xc>
 80053e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80053e6:	4798      	blx	r3
 80053e8:	3601      	adds	r6, #1
 80053ea:	e7f2      	b.n	80053d2 <__libc_init_array+0x1e>
 80053ec:	08005d64 	.word	0x08005d64
 80053f0:	08005d64 	.word	0x08005d64
 80053f4:	08005d64 	.word	0x08005d64
 80053f8:	08005d68 	.word	0x08005d68

080053fc <__retarget_lock_acquire_recursive>:
 80053fc:	4770      	bx	lr

080053fe <__retarget_lock_release_recursive>:
 80053fe:	4770      	bx	lr

08005400 <memcpy>:
 8005400:	440a      	add	r2, r1
 8005402:	4291      	cmp	r1, r2
 8005404:	f100 33ff 	add.w	r3, r0, #4294967295
 8005408:	d100      	bne.n	800540c <memcpy+0xc>
 800540a:	4770      	bx	lr
 800540c:	b510      	push	{r4, lr}
 800540e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005412:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005416:	4291      	cmp	r1, r2
 8005418:	d1f9      	bne.n	800540e <memcpy+0xe>
 800541a:	bd10      	pop	{r4, pc}

0800541c <_free_r>:
 800541c:	b538      	push	{r3, r4, r5, lr}
 800541e:	4605      	mov	r5, r0
 8005420:	2900      	cmp	r1, #0
 8005422:	d041      	beq.n	80054a8 <_free_r+0x8c>
 8005424:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005428:	1f0c      	subs	r4, r1, #4
 800542a:	2b00      	cmp	r3, #0
 800542c:	bfb8      	it	lt
 800542e:	18e4      	addlt	r4, r4, r3
 8005430:	f000 f8e0 	bl	80055f4 <__malloc_lock>
 8005434:	4a1d      	ldr	r2, [pc, #116]	@ (80054ac <_free_r+0x90>)
 8005436:	6813      	ldr	r3, [r2, #0]
 8005438:	b933      	cbnz	r3, 8005448 <_free_r+0x2c>
 800543a:	6063      	str	r3, [r4, #4]
 800543c:	6014      	str	r4, [r2, #0]
 800543e:	4628      	mov	r0, r5
 8005440:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005444:	f000 b8dc 	b.w	8005600 <__malloc_unlock>
 8005448:	42a3      	cmp	r3, r4
 800544a:	d908      	bls.n	800545e <_free_r+0x42>
 800544c:	6820      	ldr	r0, [r4, #0]
 800544e:	1821      	adds	r1, r4, r0
 8005450:	428b      	cmp	r3, r1
 8005452:	bf01      	itttt	eq
 8005454:	6819      	ldreq	r1, [r3, #0]
 8005456:	685b      	ldreq	r3, [r3, #4]
 8005458:	1809      	addeq	r1, r1, r0
 800545a:	6021      	streq	r1, [r4, #0]
 800545c:	e7ed      	b.n	800543a <_free_r+0x1e>
 800545e:	461a      	mov	r2, r3
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	b10b      	cbz	r3, 8005468 <_free_r+0x4c>
 8005464:	42a3      	cmp	r3, r4
 8005466:	d9fa      	bls.n	800545e <_free_r+0x42>
 8005468:	6811      	ldr	r1, [r2, #0]
 800546a:	1850      	adds	r0, r2, r1
 800546c:	42a0      	cmp	r0, r4
 800546e:	d10b      	bne.n	8005488 <_free_r+0x6c>
 8005470:	6820      	ldr	r0, [r4, #0]
 8005472:	4401      	add	r1, r0
 8005474:	1850      	adds	r0, r2, r1
 8005476:	4283      	cmp	r3, r0
 8005478:	6011      	str	r1, [r2, #0]
 800547a:	d1e0      	bne.n	800543e <_free_r+0x22>
 800547c:	6818      	ldr	r0, [r3, #0]
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	6053      	str	r3, [r2, #4]
 8005482:	4408      	add	r0, r1
 8005484:	6010      	str	r0, [r2, #0]
 8005486:	e7da      	b.n	800543e <_free_r+0x22>
 8005488:	d902      	bls.n	8005490 <_free_r+0x74>
 800548a:	230c      	movs	r3, #12
 800548c:	602b      	str	r3, [r5, #0]
 800548e:	e7d6      	b.n	800543e <_free_r+0x22>
 8005490:	6820      	ldr	r0, [r4, #0]
 8005492:	1821      	adds	r1, r4, r0
 8005494:	428b      	cmp	r3, r1
 8005496:	bf04      	itt	eq
 8005498:	6819      	ldreq	r1, [r3, #0]
 800549a:	685b      	ldreq	r3, [r3, #4]
 800549c:	6063      	str	r3, [r4, #4]
 800549e:	bf04      	itt	eq
 80054a0:	1809      	addeq	r1, r1, r0
 80054a2:	6021      	streq	r1, [r4, #0]
 80054a4:	6054      	str	r4, [r2, #4]
 80054a6:	e7ca      	b.n	800543e <_free_r+0x22>
 80054a8:	bd38      	pop	{r3, r4, r5, pc}
 80054aa:	bf00      	nop
 80054ac:	200012b4 	.word	0x200012b4

080054b0 <sbrk_aligned>:
 80054b0:	b570      	push	{r4, r5, r6, lr}
 80054b2:	4e0f      	ldr	r6, [pc, #60]	@ (80054f0 <sbrk_aligned+0x40>)
 80054b4:	460c      	mov	r4, r1
 80054b6:	6831      	ldr	r1, [r6, #0]
 80054b8:	4605      	mov	r5, r0
 80054ba:	b911      	cbnz	r1, 80054c2 <sbrk_aligned+0x12>
 80054bc:	f000 fba6 	bl	8005c0c <_sbrk_r>
 80054c0:	6030      	str	r0, [r6, #0]
 80054c2:	4621      	mov	r1, r4
 80054c4:	4628      	mov	r0, r5
 80054c6:	f000 fba1 	bl	8005c0c <_sbrk_r>
 80054ca:	1c43      	adds	r3, r0, #1
 80054cc:	d103      	bne.n	80054d6 <sbrk_aligned+0x26>
 80054ce:	f04f 34ff 	mov.w	r4, #4294967295
 80054d2:	4620      	mov	r0, r4
 80054d4:	bd70      	pop	{r4, r5, r6, pc}
 80054d6:	1cc4      	adds	r4, r0, #3
 80054d8:	f024 0403 	bic.w	r4, r4, #3
 80054dc:	42a0      	cmp	r0, r4
 80054de:	d0f8      	beq.n	80054d2 <sbrk_aligned+0x22>
 80054e0:	1a21      	subs	r1, r4, r0
 80054e2:	4628      	mov	r0, r5
 80054e4:	f000 fb92 	bl	8005c0c <_sbrk_r>
 80054e8:	3001      	adds	r0, #1
 80054ea:	d1f2      	bne.n	80054d2 <sbrk_aligned+0x22>
 80054ec:	e7ef      	b.n	80054ce <sbrk_aligned+0x1e>
 80054ee:	bf00      	nop
 80054f0:	200012b0 	.word	0x200012b0

080054f4 <_malloc_r>:
 80054f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80054f8:	1ccd      	adds	r5, r1, #3
 80054fa:	f025 0503 	bic.w	r5, r5, #3
 80054fe:	3508      	adds	r5, #8
 8005500:	2d0c      	cmp	r5, #12
 8005502:	bf38      	it	cc
 8005504:	250c      	movcc	r5, #12
 8005506:	2d00      	cmp	r5, #0
 8005508:	4606      	mov	r6, r0
 800550a:	db01      	blt.n	8005510 <_malloc_r+0x1c>
 800550c:	42a9      	cmp	r1, r5
 800550e:	d904      	bls.n	800551a <_malloc_r+0x26>
 8005510:	230c      	movs	r3, #12
 8005512:	6033      	str	r3, [r6, #0]
 8005514:	2000      	movs	r0, #0
 8005516:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800551a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80055f0 <_malloc_r+0xfc>
 800551e:	f000 f869 	bl	80055f4 <__malloc_lock>
 8005522:	f8d8 3000 	ldr.w	r3, [r8]
 8005526:	461c      	mov	r4, r3
 8005528:	bb44      	cbnz	r4, 800557c <_malloc_r+0x88>
 800552a:	4629      	mov	r1, r5
 800552c:	4630      	mov	r0, r6
 800552e:	f7ff ffbf 	bl	80054b0 <sbrk_aligned>
 8005532:	1c43      	adds	r3, r0, #1
 8005534:	4604      	mov	r4, r0
 8005536:	d158      	bne.n	80055ea <_malloc_r+0xf6>
 8005538:	f8d8 4000 	ldr.w	r4, [r8]
 800553c:	4627      	mov	r7, r4
 800553e:	2f00      	cmp	r7, #0
 8005540:	d143      	bne.n	80055ca <_malloc_r+0xd6>
 8005542:	2c00      	cmp	r4, #0
 8005544:	d04b      	beq.n	80055de <_malloc_r+0xea>
 8005546:	6823      	ldr	r3, [r4, #0]
 8005548:	4639      	mov	r1, r7
 800554a:	4630      	mov	r0, r6
 800554c:	eb04 0903 	add.w	r9, r4, r3
 8005550:	f000 fb5c 	bl	8005c0c <_sbrk_r>
 8005554:	4581      	cmp	r9, r0
 8005556:	d142      	bne.n	80055de <_malloc_r+0xea>
 8005558:	6821      	ldr	r1, [r4, #0]
 800555a:	1a6d      	subs	r5, r5, r1
 800555c:	4629      	mov	r1, r5
 800555e:	4630      	mov	r0, r6
 8005560:	f7ff ffa6 	bl	80054b0 <sbrk_aligned>
 8005564:	3001      	adds	r0, #1
 8005566:	d03a      	beq.n	80055de <_malloc_r+0xea>
 8005568:	6823      	ldr	r3, [r4, #0]
 800556a:	442b      	add	r3, r5
 800556c:	6023      	str	r3, [r4, #0]
 800556e:	f8d8 3000 	ldr.w	r3, [r8]
 8005572:	685a      	ldr	r2, [r3, #4]
 8005574:	bb62      	cbnz	r2, 80055d0 <_malloc_r+0xdc>
 8005576:	f8c8 7000 	str.w	r7, [r8]
 800557a:	e00f      	b.n	800559c <_malloc_r+0xa8>
 800557c:	6822      	ldr	r2, [r4, #0]
 800557e:	1b52      	subs	r2, r2, r5
 8005580:	d420      	bmi.n	80055c4 <_malloc_r+0xd0>
 8005582:	2a0b      	cmp	r2, #11
 8005584:	d917      	bls.n	80055b6 <_malloc_r+0xc2>
 8005586:	1961      	adds	r1, r4, r5
 8005588:	42a3      	cmp	r3, r4
 800558a:	6025      	str	r5, [r4, #0]
 800558c:	bf18      	it	ne
 800558e:	6059      	strne	r1, [r3, #4]
 8005590:	6863      	ldr	r3, [r4, #4]
 8005592:	bf08      	it	eq
 8005594:	f8c8 1000 	streq.w	r1, [r8]
 8005598:	5162      	str	r2, [r4, r5]
 800559a:	604b      	str	r3, [r1, #4]
 800559c:	4630      	mov	r0, r6
 800559e:	f000 f82f 	bl	8005600 <__malloc_unlock>
 80055a2:	f104 000b 	add.w	r0, r4, #11
 80055a6:	1d23      	adds	r3, r4, #4
 80055a8:	f020 0007 	bic.w	r0, r0, #7
 80055ac:	1ac2      	subs	r2, r0, r3
 80055ae:	bf1c      	itt	ne
 80055b0:	1a1b      	subne	r3, r3, r0
 80055b2:	50a3      	strne	r3, [r4, r2]
 80055b4:	e7af      	b.n	8005516 <_malloc_r+0x22>
 80055b6:	6862      	ldr	r2, [r4, #4]
 80055b8:	42a3      	cmp	r3, r4
 80055ba:	bf0c      	ite	eq
 80055bc:	f8c8 2000 	streq.w	r2, [r8]
 80055c0:	605a      	strne	r2, [r3, #4]
 80055c2:	e7eb      	b.n	800559c <_malloc_r+0xa8>
 80055c4:	4623      	mov	r3, r4
 80055c6:	6864      	ldr	r4, [r4, #4]
 80055c8:	e7ae      	b.n	8005528 <_malloc_r+0x34>
 80055ca:	463c      	mov	r4, r7
 80055cc:	687f      	ldr	r7, [r7, #4]
 80055ce:	e7b6      	b.n	800553e <_malloc_r+0x4a>
 80055d0:	461a      	mov	r2, r3
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	42a3      	cmp	r3, r4
 80055d6:	d1fb      	bne.n	80055d0 <_malloc_r+0xdc>
 80055d8:	2300      	movs	r3, #0
 80055da:	6053      	str	r3, [r2, #4]
 80055dc:	e7de      	b.n	800559c <_malloc_r+0xa8>
 80055de:	230c      	movs	r3, #12
 80055e0:	6033      	str	r3, [r6, #0]
 80055e2:	4630      	mov	r0, r6
 80055e4:	f000 f80c 	bl	8005600 <__malloc_unlock>
 80055e8:	e794      	b.n	8005514 <_malloc_r+0x20>
 80055ea:	6005      	str	r5, [r0, #0]
 80055ec:	e7d6      	b.n	800559c <_malloc_r+0xa8>
 80055ee:	bf00      	nop
 80055f0:	200012b4 	.word	0x200012b4

080055f4 <__malloc_lock>:
 80055f4:	4801      	ldr	r0, [pc, #4]	@ (80055fc <__malloc_lock+0x8>)
 80055f6:	f7ff bf01 	b.w	80053fc <__retarget_lock_acquire_recursive>
 80055fa:	bf00      	nop
 80055fc:	200012ac 	.word	0x200012ac

08005600 <__malloc_unlock>:
 8005600:	4801      	ldr	r0, [pc, #4]	@ (8005608 <__malloc_unlock+0x8>)
 8005602:	f7ff befc 	b.w	80053fe <__retarget_lock_release_recursive>
 8005606:	bf00      	nop
 8005608:	200012ac 	.word	0x200012ac

0800560c <__ssputs_r>:
 800560c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005610:	688e      	ldr	r6, [r1, #8]
 8005612:	461f      	mov	r7, r3
 8005614:	42be      	cmp	r6, r7
 8005616:	680b      	ldr	r3, [r1, #0]
 8005618:	4682      	mov	sl, r0
 800561a:	460c      	mov	r4, r1
 800561c:	4690      	mov	r8, r2
 800561e:	d82d      	bhi.n	800567c <__ssputs_r+0x70>
 8005620:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005624:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005628:	d026      	beq.n	8005678 <__ssputs_r+0x6c>
 800562a:	6965      	ldr	r5, [r4, #20]
 800562c:	6909      	ldr	r1, [r1, #16]
 800562e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005632:	eba3 0901 	sub.w	r9, r3, r1
 8005636:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800563a:	1c7b      	adds	r3, r7, #1
 800563c:	444b      	add	r3, r9
 800563e:	106d      	asrs	r5, r5, #1
 8005640:	429d      	cmp	r5, r3
 8005642:	bf38      	it	cc
 8005644:	461d      	movcc	r5, r3
 8005646:	0553      	lsls	r3, r2, #21
 8005648:	d527      	bpl.n	800569a <__ssputs_r+0x8e>
 800564a:	4629      	mov	r1, r5
 800564c:	f7ff ff52 	bl	80054f4 <_malloc_r>
 8005650:	4606      	mov	r6, r0
 8005652:	b360      	cbz	r0, 80056ae <__ssputs_r+0xa2>
 8005654:	6921      	ldr	r1, [r4, #16]
 8005656:	464a      	mov	r2, r9
 8005658:	f7ff fed2 	bl	8005400 <memcpy>
 800565c:	89a3      	ldrh	r3, [r4, #12]
 800565e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005662:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005666:	81a3      	strh	r3, [r4, #12]
 8005668:	6126      	str	r6, [r4, #16]
 800566a:	6165      	str	r5, [r4, #20]
 800566c:	444e      	add	r6, r9
 800566e:	eba5 0509 	sub.w	r5, r5, r9
 8005672:	6026      	str	r6, [r4, #0]
 8005674:	60a5      	str	r5, [r4, #8]
 8005676:	463e      	mov	r6, r7
 8005678:	42be      	cmp	r6, r7
 800567a:	d900      	bls.n	800567e <__ssputs_r+0x72>
 800567c:	463e      	mov	r6, r7
 800567e:	6820      	ldr	r0, [r4, #0]
 8005680:	4632      	mov	r2, r6
 8005682:	4641      	mov	r1, r8
 8005684:	f000 faa8 	bl	8005bd8 <memmove>
 8005688:	68a3      	ldr	r3, [r4, #8]
 800568a:	1b9b      	subs	r3, r3, r6
 800568c:	60a3      	str	r3, [r4, #8]
 800568e:	6823      	ldr	r3, [r4, #0]
 8005690:	4433      	add	r3, r6
 8005692:	6023      	str	r3, [r4, #0]
 8005694:	2000      	movs	r0, #0
 8005696:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800569a:	462a      	mov	r2, r5
 800569c:	f000 fac6 	bl	8005c2c <_realloc_r>
 80056a0:	4606      	mov	r6, r0
 80056a2:	2800      	cmp	r0, #0
 80056a4:	d1e0      	bne.n	8005668 <__ssputs_r+0x5c>
 80056a6:	6921      	ldr	r1, [r4, #16]
 80056a8:	4650      	mov	r0, sl
 80056aa:	f7ff feb7 	bl	800541c <_free_r>
 80056ae:	230c      	movs	r3, #12
 80056b0:	f8ca 3000 	str.w	r3, [sl]
 80056b4:	89a3      	ldrh	r3, [r4, #12]
 80056b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80056ba:	81a3      	strh	r3, [r4, #12]
 80056bc:	f04f 30ff 	mov.w	r0, #4294967295
 80056c0:	e7e9      	b.n	8005696 <__ssputs_r+0x8a>
	...

080056c4 <_svfiprintf_r>:
 80056c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056c8:	4698      	mov	r8, r3
 80056ca:	898b      	ldrh	r3, [r1, #12]
 80056cc:	061b      	lsls	r3, r3, #24
 80056ce:	b09d      	sub	sp, #116	@ 0x74
 80056d0:	4607      	mov	r7, r0
 80056d2:	460d      	mov	r5, r1
 80056d4:	4614      	mov	r4, r2
 80056d6:	d510      	bpl.n	80056fa <_svfiprintf_r+0x36>
 80056d8:	690b      	ldr	r3, [r1, #16]
 80056da:	b973      	cbnz	r3, 80056fa <_svfiprintf_r+0x36>
 80056dc:	2140      	movs	r1, #64	@ 0x40
 80056de:	f7ff ff09 	bl	80054f4 <_malloc_r>
 80056e2:	6028      	str	r0, [r5, #0]
 80056e4:	6128      	str	r0, [r5, #16]
 80056e6:	b930      	cbnz	r0, 80056f6 <_svfiprintf_r+0x32>
 80056e8:	230c      	movs	r3, #12
 80056ea:	603b      	str	r3, [r7, #0]
 80056ec:	f04f 30ff 	mov.w	r0, #4294967295
 80056f0:	b01d      	add	sp, #116	@ 0x74
 80056f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056f6:	2340      	movs	r3, #64	@ 0x40
 80056f8:	616b      	str	r3, [r5, #20]
 80056fa:	2300      	movs	r3, #0
 80056fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80056fe:	2320      	movs	r3, #32
 8005700:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005704:	f8cd 800c 	str.w	r8, [sp, #12]
 8005708:	2330      	movs	r3, #48	@ 0x30
 800570a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80058a8 <_svfiprintf_r+0x1e4>
 800570e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005712:	f04f 0901 	mov.w	r9, #1
 8005716:	4623      	mov	r3, r4
 8005718:	469a      	mov	sl, r3
 800571a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800571e:	b10a      	cbz	r2, 8005724 <_svfiprintf_r+0x60>
 8005720:	2a25      	cmp	r2, #37	@ 0x25
 8005722:	d1f9      	bne.n	8005718 <_svfiprintf_r+0x54>
 8005724:	ebba 0b04 	subs.w	fp, sl, r4
 8005728:	d00b      	beq.n	8005742 <_svfiprintf_r+0x7e>
 800572a:	465b      	mov	r3, fp
 800572c:	4622      	mov	r2, r4
 800572e:	4629      	mov	r1, r5
 8005730:	4638      	mov	r0, r7
 8005732:	f7ff ff6b 	bl	800560c <__ssputs_r>
 8005736:	3001      	adds	r0, #1
 8005738:	f000 80a7 	beq.w	800588a <_svfiprintf_r+0x1c6>
 800573c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800573e:	445a      	add	r2, fp
 8005740:	9209      	str	r2, [sp, #36]	@ 0x24
 8005742:	f89a 3000 	ldrb.w	r3, [sl]
 8005746:	2b00      	cmp	r3, #0
 8005748:	f000 809f 	beq.w	800588a <_svfiprintf_r+0x1c6>
 800574c:	2300      	movs	r3, #0
 800574e:	f04f 32ff 	mov.w	r2, #4294967295
 8005752:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005756:	f10a 0a01 	add.w	sl, sl, #1
 800575a:	9304      	str	r3, [sp, #16]
 800575c:	9307      	str	r3, [sp, #28]
 800575e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005762:	931a      	str	r3, [sp, #104]	@ 0x68
 8005764:	4654      	mov	r4, sl
 8005766:	2205      	movs	r2, #5
 8005768:	f814 1b01 	ldrb.w	r1, [r4], #1
 800576c:	484e      	ldr	r0, [pc, #312]	@ (80058a8 <_svfiprintf_r+0x1e4>)
 800576e:	f7fa fd37 	bl	80001e0 <memchr>
 8005772:	9a04      	ldr	r2, [sp, #16]
 8005774:	b9d8      	cbnz	r0, 80057ae <_svfiprintf_r+0xea>
 8005776:	06d0      	lsls	r0, r2, #27
 8005778:	bf44      	itt	mi
 800577a:	2320      	movmi	r3, #32
 800577c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005780:	0711      	lsls	r1, r2, #28
 8005782:	bf44      	itt	mi
 8005784:	232b      	movmi	r3, #43	@ 0x2b
 8005786:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800578a:	f89a 3000 	ldrb.w	r3, [sl]
 800578e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005790:	d015      	beq.n	80057be <_svfiprintf_r+0xfa>
 8005792:	9a07      	ldr	r2, [sp, #28]
 8005794:	4654      	mov	r4, sl
 8005796:	2000      	movs	r0, #0
 8005798:	f04f 0c0a 	mov.w	ip, #10
 800579c:	4621      	mov	r1, r4
 800579e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80057a2:	3b30      	subs	r3, #48	@ 0x30
 80057a4:	2b09      	cmp	r3, #9
 80057a6:	d94b      	bls.n	8005840 <_svfiprintf_r+0x17c>
 80057a8:	b1b0      	cbz	r0, 80057d8 <_svfiprintf_r+0x114>
 80057aa:	9207      	str	r2, [sp, #28]
 80057ac:	e014      	b.n	80057d8 <_svfiprintf_r+0x114>
 80057ae:	eba0 0308 	sub.w	r3, r0, r8
 80057b2:	fa09 f303 	lsl.w	r3, r9, r3
 80057b6:	4313      	orrs	r3, r2
 80057b8:	9304      	str	r3, [sp, #16]
 80057ba:	46a2      	mov	sl, r4
 80057bc:	e7d2      	b.n	8005764 <_svfiprintf_r+0xa0>
 80057be:	9b03      	ldr	r3, [sp, #12]
 80057c0:	1d19      	adds	r1, r3, #4
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	9103      	str	r1, [sp, #12]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	bfbb      	ittet	lt
 80057ca:	425b      	neglt	r3, r3
 80057cc:	f042 0202 	orrlt.w	r2, r2, #2
 80057d0:	9307      	strge	r3, [sp, #28]
 80057d2:	9307      	strlt	r3, [sp, #28]
 80057d4:	bfb8      	it	lt
 80057d6:	9204      	strlt	r2, [sp, #16]
 80057d8:	7823      	ldrb	r3, [r4, #0]
 80057da:	2b2e      	cmp	r3, #46	@ 0x2e
 80057dc:	d10a      	bne.n	80057f4 <_svfiprintf_r+0x130>
 80057de:	7863      	ldrb	r3, [r4, #1]
 80057e0:	2b2a      	cmp	r3, #42	@ 0x2a
 80057e2:	d132      	bne.n	800584a <_svfiprintf_r+0x186>
 80057e4:	9b03      	ldr	r3, [sp, #12]
 80057e6:	1d1a      	adds	r2, r3, #4
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	9203      	str	r2, [sp, #12]
 80057ec:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80057f0:	3402      	adds	r4, #2
 80057f2:	9305      	str	r3, [sp, #20]
 80057f4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80058b8 <_svfiprintf_r+0x1f4>
 80057f8:	7821      	ldrb	r1, [r4, #0]
 80057fa:	2203      	movs	r2, #3
 80057fc:	4650      	mov	r0, sl
 80057fe:	f7fa fcef 	bl	80001e0 <memchr>
 8005802:	b138      	cbz	r0, 8005814 <_svfiprintf_r+0x150>
 8005804:	9b04      	ldr	r3, [sp, #16]
 8005806:	eba0 000a 	sub.w	r0, r0, sl
 800580a:	2240      	movs	r2, #64	@ 0x40
 800580c:	4082      	lsls	r2, r0
 800580e:	4313      	orrs	r3, r2
 8005810:	3401      	adds	r4, #1
 8005812:	9304      	str	r3, [sp, #16]
 8005814:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005818:	4824      	ldr	r0, [pc, #144]	@ (80058ac <_svfiprintf_r+0x1e8>)
 800581a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800581e:	2206      	movs	r2, #6
 8005820:	f7fa fcde 	bl	80001e0 <memchr>
 8005824:	2800      	cmp	r0, #0
 8005826:	d036      	beq.n	8005896 <_svfiprintf_r+0x1d2>
 8005828:	4b21      	ldr	r3, [pc, #132]	@ (80058b0 <_svfiprintf_r+0x1ec>)
 800582a:	bb1b      	cbnz	r3, 8005874 <_svfiprintf_r+0x1b0>
 800582c:	9b03      	ldr	r3, [sp, #12]
 800582e:	3307      	adds	r3, #7
 8005830:	f023 0307 	bic.w	r3, r3, #7
 8005834:	3308      	adds	r3, #8
 8005836:	9303      	str	r3, [sp, #12]
 8005838:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800583a:	4433      	add	r3, r6
 800583c:	9309      	str	r3, [sp, #36]	@ 0x24
 800583e:	e76a      	b.n	8005716 <_svfiprintf_r+0x52>
 8005840:	fb0c 3202 	mla	r2, ip, r2, r3
 8005844:	460c      	mov	r4, r1
 8005846:	2001      	movs	r0, #1
 8005848:	e7a8      	b.n	800579c <_svfiprintf_r+0xd8>
 800584a:	2300      	movs	r3, #0
 800584c:	3401      	adds	r4, #1
 800584e:	9305      	str	r3, [sp, #20]
 8005850:	4619      	mov	r1, r3
 8005852:	f04f 0c0a 	mov.w	ip, #10
 8005856:	4620      	mov	r0, r4
 8005858:	f810 2b01 	ldrb.w	r2, [r0], #1
 800585c:	3a30      	subs	r2, #48	@ 0x30
 800585e:	2a09      	cmp	r2, #9
 8005860:	d903      	bls.n	800586a <_svfiprintf_r+0x1a6>
 8005862:	2b00      	cmp	r3, #0
 8005864:	d0c6      	beq.n	80057f4 <_svfiprintf_r+0x130>
 8005866:	9105      	str	r1, [sp, #20]
 8005868:	e7c4      	b.n	80057f4 <_svfiprintf_r+0x130>
 800586a:	fb0c 2101 	mla	r1, ip, r1, r2
 800586e:	4604      	mov	r4, r0
 8005870:	2301      	movs	r3, #1
 8005872:	e7f0      	b.n	8005856 <_svfiprintf_r+0x192>
 8005874:	ab03      	add	r3, sp, #12
 8005876:	9300      	str	r3, [sp, #0]
 8005878:	462a      	mov	r2, r5
 800587a:	4b0e      	ldr	r3, [pc, #56]	@ (80058b4 <_svfiprintf_r+0x1f0>)
 800587c:	a904      	add	r1, sp, #16
 800587e:	4638      	mov	r0, r7
 8005880:	f3af 8000 	nop.w
 8005884:	1c42      	adds	r2, r0, #1
 8005886:	4606      	mov	r6, r0
 8005888:	d1d6      	bne.n	8005838 <_svfiprintf_r+0x174>
 800588a:	89ab      	ldrh	r3, [r5, #12]
 800588c:	065b      	lsls	r3, r3, #25
 800588e:	f53f af2d 	bmi.w	80056ec <_svfiprintf_r+0x28>
 8005892:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005894:	e72c      	b.n	80056f0 <_svfiprintf_r+0x2c>
 8005896:	ab03      	add	r3, sp, #12
 8005898:	9300      	str	r3, [sp, #0]
 800589a:	462a      	mov	r2, r5
 800589c:	4b05      	ldr	r3, [pc, #20]	@ (80058b4 <_svfiprintf_r+0x1f0>)
 800589e:	a904      	add	r1, sp, #16
 80058a0:	4638      	mov	r0, r7
 80058a2:	f000 f879 	bl	8005998 <_printf_i>
 80058a6:	e7ed      	b.n	8005884 <_svfiprintf_r+0x1c0>
 80058a8:	08005d28 	.word	0x08005d28
 80058ac:	08005d32 	.word	0x08005d32
 80058b0:	00000000 	.word	0x00000000
 80058b4:	0800560d 	.word	0x0800560d
 80058b8:	08005d2e 	.word	0x08005d2e

080058bc <_printf_common>:
 80058bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058c0:	4616      	mov	r6, r2
 80058c2:	4698      	mov	r8, r3
 80058c4:	688a      	ldr	r2, [r1, #8]
 80058c6:	690b      	ldr	r3, [r1, #16]
 80058c8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80058cc:	4293      	cmp	r3, r2
 80058ce:	bfb8      	it	lt
 80058d0:	4613      	movlt	r3, r2
 80058d2:	6033      	str	r3, [r6, #0]
 80058d4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80058d8:	4607      	mov	r7, r0
 80058da:	460c      	mov	r4, r1
 80058dc:	b10a      	cbz	r2, 80058e2 <_printf_common+0x26>
 80058de:	3301      	adds	r3, #1
 80058e0:	6033      	str	r3, [r6, #0]
 80058e2:	6823      	ldr	r3, [r4, #0]
 80058e4:	0699      	lsls	r1, r3, #26
 80058e6:	bf42      	ittt	mi
 80058e8:	6833      	ldrmi	r3, [r6, #0]
 80058ea:	3302      	addmi	r3, #2
 80058ec:	6033      	strmi	r3, [r6, #0]
 80058ee:	6825      	ldr	r5, [r4, #0]
 80058f0:	f015 0506 	ands.w	r5, r5, #6
 80058f4:	d106      	bne.n	8005904 <_printf_common+0x48>
 80058f6:	f104 0a19 	add.w	sl, r4, #25
 80058fa:	68e3      	ldr	r3, [r4, #12]
 80058fc:	6832      	ldr	r2, [r6, #0]
 80058fe:	1a9b      	subs	r3, r3, r2
 8005900:	42ab      	cmp	r3, r5
 8005902:	dc26      	bgt.n	8005952 <_printf_common+0x96>
 8005904:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005908:	6822      	ldr	r2, [r4, #0]
 800590a:	3b00      	subs	r3, #0
 800590c:	bf18      	it	ne
 800590e:	2301      	movne	r3, #1
 8005910:	0692      	lsls	r2, r2, #26
 8005912:	d42b      	bmi.n	800596c <_printf_common+0xb0>
 8005914:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005918:	4641      	mov	r1, r8
 800591a:	4638      	mov	r0, r7
 800591c:	47c8      	blx	r9
 800591e:	3001      	adds	r0, #1
 8005920:	d01e      	beq.n	8005960 <_printf_common+0xa4>
 8005922:	6823      	ldr	r3, [r4, #0]
 8005924:	6922      	ldr	r2, [r4, #16]
 8005926:	f003 0306 	and.w	r3, r3, #6
 800592a:	2b04      	cmp	r3, #4
 800592c:	bf02      	ittt	eq
 800592e:	68e5      	ldreq	r5, [r4, #12]
 8005930:	6833      	ldreq	r3, [r6, #0]
 8005932:	1aed      	subeq	r5, r5, r3
 8005934:	68a3      	ldr	r3, [r4, #8]
 8005936:	bf0c      	ite	eq
 8005938:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800593c:	2500      	movne	r5, #0
 800593e:	4293      	cmp	r3, r2
 8005940:	bfc4      	itt	gt
 8005942:	1a9b      	subgt	r3, r3, r2
 8005944:	18ed      	addgt	r5, r5, r3
 8005946:	2600      	movs	r6, #0
 8005948:	341a      	adds	r4, #26
 800594a:	42b5      	cmp	r5, r6
 800594c:	d11a      	bne.n	8005984 <_printf_common+0xc8>
 800594e:	2000      	movs	r0, #0
 8005950:	e008      	b.n	8005964 <_printf_common+0xa8>
 8005952:	2301      	movs	r3, #1
 8005954:	4652      	mov	r2, sl
 8005956:	4641      	mov	r1, r8
 8005958:	4638      	mov	r0, r7
 800595a:	47c8      	blx	r9
 800595c:	3001      	adds	r0, #1
 800595e:	d103      	bne.n	8005968 <_printf_common+0xac>
 8005960:	f04f 30ff 	mov.w	r0, #4294967295
 8005964:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005968:	3501      	adds	r5, #1
 800596a:	e7c6      	b.n	80058fa <_printf_common+0x3e>
 800596c:	18e1      	adds	r1, r4, r3
 800596e:	1c5a      	adds	r2, r3, #1
 8005970:	2030      	movs	r0, #48	@ 0x30
 8005972:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005976:	4422      	add	r2, r4
 8005978:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800597c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005980:	3302      	adds	r3, #2
 8005982:	e7c7      	b.n	8005914 <_printf_common+0x58>
 8005984:	2301      	movs	r3, #1
 8005986:	4622      	mov	r2, r4
 8005988:	4641      	mov	r1, r8
 800598a:	4638      	mov	r0, r7
 800598c:	47c8      	blx	r9
 800598e:	3001      	adds	r0, #1
 8005990:	d0e6      	beq.n	8005960 <_printf_common+0xa4>
 8005992:	3601      	adds	r6, #1
 8005994:	e7d9      	b.n	800594a <_printf_common+0x8e>
	...

08005998 <_printf_i>:
 8005998:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800599c:	7e0f      	ldrb	r7, [r1, #24]
 800599e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80059a0:	2f78      	cmp	r7, #120	@ 0x78
 80059a2:	4691      	mov	r9, r2
 80059a4:	4680      	mov	r8, r0
 80059a6:	460c      	mov	r4, r1
 80059a8:	469a      	mov	sl, r3
 80059aa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80059ae:	d807      	bhi.n	80059c0 <_printf_i+0x28>
 80059b0:	2f62      	cmp	r7, #98	@ 0x62
 80059b2:	d80a      	bhi.n	80059ca <_printf_i+0x32>
 80059b4:	2f00      	cmp	r7, #0
 80059b6:	f000 80d2 	beq.w	8005b5e <_printf_i+0x1c6>
 80059ba:	2f58      	cmp	r7, #88	@ 0x58
 80059bc:	f000 80b9 	beq.w	8005b32 <_printf_i+0x19a>
 80059c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80059c4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80059c8:	e03a      	b.n	8005a40 <_printf_i+0xa8>
 80059ca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80059ce:	2b15      	cmp	r3, #21
 80059d0:	d8f6      	bhi.n	80059c0 <_printf_i+0x28>
 80059d2:	a101      	add	r1, pc, #4	@ (adr r1, 80059d8 <_printf_i+0x40>)
 80059d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80059d8:	08005a31 	.word	0x08005a31
 80059dc:	08005a45 	.word	0x08005a45
 80059e0:	080059c1 	.word	0x080059c1
 80059e4:	080059c1 	.word	0x080059c1
 80059e8:	080059c1 	.word	0x080059c1
 80059ec:	080059c1 	.word	0x080059c1
 80059f0:	08005a45 	.word	0x08005a45
 80059f4:	080059c1 	.word	0x080059c1
 80059f8:	080059c1 	.word	0x080059c1
 80059fc:	080059c1 	.word	0x080059c1
 8005a00:	080059c1 	.word	0x080059c1
 8005a04:	08005b45 	.word	0x08005b45
 8005a08:	08005a6f 	.word	0x08005a6f
 8005a0c:	08005aff 	.word	0x08005aff
 8005a10:	080059c1 	.word	0x080059c1
 8005a14:	080059c1 	.word	0x080059c1
 8005a18:	08005b67 	.word	0x08005b67
 8005a1c:	080059c1 	.word	0x080059c1
 8005a20:	08005a6f 	.word	0x08005a6f
 8005a24:	080059c1 	.word	0x080059c1
 8005a28:	080059c1 	.word	0x080059c1
 8005a2c:	08005b07 	.word	0x08005b07
 8005a30:	6833      	ldr	r3, [r6, #0]
 8005a32:	1d1a      	adds	r2, r3, #4
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	6032      	str	r2, [r6, #0]
 8005a38:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005a3c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005a40:	2301      	movs	r3, #1
 8005a42:	e09d      	b.n	8005b80 <_printf_i+0x1e8>
 8005a44:	6833      	ldr	r3, [r6, #0]
 8005a46:	6820      	ldr	r0, [r4, #0]
 8005a48:	1d19      	adds	r1, r3, #4
 8005a4a:	6031      	str	r1, [r6, #0]
 8005a4c:	0606      	lsls	r6, r0, #24
 8005a4e:	d501      	bpl.n	8005a54 <_printf_i+0xbc>
 8005a50:	681d      	ldr	r5, [r3, #0]
 8005a52:	e003      	b.n	8005a5c <_printf_i+0xc4>
 8005a54:	0645      	lsls	r5, r0, #25
 8005a56:	d5fb      	bpl.n	8005a50 <_printf_i+0xb8>
 8005a58:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005a5c:	2d00      	cmp	r5, #0
 8005a5e:	da03      	bge.n	8005a68 <_printf_i+0xd0>
 8005a60:	232d      	movs	r3, #45	@ 0x2d
 8005a62:	426d      	negs	r5, r5
 8005a64:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005a68:	4859      	ldr	r0, [pc, #356]	@ (8005bd0 <_printf_i+0x238>)
 8005a6a:	230a      	movs	r3, #10
 8005a6c:	e011      	b.n	8005a92 <_printf_i+0xfa>
 8005a6e:	6821      	ldr	r1, [r4, #0]
 8005a70:	6833      	ldr	r3, [r6, #0]
 8005a72:	0608      	lsls	r0, r1, #24
 8005a74:	f853 5b04 	ldr.w	r5, [r3], #4
 8005a78:	d402      	bmi.n	8005a80 <_printf_i+0xe8>
 8005a7a:	0649      	lsls	r1, r1, #25
 8005a7c:	bf48      	it	mi
 8005a7e:	b2ad      	uxthmi	r5, r5
 8005a80:	2f6f      	cmp	r7, #111	@ 0x6f
 8005a82:	4853      	ldr	r0, [pc, #332]	@ (8005bd0 <_printf_i+0x238>)
 8005a84:	6033      	str	r3, [r6, #0]
 8005a86:	bf14      	ite	ne
 8005a88:	230a      	movne	r3, #10
 8005a8a:	2308      	moveq	r3, #8
 8005a8c:	2100      	movs	r1, #0
 8005a8e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005a92:	6866      	ldr	r6, [r4, #4]
 8005a94:	60a6      	str	r6, [r4, #8]
 8005a96:	2e00      	cmp	r6, #0
 8005a98:	bfa2      	ittt	ge
 8005a9a:	6821      	ldrge	r1, [r4, #0]
 8005a9c:	f021 0104 	bicge.w	r1, r1, #4
 8005aa0:	6021      	strge	r1, [r4, #0]
 8005aa2:	b90d      	cbnz	r5, 8005aa8 <_printf_i+0x110>
 8005aa4:	2e00      	cmp	r6, #0
 8005aa6:	d04b      	beq.n	8005b40 <_printf_i+0x1a8>
 8005aa8:	4616      	mov	r6, r2
 8005aaa:	fbb5 f1f3 	udiv	r1, r5, r3
 8005aae:	fb03 5711 	mls	r7, r3, r1, r5
 8005ab2:	5dc7      	ldrb	r7, [r0, r7]
 8005ab4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005ab8:	462f      	mov	r7, r5
 8005aba:	42bb      	cmp	r3, r7
 8005abc:	460d      	mov	r5, r1
 8005abe:	d9f4      	bls.n	8005aaa <_printf_i+0x112>
 8005ac0:	2b08      	cmp	r3, #8
 8005ac2:	d10b      	bne.n	8005adc <_printf_i+0x144>
 8005ac4:	6823      	ldr	r3, [r4, #0]
 8005ac6:	07df      	lsls	r7, r3, #31
 8005ac8:	d508      	bpl.n	8005adc <_printf_i+0x144>
 8005aca:	6923      	ldr	r3, [r4, #16]
 8005acc:	6861      	ldr	r1, [r4, #4]
 8005ace:	4299      	cmp	r1, r3
 8005ad0:	bfde      	ittt	le
 8005ad2:	2330      	movle	r3, #48	@ 0x30
 8005ad4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005ad8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005adc:	1b92      	subs	r2, r2, r6
 8005ade:	6122      	str	r2, [r4, #16]
 8005ae0:	f8cd a000 	str.w	sl, [sp]
 8005ae4:	464b      	mov	r3, r9
 8005ae6:	aa03      	add	r2, sp, #12
 8005ae8:	4621      	mov	r1, r4
 8005aea:	4640      	mov	r0, r8
 8005aec:	f7ff fee6 	bl	80058bc <_printf_common>
 8005af0:	3001      	adds	r0, #1
 8005af2:	d14a      	bne.n	8005b8a <_printf_i+0x1f2>
 8005af4:	f04f 30ff 	mov.w	r0, #4294967295
 8005af8:	b004      	add	sp, #16
 8005afa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005afe:	6823      	ldr	r3, [r4, #0]
 8005b00:	f043 0320 	orr.w	r3, r3, #32
 8005b04:	6023      	str	r3, [r4, #0]
 8005b06:	4833      	ldr	r0, [pc, #204]	@ (8005bd4 <_printf_i+0x23c>)
 8005b08:	2778      	movs	r7, #120	@ 0x78
 8005b0a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005b0e:	6823      	ldr	r3, [r4, #0]
 8005b10:	6831      	ldr	r1, [r6, #0]
 8005b12:	061f      	lsls	r7, r3, #24
 8005b14:	f851 5b04 	ldr.w	r5, [r1], #4
 8005b18:	d402      	bmi.n	8005b20 <_printf_i+0x188>
 8005b1a:	065f      	lsls	r7, r3, #25
 8005b1c:	bf48      	it	mi
 8005b1e:	b2ad      	uxthmi	r5, r5
 8005b20:	6031      	str	r1, [r6, #0]
 8005b22:	07d9      	lsls	r1, r3, #31
 8005b24:	bf44      	itt	mi
 8005b26:	f043 0320 	orrmi.w	r3, r3, #32
 8005b2a:	6023      	strmi	r3, [r4, #0]
 8005b2c:	b11d      	cbz	r5, 8005b36 <_printf_i+0x19e>
 8005b2e:	2310      	movs	r3, #16
 8005b30:	e7ac      	b.n	8005a8c <_printf_i+0xf4>
 8005b32:	4827      	ldr	r0, [pc, #156]	@ (8005bd0 <_printf_i+0x238>)
 8005b34:	e7e9      	b.n	8005b0a <_printf_i+0x172>
 8005b36:	6823      	ldr	r3, [r4, #0]
 8005b38:	f023 0320 	bic.w	r3, r3, #32
 8005b3c:	6023      	str	r3, [r4, #0]
 8005b3e:	e7f6      	b.n	8005b2e <_printf_i+0x196>
 8005b40:	4616      	mov	r6, r2
 8005b42:	e7bd      	b.n	8005ac0 <_printf_i+0x128>
 8005b44:	6833      	ldr	r3, [r6, #0]
 8005b46:	6825      	ldr	r5, [r4, #0]
 8005b48:	6961      	ldr	r1, [r4, #20]
 8005b4a:	1d18      	adds	r0, r3, #4
 8005b4c:	6030      	str	r0, [r6, #0]
 8005b4e:	062e      	lsls	r6, r5, #24
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	d501      	bpl.n	8005b58 <_printf_i+0x1c0>
 8005b54:	6019      	str	r1, [r3, #0]
 8005b56:	e002      	b.n	8005b5e <_printf_i+0x1c6>
 8005b58:	0668      	lsls	r0, r5, #25
 8005b5a:	d5fb      	bpl.n	8005b54 <_printf_i+0x1bc>
 8005b5c:	8019      	strh	r1, [r3, #0]
 8005b5e:	2300      	movs	r3, #0
 8005b60:	6123      	str	r3, [r4, #16]
 8005b62:	4616      	mov	r6, r2
 8005b64:	e7bc      	b.n	8005ae0 <_printf_i+0x148>
 8005b66:	6833      	ldr	r3, [r6, #0]
 8005b68:	1d1a      	adds	r2, r3, #4
 8005b6a:	6032      	str	r2, [r6, #0]
 8005b6c:	681e      	ldr	r6, [r3, #0]
 8005b6e:	6862      	ldr	r2, [r4, #4]
 8005b70:	2100      	movs	r1, #0
 8005b72:	4630      	mov	r0, r6
 8005b74:	f7fa fb34 	bl	80001e0 <memchr>
 8005b78:	b108      	cbz	r0, 8005b7e <_printf_i+0x1e6>
 8005b7a:	1b80      	subs	r0, r0, r6
 8005b7c:	6060      	str	r0, [r4, #4]
 8005b7e:	6863      	ldr	r3, [r4, #4]
 8005b80:	6123      	str	r3, [r4, #16]
 8005b82:	2300      	movs	r3, #0
 8005b84:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005b88:	e7aa      	b.n	8005ae0 <_printf_i+0x148>
 8005b8a:	6923      	ldr	r3, [r4, #16]
 8005b8c:	4632      	mov	r2, r6
 8005b8e:	4649      	mov	r1, r9
 8005b90:	4640      	mov	r0, r8
 8005b92:	47d0      	blx	sl
 8005b94:	3001      	adds	r0, #1
 8005b96:	d0ad      	beq.n	8005af4 <_printf_i+0x15c>
 8005b98:	6823      	ldr	r3, [r4, #0]
 8005b9a:	079b      	lsls	r3, r3, #30
 8005b9c:	d413      	bmi.n	8005bc6 <_printf_i+0x22e>
 8005b9e:	68e0      	ldr	r0, [r4, #12]
 8005ba0:	9b03      	ldr	r3, [sp, #12]
 8005ba2:	4298      	cmp	r0, r3
 8005ba4:	bfb8      	it	lt
 8005ba6:	4618      	movlt	r0, r3
 8005ba8:	e7a6      	b.n	8005af8 <_printf_i+0x160>
 8005baa:	2301      	movs	r3, #1
 8005bac:	4632      	mov	r2, r6
 8005bae:	4649      	mov	r1, r9
 8005bb0:	4640      	mov	r0, r8
 8005bb2:	47d0      	blx	sl
 8005bb4:	3001      	adds	r0, #1
 8005bb6:	d09d      	beq.n	8005af4 <_printf_i+0x15c>
 8005bb8:	3501      	adds	r5, #1
 8005bba:	68e3      	ldr	r3, [r4, #12]
 8005bbc:	9903      	ldr	r1, [sp, #12]
 8005bbe:	1a5b      	subs	r3, r3, r1
 8005bc0:	42ab      	cmp	r3, r5
 8005bc2:	dcf2      	bgt.n	8005baa <_printf_i+0x212>
 8005bc4:	e7eb      	b.n	8005b9e <_printf_i+0x206>
 8005bc6:	2500      	movs	r5, #0
 8005bc8:	f104 0619 	add.w	r6, r4, #25
 8005bcc:	e7f5      	b.n	8005bba <_printf_i+0x222>
 8005bce:	bf00      	nop
 8005bd0:	08005d39 	.word	0x08005d39
 8005bd4:	08005d4a 	.word	0x08005d4a

08005bd8 <memmove>:
 8005bd8:	4288      	cmp	r0, r1
 8005bda:	b510      	push	{r4, lr}
 8005bdc:	eb01 0402 	add.w	r4, r1, r2
 8005be0:	d902      	bls.n	8005be8 <memmove+0x10>
 8005be2:	4284      	cmp	r4, r0
 8005be4:	4623      	mov	r3, r4
 8005be6:	d807      	bhi.n	8005bf8 <memmove+0x20>
 8005be8:	1e43      	subs	r3, r0, #1
 8005bea:	42a1      	cmp	r1, r4
 8005bec:	d008      	beq.n	8005c00 <memmove+0x28>
 8005bee:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005bf2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005bf6:	e7f8      	b.n	8005bea <memmove+0x12>
 8005bf8:	4402      	add	r2, r0
 8005bfa:	4601      	mov	r1, r0
 8005bfc:	428a      	cmp	r2, r1
 8005bfe:	d100      	bne.n	8005c02 <memmove+0x2a>
 8005c00:	bd10      	pop	{r4, pc}
 8005c02:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005c06:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005c0a:	e7f7      	b.n	8005bfc <memmove+0x24>

08005c0c <_sbrk_r>:
 8005c0c:	b538      	push	{r3, r4, r5, lr}
 8005c0e:	4d06      	ldr	r5, [pc, #24]	@ (8005c28 <_sbrk_r+0x1c>)
 8005c10:	2300      	movs	r3, #0
 8005c12:	4604      	mov	r4, r0
 8005c14:	4608      	mov	r0, r1
 8005c16:	602b      	str	r3, [r5, #0]
 8005c18:	f7fa fe9a 	bl	8000950 <_sbrk>
 8005c1c:	1c43      	adds	r3, r0, #1
 8005c1e:	d102      	bne.n	8005c26 <_sbrk_r+0x1a>
 8005c20:	682b      	ldr	r3, [r5, #0]
 8005c22:	b103      	cbz	r3, 8005c26 <_sbrk_r+0x1a>
 8005c24:	6023      	str	r3, [r4, #0]
 8005c26:	bd38      	pop	{r3, r4, r5, pc}
 8005c28:	200012a8 	.word	0x200012a8

08005c2c <_realloc_r>:
 8005c2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c30:	4680      	mov	r8, r0
 8005c32:	4615      	mov	r5, r2
 8005c34:	460c      	mov	r4, r1
 8005c36:	b921      	cbnz	r1, 8005c42 <_realloc_r+0x16>
 8005c38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c3c:	4611      	mov	r1, r2
 8005c3e:	f7ff bc59 	b.w	80054f4 <_malloc_r>
 8005c42:	b92a      	cbnz	r2, 8005c50 <_realloc_r+0x24>
 8005c44:	f7ff fbea 	bl	800541c <_free_r>
 8005c48:	2400      	movs	r4, #0
 8005c4a:	4620      	mov	r0, r4
 8005c4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c50:	f000 f81a 	bl	8005c88 <_malloc_usable_size_r>
 8005c54:	4285      	cmp	r5, r0
 8005c56:	4606      	mov	r6, r0
 8005c58:	d802      	bhi.n	8005c60 <_realloc_r+0x34>
 8005c5a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005c5e:	d8f4      	bhi.n	8005c4a <_realloc_r+0x1e>
 8005c60:	4629      	mov	r1, r5
 8005c62:	4640      	mov	r0, r8
 8005c64:	f7ff fc46 	bl	80054f4 <_malloc_r>
 8005c68:	4607      	mov	r7, r0
 8005c6a:	2800      	cmp	r0, #0
 8005c6c:	d0ec      	beq.n	8005c48 <_realloc_r+0x1c>
 8005c6e:	42b5      	cmp	r5, r6
 8005c70:	462a      	mov	r2, r5
 8005c72:	4621      	mov	r1, r4
 8005c74:	bf28      	it	cs
 8005c76:	4632      	movcs	r2, r6
 8005c78:	f7ff fbc2 	bl	8005400 <memcpy>
 8005c7c:	4621      	mov	r1, r4
 8005c7e:	4640      	mov	r0, r8
 8005c80:	f7ff fbcc 	bl	800541c <_free_r>
 8005c84:	463c      	mov	r4, r7
 8005c86:	e7e0      	b.n	8005c4a <_realloc_r+0x1e>

08005c88 <_malloc_usable_size_r>:
 8005c88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c8c:	1f18      	subs	r0, r3, #4
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	bfbc      	itt	lt
 8005c92:	580b      	ldrlt	r3, [r1, r0]
 8005c94:	18c0      	addlt	r0, r0, r3
 8005c96:	4770      	bx	lr

08005c98 <_init>:
 8005c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c9a:	bf00      	nop
 8005c9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c9e:	bc08      	pop	{r3}
 8005ca0:	469e      	mov	lr, r3
 8005ca2:	4770      	bx	lr

08005ca4 <_fini>:
 8005ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ca6:	bf00      	nop
 8005ca8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005caa:	bc08      	pop	{r3}
 8005cac:	469e      	mov	lr, r3
 8005cae:	4770      	bx	lr
