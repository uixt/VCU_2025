
VCU_2025.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e08  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  08004f98  08004f98  00005f98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800504c  0800504c  00007010  2**0
                  CONTENTS
  4 .ARM          00000000  0800504c  0800504c  00007010  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800504c  0800504c  00007010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800504c  0800504c  0000604c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005050  08005050  00006050  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08005054  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000010e0  20000010  08005064  00007010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200010f0  08005064  000070f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014387  00000000  00000000  00007040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002dd4  00000000  00000000  0001b3c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011d8  00000000  00000000  0001e1a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ddb  00000000  00000000  0001f378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e076  00000000  00000000  00020153  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015fec  00000000  00000000  0003e1c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b08e6  00000000  00000000  000541b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00104a9b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a18  00000000  00000000  00104ae0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  001094f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004f80 	.word	0x08004f80

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08004f80 	.word	0x08004f80

080001d0 <StartCanRxTask>:
extern CAN_HandleTypeDef hcan;
extern UART_HandleTypeDef huart2;
extern volatile uint8_t datacheck;

void StartCanRxTask(void const * argument)
{
 80001d0:	b580      	push	{r7, lr}
 80001d2:	b09c      	sub	sp, #112	@ 0x70
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	6078      	str	r0, [r7, #4]
//                sprintf(msg, "RX CAN ID: 0x%X Data: %02X %02X\r\n", rxHeader.StdId, rxData[0], rxData[1]);
//                HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
//            }
//        }

        osDelay(10); // small delay to avoid hogging CPU
 80001d8:	200a      	movs	r0, #10
 80001da:	f003 fcbf 	bl	8003b5c <osDelay>
 80001de:	e7fb      	b.n	80001d8 <StartCanRxTask+0x8>

080001e0 <StartCanTxTask>:

extern CAN_HandleTypeDef hcan;


void StartCanTxTask(void const * argument)
{
 80001e0:	b580      	push	{r7, lr}
 80001e2:	b08c      	sub	sp, #48	@ 0x30
 80001e4:	af00      	add	r7, sp, #0
 80001e6:	6078      	str	r0, [r7, #4]
    CAN_TxHeaderTypeDef txHeader;
    uint8_t txData[8];
    uint32_t txMailbox;

    // Set up header
    txHeader.IDE = CAN_ID_STD;
 80001e8:	2300      	movs	r3, #0
 80001ea:	623b      	str	r3, [r7, #32]
    txHeader.StdId = 0x501;
 80001ec:	f240 5301 	movw	r3, #1281	@ 0x501
 80001f0:	61bb      	str	r3, [r7, #24]
    txHeader.RTR = CAN_RTR_DATA;
 80001f2:	2300      	movs	r3, #0
 80001f4:	627b      	str	r3, [r7, #36]	@ 0x24
    txHeader.DLC = 8;
 80001f6:	2308      	movs	r3, #8
 80001f8:	62bb      	str	r3, [r7, #40]	@ 0x28

    while (1)
    {
    	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 80001fa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80001fe:	4812      	ldr	r0, [pc, #72]	@ (8000248 <StartCanTxTask+0x68>)
 8000200:	f001 fb80 	bl	8001904 <HAL_GPIO_TogglePin>
        txData[0] = 0x0; // your payload
 8000204:	2300      	movs	r3, #0
 8000206:	743b      	strb	r3, [r7, #16]
        txData[1] = 0x0;
 8000208:	2300      	movs	r3, #0
 800020a:	747b      	strb	r3, [r7, #17]
        txData[2] = 0xB4;
 800020c:	23b4      	movs	r3, #180	@ 0xb4
 800020e:	74bb      	strb	r3, [r7, #18]
        txData[3] = 0x43;
 8000210:	2343      	movs	r3, #67	@ 0x43
 8000212:	74fb      	strb	r3, [r7, #19]
        txData[4] = 0xCD;
 8000214:	23cd      	movs	r3, #205	@ 0xcd
 8000216:	753b      	strb	r3, [r7, #20]
        txData[5] = 0xCC;
 8000218:	23cc      	movs	r3, #204	@ 0xcc
 800021a:	757b      	strb	r3, [r7, #21]
        txData[6] = 0x4C;
 800021c:	234c      	movs	r3, #76	@ 0x4c
 800021e:	75bb      	strb	r3, [r7, #22]
        txData[7] = 0x3D;
 8000220:	233d      	movs	r3, #61	@ 0x3d
 8000222:	75fb      	strb	r3, [r7, #23]

        if (HAL_CAN_AddTxMessage(&hcan, &txHeader, txData, &txMailbox) != HAL_OK)
 8000224:	f107 030c 	add.w	r3, r7, #12
 8000228:	f107 0210 	add.w	r2, r7, #16
 800022c:	f107 0118 	add.w	r1, r7, #24
 8000230:	4806      	ldr	r0, [pc, #24]	@ (800024c <StartCanTxTask+0x6c>)
 8000232:	f000 fdcc 	bl	8000dce <HAL_CAN_AddTxMessage>
 8000236:	4603      	mov	r3, r0
 8000238:	2b00      	cmp	r3, #0
 800023a:	d001      	beq.n	8000240 <StartCanTxTask+0x60>
        {
            Error_Handler();
 800023c:	f000 f9de 	bl	80005fc <Error_Handler>
        }

        osDelay(250); // send every 1 second
 8000240:	20fa      	movs	r0, #250	@ 0xfa
 8000242:	f003 fc8b 	bl	8003b5c <osDelay>
    	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 8000246:	e7d8      	b.n	80001fa <StartCanTxTask+0x1a>
 8000248:	48000400 	.word	0x48000400
 800024c:	20000280 	.word	0x20000280

08000250 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000250:	b480      	push	{r7}
 8000252:	b085      	sub	sp, #20
 8000254:	af00      	add	r7, sp, #0
 8000256:	60f8      	str	r0, [r7, #12]
 8000258:	60b9      	str	r1, [r7, #8]
 800025a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800025c:	68fb      	ldr	r3, [r7, #12]
 800025e:	4a07      	ldr	r2, [pc, #28]	@ (800027c <vApplicationGetIdleTaskMemory+0x2c>)
 8000260:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000262:	68bb      	ldr	r3, [r7, #8]
 8000264:	4a06      	ldr	r2, [pc, #24]	@ (8000280 <vApplicationGetIdleTaskMemory+0x30>)
 8000266:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	2280      	movs	r2, #128	@ 0x80
 800026c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800026e:	bf00      	nop
 8000270:	3714      	adds	r7, #20
 8000272:	46bd      	mov	sp, r7
 8000274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000278:	4770      	bx	lr
 800027a:	bf00      	nop
 800027c:	2000002c 	.word	0x2000002c
 8000280:	20000080 	.word	0x20000080

08000284 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000284:	b5b0      	push	{r4, r5, r7, lr}
 8000286:	b098      	sub	sp, #96	@ 0x60
 8000288:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
// define
TxHeader.IDE = CAN_ID_STD;
 800028a:	4b30      	ldr	r3, [pc, #192]	@ (800034c <main+0xc8>)
 800028c:	2200      	movs	r2, #0
 800028e:	609a      	str	r2, [r3, #8]
TxHeader.StdId = 0x446;
 8000290:	4b2e      	ldr	r3, [pc, #184]	@ (800034c <main+0xc8>)
 8000292:	f240 4246 	movw	r2, #1094	@ 0x446
 8000296:	601a      	str	r2, [r3, #0]
TxHeader.RTR = CAN_RTR_DATA;
 8000298:	4b2c      	ldr	r3, [pc, #176]	@ (800034c <main+0xc8>)
 800029a:	2200      	movs	r2, #0
 800029c:	60da      	str	r2, [r3, #12]
TxHeader.DLC = 2;
 800029e:	4b2b      	ldr	r3, [pc, #172]	@ (800034c <main+0xc8>)
 80002a0:	2202      	movs	r2, #2
 80002a2:	611a      	str	r2, [r3, #16]
TxData[0] = 50;
 80002a4:	4b2a      	ldr	r3, [pc, #168]	@ (8000350 <main+0xcc>)
 80002a6:	2232      	movs	r2, #50	@ 0x32
 80002a8:	701a      	strb	r2, [r3, #0]
TxData[1] = 0xAA;
 80002aa:	4b29      	ldr	r3, [pc, #164]	@ (8000350 <main+0xcc>)
 80002ac:	22aa      	movs	r2, #170	@ 0xaa
 80002ae:	705a      	strb	r2, [r3, #1]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002b0:	f000 fb4e 	bl	8000950 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002b4:	f000 f858 	bl	8000368 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002b8:	f000 f91e 	bl	80004f8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80002bc:	f000 f8ec 	bl	8000498 <MX_USART2_UART_Init>
  MX_CAN_Init();
 80002c0:	f000 f894 	bl	80003ec <MX_CAN_Init>
  /* USER CODE BEGIN 2 */
HAL_CAN_Start(&hcan);
 80002c4:	4823      	ldr	r0, [pc, #140]	@ (8000354 <main+0xd0>)
 80002c6:	f000 fd3e 	bl	8000d46 <HAL_CAN_Start>

if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 80002ca:	2102      	movs	r1, #2
 80002cc:	4821      	ldr	r0, [pc, #132]	@ (8000354 <main+0xd0>)
 80002ce:	f000 fe4e 	bl	8000f6e <HAL_CAN_ActivateNotification>
 80002d2:	4603      	mov	r3, r0
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d001      	beq.n	80002dc <main+0x58>
{
Error_Handler();
 80002d8:	f000 f990 	bl	80005fc <Error_Handler>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of parked */
  osThreadDef(parked, parked_init, osPriorityNormal, 0, 128);
 80002dc:	4b1e      	ldr	r3, [pc, #120]	@ (8000358 <main+0xd4>)
 80002de:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 80002e2:	461d      	mov	r5, r3
 80002e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002e8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80002ec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  parkedHandle = osThreadCreate(osThread(parked), NULL);
 80002f0:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80002f4:	2100      	movs	r1, #0
 80002f6:	4618      	mov	r0, r3
 80002f8:	f003 fbe4 	bl	8003ac4 <osThreadCreate>
 80002fc:	4603      	mov	r3, r0
 80002fe:	4a17      	ldr	r2, [pc, #92]	@ (800035c <main+0xd8>)
 8000300:	6013      	str	r3, [r2, #0]

  osThreadDef(canTxTask, StartCanTxTask, osPriorityHigh, 0, 128);
 8000302:	4b17      	ldr	r3, [pc, #92]	@ (8000360 <main+0xdc>)
 8000304:	f107 0420 	add.w	r4, r7, #32
 8000308:	461d      	mov	r5, r3
 800030a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800030c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800030e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000312:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  canTxTaskHandle = osThreadCreate(osThread(canTxTask), NULL);
 8000316:	f107 0320 	add.w	r3, r7, #32
 800031a:	2100      	movs	r1, #0
 800031c:	4618      	mov	r0, r3
 800031e:	f003 fbd1 	bl	8003ac4 <osThreadCreate>
 8000322:	65f8      	str	r0, [r7, #92]	@ 0x5c

  osThreadDef(canRxTask, StartCanRxTask, osPriorityNormal, 0, 128);
 8000324:	4b0f      	ldr	r3, [pc, #60]	@ (8000364 <main+0xe0>)
 8000326:	1d3c      	adds	r4, r7, #4
 8000328:	461d      	mov	r5, r3
 800032a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800032c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800032e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000332:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  canRxTaskHandle = osThreadCreate(osThread(canRxTask), NULL);
 8000336:	1d3b      	adds	r3, r7, #4
 8000338:	2100      	movs	r1, #0
 800033a:	4618      	mov	r0, r3
 800033c:	f003 fbc2 	bl	8003ac4 <osThreadCreate>
 8000340:	65b8      	str	r0, [r7, #88]	@ 0x58
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000342:	f003 fbb8 	bl	8003ab6 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int status;
  while (1)
 8000346:	bf00      	nop
 8000348:	e7fd      	b.n	8000346 <main+0xc2>
 800034a:	bf00      	nop
 800034c:	20000334 	.word	0x20000334
 8000350:	2000034c 	.word	0x2000034c
 8000354:	20000280 	.word	0x20000280
 8000358:	08004fa0 	.word	0x08004fa0
 800035c:	20000330 	.word	0x20000330
 8000360:	08004fc8 	.word	0x08004fc8
 8000364:	08004ff0 	.word	0x08004ff0

08000368 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b090      	sub	sp, #64	@ 0x40
 800036c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800036e:	f107 0318 	add.w	r3, r7, #24
 8000372:	2228      	movs	r2, #40	@ 0x28
 8000374:	2100      	movs	r1, #0
 8000376:	4618      	mov	r0, r3
 8000378:	f004 fdd6 	bl	8004f28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800037c:	1d3b      	adds	r3, r7, #4
 800037e:	2200      	movs	r2, #0
 8000380:	601a      	str	r2, [r3, #0]
 8000382:	605a      	str	r2, [r3, #4]
 8000384:	609a      	str	r2, [r3, #8]
 8000386:	60da      	str	r2, [r3, #12]
 8000388:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800038a:	2302      	movs	r3, #2
 800038c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800038e:	2301      	movs	r3, #1
 8000390:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000392:	2310      	movs	r3, #16
 8000394:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000396:	2302      	movs	r3, #2
 8000398:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800039a:	2300      	movs	r3, #0
 800039c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800039e:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 80003a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003a4:	f107 0318 	add.w	r3, r7, #24
 80003a8:	4618      	mov	r0, r3
 80003aa:	f001 fac5 	bl	8001938 <HAL_RCC_OscConfig>
 80003ae:	4603      	mov	r3, r0
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d001      	beq.n	80003b8 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80003b4:	f000 f922 	bl	80005fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003b8:	230f      	movs	r3, #15
 80003ba:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003bc:	2302      	movs	r3, #2
 80003be:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003c0:	2300      	movs	r3, #0
 80003c2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003c4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80003c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003ca:	2300      	movs	r3, #0
 80003cc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003ce:	1d3b      	adds	r3, r7, #4
 80003d0:	2102      	movs	r1, #2
 80003d2:	4618      	mov	r0, r3
 80003d4:	f002 faee 	bl	80029b4 <HAL_RCC_ClockConfig>
 80003d8:	4603      	mov	r3, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d001      	beq.n	80003e2 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80003de:	f000 f90d 	bl	80005fc <Error_Handler>
  }
}
 80003e2:	bf00      	nop
 80003e4:	3740      	adds	r7, #64	@ 0x40
 80003e6:	46bd      	mov	sp, r7
 80003e8:	bd80      	pop	{r7, pc}
	...

080003ec <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b08a      	sub	sp, #40	@ 0x28
 80003f0:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 80003f2:	4b27      	ldr	r3, [pc, #156]	@ (8000490 <MX_CAN_Init+0xa4>)
 80003f4:	4a27      	ldr	r2, [pc, #156]	@ (8000494 <MX_CAN_Init+0xa8>)
 80003f6:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 8;
 80003f8:	4b25      	ldr	r3, [pc, #148]	@ (8000490 <MX_CAN_Init+0xa4>)
 80003fa:	2208      	movs	r2, #8
 80003fc:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80003fe:	4b24      	ldr	r3, [pc, #144]	@ (8000490 <MX_CAN_Init+0xa4>)
 8000400:	2200      	movs	r2, #0
 8000402:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000404:	4b22      	ldr	r3, [pc, #136]	@ (8000490 <MX_CAN_Init+0xa4>)
 8000406:	2200      	movs	r2, #0
 8000408:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 800040a:	4b21      	ldr	r3, [pc, #132]	@ (8000490 <MX_CAN_Init+0xa4>)
 800040c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000410:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_5TQ;
 8000412:	4b1f      	ldr	r3, [pc, #124]	@ (8000490 <MX_CAN_Init+0xa4>)
 8000414:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000418:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800041a:	4b1d      	ldr	r3, [pc, #116]	@ (8000490 <MX_CAN_Init+0xa4>)
 800041c:	2200      	movs	r2, #0
 800041e:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000420:	4b1b      	ldr	r3, [pc, #108]	@ (8000490 <MX_CAN_Init+0xa4>)
 8000422:	2200      	movs	r2, #0
 8000424:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000426:	4b1a      	ldr	r3, [pc, #104]	@ (8000490 <MX_CAN_Init+0xa4>)
 8000428:	2200      	movs	r2, #0
 800042a:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800042c:	4b18      	ldr	r3, [pc, #96]	@ (8000490 <MX_CAN_Init+0xa4>)
 800042e:	2200      	movs	r2, #0
 8000430:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000432:	4b17      	ldr	r3, [pc, #92]	@ (8000490 <MX_CAN_Init+0xa4>)
 8000434:	2200      	movs	r2, #0
 8000436:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000438:	4b15      	ldr	r3, [pc, #84]	@ (8000490 <MX_CAN_Init+0xa4>)
 800043a:	2200      	movs	r2, #0
 800043c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800043e:	4814      	ldr	r0, [pc, #80]	@ (8000490 <MX_CAN_Init+0xa4>)
 8000440:	f000 fabc 	bl	80009bc <HAL_CAN_Init>
 8000444:	4603      	mov	r3, r0
 8000446:	2b00      	cmp	r3, #0
 8000448:	d001      	beq.n	800044e <MX_CAN_Init+0x62>
  {
    Error_Handler();
 800044a:	f000 f8d7 	bl	80005fc <Error_Handler>
  //Allow all messages to pass through from any ID


  	CAN_FilterTypeDef canfilterconfig;

  	canfilterconfig.FilterActivation = ENABLE;
 800044e:	2301      	movs	r3, #1
 8000450:	623b      	str	r3, [r7, #32]
  	canfilterconfig.FilterBank = 0;
 8000452:	2300      	movs	r3, #0
 8000454:	617b      	str	r3, [r7, #20]
  	canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000456:	2300      	movs	r3, #0
 8000458:	613b      	str	r3, [r7, #16]
  	canfilterconfig.FilterIdHigh = 0x0000;
 800045a:	2300      	movs	r3, #0
 800045c:	603b      	str	r3, [r7, #0]
  	canfilterconfig.FilterIdLow = 0x0000;
 800045e:	2300      	movs	r3, #0
 8000460:	607b      	str	r3, [r7, #4]
  	canfilterconfig.FilterMaskIdHigh = 0x0000;
 8000462:	2300      	movs	r3, #0
 8000464:	60bb      	str	r3, [r7, #8]
  	canfilterconfig.FilterMaskIdLow = 0x0000;
 8000466:	2300      	movs	r3, #0
 8000468:	60fb      	str	r3, [r7, #12]
  	canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800046a:	2300      	movs	r3, #0
 800046c:	61bb      	str	r3, [r7, #24]
  	canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800046e:	2301      	movs	r3, #1
 8000470:	61fb      	str	r3, [r7, #28]
  	canfilterconfig.SlaveStartFilterBank = 14;
 8000472:	230e      	movs	r3, #14
 8000474:	627b      	str	r3, [r7, #36]	@ 0x24

  	HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 8000476:	463b      	mov	r3, r7
 8000478:	4619      	mov	r1, r3
 800047a:	4805      	ldr	r0, [pc, #20]	@ (8000490 <MX_CAN_Init+0xa4>)
 800047c:	f000 fb99 	bl	8000bb2 <HAL_CAN_ConfigFilter>


  	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000480:	2102      	movs	r1, #2
 8000482:	4803      	ldr	r0, [pc, #12]	@ (8000490 <MX_CAN_Init+0xa4>)
 8000484:	f000 fd73 	bl	8000f6e <HAL_CAN_ActivateNotification>

  /* USER CODE END CAN_Init 2 */

}
 8000488:	bf00      	nop
 800048a:	3728      	adds	r7, #40	@ 0x28
 800048c:	46bd      	mov	sp, r7
 800048e:	bd80      	pop	{r7, pc}
 8000490:	20000280 	.word	0x20000280
 8000494:	40006400 	.word	0x40006400

08000498 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800049c:	4b14      	ldr	r3, [pc, #80]	@ (80004f0 <MX_USART2_UART_Init+0x58>)
 800049e:	4a15      	ldr	r2, [pc, #84]	@ (80004f4 <MX_USART2_UART_Init+0x5c>)
 80004a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 80004a2:	4b13      	ldr	r3, [pc, #76]	@ (80004f0 <MX_USART2_UART_Init+0x58>)
 80004a4:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 80004a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80004aa:	4b11      	ldr	r3, [pc, #68]	@ (80004f0 <MX_USART2_UART_Init+0x58>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80004b0:	4b0f      	ldr	r3, [pc, #60]	@ (80004f0 <MX_USART2_UART_Init+0x58>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80004b6:	4b0e      	ldr	r3, [pc, #56]	@ (80004f0 <MX_USART2_UART_Init+0x58>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80004bc:	4b0c      	ldr	r3, [pc, #48]	@ (80004f0 <MX_USART2_UART_Init+0x58>)
 80004be:	220c      	movs	r2, #12
 80004c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004c2:	4b0b      	ldr	r3, [pc, #44]	@ (80004f0 <MX_USART2_UART_Init+0x58>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80004c8:	4b09      	ldr	r3, [pc, #36]	@ (80004f0 <MX_USART2_UART_Init+0x58>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80004ce:	4b08      	ldr	r3, [pc, #32]	@ (80004f0 <MX_USART2_UART_Init+0x58>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80004d4:	4b06      	ldr	r3, [pc, #24]	@ (80004f0 <MX_USART2_UART_Init+0x58>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80004da:	4805      	ldr	r0, [pc, #20]	@ (80004f0 <MX_USART2_UART_Init+0x58>)
 80004dc:	f002 ff34 	bl	8003348 <HAL_UART_Init>
 80004e0:	4603      	mov	r3, r0
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d001      	beq.n	80004ea <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80004e6:	f000 f889 	bl	80005fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80004ea:	bf00      	nop
 80004ec:	bd80      	pop	{r7, pc}
 80004ee:	bf00      	nop
 80004f0:	200002a8 	.word	0x200002a8
 80004f4:	40004400 	.word	0x40004400

080004f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b08a      	sub	sp, #40	@ 0x28
 80004fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004fe:	f107 0314 	add.w	r3, r7, #20
 8000502:	2200      	movs	r2, #0
 8000504:	601a      	str	r2, [r3, #0]
 8000506:	605a      	str	r2, [r3, #4]
 8000508:	609a      	str	r2, [r3, #8]
 800050a:	60da      	str	r2, [r3, #12]
 800050c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800050e:	4b2b      	ldr	r3, [pc, #172]	@ (80005bc <MX_GPIO_Init+0xc4>)
 8000510:	695b      	ldr	r3, [r3, #20]
 8000512:	4a2a      	ldr	r2, [pc, #168]	@ (80005bc <MX_GPIO_Init+0xc4>)
 8000514:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000518:	6153      	str	r3, [r2, #20]
 800051a:	4b28      	ldr	r3, [pc, #160]	@ (80005bc <MX_GPIO_Init+0xc4>)
 800051c:	695b      	ldr	r3, [r3, #20]
 800051e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000522:	613b      	str	r3, [r7, #16]
 8000524:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000526:	4b25      	ldr	r3, [pc, #148]	@ (80005bc <MX_GPIO_Init+0xc4>)
 8000528:	695b      	ldr	r3, [r3, #20]
 800052a:	4a24      	ldr	r2, [pc, #144]	@ (80005bc <MX_GPIO_Init+0xc4>)
 800052c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000530:	6153      	str	r3, [r2, #20]
 8000532:	4b22      	ldr	r3, [pc, #136]	@ (80005bc <MX_GPIO_Init+0xc4>)
 8000534:	695b      	ldr	r3, [r3, #20]
 8000536:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800053a:	60fb      	str	r3, [r7, #12]
 800053c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800053e:	4b1f      	ldr	r3, [pc, #124]	@ (80005bc <MX_GPIO_Init+0xc4>)
 8000540:	695b      	ldr	r3, [r3, #20]
 8000542:	4a1e      	ldr	r2, [pc, #120]	@ (80005bc <MX_GPIO_Init+0xc4>)
 8000544:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000548:	6153      	str	r3, [r2, #20]
 800054a:	4b1c      	ldr	r3, [pc, #112]	@ (80005bc <MX_GPIO_Init+0xc4>)
 800054c:	695b      	ldr	r3, [r3, #20]
 800054e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000552:	60bb      	str	r3, [r7, #8]
 8000554:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000556:	4b19      	ldr	r3, [pc, #100]	@ (80005bc <MX_GPIO_Init+0xc4>)
 8000558:	695b      	ldr	r3, [r3, #20]
 800055a:	4a18      	ldr	r2, [pc, #96]	@ (80005bc <MX_GPIO_Init+0xc4>)
 800055c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000560:	6153      	str	r3, [r2, #20]
 8000562:	4b16      	ldr	r3, [pc, #88]	@ (80005bc <MX_GPIO_Init+0xc4>)
 8000564:	695b      	ldr	r3, [r3, #20]
 8000566:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800056a:	607b      	str	r3, [r7, #4]
 800056c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800056e:	2200      	movs	r2, #0
 8000570:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000574:	4812      	ldr	r0, [pc, #72]	@ (80005c0 <MX_GPIO_Init+0xc8>)
 8000576:	f001 f9ad 	bl	80018d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800057a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800057e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000580:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000584:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000586:	2300      	movs	r3, #0
 8000588:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800058a:	f107 0314 	add.w	r3, r7, #20
 800058e:	4619      	mov	r1, r3
 8000590:	480c      	ldr	r0, [pc, #48]	@ (80005c4 <MX_GPIO_Init+0xcc>)
 8000592:	f001 f82d 	bl	80015f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000596:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800059a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800059c:	2301      	movs	r3, #1
 800059e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a0:	2300      	movs	r3, #0
 80005a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005a4:	2300      	movs	r3, #0
 80005a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80005a8:	f107 0314 	add.w	r3, r7, #20
 80005ac:	4619      	mov	r1, r3
 80005ae:	4804      	ldr	r0, [pc, #16]	@ (80005c0 <MX_GPIO_Init+0xc8>)
 80005b0:	f001 f81e 	bl	80015f0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80005b4:	bf00      	nop
 80005b6:	3728      	adds	r7, #40	@ 0x28
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	40021000 	.word	0x40021000
 80005c0:	48000400 	.word	0x48000400
 80005c4:	48000800 	.word	0x48000800

080005c8 <parked_init>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_parked_init */
void parked_init(void const * argument)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  osDelay(1);
 80005d0:	2001      	movs	r0, #1
 80005d2:	f003 fac3 	bl	8003b5c <osDelay>
 80005d6:	e7fb      	b.n	80005d0 <parked_init+0x8>

080005d8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4a04      	ldr	r2, [pc, #16]	@ (80005f8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80005e6:	4293      	cmp	r3, r2
 80005e8:	d101      	bne.n	80005ee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80005ea:	f000 f9c7 	bl	800097c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80005ee:	bf00      	nop
 80005f0:	3708      	adds	r7, #8
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	40012c00 	.word	0x40012c00

080005fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000600:	b672      	cpsid	i
}
 8000602:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000604:	bf00      	nop
 8000606:	e7fd      	b.n	8000604 <Error_Handler+0x8>

08000608 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800060e:	4b11      	ldr	r3, [pc, #68]	@ (8000654 <HAL_MspInit+0x4c>)
 8000610:	699b      	ldr	r3, [r3, #24]
 8000612:	4a10      	ldr	r2, [pc, #64]	@ (8000654 <HAL_MspInit+0x4c>)
 8000614:	f043 0301 	orr.w	r3, r3, #1
 8000618:	6193      	str	r3, [r2, #24]
 800061a:	4b0e      	ldr	r3, [pc, #56]	@ (8000654 <HAL_MspInit+0x4c>)
 800061c:	699b      	ldr	r3, [r3, #24]
 800061e:	f003 0301 	and.w	r3, r3, #1
 8000622:	607b      	str	r3, [r7, #4]
 8000624:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000626:	4b0b      	ldr	r3, [pc, #44]	@ (8000654 <HAL_MspInit+0x4c>)
 8000628:	69db      	ldr	r3, [r3, #28]
 800062a:	4a0a      	ldr	r2, [pc, #40]	@ (8000654 <HAL_MspInit+0x4c>)
 800062c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000630:	61d3      	str	r3, [r2, #28]
 8000632:	4b08      	ldr	r3, [pc, #32]	@ (8000654 <HAL_MspInit+0x4c>)
 8000634:	69db      	ldr	r3, [r3, #28]
 8000636:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800063a:	603b      	str	r3, [r7, #0]
 800063c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800063e:	2200      	movs	r2, #0
 8000640:	210f      	movs	r1, #15
 8000642:	f06f 0001 	mvn.w	r0, #1
 8000646:	f000 ffa9 	bl	800159c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800064a:	bf00      	nop
 800064c:	3708      	adds	r7, #8
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	40021000 	.word	0x40021000

08000658 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b08a      	sub	sp, #40	@ 0x28
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000660:	f107 0314 	add.w	r3, r7, #20
 8000664:	2200      	movs	r2, #0
 8000666:	601a      	str	r2, [r3, #0]
 8000668:	605a      	str	r2, [r3, #4]
 800066a:	609a      	str	r2, [r3, #8]
 800066c:	60da      	str	r2, [r3, #12]
 800066e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a25      	ldr	r2, [pc, #148]	@ (800070c <HAL_CAN_MspInit+0xb4>)
 8000676:	4293      	cmp	r3, r2
 8000678:	d143      	bne.n	8000702 <HAL_CAN_MspInit+0xaa>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800067a:	4b25      	ldr	r3, [pc, #148]	@ (8000710 <HAL_CAN_MspInit+0xb8>)
 800067c:	69db      	ldr	r3, [r3, #28]
 800067e:	4a24      	ldr	r2, [pc, #144]	@ (8000710 <HAL_CAN_MspInit+0xb8>)
 8000680:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000684:	61d3      	str	r3, [r2, #28]
 8000686:	4b22      	ldr	r3, [pc, #136]	@ (8000710 <HAL_CAN_MspInit+0xb8>)
 8000688:	69db      	ldr	r3, [r3, #28]
 800068a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800068e:	613b      	str	r3, [r7, #16]
 8000690:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000692:	4b1f      	ldr	r3, [pc, #124]	@ (8000710 <HAL_CAN_MspInit+0xb8>)
 8000694:	695b      	ldr	r3, [r3, #20]
 8000696:	4a1e      	ldr	r2, [pc, #120]	@ (8000710 <HAL_CAN_MspInit+0xb8>)
 8000698:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800069c:	6153      	str	r3, [r2, #20]
 800069e:	4b1c      	ldr	r3, [pc, #112]	@ (8000710 <HAL_CAN_MspInit+0xb8>)
 80006a0:	695b      	ldr	r3, [r3, #20]
 80006a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80006a6:	60fb      	str	r3, [r7, #12]
 80006a8:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80006aa:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80006ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006b0:	2302      	movs	r3, #2
 80006b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006b4:	2301      	movs	r3, #1
 80006b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006b8:	2303      	movs	r3, #3
 80006ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM1;
 80006bc:	2309      	movs	r3, #9
 80006be:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006c0:	f107 0314 	add.w	r3, r7, #20
 80006c4:	4619      	mov	r1, r3
 80006c6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006ca:	f000 ff91 	bl	80015f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80006ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006d4:	2302      	movs	r3, #2
 80006d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d8:	2300      	movs	r3, #0
 80006da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006dc:	2303      	movs	r3, #3
 80006de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM1;
 80006e0:	2309      	movs	r3, #9
 80006e2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006e4:	f107 0314 	add.w	r3, r7, #20
 80006e8:	4619      	mov	r1, r3
 80006ea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006ee:	f000 ff7f 	bl	80015f0 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 5, 0);
 80006f2:	2200      	movs	r2, #0
 80006f4:	2105      	movs	r1, #5
 80006f6:	2014      	movs	r0, #20
 80006f8:	f000 ff50 	bl	800159c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 80006fc:	2014      	movs	r0, #20
 80006fe:	f000 ff69 	bl	80015d4 <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN_MspInit 1 */

  }

}
 8000702:	bf00      	nop
 8000704:	3728      	adds	r7, #40	@ 0x28
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	40006400 	.word	0x40006400
 8000710:	40021000 	.word	0x40021000

08000714 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b08a      	sub	sp, #40	@ 0x28
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071c:	f107 0314 	add.w	r3, r7, #20
 8000720:	2200      	movs	r2, #0
 8000722:	601a      	str	r2, [r3, #0]
 8000724:	605a      	str	r2, [r3, #4]
 8000726:	609a      	str	r2, [r3, #8]
 8000728:	60da      	str	r2, [r3, #12]
 800072a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	4a17      	ldr	r2, [pc, #92]	@ (8000790 <HAL_UART_MspInit+0x7c>)
 8000732:	4293      	cmp	r3, r2
 8000734:	d128      	bne.n	8000788 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000736:	4b17      	ldr	r3, [pc, #92]	@ (8000794 <HAL_UART_MspInit+0x80>)
 8000738:	69db      	ldr	r3, [r3, #28]
 800073a:	4a16      	ldr	r2, [pc, #88]	@ (8000794 <HAL_UART_MspInit+0x80>)
 800073c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000740:	61d3      	str	r3, [r2, #28]
 8000742:	4b14      	ldr	r3, [pc, #80]	@ (8000794 <HAL_UART_MspInit+0x80>)
 8000744:	69db      	ldr	r3, [r3, #28]
 8000746:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800074a:	613b      	str	r3, [r7, #16]
 800074c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800074e:	4b11      	ldr	r3, [pc, #68]	@ (8000794 <HAL_UART_MspInit+0x80>)
 8000750:	695b      	ldr	r3, [r3, #20]
 8000752:	4a10      	ldr	r2, [pc, #64]	@ (8000794 <HAL_UART_MspInit+0x80>)
 8000754:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000758:	6153      	str	r3, [r2, #20]
 800075a:	4b0e      	ldr	r3, [pc, #56]	@ (8000794 <HAL_UART_MspInit+0x80>)
 800075c:	695b      	ldr	r3, [r3, #20]
 800075e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000762:	60fb      	str	r3, [r7, #12]
 8000764:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000766:	230c      	movs	r3, #12
 8000768:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800076a:	2302      	movs	r3, #2
 800076c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076e:	2300      	movs	r3, #0
 8000770:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000772:	2300      	movs	r3, #0
 8000774:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000776:	2307      	movs	r3, #7
 8000778:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800077a:	f107 0314 	add.w	r3, r7, #20
 800077e:	4619      	mov	r1, r3
 8000780:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000784:	f000 ff34 	bl	80015f0 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000788:	bf00      	nop
 800078a:	3728      	adds	r7, #40	@ 0x28
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	40004400 	.word	0x40004400
 8000794:	40021000 	.word	0x40021000

08000798 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b08c      	sub	sp, #48	@ 0x30
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80007a0:	2300      	movs	r3, #0
 80007a2:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 80007a4:	2300      	movs	r3, #0
 80007a6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80007a8:	4b2e      	ldr	r3, [pc, #184]	@ (8000864 <HAL_InitTick+0xcc>)
 80007aa:	699b      	ldr	r3, [r3, #24]
 80007ac:	4a2d      	ldr	r2, [pc, #180]	@ (8000864 <HAL_InitTick+0xcc>)
 80007ae:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80007b2:	6193      	str	r3, [r2, #24]
 80007b4:	4b2b      	ldr	r3, [pc, #172]	@ (8000864 <HAL_InitTick+0xcc>)
 80007b6:	699b      	ldr	r3, [r3, #24]
 80007b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80007bc:	60bb      	str	r3, [r7, #8]
 80007be:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80007c0:	f107 020c 	add.w	r2, r7, #12
 80007c4:	f107 0310 	add.w	r3, r7, #16
 80007c8:	4611      	mov	r1, r2
 80007ca:	4618      	mov	r0, r3
 80007cc:	f002 fb12 	bl	8002df4 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80007d0:	f002 faee 	bl	8002db0 <HAL_RCC_GetPCLK2Freq>
 80007d4:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80007d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80007d8:	4a23      	ldr	r2, [pc, #140]	@ (8000868 <HAL_InitTick+0xd0>)
 80007da:	fba2 2303 	umull	r2, r3, r2, r3
 80007de:	0c9b      	lsrs	r3, r3, #18
 80007e0:	3b01      	subs	r3, #1
 80007e2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80007e4:	4b21      	ldr	r3, [pc, #132]	@ (800086c <HAL_InitTick+0xd4>)
 80007e6:	4a22      	ldr	r2, [pc, #136]	@ (8000870 <HAL_InitTick+0xd8>)
 80007e8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80007ea:	4b20      	ldr	r3, [pc, #128]	@ (800086c <HAL_InitTick+0xd4>)
 80007ec:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80007f0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80007f2:	4a1e      	ldr	r2, [pc, #120]	@ (800086c <HAL_InitTick+0xd4>)
 80007f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007f6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80007f8:	4b1c      	ldr	r3, [pc, #112]	@ (800086c <HAL_InitTick+0xd4>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007fe:	4b1b      	ldr	r3, [pc, #108]	@ (800086c <HAL_InitTick+0xd4>)
 8000800:	2200      	movs	r2, #0
 8000802:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000804:	4b19      	ldr	r3, [pc, #100]	@ (800086c <HAL_InitTick+0xd4>)
 8000806:	2200      	movs	r2, #0
 8000808:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800080a:	4818      	ldr	r0, [pc, #96]	@ (800086c <HAL_InitTick+0xd4>)
 800080c:	f002 fb24 	bl	8002e58 <HAL_TIM_Base_Init>
 8000810:	4603      	mov	r3, r0
 8000812:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000816:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800081a:	2b00      	cmp	r3, #0
 800081c:	d11b      	bne.n	8000856 <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800081e:	4813      	ldr	r0, [pc, #76]	@ (800086c <HAL_InitTick+0xd4>)
 8000820:	f002 fb7c 	bl	8002f1c <HAL_TIM_Base_Start_IT>
 8000824:	4603      	mov	r3, r0
 8000826:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 800082a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800082e:	2b00      	cmp	r3, #0
 8000830:	d111      	bne.n	8000856 <HAL_InitTick+0xbe>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000832:	2019      	movs	r0, #25
 8000834:	f000 fece 	bl	80015d4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	2b0f      	cmp	r3, #15
 800083c:	d808      	bhi.n	8000850 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 800083e:	2200      	movs	r2, #0
 8000840:	6879      	ldr	r1, [r7, #4]
 8000842:	2019      	movs	r0, #25
 8000844:	f000 feaa 	bl	800159c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000848:	4a0a      	ldr	r2, [pc, #40]	@ (8000874 <HAL_InitTick+0xdc>)
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	6013      	str	r3, [r2, #0]
 800084e:	e002      	b.n	8000856 <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 8000850:	2301      	movs	r3, #1
 8000852:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000856:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800085a:	4618      	mov	r0, r3
 800085c:	3730      	adds	r7, #48	@ 0x30
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	40021000 	.word	0x40021000
 8000868:	431bde83 	.word	0x431bde83
 800086c:	20000354 	.word	0x20000354
 8000870:	40012c00 	.word	0x40012c00
 8000874:	20000004 	.word	0x20000004

08000878 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800087c:	bf00      	nop
 800087e:	e7fd      	b.n	800087c <NMI_Handler+0x4>

08000880 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000884:	bf00      	nop
 8000886:	e7fd      	b.n	8000884 <HardFault_Handler+0x4>

08000888 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800088c:	bf00      	nop
 800088e:	e7fd      	b.n	800088c <MemManage_Handler+0x4>

08000890 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000894:	bf00      	nop
 8000896:	e7fd      	b.n	8000894 <BusFault_Handler+0x4>

08000898 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800089c:	bf00      	nop
 800089e:	e7fd      	b.n	800089c <UsageFault_Handler+0x4>

080008a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008a4:	bf00      	nop
 80008a6:	46bd      	mov	sp, r7
 80008a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ac:	4770      	bx	lr
	...

080008b0 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles CAN RX0 and USB low priority interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80008b4:	4802      	ldr	r0, [pc, #8]	@ (80008c0 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 80008b6:	f000 fb80 	bl	8000fba <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 80008ba:	bf00      	nop
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	20000280 	.word	0x20000280

080008c4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80008c8:	4802      	ldr	r0, [pc, #8]	@ (80008d4 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80008ca:	f002 fb7b 	bl	8002fc4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80008ce:	bf00      	nop
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	20000354 	.word	0x20000354

080008d8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008dc:	4b06      	ldr	r3, [pc, #24]	@ (80008f8 <SystemInit+0x20>)
 80008de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80008e2:	4a05      	ldr	r2, [pc, #20]	@ (80008f8 <SystemInit+0x20>)
 80008e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80008e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008ec:	bf00      	nop
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop
 80008f8:	e000ed00 	.word	0xe000ed00

080008fc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80008fc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000934 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000900:	f7ff ffea 	bl	80008d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000904:	480c      	ldr	r0, [pc, #48]	@ (8000938 <LoopForever+0x6>)
  ldr r1, =_edata
 8000906:	490d      	ldr	r1, [pc, #52]	@ (800093c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000908:	4a0d      	ldr	r2, [pc, #52]	@ (8000940 <LoopForever+0xe>)
  movs r3, #0
 800090a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800090c:	e002      	b.n	8000914 <LoopCopyDataInit>

0800090e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800090e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000910:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000912:	3304      	adds	r3, #4

08000914 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000914:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000916:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000918:	d3f9      	bcc.n	800090e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800091a:	4a0a      	ldr	r2, [pc, #40]	@ (8000944 <LoopForever+0x12>)
  ldr r4, =_ebss
 800091c:	4c0a      	ldr	r4, [pc, #40]	@ (8000948 <LoopForever+0x16>)
  movs r3, #0
 800091e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000920:	e001      	b.n	8000926 <LoopFillZerobss>

08000922 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000922:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000924:	3204      	adds	r2, #4

08000926 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000926:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000928:	d3fb      	bcc.n	8000922 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800092a:	f004 fb05 	bl	8004f38 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800092e:	f7ff fca9 	bl	8000284 <main>

08000932 <LoopForever>:

LoopForever:
    b LoopForever
 8000932:	e7fe      	b.n	8000932 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000934:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000938:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800093c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000940:	08005054 	.word	0x08005054
  ldr r2, =_sbss
 8000944:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000948:	200010f0 	.word	0x200010f0

0800094c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800094c:	e7fe      	b.n	800094c <ADC1_IRQHandler>
	...

08000950 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000954:	4b08      	ldr	r3, [pc, #32]	@ (8000978 <HAL_Init+0x28>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4a07      	ldr	r2, [pc, #28]	@ (8000978 <HAL_Init+0x28>)
 800095a:	f043 0310 	orr.w	r3, r3, #16
 800095e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000960:	2003      	movs	r0, #3
 8000962:	f000 fe10 	bl	8001586 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000966:	200f      	movs	r0, #15
 8000968:	f7ff ff16 	bl	8000798 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800096c:	f7ff fe4c 	bl	8000608 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000970:	2300      	movs	r3, #0
}
 8000972:	4618      	mov	r0, r3
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	40022000 	.word	0x40022000

0800097c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000980:	4b06      	ldr	r3, [pc, #24]	@ (800099c <HAL_IncTick+0x20>)
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	461a      	mov	r2, r3
 8000986:	4b06      	ldr	r3, [pc, #24]	@ (80009a0 <HAL_IncTick+0x24>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	4413      	add	r3, r2
 800098c:	4a04      	ldr	r2, [pc, #16]	@ (80009a0 <HAL_IncTick+0x24>)
 800098e:	6013      	str	r3, [r2, #0]
}
 8000990:	bf00      	nop
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop
 800099c:	20000008 	.word	0x20000008
 80009a0:	200003a0 	.word	0x200003a0

080009a4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  return uwTick;  
 80009a8:	4b03      	ldr	r3, [pc, #12]	@ (80009b8 <HAL_GetTick+0x14>)
 80009aa:	681b      	ldr	r3, [r3, #0]
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	200003a0 	.word	0x200003a0

080009bc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b084      	sub	sp, #16
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d101      	bne.n	80009ce <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80009ca:	2301      	movs	r3, #1
 80009cc:	e0ed      	b.n	8000baa <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80009d4:	b2db      	uxtb	r3, r3
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d102      	bne.n	80009e0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80009da:	6878      	ldr	r0, [r7, #4]
 80009dc:	f7ff fe3c 	bl	8000658 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	681a      	ldr	r2, [r3, #0]
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	f042 0201 	orr.w	r2, r2, #1
 80009ee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80009f0:	f7ff ffd8 	bl	80009a4 <HAL_GetTick>
 80009f4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80009f6:	e012      	b.n	8000a1e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80009f8:	f7ff ffd4 	bl	80009a4 <HAL_GetTick>
 80009fc:	4602      	mov	r2, r0
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	1ad3      	subs	r3, r2, r3
 8000a02:	2b0a      	cmp	r3, #10
 8000a04:	d90b      	bls.n	8000a1e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a0a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	2205      	movs	r2, #5
 8000a16:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	e0c5      	b.n	8000baa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	685b      	ldr	r3, [r3, #4]
 8000a24:	f003 0301 	and.w	r3, r3, #1
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d0e5      	beq.n	80009f8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	681a      	ldr	r2, [r3, #0]
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	f022 0202 	bic.w	r2, r2, #2
 8000a3a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000a3c:	f7ff ffb2 	bl	80009a4 <HAL_GetTick>
 8000a40:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000a42:	e012      	b.n	8000a6a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000a44:	f7ff ffae 	bl	80009a4 <HAL_GetTick>
 8000a48:	4602      	mov	r2, r0
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	1ad3      	subs	r3, r2, r3
 8000a4e:	2b0a      	cmp	r3, #10
 8000a50:	d90b      	bls.n	8000a6a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a56:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	2205      	movs	r2, #5
 8000a62:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000a66:	2301      	movs	r3, #1
 8000a68:	e09f      	b.n	8000baa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	685b      	ldr	r3, [r3, #4]
 8000a70:	f003 0302 	and.w	r3, r3, #2
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d1e5      	bne.n	8000a44 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	7e1b      	ldrb	r3, [r3, #24]
 8000a7c:	2b01      	cmp	r3, #1
 8000a7e:	d108      	bne.n	8000a92 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	681a      	ldr	r2, [r3, #0]
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000a8e:	601a      	str	r2, [r3, #0]
 8000a90:	e007      	b.n	8000aa2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	681a      	ldr	r2, [r3, #0]
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000aa0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	7e5b      	ldrb	r3, [r3, #25]
 8000aa6:	2b01      	cmp	r3, #1
 8000aa8:	d108      	bne.n	8000abc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	681a      	ldr	r2, [r3, #0]
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000ab8:	601a      	str	r2, [r3, #0]
 8000aba:	e007      	b.n	8000acc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	681a      	ldr	r2, [r3, #0]
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000aca:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	7e9b      	ldrb	r3, [r3, #26]
 8000ad0:	2b01      	cmp	r3, #1
 8000ad2:	d108      	bne.n	8000ae6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	681a      	ldr	r2, [r3, #0]
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	f042 0220 	orr.w	r2, r2, #32
 8000ae2:	601a      	str	r2, [r3, #0]
 8000ae4:	e007      	b.n	8000af6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	681a      	ldr	r2, [r3, #0]
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	f022 0220 	bic.w	r2, r2, #32
 8000af4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	7edb      	ldrb	r3, [r3, #27]
 8000afa:	2b01      	cmp	r3, #1
 8000afc:	d108      	bne.n	8000b10 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	681a      	ldr	r2, [r3, #0]
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	f022 0210 	bic.w	r2, r2, #16
 8000b0c:	601a      	str	r2, [r3, #0]
 8000b0e:	e007      	b.n	8000b20 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	681a      	ldr	r2, [r3, #0]
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	f042 0210 	orr.w	r2, r2, #16
 8000b1e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	7f1b      	ldrb	r3, [r3, #28]
 8000b24:	2b01      	cmp	r3, #1
 8000b26:	d108      	bne.n	8000b3a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	681a      	ldr	r2, [r3, #0]
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	f042 0208 	orr.w	r2, r2, #8
 8000b36:	601a      	str	r2, [r3, #0]
 8000b38:	e007      	b.n	8000b4a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	681a      	ldr	r2, [r3, #0]
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	f022 0208 	bic.w	r2, r2, #8
 8000b48:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	7f5b      	ldrb	r3, [r3, #29]
 8000b4e:	2b01      	cmp	r3, #1
 8000b50:	d108      	bne.n	8000b64 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	681a      	ldr	r2, [r3, #0]
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	f042 0204 	orr.w	r2, r2, #4
 8000b60:	601a      	str	r2, [r3, #0]
 8000b62:	e007      	b.n	8000b74 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	681a      	ldr	r2, [r3, #0]
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	f022 0204 	bic.w	r2, r2, #4
 8000b72:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	689a      	ldr	r2, [r3, #8]
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	68db      	ldr	r3, [r3, #12]
 8000b7c:	431a      	orrs	r2, r3
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	691b      	ldr	r3, [r3, #16]
 8000b82:	431a      	orrs	r2, r3
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	695b      	ldr	r3, [r3, #20]
 8000b88:	ea42 0103 	orr.w	r1, r2, r3
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	685b      	ldr	r3, [r3, #4]
 8000b90:	1e5a      	subs	r2, r3, #1
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	430a      	orrs	r2, r1
 8000b98:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000ba8:	2300      	movs	r3, #0
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	3710      	adds	r7, #16
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}

08000bb2 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000bb2:	b480      	push	{r7}
 8000bb4:	b087      	sub	sp, #28
 8000bb6:	af00      	add	r7, sp, #0
 8000bb8:	6078      	str	r0, [r7, #4]
 8000bba:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000bc8:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000bca:	7cfb      	ldrb	r3, [r7, #19]
 8000bcc:	2b01      	cmp	r3, #1
 8000bce:	d003      	beq.n	8000bd8 <HAL_CAN_ConfigFilter+0x26>
 8000bd0:	7cfb      	ldrb	r3, [r7, #19]
 8000bd2:	2b02      	cmp	r3, #2
 8000bd4:	f040 80aa 	bne.w	8000d2c <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000bde:	f043 0201 	orr.w	r2, r3, #1
 8000be2:	697b      	ldr	r3, [r7, #20]
 8000be4:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	695b      	ldr	r3, [r3, #20]
 8000bec:	f003 031f 	and.w	r3, r3, #31
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf6:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	43db      	mvns	r3, r3
 8000c02:	401a      	ands	r2, r3
 8000c04:	697b      	ldr	r3, [r7, #20]
 8000c06:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	69db      	ldr	r3, [r3, #28]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d123      	bne.n	8000c5a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000c12:	697b      	ldr	r3, [r7, #20]
 8000c14:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	43db      	mvns	r3, r3
 8000c1c:	401a      	ands	r2, r3
 8000c1e:	697b      	ldr	r3, [r7, #20]
 8000c20:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	68db      	ldr	r3, [r3, #12]
 8000c28:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	685b      	ldr	r3, [r3, #4]
 8000c2e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000c30:	683a      	ldr	r2, [r7, #0]
 8000c32:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000c34:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000c36:	697b      	ldr	r3, [r7, #20]
 8000c38:	3248      	adds	r2, #72	@ 0x48
 8000c3a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	689b      	ldr	r3, [r3, #8]
 8000c42:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000c4e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000c50:	6979      	ldr	r1, [r7, #20]
 8000c52:	3348      	adds	r3, #72	@ 0x48
 8000c54:	00db      	lsls	r3, r3, #3
 8000c56:	440b      	add	r3, r1
 8000c58:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	69db      	ldr	r3, [r3, #28]
 8000c5e:	2b01      	cmp	r3, #1
 8000c60:	d122      	bne.n	8000ca8 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000c62:	697b      	ldr	r3, [r7, #20]
 8000c64:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	431a      	orrs	r2, r3
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000c7e:	683a      	ldr	r2, [r7, #0]
 8000c80:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000c82:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000c84:	697b      	ldr	r3, [r7, #20]
 8000c86:	3248      	adds	r2, #72	@ 0x48
 8000c88:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	689b      	ldr	r3, [r3, #8]
 8000c90:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	68db      	ldr	r3, [r3, #12]
 8000c96:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000c9c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000c9e:	6979      	ldr	r1, [r7, #20]
 8000ca0:	3348      	adds	r3, #72	@ 0x48
 8000ca2:	00db      	lsls	r3, r3, #3
 8000ca4:	440b      	add	r3, r1
 8000ca6:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	699b      	ldr	r3, [r3, #24]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d109      	bne.n	8000cc4 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	43db      	mvns	r3, r3
 8000cba:	401a      	ands	r2, r3
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8000cc2:	e007      	b.n	8000cd4 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	431a      	orrs	r2, r3
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	691b      	ldr	r3, [r3, #16]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d109      	bne.n	8000cf0 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	43db      	mvns	r3, r3
 8000ce6:	401a      	ands	r2, r3
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8000cee:	e007      	b.n	8000d00 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	431a      	orrs	r2, r3
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	6a1b      	ldr	r3, [r3, #32]
 8000d04:	2b01      	cmp	r3, #1
 8000d06:	d107      	bne.n	8000d18 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	431a      	orrs	r2, r3
 8000d12:	697b      	ldr	r3, [r7, #20]
 8000d14:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000d1e:	f023 0201 	bic.w	r2, r3, #1
 8000d22:	697b      	ldr	r3, [r7, #20]
 8000d24:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	e006      	b.n	8000d3a <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d30:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000d38:	2301      	movs	r3, #1
  }
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	371c      	adds	r7, #28
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr

08000d46 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000d46:	b580      	push	{r7, lr}
 8000d48:	b084      	sub	sp, #16
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d54:	b2db      	uxtb	r3, r3
 8000d56:	2b01      	cmp	r3, #1
 8000d58:	d12e      	bne.n	8000db8 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	2202      	movs	r2, #2
 8000d5e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	681a      	ldr	r2, [r3, #0]
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	f022 0201 	bic.w	r2, r2, #1
 8000d70:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000d72:	f7ff fe17 	bl	80009a4 <HAL_GetTick>
 8000d76:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000d78:	e012      	b.n	8000da0 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000d7a:	f7ff fe13 	bl	80009a4 <HAL_GetTick>
 8000d7e:	4602      	mov	r2, r0
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	1ad3      	subs	r3, r2, r3
 8000d84:	2b0a      	cmp	r3, #10
 8000d86:	d90b      	bls.n	8000da0 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d8c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	2205      	movs	r2, #5
 8000d98:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	e012      	b.n	8000dc6 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	f003 0301 	and.w	r3, r3, #1
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d1e5      	bne.n	8000d7a <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	2200      	movs	r2, #0
 8000db2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8000db4:	2300      	movs	r3, #0
 8000db6:	e006      	b.n	8000dc6 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000dbc:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000dc4:	2301      	movs	r3, #1
  }
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	3710      	adds	r7, #16
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}

08000dce <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8000dce:	b480      	push	{r7}
 8000dd0:	b089      	sub	sp, #36	@ 0x24
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	60f8      	str	r0, [r7, #12]
 8000dd6:	60b9      	str	r1, [r7, #8]
 8000dd8:	607a      	str	r2, [r7, #4]
 8000dda:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000de2:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	689b      	ldr	r3, [r3, #8]
 8000dea:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000dec:	7ffb      	ldrb	r3, [r7, #31]
 8000dee:	2b01      	cmp	r3, #1
 8000df0:	d003      	beq.n	8000dfa <HAL_CAN_AddTxMessage+0x2c>
 8000df2:	7ffb      	ldrb	r3, [r7, #31]
 8000df4:	2b02      	cmp	r3, #2
 8000df6:	f040 80ad 	bne.w	8000f54 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000dfa:	69bb      	ldr	r3, [r7, #24]
 8000dfc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d10a      	bne.n	8000e1a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000e04:	69bb      	ldr	r3, [r7, #24]
 8000e06:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d105      	bne.n	8000e1a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000e0e:	69bb      	ldr	r3, [r7, #24]
 8000e10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	f000 8095 	beq.w	8000f44 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000e1a:	69bb      	ldr	r3, [r7, #24]
 8000e1c:	0e1b      	lsrs	r3, r3, #24
 8000e1e:	f003 0303 	and.w	r3, r3, #3
 8000e22:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000e24:	2201      	movs	r2, #1
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	409a      	lsls	r2, r3
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000e2e:	68bb      	ldr	r3, [r7, #8]
 8000e30:	689b      	ldr	r3, [r3, #8]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d10d      	bne.n	8000e52 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000e36:	68bb      	ldr	r3, [r7, #8]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000e40:	68f9      	ldr	r1, [r7, #12]
 8000e42:	6809      	ldr	r1, [r1, #0]
 8000e44:	431a      	orrs	r2, r3
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	3318      	adds	r3, #24
 8000e4a:	011b      	lsls	r3, r3, #4
 8000e4c:	440b      	add	r3, r1
 8000e4e:	601a      	str	r2, [r3, #0]
 8000e50:	e00f      	b.n	8000e72 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000e52:	68bb      	ldr	r3, [r7, #8]
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000e58:	68bb      	ldr	r3, [r7, #8]
 8000e5a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000e5c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000e5e:	68bb      	ldr	r3, [r7, #8]
 8000e60:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000e62:	68f9      	ldr	r1, [r7, #12]
 8000e64:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000e66:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	3318      	adds	r3, #24
 8000e6c:	011b      	lsls	r3, r3, #4
 8000e6e:	440b      	add	r3, r1
 8000e70:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	6819      	ldr	r1, [r3, #0]
 8000e76:	68bb      	ldr	r3, [r7, #8]
 8000e78:	691a      	ldr	r2, [r3, #16]
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	3318      	adds	r3, #24
 8000e7e:	011b      	lsls	r3, r3, #4
 8000e80:	440b      	add	r3, r1
 8000e82:	3304      	adds	r3, #4
 8000e84:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000e86:	68bb      	ldr	r3, [r7, #8]
 8000e88:	7d1b      	ldrb	r3, [r3, #20]
 8000e8a:	2b01      	cmp	r3, #1
 8000e8c:	d111      	bne.n	8000eb2 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	681a      	ldr	r2, [r3, #0]
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	3318      	adds	r3, #24
 8000e96:	011b      	lsls	r3, r3, #4
 8000e98:	4413      	add	r3, r2
 8000e9a:	3304      	adds	r3, #4
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	68fa      	ldr	r2, [r7, #12]
 8000ea0:	6811      	ldr	r1, [r2, #0]
 8000ea2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	3318      	adds	r3, #24
 8000eaa:	011b      	lsls	r3, r3, #4
 8000eac:	440b      	add	r3, r1
 8000eae:	3304      	adds	r3, #4
 8000eb0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	3307      	adds	r3, #7
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	061a      	lsls	r2, r3, #24
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	3306      	adds	r3, #6
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	041b      	lsls	r3, r3, #16
 8000ec2:	431a      	orrs	r2, r3
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	3305      	adds	r3, #5
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	021b      	lsls	r3, r3, #8
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	687a      	ldr	r2, [r7, #4]
 8000ed0:	3204      	adds	r2, #4
 8000ed2:	7812      	ldrb	r2, [r2, #0]
 8000ed4:	4610      	mov	r0, r2
 8000ed6:	68fa      	ldr	r2, [r7, #12]
 8000ed8:	6811      	ldr	r1, [r2, #0]
 8000eda:	ea43 0200 	orr.w	r2, r3, r0
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	011b      	lsls	r3, r3, #4
 8000ee2:	440b      	add	r3, r1
 8000ee4:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8000ee8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	3303      	adds	r3, #3
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	061a      	lsls	r2, r3, #24
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	3302      	adds	r3, #2
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	041b      	lsls	r3, r3, #16
 8000efa:	431a      	orrs	r2, r3
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	3301      	adds	r3, #1
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	021b      	lsls	r3, r3, #8
 8000f04:	4313      	orrs	r3, r2
 8000f06:	687a      	ldr	r2, [r7, #4]
 8000f08:	7812      	ldrb	r2, [r2, #0]
 8000f0a:	4610      	mov	r0, r2
 8000f0c:	68fa      	ldr	r2, [r7, #12]
 8000f0e:	6811      	ldr	r1, [r2, #0]
 8000f10:	ea43 0200 	orr.w	r2, r3, r0
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	011b      	lsls	r3, r3, #4
 8000f18:	440b      	add	r3, r1
 8000f1a:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8000f1e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	681a      	ldr	r2, [r3, #0]
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	3318      	adds	r3, #24
 8000f28:	011b      	lsls	r3, r3, #4
 8000f2a:	4413      	add	r3, r2
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	68fa      	ldr	r2, [r7, #12]
 8000f30:	6811      	ldr	r1, [r2, #0]
 8000f32:	f043 0201 	orr.w	r2, r3, #1
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	3318      	adds	r3, #24
 8000f3a:	011b      	lsls	r3, r3, #4
 8000f3c:	440b      	add	r3, r1
 8000f3e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8000f40:	2300      	movs	r3, #0
 8000f42:	e00e      	b.n	8000f62 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f48:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8000f50:	2301      	movs	r3, #1
 8000f52:	e006      	b.n	8000f62 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f58:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000f60:	2301      	movs	r3, #1
  }
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3724      	adds	r7, #36	@ 0x24
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr

08000f6e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8000f6e:	b480      	push	{r7}
 8000f70:	b085      	sub	sp, #20
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	6078      	str	r0, [r7, #4]
 8000f76:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f7e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8000f80:	7bfb      	ldrb	r3, [r7, #15]
 8000f82:	2b01      	cmp	r3, #1
 8000f84:	d002      	beq.n	8000f8c <HAL_CAN_ActivateNotification+0x1e>
 8000f86:	7bfb      	ldrb	r3, [r7, #15]
 8000f88:	2b02      	cmp	r3, #2
 8000f8a:	d109      	bne.n	8000fa0 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	6959      	ldr	r1, [r3, #20]
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	683a      	ldr	r2, [r7, #0]
 8000f98:	430a      	orrs	r2, r1
 8000f9a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	e006      	b.n	8000fae <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fa4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000fac:	2301      	movs	r3, #1
  }
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3714      	adds	r7, #20
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr

08000fba <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8000fba:	b580      	push	{r7, lr}
 8000fbc:	b08a      	sub	sp, #40	@ 0x28
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	695b      	ldr	r3, [r3, #20]
 8000fcc:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	689b      	ldr	r3, [r3, #8]
 8000fdc:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	68db      	ldr	r3, [r3, #12]
 8000fe4:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	691b      	ldr	r3, [r3, #16]
 8000fec:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	699b      	ldr	r3, [r3, #24]
 8000ff4:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8000ff6:	6a3b      	ldr	r3, [r7, #32]
 8000ff8:	f003 0301 	and.w	r3, r3, #1
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d07c      	beq.n	80010fa <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001000:	69bb      	ldr	r3, [r7, #24]
 8001002:	f003 0301 	and.w	r3, r3, #1
 8001006:	2b00      	cmp	r3, #0
 8001008:	d023      	beq.n	8001052 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	2201      	movs	r2, #1
 8001010:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001012:	69bb      	ldr	r3, [r7, #24]
 8001014:	f003 0302 	and.w	r3, r3, #2
 8001018:	2b00      	cmp	r3, #0
 800101a:	d003      	beq.n	8001024 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800101c:	6878      	ldr	r0, [r7, #4]
 800101e:	f000 f983 	bl	8001328 <HAL_CAN_TxMailbox0CompleteCallback>
 8001022:	e016      	b.n	8001052 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001024:	69bb      	ldr	r3, [r7, #24]
 8001026:	f003 0304 	and.w	r3, r3, #4
 800102a:	2b00      	cmp	r3, #0
 800102c:	d004      	beq.n	8001038 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800102e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001030:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001034:	627b      	str	r3, [r7, #36]	@ 0x24
 8001036:	e00c      	b.n	8001052 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001038:	69bb      	ldr	r3, [r7, #24]
 800103a:	f003 0308 	and.w	r3, r3, #8
 800103e:	2b00      	cmp	r3, #0
 8001040:	d004      	beq.n	800104c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001044:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001048:	627b      	str	r3, [r7, #36]	@ 0x24
 800104a:	e002      	b.n	8001052 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800104c:	6878      	ldr	r0, [r7, #4]
 800104e:	f000 f989 	bl	8001364 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001052:	69bb      	ldr	r3, [r7, #24]
 8001054:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001058:	2b00      	cmp	r3, #0
 800105a:	d024      	beq.n	80010a6 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001064:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001066:	69bb      	ldr	r3, [r7, #24]
 8001068:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800106c:	2b00      	cmp	r3, #0
 800106e:	d003      	beq.n	8001078 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001070:	6878      	ldr	r0, [r7, #4]
 8001072:	f000 f963 	bl	800133c <HAL_CAN_TxMailbox1CompleteCallback>
 8001076:	e016      	b.n	80010a6 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001078:	69bb      	ldr	r3, [r7, #24]
 800107a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800107e:	2b00      	cmp	r3, #0
 8001080:	d004      	beq.n	800108c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001084:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001088:	627b      	str	r3, [r7, #36]	@ 0x24
 800108a:	e00c      	b.n	80010a6 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800108c:	69bb      	ldr	r3, [r7, #24]
 800108e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001092:	2b00      	cmp	r3, #0
 8001094:	d004      	beq.n	80010a0 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001098:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800109c:	627b      	str	r3, [r7, #36]	@ 0x24
 800109e:	e002      	b.n	80010a6 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	f000 f969 	bl	8001378 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80010a6:	69bb      	ldr	r3, [r7, #24]
 80010a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d024      	beq.n	80010fa <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80010b8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80010ba:	69bb      	ldr	r3, [r7, #24]
 80010bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d003      	beq.n	80010cc <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80010c4:	6878      	ldr	r0, [r7, #4]
 80010c6:	f000 f943 	bl	8001350 <HAL_CAN_TxMailbox2CompleteCallback>
 80010ca:	e016      	b.n	80010fa <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80010cc:	69bb      	ldr	r3, [r7, #24]
 80010ce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d004      	beq.n	80010e0 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80010d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010d8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80010dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80010de:	e00c      	b.n	80010fa <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80010e0:	69bb      	ldr	r3, [r7, #24]
 80010e2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d004      	beq.n	80010f4 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80010ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80010f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80010f2:	e002      	b.n	80010fa <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80010f4:	6878      	ldr	r0, [r7, #4]
 80010f6:	f000 f949 	bl	800138c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80010fa:	6a3b      	ldr	r3, [r7, #32]
 80010fc:	f003 0308 	and.w	r3, r3, #8
 8001100:	2b00      	cmp	r3, #0
 8001102:	d00c      	beq.n	800111e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	f003 0310 	and.w	r3, r3, #16
 800110a:	2b00      	cmp	r3, #0
 800110c:	d007      	beq.n	800111e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800110e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001110:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001114:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	2210      	movs	r2, #16
 800111c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800111e:	6a3b      	ldr	r3, [r7, #32]
 8001120:	f003 0304 	and.w	r3, r3, #4
 8001124:	2b00      	cmp	r3, #0
 8001126:	d00b      	beq.n	8001140 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	f003 0308 	and.w	r3, r3, #8
 800112e:	2b00      	cmp	r3, #0
 8001130:	d006      	beq.n	8001140 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	2208      	movs	r2, #8
 8001138:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800113a:	6878      	ldr	r0, [r7, #4]
 800113c:	f000 f93a 	bl	80013b4 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001140:	6a3b      	ldr	r3, [r7, #32]
 8001142:	f003 0302 	and.w	r3, r3, #2
 8001146:	2b00      	cmp	r3, #0
 8001148:	d009      	beq.n	800115e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	68db      	ldr	r3, [r3, #12]
 8001150:	f003 0303 	and.w	r3, r3, #3
 8001154:	2b00      	cmp	r3, #0
 8001156:	d002      	beq.n	800115e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001158:	6878      	ldr	r0, [r7, #4]
 800115a:	f000 f921 	bl	80013a0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800115e:	6a3b      	ldr	r3, [r7, #32]
 8001160:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001164:	2b00      	cmp	r3, #0
 8001166:	d00c      	beq.n	8001182 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	f003 0310 	and.w	r3, r3, #16
 800116e:	2b00      	cmp	r3, #0
 8001170:	d007      	beq.n	8001182 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001174:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001178:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	2210      	movs	r2, #16
 8001180:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001182:	6a3b      	ldr	r3, [r7, #32]
 8001184:	f003 0320 	and.w	r3, r3, #32
 8001188:	2b00      	cmp	r3, #0
 800118a:	d00b      	beq.n	80011a4 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	f003 0308 	and.w	r3, r3, #8
 8001192:	2b00      	cmp	r3, #0
 8001194:	d006      	beq.n	80011a4 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	2208      	movs	r2, #8
 800119c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800119e:	6878      	ldr	r0, [r7, #4]
 80011a0:	f000 f91c 	bl	80013dc <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80011a4:	6a3b      	ldr	r3, [r7, #32]
 80011a6:	f003 0310 	and.w	r3, r3, #16
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d009      	beq.n	80011c2 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	691b      	ldr	r3, [r3, #16]
 80011b4:	f003 0303 	and.w	r3, r3, #3
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d002      	beq.n	80011c2 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80011bc:	6878      	ldr	r0, [r7, #4]
 80011be:	f000 f903 	bl	80013c8 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80011c2:	6a3b      	ldr	r3, [r7, #32]
 80011c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d00b      	beq.n	80011e4 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80011cc:	69fb      	ldr	r3, [r7, #28]
 80011ce:	f003 0310 	and.w	r3, r3, #16
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d006      	beq.n	80011e4 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	2210      	movs	r2, #16
 80011dc:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80011de:	6878      	ldr	r0, [r7, #4]
 80011e0:	f000 f906 	bl	80013f0 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80011e4:	6a3b      	ldr	r3, [r7, #32]
 80011e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d00b      	beq.n	8001206 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	f003 0308 	and.w	r3, r3, #8
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d006      	beq.n	8001206 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	2208      	movs	r2, #8
 80011fe:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001200:	6878      	ldr	r0, [r7, #4]
 8001202:	f000 f8ff 	bl	8001404 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001206:	6a3b      	ldr	r3, [r7, #32]
 8001208:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800120c:	2b00      	cmp	r3, #0
 800120e:	d07b      	beq.n	8001308 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001210:	69fb      	ldr	r3, [r7, #28]
 8001212:	f003 0304 	and.w	r3, r3, #4
 8001216:	2b00      	cmp	r3, #0
 8001218:	d072      	beq.n	8001300 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800121a:	6a3b      	ldr	r3, [r7, #32]
 800121c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001220:	2b00      	cmp	r3, #0
 8001222:	d008      	beq.n	8001236 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800122a:	2b00      	cmp	r3, #0
 800122c:	d003      	beq.n	8001236 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800122e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001230:	f043 0301 	orr.w	r3, r3, #1
 8001234:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001236:	6a3b      	ldr	r3, [r7, #32]
 8001238:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800123c:	2b00      	cmp	r3, #0
 800123e:	d008      	beq.n	8001252 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001246:	2b00      	cmp	r3, #0
 8001248:	d003      	beq.n	8001252 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800124a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800124c:	f043 0302 	orr.w	r3, r3, #2
 8001250:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001252:	6a3b      	ldr	r3, [r7, #32]
 8001254:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001258:	2b00      	cmp	r3, #0
 800125a:	d008      	beq.n	800126e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001262:	2b00      	cmp	r3, #0
 8001264:	d003      	beq.n	800126e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001268:	f043 0304 	orr.w	r3, r3, #4
 800126c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800126e:	6a3b      	ldr	r3, [r7, #32]
 8001270:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001274:	2b00      	cmp	r3, #0
 8001276:	d043      	beq.n	8001300 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800127e:	2b00      	cmp	r3, #0
 8001280:	d03e      	beq.n	8001300 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001288:	2b60      	cmp	r3, #96	@ 0x60
 800128a:	d02b      	beq.n	80012e4 <HAL_CAN_IRQHandler+0x32a>
 800128c:	2b60      	cmp	r3, #96	@ 0x60
 800128e:	d82e      	bhi.n	80012ee <HAL_CAN_IRQHandler+0x334>
 8001290:	2b50      	cmp	r3, #80	@ 0x50
 8001292:	d022      	beq.n	80012da <HAL_CAN_IRQHandler+0x320>
 8001294:	2b50      	cmp	r3, #80	@ 0x50
 8001296:	d82a      	bhi.n	80012ee <HAL_CAN_IRQHandler+0x334>
 8001298:	2b40      	cmp	r3, #64	@ 0x40
 800129a:	d019      	beq.n	80012d0 <HAL_CAN_IRQHandler+0x316>
 800129c:	2b40      	cmp	r3, #64	@ 0x40
 800129e:	d826      	bhi.n	80012ee <HAL_CAN_IRQHandler+0x334>
 80012a0:	2b30      	cmp	r3, #48	@ 0x30
 80012a2:	d010      	beq.n	80012c6 <HAL_CAN_IRQHandler+0x30c>
 80012a4:	2b30      	cmp	r3, #48	@ 0x30
 80012a6:	d822      	bhi.n	80012ee <HAL_CAN_IRQHandler+0x334>
 80012a8:	2b10      	cmp	r3, #16
 80012aa:	d002      	beq.n	80012b2 <HAL_CAN_IRQHandler+0x2f8>
 80012ac:	2b20      	cmp	r3, #32
 80012ae:	d005      	beq.n	80012bc <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80012b0:	e01d      	b.n	80012ee <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80012b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012b4:	f043 0308 	orr.w	r3, r3, #8
 80012b8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80012ba:	e019      	b.n	80012f0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80012bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012be:	f043 0310 	orr.w	r3, r3, #16
 80012c2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80012c4:	e014      	b.n	80012f0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80012c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012c8:	f043 0320 	orr.w	r3, r3, #32
 80012cc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80012ce:	e00f      	b.n	80012f0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80012d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80012d6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80012d8:	e00a      	b.n	80012f0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80012da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80012e0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80012e2:	e005      	b.n	80012f0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80012e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012ea:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80012ec:	e000      	b.n	80012f0 <HAL_CAN_IRQHandler+0x336>
            break;
 80012ee:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	699a      	ldr	r2, [r3, #24]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80012fe:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	2204      	movs	r2, #4
 8001306:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800130a:	2b00      	cmp	r3, #0
 800130c:	d008      	beq.n	8001320 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001314:	431a      	orrs	r2, r3
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800131a:	6878      	ldr	r0, [r7, #4]
 800131c:	f000 f87c 	bl	8001418 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001320:	bf00      	nop
 8001322:	3728      	adds	r7, #40	@ 0x28
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}

08001328 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001330:	bf00      	nop
 8001332:	370c      	adds	r7, #12
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr

0800133c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001344:	bf00      	nop
 8001346:	370c      	adds	r7, #12
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr

08001350 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001358:	bf00      	nop
 800135a:	370c      	adds	r7, #12
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr

08001364 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800136c:	bf00      	nop
 800136e:	370c      	adds	r7, #12
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr

08001378 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001380:	bf00      	nop
 8001382:	370c      	adds	r7, #12
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr

0800138c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001394:	bf00      	nop
 8001396:	370c      	adds	r7, #12
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr

080013a0 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 80013a8:	bf00      	nop
 80013aa:	370c      	adds	r7, #12
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr

080013b4 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80013bc:	bf00      	nop
 80013be:	370c      	adds	r7, #12
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr

080013c8 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80013d0:	bf00      	nop
 80013d2:	370c      	adds	r7, #12
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr

080013dc <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80013e4:	bf00      	nop
 80013e6:	370c      	adds	r7, #12
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr

080013f0 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80013f8:	bf00      	nop
 80013fa:	370c      	adds	r7, #12
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr

08001404 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001404:	b480      	push	{r7}
 8001406:	b083      	sub	sp, #12
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800140c:	bf00      	nop
 800140e:	370c      	adds	r7, #12
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr

08001418 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001420:	bf00      	nop
 8001422:	370c      	adds	r7, #12
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr

0800142c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800142c:	b480      	push	{r7}
 800142e:	b085      	sub	sp, #20
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	f003 0307 	and.w	r3, r3, #7
 800143a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800143c:	4b0c      	ldr	r3, [pc, #48]	@ (8001470 <__NVIC_SetPriorityGrouping+0x44>)
 800143e:	68db      	ldr	r3, [r3, #12]
 8001440:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001442:	68ba      	ldr	r2, [r7, #8]
 8001444:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001448:	4013      	ands	r3, r2
 800144a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001454:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001458:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800145c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800145e:	4a04      	ldr	r2, [pc, #16]	@ (8001470 <__NVIC_SetPriorityGrouping+0x44>)
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	60d3      	str	r3, [r2, #12]
}
 8001464:	bf00      	nop
 8001466:	3714      	adds	r7, #20
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr
 8001470:	e000ed00 	.word	0xe000ed00

08001474 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001478:	4b04      	ldr	r3, [pc, #16]	@ (800148c <__NVIC_GetPriorityGrouping+0x18>)
 800147a:	68db      	ldr	r3, [r3, #12]
 800147c:	0a1b      	lsrs	r3, r3, #8
 800147e:	f003 0307 	and.w	r3, r3, #7
}
 8001482:	4618      	mov	r0, r3
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr
 800148c:	e000ed00 	.word	0xe000ed00

08001490 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	4603      	mov	r3, r0
 8001498:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800149a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	db0b      	blt.n	80014ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014a2:	79fb      	ldrb	r3, [r7, #7]
 80014a4:	f003 021f 	and.w	r2, r3, #31
 80014a8:	4907      	ldr	r1, [pc, #28]	@ (80014c8 <__NVIC_EnableIRQ+0x38>)
 80014aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ae:	095b      	lsrs	r3, r3, #5
 80014b0:	2001      	movs	r0, #1
 80014b2:	fa00 f202 	lsl.w	r2, r0, r2
 80014b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014ba:	bf00      	nop
 80014bc:	370c      	adds	r7, #12
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	e000e100 	.word	0xe000e100

080014cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	4603      	mov	r3, r0
 80014d4:	6039      	str	r1, [r7, #0]
 80014d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	db0a      	blt.n	80014f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	b2da      	uxtb	r2, r3
 80014e4:	490c      	ldr	r1, [pc, #48]	@ (8001518 <__NVIC_SetPriority+0x4c>)
 80014e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ea:	0112      	lsls	r2, r2, #4
 80014ec:	b2d2      	uxtb	r2, r2
 80014ee:	440b      	add	r3, r1
 80014f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014f4:	e00a      	b.n	800150c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	b2da      	uxtb	r2, r3
 80014fa:	4908      	ldr	r1, [pc, #32]	@ (800151c <__NVIC_SetPriority+0x50>)
 80014fc:	79fb      	ldrb	r3, [r7, #7]
 80014fe:	f003 030f 	and.w	r3, r3, #15
 8001502:	3b04      	subs	r3, #4
 8001504:	0112      	lsls	r2, r2, #4
 8001506:	b2d2      	uxtb	r2, r2
 8001508:	440b      	add	r3, r1
 800150a:	761a      	strb	r2, [r3, #24]
}
 800150c:	bf00      	nop
 800150e:	370c      	adds	r7, #12
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr
 8001518:	e000e100 	.word	0xe000e100
 800151c:	e000ed00 	.word	0xe000ed00

08001520 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001520:	b480      	push	{r7}
 8001522:	b089      	sub	sp, #36	@ 0x24
 8001524:	af00      	add	r7, sp, #0
 8001526:	60f8      	str	r0, [r7, #12]
 8001528:	60b9      	str	r1, [r7, #8]
 800152a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	f003 0307 	and.w	r3, r3, #7
 8001532:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001534:	69fb      	ldr	r3, [r7, #28]
 8001536:	f1c3 0307 	rsb	r3, r3, #7
 800153a:	2b04      	cmp	r3, #4
 800153c:	bf28      	it	cs
 800153e:	2304      	movcs	r3, #4
 8001540:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	3304      	adds	r3, #4
 8001546:	2b06      	cmp	r3, #6
 8001548:	d902      	bls.n	8001550 <NVIC_EncodePriority+0x30>
 800154a:	69fb      	ldr	r3, [r7, #28]
 800154c:	3b03      	subs	r3, #3
 800154e:	e000      	b.n	8001552 <NVIC_EncodePriority+0x32>
 8001550:	2300      	movs	r3, #0
 8001552:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001554:	f04f 32ff 	mov.w	r2, #4294967295
 8001558:	69bb      	ldr	r3, [r7, #24]
 800155a:	fa02 f303 	lsl.w	r3, r2, r3
 800155e:	43da      	mvns	r2, r3
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	401a      	ands	r2, r3
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001568:	f04f 31ff 	mov.w	r1, #4294967295
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	fa01 f303 	lsl.w	r3, r1, r3
 8001572:	43d9      	mvns	r1, r3
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001578:	4313      	orrs	r3, r2
         );
}
 800157a:	4618      	mov	r0, r3
 800157c:	3724      	adds	r7, #36	@ 0x24
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr

08001586 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001586:	b580      	push	{r7, lr}
 8001588:	b082      	sub	sp, #8
 800158a:	af00      	add	r7, sp, #0
 800158c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800158e:	6878      	ldr	r0, [r7, #4]
 8001590:	f7ff ff4c 	bl	800142c <__NVIC_SetPriorityGrouping>
}
 8001594:	bf00      	nop
 8001596:	3708      	adds	r7, #8
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}

0800159c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b086      	sub	sp, #24
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	4603      	mov	r3, r0
 80015a4:	60b9      	str	r1, [r7, #8]
 80015a6:	607a      	str	r2, [r7, #4]
 80015a8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015aa:	2300      	movs	r3, #0
 80015ac:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015ae:	f7ff ff61 	bl	8001474 <__NVIC_GetPriorityGrouping>
 80015b2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015b4:	687a      	ldr	r2, [r7, #4]
 80015b6:	68b9      	ldr	r1, [r7, #8]
 80015b8:	6978      	ldr	r0, [r7, #20]
 80015ba:	f7ff ffb1 	bl	8001520 <NVIC_EncodePriority>
 80015be:	4602      	mov	r2, r0
 80015c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015c4:	4611      	mov	r1, r2
 80015c6:	4618      	mov	r0, r3
 80015c8:	f7ff ff80 	bl	80014cc <__NVIC_SetPriority>
}
 80015cc:	bf00      	nop
 80015ce:	3718      	adds	r7, #24
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}

080015d4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
 80015da:	4603      	mov	r3, r0
 80015dc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e2:	4618      	mov	r0, r3
 80015e4:	f7ff ff54 	bl	8001490 <__NVIC_EnableIRQ>
}
 80015e8:	bf00      	nop
 80015ea:	3708      	adds	r7, #8
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}

080015f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b087      	sub	sp, #28
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015fa:	2300      	movs	r3, #0
 80015fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015fe:	e14e      	b.n	800189e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	2101      	movs	r1, #1
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	fa01 f303 	lsl.w	r3, r1, r3
 800160c:	4013      	ands	r3, r2
 800160e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	2b00      	cmp	r3, #0
 8001614:	f000 8140 	beq.w	8001898 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	f003 0303 	and.w	r3, r3, #3
 8001620:	2b01      	cmp	r3, #1
 8001622:	d005      	beq.n	8001630 <HAL_GPIO_Init+0x40>
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	f003 0303 	and.w	r3, r3, #3
 800162c:	2b02      	cmp	r3, #2
 800162e:	d130      	bne.n	8001692 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	005b      	lsls	r3, r3, #1
 800163a:	2203      	movs	r2, #3
 800163c:	fa02 f303 	lsl.w	r3, r2, r3
 8001640:	43db      	mvns	r3, r3
 8001642:	693a      	ldr	r2, [r7, #16]
 8001644:	4013      	ands	r3, r2
 8001646:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	68da      	ldr	r2, [r3, #12]
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	005b      	lsls	r3, r3, #1
 8001650:	fa02 f303 	lsl.w	r3, r2, r3
 8001654:	693a      	ldr	r2, [r7, #16]
 8001656:	4313      	orrs	r3, r2
 8001658:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	693a      	ldr	r2, [r7, #16]
 800165e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001666:	2201      	movs	r2, #1
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	fa02 f303 	lsl.w	r3, r2, r3
 800166e:	43db      	mvns	r3, r3
 8001670:	693a      	ldr	r2, [r7, #16]
 8001672:	4013      	ands	r3, r2
 8001674:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	091b      	lsrs	r3, r3, #4
 800167c:	f003 0201 	and.w	r2, r3, #1
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	fa02 f303 	lsl.w	r3, r2, r3
 8001686:	693a      	ldr	r2, [r7, #16]
 8001688:	4313      	orrs	r3, r2
 800168a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	693a      	ldr	r2, [r7, #16]
 8001690:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	f003 0303 	and.w	r3, r3, #3
 800169a:	2b03      	cmp	r3, #3
 800169c:	d017      	beq.n	80016ce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	68db      	ldr	r3, [r3, #12]
 80016a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	005b      	lsls	r3, r3, #1
 80016a8:	2203      	movs	r2, #3
 80016aa:	fa02 f303 	lsl.w	r3, r2, r3
 80016ae:	43db      	mvns	r3, r3
 80016b0:	693a      	ldr	r2, [r7, #16]
 80016b2:	4013      	ands	r3, r2
 80016b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	689a      	ldr	r2, [r3, #8]
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	005b      	lsls	r3, r3, #1
 80016be:	fa02 f303 	lsl.w	r3, r2, r3
 80016c2:	693a      	ldr	r2, [r7, #16]
 80016c4:	4313      	orrs	r3, r2
 80016c6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	693a      	ldr	r2, [r7, #16]
 80016cc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	f003 0303 	and.w	r3, r3, #3
 80016d6:	2b02      	cmp	r3, #2
 80016d8:	d123      	bne.n	8001722 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	08da      	lsrs	r2, r3, #3
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	3208      	adds	r2, #8
 80016e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	f003 0307 	and.w	r3, r3, #7
 80016ee:	009b      	lsls	r3, r3, #2
 80016f0:	220f      	movs	r2, #15
 80016f2:	fa02 f303 	lsl.w	r3, r2, r3
 80016f6:	43db      	mvns	r3, r3
 80016f8:	693a      	ldr	r2, [r7, #16]
 80016fa:	4013      	ands	r3, r2
 80016fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	691a      	ldr	r2, [r3, #16]
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	f003 0307 	and.w	r3, r3, #7
 8001708:	009b      	lsls	r3, r3, #2
 800170a:	fa02 f303 	lsl.w	r3, r2, r3
 800170e:	693a      	ldr	r2, [r7, #16]
 8001710:	4313      	orrs	r3, r2
 8001712:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	08da      	lsrs	r2, r3, #3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	3208      	adds	r2, #8
 800171c:	6939      	ldr	r1, [r7, #16]
 800171e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	005b      	lsls	r3, r3, #1
 800172c:	2203      	movs	r2, #3
 800172e:	fa02 f303 	lsl.w	r3, r2, r3
 8001732:	43db      	mvns	r3, r3
 8001734:	693a      	ldr	r2, [r7, #16]
 8001736:	4013      	ands	r3, r2
 8001738:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	f003 0203 	and.w	r2, r3, #3
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	005b      	lsls	r3, r3, #1
 8001746:	fa02 f303 	lsl.w	r3, r2, r3
 800174a:	693a      	ldr	r2, [r7, #16]
 800174c:	4313      	orrs	r3, r2
 800174e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	693a      	ldr	r2, [r7, #16]
 8001754:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800175e:	2b00      	cmp	r3, #0
 8001760:	f000 809a 	beq.w	8001898 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001764:	4b55      	ldr	r3, [pc, #340]	@ (80018bc <HAL_GPIO_Init+0x2cc>)
 8001766:	699b      	ldr	r3, [r3, #24]
 8001768:	4a54      	ldr	r2, [pc, #336]	@ (80018bc <HAL_GPIO_Init+0x2cc>)
 800176a:	f043 0301 	orr.w	r3, r3, #1
 800176e:	6193      	str	r3, [r2, #24]
 8001770:	4b52      	ldr	r3, [pc, #328]	@ (80018bc <HAL_GPIO_Init+0x2cc>)
 8001772:	699b      	ldr	r3, [r3, #24]
 8001774:	f003 0301 	and.w	r3, r3, #1
 8001778:	60bb      	str	r3, [r7, #8]
 800177a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800177c:	4a50      	ldr	r2, [pc, #320]	@ (80018c0 <HAL_GPIO_Init+0x2d0>)
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	089b      	lsrs	r3, r3, #2
 8001782:	3302      	adds	r3, #2
 8001784:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001788:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	f003 0303 	and.w	r3, r3, #3
 8001790:	009b      	lsls	r3, r3, #2
 8001792:	220f      	movs	r2, #15
 8001794:	fa02 f303 	lsl.w	r3, r2, r3
 8001798:	43db      	mvns	r3, r3
 800179a:	693a      	ldr	r2, [r7, #16]
 800179c:	4013      	ands	r3, r2
 800179e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80017a6:	d013      	beq.n	80017d0 <HAL_GPIO_Init+0x1e0>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	4a46      	ldr	r2, [pc, #280]	@ (80018c4 <HAL_GPIO_Init+0x2d4>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d00d      	beq.n	80017cc <HAL_GPIO_Init+0x1dc>
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	4a45      	ldr	r2, [pc, #276]	@ (80018c8 <HAL_GPIO_Init+0x2d8>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d007      	beq.n	80017c8 <HAL_GPIO_Init+0x1d8>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	4a44      	ldr	r2, [pc, #272]	@ (80018cc <HAL_GPIO_Init+0x2dc>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d101      	bne.n	80017c4 <HAL_GPIO_Init+0x1d4>
 80017c0:	2303      	movs	r3, #3
 80017c2:	e006      	b.n	80017d2 <HAL_GPIO_Init+0x1e2>
 80017c4:	2305      	movs	r3, #5
 80017c6:	e004      	b.n	80017d2 <HAL_GPIO_Init+0x1e2>
 80017c8:	2302      	movs	r3, #2
 80017ca:	e002      	b.n	80017d2 <HAL_GPIO_Init+0x1e2>
 80017cc:	2301      	movs	r3, #1
 80017ce:	e000      	b.n	80017d2 <HAL_GPIO_Init+0x1e2>
 80017d0:	2300      	movs	r3, #0
 80017d2:	697a      	ldr	r2, [r7, #20]
 80017d4:	f002 0203 	and.w	r2, r2, #3
 80017d8:	0092      	lsls	r2, r2, #2
 80017da:	4093      	lsls	r3, r2
 80017dc:	693a      	ldr	r2, [r7, #16]
 80017de:	4313      	orrs	r3, r2
 80017e0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80017e2:	4937      	ldr	r1, [pc, #220]	@ (80018c0 <HAL_GPIO_Init+0x2d0>)
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	089b      	lsrs	r3, r3, #2
 80017e8:	3302      	adds	r3, #2
 80017ea:	693a      	ldr	r2, [r7, #16]
 80017ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017f0:	4b37      	ldr	r3, [pc, #220]	@ (80018d0 <HAL_GPIO_Init+0x2e0>)
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	43db      	mvns	r3, r3
 80017fa:	693a      	ldr	r2, [r7, #16]
 80017fc:	4013      	ands	r3, r2
 80017fe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001808:	2b00      	cmp	r3, #0
 800180a:	d003      	beq.n	8001814 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 800180c:	693a      	ldr	r2, [r7, #16]
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	4313      	orrs	r3, r2
 8001812:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001814:	4a2e      	ldr	r2, [pc, #184]	@ (80018d0 <HAL_GPIO_Init+0x2e0>)
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800181a:	4b2d      	ldr	r3, [pc, #180]	@ (80018d0 <HAL_GPIO_Init+0x2e0>)
 800181c:	68db      	ldr	r3, [r3, #12]
 800181e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	43db      	mvns	r3, r3
 8001824:	693a      	ldr	r2, [r7, #16]
 8001826:	4013      	ands	r3, r2
 8001828:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001832:	2b00      	cmp	r3, #0
 8001834:	d003      	beq.n	800183e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001836:	693a      	ldr	r2, [r7, #16]
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	4313      	orrs	r3, r2
 800183c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800183e:	4a24      	ldr	r2, [pc, #144]	@ (80018d0 <HAL_GPIO_Init+0x2e0>)
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001844:	4b22      	ldr	r3, [pc, #136]	@ (80018d0 <HAL_GPIO_Init+0x2e0>)
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	43db      	mvns	r3, r3
 800184e:	693a      	ldr	r2, [r7, #16]
 8001850:	4013      	ands	r3, r2
 8001852:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800185c:	2b00      	cmp	r3, #0
 800185e:	d003      	beq.n	8001868 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001860:	693a      	ldr	r2, [r7, #16]
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	4313      	orrs	r3, r2
 8001866:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001868:	4a19      	ldr	r2, [pc, #100]	@ (80018d0 <HAL_GPIO_Init+0x2e0>)
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800186e:	4b18      	ldr	r3, [pc, #96]	@ (80018d0 <HAL_GPIO_Init+0x2e0>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	43db      	mvns	r3, r3
 8001878:	693a      	ldr	r2, [r7, #16]
 800187a:	4013      	ands	r3, r2
 800187c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001886:	2b00      	cmp	r3, #0
 8001888:	d003      	beq.n	8001892 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800188a:	693a      	ldr	r2, [r7, #16]
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	4313      	orrs	r3, r2
 8001890:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001892:	4a0f      	ldr	r2, [pc, #60]	@ (80018d0 <HAL_GPIO_Init+0x2e0>)
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	3301      	adds	r3, #1
 800189c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	fa22 f303 	lsr.w	r3, r2, r3
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	f47f aea9 	bne.w	8001600 <HAL_GPIO_Init+0x10>
  }
}
 80018ae:	bf00      	nop
 80018b0:	bf00      	nop
 80018b2:	371c      	adds	r7, #28
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr
 80018bc:	40021000 	.word	0x40021000
 80018c0:	40010000 	.word	0x40010000
 80018c4:	48000400 	.word	0x48000400
 80018c8:	48000800 	.word	0x48000800
 80018cc:	48000c00 	.word	0x48000c00
 80018d0:	40010400 	.word	0x40010400

080018d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
 80018dc:	460b      	mov	r3, r1
 80018de:	807b      	strh	r3, [r7, #2]
 80018e0:	4613      	mov	r3, r2
 80018e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018e4:	787b      	ldrb	r3, [r7, #1]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d003      	beq.n	80018f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80018ea:	887a      	ldrh	r2, [r7, #2]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80018f0:	e002      	b.n	80018f8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80018f2:	887a      	ldrh	r2, [r7, #2]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80018f8:	bf00      	nop
 80018fa:	370c      	adds	r7, #12
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr

08001904 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001904:	b480      	push	{r7}
 8001906:	b085      	sub	sp, #20
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
 800190c:	460b      	mov	r3, r1
 800190e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	695b      	ldr	r3, [r3, #20]
 8001914:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001916:	887a      	ldrh	r2, [r7, #2]
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	4013      	ands	r3, r2
 800191c:	041a      	lsls	r2, r3, #16
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	43d9      	mvns	r1, r3
 8001922:	887b      	ldrh	r3, [r7, #2]
 8001924:	400b      	ands	r3, r1
 8001926:	431a      	orrs	r2, r3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	619a      	str	r2, [r3, #24]
}
 800192c:	bf00      	nop
 800192e:	3714      	adds	r7, #20
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr

08001938 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 800193e:	af00      	add	r7, sp, #0
 8001940:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001944:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001948:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800194a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800194e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d102      	bne.n	800195e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001958:	2301      	movs	r3, #1
 800195a:	f001 b823 	b.w	80029a4 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800195e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001962:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f003 0301 	and.w	r3, r3, #1
 800196e:	2b00      	cmp	r3, #0
 8001970:	f000 817d 	beq.w	8001c6e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001974:	4bbc      	ldr	r3, [pc, #752]	@ (8001c68 <HAL_RCC_OscConfig+0x330>)
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	f003 030c 	and.w	r3, r3, #12
 800197c:	2b04      	cmp	r3, #4
 800197e:	d00c      	beq.n	800199a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001980:	4bb9      	ldr	r3, [pc, #740]	@ (8001c68 <HAL_RCC_OscConfig+0x330>)
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f003 030c 	and.w	r3, r3, #12
 8001988:	2b08      	cmp	r3, #8
 800198a:	d15c      	bne.n	8001a46 <HAL_RCC_OscConfig+0x10e>
 800198c:	4bb6      	ldr	r3, [pc, #728]	@ (8001c68 <HAL_RCC_OscConfig+0x330>)
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001994:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001998:	d155      	bne.n	8001a46 <HAL_RCC_OscConfig+0x10e>
 800199a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800199e:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019a2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 80019a6:	fa93 f3a3 	rbit	r3, r3
 80019aa:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80019ae:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019b2:	fab3 f383 	clz	r3, r3
 80019b6:	b2db      	uxtb	r3, r3
 80019b8:	095b      	lsrs	r3, r3, #5
 80019ba:	b2db      	uxtb	r3, r3
 80019bc:	f043 0301 	orr.w	r3, r3, #1
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d102      	bne.n	80019cc <HAL_RCC_OscConfig+0x94>
 80019c6:	4ba8      	ldr	r3, [pc, #672]	@ (8001c68 <HAL_RCC_OscConfig+0x330>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	e015      	b.n	80019f8 <HAL_RCC_OscConfig+0xc0>
 80019cc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80019d0:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019d4:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 80019d8:	fa93 f3a3 	rbit	r3, r3
 80019dc:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80019e0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80019e4:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80019e8:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 80019ec:	fa93 f3a3 	rbit	r3, r3
 80019f0:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 80019f4:	4b9c      	ldr	r3, [pc, #624]	@ (8001c68 <HAL_RCC_OscConfig+0x330>)
 80019f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019f8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80019fc:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8001a00:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8001a04:	fa92 f2a2 	rbit	r2, r2
 8001a08:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8001a0c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8001a10:	fab2 f282 	clz	r2, r2
 8001a14:	b2d2      	uxtb	r2, r2
 8001a16:	f042 0220 	orr.w	r2, r2, #32
 8001a1a:	b2d2      	uxtb	r2, r2
 8001a1c:	f002 021f 	and.w	r2, r2, #31
 8001a20:	2101      	movs	r1, #1
 8001a22:	fa01 f202 	lsl.w	r2, r1, r2
 8001a26:	4013      	ands	r3, r2
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	f000 811f 	beq.w	8001c6c <HAL_RCC_OscConfig+0x334>
 8001a2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a32:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	f040 8116 	bne.w	8001c6c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	f000 bfaf 	b.w	80029a4 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a4a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a56:	d106      	bne.n	8001a66 <HAL_RCC_OscConfig+0x12e>
 8001a58:	4b83      	ldr	r3, [pc, #524]	@ (8001c68 <HAL_RCC_OscConfig+0x330>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a82      	ldr	r2, [pc, #520]	@ (8001c68 <HAL_RCC_OscConfig+0x330>)
 8001a5e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a62:	6013      	str	r3, [r2, #0]
 8001a64:	e036      	b.n	8001ad4 <HAL_RCC_OscConfig+0x19c>
 8001a66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a6a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d10c      	bne.n	8001a90 <HAL_RCC_OscConfig+0x158>
 8001a76:	4b7c      	ldr	r3, [pc, #496]	@ (8001c68 <HAL_RCC_OscConfig+0x330>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a7b      	ldr	r2, [pc, #492]	@ (8001c68 <HAL_RCC_OscConfig+0x330>)
 8001a7c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a80:	6013      	str	r3, [r2, #0]
 8001a82:	4b79      	ldr	r3, [pc, #484]	@ (8001c68 <HAL_RCC_OscConfig+0x330>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a78      	ldr	r2, [pc, #480]	@ (8001c68 <HAL_RCC_OscConfig+0x330>)
 8001a88:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a8c:	6013      	str	r3, [r2, #0]
 8001a8e:	e021      	b.n	8001ad4 <HAL_RCC_OscConfig+0x19c>
 8001a90:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a94:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001aa0:	d10c      	bne.n	8001abc <HAL_RCC_OscConfig+0x184>
 8001aa2:	4b71      	ldr	r3, [pc, #452]	@ (8001c68 <HAL_RCC_OscConfig+0x330>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a70      	ldr	r2, [pc, #448]	@ (8001c68 <HAL_RCC_OscConfig+0x330>)
 8001aa8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001aac:	6013      	str	r3, [r2, #0]
 8001aae:	4b6e      	ldr	r3, [pc, #440]	@ (8001c68 <HAL_RCC_OscConfig+0x330>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a6d      	ldr	r2, [pc, #436]	@ (8001c68 <HAL_RCC_OscConfig+0x330>)
 8001ab4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ab8:	6013      	str	r3, [r2, #0]
 8001aba:	e00b      	b.n	8001ad4 <HAL_RCC_OscConfig+0x19c>
 8001abc:	4b6a      	ldr	r3, [pc, #424]	@ (8001c68 <HAL_RCC_OscConfig+0x330>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a69      	ldr	r2, [pc, #420]	@ (8001c68 <HAL_RCC_OscConfig+0x330>)
 8001ac2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ac6:	6013      	str	r3, [r2, #0]
 8001ac8:	4b67      	ldr	r3, [pc, #412]	@ (8001c68 <HAL_RCC_OscConfig+0x330>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a66      	ldr	r2, [pc, #408]	@ (8001c68 <HAL_RCC_OscConfig+0x330>)
 8001ace:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ad2:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ad4:	4b64      	ldr	r3, [pc, #400]	@ (8001c68 <HAL_RCC_OscConfig+0x330>)
 8001ad6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ad8:	f023 020f 	bic.w	r2, r3, #15
 8001adc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ae0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	495f      	ldr	r1, [pc, #380]	@ (8001c68 <HAL_RCC_OscConfig+0x330>)
 8001aea:	4313      	orrs	r3, r2
 8001aec:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001aee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001af2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d059      	beq.n	8001bb2 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001afe:	f7fe ff51 	bl	80009a4 <HAL_GetTick>
 8001b02:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b06:	e00a      	b.n	8001b1e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b08:	f7fe ff4c 	bl	80009a4 <HAL_GetTick>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001b12:	1ad3      	subs	r3, r2, r3
 8001b14:	2b64      	cmp	r3, #100	@ 0x64
 8001b16:	d902      	bls.n	8001b1e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001b18:	2303      	movs	r3, #3
 8001b1a:	f000 bf43 	b.w	80029a4 <HAL_RCC_OscConfig+0x106c>
 8001b1e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001b22:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b26:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001b2a:	fa93 f3a3 	rbit	r3, r3
 8001b2e:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8001b32:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b36:	fab3 f383 	clz	r3, r3
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	095b      	lsrs	r3, r3, #5
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	f043 0301 	orr.w	r3, r3, #1
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d102      	bne.n	8001b50 <HAL_RCC_OscConfig+0x218>
 8001b4a:	4b47      	ldr	r3, [pc, #284]	@ (8001c68 <HAL_RCC_OscConfig+0x330>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	e015      	b.n	8001b7c <HAL_RCC_OscConfig+0x244>
 8001b50:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001b54:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b58:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8001b5c:	fa93 f3a3 	rbit	r3, r3
 8001b60:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001b64:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001b68:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001b6c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8001b70:	fa93 f3a3 	rbit	r3, r3
 8001b74:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8001b78:	4b3b      	ldr	r3, [pc, #236]	@ (8001c68 <HAL_RCC_OscConfig+0x330>)
 8001b7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b7c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001b80:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8001b84:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8001b88:	fa92 f2a2 	rbit	r2, r2
 8001b8c:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8001b90:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8001b94:	fab2 f282 	clz	r2, r2
 8001b98:	b2d2      	uxtb	r2, r2
 8001b9a:	f042 0220 	orr.w	r2, r2, #32
 8001b9e:	b2d2      	uxtb	r2, r2
 8001ba0:	f002 021f 	and.w	r2, r2, #31
 8001ba4:	2101      	movs	r1, #1
 8001ba6:	fa01 f202 	lsl.w	r2, r1, r2
 8001baa:	4013      	ands	r3, r2
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d0ab      	beq.n	8001b08 <HAL_RCC_OscConfig+0x1d0>
 8001bb0:	e05d      	b.n	8001c6e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bb2:	f7fe fef7 	bl	80009a4 <HAL_GetTick>
 8001bb6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bba:	e00a      	b.n	8001bd2 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bbc:	f7fe fef2 	bl	80009a4 <HAL_GetTick>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001bc6:	1ad3      	subs	r3, r2, r3
 8001bc8:	2b64      	cmp	r3, #100	@ 0x64
 8001bca:	d902      	bls.n	8001bd2 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001bcc:	2303      	movs	r3, #3
 8001bce:	f000 bee9 	b.w	80029a4 <HAL_RCC_OscConfig+0x106c>
 8001bd2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001bd6:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bda:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8001bde:	fa93 f3a3 	rbit	r3, r3
 8001be2:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8001be6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bea:	fab3 f383 	clz	r3, r3
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	095b      	lsrs	r3, r3, #5
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	f043 0301 	orr.w	r3, r3, #1
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d102      	bne.n	8001c04 <HAL_RCC_OscConfig+0x2cc>
 8001bfe:	4b1a      	ldr	r3, [pc, #104]	@ (8001c68 <HAL_RCC_OscConfig+0x330>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	e015      	b.n	8001c30 <HAL_RCC_OscConfig+0x2f8>
 8001c04:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001c08:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c0c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8001c10:	fa93 f3a3 	rbit	r3, r3
 8001c14:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001c18:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001c1c:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001c20:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8001c24:	fa93 f3a3 	rbit	r3, r3
 8001c28:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8001c2c:	4b0e      	ldr	r3, [pc, #56]	@ (8001c68 <HAL_RCC_OscConfig+0x330>)
 8001c2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c30:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001c34:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8001c38:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001c3c:	fa92 f2a2 	rbit	r2, r2
 8001c40:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8001c44:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001c48:	fab2 f282 	clz	r2, r2
 8001c4c:	b2d2      	uxtb	r2, r2
 8001c4e:	f042 0220 	orr.w	r2, r2, #32
 8001c52:	b2d2      	uxtb	r2, r2
 8001c54:	f002 021f 	and.w	r2, r2, #31
 8001c58:	2101      	movs	r1, #1
 8001c5a:	fa01 f202 	lsl.w	r2, r1, r2
 8001c5e:	4013      	ands	r3, r2
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d1ab      	bne.n	8001bbc <HAL_RCC_OscConfig+0x284>
 8001c64:	e003      	b.n	8001c6e <HAL_RCC_OscConfig+0x336>
 8001c66:	bf00      	nop
 8001c68:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c72:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 0302 	and.w	r3, r3, #2
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	f000 817d 	beq.w	8001f7e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001c84:	4ba6      	ldr	r3, [pc, #664]	@ (8001f20 <HAL_RCC_OscConfig+0x5e8>)
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f003 030c 	and.w	r3, r3, #12
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d00b      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001c90:	4ba3      	ldr	r3, [pc, #652]	@ (8001f20 <HAL_RCC_OscConfig+0x5e8>)
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f003 030c 	and.w	r3, r3, #12
 8001c98:	2b08      	cmp	r3, #8
 8001c9a:	d172      	bne.n	8001d82 <HAL_RCC_OscConfig+0x44a>
 8001c9c:	4ba0      	ldr	r3, [pc, #640]	@ (8001f20 <HAL_RCC_OscConfig+0x5e8>)
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d16c      	bne.n	8001d82 <HAL_RCC_OscConfig+0x44a>
 8001ca8:	2302      	movs	r3, #2
 8001caa:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cae:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001cb2:	fa93 f3a3 	rbit	r3, r3
 8001cb6:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8001cba:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cbe:	fab3 f383 	clz	r3, r3
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	095b      	lsrs	r3, r3, #5
 8001cc6:	b2db      	uxtb	r3, r3
 8001cc8:	f043 0301 	orr.w	r3, r3, #1
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d102      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x3a0>
 8001cd2:	4b93      	ldr	r3, [pc, #588]	@ (8001f20 <HAL_RCC_OscConfig+0x5e8>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	e013      	b.n	8001d00 <HAL_RCC_OscConfig+0x3c8>
 8001cd8:	2302      	movs	r3, #2
 8001cda:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cde:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8001ce2:	fa93 f3a3 	rbit	r3, r3
 8001ce6:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001cea:	2302      	movs	r3, #2
 8001cec:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001cf0:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8001cf4:	fa93 f3a3 	rbit	r3, r3
 8001cf8:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8001cfc:	4b88      	ldr	r3, [pc, #544]	@ (8001f20 <HAL_RCC_OscConfig+0x5e8>)
 8001cfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d00:	2202      	movs	r2, #2
 8001d02:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8001d06:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001d0a:	fa92 f2a2 	rbit	r2, r2
 8001d0e:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8001d12:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8001d16:	fab2 f282 	clz	r2, r2
 8001d1a:	b2d2      	uxtb	r2, r2
 8001d1c:	f042 0220 	orr.w	r2, r2, #32
 8001d20:	b2d2      	uxtb	r2, r2
 8001d22:	f002 021f 	and.w	r2, r2, #31
 8001d26:	2101      	movs	r1, #1
 8001d28:	fa01 f202 	lsl.w	r2, r1, r2
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d00a      	beq.n	8001d48 <HAL_RCC_OscConfig+0x410>
 8001d32:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d36:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	691b      	ldr	r3, [r3, #16]
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d002      	beq.n	8001d48 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	f000 be2e 	b.w	80029a4 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d48:	4b75      	ldr	r3, [pc, #468]	@ (8001f20 <HAL_RCC_OscConfig+0x5e8>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d50:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d54:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	695b      	ldr	r3, [r3, #20]
 8001d5c:	21f8      	movs	r1, #248	@ 0xf8
 8001d5e:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d62:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001d66:	fa91 f1a1 	rbit	r1, r1
 8001d6a:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8001d6e:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8001d72:	fab1 f181 	clz	r1, r1
 8001d76:	b2c9      	uxtb	r1, r1
 8001d78:	408b      	lsls	r3, r1
 8001d7a:	4969      	ldr	r1, [pc, #420]	@ (8001f20 <HAL_RCC_OscConfig+0x5e8>)
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d80:	e0fd      	b.n	8001f7e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d82:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d86:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	691b      	ldr	r3, [r3, #16]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	f000 8088 	beq.w	8001ea4 <HAL_RCC_OscConfig+0x56c>
 8001d94:	2301      	movs	r3, #1
 8001d96:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d9a:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8001d9e:	fa93 f3a3 	rbit	r3, r3
 8001da2:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8001da6:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001daa:	fab3 f383 	clz	r3, r3
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001db4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001db8:	009b      	lsls	r3, r3, #2
 8001dba:	461a      	mov	r2, r3
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dc0:	f7fe fdf0 	bl	80009a4 <HAL_GetTick>
 8001dc4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dc8:	e00a      	b.n	8001de0 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dca:	f7fe fdeb 	bl	80009a4 <HAL_GetTick>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	2b02      	cmp	r3, #2
 8001dd8:	d902      	bls.n	8001de0 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	f000 bde2 	b.w	80029a4 <HAL_RCC_OscConfig+0x106c>
 8001de0:	2302      	movs	r3, #2
 8001de2:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001de6:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8001dea:	fa93 f3a3 	rbit	r3, r3
 8001dee:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8001df2:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001df6:	fab3 f383 	clz	r3, r3
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	095b      	lsrs	r3, r3, #5
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	f043 0301 	orr.w	r3, r3, #1
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d102      	bne.n	8001e10 <HAL_RCC_OscConfig+0x4d8>
 8001e0a:	4b45      	ldr	r3, [pc, #276]	@ (8001f20 <HAL_RCC_OscConfig+0x5e8>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	e013      	b.n	8001e38 <HAL_RCC_OscConfig+0x500>
 8001e10:	2302      	movs	r3, #2
 8001e12:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e16:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8001e1a:	fa93 f3a3 	rbit	r3, r3
 8001e1e:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001e22:	2302      	movs	r3, #2
 8001e24:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001e28:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8001e2c:	fa93 f3a3 	rbit	r3, r3
 8001e30:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8001e34:	4b3a      	ldr	r3, [pc, #232]	@ (8001f20 <HAL_RCC_OscConfig+0x5e8>)
 8001e36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e38:	2202      	movs	r2, #2
 8001e3a:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8001e3e:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8001e42:	fa92 f2a2 	rbit	r2, r2
 8001e46:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8001e4a:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8001e4e:	fab2 f282 	clz	r2, r2
 8001e52:	b2d2      	uxtb	r2, r2
 8001e54:	f042 0220 	orr.w	r2, r2, #32
 8001e58:	b2d2      	uxtb	r2, r2
 8001e5a:	f002 021f 	and.w	r2, r2, #31
 8001e5e:	2101      	movs	r1, #1
 8001e60:	fa01 f202 	lsl.w	r2, r1, r2
 8001e64:	4013      	ands	r3, r2
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d0af      	beq.n	8001dca <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e6a:	4b2d      	ldr	r3, [pc, #180]	@ (8001f20 <HAL_RCC_OscConfig+0x5e8>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e72:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e76:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	695b      	ldr	r3, [r3, #20]
 8001e7e:	21f8      	movs	r1, #248	@ 0xf8
 8001e80:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e84:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8001e88:	fa91 f1a1 	rbit	r1, r1
 8001e8c:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8001e90:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8001e94:	fab1 f181 	clz	r1, r1
 8001e98:	b2c9      	uxtb	r1, r1
 8001e9a:	408b      	lsls	r3, r1
 8001e9c:	4920      	ldr	r1, [pc, #128]	@ (8001f20 <HAL_RCC_OscConfig+0x5e8>)
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	600b      	str	r3, [r1, #0]
 8001ea2:	e06c      	b.n	8001f7e <HAL_RCC_OscConfig+0x646>
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eaa:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001eae:	fa93 f3a3 	rbit	r3, r3
 8001eb2:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8001eb6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001eba:	fab3 f383 	clz	r3, r3
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001ec4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	461a      	mov	r2, r3
 8001ecc:	2300      	movs	r3, #0
 8001ece:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ed0:	f7fe fd68 	bl	80009a4 <HAL_GetTick>
 8001ed4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ed8:	e00a      	b.n	8001ef0 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001eda:	f7fe fd63 	bl	80009a4 <HAL_GetTick>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	2b02      	cmp	r3, #2
 8001ee8:	d902      	bls.n	8001ef0 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001eea:	2303      	movs	r3, #3
 8001eec:	f000 bd5a 	b.w	80029a4 <HAL_RCC_OscConfig+0x106c>
 8001ef0:	2302      	movs	r3, #2
 8001ef2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001efa:	fa93 f3a3 	rbit	r3, r3
 8001efe:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8001f02:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f06:	fab3 f383 	clz	r3, r3
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	095b      	lsrs	r3, r3, #5
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	f043 0301 	orr.w	r3, r3, #1
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d104      	bne.n	8001f24 <HAL_RCC_OscConfig+0x5ec>
 8001f1a:	4b01      	ldr	r3, [pc, #4]	@ (8001f20 <HAL_RCC_OscConfig+0x5e8>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	e015      	b.n	8001f4c <HAL_RCC_OscConfig+0x614>
 8001f20:	40021000 	.word	0x40021000
 8001f24:	2302      	movs	r3, #2
 8001f26:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f2a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001f2e:	fa93 f3a3 	rbit	r3, r3
 8001f32:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001f36:	2302      	movs	r3, #2
 8001f38:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001f3c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001f40:	fa93 f3a3 	rbit	r3, r3
 8001f44:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8001f48:	4bc8      	ldr	r3, [pc, #800]	@ (800226c <HAL_RCC_OscConfig+0x934>)
 8001f4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f4c:	2202      	movs	r2, #2
 8001f4e:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8001f52:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001f56:	fa92 f2a2 	rbit	r2, r2
 8001f5a:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8001f5e:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8001f62:	fab2 f282 	clz	r2, r2
 8001f66:	b2d2      	uxtb	r2, r2
 8001f68:	f042 0220 	orr.w	r2, r2, #32
 8001f6c:	b2d2      	uxtb	r2, r2
 8001f6e:	f002 021f 	and.w	r2, r2, #31
 8001f72:	2101      	movs	r1, #1
 8001f74:	fa01 f202 	lsl.w	r2, r1, r2
 8001f78:	4013      	ands	r3, r2
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d1ad      	bne.n	8001eda <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f7e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f82:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 0308 	and.w	r3, r3, #8
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	f000 8110 	beq.w	80021b4 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f98:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	699b      	ldr	r3, [r3, #24]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d079      	beq.n	8002098 <HAL_RCC_OscConfig+0x760>
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001faa:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001fae:	fa93 f3a3 	rbit	r3, r3
 8001fb2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8001fb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fba:	fab3 f383 	clz	r3, r3
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	461a      	mov	r2, r3
 8001fc2:	4bab      	ldr	r3, [pc, #684]	@ (8002270 <HAL_RCC_OscConfig+0x938>)
 8001fc4:	4413      	add	r3, r2
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	461a      	mov	r2, r3
 8001fca:	2301      	movs	r3, #1
 8001fcc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fce:	f7fe fce9 	bl	80009a4 <HAL_GetTick>
 8001fd2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fd6:	e00a      	b.n	8001fee <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fd8:	f7fe fce4 	bl	80009a4 <HAL_GetTick>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001fe2:	1ad3      	subs	r3, r2, r3
 8001fe4:	2b02      	cmp	r3, #2
 8001fe6:	d902      	bls.n	8001fee <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001fe8:	2303      	movs	r3, #3
 8001fea:	f000 bcdb 	b.w	80029a4 <HAL_RCC_OscConfig+0x106c>
 8001fee:	2302      	movs	r3, #2
 8001ff0:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff4:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001ff8:	fa93 f3a3 	rbit	r3, r3
 8001ffc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002000:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002004:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002008:	2202      	movs	r2, #2
 800200a:	601a      	str	r2, [r3, #0]
 800200c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002010:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	fa93 f2a3 	rbit	r2, r3
 800201a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800201e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002022:	601a      	str	r2, [r3, #0]
 8002024:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002028:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800202c:	2202      	movs	r2, #2
 800202e:	601a      	str	r2, [r3, #0]
 8002030:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002034:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	fa93 f2a3 	rbit	r2, r3
 800203e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002042:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002046:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002048:	4b88      	ldr	r3, [pc, #544]	@ (800226c <HAL_RCC_OscConfig+0x934>)
 800204a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800204c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002050:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002054:	2102      	movs	r1, #2
 8002056:	6019      	str	r1, [r3, #0]
 8002058:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800205c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	fa93 f1a3 	rbit	r1, r3
 8002066:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800206a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800206e:	6019      	str	r1, [r3, #0]
  return result;
 8002070:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002074:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	fab3 f383 	clz	r3, r3
 800207e:	b2db      	uxtb	r3, r3
 8002080:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002084:	b2db      	uxtb	r3, r3
 8002086:	f003 031f 	and.w	r3, r3, #31
 800208a:	2101      	movs	r1, #1
 800208c:	fa01 f303 	lsl.w	r3, r1, r3
 8002090:	4013      	ands	r3, r2
 8002092:	2b00      	cmp	r3, #0
 8002094:	d0a0      	beq.n	8001fd8 <HAL_RCC_OscConfig+0x6a0>
 8002096:	e08d      	b.n	80021b4 <HAL_RCC_OscConfig+0x87c>
 8002098:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800209c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80020a0:	2201      	movs	r2, #1
 80020a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020a8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	fa93 f2a3 	rbit	r2, r3
 80020b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020b6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80020ba:	601a      	str	r2, [r3, #0]
  return result;
 80020bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020c0:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80020c4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020c6:	fab3 f383 	clz	r3, r3
 80020ca:	b2db      	uxtb	r3, r3
 80020cc:	461a      	mov	r2, r3
 80020ce:	4b68      	ldr	r3, [pc, #416]	@ (8002270 <HAL_RCC_OscConfig+0x938>)
 80020d0:	4413      	add	r3, r2
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	461a      	mov	r2, r3
 80020d6:	2300      	movs	r3, #0
 80020d8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020da:	f7fe fc63 	bl	80009a4 <HAL_GetTick>
 80020de:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020e2:	e00a      	b.n	80020fa <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020e4:	f7fe fc5e 	bl	80009a4 <HAL_GetTick>
 80020e8:	4602      	mov	r2, r0
 80020ea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80020ee:	1ad3      	subs	r3, r2, r3
 80020f0:	2b02      	cmp	r3, #2
 80020f2:	d902      	bls.n	80020fa <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80020f4:	2303      	movs	r3, #3
 80020f6:	f000 bc55 	b.w	80029a4 <HAL_RCC_OscConfig+0x106c>
 80020fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020fe:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002102:	2202      	movs	r2, #2
 8002104:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002106:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800210a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	fa93 f2a3 	rbit	r2, r3
 8002114:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002118:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800211c:	601a      	str	r2, [r3, #0]
 800211e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002122:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002126:	2202      	movs	r2, #2
 8002128:	601a      	str	r2, [r3, #0]
 800212a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800212e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	fa93 f2a3 	rbit	r2, r3
 8002138:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800213c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002140:	601a      	str	r2, [r3, #0]
 8002142:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002146:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800214a:	2202      	movs	r2, #2
 800214c:	601a      	str	r2, [r3, #0]
 800214e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002152:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	fa93 f2a3 	rbit	r2, r3
 800215c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002160:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002164:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002166:	4b41      	ldr	r3, [pc, #260]	@ (800226c <HAL_RCC_OscConfig+0x934>)
 8002168:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800216a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800216e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002172:	2102      	movs	r1, #2
 8002174:	6019      	str	r1, [r3, #0]
 8002176:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800217a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	fa93 f1a3 	rbit	r1, r3
 8002184:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002188:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800218c:	6019      	str	r1, [r3, #0]
  return result;
 800218e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002192:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	fab3 f383 	clz	r3, r3
 800219c:	b2db      	uxtb	r3, r3
 800219e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	f003 031f 	and.w	r3, r3, #31
 80021a8:	2101      	movs	r1, #1
 80021aa:	fa01 f303 	lsl.w	r3, r1, r3
 80021ae:	4013      	ands	r3, r2
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d197      	bne.n	80020e4 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021b8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 0304 	and.w	r3, r3, #4
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	f000 81a1 	beq.w	800250c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021ca:	2300      	movs	r3, #0
 80021cc:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021d0:	4b26      	ldr	r3, [pc, #152]	@ (800226c <HAL_RCC_OscConfig+0x934>)
 80021d2:	69db      	ldr	r3, [r3, #28]
 80021d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d116      	bne.n	800220a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021dc:	4b23      	ldr	r3, [pc, #140]	@ (800226c <HAL_RCC_OscConfig+0x934>)
 80021de:	69db      	ldr	r3, [r3, #28]
 80021e0:	4a22      	ldr	r2, [pc, #136]	@ (800226c <HAL_RCC_OscConfig+0x934>)
 80021e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021e6:	61d3      	str	r3, [r2, #28]
 80021e8:	4b20      	ldr	r3, [pc, #128]	@ (800226c <HAL_RCC_OscConfig+0x934>)
 80021ea:	69db      	ldr	r3, [r3, #28]
 80021ec:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80021f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021f4:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80021f8:	601a      	str	r2, [r3, #0]
 80021fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021fe:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002202:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002204:	2301      	movs	r3, #1
 8002206:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800220a:	4b1a      	ldr	r3, [pc, #104]	@ (8002274 <HAL_RCC_OscConfig+0x93c>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002212:	2b00      	cmp	r3, #0
 8002214:	d11a      	bne.n	800224c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002216:	4b17      	ldr	r3, [pc, #92]	@ (8002274 <HAL_RCC_OscConfig+0x93c>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a16      	ldr	r2, [pc, #88]	@ (8002274 <HAL_RCC_OscConfig+0x93c>)
 800221c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002220:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002222:	f7fe fbbf 	bl	80009a4 <HAL_GetTick>
 8002226:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800222a:	e009      	b.n	8002240 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800222c:	f7fe fbba 	bl	80009a4 <HAL_GetTick>
 8002230:	4602      	mov	r2, r0
 8002232:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002236:	1ad3      	subs	r3, r2, r3
 8002238:	2b64      	cmp	r3, #100	@ 0x64
 800223a:	d901      	bls.n	8002240 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 800223c:	2303      	movs	r3, #3
 800223e:	e3b1      	b.n	80029a4 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002240:	4b0c      	ldr	r3, [pc, #48]	@ (8002274 <HAL_RCC_OscConfig+0x93c>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002248:	2b00      	cmp	r3, #0
 800224a:	d0ef      	beq.n	800222c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800224c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002250:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	2b01      	cmp	r3, #1
 800225a:	d10d      	bne.n	8002278 <HAL_RCC_OscConfig+0x940>
 800225c:	4b03      	ldr	r3, [pc, #12]	@ (800226c <HAL_RCC_OscConfig+0x934>)
 800225e:	6a1b      	ldr	r3, [r3, #32]
 8002260:	4a02      	ldr	r2, [pc, #8]	@ (800226c <HAL_RCC_OscConfig+0x934>)
 8002262:	f043 0301 	orr.w	r3, r3, #1
 8002266:	6213      	str	r3, [r2, #32]
 8002268:	e03c      	b.n	80022e4 <HAL_RCC_OscConfig+0x9ac>
 800226a:	bf00      	nop
 800226c:	40021000 	.word	0x40021000
 8002270:	10908120 	.word	0x10908120
 8002274:	40007000 	.word	0x40007000
 8002278:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800227c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d10c      	bne.n	80022a2 <HAL_RCC_OscConfig+0x96a>
 8002288:	4bc1      	ldr	r3, [pc, #772]	@ (8002590 <HAL_RCC_OscConfig+0xc58>)
 800228a:	6a1b      	ldr	r3, [r3, #32]
 800228c:	4ac0      	ldr	r2, [pc, #768]	@ (8002590 <HAL_RCC_OscConfig+0xc58>)
 800228e:	f023 0301 	bic.w	r3, r3, #1
 8002292:	6213      	str	r3, [r2, #32]
 8002294:	4bbe      	ldr	r3, [pc, #760]	@ (8002590 <HAL_RCC_OscConfig+0xc58>)
 8002296:	6a1b      	ldr	r3, [r3, #32]
 8002298:	4abd      	ldr	r2, [pc, #756]	@ (8002590 <HAL_RCC_OscConfig+0xc58>)
 800229a:	f023 0304 	bic.w	r3, r3, #4
 800229e:	6213      	str	r3, [r2, #32]
 80022a0:	e020      	b.n	80022e4 <HAL_RCC_OscConfig+0x9ac>
 80022a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022a6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	68db      	ldr	r3, [r3, #12]
 80022ae:	2b05      	cmp	r3, #5
 80022b0:	d10c      	bne.n	80022cc <HAL_RCC_OscConfig+0x994>
 80022b2:	4bb7      	ldr	r3, [pc, #732]	@ (8002590 <HAL_RCC_OscConfig+0xc58>)
 80022b4:	6a1b      	ldr	r3, [r3, #32]
 80022b6:	4ab6      	ldr	r2, [pc, #728]	@ (8002590 <HAL_RCC_OscConfig+0xc58>)
 80022b8:	f043 0304 	orr.w	r3, r3, #4
 80022bc:	6213      	str	r3, [r2, #32]
 80022be:	4bb4      	ldr	r3, [pc, #720]	@ (8002590 <HAL_RCC_OscConfig+0xc58>)
 80022c0:	6a1b      	ldr	r3, [r3, #32]
 80022c2:	4ab3      	ldr	r2, [pc, #716]	@ (8002590 <HAL_RCC_OscConfig+0xc58>)
 80022c4:	f043 0301 	orr.w	r3, r3, #1
 80022c8:	6213      	str	r3, [r2, #32]
 80022ca:	e00b      	b.n	80022e4 <HAL_RCC_OscConfig+0x9ac>
 80022cc:	4bb0      	ldr	r3, [pc, #704]	@ (8002590 <HAL_RCC_OscConfig+0xc58>)
 80022ce:	6a1b      	ldr	r3, [r3, #32]
 80022d0:	4aaf      	ldr	r2, [pc, #700]	@ (8002590 <HAL_RCC_OscConfig+0xc58>)
 80022d2:	f023 0301 	bic.w	r3, r3, #1
 80022d6:	6213      	str	r3, [r2, #32]
 80022d8:	4bad      	ldr	r3, [pc, #692]	@ (8002590 <HAL_RCC_OscConfig+0xc58>)
 80022da:	6a1b      	ldr	r3, [r3, #32]
 80022dc:	4aac      	ldr	r2, [pc, #688]	@ (8002590 <HAL_RCC_OscConfig+0xc58>)
 80022de:	f023 0304 	bic.w	r3, r3, #4
 80022e2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022e8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	f000 8081 	beq.w	80023f8 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022f6:	f7fe fb55 	bl	80009a4 <HAL_GetTick>
 80022fa:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022fe:	e00b      	b.n	8002318 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002300:	f7fe fb50 	bl	80009a4 <HAL_GetTick>
 8002304:	4602      	mov	r2, r0
 8002306:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800230a:	1ad3      	subs	r3, r2, r3
 800230c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002310:	4293      	cmp	r3, r2
 8002312:	d901      	bls.n	8002318 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002314:	2303      	movs	r3, #3
 8002316:	e345      	b.n	80029a4 <HAL_RCC_OscConfig+0x106c>
 8002318:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800231c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002320:	2202      	movs	r2, #2
 8002322:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002324:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002328:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	fa93 f2a3 	rbit	r2, r3
 8002332:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002336:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800233a:	601a      	str	r2, [r3, #0]
 800233c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002340:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002344:	2202      	movs	r2, #2
 8002346:	601a      	str	r2, [r3, #0]
 8002348:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800234c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	fa93 f2a3 	rbit	r2, r3
 8002356:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800235a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800235e:	601a      	str	r2, [r3, #0]
  return result;
 8002360:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002364:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002368:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800236a:	fab3 f383 	clz	r3, r3
 800236e:	b2db      	uxtb	r3, r3
 8002370:	095b      	lsrs	r3, r3, #5
 8002372:	b2db      	uxtb	r3, r3
 8002374:	f043 0302 	orr.w	r3, r3, #2
 8002378:	b2db      	uxtb	r3, r3
 800237a:	2b02      	cmp	r3, #2
 800237c:	d102      	bne.n	8002384 <HAL_RCC_OscConfig+0xa4c>
 800237e:	4b84      	ldr	r3, [pc, #528]	@ (8002590 <HAL_RCC_OscConfig+0xc58>)
 8002380:	6a1b      	ldr	r3, [r3, #32]
 8002382:	e013      	b.n	80023ac <HAL_RCC_OscConfig+0xa74>
 8002384:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002388:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800238c:	2202      	movs	r2, #2
 800238e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002390:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002394:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	fa93 f2a3 	rbit	r2, r3
 800239e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023a2:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80023a6:	601a      	str	r2, [r3, #0]
 80023a8:	4b79      	ldr	r3, [pc, #484]	@ (8002590 <HAL_RCC_OscConfig+0xc58>)
 80023aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023ac:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80023b0:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80023b4:	2102      	movs	r1, #2
 80023b6:	6011      	str	r1, [r2, #0]
 80023b8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80023bc:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80023c0:	6812      	ldr	r2, [r2, #0]
 80023c2:	fa92 f1a2 	rbit	r1, r2
 80023c6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80023ca:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80023ce:	6011      	str	r1, [r2, #0]
  return result;
 80023d0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80023d4:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80023d8:	6812      	ldr	r2, [r2, #0]
 80023da:	fab2 f282 	clz	r2, r2
 80023de:	b2d2      	uxtb	r2, r2
 80023e0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80023e4:	b2d2      	uxtb	r2, r2
 80023e6:	f002 021f 	and.w	r2, r2, #31
 80023ea:	2101      	movs	r1, #1
 80023ec:	fa01 f202 	lsl.w	r2, r1, r2
 80023f0:	4013      	ands	r3, r2
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d084      	beq.n	8002300 <HAL_RCC_OscConfig+0x9c8>
 80023f6:	e07f      	b.n	80024f8 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023f8:	f7fe fad4 	bl	80009a4 <HAL_GetTick>
 80023fc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002400:	e00b      	b.n	800241a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002402:	f7fe facf 	bl	80009a4 <HAL_GetTick>
 8002406:	4602      	mov	r2, r0
 8002408:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002412:	4293      	cmp	r3, r2
 8002414:	d901      	bls.n	800241a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002416:	2303      	movs	r3, #3
 8002418:	e2c4      	b.n	80029a4 <HAL_RCC_OscConfig+0x106c>
 800241a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800241e:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002422:	2202      	movs	r2, #2
 8002424:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002426:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800242a:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	fa93 f2a3 	rbit	r2, r3
 8002434:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002438:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800243c:	601a      	str	r2, [r3, #0]
 800243e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002442:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002446:	2202      	movs	r2, #2
 8002448:	601a      	str	r2, [r3, #0]
 800244a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800244e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	fa93 f2a3 	rbit	r2, r3
 8002458:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800245c:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002460:	601a      	str	r2, [r3, #0]
  return result;
 8002462:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002466:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800246a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800246c:	fab3 f383 	clz	r3, r3
 8002470:	b2db      	uxtb	r3, r3
 8002472:	095b      	lsrs	r3, r3, #5
 8002474:	b2db      	uxtb	r3, r3
 8002476:	f043 0302 	orr.w	r3, r3, #2
 800247a:	b2db      	uxtb	r3, r3
 800247c:	2b02      	cmp	r3, #2
 800247e:	d102      	bne.n	8002486 <HAL_RCC_OscConfig+0xb4e>
 8002480:	4b43      	ldr	r3, [pc, #268]	@ (8002590 <HAL_RCC_OscConfig+0xc58>)
 8002482:	6a1b      	ldr	r3, [r3, #32]
 8002484:	e013      	b.n	80024ae <HAL_RCC_OscConfig+0xb76>
 8002486:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800248a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800248e:	2202      	movs	r2, #2
 8002490:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002492:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002496:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	fa93 f2a3 	rbit	r2, r3
 80024a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024a4:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80024a8:	601a      	str	r2, [r3, #0]
 80024aa:	4b39      	ldr	r3, [pc, #228]	@ (8002590 <HAL_RCC_OscConfig+0xc58>)
 80024ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024ae:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80024b2:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80024b6:	2102      	movs	r1, #2
 80024b8:	6011      	str	r1, [r2, #0]
 80024ba:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80024be:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80024c2:	6812      	ldr	r2, [r2, #0]
 80024c4:	fa92 f1a2 	rbit	r1, r2
 80024c8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80024cc:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80024d0:	6011      	str	r1, [r2, #0]
  return result;
 80024d2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80024d6:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80024da:	6812      	ldr	r2, [r2, #0]
 80024dc:	fab2 f282 	clz	r2, r2
 80024e0:	b2d2      	uxtb	r2, r2
 80024e2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80024e6:	b2d2      	uxtb	r2, r2
 80024e8:	f002 021f 	and.w	r2, r2, #31
 80024ec:	2101      	movs	r1, #1
 80024ee:	fa01 f202 	lsl.w	r2, r1, r2
 80024f2:	4013      	ands	r3, r2
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d184      	bne.n	8002402 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80024f8:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d105      	bne.n	800250c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002500:	4b23      	ldr	r3, [pc, #140]	@ (8002590 <HAL_RCC_OscConfig+0xc58>)
 8002502:	69db      	ldr	r3, [r3, #28]
 8002504:	4a22      	ldr	r2, [pc, #136]	@ (8002590 <HAL_RCC_OscConfig+0xc58>)
 8002506:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800250a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800250c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002510:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	69db      	ldr	r3, [r3, #28]
 8002518:	2b00      	cmp	r3, #0
 800251a:	f000 8242 	beq.w	80029a2 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800251e:	4b1c      	ldr	r3, [pc, #112]	@ (8002590 <HAL_RCC_OscConfig+0xc58>)
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	f003 030c 	and.w	r3, r3, #12
 8002526:	2b08      	cmp	r3, #8
 8002528:	f000 8213 	beq.w	8002952 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800252c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002530:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	69db      	ldr	r3, [r3, #28]
 8002538:	2b02      	cmp	r3, #2
 800253a:	f040 8162 	bne.w	8002802 <HAL_RCC_OscConfig+0xeca>
 800253e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002542:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002546:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800254a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800254c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002550:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	fa93 f2a3 	rbit	r2, r3
 800255a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800255e:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002562:	601a      	str	r2, [r3, #0]
  return result;
 8002564:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002568:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800256c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800256e:	fab3 f383 	clz	r3, r3
 8002572:	b2db      	uxtb	r3, r3
 8002574:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002578:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800257c:	009b      	lsls	r3, r3, #2
 800257e:	461a      	mov	r2, r3
 8002580:	2300      	movs	r3, #0
 8002582:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002584:	f7fe fa0e 	bl	80009a4 <HAL_GetTick>
 8002588:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800258c:	e00c      	b.n	80025a8 <HAL_RCC_OscConfig+0xc70>
 800258e:	bf00      	nop
 8002590:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002594:	f7fe fa06 	bl	80009a4 <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800259e:	1ad3      	subs	r3, r2, r3
 80025a0:	2b02      	cmp	r3, #2
 80025a2:	d901      	bls.n	80025a8 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80025a4:	2303      	movs	r3, #3
 80025a6:	e1fd      	b.n	80029a4 <HAL_RCC_OscConfig+0x106c>
 80025a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025ac:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80025b0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80025b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025ba:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	fa93 f2a3 	rbit	r2, r3
 80025c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025c8:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80025cc:	601a      	str	r2, [r3, #0]
  return result;
 80025ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025d2:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80025d6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025d8:	fab3 f383 	clz	r3, r3
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	095b      	lsrs	r3, r3, #5
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	f043 0301 	orr.w	r3, r3, #1
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d102      	bne.n	80025f2 <HAL_RCC_OscConfig+0xcba>
 80025ec:	4bb0      	ldr	r3, [pc, #704]	@ (80028b0 <HAL_RCC_OscConfig+0xf78>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	e027      	b.n	8002642 <HAL_RCC_OscConfig+0xd0a>
 80025f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025f6:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80025fa:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80025fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002600:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002604:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	fa93 f2a3 	rbit	r2, r3
 800260e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002612:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002616:	601a      	str	r2, [r3, #0]
 8002618:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800261c:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002620:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002624:	601a      	str	r2, [r3, #0]
 8002626:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800262a:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	fa93 f2a3 	rbit	r2, r3
 8002634:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002638:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800263c:	601a      	str	r2, [r3, #0]
 800263e:	4b9c      	ldr	r3, [pc, #624]	@ (80028b0 <HAL_RCC_OscConfig+0xf78>)
 8002640:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002642:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002646:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 800264a:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800264e:	6011      	str	r1, [r2, #0]
 8002650:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002654:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002658:	6812      	ldr	r2, [r2, #0]
 800265a:	fa92 f1a2 	rbit	r1, r2
 800265e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002662:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002666:	6011      	str	r1, [r2, #0]
  return result;
 8002668:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800266c:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002670:	6812      	ldr	r2, [r2, #0]
 8002672:	fab2 f282 	clz	r2, r2
 8002676:	b2d2      	uxtb	r2, r2
 8002678:	f042 0220 	orr.w	r2, r2, #32
 800267c:	b2d2      	uxtb	r2, r2
 800267e:	f002 021f 	and.w	r2, r2, #31
 8002682:	2101      	movs	r1, #1
 8002684:	fa01 f202 	lsl.w	r2, r1, r2
 8002688:	4013      	ands	r3, r2
 800268a:	2b00      	cmp	r3, #0
 800268c:	d182      	bne.n	8002594 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800268e:	4b88      	ldr	r3, [pc, #544]	@ (80028b0 <HAL_RCC_OscConfig+0xf78>)
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002696:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800269a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80026a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026a6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	6a1b      	ldr	r3, [r3, #32]
 80026ae:	430b      	orrs	r3, r1
 80026b0:	497f      	ldr	r1, [pc, #508]	@ (80028b0 <HAL_RCC_OscConfig+0xf78>)
 80026b2:	4313      	orrs	r3, r2
 80026b4:	604b      	str	r3, [r1, #4]
 80026b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026ba:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80026be:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80026c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026c8:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	fa93 f2a3 	rbit	r2, r3
 80026d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026d6:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80026da:	601a      	str	r2, [r3, #0]
  return result;
 80026dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026e0:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80026e4:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026e6:	fab3 f383 	clz	r3, r3
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80026f0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	461a      	mov	r2, r3
 80026f8:	2301      	movs	r3, #1
 80026fa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026fc:	f7fe f952 	bl	80009a4 <HAL_GetTick>
 8002700:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002704:	e009      	b.n	800271a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002706:	f7fe f94d 	bl	80009a4 <HAL_GetTick>
 800270a:	4602      	mov	r2, r0
 800270c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	2b02      	cmp	r3, #2
 8002714:	d901      	bls.n	800271a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002716:	2303      	movs	r3, #3
 8002718:	e144      	b.n	80029a4 <HAL_RCC_OscConfig+0x106c>
 800271a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800271e:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002722:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002726:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002728:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800272c:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	fa93 f2a3 	rbit	r2, r3
 8002736:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800273a:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800273e:	601a      	str	r2, [r3, #0]
  return result;
 8002740:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002744:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002748:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800274a:	fab3 f383 	clz	r3, r3
 800274e:	b2db      	uxtb	r3, r3
 8002750:	095b      	lsrs	r3, r3, #5
 8002752:	b2db      	uxtb	r3, r3
 8002754:	f043 0301 	orr.w	r3, r3, #1
 8002758:	b2db      	uxtb	r3, r3
 800275a:	2b01      	cmp	r3, #1
 800275c:	d102      	bne.n	8002764 <HAL_RCC_OscConfig+0xe2c>
 800275e:	4b54      	ldr	r3, [pc, #336]	@ (80028b0 <HAL_RCC_OscConfig+0xf78>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	e027      	b.n	80027b4 <HAL_RCC_OscConfig+0xe7c>
 8002764:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002768:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800276c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002770:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002772:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002776:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	fa93 f2a3 	rbit	r2, r3
 8002780:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002784:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002788:	601a      	str	r2, [r3, #0]
 800278a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800278e:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002792:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002796:	601a      	str	r2, [r3, #0]
 8002798:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800279c:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	fa93 f2a3 	rbit	r2, r3
 80027a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027aa:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80027ae:	601a      	str	r2, [r3, #0]
 80027b0:	4b3f      	ldr	r3, [pc, #252]	@ (80028b0 <HAL_RCC_OscConfig+0xf78>)
 80027b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027b4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80027b8:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80027bc:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80027c0:	6011      	str	r1, [r2, #0]
 80027c2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80027c6:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80027ca:	6812      	ldr	r2, [r2, #0]
 80027cc:	fa92 f1a2 	rbit	r1, r2
 80027d0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80027d4:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80027d8:	6011      	str	r1, [r2, #0]
  return result;
 80027da:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80027de:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80027e2:	6812      	ldr	r2, [r2, #0]
 80027e4:	fab2 f282 	clz	r2, r2
 80027e8:	b2d2      	uxtb	r2, r2
 80027ea:	f042 0220 	orr.w	r2, r2, #32
 80027ee:	b2d2      	uxtb	r2, r2
 80027f0:	f002 021f 	and.w	r2, r2, #31
 80027f4:	2101      	movs	r1, #1
 80027f6:	fa01 f202 	lsl.w	r2, r1, r2
 80027fa:	4013      	ands	r3, r2
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d082      	beq.n	8002706 <HAL_RCC_OscConfig+0xdce>
 8002800:	e0cf      	b.n	80029a2 <HAL_RCC_OscConfig+0x106a>
 8002802:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002806:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800280a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800280e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002810:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002814:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	fa93 f2a3 	rbit	r2, r3
 800281e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002822:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002826:	601a      	str	r2, [r3, #0]
  return result;
 8002828:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800282c:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002830:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002832:	fab3 f383 	clz	r3, r3
 8002836:	b2db      	uxtb	r3, r3
 8002838:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800283c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002840:	009b      	lsls	r3, r3, #2
 8002842:	461a      	mov	r2, r3
 8002844:	2300      	movs	r3, #0
 8002846:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002848:	f7fe f8ac 	bl	80009a4 <HAL_GetTick>
 800284c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002850:	e009      	b.n	8002866 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002852:	f7fe f8a7 	bl	80009a4 <HAL_GetTick>
 8002856:	4602      	mov	r2, r0
 8002858:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	2b02      	cmp	r3, #2
 8002860:	d901      	bls.n	8002866 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002862:	2303      	movs	r3, #3
 8002864:	e09e      	b.n	80029a4 <HAL_RCC_OscConfig+0x106c>
 8002866:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800286a:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800286e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002872:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002874:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002878:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	fa93 f2a3 	rbit	r2, r3
 8002882:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002886:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800288a:	601a      	str	r2, [r3, #0]
  return result;
 800288c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002890:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002894:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002896:	fab3 f383 	clz	r3, r3
 800289a:	b2db      	uxtb	r3, r3
 800289c:	095b      	lsrs	r3, r3, #5
 800289e:	b2db      	uxtb	r3, r3
 80028a0:	f043 0301 	orr.w	r3, r3, #1
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d104      	bne.n	80028b4 <HAL_RCC_OscConfig+0xf7c>
 80028aa:	4b01      	ldr	r3, [pc, #4]	@ (80028b0 <HAL_RCC_OscConfig+0xf78>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	e029      	b.n	8002904 <HAL_RCC_OscConfig+0xfcc>
 80028b0:	40021000 	.word	0x40021000
 80028b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028b8:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80028bc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80028c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028c6:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	fa93 f2a3 	rbit	r2, r3
 80028d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028d4:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80028d8:	601a      	str	r2, [r3, #0]
 80028da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028de:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80028e2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80028e6:	601a      	str	r2, [r3, #0]
 80028e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028ec:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	fa93 f2a3 	rbit	r2, r3
 80028f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028fa:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80028fe:	601a      	str	r2, [r3, #0]
 8002900:	4b2b      	ldr	r3, [pc, #172]	@ (80029b0 <HAL_RCC_OscConfig+0x1078>)
 8002902:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002904:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002908:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 800290c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002910:	6011      	str	r1, [r2, #0]
 8002912:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002916:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 800291a:	6812      	ldr	r2, [r2, #0]
 800291c:	fa92 f1a2 	rbit	r1, r2
 8002920:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002924:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002928:	6011      	str	r1, [r2, #0]
  return result;
 800292a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800292e:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002932:	6812      	ldr	r2, [r2, #0]
 8002934:	fab2 f282 	clz	r2, r2
 8002938:	b2d2      	uxtb	r2, r2
 800293a:	f042 0220 	orr.w	r2, r2, #32
 800293e:	b2d2      	uxtb	r2, r2
 8002940:	f002 021f 	and.w	r2, r2, #31
 8002944:	2101      	movs	r1, #1
 8002946:	fa01 f202 	lsl.w	r2, r1, r2
 800294a:	4013      	ands	r3, r2
 800294c:	2b00      	cmp	r3, #0
 800294e:	d180      	bne.n	8002852 <HAL_RCC_OscConfig+0xf1a>
 8002950:	e027      	b.n	80029a2 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002952:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002956:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	69db      	ldr	r3, [r3, #28]
 800295e:	2b01      	cmp	r3, #1
 8002960:	d101      	bne.n	8002966 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e01e      	b.n	80029a4 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002966:	4b12      	ldr	r3, [pc, #72]	@ (80029b0 <HAL_RCC_OscConfig+0x1078>)
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800296e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002972:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002976:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800297a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	6a1b      	ldr	r3, [r3, #32]
 8002982:	429a      	cmp	r2, r3
 8002984:	d10b      	bne.n	800299e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002986:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800298a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800298e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002992:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800299a:	429a      	cmp	r2, r3
 800299c:	d001      	beq.n	80029a2 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e000      	b.n	80029a4 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80029a2:	2300      	movs	r3, #0
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	40021000 	.word	0x40021000

080029b4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b09e      	sub	sp, #120	@ 0x78
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80029be:	2300      	movs	r3, #0
 80029c0:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d101      	bne.n	80029cc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	e162      	b.n	8002c92 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029cc:	4b90      	ldr	r3, [pc, #576]	@ (8002c10 <HAL_RCC_ClockConfig+0x25c>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 0307 	and.w	r3, r3, #7
 80029d4:	683a      	ldr	r2, [r7, #0]
 80029d6:	429a      	cmp	r2, r3
 80029d8:	d910      	bls.n	80029fc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029da:	4b8d      	ldr	r3, [pc, #564]	@ (8002c10 <HAL_RCC_ClockConfig+0x25c>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f023 0207 	bic.w	r2, r3, #7
 80029e2:	498b      	ldr	r1, [pc, #556]	@ (8002c10 <HAL_RCC_ClockConfig+0x25c>)
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	4313      	orrs	r3, r2
 80029e8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029ea:	4b89      	ldr	r3, [pc, #548]	@ (8002c10 <HAL_RCC_ClockConfig+0x25c>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 0307 	and.w	r3, r3, #7
 80029f2:	683a      	ldr	r2, [r7, #0]
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d001      	beq.n	80029fc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	e14a      	b.n	8002c92 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 0302 	and.w	r3, r3, #2
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d008      	beq.n	8002a1a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a08:	4b82      	ldr	r3, [pc, #520]	@ (8002c14 <HAL_RCC_ClockConfig+0x260>)
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	497f      	ldr	r1, [pc, #508]	@ (8002c14 <HAL_RCC_ClockConfig+0x260>)
 8002a16:	4313      	orrs	r3, r2
 8002a18:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0301 	and.w	r3, r3, #1
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	f000 80dc 	beq.w	8002be0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d13c      	bne.n	8002aaa <HAL_RCC_ClockConfig+0xf6>
 8002a30:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002a34:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a36:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002a38:	fa93 f3a3 	rbit	r3, r3
 8002a3c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002a3e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a40:	fab3 f383 	clz	r3, r3
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	095b      	lsrs	r3, r3, #5
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	f043 0301 	orr.w	r3, r3, #1
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d102      	bne.n	8002a5a <HAL_RCC_ClockConfig+0xa6>
 8002a54:	4b6f      	ldr	r3, [pc, #444]	@ (8002c14 <HAL_RCC_ClockConfig+0x260>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	e00f      	b.n	8002a7a <HAL_RCC_ClockConfig+0xc6>
 8002a5a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002a5e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a60:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002a62:	fa93 f3a3 	rbit	r3, r3
 8002a66:	667b      	str	r3, [r7, #100]	@ 0x64
 8002a68:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002a6c:	663b      	str	r3, [r7, #96]	@ 0x60
 8002a6e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002a70:	fa93 f3a3 	rbit	r3, r3
 8002a74:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002a76:	4b67      	ldr	r3, [pc, #412]	@ (8002c14 <HAL_RCC_ClockConfig+0x260>)
 8002a78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a7a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002a7e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002a80:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002a82:	fa92 f2a2 	rbit	r2, r2
 8002a86:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8002a88:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002a8a:	fab2 f282 	clz	r2, r2
 8002a8e:	b2d2      	uxtb	r2, r2
 8002a90:	f042 0220 	orr.w	r2, r2, #32
 8002a94:	b2d2      	uxtb	r2, r2
 8002a96:	f002 021f 	and.w	r2, r2, #31
 8002a9a:	2101      	movs	r1, #1
 8002a9c:	fa01 f202 	lsl.w	r2, r1, r2
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d17b      	bne.n	8002b9e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e0f3      	b.n	8002c92 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	2b02      	cmp	r3, #2
 8002ab0:	d13c      	bne.n	8002b2c <HAL_RCC_ClockConfig+0x178>
 8002ab2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002ab6:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ab8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002aba:	fa93 f3a3 	rbit	r3, r3
 8002abe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002ac0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ac2:	fab3 f383 	clz	r3, r3
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	095b      	lsrs	r3, r3, #5
 8002aca:	b2db      	uxtb	r3, r3
 8002acc:	f043 0301 	orr.w	r3, r3, #1
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d102      	bne.n	8002adc <HAL_RCC_ClockConfig+0x128>
 8002ad6:	4b4f      	ldr	r3, [pc, #316]	@ (8002c14 <HAL_RCC_ClockConfig+0x260>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	e00f      	b.n	8002afc <HAL_RCC_ClockConfig+0x148>
 8002adc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002ae0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ae2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002ae4:	fa93 f3a3 	rbit	r3, r3
 8002ae8:	647b      	str	r3, [r7, #68]	@ 0x44
 8002aea:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002aee:	643b      	str	r3, [r7, #64]	@ 0x40
 8002af0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002af2:	fa93 f3a3 	rbit	r3, r3
 8002af6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002af8:	4b46      	ldr	r3, [pc, #280]	@ (8002c14 <HAL_RCC_ClockConfig+0x260>)
 8002afa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002afc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002b00:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002b02:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002b04:	fa92 f2a2 	rbit	r2, r2
 8002b08:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8002b0a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002b0c:	fab2 f282 	clz	r2, r2
 8002b10:	b2d2      	uxtb	r2, r2
 8002b12:	f042 0220 	orr.w	r2, r2, #32
 8002b16:	b2d2      	uxtb	r2, r2
 8002b18:	f002 021f 	and.w	r2, r2, #31
 8002b1c:	2101      	movs	r1, #1
 8002b1e:	fa01 f202 	lsl.w	r2, r1, r2
 8002b22:	4013      	ands	r3, r2
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d13a      	bne.n	8002b9e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e0b2      	b.n	8002c92 <HAL_RCC_ClockConfig+0x2de>
 8002b2c:	2302      	movs	r3, #2
 8002b2e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b32:	fa93 f3a3 	rbit	r3, r3
 8002b36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002b38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b3a:	fab3 f383 	clz	r3, r3
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	095b      	lsrs	r3, r3, #5
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	f043 0301 	orr.w	r3, r3, #1
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d102      	bne.n	8002b54 <HAL_RCC_ClockConfig+0x1a0>
 8002b4e:	4b31      	ldr	r3, [pc, #196]	@ (8002c14 <HAL_RCC_ClockConfig+0x260>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	e00d      	b.n	8002b70 <HAL_RCC_ClockConfig+0x1bc>
 8002b54:	2302      	movs	r3, #2
 8002b56:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b5a:	fa93 f3a3 	rbit	r3, r3
 8002b5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b60:	2302      	movs	r3, #2
 8002b62:	623b      	str	r3, [r7, #32]
 8002b64:	6a3b      	ldr	r3, [r7, #32]
 8002b66:	fa93 f3a3 	rbit	r3, r3
 8002b6a:	61fb      	str	r3, [r7, #28]
 8002b6c:	4b29      	ldr	r3, [pc, #164]	@ (8002c14 <HAL_RCC_ClockConfig+0x260>)
 8002b6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b70:	2202      	movs	r2, #2
 8002b72:	61ba      	str	r2, [r7, #24]
 8002b74:	69ba      	ldr	r2, [r7, #24]
 8002b76:	fa92 f2a2 	rbit	r2, r2
 8002b7a:	617a      	str	r2, [r7, #20]
  return result;
 8002b7c:	697a      	ldr	r2, [r7, #20]
 8002b7e:	fab2 f282 	clz	r2, r2
 8002b82:	b2d2      	uxtb	r2, r2
 8002b84:	f042 0220 	orr.w	r2, r2, #32
 8002b88:	b2d2      	uxtb	r2, r2
 8002b8a:	f002 021f 	and.w	r2, r2, #31
 8002b8e:	2101      	movs	r1, #1
 8002b90:	fa01 f202 	lsl.w	r2, r1, r2
 8002b94:	4013      	ands	r3, r2
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d101      	bne.n	8002b9e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e079      	b.n	8002c92 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b9e:	4b1d      	ldr	r3, [pc, #116]	@ (8002c14 <HAL_RCC_ClockConfig+0x260>)
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	f023 0203 	bic.w	r2, r3, #3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	491a      	ldr	r1, [pc, #104]	@ (8002c14 <HAL_RCC_ClockConfig+0x260>)
 8002bac:	4313      	orrs	r3, r2
 8002bae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bb0:	f7fd fef8 	bl	80009a4 <HAL_GetTick>
 8002bb4:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bb6:	e00a      	b.n	8002bce <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bb8:	f7fd fef4 	bl	80009a4 <HAL_GetTick>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d901      	bls.n	8002bce <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002bca:	2303      	movs	r3, #3
 8002bcc:	e061      	b.n	8002c92 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bce:	4b11      	ldr	r3, [pc, #68]	@ (8002c14 <HAL_RCC_ClockConfig+0x260>)
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	f003 020c 	and.w	r2, r3, #12
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d1eb      	bne.n	8002bb8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002be0:	4b0b      	ldr	r3, [pc, #44]	@ (8002c10 <HAL_RCC_ClockConfig+0x25c>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 0307 	and.w	r3, r3, #7
 8002be8:	683a      	ldr	r2, [r7, #0]
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d214      	bcs.n	8002c18 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bee:	4b08      	ldr	r3, [pc, #32]	@ (8002c10 <HAL_RCC_ClockConfig+0x25c>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f023 0207 	bic.w	r2, r3, #7
 8002bf6:	4906      	ldr	r1, [pc, #24]	@ (8002c10 <HAL_RCC_ClockConfig+0x25c>)
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bfe:	4b04      	ldr	r3, [pc, #16]	@ (8002c10 <HAL_RCC_ClockConfig+0x25c>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0307 	and.w	r3, r3, #7
 8002c06:	683a      	ldr	r2, [r7, #0]
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d005      	beq.n	8002c18 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e040      	b.n	8002c92 <HAL_RCC_ClockConfig+0x2de>
 8002c10:	40022000 	.word	0x40022000
 8002c14:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 0304 	and.w	r3, r3, #4
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d008      	beq.n	8002c36 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c24:	4b1d      	ldr	r3, [pc, #116]	@ (8002c9c <HAL_RCC_ClockConfig+0x2e8>)
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	68db      	ldr	r3, [r3, #12]
 8002c30:	491a      	ldr	r1, [pc, #104]	@ (8002c9c <HAL_RCC_ClockConfig+0x2e8>)
 8002c32:	4313      	orrs	r3, r2
 8002c34:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 0308 	and.w	r3, r3, #8
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d009      	beq.n	8002c56 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c42:	4b16      	ldr	r3, [pc, #88]	@ (8002c9c <HAL_RCC_ClockConfig+0x2e8>)
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	691b      	ldr	r3, [r3, #16]
 8002c4e:	00db      	lsls	r3, r3, #3
 8002c50:	4912      	ldr	r1, [pc, #72]	@ (8002c9c <HAL_RCC_ClockConfig+0x2e8>)
 8002c52:	4313      	orrs	r3, r2
 8002c54:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002c56:	f000 f829 	bl	8002cac <HAL_RCC_GetSysClockFreq>
 8002c5a:	4601      	mov	r1, r0
 8002c5c:	4b0f      	ldr	r3, [pc, #60]	@ (8002c9c <HAL_RCC_ClockConfig+0x2e8>)
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002c64:	22f0      	movs	r2, #240	@ 0xf0
 8002c66:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c68:	693a      	ldr	r2, [r7, #16]
 8002c6a:	fa92 f2a2 	rbit	r2, r2
 8002c6e:	60fa      	str	r2, [r7, #12]
  return result;
 8002c70:	68fa      	ldr	r2, [r7, #12]
 8002c72:	fab2 f282 	clz	r2, r2
 8002c76:	b2d2      	uxtb	r2, r2
 8002c78:	40d3      	lsrs	r3, r2
 8002c7a:	4a09      	ldr	r2, [pc, #36]	@ (8002ca0 <HAL_RCC_ClockConfig+0x2ec>)
 8002c7c:	5cd3      	ldrb	r3, [r2, r3]
 8002c7e:	fa21 f303 	lsr.w	r3, r1, r3
 8002c82:	4a08      	ldr	r2, [pc, #32]	@ (8002ca4 <HAL_RCC_ClockConfig+0x2f0>)
 8002c84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002c86:	4b08      	ldr	r3, [pc, #32]	@ (8002ca8 <HAL_RCC_ClockConfig+0x2f4>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f7fd fd84 	bl	8000798 <HAL_InitTick>
  
  return HAL_OK;
 8002c90:	2300      	movs	r3, #0
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3778      	adds	r7, #120	@ 0x78
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	40021000 	.word	0x40021000
 8002ca0:	08005014 	.word	0x08005014
 8002ca4:	20000000 	.word	0x20000000
 8002ca8:	20000004 	.word	0x20000004

08002cac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b087      	sub	sp, #28
 8002cb0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	60fb      	str	r3, [r7, #12]
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	60bb      	str	r3, [r7, #8]
 8002cba:	2300      	movs	r3, #0
 8002cbc:	617b      	str	r3, [r7, #20]
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002cc6:	4b1e      	ldr	r3, [pc, #120]	@ (8002d40 <HAL_RCC_GetSysClockFreq+0x94>)
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	f003 030c 	and.w	r3, r3, #12
 8002cd2:	2b04      	cmp	r3, #4
 8002cd4:	d002      	beq.n	8002cdc <HAL_RCC_GetSysClockFreq+0x30>
 8002cd6:	2b08      	cmp	r3, #8
 8002cd8:	d003      	beq.n	8002ce2 <HAL_RCC_GetSysClockFreq+0x36>
 8002cda:	e026      	b.n	8002d2a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002cdc:	4b19      	ldr	r3, [pc, #100]	@ (8002d44 <HAL_RCC_GetSysClockFreq+0x98>)
 8002cde:	613b      	str	r3, [r7, #16]
      break;
 8002ce0:	e026      	b.n	8002d30 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	0c9b      	lsrs	r3, r3, #18
 8002ce6:	f003 030f 	and.w	r3, r3, #15
 8002cea:	4a17      	ldr	r2, [pc, #92]	@ (8002d48 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002cec:	5cd3      	ldrb	r3, [r2, r3]
 8002cee:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002cf0:	4b13      	ldr	r3, [pc, #76]	@ (8002d40 <HAL_RCC_GetSysClockFreq+0x94>)
 8002cf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cf4:	f003 030f 	and.w	r3, r3, #15
 8002cf8:	4a14      	ldr	r2, [pc, #80]	@ (8002d4c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002cfa:	5cd3      	ldrb	r3, [r2, r3]
 8002cfc:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d008      	beq.n	8002d1a <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002d08:	4a0e      	ldr	r2, [pc, #56]	@ (8002d44 <HAL_RCC_GetSysClockFreq+0x98>)
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	fb02 f303 	mul.w	r3, r2, r3
 8002d16:	617b      	str	r3, [r7, #20]
 8002d18:	e004      	b.n	8002d24 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	4a0c      	ldr	r2, [pc, #48]	@ (8002d50 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002d1e:	fb02 f303 	mul.w	r3, r2, r3
 8002d22:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	613b      	str	r3, [r7, #16]
      break;
 8002d28:	e002      	b.n	8002d30 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d2a:	4b06      	ldr	r3, [pc, #24]	@ (8002d44 <HAL_RCC_GetSysClockFreq+0x98>)
 8002d2c:	613b      	str	r3, [r7, #16]
      break;
 8002d2e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d30:	693b      	ldr	r3, [r7, #16]
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	371c      	adds	r7, #28
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr
 8002d3e:	bf00      	nop
 8002d40:	40021000 	.word	0x40021000
 8002d44:	007a1200 	.word	0x007a1200
 8002d48:	0800502c 	.word	0x0800502c
 8002d4c:	0800503c 	.word	0x0800503c
 8002d50:	003d0900 	.word	0x003d0900

08002d54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d54:	b480      	push	{r7}
 8002d56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d58:	4b03      	ldr	r3, [pc, #12]	@ (8002d68 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr
 8002d66:	bf00      	nop
 8002d68:	20000000 	.word	0x20000000

08002d6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b082      	sub	sp, #8
 8002d70:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002d72:	f7ff ffef 	bl	8002d54 <HAL_RCC_GetHCLKFreq>
 8002d76:	4601      	mov	r1, r0
 8002d78:	4b0b      	ldr	r3, [pc, #44]	@ (8002da8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002d80:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002d84:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d86:	687a      	ldr	r2, [r7, #4]
 8002d88:	fa92 f2a2 	rbit	r2, r2
 8002d8c:	603a      	str	r2, [r7, #0]
  return result;
 8002d8e:	683a      	ldr	r2, [r7, #0]
 8002d90:	fab2 f282 	clz	r2, r2
 8002d94:	b2d2      	uxtb	r2, r2
 8002d96:	40d3      	lsrs	r3, r2
 8002d98:	4a04      	ldr	r2, [pc, #16]	@ (8002dac <HAL_RCC_GetPCLK1Freq+0x40>)
 8002d9a:	5cd3      	ldrb	r3, [r2, r3]
 8002d9c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002da0:	4618      	mov	r0, r3
 8002da2:	3708      	adds	r7, #8
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	40021000 	.word	0x40021000
 8002dac:	08005024 	.word	0x08005024

08002db0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b082      	sub	sp, #8
 8002db4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002db6:	f7ff ffcd 	bl	8002d54 <HAL_RCC_GetHCLKFreq>
 8002dba:	4601      	mov	r1, r0
 8002dbc:	4b0b      	ldr	r3, [pc, #44]	@ (8002dec <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8002dc4:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8002dc8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dca:	687a      	ldr	r2, [r7, #4]
 8002dcc:	fa92 f2a2 	rbit	r2, r2
 8002dd0:	603a      	str	r2, [r7, #0]
  return result;
 8002dd2:	683a      	ldr	r2, [r7, #0]
 8002dd4:	fab2 f282 	clz	r2, r2
 8002dd8:	b2d2      	uxtb	r2, r2
 8002dda:	40d3      	lsrs	r3, r2
 8002ddc:	4a04      	ldr	r2, [pc, #16]	@ (8002df0 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002dde:	5cd3      	ldrb	r3, [r2, r3]
 8002de0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002de4:	4618      	mov	r0, r3
 8002de6:	3708      	adds	r7, #8
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	40021000 	.word	0x40021000
 8002df0:	08005024 	.word	0x08005024

08002df4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
 8002dfc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	220f      	movs	r2, #15
 8002e02:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002e04:	4b12      	ldr	r3, [pc, #72]	@ (8002e50 <HAL_RCC_GetClockConfig+0x5c>)
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	f003 0203 	and.w	r2, r3, #3
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8002e10:	4b0f      	ldr	r3, [pc, #60]	@ (8002e50 <HAL_RCC_GetClockConfig+0x5c>)
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8002e1c:	4b0c      	ldr	r3, [pc, #48]	@ (8002e50 <HAL_RCC_GetClockConfig+0x5c>)
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002e28:	4b09      	ldr	r3, [pc, #36]	@ (8002e50 <HAL_RCC_GetClockConfig+0x5c>)
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	08db      	lsrs	r3, r3, #3
 8002e2e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8002e36:	4b07      	ldr	r3, [pc, #28]	@ (8002e54 <HAL_RCC_GetClockConfig+0x60>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 0207 	and.w	r2, r3, #7
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	601a      	str	r2, [r3, #0]
}
 8002e42:	bf00      	nop
 8002e44:	370c      	adds	r7, #12
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr
 8002e4e:	bf00      	nop
 8002e50:	40021000 	.word	0x40021000
 8002e54:	40022000 	.word	0x40022000

08002e58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b082      	sub	sp, #8
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d101      	bne.n	8002e6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e049      	b.n	8002efe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d106      	bne.n	8002e84 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f000 f841 	bl	8002f06 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2202      	movs	r2, #2
 8002e88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	3304      	adds	r3, #4
 8002e94:	4619      	mov	r1, r3
 8002e96:	4610      	mov	r0, r2
 8002e98:	f000 f9be 	bl	8003218 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2201      	movs	r2, #1
 8002eb0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2201      	movs	r2, #1
 8002ed0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2201      	movs	r2, #1
 8002ee0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2201      	movs	r2, #1
 8002ef0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002efc:	2300      	movs	r3, #0
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	3708      	adds	r7, #8
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}

08002f06 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002f06:	b480      	push	{r7}
 8002f08:	b083      	sub	sp, #12
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002f0e:	bf00      	nop
 8002f10:	370c      	adds	r7, #12
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr
	...

08002f1c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b085      	sub	sp, #20
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d001      	beq.n	8002f34 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	e03b      	b.n	8002fac <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2202      	movs	r2, #2
 8002f38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	68da      	ldr	r2, [r3, #12]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f042 0201 	orr.w	r2, r2, #1
 8002f4a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a19      	ldr	r2, [pc, #100]	@ (8002fb8 <HAL_TIM_Base_Start_IT+0x9c>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d009      	beq.n	8002f6a <HAL_TIM_Base_Start_IT+0x4e>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f5e:	d004      	beq.n	8002f6a <HAL_TIM_Base_Start_IT+0x4e>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a15      	ldr	r2, [pc, #84]	@ (8002fbc <HAL_TIM_Base_Start_IT+0xa0>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d115      	bne.n	8002f96 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	689a      	ldr	r2, [r3, #8]
 8002f70:	4b13      	ldr	r3, [pc, #76]	@ (8002fc0 <HAL_TIM_Base_Start_IT+0xa4>)
 8002f72:	4013      	ands	r3, r2
 8002f74:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2b06      	cmp	r3, #6
 8002f7a:	d015      	beq.n	8002fa8 <HAL_TIM_Base_Start_IT+0x8c>
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f82:	d011      	beq.n	8002fa8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f042 0201 	orr.w	r2, r2, #1
 8002f92:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f94:	e008      	b.n	8002fa8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f042 0201 	orr.w	r2, r2, #1
 8002fa4:	601a      	str	r2, [r3, #0]
 8002fa6:	e000      	b.n	8002faa <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fa8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002faa:	2300      	movs	r3, #0
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	3714      	adds	r7, #20
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr
 8002fb8:	40012c00 	.word	0x40012c00
 8002fbc:	40014000 	.word	0x40014000
 8002fc0:	00010007 	.word	0x00010007

08002fc4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b084      	sub	sp, #16
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	68db      	ldr	r3, [r3, #12]
 8002fd2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	691b      	ldr	r3, [r3, #16]
 8002fda:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	f003 0302 	and.w	r3, r3, #2
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d020      	beq.n	8003028 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	f003 0302 	and.w	r3, r3, #2
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d01b      	beq.n	8003028 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f06f 0202 	mvn.w	r2, #2
 8002ff8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	699b      	ldr	r3, [r3, #24]
 8003006:	f003 0303 	and.w	r3, r3, #3
 800300a:	2b00      	cmp	r3, #0
 800300c:	d003      	beq.n	8003016 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f000 f8e4 	bl	80031dc <HAL_TIM_IC_CaptureCallback>
 8003014:	e005      	b.n	8003022 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f000 f8d6 	bl	80031c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	f000 f8e7 	bl	80031f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2200      	movs	r2, #0
 8003026:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	f003 0304 	and.w	r3, r3, #4
 800302e:	2b00      	cmp	r3, #0
 8003030:	d020      	beq.n	8003074 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	f003 0304 	and.w	r3, r3, #4
 8003038:	2b00      	cmp	r3, #0
 800303a:	d01b      	beq.n	8003074 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f06f 0204 	mvn.w	r2, #4
 8003044:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2202      	movs	r2, #2
 800304a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	699b      	ldr	r3, [r3, #24]
 8003052:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003056:	2b00      	cmp	r3, #0
 8003058:	d003      	beq.n	8003062 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	f000 f8be 	bl	80031dc <HAL_TIM_IC_CaptureCallback>
 8003060:	e005      	b.n	800306e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f000 f8b0 	bl	80031c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003068:	6878      	ldr	r0, [r7, #4]
 800306a:	f000 f8c1 	bl	80031f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2200      	movs	r2, #0
 8003072:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	f003 0308 	and.w	r3, r3, #8
 800307a:	2b00      	cmp	r3, #0
 800307c:	d020      	beq.n	80030c0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	f003 0308 	and.w	r3, r3, #8
 8003084:	2b00      	cmp	r3, #0
 8003086:	d01b      	beq.n	80030c0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f06f 0208 	mvn.w	r2, #8
 8003090:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2204      	movs	r2, #4
 8003096:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	69db      	ldr	r3, [r3, #28]
 800309e:	f003 0303 	and.w	r3, r3, #3
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d003      	beq.n	80030ae <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f000 f898 	bl	80031dc <HAL_TIM_IC_CaptureCallback>
 80030ac:	e005      	b.n	80030ba <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f000 f88a 	bl	80031c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030b4:	6878      	ldr	r0, [r7, #4]
 80030b6:	f000 f89b 	bl	80031f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2200      	movs	r2, #0
 80030be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	f003 0310 	and.w	r3, r3, #16
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d020      	beq.n	800310c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	f003 0310 	and.w	r3, r3, #16
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d01b      	beq.n	800310c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f06f 0210 	mvn.w	r2, #16
 80030dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2208      	movs	r2, #8
 80030e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	69db      	ldr	r3, [r3, #28]
 80030ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d003      	beq.n	80030fa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	f000 f872 	bl	80031dc <HAL_TIM_IC_CaptureCallback>
 80030f8:	e005      	b.n	8003106 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f000 f864 	bl	80031c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003100:	6878      	ldr	r0, [r7, #4]
 8003102:	f000 f875 	bl	80031f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2200      	movs	r2, #0
 800310a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	f003 0301 	and.w	r3, r3, #1
 8003112:	2b00      	cmp	r3, #0
 8003114:	d00c      	beq.n	8003130 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	f003 0301 	and.w	r3, r3, #1
 800311c:	2b00      	cmp	r3, #0
 800311e:	d007      	beq.n	8003130 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f06f 0201 	mvn.w	r2, #1
 8003128:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	f7fd fa54 	bl	80005d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003136:	2b00      	cmp	r3, #0
 8003138:	d00c      	beq.n	8003154 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003140:	2b00      	cmp	r3, #0
 8003142:	d007      	beq.n	8003154 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800314c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f000 f8e6 	bl	8003320 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800315a:	2b00      	cmp	r3, #0
 800315c:	d00c      	beq.n	8003178 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003164:	2b00      	cmp	r3, #0
 8003166:	d007      	beq.n	8003178 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003170:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f000 f8de 	bl	8003334 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800317e:	2b00      	cmp	r3, #0
 8003180:	d00c      	beq.n	800319c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003188:	2b00      	cmp	r3, #0
 800318a:	d007      	beq.n	800319c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003194:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f000 f834 	bl	8003204 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	f003 0320 	and.w	r3, r3, #32
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d00c      	beq.n	80031c0 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	f003 0320 	and.w	r3, r3, #32
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d007      	beq.n	80031c0 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f06f 0220 	mvn.w	r2, #32
 80031b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f000 f8a6 	bl	800330c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80031c0:	bf00      	nop
 80031c2:	3710      	adds	r7, #16
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}

080031c8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b083      	sub	sp, #12
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80031d0:	bf00      	nop
 80031d2:	370c      	adds	r7, #12
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr

080031dc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80031dc:	b480      	push	{r7}
 80031de:	b083      	sub	sp, #12
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80031e4:	bf00      	nop
 80031e6:	370c      	adds	r7, #12
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr

080031f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b083      	sub	sp, #12
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80031f8:	bf00      	nop
 80031fa:	370c      	adds	r7, #12
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr

08003204 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003204:	b480      	push	{r7}
 8003206:	b083      	sub	sp, #12
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800320c:	bf00      	nop
 800320e:	370c      	adds	r7, #12
 8003210:	46bd      	mov	sp, r7
 8003212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003216:	4770      	bx	lr

08003218 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003218:	b480      	push	{r7}
 800321a:	b085      	sub	sp, #20
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	4a34      	ldr	r2, [pc, #208]	@ (80032fc <TIM_Base_SetConfig+0xe4>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d003      	beq.n	8003238 <TIM_Base_SetConfig+0x20>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003236:	d108      	bne.n	800324a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800323e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	68fa      	ldr	r2, [r7, #12]
 8003246:	4313      	orrs	r3, r2
 8003248:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	4a2b      	ldr	r2, [pc, #172]	@ (80032fc <TIM_Base_SetConfig+0xe4>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d00f      	beq.n	8003272 <TIM_Base_SetConfig+0x5a>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003258:	d00b      	beq.n	8003272 <TIM_Base_SetConfig+0x5a>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4a28      	ldr	r2, [pc, #160]	@ (8003300 <TIM_Base_SetConfig+0xe8>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d007      	beq.n	8003272 <TIM_Base_SetConfig+0x5a>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	4a27      	ldr	r2, [pc, #156]	@ (8003304 <TIM_Base_SetConfig+0xec>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d003      	beq.n	8003272 <TIM_Base_SetConfig+0x5a>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	4a26      	ldr	r2, [pc, #152]	@ (8003308 <TIM_Base_SetConfig+0xf0>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d108      	bne.n	8003284 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003278:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	68db      	ldr	r3, [r3, #12]
 800327e:	68fa      	ldr	r2, [r7, #12]
 8003280:	4313      	orrs	r3, r2
 8003282:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	695b      	ldr	r3, [r3, #20]
 800328e:	4313      	orrs	r3, r2
 8003290:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	68fa      	ldr	r2, [r7, #12]
 8003296:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	689a      	ldr	r2, [r3, #8]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	4a14      	ldr	r2, [pc, #80]	@ (80032fc <TIM_Base_SetConfig+0xe4>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d00b      	beq.n	80032c8 <TIM_Base_SetConfig+0xb0>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	4a13      	ldr	r2, [pc, #76]	@ (8003300 <TIM_Base_SetConfig+0xe8>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d007      	beq.n	80032c8 <TIM_Base_SetConfig+0xb0>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	4a12      	ldr	r2, [pc, #72]	@ (8003304 <TIM_Base_SetConfig+0xec>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d003      	beq.n	80032c8 <TIM_Base_SetConfig+0xb0>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	4a11      	ldr	r2, [pc, #68]	@ (8003308 <TIM_Base_SetConfig+0xf0>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d103      	bne.n	80032d0 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	691a      	ldr	r2, [r3, #16]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2201      	movs	r2, #1
 80032d4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	691b      	ldr	r3, [r3, #16]
 80032da:	f003 0301 	and.w	r3, r3, #1
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d105      	bne.n	80032ee <TIM_Base_SetConfig+0xd6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	691b      	ldr	r3, [r3, #16]
 80032e6:	f023 0201 	bic.w	r2, r3, #1
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	611a      	str	r2, [r3, #16]
  }
}
 80032ee:	bf00      	nop
 80032f0:	3714      	adds	r7, #20
 80032f2:	46bd      	mov	sp, r7
 80032f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f8:	4770      	bx	lr
 80032fa:	bf00      	nop
 80032fc:	40012c00 	.word	0x40012c00
 8003300:	40014000 	.word	0x40014000
 8003304:	40014400 	.word	0x40014400
 8003308:	40014800 	.word	0x40014800

0800330c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800330c:	b480      	push	{r7}
 800330e:	b083      	sub	sp, #12
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003314:	bf00      	nop
 8003316:	370c      	adds	r7, #12
 8003318:	46bd      	mov	sp, r7
 800331a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331e:	4770      	bx	lr

08003320 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003320:	b480      	push	{r7}
 8003322:	b083      	sub	sp, #12
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003328:	bf00      	nop
 800332a:	370c      	adds	r7, #12
 800332c:	46bd      	mov	sp, r7
 800332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003332:	4770      	bx	lr

08003334 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003334:	b480      	push	{r7}
 8003336:	b083      	sub	sp, #12
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800333c:	bf00      	nop
 800333e:	370c      	adds	r7, #12
 8003340:	46bd      	mov	sp, r7
 8003342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003346:	4770      	bx	lr

08003348 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b082      	sub	sp, #8
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d101      	bne.n	800335a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e040      	b.n	80033dc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800335e:	2b00      	cmp	r3, #0
 8003360:	d106      	bne.n	8003370 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2200      	movs	r2, #0
 8003366:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f7fd f9d2 	bl	8000714 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2224      	movs	r2, #36	@ 0x24
 8003374:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f022 0201 	bic.w	r2, r2, #1
 8003384:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800338a:	2b00      	cmp	r3, #0
 800338c:	d002      	beq.n	8003394 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f000 f95e 	bl	8003650 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003394:	6878      	ldr	r0, [r7, #4]
 8003396:	f000 f825 	bl	80033e4 <UART_SetConfig>
 800339a:	4603      	mov	r3, r0
 800339c:	2b01      	cmp	r3, #1
 800339e:	d101      	bne.n	80033a4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	e01b      	b.n	80033dc <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	685a      	ldr	r2, [r3, #4]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80033b2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	689a      	ldr	r2, [r3, #8]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80033c2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f042 0201 	orr.w	r2, r2, #1
 80033d2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80033d4:	6878      	ldr	r0, [r7, #4]
 80033d6:	f000 f9dd 	bl	8003794 <UART_CheckIdleState>
 80033da:	4603      	mov	r3, r0
}
 80033dc:	4618      	mov	r0, r3
 80033de:	3708      	adds	r7, #8
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}

080033e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b088      	sub	sp, #32
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80033ec:	2300      	movs	r3, #0
 80033ee:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	689a      	ldr	r2, [r3, #8]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	691b      	ldr	r3, [r3, #16]
 80033f8:	431a      	orrs	r2, r3
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	695b      	ldr	r3, [r3, #20]
 80033fe:	431a      	orrs	r2, r3
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	69db      	ldr	r3, [r3, #28]
 8003404:	4313      	orrs	r3, r2
 8003406:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	4b8a      	ldr	r3, [pc, #552]	@ (8003638 <UART_SetConfig+0x254>)
 8003410:	4013      	ands	r3, r2
 8003412:	687a      	ldr	r2, [r7, #4]
 8003414:	6812      	ldr	r2, [r2, #0]
 8003416:	6979      	ldr	r1, [r7, #20]
 8003418:	430b      	orrs	r3, r1
 800341a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	68da      	ldr	r2, [r3, #12]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	430a      	orrs	r2, r1
 8003430:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	699b      	ldr	r3, [r3, #24]
 8003436:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6a1b      	ldr	r3, [r3, #32]
 800343c:	697a      	ldr	r2, [r7, #20]
 800343e:	4313      	orrs	r3, r2
 8003440:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	697a      	ldr	r2, [r7, #20]
 8003452:	430a      	orrs	r2, r1
 8003454:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a78      	ldr	r2, [pc, #480]	@ (800363c <UART_SetConfig+0x258>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d120      	bne.n	80034a2 <UART_SetConfig+0xbe>
 8003460:	4b77      	ldr	r3, [pc, #476]	@ (8003640 <UART_SetConfig+0x25c>)
 8003462:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003464:	f003 0303 	and.w	r3, r3, #3
 8003468:	2b03      	cmp	r3, #3
 800346a:	d817      	bhi.n	800349c <UART_SetConfig+0xb8>
 800346c:	a201      	add	r2, pc, #4	@ (adr r2, 8003474 <UART_SetConfig+0x90>)
 800346e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003472:	bf00      	nop
 8003474:	08003485 	.word	0x08003485
 8003478:	08003491 	.word	0x08003491
 800347c:	08003497 	.word	0x08003497
 8003480:	0800348b 	.word	0x0800348b
 8003484:	2300      	movs	r3, #0
 8003486:	77fb      	strb	r3, [r7, #31]
 8003488:	e01d      	b.n	80034c6 <UART_SetConfig+0xe2>
 800348a:	2302      	movs	r3, #2
 800348c:	77fb      	strb	r3, [r7, #31]
 800348e:	e01a      	b.n	80034c6 <UART_SetConfig+0xe2>
 8003490:	2304      	movs	r3, #4
 8003492:	77fb      	strb	r3, [r7, #31]
 8003494:	e017      	b.n	80034c6 <UART_SetConfig+0xe2>
 8003496:	2308      	movs	r3, #8
 8003498:	77fb      	strb	r3, [r7, #31]
 800349a:	e014      	b.n	80034c6 <UART_SetConfig+0xe2>
 800349c:	2310      	movs	r3, #16
 800349e:	77fb      	strb	r3, [r7, #31]
 80034a0:	e011      	b.n	80034c6 <UART_SetConfig+0xe2>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a67      	ldr	r2, [pc, #412]	@ (8003644 <UART_SetConfig+0x260>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d102      	bne.n	80034b2 <UART_SetConfig+0xce>
 80034ac:	2300      	movs	r3, #0
 80034ae:	77fb      	strb	r3, [r7, #31]
 80034b0:	e009      	b.n	80034c6 <UART_SetConfig+0xe2>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a64      	ldr	r2, [pc, #400]	@ (8003648 <UART_SetConfig+0x264>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d102      	bne.n	80034c2 <UART_SetConfig+0xde>
 80034bc:	2300      	movs	r3, #0
 80034be:	77fb      	strb	r3, [r7, #31]
 80034c0:	e001      	b.n	80034c6 <UART_SetConfig+0xe2>
 80034c2:	2310      	movs	r3, #16
 80034c4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	69db      	ldr	r3, [r3, #28]
 80034ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80034ce:	d15a      	bne.n	8003586 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 80034d0:	7ffb      	ldrb	r3, [r7, #31]
 80034d2:	2b08      	cmp	r3, #8
 80034d4:	d827      	bhi.n	8003526 <UART_SetConfig+0x142>
 80034d6:	a201      	add	r2, pc, #4	@ (adr r2, 80034dc <UART_SetConfig+0xf8>)
 80034d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034dc:	08003501 	.word	0x08003501
 80034e0:	08003509 	.word	0x08003509
 80034e4:	08003511 	.word	0x08003511
 80034e8:	08003527 	.word	0x08003527
 80034ec:	08003517 	.word	0x08003517
 80034f0:	08003527 	.word	0x08003527
 80034f4:	08003527 	.word	0x08003527
 80034f8:	08003527 	.word	0x08003527
 80034fc:	0800351f 	.word	0x0800351f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003500:	f7ff fc34 	bl	8002d6c <HAL_RCC_GetPCLK1Freq>
 8003504:	61b8      	str	r0, [r7, #24]
        break;
 8003506:	e013      	b.n	8003530 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003508:	f7ff fc52 	bl	8002db0 <HAL_RCC_GetPCLK2Freq>
 800350c:	61b8      	str	r0, [r7, #24]
        break;
 800350e:	e00f      	b.n	8003530 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003510:	4b4e      	ldr	r3, [pc, #312]	@ (800364c <UART_SetConfig+0x268>)
 8003512:	61bb      	str	r3, [r7, #24]
        break;
 8003514:	e00c      	b.n	8003530 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003516:	f7ff fbc9 	bl	8002cac <HAL_RCC_GetSysClockFreq>
 800351a:	61b8      	str	r0, [r7, #24]
        break;
 800351c:	e008      	b.n	8003530 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800351e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003522:	61bb      	str	r3, [r7, #24]
        break;
 8003524:	e004      	b.n	8003530 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8003526:	2300      	movs	r3, #0
 8003528:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	77bb      	strb	r3, [r7, #30]
        break;
 800352e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003530:	69bb      	ldr	r3, [r7, #24]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d074      	beq.n	8003620 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003536:	69bb      	ldr	r3, [r7, #24]
 8003538:	005a      	lsls	r2, r3, #1
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	085b      	lsrs	r3, r3, #1
 8003540:	441a      	add	r2, r3
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	fbb2 f3f3 	udiv	r3, r2, r3
 800354a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	2b0f      	cmp	r3, #15
 8003550:	d916      	bls.n	8003580 <UART_SetConfig+0x19c>
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003558:	d212      	bcs.n	8003580 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	b29b      	uxth	r3, r3
 800355e:	f023 030f 	bic.w	r3, r3, #15
 8003562:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	085b      	lsrs	r3, r3, #1
 8003568:	b29b      	uxth	r3, r3
 800356a:	f003 0307 	and.w	r3, r3, #7
 800356e:	b29a      	uxth	r2, r3
 8003570:	89fb      	ldrh	r3, [r7, #14]
 8003572:	4313      	orrs	r3, r2
 8003574:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	89fa      	ldrh	r2, [r7, #14]
 800357c:	60da      	str	r2, [r3, #12]
 800357e:	e04f      	b.n	8003620 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	77bb      	strb	r3, [r7, #30]
 8003584:	e04c      	b.n	8003620 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003586:	7ffb      	ldrb	r3, [r7, #31]
 8003588:	2b08      	cmp	r3, #8
 800358a:	d828      	bhi.n	80035de <UART_SetConfig+0x1fa>
 800358c:	a201      	add	r2, pc, #4	@ (adr r2, 8003594 <UART_SetConfig+0x1b0>)
 800358e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003592:	bf00      	nop
 8003594:	080035b9 	.word	0x080035b9
 8003598:	080035c1 	.word	0x080035c1
 800359c:	080035c9 	.word	0x080035c9
 80035a0:	080035df 	.word	0x080035df
 80035a4:	080035cf 	.word	0x080035cf
 80035a8:	080035df 	.word	0x080035df
 80035ac:	080035df 	.word	0x080035df
 80035b0:	080035df 	.word	0x080035df
 80035b4:	080035d7 	.word	0x080035d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035b8:	f7ff fbd8 	bl	8002d6c <HAL_RCC_GetPCLK1Freq>
 80035bc:	61b8      	str	r0, [r7, #24]
        break;
 80035be:	e013      	b.n	80035e8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80035c0:	f7ff fbf6 	bl	8002db0 <HAL_RCC_GetPCLK2Freq>
 80035c4:	61b8      	str	r0, [r7, #24]
        break;
 80035c6:	e00f      	b.n	80035e8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80035c8:	4b20      	ldr	r3, [pc, #128]	@ (800364c <UART_SetConfig+0x268>)
 80035ca:	61bb      	str	r3, [r7, #24]
        break;
 80035cc:	e00c      	b.n	80035e8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035ce:	f7ff fb6d 	bl	8002cac <HAL_RCC_GetSysClockFreq>
 80035d2:	61b8      	str	r0, [r7, #24]
        break;
 80035d4:	e008      	b.n	80035e8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80035da:	61bb      	str	r3, [r7, #24]
        break;
 80035dc:	e004      	b.n	80035e8 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80035de:	2300      	movs	r3, #0
 80035e0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	77bb      	strb	r3, [r7, #30]
        break;
 80035e6:	bf00      	nop
    }

    if (pclk != 0U)
 80035e8:	69bb      	ldr	r3, [r7, #24]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d018      	beq.n	8003620 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	085a      	lsrs	r2, r3, #1
 80035f4:	69bb      	ldr	r3, [r7, #24]
 80035f6:	441a      	add	r2, r3
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003600:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	2b0f      	cmp	r3, #15
 8003606:	d909      	bls.n	800361c <UART_SetConfig+0x238>
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800360e:	d205      	bcs.n	800361c <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	b29a      	uxth	r2, r3
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	60da      	str	r2, [r3, #12]
 800361a:	e001      	b.n	8003620 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2200      	movs	r2, #0
 8003624:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2200      	movs	r2, #0
 800362a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800362c:	7fbb      	ldrb	r3, [r7, #30]
}
 800362e:	4618      	mov	r0, r3
 8003630:	3720      	adds	r7, #32
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
 8003636:	bf00      	nop
 8003638:	efff69f3 	.word	0xefff69f3
 800363c:	40013800 	.word	0x40013800
 8003640:	40021000 	.word	0x40021000
 8003644:	40004400 	.word	0x40004400
 8003648:	40004800 	.word	0x40004800
 800364c:	007a1200 	.word	0x007a1200

08003650 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003650:	b480      	push	{r7}
 8003652:	b083      	sub	sp, #12
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800365c:	f003 0308 	and.w	r3, r3, #8
 8003660:	2b00      	cmp	r3, #0
 8003662:	d00a      	beq.n	800367a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	430a      	orrs	r2, r1
 8003678:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800367e:	f003 0301 	and.w	r3, r3, #1
 8003682:	2b00      	cmp	r3, #0
 8003684:	d00a      	beq.n	800369c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	430a      	orrs	r2, r1
 800369a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036a0:	f003 0302 	and.w	r3, r3, #2
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d00a      	beq.n	80036be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	430a      	orrs	r2, r1
 80036bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036c2:	f003 0304 	and.w	r3, r3, #4
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d00a      	beq.n	80036e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	430a      	orrs	r2, r1
 80036de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036e4:	f003 0310 	and.w	r3, r3, #16
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d00a      	beq.n	8003702 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	430a      	orrs	r2, r1
 8003700:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003706:	f003 0320 	and.w	r3, r3, #32
 800370a:	2b00      	cmp	r3, #0
 800370c:	d00a      	beq.n	8003724 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	430a      	orrs	r2, r1
 8003722:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003728:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800372c:	2b00      	cmp	r3, #0
 800372e:	d01a      	beq.n	8003766 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	430a      	orrs	r2, r1
 8003744:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800374a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800374e:	d10a      	bne.n	8003766 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	430a      	orrs	r2, r1
 8003764:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800376a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800376e:	2b00      	cmp	r3, #0
 8003770:	d00a      	beq.n	8003788 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	430a      	orrs	r2, r1
 8003786:	605a      	str	r2, [r3, #4]
  }
}
 8003788:	bf00      	nop
 800378a:	370c      	adds	r7, #12
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr

08003794 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b098      	sub	sp, #96	@ 0x60
 8003798:	af02      	add	r7, sp, #8
 800379a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2200      	movs	r2, #0
 80037a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80037a4:	f7fd f8fe 	bl	80009a4 <HAL_GetTick>
 80037a8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 0308 	and.w	r3, r3, #8
 80037b4:	2b08      	cmp	r3, #8
 80037b6:	d12e      	bne.n	8003816 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037b8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80037bc:	9300      	str	r3, [sp, #0]
 80037be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037c0:	2200      	movs	r2, #0
 80037c2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f000 f88c 	bl	80038e4 <UART_WaitOnFlagUntilTimeout>
 80037cc:	4603      	mov	r3, r0
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d021      	beq.n	8003816 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037da:	e853 3f00 	ldrex	r3, [r3]
 80037de:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80037e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80037e6:	653b      	str	r3, [r7, #80]	@ 0x50
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	461a      	mov	r2, r3
 80037ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80037f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80037f2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037f4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80037f6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80037f8:	e841 2300 	strex	r3, r2, [r1]
 80037fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80037fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003800:	2b00      	cmp	r3, #0
 8003802:	d1e6      	bne.n	80037d2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2220      	movs	r2, #32
 8003808:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003812:	2303      	movs	r3, #3
 8003814:	e062      	b.n	80038dc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 0304 	and.w	r3, r3, #4
 8003820:	2b04      	cmp	r3, #4
 8003822:	d149      	bne.n	80038b8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003824:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003828:	9300      	str	r3, [sp, #0]
 800382a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800382c:	2200      	movs	r2, #0
 800382e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f000 f856 	bl	80038e4 <UART_WaitOnFlagUntilTimeout>
 8003838:	4603      	mov	r3, r0
 800383a:	2b00      	cmp	r3, #0
 800383c:	d03c      	beq.n	80038b8 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003846:	e853 3f00 	ldrex	r3, [r3]
 800384a:	623b      	str	r3, [r7, #32]
   return(result);
 800384c:	6a3b      	ldr	r3, [r7, #32]
 800384e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003852:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	461a      	mov	r2, r3
 800385a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800385c:	633b      	str	r3, [r7, #48]	@ 0x30
 800385e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003860:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003862:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003864:	e841 2300 	strex	r3, r2, [r1]
 8003868:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800386a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800386c:	2b00      	cmp	r3, #0
 800386e:	d1e6      	bne.n	800383e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	3308      	adds	r3, #8
 8003876:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	e853 3f00 	ldrex	r3, [r3]
 800387e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	f023 0301 	bic.w	r3, r3, #1
 8003886:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	3308      	adds	r3, #8
 800388e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003890:	61fa      	str	r2, [r7, #28]
 8003892:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003894:	69b9      	ldr	r1, [r7, #24]
 8003896:	69fa      	ldr	r2, [r7, #28]
 8003898:	e841 2300 	strex	r3, r2, [r1]
 800389c:	617b      	str	r3, [r7, #20]
   return(result);
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d1e5      	bne.n	8003870 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2220      	movs	r2, #32
 80038a8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2200      	movs	r2, #0
 80038b0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80038b4:	2303      	movs	r3, #3
 80038b6:	e011      	b.n	80038dc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2220      	movs	r2, #32
 80038bc:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2220      	movs	r2, #32
 80038c2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2200      	movs	r2, #0
 80038ca:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2200      	movs	r2, #0
 80038d0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2200      	movs	r2, #0
 80038d6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80038da:	2300      	movs	r3, #0
}
 80038dc:	4618      	mov	r0, r3
 80038de:	3758      	adds	r7, #88	@ 0x58
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}

080038e4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b084      	sub	sp, #16
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	60f8      	str	r0, [r7, #12]
 80038ec:	60b9      	str	r1, [r7, #8]
 80038ee:	603b      	str	r3, [r7, #0]
 80038f0:	4613      	mov	r3, r2
 80038f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038f4:	e04f      	b.n	8003996 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038f6:	69bb      	ldr	r3, [r7, #24]
 80038f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038fc:	d04b      	beq.n	8003996 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038fe:	f7fd f851 	bl	80009a4 <HAL_GetTick>
 8003902:	4602      	mov	r2, r0
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	1ad3      	subs	r3, r2, r3
 8003908:	69ba      	ldr	r2, [r7, #24]
 800390a:	429a      	cmp	r2, r3
 800390c:	d302      	bcc.n	8003914 <UART_WaitOnFlagUntilTimeout+0x30>
 800390e:	69bb      	ldr	r3, [r7, #24]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d101      	bne.n	8003918 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003914:	2303      	movs	r3, #3
 8003916:	e04e      	b.n	80039b6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 0304 	and.w	r3, r3, #4
 8003922:	2b00      	cmp	r3, #0
 8003924:	d037      	beq.n	8003996 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	2b80      	cmp	r3, #128	@ 0x80
 800392a:	d034      	beq.n	8003996 <UART_WaitOnFlagUntilTimeout+0xb2>
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	2b40      	cmp	r3, #64	@ 0x40
 8003930:	d031      	beq.n	8003996 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	69db      	ldr	r3, [r3, #28]
 8003938:	f003 0308 	and.w	r3, r3, #8
 800393c:	2b08      	cmp	r3, #8
 800393e:	d110      	bne.n	8003962 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	2208      	movs	r2, #8
 8003946:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003948:	68f8      	ldr	r0, [r7, #12]
 800394a:	f000 f838 	bl	80039be <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2208      	movs	r2, #8
 8003952:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2200      	movs	r2, #0
 800395a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e029      	b.n	80039b6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	69db      	ldr	r3, [r3, #28]
 8003968:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800396c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003970:	d111      	bne.n	8003996 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800397a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800397c:	68f8      	ldr	r0, [r7, #12]
 800397e:	f000 f81e 	bl	80039be <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2220      	movs	r2, #32
 8003986:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2200      	movs	r2, #0
 800398e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003992:	2303      	movs	r3, #3
 8003994:	e00f      	b.n	80039b6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	69da      	ldr	r2, [r3, #28]
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	4013      	ands	r3, r2
 80039a0:	68ba      	ldr	r2, [r7, #8]
 80039a2:	429a      	cmp	r2, r3
 80039a4:	bf0c      	ite	eq
 80039a6:	2301      	moveq	r3, #1
 80039a8:	2300      	movne	r3, #0
 80039aa:	b2db      	uxtb	r3, r3
 80039ac:	461a      	mov	r2, r3
 80039ae:	79fb      	ldrb	r3, [r7, #7]
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d0a0      	beq.n	80038f6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80039b4:	2300      	movs	r3, #0
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3710      	adds	r7, #16
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}

080039be <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80039be:	b480      	push	{r7}
 80039c0:	b095      	sub	sp, #84	@ 0x54
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039ce:	e853 3f00 	ldrex	r3, [r3]
 80039d2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80039d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039d6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80039da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	461a      	mov	r2, r3
 80039e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80039e4:	643b      	str	r3, [r7, #64]	@ 0x40
 80039e6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039e8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80039ea:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80039ec:	e841 2300 	strex	r3, r2, [r1]
 80039f0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80039f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d1e6      	bne.n	80039c6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	3308      	adds	r3, #8
 80039fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a00:	6a3b      	ldr	r3, [r7, #32]
 8003a02:	e853 3f00 	ldrex	r3, [r3]
 8003a06:	61fb      	str	r3, [r7, #28]
   return(result);
 8003a08:	69fb      	ldr	r3, [r7, #28]
 8003a0a:	f023 0301 	bic.w	r3, r3, #1
 8003a0e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	3308      	adds	r3, #8
 8003a16:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003a18:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003a1a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a1c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003a1e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003a20:	e841 2300 	strex	r3, r2, [r1]
 8003a24:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d1e5      	bne.n	80039f8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d118      	bne.n	8003a66 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	e853 3f00 	ldrex	r3, [r3]
 8003a40:	60bb      	str	r3, [r7, #8]
   return(result);
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	f023 0310 	bic.w	r3, r3, #16
 8003a48:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	461a      	mov	r2, r3
 8003a50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a52:	61bb      	str	r3, [r7, #24]
 8003a54:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a56:	6979      	ldr	r1, [r7, #20]
 8003a58:	69ba      	ldr	r2, [r7, #24]
 8003a5a:	e841 2300 	strex	r3, r2, [r1]
 8003a5e:	613b      	str	r3, [r7, #16]
   return(result);
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d1e6      	bne.n	8003a34 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2220      	movs	r2, #32
 8003a6a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2200      	movs	r2, #0
 8003a72:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2200      	movs	r2, #0
 8003a78:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003a7a:	bf00      	nop
 8003a7c:	3754      	adds	r7, #84	@ 0x54
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr

08003a86 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003a86:	b480      	push	{r7}
 8003a88:	b085      	sub	sp, #20
 8003a8a:	af00      	add	r7, sp, #0
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003a90:	2300      	movs	r3, #0
 8003a92:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003a94:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a98:	2b84      	cmp	r3, #132	@ 0x84
 8003a9a:	d005      	beq.n	8003aa8 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003a9c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	4413      	add	r3, r2
 8003aa4:	3303      	adds	r3, #3
 8003aa6:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3714      	adds	r7, #20
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab4:	4770      	bx	lr

08003ab6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003ab6:	b580      	push	{r7, lr}
 8003ab8:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003aba:	f000 fadb 	bl	8004074 <vTaskStartScheduler>
  
  return osOK;
 8003abe:	2300      	movs	r3, #0
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	bd80      	pop	{r7, pc}

08003ac4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003ac4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ac6:	b089      	sub	sp, #36	@ 0x24
 8003ac8:	af04      	add	r7, sp, #16
 8003aca:	6078      	str	r0, [r7, #4]
 8003acc:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	695b      	ldr	r3, [r3, #20]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d020      	beq.n	8003b18 <osThreadCreate+0x54>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	699b      	ldr	r3, [r3, #24]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d01c      	beq.n	8003b18 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	685c      	ldr	r4, [r3, #4]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	691e      	ldr	r6, [r3, #16]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003af0:	4618      	mov	r0, r3
 8003af2:	f7ff ffc8 	bl	8003a86 <makeFreeRtosPriority>
 8003af6:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	695b      	ldr	r3, [r3, #20]
 8003afc:	687a      	ldr	r2, [r7, #4]
 8003afe:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003b00:	9202      	str	r2, [sp, #8]
 8003b02:	9301      	str	r3, [sp, #4]
 8003b04:	9100      	str	r1, [sp, #0]
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	4632      	mov	r2, r6
 8003b0a:	4629      	mov	r1, r5
 8003b0c:	4620      	mov	r0, r4
 8003b0e:	f000 f8ed 	bl	8003cec <xTaskCreateStatic>
 8003b12:	4603      	mov	r3, r0
 8003b14:	60fb      	str	r3, [r7, #12]
 8003b16:	e01c      	b.n	8003b52 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	685c      	ldr	r4, [r3, #4]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003b24:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f7ff ffaa 	bl	8003a86 <makeFreeRtosPriority>
 8003b32:	4602      	mov	r2, r0
 8003b34:	f107 030c 	add.w	r3, r7, #12
 8003b38:	9301      	str	r3, [sp, #4]
 8003b3a:	9200      	str	r2, [sp, #0]
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	4632      	mov	r2, r6
 8003b40:	4629      	mov	r1, r5
 8003b42:	4620      	mov	r0, r4
 8003b44:	f000 f931 	bl	8003daa <xTaskCreate>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	d001      	beq.n	8003b52 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	e000      	b.n	8003b54 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003b52:	68fb      	ldr	r3, [r7, #12]
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	3714      	adds	r7, #20
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003b5c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b084      	sub	sp, #16
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d001      	beq.n	8003b72 <osDelay+0x16>
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	e000      	b.n	8003b74 <osDelay+0x18>
 8003b72:	2301      	movs	r3, #1
 8003b74:	4618      	mov	r0, r3
 8003b76:	f000 fa47 	bl	8004008 <vTaskDelay>
  
  return osOK;
 8003b7a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	3710      	adds	r7, #16
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}

08003b84 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003b84:	b480      	push	{r7}
 8003b86:	b083      	sub	sp, #12
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	f103 0208 	add.w	r2, r3, #8
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	f04f 32ff 	mov.w	r2, #4294967295
 8003b9c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	f103 0208 	add.w	r2, r3, #8
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	f103 0208 	add.w	r2, r3, #8
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003bb8:	bf00      	nop
 8003bba:	370c      	adds	r7, #12
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr

08003bc4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b083      	sub	sp, #12
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003bd2:	bf00      	nop
 8003bd4:	370c      	adds	r7, #12
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bdc:	4770      	bx	lr

08003bde <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003bde:	b480      	push	{r7}
 8003be0:	b085      	sub	sp, #20
 8003be2:	af00      	add	r7, sp, #0
 8003be4:	6078      	str	r0, [r7, #4]
 8003be6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	68fa      	ldr	r2, [r7, #12]
 8003bf2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	689a      	ldr	r2, [r3, #8]
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	683a      	ldr	r2, [r7, #0]
 8003c02:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	683a      	ldr	r2, [r7, #0]
 8003c08:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	687a      	ldr	r2, [r7, #4]
 8003c0e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	1c5a      	adds	r2, r3, #1
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	601a      	str	r2, [r3, #0]
}
 8003c1a:	bf00      	nop
 8003c1c:	3714      	adds	r7, #20
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c24:	4770      	bx	lr

08003c26 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003c26:	b480      	push	{r7}
 8003c28:	b085      	sub	sp, #20
 8003c2a:	af00      	add	r7, sp, #0
 8003c2c:	6078      	str	r0, [r7, #4]
 8003c2e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c3c:	d103      	bne.n	8003c46 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	691b      	ldr	r3, [r3, #16]
 8003c42:	60fb      	str	r3, [r7, #12]
 8003c44:	e00c      	b.n	8003c60 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	3308      	adds	r3, #8
 8003c4a:	60fb      	str	r3, [r7, #12]
 8003c4c:	e002      	b.n	8003c54 <vListInsert+0x2e>
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	60fb      	str	r3, [r7, #12]
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	68ba      	ldr	r2, [r7, #8]
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d2f6      	bcs.n	8003c4e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	685a      	ldr	r2, [r3, #4]
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	683a      	ldr	r2, [r7, #0]
 8003c6e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	68fa      	ldr	r2, [r7, #12]
 8003c74:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	683a      	ldr	r2, [r7, #0]
 8003c7a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	687a      	ldr	r2, [r7, #4]
 8003c80:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	1c5a      	adds	r2, r3, #1
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	601a      	str	r2, [r3, #0]
}
 8003c8c:	bf00      	nop
 8003c8e:	3714      	adds	r7, #20
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr

08003c98 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b085      	sub	sp, #20
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	691b      	ldr	r3, [r3, #16]
 8003ca4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	687a      	ldr	r2, [r7, #4]
 8003cac:	6892      	ldr	r2, [r2, #8]
 8003cae:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	687a      	ldr	r2, [r7, #4]
 8003cb6:	6852      	ldr	r2, [r2, #4]
 8003cb8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	687a      	ldr	r2, [r7, #4]
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d103      	bne.n	8003ccc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	689a      	ldr	r2, [r3, #8]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	1e5a      	subs	r2, r3, #1
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	3714      	adds	r7, #20
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cea:	4770      	bx	lr

08003cec <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b08e      	sub	sp, #56	@ 0x38
 8003cf0:	af04      	add	r7, sp, #16
 8003cf2:	60f8      	str	r0, [r7, #12]
 8003cf4:	60b9      	str	r1, [r7, #8]
 8003cf6:	607a      	str	r2, [r7, #4]
 8003cf8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003cfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d10b      	bne.n	8003d18 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003d00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d04:	f383 8811 	msr	BASEPRI, r3
 8003d08:	f3bf 8f6f 	isb	sy
 8003d0c:	f3bf 8f4f 	dsb	sy
 8003d10:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003d12:	bf00      	nop
 8003d14:	bf00      	nop
 8003d16:	e7fd      	b.n	8003d14 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003d18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d10b      	bne.n	8003d36 <xTaskCreateStatic+0x4a>
	__asm volatile
 8003d1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d22:	f383 8811 	msr	BASEPRI, r3
 8003d26:	f3bf 8f6f 	isb	sy
 8003d2a:	f3bf 8f4f 	dsb	sy
 8003d2e:	61fb      	str	r3, [r7, #28]
}
 8003d30:	bf00      	nop
 8003d32:	bf00      	nop
 8003d34:	e7fd      	b.n	8003d32 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003d36:	2354      	movs	r3, #84	@ 0x54
 8003d38:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	2b54      	cmp	r3, #84	@ 0x54
 8003d3e:	d00b      	beq.n	8003d58 <xTaskCreateStatic+0x6c>
	__asm volatile
 8003d40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d44:	f383 8811 	msr	BASEPRI, r3
 8003d48:	f3bf 8f6f 	isb	sy
 8003d4c:	f3bf 8f4f 	dsb	sy
 8003d50:	61bb      	str	r3, [r7, #24]
}
 8003d52:	bf00      	nop
 8003d54:	bf00      	nop
 8003d56:	e7fd      	b.n	8003d54 <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003d58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d01e      	beq.n	8003d9c <xTaskCreateStatic+0xb0>
 8003d5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d01b      	beq.n	8003d9c <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003d64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d66:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003d68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d6a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003d6c:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d70:	2202      	movs	r2, #2
 8003d72:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003d76:	2300      	movs	r3, #0
 8003d78:	9303      	str	r3, [sp, #12]
 8003d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d7c:	9302      	str	r3, [sp, #8]
 8003d7e:	f107 0314 	add.w	r3, r7, #20
 8003d82:	9301      	str	r3, [sp, #4]
 8003d84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d86:	9300      	str	r3, [sp, #0]
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	687a      	ldr	r2, [r7, #4]
 8003d8c:	68b9      	ldr	r1, [r7, #8]
 8003d8e:	68f8      	ldr	r0, [r7, #12]
 8003d90:	f000 f850 	bl	8003e34 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003d94:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003d96:	f000 f8cd 	bl	8003f34 <prvAddNewTaskToReadyList>
 8003d9a:	e001      	b.n	8003da0 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003da0:	697b      	ldr	r3, [r7, #20]
	}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3728      	adds	r7, #40	@ 0x28
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}

08003daa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003daa:	b580      	push	{r7, lr}
 8003dac:	b08c      	sub	sp, #48	@ 0x30
 8003dae:	af04      	add	r7, sp, #16
 8003db0:	60f8      	str	r0, [r7, #12]
 8003db2:	60b9      	str	r1, [r7, #8]
 8003db4:	603b      	str	r3, [r7, #0]
 8003db6:	4613      	mov	r3, r2
 8003db8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003dba:	88fb      	ldrh	r3, [r7, #6]
 8003dbc:	009b      	lsls	r3, r3, #2
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f000 fed2 	bl	8004b68 <pvPortMalloc>
 8003dc4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d00e      	beq.n	8003dea <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003dcc:	2054      	movs	r0, #84	@ 0x54
 8003dce:	f000 fecb 	bl	8004b68 <pvPortMalloc>
 8003dd2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003dd4:	69fb      	ldr	r3, [r7, #28]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d003      	beq.n	8003de2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003dda:	69fb      	ldr	r3, [r7, #28]
 8003ddc:	697a      	ldr	r2, [r7, #20]
 8003dde:	631a      	str	r2, [r3, #48]	@ 0x30
 8003de0:	e005      	b.n	8003dee <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003de2:	6978      	ldr	r0, [r7, #20]
 8003de4:	f000 ff88 	bl	8004cf8 <vPortFree>
 8003de8:	e001      	b.n	8003dee <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003dea:	2300      	movs	r3, #0
 8003dec:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003dee:	69fb      	ldr	r3, [r7, #28]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d017      	beq.n	8003e24 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003df4:	69fb      	ldr	r3, [r7, #28]
 8003df6:	2200      	movs	r2, #0
 8003df8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003dfc:	88fa      	ldrh	r2, [r7, #6]
 8003dfe:	2300      	movs	r3, #0
 8003e00:	9303      	str	r3, [sp, #12]
 8003e02:	69fb      	ldr	r3, [r7, #28]
 8003e04:	9302      	str	r3, [sp, #8]
 8003e06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e08:	9301      	str	r3, [sp, #4]
 8003e0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e0c:	9300      	str	r3, [sp, #0]
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	68b9      	ldr	r1, [r7, #8]
 8003e12:	68f8      	ldr	r0, [r7, #12]
 8003e14:	f000 f80e 	bl	8003e34 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003e18:	69f8      	ldr	r0, [r7, #28]
 8003e1a:	f000 f88b 	bl	8003f34 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	61bb      	str	r3, [r7, #24]
 8003e22:	e002      	b.n	8003e2a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003e24:	f04f 33ff 	mov.w	r3, #4294967295
 8003e28:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003e2a:	69bb      	ldr	r3, [r7, #24]
	}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	3720      	adds	r7, #32
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}

08003e34 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b088      	sub	sp, #32
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	60f8      	str	r0, [r7, #12]
 8003e3c:	60b9      	str	r1, [r7, #8]
 8003e3e:	607a      	str	r2, [r7, #4]
 8003e40:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003e42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e44:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003e4c:	3b01      	subs	r3, #1
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	4413      	add	r3, r2
 8003e52:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003e54:	69bb      	ldr	r3, [r7, #24]
 8003e56:	f023 0307 	bic.w	r3, r3, #7
 8003e5a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003e5c:	69bb      	ldr	r3, [r7, #24]
 8003e5e:	f003 0307 	and.w	r3, r3, #7
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d00b      	beq.n	8003e7e <prvInitialiseNewTask+0x4a>
	__asm volatile
 8003e66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e6a:	f383 8811 	msr	BASEPRI, r3
 8003e6e:	f3bf 8f6f 	isb	sy
 8003e72:	f3bf 8f4f 	dsb	sy
 8003e76:	617b      	str	r3, [r7, #20]
}
 8003e78:	bf00      	nop
 8003e7a:	bf00      	nop
 8003e7c:	e7fd      	b.n	8003e7a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003e7e:	2300      	movs	r3, #0
 8003e80:	61fb      	str	r3, [r7, #28]
 8003e82:	e012      	b.n	8003eaa <prvInitialiseNewTask+0x76>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003e84:	68ba      	ldr	r2, [r7, #8]
 8003e86:	69fb      	ldr	r3, [r7, #28]
 8003e88:	4413      	add	r3, r2
 8003e8a:	7819      	ldrb	r1, [r3, #0]
 8003e8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e8e:	69fb      	ldr	r3, [r7, #28]
 8003e90:	4413      	add	r3, r2
 8003e92:	3334      	adds	r3, #52	@ 0x34
 8003e94:	460a      	mov	r2, r1
 8003e96:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003e98:	68ba      	ldr	r2, [r7, #8]
 8003e9a:	69fb      	ldr	r3, [r7, #28]
 8003e9c:	4413      	add	r3, r2
 8003e9e:	781b      	ldrb	r3, [r3, #0]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d006      	beq.n	8003eb2 <prvInitialiseNewTask+0x7e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003ea4:	69fb      	ldr	r3, [r7, #28]
 8003ea6:	3301      	adds	r3, #1
 8003ea8:	61fb      	str	r3, [r7, #28]
 8003eaa:	69fb      	ldr	r3, [r7, #28]
 8003eac:	2b0f      	cmp	r3, #15
 8003eae:	d9e9      	bls.n	8003e84 <prvInitialiseNewTask+0x50>
 8003eb0:	e000      	b.n	8003eb4 <prvInitialiseNewTask+0x80>
		{
			break;
 8003eb2:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003eb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003ebc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ebe:	2b06      	cmp	r3, #6
 8003ec0:	d901      	bls.n	8003ec6 <prvInitialiseNewTask+0x92>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003ec2:	2306      	movs	r3, #6
 8003ec4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003ec6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ec8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003eca:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003ecc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ece:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003ed0:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003ed2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003ed8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003eda:	3304      	adds	r3, #4
 8003edc:	4618      	mov	r0, r3
 8003ede:	f7ff fe71 	bl	8003bc4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003ee2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ee4:	3318      	adds	r3, #24
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f7ff fe6c 	bl	8003bc4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003eec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003eee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ef0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ef2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ef4:	f1c3 0207 	rsb	r2, r3, #7
 8003ef8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003efa:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003efc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003efe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f00:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003f02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f04:	2200      	movs	r2, #0
 8003f06:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003f08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003f10:	683a      	ldr	r2, [r7, #0]
 8003f12:	68f9      	ldr	r1, [r7, #12]
 8003f14:	69b8      	ldr	r0, [r7, #24]
 8003f16:	f000 fc17 	bl	8004748 <pxPortInitialiseStack>
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f1e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003f20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d002      	beq.n	8003f2c <prvInitialiseNewTask+0xf8>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003f26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f28:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f2a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003f2c:	bf00      	nop
 8003f2e:	3720      	adds	r7, #32
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}

08003f34 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b082      	sub	sp, #8
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003f3c:	f000 fd34 	bl	80049a8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003f40:	4b2a      	ldr	r3, [pc, #168]	@ (8003fec <prvAddNewTaskToReadyList+0xb8>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	3301      	adds	r3, #1
 8003f46:	4a29      	ldr	r2, [pc, #164]	@ (8003fec <prvAddNewTaskToReadyList+0xb8>)
 8003f48:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003f4a:	4b29      	ldr	r3, [pc, #164]	@ (8003ff0 <prvAddNewTaskToReadyList+0xbc>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d109      	bne.n	8003f66 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003f52:	4a27      	ldr	r2, [pc, #156]	@ (8003ff0 <prvAddNewTaskToReadyList+0xbc>)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003f58:	4b24      	ldr	r3, [pc, #144]	@ (8003fec <prvAddNewTaskToReadyList+0xb8>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d110      	bne.n	8003f82 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003f60:	f000 fac8 	bl	80044f4 <prvInitialiseTaskLists>
 8003f64:	e00d      	b.n	8003f82 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003f66:	4b23      	ldr	r3, [pc, #140]	@ (8003ff4 <prvAddNewTaskToReadyList+0xc0>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d109      	bne.n	8003f82 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003f6e:	4b20      	ldr	r3, [pc, #128]	@ (8003ff0 <prvAddNewTaskToReadyList+0xbc>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	d802      	bhi.n	8003f82 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003f7c:	4a1c      	ldr	r2, [pc, #112]	@ (8003ff0 <prvAddNewTaskToReadyList+0xbc>)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003f82:	4b1d      	ldr	r3, [pc, #116]	@ (8003ff8 <prvAddNewTaskToReadyList+0xc4>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	3301      	adds	r3, #1
 8003f88:	4a1b      	ldr	r2, [pc, #108]	@ (8003ff8 <prvAddNewTaskToReadyList+0xc4>)
 8003f8a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f90:	2201      	movs	r2, #1
 8003f92:	409a      	lsls	r2, r3
 8003f94:	4b19      	ldr	r3, [pc, #100]	@ (8003ffc <prvAddNewTaskToReadyList+0xc8>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	4a18      	ldr	r2, [pc, #96]	@ (8003ffc <prvAddNewTaskToReadyList+0xc8>)
 8003f9c:	6013      	str	r3, [r2, #0]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fa2:	4613      	mov	r3, r2
 8003fa4:	009b      	lsls	r3, r3, #2
 8003fa6:	4413      	add	r3, r2
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	4a15      	ldr	r2, [pc, #84]	@ (8004000 <prvAddNewTaskToReadyList+0xcc>)
 8003fac:	441a      	add	r2, r3
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	3304      	adds	r3, #4
 8003fb2:	4619      	mov	r1, r3
 8003fb4:	4610      	mov	r0, r2
 8003fb6:	f7ff fe12 	bl	8003bde <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003fba:	f000 fd27 	bl	8004a0c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003fbe:	4b0d      	ldr	r3, [pc, #52]	@ (8003ff4 <prvAddNewTaskToReadyList+0xc0>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d00e      	beq.n	8003fe4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003fc6:	4b0a      	ldr	r3, [pc, #40]	@ (8003ff0 <prvAddNewTaskToReadyList+0xbc>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d207      	bcs.n	8003fe4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003fd4:	4b0b      	ldr	r3, [pc, #44]	@ (8004004 <prvAddNewTaskToReadyList+0xd0>)
 8003fd6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003fda:	601a      	str	r2, [r3, #0]
 8003fdc:	f3bf 8f4f 	dsb	sy
 8003fe0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003fe4:	bf00      	nop
 8003fe6:	3708      	adds	r7, #8
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}
 8003fec:	200004a4 	.word	0x200004a4
 8003ff0:	200003a4 	.word	0x200003a4
 8003ff4:	200004b0 	.word	0x200004b0
 8003ff8:	200004c0 	.word	0x200004c0
 8003ffc:	200004ac 	.word	0x200004ac
 8004000:	200003a8 	.word	0x200003a8
 8004004:	e000ed04 	.word	0xe000ed04

08004008 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004008:	b580      	push	{r7, lr}
 800400a:	b084      	sub	sp, #16
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004010:	2300      	movs	r3, #0
 8004012:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d018      	beq.n	800404c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800401a:	4b14      	ldr	r3, [pc, #80]	@ (800406c <vTaskDelay+0x64>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d00b      	beq.n	800403a <vTaskDelay+0x32>
	__asm volatile
 8004022:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004026:	f383 8811 	msr	BASEPRI, r3
 800402a:	f3bf 8f6f 	isb	sy
 800402e:	f3bf 8f4f 	dsb	sy
 8004032:	60bb      	str	r3, [r7, #8]
}
 8004034:	bf00      	nop
 8004036:	bf00      	nop
 8004038:	e7fd      	b.n	8004036 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800403a:	f000 f87d 	bl	8004138 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800403e:	2100      	movs	r1, #0
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	f000 fb1b 	bl	800467c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004046:	f000 f885 	bl	8004154 <xTaskResumeAll>
 800404a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d107      	bne.n	8004062 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004052:	4b07      	ldr	r3, [pc, #28]	@ (8004070 <vTaskDelay+0x68>)
 8004054:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004058:	601a      	str	r2, [r3, #0]
 800405a:	f3bf 8f4f 	dsb	sy
 800405e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004062:	bf00      	nop
 8004064:	3710      	adds	r7, #16
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}
 800406a:	bf00      	nop
 800406c:	200004cc 	.word	0x200004cc
 8004070:	e000ed04 	.word	0xe000ed04

08004074 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b08a      	sub	sp, #40	@ 0x28
 8004078:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800407a:	2300      	movs	r3, #0
 800407c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800407e:	2300      	movs	r3, #0
 8004080:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004082:	463a      	mov	r2, r7
 8004084:	1d39      	adds	r1, r7, #4
 8004086:	f107 0308 	add.w	r3, r7, #8
 800408a:	4618      	mov	r0, r3
 800408c:	f7fc f8e0 	bl	8000250 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004090:	6839      	ldr	r1, [r7, #0]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	68ba      	ldr	r2, [r7, #8]
 8004096:	9202      	str	r2, [sp, #8]
 8004098:	9301      	str	r3, [sp, #4]
 800409a:	2300      	movs	r3, #0
 800409c:	9300      	str	r3, [sp, #0]
 800409e:	2300      	movs	r3, #0
 80040a0:	460a      	mov	r2, r1
 80040a2:	491f      	ldr	r1, [pc, #124]	@ (8004120 <vTaskStartScheduler+0xac>)
 80040a4:	481f      	ldr	r0, [pc, #124]	@ (8004124 <vTaskStartScheduler+0xb0>)
 80040a6:	f7ff fe21 	bl	8003cec <xTaskCreateStatic>
 80040aa:	4603      	mov	r3, r0
 80040ac:	4a1e      	ldr	r2, [pc, #120]	@ (8004128 <vTaskStartScheduler+0xb4>)
 80040ae:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80040b0:	4b1d      	ldr	r3, [pc, #116]	@ (8004128 <vTaskStartScheduler+0xb4>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d002      	beq.n	80040be <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80040b8:	2301      	movs	r3, #1
 80040ba:	617b      	str	r3, [r7, #20]
 80040bc:	e001      	b.n	80040c2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80040be:	2300      	movs	r3, #0
 80040c0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d116      	bne.n	80040f6 <vTaskStartScheduler+0x82>
	__asm volatile
 80040c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040cc:	f383 8811 	msr	BASEPRI, r3
 80040d0:	f3bf 8f6f 	isb	sy
 80040d4:	f3bf 8f4f 	dsb	sy
 80040d8:	613b      	str	r3, [r7, #16]
}
 80040da:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80040dc:	4b13      	ldr	r3, [pc, #76]	@ (800412c <vTaskStartScheduler+0xb8>)
 80040de:	f04f 32ff 	mov.w	r2, #4294967295
 80040e2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80040e4:	4b12      	ldr	r3, [pc, #72]	@ (8004130 <vTaskStartScheduler+0xbc>)
 80040e6:	2201      	movs	r2, #1
 80040e8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80040ea:	4b12      	ldr	r3, [pc, #72]	@ (8004134 <vTaskStartScheduler+0xc0>)
 80040ec:	2200      	movs	r2, #0
 80040ee:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80040f0:	f000 fbb6 	bl	8004860 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80040f4:	e00f      	b.n	8004116 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040fc:	d10b      	bne.n	8004116 <vTaskStartScheduler+0xa2>
	__asm volatile
 80040fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004102:	f383 8811 	msr	BASEPRI, r3
 8004106:	f3bf 8f6f 	isb	sy
 800410a:	f3bf 8f4f 	dsb	sy
 800410e:	60fb      	str	r3, [r7, #12]
}
 8004110:	bf00      	nop
 8004112:	bf00      	nop
 8004114:	e7fd      	b.n	8004112 <vTaskStartScheduler+0x9e>
}
 8004116:	bf00      	nop
 8004118:	3718      	adds	r7, #24
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}
 800411e:	bf00      	nop
 8004120:	0800500c 	.word	0x0800500c
 8004124:	080044c5 	.word	0x080044c5
 8004128:	200004c8 	.word	0x200004c8
 800412c:	200004c4 	.word	0x200004c4
 8004130:	200004b0 	.word	0x200004b0
 8004134:	200004a8 	.word	0x200004a8

08004138 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004138:	b480      	push	{r7}
 800413a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800413c:	4b04      	ldr	r3, [pc, #16]	@ (8004150 <vTaskSuspendAll+0x18>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	3301      	adds	r3, #1
 8004142:	4a03      	ldr	r2, [pc, #12]	@ (8004150 <vTaskSuspendAll+0x18>)
 8004144:	6013      	str	r3, [r2, #0]
}
 8004146:	bf00      	nop
 8004148:	46bd      	mov	sp, r7
 800414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414e:	4770      	bx	lr
 8004150:	200004cc 	.word	0x200004cc

08004154 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b084      	sub	sp, #16
 8004158:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800415a:	2300      	movs	r3, #0
 800415c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800415e:	2300      	movs	r3, #0
 8004160:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004162:	4b42      	ldr	r3, [pc, #264]	@ (800426c <xTaskResumeAll+0x118>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d10b      	bne.n	8004182 <xTaskResumeAll+0x2e>
	__asm volatile
 800416a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800416e:	f383 8811 	msr	BASEPRI, r3
 8004172:	f3bf 8f6f 	isb	sy
 8004176:	f3bf 8f4f 	dsb	sy
 800417a:	603b      	str	r3, [r7, #0]
}
 800417c:	bf00      	nop
 800417e:	bf00      	nop
 8004180:	e7fd      	b.n	800417e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004182:	f000 fc11 	bl	80049a8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004186:	4b39      	ldr	r3, [pc, #228]	@ (800426c <xTaskResumeAll+0x118>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	3b01      	subs	r3, #1
 800418c:	4a37      	ldr	r2, [pc, #220]	@ (800426c <xTaskResumeAll+0x118>)
 800418e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004190:	4b36      	ldr	r3, [pc, #216]	@ (800426c <xTaskResumeAll+0x118>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d161      	bne.n	800425c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004198:	4b35      	ldr	r3, [pc, #212]	@ (8004270 <xTaskResumeAll+0x11c>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d05d      	beq.n	800425c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80041a0:	e02e      	b.n	8004200 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80041a2:	4b34      	ldr	r3, [pc, #208]	@ (8004274 <xTaskResumeAll+0x120>)
 80041a4:	68db      	ldr	r3, [r3, #12]
 80041a6:	68db      	ldr	r3, [r3, #12]
 80041a8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	3318      	adds	r3, #24
 80041ae:	4618      	mov	r0, r3
 80041b0:	f7ff fd72 	bl	8003c98 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	3304      	adds	r3, #4
 80041b8:	4618      	mov	r0, r3
 80041ba:	f7ff fd6d 	bl	8003c98 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041c2:	2201      	movs	r2, #1
 80041c4:	409a      	lsls	r2, r3
 80041c6:	4b2c      	ldr	r3, [pc, #176]	@ (8004278 <xTaskResumeAll+0x124>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4313      	orrs	r3, r2
 80041cc:	4a2a      	ldr	r2, [pc, #168]	@ (8004278 <xTaskResumeAll+0x124>)
 80041ce:	6013      	str	r3, [r2, #0]
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041d4:	4613      	mov	r3, r2
 80041d6:	009b      	lsls	r3, r3, #2
 80041d8:	4413      	add	r3, r2
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	4a27      	ldr	r2, [pc, #156]	@ (800427c <xTaskResumeAll+0x128>)
 80041de:	441a      	add	r2, r3
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	3304      	adds	r3, #4
 80041e4:	4619      	mov	r1, r3
 80041e6:	4610      	mov	r0, r2
 80041e8:	f7ff fcf9 	bl	8003bde <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041f0:	4b23      	ldr	r3, [pc, #140]	@ (8004280 <xTaskResumeAll+0x12c>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041f6:	429a      	cmp	r2, r3
 80041f8:	d302      	bcc.n	8004200 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80041fa:	4b22      	ldr	r3, [pc, #136]	@ (8004284 <xTaskResumeAll+0x130>)
 80041fc:	2201      	movs	r2, #1
 80041fe:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004200:	4b1c      	ldr	r3, [pc, #112]	@ (8004274 <xTaskResumeAll+0x120>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d1cc      	bne.n	80041a2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d001      	beq.n	8004212 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800420e:	f000 fa0f 	bl	8004630 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004212:	4b1d      	ldr	r3, [pc, #116]	@ (8004288 <xTaskResumeAll+0x134>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d010      	beq.n	8004240 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800421e:	f000 f837 	bl	8004290 <xTaskIncrementTick>
 8004222:	4603      	mov	r3, r0
 8004224:	2b00      	cmp	r3, #0
 8004226:	d002      	beq.n	800422e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004228:	4b16      	ldr	r3, [pc, #88]	@ (8004284 <xTaskResumeAll+0x130>)
 800422a:	2201      	movs	r2, #1
 800422c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	3b01      	subs	r3, #1
 8004232:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d1f1      	bne.n	800421e <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800423a:	4b13      	ldr	r3, [pc, #76]	@ (8004288 <xTaskResumeAll+0x134>)
 800423c:	2200      	movs	r2, #0
 800423e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004240:	4b10      	ldr	r3, [pc, #64]	@ (8004284 <xTaskResumeAll+0x130>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d009      	beq.n	800425c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004248:	2301      	movs	r3, #1
 800424a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800424c:	4b0f      	ldr	r3, [pc, #60]	@ (800428c <xTaskResumeAll+0x138>)
 800424e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004252:	601a      	str	r2, [r3, #0]
 8004254:	f3bf 8f4f 	dsb	sy
 8004258:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800425c:	f000 fbd6 	bl	8004a0c <vPortExitCritical>

	return xAlreadyYielded;
 8004260:	68bb      	ldr	r3, [r7, #8]
}
 8004262:	4618      	mov	r0, r3
 8004264:	3710      	adds	r7, #16
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}
 800426a:	bf00      	nop
 800426c:	200004cc 	.word	0x200004cc
 8004270:	200004a4 	.word	0x200004a4
 8004274:	20000464 	.word	0x20000464
 8004278:	200004ac 	.word	0x200004ac
 800427c:	200003a8 	.word	0x200003a8
 8004280:	200003a4 	.word	0x200003a4
 8004284:	200004b8 	.word	0x200004b8
 8004288:	200004b4 	.word	0x200004b4
 800428c:	e000ed04 	.word	0xe000ed04

08004290 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b086      	sub	sp, #24
 8004294:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004296:	2300      	movs	r3, #0
 8004298:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800429a:	4b51      	ldr	r3, [pc, #324]	@ (80043e0 <xTaskIncrementTick+0x150>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	f040 808e 	bne.w	80043c0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80042a4:	4b4f      	ldr	r3, [pc, #316]	@ (80043e4 <xTaskIncrementTick+0x154>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	3301      	adds	r3, #1
 80042aa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80042ac:	4a4d      	ldr	r2, [pc, #308]	@ (80043e4 <xTaskIncrementTick+0x154>)
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d121      	bne.n	80042fc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80042b8:	4b4b      	ldr	r3, [pc, #300]	@ (80043e8 <xTaskIncrementTick+0x158>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d00b      	beq.n	80042da <xTaskIncrementTick+0x4a>
	__asm volatile
 80042c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042c6:	f383 8811 	msr	BASEPRI, r3
 80042ca:	f3bf 8f6f 	isb	sy
 80042ce:	f3bf 8f4f 	dsb	sy
 80042d2:	603b      	str	r3, [r7, #0]
}
 80042d4:	bf00      	nop
 80042d6:	bf00      	nop
 80042d8:	e7fd      	b.n	80042d6 <xTaskIncrementTick+0x46>
 80042da:	4b43      	ldr	r3, [pc, #268]	@ (80043e8 <xTaskIncrementTick+0x158>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	60fb      	str	r3, [r7, #12]
 80042e0:	4b42      	ldr	r3, [pc, #264]	@ (80043ec <xTaskIncrementTick+0x15c>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a40      	ldr	r2, [pc, #256]	@ (80043e8 <xTaskIncrementTick+0x158>)
 80042e6:	6013      	str	r3, [r2, #0]
 80042e8:	4a40      	ldr	r2, [pc, #256]	@ (80043ec <xTaskIncrementTick+0x15c>)
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	6013      	str	r3, [r2, #0]
 80042ee:	4b40      	ldr	r3, [pc, #256]	@ (80043f0 <xTaskIncrementTick+0x160>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	3301      	adds	r3, #1
 80042f4:	4a3e      	ldr	r2, [pc, #248]	@ (80043f0 <xTaskIncrementTick+0x160>)
 80042f6:	6013      	str	r3, [r2, #0]
 80042f8:	f000 f99a 	bl	8004630 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80042fc:	4b3d      	ldr	r3, [pc, #244]	@ (80043f4 <xTaskIncrementTick+0x164>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	693a      	ldr	r2, [r7, #16]
 8004302:	429a      	cmp	r2, r3
 8004304:	d34d      	bcc.n	80043a2 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004306:	4b38      	ldr	r3, [pc, #224]	@ (80043e8 <xTaskIncrementTick+0x158>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d101      	bne.n	8004314 <xTaskIncrementTick+0x84>
 8004310:	2301      	movs	r3, #1
 8004312:	e000      	b.n	8004316 <xTaskIncrementTick+0x86>
 8004314:	2300      	movs	r3, #0
 8004316:	2b00      	cmp	r3, #0
 8004318:	d004      	beq.n	8004324 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800431a:	4b36      	ldr	r3, [pc, #216]	@ (80043f4 <xTaskIncrementTick+0x164>)
 800431c:	f04f 32ff 	mov.w	r2, #4294967295
 8004320:	601a      	str	r2, [r3, #0]
					break;
 8004322:	e03e      	b.n	80043a2 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004324:	4b30      	ldr	r3, [pc, #192]	@ (80043e8 <xTaskIncrementTick+0x158>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	68db      	ldr	r3, [r3, #12]
 800432a:	68db      	ldr	r3, [r3, #12]
 800432c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004334:	693a      	ldr	r2, [r7, #16]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	429a      	cmp	r2, r3
 800433a:	d203      	bcs.n	8004344 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800433c:	4a2d      	ldr	r2, [pc, #180]	@ (80043f4 <xTaskIncrementTick+0x164>)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6013      	str	r3, [r2, #0]
						break;
 8004342:	e02e      	b.n	80043a2 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	3304      	adds	r3, #4
 8004348:	4618      	mov	r0, r3
 800434a:	f7ff fca5 	bl	8003c98 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004352:	2b00      	cmp	r3, #0
 8004354:	d004      	beq.n	8004360 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	3318      	adds	r3, #24
 800435a:	4618      	mov	r0, r3
 800435c:	f7ff fc9c 	bl	8003c98 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004364:	2201      	movs	r2, #1
 8004366:	409a      	lsls	r2, r3
 8004368:	4b23      	ldr	r3, [pc, #140]	@ (80043f8 <xTaskIncrementTick+0x168>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4313      	orrs	r3, r2
 800436e:	4a22      	ldr	r2, [pc, #136]	@ (80043f8 <xTaskIncrementTick+0x168>)
 8004370:	6013      	str	r3, [r2, #0]
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004376:	4613      	mov	r3, r2
 8004378:	009b      	lsls	r3, r3, #2
 800437a:	4413      	add	r3, r2
 800437c:	009b      	lsls	r3, r3, #2
 800437e:	4a1f      	ldr	r2, [pc, #124]	@ (80043fc <xTaskIncrementTick+0x16c>)
 8004380:	441a      	add	r2, r3
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	3304      	adds	r3, #4
 8004386:	4619      	mov	r1, r3
 8004388:	4610      	mov	r0, r2
 800438a:	f7ff fc28 	bl	8003bde <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004392:	4b1b      	ldr	r3, [pc, #108]	@ (8004400 <xTaskIncrementTick+0x170>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004398:	429a      	cmp	r2, r3
 800439a:	d3b4      	bcc.n	8004306 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800439c:	2301      	movs	r3, #1
 800439e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80043a0:	e7b1      	b.n	8004306 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80043a2:	4b17      	ldr	r3, [pc, #92]	@ (8004400 <xTaskIncrementTick+0x170>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043a8:	4914      	ldr	r1, [pc, #80]	@ (80043fc <xTaskIncrementTick+0x16c>)
 80043aa:	4613      	mov	r3, r2
 80043ac:	009b      	lsls	r3, r3, #2
 80043ae:	4413      	add	r3, r2
 80043b0:	009b      	lsls	r3, r3, #2
 80043b2:	440b      	add	r3, r1
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	2b01      	cmp	r3, #1
 80043b8:	d907      	bls.n	80043ca <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80043ba:	2301      	movs	r3, #1
 80043bc:	617b      	str	r3, [r7, #20]
 80043be:	e004      	b.n	80043ca <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80043c0:	4b10      	ldr	r3, [pc, #64]	@ (8004404 <xTaskIncrementTick+0x174>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	3301      	adds	r3, #1
 80043c6:	4a0f      	ldr	r2, [pc, #60]	@ (8004404 <xTaskIncrementTick+0x174>)
 80043c8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80043ca:	4b0f      	ldr	r3, [pc, #60]	@ (8004408 <xTaskIncrementTick+0x178>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d001      	beq.n	80043d6 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 80043d2:	2301      	movs	r3, #1
 80043d4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80043d6:	697b      	ldr	r3, [r7, #20]
}
 80043d8:	4618      	mov	r0, r3
 80043da:	3718      	adds	r7, #24
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}
 80043e0:	200004cc 	.word	0x200004cc
 80043e4:	200004a8 	.word	0x200004a8
 80043e8:	2000045c 	.word	0x2000045c
 80043ec:	20000460 	.word	0x20000460
 80043f0:	200004bc 	.word	0x200004bc
 80043f4:	200004c4 	.word	0x200004c4
 80043f8:	200004ac 	.word	0x200004ac
 80043fc:	200003a8 	.word	0x200003a8
 8004400:	200003a4 	.word	0x200003a4
 8004404:	200004b4 	.word	0x200004b4
 8004408:	200004b8 	.word	0x200004b8

0800440c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800440c:	b480      	push	{r7}
 800440e:	b087      	sub	sp, #28
 8004410:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004412:	4b27      	ldr	r3, [pc, #156]	@ (80044b0 <vTaskSwitchContext+0xa4>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d003      	beq.n	8004422 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800441a:	4b26      	ldr	r3, [pc, #152]	@ (80044b4 <vTaskSwitchContext+0xa8>)
 800441c:	2201      	movs	r2, #1
 800441e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004420:	e040      	b.n	80044a4 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8004422:	4b24      	ldr	r3, [pc, #144]	@ (80044b4 <vTaskSwitchContext+0xa8>)
 8004424:	2200      	movs	r2, #0
 8004426:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004428:	4b23      	ldr	r3, [pc, #140]	@ (80044b8 <vTaskSwitchContext+0xac>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	fab3 f383 	clz	r3, r3
 8004434:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004436:	7afb      	ldrb	r3, [r7, #11]
 8004438:	f1c3 031f 	rsb	r3, r3, #31
 800443c:	617b      	str	r3, [r7, #20]
 800443e:	491f      	ldr	r1, [pc, #124]	@ (80044bc <vTaskSwitchContext+0xb0>)
 8004440:	697a      	ldr	r2, [r7, #20]
 8004442:	4613      	mov	r3, r2
 8004444:	009b      	lsls	r3, r3, #2
 8004446:	4413      	add	r3, r2
 8004448:	009b      	lsls	r3, r3, #2
 800444a:	440b      	add	r3, r1
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d10b      	bne.n	800446a <vTaskSwitchContext+0x5e>
	__asm volatile
 8004452:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004456:	f383 8811 	msr	BASEPRI, r3
 800445a:	f3bf 8f6f 	isb	sy
 800445e:	f3bf 8f4f 	dsb	sy
 8004462:	607b      	str	r3, [r7, #4]
}
 8004464:	bf00      	nop
 8004466:	bf00      	nop
 8004468:	e7fd      	b.n	8004466 <vTaskSwitchContext+0x5a>
 800446a:	697a      	ldr	r2, [r7, #20]
 800446c:	4613      	mov	r3, r2
 800446e:	009b      	lsls	r3, r3, #2
 8004470:	4413      	add	r3, r2
 8004472:	009b      	lsls	r3, r3, #2
 8004474:	4a11      	ldr	r2, [pc, #68]	@ (80044bc <vTaskSwitchContext+0xb0>)
 8004476:	4413      	add	r3, r2
 8004478:	613b      	str	r3, [r7, #16]
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	685a      	ldr	r2, [r3, #4]
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	605a      	str	r2, [r3, #4]
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	685a      	ldr	r2, [r3, #4]
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	3308      	adds	r3, #8
 800448c:	429a      	cmp	r2, r3
 800448e:	d104      	bne.n	800449a <vTaskSwitchContext+0x8e>
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	685a      	ldr	r2, [r3, #4]
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	605a      	str	r2, [r3, #4]
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	68db      	ldr	r3, [r3, #12]
 80044a0:	4a07      	ldr	r2, [pc, #28]	@ (80044c0 <vTaskSwitchContext+0xb4>)
 80044a2:	6013      	str	r3, [r2, #0]
}
 80044a4:	bf00      	nop
 80044a6:	371c      	adds	r7, #28
 80044a8:	46bd      	mov	sp, r7
 80044aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ae:	4770      	bx	lr
 80044b0:	200004cc 	.word	0x200004cc
 80044b4:	200004b8 	.word	0x200004b8
 80044b8:	200004ac 	.word	0x200004ac
 80044bc:	200003a8 	.word	0x200003a8
 80044c0:	200003a4 	.word	0x200003a4

080044c4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b082      	sub	sp, #8
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80044cc:	f000 f852 	bl	8004574 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80044d0:	4b06      	ldr	r3, [pc, #24]	@ (80044ec <prvIdleTask+0x28>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d9f9      	bls.n	80044cc <prvIdleTask+0x8>
			{
				taskYIELD();
 80044d8:	4b05      	ldr	r3, [pc, #20]	@ (80044f0 <prvIdleTask+0x2c>)
 80044da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80044de:	601a      	str	r2, [r3, #0]
 80044e0:	f3bf 8f4f 	dsb	sy
 80044e4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80044e8:	e7f0      	b.n	80044cc <prvIdleTask+0x8>
 80044ea:	bf00      	nop
 80044ec:	200003a8 	.word	0x200003a8
 80044f0:	e000ed04 	.word	0xe000ed04

080044f4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b082      	sub	sp, #8
 80044f8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80044fa:	2300      	movs	r3, #0
 80044fc:	607b      	str	r3, [r7, #4]
 80044fe:	e00c      	b.n	800451a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004500:	687a      	ldr	r2, [r7, #4]
 8004502:	4613      	mov	r3, r2
 8004504:	009b      	lsls	r3, r3, #2
 8004506:	4413      	add	r3, r2
 8004508:	009b      	lsls	r3, r3, #2
 800450a:	4a12      	ldr	r2, [pc, #72]	@ (8004554 <prvInitialiseTaskLists+0x60>)
 800450c:	4413      	add	r3, r2
 800450e:	4618      	mov	r0, r3
 8004510:	f7ff fb38 	bl	8003b84 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	3301      	adds	r3, #1
 8004518:	607b      	str	r3, [r7, #4]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2b06      	cmp	r3, #6
 800451e:	d9ef      	bls.n	8004500 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004520:	480d      	ldr	r0, [pc, #52]	@ (8004558 <prvInitialiseTaskLists+0x64>)
 8004522:	f7ff fb2f 	bl	8003b84 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004526:	480d      	ldr	r0, [pc, #52]	@ (800455c <prvInitialiseTaskLists+0x68>)
 8004528:	f7ff fb2c 	bl	8003b84 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800452c:	480c      	ldr	r0, [pc, #48]	@ (8004560 <prvInitialiseTaskLists+0x6c>)
 800452e:	f7ff fb29 	bl	8003b84 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004532:	480c      	ldr	r0, [pc, #48]	@ (8004564 <prvInitialiseTaskLists+0x70>)
 8004534:	f7ff fb26 	bl	8003b84 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004538:	480b      	ldr	r0, [pc, #44]	@ (8004568 <prvInitialiseTaskLists+0x74>)
 800453a:	f7ff fb23 	bl	8003b84 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800453e:	4b0b      	ldr	r3, [pc, #44]	@ (800456c <prvInitialiseTaskLists+0x78>)
 8004540:	4a05      	ldr	r2, [pc, #20]	@ (8004558 <prvInitialiseTaskLists+0x64>)
 8004542:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004544:	4b0a      	ldr	r3, [pc, #40]	@ (8004570 <prvInitialiseTaskLists+0x7c>)
 8004546:	4a05      	ldr	r2, [pc, #20]	@ (800455c <prvInitialiseTaskLists+0x68>)
 8004548:	601a      	str	r2, [r3, #0]
}
 800454a:	bf00      	nop
 800454c:	3708      	adds	r7, #8
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}
 8004552:	bf00      	nop
 8004554:	200003a8 	.word	0x200003a8
 8004558:	20000434 	.word	0x20000434
 800455c:	20000448 	.word	0x20000448
 8004560:	20000464 	.word	0x20000464
 8004564:	20000478 	.word	0x20000478
 8004568:	20000490 	.word	0x20000490
 800456c:	2000045c 	.word	0x2000045c
 8004570:	20000460 	.word	0x20000460

08004574 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b082      	sub	sp, #8
 8004578:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800457a:	e019      	b.n	80045b0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800457c:	f000 fa14 	bl	80049a8 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004580:	4b10      	ldr	r3, [pc, #64]	@ (80045c4 <prvCheckTasksWaitingTermination+0x50>)
 8004582:	68db      	ldr	r3, [r3, #12]
 8004584:	68db      	ldr	r3, [r3, #12]
 8004586:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	3304      	adds	r3, #4
 800458c:	4618      	mov	r0, r3
 800458e:	f7ff fb83 	bl	8003c98 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004592:	4b0d      	ldr	r3, [pc, #52]	@ (80045c8 <prvCheckTasksWaitingTermination+0x54>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	3b01      	subs	r3, #1
 8004598:	4a0b      	ldr	r2, [pc, #44]	@ (80045c8 <prvCheckTasksWaitingTermination+0x54>)
 800459a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800459c:	4b0b      	ldr	r3, [pc, #44]	@ (80045cc <prvCheckTasksWaitingTermination+0x58>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	3b01      	subs	r3, #1
 80045a2:	4a0a      	ldr	r2, [pc, #40]	@ (80045cc <prvCheckTasksWaitingTermination+0x58>)
 80045a4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80045a6:	f000 fa31 	bl	8004a0c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f000 f810 	bl	80045d0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80045b0:	4b06      	ldr	r3, [pc, #24]	@ (80045cc <prvCheckTasksWaitingTermination+0x58>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d1e1      	bne.n	800457c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80045b8:	bf00      	nop
 80045ba:	bf00      	nop
 80045bc:	3708      	adds	r7, #8
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}
 80045c2:	bf00      	nop
 80045c4:	20000478 	.word	0x20000478
 80045c8:	200004a4 	.word	0x200004a4
 80045cc:	2000048c 	.word	0x2000048c

080045d0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b084      	sub	sp, #16
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d108      	bne.n	80045f4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045e6:	4618      	mov	r0, r3
 80045e8:	f000 fb86 	bl	8004cf8 <vPortFree>
				vPortFree( pxTCB );
 80045ec:	6878      	ldr	r0, [r7, #4]
 80045ee:	f000 fb83 	bl	8004cf8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80045f2:	e019      	b.n	8004628 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d103      	bne.n	8004606 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f000 fb7a 	bl	8004cf8 <vPortFree>
	}
 8004604:	e010      	b.n	8004628 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800460c:	2b02      	cmp	r3, #2
 800460e:	d00b      	beq.n	8004628 <prvDeleteTCB+0x58>
	__asm volatile
 8004610:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004614:	f383 8811 	msr	BASEPRI, r3
 8004618:	f3bf 8f6f 	isb	sy
 800461c:	f3bf 8f4f 	dsb	sy
 8004620:	60fb      	str	r3, [r7, #12]
}
 8004622:	bf00      	nop
 8004624:	bf00      	nop
 8004626:	e7fd      	b.n	8004624 <prvDeleteTCB+0x54>
	}
 8004628:	bf00      	nop
 800462a:	3710      	adds	r7, #16
 800462c:	46bd      	mov	sp, r7
 800462e:	bd80      	pop	{r7, pc}

08004630 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004630:	b480      	push	{r7}
 8004632:	b083      	sub	sp, #12
 8004634:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004636:	4b0f      	ldr	r3, [pc, #60]	@ (8004674 <prvResetNextTaskUnblockTime+0x44>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d101      	bne.n	8004644 <prvResetNextTaskUnblockTime+0x14>
 8004640:	2301      	movs	r3, #1
 8004642:	e000      	b.n	8004646 <prvResetNextTaskUnblockTime+0x16>
 8004644:	2300      	movs	r3, #0
 8004646:	2b00      	cmp	r3, #0
 8004648:	d004      	beq.n	8004654 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800464a:	4b0b      	ldr	r3, [pc, #44]	@ (8004678 <prvResetNextTaskUnblockTime+0x48>)
 800464c:	f04f 32ff 	mov.w	r2, #4294967295
 8004650:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004652:	e008      	b.n	8004666 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004654:	4b07      	ldr	r3, [pc, #28]	@ (8004674 <prvResetNextTaskUnblockTime+0x44>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	68db      	ldr	r3, [r3, #12]
 800465a:	68db      	ldr	r3, [r3, #12]
 800465c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	4a05      	ldr	r2, [pc, #20]	@ (8004678 <prvResetNextTaskUnblockTime+0x48>)
 8004664:	6013      	str	r3, [r2, #0]
}
 8004666:	bf00      	nop
 8004668:	370c      	adds	r7, #12
 800466a:	46bd      	mov	sp, r7
 800466c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004670:	4770      	bx	lr
 8004672:	bf00      	nop
 8004674:	2000045c 	.word	0x2000045c
 8004678:	200004c4 	.word	0x200004c4

0800467c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b084      	sub	sp, #16
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
 8004684:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004686:	4b29      	ldr	r3, [pc, #164]	@ (800472c <prvAddCurrentTaskToDelayedList+0xb0>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800468c:	4b28      	ldr	r3, [pc, #160]	@ (8004730 <prvAddCurrentTaskToDelayedList+0xb4>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	3304      	adds	r3, #4
 8004692:	4618      	mov	r0, r3
 8004694:	f7ff fb00 	bl	8003c98 <uxListRemove>
 8004698:	4603      	mov	r3, r0
 800469a:	2b00      	cmp	r3, #0
 800469c:	d10b      	bne.n	80046b6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800469e:	4b24      	ldr	r3, [pc, #144]	@ (8004730 <prvAddCurrentTaskToDelayedList+0xb4>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046a4:	2201      	movs	r2, #1
 80046a6:	fa02 f303 	lsl.w	r3, r2, r3
 80046aa:	43da      	mvns	r2, r3
 80046ac:	4b21      	ldr	r3, [pc, #132]	@ (8004734 <prvAddCurrentTaskToDelayedList+0xb8>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4013      	ands	r3, r2
 80046b2:	4a20      	ldr	r2, [pc, #128]	@ (8004734 <prvAddCurrentTaskToDelayedList+0xb8>)
 80046b4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046bc:	d10a      	bne.n	80046d4 <prvAddCurrentTaskToDelayedList+0x58>
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d007      	beq.n	80046d4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80046c4:	4b1a      	ldr	r3, [pc, #104]	@ (8004730 <prvAddCurrentTaskToDelayedList+0xb4>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	3304      	adds	r3, #4
 80046ca:	4619      	mov	r1, r3
 80046cc:	481a      	ldr	r0, [pc, #104]	@ (8004738 <prvAddCurrentTaskToDelayedList+0xbc>)
 80046ce:	f7ff fa86 	bl	8003bde <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80046d2:	e026      	b.n	8004722 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80046d4:	68fa      	ldr	r2, [r7, #12]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	4413      	add	r3, r2
 80046da:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80046dc:	4b14      	ldr	r3, [pc, #80]	@ (8004730 <prvAddCurrentTaskToDelayedList+0xb4>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	68ba      	ldr	r2, [r7, #8]
 80046e2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80046e4:	68ba      	ldr	r2, [r7, #8]
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	429a      	cmp	r2, r3
 80046ea:	d209      	bcs.n	8004700 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80046ec:	4b13      	ldr	r3, [pc, #76]	@ (800473c <prvAddCurrentTaskToDelayedList+0xc0>)
 80046ee:	681a      	ldr	r2, [r3, #0]
 80046f0:	4b0f      	ldr	r3, [pc, #60]	@ (8004730 <prvAddCurrentTaskToDelayedList+0xb4>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	3304      	adds	r3, #4
 80046f6:	4619      	mov	r1, r3
 80046f8:	4610      	mov	r0, r2
 80046fa:	f7ff fa94 	bl	8003c26 <vListInsert>
}
 80046fe:	e010      	b.n	8004722 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004700:	4b0f      	ldr	r3, [pc, #60]	@ (8004740 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004702:	681a      	ldr	r2, [r3, #0]
 8004704:	4b0a      	ldr	r3, [pc, #40]	@ (8004730 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	3304      	adds	r3, #4
 800470a:	4619      	mov	r1, r3
 800470c:	4610      	mov	r0, r2
 800470e:	f7ff fa8a 	bl	8003c26 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004712:	4b0c      	ldr	r3, [pc, #48]	@ (8004744 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	68ba      	ldr	r2, [r7, #8]
 8004718:	429a      	cmp	r2, r3
 800471a:	d202      	bcs.n	8004722 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800471c:	4a09      	ldr	r2, [pc, #36]	@ (8004744 <prvAddCurrentTaskToDelayedList+0xc8>)
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	6013      	str	r3, [r2, #0]
}
 8004722:	bf00      	nop
 8004724:	3710      	adds	r7, #16
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}
 800472a:	bf00      	nop
 800472c:	200004a8 	.word	0x200004a8
 8004730:	200003a4 	.word	0x200003a4
 8004734:	200004ac 	.word	0x200004ac
 8004738:	20000490 	.word	0x20000490
 800473c:	20000460 	.word	0x20000460
 8004740:	2000045c 	.word	0x2000045c
 8004744:	200004c4 	.word	0x200004c4

08004748 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004748:	b480      	push	{r7}
 800474a:	b085      	sub	sp, #20
 800474c:	af00      	add	r7, sp, #0
 800474e:	60f8      	str	r0, [r7, #12]
 8004750:	60b9      	str	r1, [r7, #8]
 8004752:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	3b04      	subs	r3, #4
 8004758:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004760:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	3b04      	subs	r3, #4
 8004766:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	f023 0201 	bic.w	r2, r3, #1
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	3b04      	subs	r3, #4
 8004776:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004778:	4a0c      	ldr	r2, [pc, #48]	@ (80047ac <pxPortInitialiseStack+0x64>)
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	3b14      	subs	r3, #20
 8004782:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004784:	687a      	ldr	r2, [r7, #4]
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	3b04      	subs	r3, #4
 800478e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	f06f 0202 	mvn.w	r2, #2
 8004796:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	3b20      	subs	r3, #32
 800479c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800479e:	68fb      	ldr	r3, [r7, #12]
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	3714      	adds	r7, #20
 80047a4:	46bd      	mov	sp, r7
 80047a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047aa:	4770      	bx	lr
 80047ac:	080047b1 	.word	0x080047b1

080047b0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80047b0:	b480      	push	{r7}
 80047b2:	b085      	sub	sp, #20
 80047b4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80047b6:	2300      	movs	r3, #0
 80047b8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80047ba:	4b13      	ldr	r3, [pc, #76]	@ (8004808 <prvTaskExitError+0x58>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047c2:	d00b      	beq.n	80047dc <prvTaskExitError+0x2c>
	__asm volatile
 80047c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047c8:	f383 8811 	msr	BASEPRI, r3
 80047cc:	f3bf 8f6f 	isb	sy
 80047d0:	f3bf 8f4f 	dsb	sy
 80047d4:	60fb      	str	r3, [r7, #12]
}
 80047d6:	bf00      	nop
 80047d8:	bf00      	nop
 80047da:	e7fd      	b.n	80047d8 <prvTaskExitError+0x28>
	__asm volatile
 80047dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047e0:	f383 8811 	msr	BASEPRI, r3
 80047e4:	f3bf 8f6f 	isb	sy
 80047e8:	f3bf 8f4f 	dsb	sy
 80047ec:	60bb      	str	r3, [r7, #8]
}
 80047ee:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80047f0:	bf00      	nop
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d0fc      	beq.n	80047f2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80047f8:	bf00      	nop
 80047fa:	bf00      	nop
 80047fc:	3714      	adds	r7, #20
 80047fe:	46bd      	mov	sp, r7
 8004800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004804:	4770      	bx	lr
 8004806:	bf00      	nop
 8004808:	2000000c 	.word	0x2000000c
 800480c:	00000000 	.word	0x00000000

08004810 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004810:	4b07      	ldr	r3, [pc, #28]	@ (8004830 <pxCurrentTCBConst2>)
 8004812:	6819      	ldr	r1, [r3, #0]
 8004814:	6808      	ldr	r0, [r1, #0]
 8004816:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800481a:	f380 8809 	msr	PSP, r0
 800481e:	f3bf 8f6f 	isb	sy
 8004822:	f04f 0000 	mov.w	r0, #0
 8004826:	f380 8811 	msr	BASEPRI, r0
 800482a:	4770      	bx	lr
 800482c:	f3af 8000 	nop.w

08004830 <pxCurrentTCBConst2>:
 8004830:	200003a4 	.word	0x200003a4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004834:	bf00      	nop
 8004836:	bf00      	nop

08004838 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004838:	4808      	ldr	r0, [pc, #32]	@ (800485c <prvPortStartFirstTask+0x24>)
 800483a:	6800      	ldr	r0, [r0, #0]
 800483c:	6800      	ldr	r0, [r0, #0]
 800483e:	f380 8808 	msr	MSP, r0
 8004842:	f04f 0000 	mov.w	r0, #0
 8004846:	f380 8814 	msr	CONTROL, r0
 800484a:	b662      	cpsie	i
 800484c:	b661      	cpsie	f
 800484e:	f3bf 8f4f 	dsb	sy
 8004852:	f3bf 8f6f 	isb	sy
 8004856:	df00      	svc	0
 8004858:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800485a:	bf00      	nop
 800485c:	e000ed08 	.word	0xe000ed08

08004860 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b086      	sub	sp, #24
 8004864:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004866:	4b47      	ldr	r3, [pc, #284]	@ (8004984 <xPortStartScheduler+0x124>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a47      	ldr	r2, [pc, #284]	@ (8004988 <xPortStartScheduler+0x128>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d10b      	bne.n	8004888 <xPortStartScheduler+0x28>
	__asm volatile
 8004870:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004874:	f383 8811 	msr	BASEPRI, r3
 8004878:	f3bf 8f6f 	isb	sy
 800487c:	f3bf 8f4f 	dsb	sy
 8004880:	613b      	str	r3, [r7, #16]
}
 8004882:	bf00      	nop
 8004884:	bf00      	nop
 8004886:	e7fd      	b.n	8004884 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004888:	4b3e      	ldr	r3, [pc, #248]	@ (8004984 <xPortStartScheduler+0x124>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a3f      	ldr	r2, [pc, #252]	@ (800498c <xPortStartScheduler+0x12c>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d10b      	bne.n	80048aa <xPortStartScheduler+0x4a>
	__asm volatile
 8004892:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004896:	f383 8811 	msr	BASEPRI, r3
 800489a:	f3bf 8f6f 	isb	sy
 800489e:	f3bf 8f4f 	dsb	sy
 80048a2:	60fb      	str	r3, [r7, #12]
}
 80048a4:	bf00      	nop
 80048a6:	bf00      	nop
 80048a8:	e7fd      	b.n	80048a6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80048aa:	4b39      	ldr	r3, [pc, #228]	@ (8004990 <xPortStartScheduler+0x130>)
 80048ac:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	781b      	ldrb	r3, [r3, #0]
 80048b2:	b2db      	uxtb	r3, r3
 80048b4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	22ff      	movs	r2, #255	@ 0xff
 80048ba:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	781b      	ldrb	r3, [r3, #0]
 80048c0:	b2db      	uxtb	r3, r3
 80048c2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80048c4:	78fb      	ldrb	r3, [r7, #3]
 80048c6:	b2db      	uxtb	r3, r3
 80048c8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80048cc:	b2da      	uxtb	r2, r3
 80048ce:	4b31      	ldr	r3, [pc, #196]	@ (8004994 <xPortStartScheduler+0x134>)
 80048d0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80048d2:	4b31      	ldr	r3, [pc, #196]	@ (8004998 <xPortStartScheduler+0x138>)
 80048d4:	2207      	movs	r2, #7
 80048d6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80048d8:	e009      	b.n	80048ee <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80048da:	4b2f      	ldr	r3, [pc, #188]	@ (8004998 <xPortStartScheduler+0x138>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	3b01      	subs	r3, #1
 80048e0:	4a2d      	ldr	r2, [pc, #180]	@ (8004998 <xPortStartScheduler+0x138>)
 80048e2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80048e4:	78fb      	ldrb	r3, [r7, #3]
 80048e6:	b2db      	uxtb	r3, r3
 80048e8:	005b      	lsls	r3, r3, #1
 80048ea:	b2db      	uxtb	r3, r3
 80048ec:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80048ee:	78fb      	ldrb	r3, [r7, #3]
 80048f0:	b2db      	uxtb	r3, r3
 80048f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048f6:	2b80      	cmp	r3, #128	@ 0x80
 80048f8:	d0ef      	beq.n	80048da <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80048fa:	4b27      	ldr	r3, [pc, #156]	@ (8004998 <xPortStartScheduler+0x138>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f1c3 0307 	rsb	r3, r3, #7
 8004902:	2b04      	cmp	r3, #4
 8004904:	d00b      	beq.n	800491e <xPortStartScheduler+0xbe>
	__asm volatile
 8004906:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800490a:	f383 8811 	msr	BASEPRI, r3
 800490e:	f3bf 8f6f 	isb	sy
 8004912:	f3bf 8f4f 	dsb	sy
 8004916:	60bb      	str	r3, [r7, #8]
}
 8004918:	bf00      	nop
 800491a:	bf00      	nop
 800491c:	e7fd      	b.n	800491a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800491e:	4b1e      	ldr	r3, [pc, #120]	@ (8004998 <xPortStartScheduler+0x138>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	021b      	lsls	r3, r3, #8
 8004924:	4a1c      	ldr	r2, [pc, #112]	@ (8004998 <xPortStartScheduler+0x138>)
 8004926:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004928:	4b1b      	ldr	r3, [pc, #108]	@ (8004998 <xPortStartScheduler+0x138>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004930:	4a19      	ldr	r2, [pc, #100]	@ (8004998 <xPortStartScheduler+0x138>)
 8004932:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	b2da      	uxtb	r2, r3
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800493c:	4b17      	ldr	r3, [pc, #92]	@ (800499c <xPortStartScheduler+0x13c>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a16      	ldr	r2, [pc, #88]	@ (800499c <xPortStartScheduler+0x13c>)
 8004942:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004946:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004948:	4b14      	ldr	r3, [pc, #80]	@ (800499c <xPortStartScheduler+0x13c>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a13      	ldr	r2, [pc, #76]	@ (800499c <xPortStartScheduler+0x13c>)
 800494e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004952:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004954:	f000 f8da 	bl	8004b0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004958:	4b11      	ldr	r3, [pc, #68]	@ (80049a0 <xPortStartScheduler+0x140>)
 800495a:	2200      	movs	r2, #0
 800495c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800495e:	f000 f8f9 	bl	8004b54 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004962:	4b10      	ldr	r3, [pc, #64]	@ (80049a4 <xPortStartScheduler+0x144>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a0f      	ldr	r2, [pc, #60]	@ (80049a4 <xPortStartScheduler+0x144>)
 8004968:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800496c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800496e:	f7ff ff63 	bl	8004838 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004972:	f7ff fd4b 	bl	800440c <vTaskSwitchContext>
	prvTaskExitError();
 8004976:	f7ff ff1b 	bl	80047b0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800497a:	2300      	movs	r3, #0
}
 800497c:	4618      	mov	r0, r3
 800497e:	3718      	adds	r7, #24
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}
 8004984:	e000ed00 	.word	0xe000ed00
 8004988:	410fc271 	.word	0x410fc271
 800498c:	410fc270 	.word	0x410fc270
 8004990:	e000e400 	.word	0xe000e400
 8004994:	200004d0 	.word	0x200004d0
 8004998:	200004d4 	.word	0x200004d4
 800499c:	e000ed20 	.word	0xe000ed20
 80049a0:	2000000c 	.word	0x2000000c
 80049a4:	e000ef34 	.word	0xe000ef34

080049a8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80049a8:	b480      	push	{r7}
 80049aa:	b083      	sub	sp, #12
 80049ac:	af00      	add	r7, sp, #0
	__asm volatile
 80049ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049b2:	f383 8811 	msr	BASEPRI, r3
 80049b6:	f3bf 8f6f 	isb	sy
 80049ba:	f3bf 8f4f 	dsb	sy
 80049be:	607b      	str	r3, [r7, #4]
}
 80049c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80049c2:	4b10      	ldr	r3, [pc, #64]	@ (8004a04 <vPortEnterCritical+0x5c>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	3301      	adds	r3, #1
 80049c8:	4a0e      	ldr	r2, [pc, #56]	@ (8004a04 <vPortEnterCritical+0x5c>)
 80049ca:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80049cc:	4b0d      	ldr	r3, [pc, #52]	@ (8004a04 <vPortEnterCritical+0x5c>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d110      	bne.n	80049f6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80049d4:	4b0c      	ldr	r3, [pc, #48]	@ (8004a08 <vPortEnterCritical+0x60>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	b2db      	uxtb	r3, r3
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d00b      	beq.n	80049f6 <vPortEnterCritical+0x4e>
	__asm volatile
 80049de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049e2:	f383 8811 	msr	BASEPRI, r3
 80049e6:	f3bf 8f6f 	isb	sy
 80049ea:	f3bf 8f4f 	dsb	sy
 80049ee:	603b      	str	r3, [r7, #0]
}
 80049f0:	bf00      	nop
 80049f2:	bf00      	nop
 80049f4:	e7fd      	b.n	80049f2 <vPortEnterCritical+0x4a>
	}
}
 80049f6:	bf00      	nop
 80049f8:	370c      	adds	r7, #12
 80049fa:	46bd      	mov	sp, r7
 80049fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a00:	4770      	bx	lr
 8004a02:	bf00      	nop
 8004a04:	2000000c 	.word	0x2000000c
 8004a08:	e000ed04 	.word	0xe000ed04

08004a0c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b083      	sub	sp, #12
 8004a10:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004a12:	4b12      	ldr	r3, [pc, #72]	@ (8004a5c <vPortExitCritical+0x50>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d10b      	bne.n	8004a32 <vPortExitCritical+0x26>
	__asm volatile
 8004a1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a1e:	f383 8811 	msr	BASEPRI, r3
 8004a22:	f3bf 8f6f 	isb	sy
 8004a26:	f3bf 8f4f 	dsb	sy
 8004a2a:	607b      	str	r3, [r7, #4]
}
 8004a2c:	bf00      	nop
 8004a2e:	bf00      	nop
 8004a30:	e7fd      	b.n	8004a2e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004a32:	4b0a      	ldr	r3, [pc, #40]	@ (8004a5c <vPortExitCritical+0x50>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	3b01      	subs	r3, #1
 8004a38:	4a08      	ldr	r2, [pc, #32]	@ (8004a5c <vPortExitCritical+0x50>)
 8004a3a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004a3c:	4b07      	ldr	r3, [pc, #28]	@ (8004a5c <vPortExitCritical+0x50>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d105      	bne.n	8004a50 <vPortExitCritical+0x44>
 8004a44:	2300      	movs	r3, #0
 8004a46:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004a4e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004a50:	bf00      	nop
 8004a52:	370c      	adds	r7, #12
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr
 8004a5c:	2000000c 	.word	0x2000000c

08004a60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004a60:	f3ef 8009 	mrs	r0, PSP
 8004a64:	f3bf 8f6f 	isb	sy
 8004a68:	4b15      	ldr	r3, [pc, #84]	@ (8004ac0 <pxCurrentTCBConst>)
 8004a6a:	681a      	ldr	r2, [r3, #0]
 8004a6c:	f01e 0f10 	tst.w	lr, #16
 8004a70:	bf08      	it	eq
 8004a72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004a76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a7a:	6010      	str	r0, [r2, #0]
 8004a7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004a80:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004a84:	f380 8811 	msr	BASEPRI, r0
 8004a88:	f3bf 8f4f 	dsb	sy
 8004a8c:	f3bf 8f6f 	isb	sy
 8004a90:	f7ff fcbc 	bl	800440c <vTaskSwitchContext>
 8004a94:	f04f 0000 	mov.w	r0, #0
 8004a98:	f380 8811 	msr	BASEPRI, r0
 8004a9c:	bc09      	pop	{r0, r3}
 8004a9e:	6819      	ldr	r1, [r3, #0]
 8004aa0:	6808      	ldr	r0, [r1, #0]
 8004aa2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004aa6:	f01e 0f10 	tst.w	lr, #16
 8004aaa:	bf08      	it	eq
 8004aac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004ab0:	f380 8809 	msr	PSP, r0
 8004ab4:	f3bf 8f6f 	isb	sy
 8004ab8:	4770      	bx	lr
 8004aba:	bf00      	nop
 8004abc:	f3af 8000 	nop.w

08004ac0 <pxCurrentTCBConst>:
 8004ac0:	200003a4 	.word	0x200003a4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004ac4:	bf00      	nop
 8004ac6:	bf00      	nop

08004ac8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b082      	sub	sp, #8
 8004acc:	af00      	add	r7, sp, #0
	__asm volatile
 8004ace:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ad2:	f383 8811 	msr	BASEPRI, r3
 8004ad6:	f3bf 8f6f 	isb	sy
 8004ada:	f3bf 8f4f 	dsb	sy
 8004ade:	607b      	str	r3, [r7, #4]
}
 8004ae0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004ae2:	f7ff fbd5 	bl	8004290 <xTaskIncrementTick>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d003      	beq.n	8004af4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004aec:	4b06      	ldr	r3, [pc, #24]	@ (8004b08 <SysTick_Handler+0x40>)
 8004aee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004af2:	601a      	str	r2, [r3, #0]
 8004af4:	2300      	movs	r3, #0
 8004af6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	f383 8811 	msr	BASEPRI, r3
}
 8004afe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004b00:	bf00      	nop
 8004b02:	3708      	adds	r7, #8
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd80      	pop	{r7, pc}
 8004b08:	e000ed04 	.word	0xe000ed04

08004b0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004b10:	4b0b      	ldr	r3, [pc, #44]	@ (8004b40 <vPortSetupTimerInterrupt+0x34>)
 8004b12:	2200      	movs	r2, #0
 8004b14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004b16:	4b0b      	ldr	r3, [pc, #44]	@ (8004b44 <vPortSetupTimerInterrupt+0x38>)
 8004b18:	2200      	movs	r2, #0
 8004b1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004b1c:	4b0a      	ldr	r3, [pc, #40]	@ (8004b48 <vPortSetupTimerInterrupt+0x3c>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a0a      	ldr	r2, [pc, #40]	@ (8004b4c <vPortSetupTimerInterrupt+0x40>)
 8004b22:	fba2 2303 	umull	r2, r3, r2, r3
 8004b26:	099b      	lsrs	r3, r3, #6
 8004b28:	4a09      	ldr	r2, [pc, #36]	@ (8004b50 <vPortSetupTimerInterrupt+0x44>)
 8004b2a:	3b01      	subs	r3, #1
 8004b2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004b2e:	4b04      	ldr	r3, [pc, #16]	@ (8004b40 <vPortSetupTimerInterrupt+0x34>)
 8004b30:	2207      	movs	r2, #7
 8004b32:	601a      	str	r2, [r3, #0]
}
 8004b34:	bf00      	nop
 8004b36:	46bd      	mov	sp, r7
 8004b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3c:	4770      	bx	lr
 8004b3e:	bf00      	nop
 8004b40:	e000e010 	.word	0xe000e010
 8004b44:	e000e018 	.word	0xe000e018
 8004b48:	20000000 	.word	0x20000000
 8004b4c:	10624dd3 	.word	0x10624dd3
 8004b50:	e000e014 	.word	0xe000e014

08004b54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004b54:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004b64 <vPortEnableVFP+0x10>
 8004b58:	6801      	ldr	r1, [r0, #0]
 8004b5a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8004b5e:	6001      	str	r1, [r0, #0]
 8004b60:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004b62:	bf00      	nop
 8004b64:	e000ed88 	.word	0xe000ed88

08004b68 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b08a      	sub	sp, #40	@ 0x28
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004b70:	2300      	movs	r3, #0
 8004b72:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004b74:	f7ff fae0 	bl	8004138 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004b78:	4b5a      	ldr	r3, [pc, #360]	@ (8004ce4 <pvPortMalloc+0x17c>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d101      	bne.n	8004b84 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004b80:	f000 f916 	bl	8004db0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004b84:	4b58      	ldr	r3, [pc, #352]	@ (8004ce8 <pvPortMalloc+0x180>)
 8004b86:	681a      	ldr	r2, [r3, #0]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	4013      	ands	r3, r2
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	f040 8090 	bne.w	8004cb2 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d01e      	beq.n	8004bd6 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004b98:	2208      	movs	r2, #8
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	4413      	add	r3, r2
 8004b9e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	f003 0307 	and.w	r3, r3, #7
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d015      	beq.n	8004bd6 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	f023 0307 	bic.w	r3, r3, #7
 8004bb0:	3308      	adds	r3, #8
 8004bb2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	f003 0307 	and.w	r3, r3, #7
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d00b      	beq.n	8004bd6 <pvPortMalloc+0x6e>
	__asm volatile
 8004bbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bc2:	f383 8811 	msr	BASEPRI, r3
 8004bc6:	f3bf 8f6f 	isb	sy
 8004bca:	f3bf 8f4f 	dsb	sy
 8004bce:	617b      	str	r3, [r7, #20]
}
 8004bd0:	bf00      	nop
 8004bd2:	bf00      	nop
 8004bd4:	e7fd      	b.n	8004bd2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d06a      	beq.n	8004cb2 <pvPortMalloc+0x14a>
 8004bdc:	4b43      	ldr	r3, [pc, #268]	@ (8004cec <pvPortMalloc+0x184>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	687a      	ldr	r2, [r7, #4]
 8004be2:	429a      	cmp	r2, r3
 8004be4:	d865      	bhi.n	8004cb2 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004be6:	4b42      	ldr	r3, [pc, #264]	@ (8004cf0 <pvPortMalloc+0x188>)
 8004be8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004bea:	4b41      	ldr	r3, [pc, #260]	@ (8004cf0 <pvPortMalloc+0x188>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004bf0:	e004      	b.n	8004bfc <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8004bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bf4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	687a      	ldr	r2, [r7, #4]
 8004c02:	429a      	cmp	r2, r3
 8004c04:	d903      	bls.n	8004c0e <pvPortMalloc+0xa6>
 8004c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d1f1      	bne.n	8004bf2 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004c0e:	4b35      	ldr	r3, [pc, #212]	@ (8004ce4 <pvPortMalloc+0x17c>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c14:	429a      	cmp	r2, r3
 8004c16:	d04c      	beq.n	8004cb2 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004c18:	6a3b      	ldr	r3, [r7, #32]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	2208      	movs	r2, #8
 8004c1e:	4413      	add	r3, r2
 8004c20:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	6a3b      	ldr	r3, [r7, #32]
 8004c28:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c2c:	685a      	ldr	r2, [r3, #4]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	1ad2      	subs	r2, r2, r3
 8004c32:	2308      	movs	r3, #8
 8004c34:	005b      	lsls	r3, r3, #1
 8004c36:	429a      	cmp	r2, r3
 8004c38:	d920      	bls.n	8004c7c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004c3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	4413      	add	r3, r2
 8004c40:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004c42:	69bb      	ldr	r3, [r7, #24]
 8004c44:	f003 0307 	and.w	r3, r3, #7
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d00b      	beq.n	8004c64 <pvPortMalloc+0xfc>
	__asm volatile
 8004c4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c50:	f383 8811 	msr	BASEPRI, r3
 8004c54:	f3bf 8f6f 	isb	sy
 8004c58:	f3bf 8f4f 	dsb	sy
 8004c5c:	613b      	str	r3, [r7, #16]
}
 8004c5e:	bf00      	nop
 8004c60:	bf00      	nop
 8004c62:	e7fd      	b.n	8004c60 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c66:	685a      	ldr	r2, [r3, #4]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	1ad2      	subs	r2, r2, r3
 8004c6c:	69bb      	ldr	r3, [r7, #24]
 8004c6e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c72:	687a      	ldr	r2, [r7, #4]
 8004c74:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004c76:	69b8      	ldr	r0, [r7, #24]
 8004c78:	f000 f8fc 	bl	8004e74 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004c7c:	4b1b      	ldr	r3, [pc, #108]	@ (8004cec <pvPortMalloc+0x184>)
 8004c7e:	681a      	ldr	r2, [r3, #0]
 8004c80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	1ad3      	subs	r3, r2, r3
 8004c86:	4a19      	ldr	r2, [pc, #100]	@ (8004cec <pvPortMalloc+0x184>)
 8004c88:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004c8a:	4b18      	ldr	r3, [pc, #96]	@ (8004cec <pvPortMalloc+0x184>)
 8004c8c:	681a      	ldr	r2, [r3, #0]
 8004c8e:	4b19      	ldr	r3, [pc, #100]	@ (8004cf4 <pvPortMalloc+0x18c>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	429a      	cmp	r2, r3
 8004c94:	d203      	bcs.n	8004c9e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004c96:	4b15      	ldr	r3, [pc, #84]	@ (8004cec <pvPortMalloc+0x184>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a16      	ldr	r2, [pc, #88]	@ (8004cf4 <pvPortMalloc+0x18c>)
 8004c9c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ca0:	685a      	ldr	r2, [r3, #4]
 8004ca2:	4b11      	ldr	r3, [pc, #68]	@ (8004ce8 <pvPortMalloc+0x180>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	431a      	orrs	r2, r3
 8004ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004caa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004cac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cae:	2200      	movs	r2, #0
 8004cb0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004cb2:	f7ff fa4f 	bl	8004154 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004cb6:	69fb      	ldr	r3, [r7, #28]
 8004cb8:	f003 0307 	and.w	r3, r3, #7
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d00b      	beq.n	8004cd8 <pvPortMalloc+0x170>
	__asm volatile
 8004cc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cc4:	f383 8811 	msr	BASEPRI, r3
 8004cc8:	f3bf 8f6f 	isb	sy
 8004ccc:	f3bf 8f4f 	dsb	sy
 8004cd0:	60fb      	str	r3, [r7, #12]
}
 8004cd2:	bf00      	nop
 8004cd4:	bf00      	nop
 8004cd6:	e7fd      	b.n	8004cd4 <pvPortMalloc+0x16c>
	return pvReturn;
 8004cd8:	69fb      	ldr	r3, [r7, #28]
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3728      	adds	r7, #40	@ 0x28
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}
 8004ce2:	bf00      	nop
 8004ce4:	200010e0 	.word	0x200010e0
 8004ce8:	200010ec 	.word	0x200010ec
 8004cec:	200010e4 	.word	0x200010e4
 8004cf0:	200010d8 	.word	0x200010d8
 8004cf4:	200010e8 	.word	0x200010e8

08004cf8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b086      	sub	sp, #24
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d04a      	beq.n	8004da0 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004d0a:	2308      	movs	r3, #8
 8004d0c:	425b      	negs	r3, r3
 8004d0e:	697a      	ldr	r2, [r7, #20]
 8004d10:	4413      	add	r3, r2
 8004d12:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	685a      	ldr	r2, [r3, #4]
 8004d1c:	4b22      	ldr	r3, [pc, #136]	@ (8004da8 <vPortFree+0xb0>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4013      	ands	r3, r2
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d10b      	bne.n	8004d3e <vPortFree+0x46>
	__asm volatile
 8004d26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d2a:	f383 8811 	msr	BASEPRI, r3
 8004d2e:	f3bf 8f6f 	isb	sy
 8004d32:	f3bf 8f4f 	dsb	sy
 8004d36:	60fb      	str	r3, [r7, #12]
}
 8004d38:	bf00      	nop
 8004d3a:	bf00      	nop
 8004d3c:	e7fd      	b.n	8004d3a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d00b      	beq.n	8004d5e <vPortFree+0x66>
	__asm volatile
 8004d46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d4a:	f383 8811 	msr	BASEPRI, r3
 8004d4e:	f3bf 8f6f 	isb	sy
 8004d52:	f3bf 8f4f 	dsb	sy
 8004d56:	60bb      	str	r3, [r7, #8]
}
 8004d58:	bf00      	nop
 8004d5a:	bf00      	nop
 8004d5c:	e7fd      	b.n	8004d5a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	685a      	ldr	r2, [r3, #4]
 8004d62:	4b11      	ldr	r3, [pc, #68]	@ (8004da8 <vPortFree+0xb0>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4013      	ands	r3, r2
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d019      	beq.n	8004da0 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d115      	bne.n	8004da0 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	685a      	ldr	r2, [r3, #4]
 8004d78:	4b0b      	ldr	r3, [pc, #44]	@ (8004da8 <vPortFree+0xb0>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	43db      	mvns	r3, r3
 8004d7e:	401a      	ands	r2, r3
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004d84:	f7ff f9d8 	bl	8004138 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	685a      	ldr	r2, [r3, #4]
 8004d8c:	4b07      	ldr	r3, [pc, #28]	@ (8004dac <vPortFree+0xb4>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4413      	add	r3, r2
 8004d92:	4a06      	ldr	r2, [pc, #24]	@ (8004dac <vPortFree+0xb4>)
 8004d94:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004d96:	6938      	ldr	r0, [r7, #16]
 8004d98:	f000 f86c 	bl	8004e74 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004d9c:	f7ff f9da 	bl	8004154 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004da0:	bf00      	nop
 8004da2:	3718      	adds	r7, #24
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}
 8004da8:	200010ec 	.word	0x200010ec
 8004dac:	200010e4 	.word	0x200010e4

08004db0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004db0:	b480      	push	{r7}
 8004db2:	b085      	sub	sp, #20
 8004db4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004db6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8004dba:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004dbc:	4b27      	ldr	r3, [pc, #156]	@ (8004e5c <prvHeapInit+0xac>)
 8004dbe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	f003 0307 	and.w	r3, r3, #7
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d00c      	beq.n	8004de4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	3307      	adds	r3, #7
 8004dce:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	f023 0307 	bic.w	r3, r3, #7
 8004dd6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004dd8:	68ba      	ldr	r2, [r7, #8]
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	1ad3      	subs	r3, r2, r3
 8004dde:	4a1f      	ldr	r2, [pc, #124]	@ (8004e5c <prvHeapInit+0xac>)
 8004de0:	4413      	add	r3, r2
 8004de2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004de8:	4a1d      	ldr	r2, [pc, #116]	@ (8004e60 <prvHeapInit+0xb0>)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004dee:	4b1c      	ldr	r3, [pc, #112]	@ (8004e60 <prvHeapInit+0xb0>)
 8004df0:	2200      	movs	r2, #0
 8004df2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	68ba      	ldr	r2, [r7, #8]
 8004df8:	4413      	add	r3, r2
 8004dfa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004dfc:	2208      	movs	r2, #8
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	1a9b      	subs	r3, r3, r2
 8004e02:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	f023 0307 	bic.w	r3, r3, #7
 8004e0a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	4a15      	ldr	r2, [pc, #84]	@ (8004e64 <prvHeapInit+0xb4>)
 8004e10:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004e12:	4b14      	ldr	r3, [pc, #80]	@ (8004e64 <prvHeapInit+0xb4>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	2200      	movs	r2, #0
 8004e18:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004e1a:	4b12      	ldr	r3, [pc, #72]	@ (8004e64 <prvHeapInit+0xb4>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	68fa      	ldr	r2, [r7, #12]
 8004e2a:	1ad2      	subs	r2, r2, r3
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004e30:	4b0c      	ldr	r3, [pc, #48]	@ (8004e64 <prvHeapInit+0xb4>)
 8004e32:	681a      	ldr	r2, [r3, #0]
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	4a0a      	ldr	r2, [pc, #40]	@ (8004e68 <prvHeapInit+0xb8>)
 8004e3e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	4a09      	ldr	r2, [pc, #36]	@ (8004e6c <prvHeapInit+0xbc>)
 8004e46:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004e48:	4b09      	ldr	r3, [pc, #36]	@ (8004e70 <prvHeapInit+0xc0>)
 8004e4a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004e4e:	601a      	str	r2, [r3, #0]
}
 8004e50:	bf00      	nop
 8004e52:	3714      	adds	r7, #20
 8004e54:	46bd      	mov	sp, r7
 8004e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5a:	4770      	bx	lr
 8004e5c:	200004d8 	.word	0x200004d8
 8004e60:	200010d8 	.word	0x200010d8
 8004e64:	200010e0 	.word	0x200010e0
 8004e68:	200010e8 	.word	0x200010e8
 8004e6c:	200010e4 	.word	0x200010e4
 8004e70:	200010ec 	.word	0x200010ec

08004e74 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004e74:	b480      	push	{r7}
 8004e76:	b085      	sub	sp, #20
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004e7c:	4b28      	ldr	r3, [pc, #160]	@ (8004f20 <prvInsertBlockIntoFreeList+0xac>)
 8004e7e:	60fb      	str	r3, [r7, #12]
 8004e80:	e002      	b.n	8004e88 <prvInsertBlockIntoFreeList+0x14>
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	60fb      	str	r3, [r7, #12]
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	687a      	ldr	r2, [r7, #4]
 8004e8e:	429a      	cmp	r2, r3
 8004e90:	d8f7      	bhi.n	8004e82 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	68ba      	ldr	r2, [r7, #8]
 8004e9c:	4413      	add	r3, r2
 8004e9e:	687a      	ldr	r2, [r7, #4]
 8004ea0:	429a      	cmp	r2, r3
 8004ea2:	d108      	bne.n	8004eb6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	685a      	ldr	r2, [r3, #4]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	441a      	add	r2, r3
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	68ba      	ldr	r2, [r7, #8]
 8004ec0:	441a      	add	r2, r3
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	429a      	cmp	r2, r3
 8004ec8:	d118      	bne.n	8004efc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681a      	ldr	r2, [r3, #0]
 8004ece:	4b15      	ldr	r3, [pc, #84]	@ (8004f24 <prvInsertBlockIntoFreeList+0xb0>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	429a      	cmp	r2, r3
 8004ed4:	d00d      	beq.n	8004ef2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	685a      	ldr	r2, [r3, #4]
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	441a      	add	r2, r3
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	601a      	str	r2, [r3, #0]
 8004ef0:	e008      	b.n	8004f04 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004ef2:	4b0c      	ldr	r3, [pc, #48]	@ (8004f24 <prvInsertBlockIntoFreeList+0xb0>)
 8004ef4:	681a      	ldr	r2, [r3, #0]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	601a      	str	r2, [r3, #0]
 8004efa:	e003      	b.n	8004f04 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681a      	ldr	r2, [r3, #0]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004f04:	68fa      	ldr	r2, [r7, #12]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	d002      	beq.n	8004f12 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	687a      	ldr	r2, [r7, #4]
 8004f10:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004f12:	bf00      	nop
 8004f14:	3714      	adds	r7, #20
 8004f16:	46bd      	mov	sp, r7
 8004f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1c:	4770      	bx	lr
 8004f1e:	bf00      	nop
 8004f20:	200010d8 	.word	0x200010d8
 8004f24:	200010e0 	.word	0x200010e0

08004f28 <memset>:
 8004f28:	4402      	add	r2, r0
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d100      	bne.n	8004f32 <memset+0xa>
 8004f30:	4770      	bx	lr
 8004f32:	f803 1b01 	strb.w	r1, [r3], #1
 8004f36:	e7f9      	b.n	8004f2c <memset+0x4>

08004f38 <__libc_init_array>:
 8004f38:	b570      	push	{r4, r5, r6, lr}
 8004f3a:	4d0d      	ldr	r5, [pc, #52]	@ (8004f70 <__libc_init_array+0x38>)
 8004f3c:	4c0d      	ldr	r4, [pc, #52]	@ (8004f74 <__libc_init_array+0x3c>)
 8004f3e:	1b64      	subs	r4, r4, r5
 8004f40:	10a4      	asrs	r4, r4, #2
 8004f42:	2600      	movs	r6, #0
 8004f44:	42a6      	cmp	r6, r4
 8004f46:	d109      	bne.n	8004f5c <__libc_init_array+0x24>
 8004f48:	4d0b      	ldr	r5, [pc, #44]	@ (8004f78 <__libc_init_array+0x40>)
 8004f4a:	4c0c      	ldr	r4, [pc, #48]	@ (8004f7c <__libc_init_array+0x44>)
 8004f4c:	f000 f818 	bl	8004f80 <_init>
 8004f50:	1b64      	subs	r4, r4, r5
 8004f52:	10a4      	asrs	r4, r4, #2
 8004f54:	2600      	movs	r6, #0
 8004f56:	42a6      	cmp	r6, r4
 8004f58:	d105      	bne.n	8004f66 <__libc_init_array+0x2e>
 8004f5a:	bd70      	pop	{r4, r5, r6, pc}
 8004f5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f60:	4798      	blx	r3
 8004f62:	3601      	adds	r6, #1
 8004f64:	e7ee      	b.n	8004f44 <__libc_init_array+0xc>
 8004f66:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f6a:	4798      	blx	r3
 8004f6c:	3601      	adds	r6, #1
 8004f6e:	e7f2      	b.n	8004f56 <__libc_init_array+0x1e>
 8004f70:	0800504c 	.word	0x0800504c
 8004f74:	0800504c 	.word	0x0800504c
 8004f78:	0800504c 	.word	0x0800504c
 8004f7c:	08005050 	.word	0x08005050

08004f80 <_init>:
 8004f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f82:	bf00      	nop
 8004f84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f86:	bc08      	pop	{r3}
 8004f88:	469e      	mov	lr, r3
 8004f8a:	4770      	bx	lr

08004f8c <_fini>:
 8004f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f8e:	bf00      	nop
 8004f90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f92:	bc08      	pop	{r3}
 8004f94:	469e      	mov	lr, r3
 8004f96:	4770      	bx	lr
