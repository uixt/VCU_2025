
VCU_2025.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000829c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000164  0800842c  0800842c  0000942c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008590  08008590  0000a064  2**0
                  CONTENTS
  4 .ARM          00000008  08008590  08008590  00009590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008598  08008598  0000a064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008598  08008598  00009598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800859c  0800859c  0000959c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  080085a0  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002f80  20000064  08008604  0000a064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002fe4  08008604  0000afe4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a064  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a412  00000000  00000000  0000a094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e01  00000000  00000000  000244a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001650  00000000  00000000  000282a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001148  00000000  00000000  000298f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000202c8  00000000  00000000  0002aa40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d51c  00000000  00000000  0004ad08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b8a3c  00000000  00000000  00068224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00120c60  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006280  00000000  00000000  00120ca4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  00126f24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000064 	.word	0x20000064
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008414 	.word	0x08008414

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000068 	.word	0x20000068
 80001cc:	08008414 	.word	0x08008414

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_d2f>:
 80005f8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80005fc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000600:	bf24      	itt	cs
 8000602:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000606:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800060a:	d90d      	bls.n	8000628 <__aeabi_d2f+0x30>
 800060c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000610:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000614:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000618:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 800061c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000620:	bf08      	it	eq
 8000622:	f020 0001 	biceq.w	r0, r0, #1
 8000626:	4770      	bx	lr
 8000628:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 800062c:	d121      	bne.n	8000672 <__aeabi_d2f+0x7a>
 800062e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000632:	bfbc      	itt	lt
 8000634:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000638:	4770      	bxlt	lr
 800063a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800063e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000642:	f1c2 0218 	rsb	r2, r2, #24
 8000646:	f1c2 0c20 	rsb	ip, r2, #32
 800064a:	fa10 f30c 	lsls.w	r3, r0, ip
 800064e:	fa20 f002 	lsr.w	r0, r0, r2
 8000652:	bf18      	it	ne
 8000654:	f040 0001 	orrne.w	r0, r0, #1
 8000658:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800065c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000660:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000664:	ea40 000c 	orr.w	r0, r0, ip
 8000668:	fa23 f302 	lsr.w	r3, r3, r2
 800066c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000670:	e7cc      	b.n	800060c <__aeabi_d2f+0x14>
 8000672:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000676:	d107      	bne.n	8000688 <__aeabi_d2f+0x90>
 8000678:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800067c:	bf1e      	ittt	ne
 800067e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000682:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000686:	4770      	bxne	lr
 8000688:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 800068c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000690:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000694:	4770      	bx	lr
 8000696:	bf00      	nop

08000698 <brake_light>:





void brake_light(void) {
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
	for (;;) {
		if (HAL_GPIO_ReadPin(BrakePedal_in_GPIO_Port, BrakePedal_in_Pin)
 800069c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80006a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006a4:	f003 f8d6 	bl	8003854 <HAL_GPIO_ReadPin>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b01      	cmp	r3, #1
 80006ac:	d106      	bne.n	80006bc <brake_light+0x24>
				== GPIO_PIN_SET) {
			HAL_GPIO_WritePin(BrakeLight_out_GPIO_Port, BrakeLight_out_Pin,
 80006ae:	2201      	movs	r2, #1
 80006b0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80006b4:	4805      	ldr	r0, [pc, #20]	@ (80006cc <brake_light+0x34>)
 80006b6:	f003 f8e5 	bl	8003884 <HAL_GPIO_WritePin>
 80006ba:	e7ef      	b.n	800069c <brake_light+0x4>
					GPIO_PIN_SET);
		}
		else {
			HAL_GPIO_WritePin(BrakeLight_out_GPIO_Port, BrakeLight_out_Pin,
 80006bc:	2200      	movs	r2, #0
 80006be:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80006c2:	4802      	ldr	r0, [pc, #8]	@ (80006cc <brake_light+0x34>)
 80006c4:	f003 f8de 	bl	8003884 <HAL_GPIO_WritePin>
		if (HAL_GPIO_ReadPin(BrakePedal_in_GPIO_Port, BrakePedal_in_Pin)
 80006c8:	e7e8      	b.n	800069c <brake_light+0x4>
 80006ca:	bf00      	nop
 80006cc:	48000800 	.word	0x48000800

080006d0 <r_signal_light>:
		}

	}
}

void r_signal_light(void) {
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
	for (;;) {
		if (HAL_GPIO_ReadPin(R_SignalLight_out_GPIO_Port,
 80006d4:	2140      	movs	r1, #64	@ 0x40
 80006d6:	4808      	ldr	r0, [pc, #32]	@ (80006f8 <r_signal_light+0x28>)
 80006d8:	f003 f8bc 	bl	8003854 <HAL_GPIO_ReadPin>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b01      	cmp	r3, #1
 80006e0:	d104      	bne.n	80006ec <r_signal_light+0x1c>
				R_SignalLight_out_Pin) == GPIO_PIN_SET) {
			HAL_GPIO_TogglePin(R_SignalLight_out_GPIO_Port,
 80006e2:	2140      	movs	r1, #64	@ 0x40
 80006e4:	4804      	ldr	r0, [pc, #16]	@ (80006f8 <r_signal_light+0x28>)
 80006e6:	f003 f8e5 	bl	80038b4 <HAL_GPIO_TogglePin>
 80006ea:	e7f3      	b.n	80006d4 <r_signal_light+0x4>
					R_SignalLight_out_Pin);
		}
		else {
			HAL_GPIO_WritePin(R_SignalLight_out_GPIO_Port,
 80006ec:	2200      	movs	r2, #0
 80006ee:	2140      	movs	r1, #64	@ 0x40
 80006f0:	4801      	ldr	r0, [pc, #4]	@ (80006f8 <r_signal_light+0x28>)
 80006f2:	f003 f8c7 	bl	8003884 <HAL_GPIO_WritePin>
		if (HAL_GPIO_ReadPin(R_SignalLight_out_GPIO_Port,
 80006f6:	e7ed      	b.n	80006d4 <r_signal_light+0x4>
 80006f8:	48000800 	.word	0x48000800

080006fc <l_signal_light>:

	}
}


void l_signal_light(void) {
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
	for (;;) {
		if (HAL_GPIO_ReadPin(L_SignalLight_out_GPIO_Port,
 8000700:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000704:	4809      	ldr	r0, [pc, #36]	@ (800072c <l_signal_light+0x30>)
 8000706:	f003 f8a5 	bl	8003854 <HAL_GPIO_ReadPin>
 800070a:	4603      	mov	r3, r0
 800070c:	2b01      	cmp	r3, #1
 800070e:	d105      	bne.n	800071c <l_signal_light+0x20>
				L_SignalLight_out_Pin) == GPIO_PIN_SET) {
			HAL_GPIO_TogglePin(L_SignalLight_out_GPIO_Port,
 8000710:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000714:	4805      	ldr	r0, [pc, #20]	@ (800072c <l_signal_light+0x30>)
 8000716:	f003 f8cd 	bl	80038b4 <HAL_GPIO_TogglePin>
 800071a:	e7f1      	b.n	8000700 <l_signal_light+0x4>
					L_SignalLight_out_Pin);
		}
		else {
			HAL_GPIO_WritePin(L_SignalLight_out_GPIO_Port,
 800071c:	2200      	movs	r2, #0
 800071e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000722:	4802      	ldr	r0, [pc, #8]	@ (800072c <l_signal_light+0x30>)
 8000724:	f003 f8ae 	bl	8003884 <HAL_GPIO_WritePin>
		if (HAL_GPIO_ReadPin(L_SignalLight_out_GPIO_Port,
 8000728:	e7ea      	b.n	8000700 <l_signal_light+0x4>
 800072a:	bf00      	nop
 800072c:	48000400 	.word	0x48000400

08000730 <hazard_light>:

	}
}


void hazard_light(void) {
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
	for (;;) {
		if (HAL_GPIO_ReadPin(Hazard_in_GPIO_Port, Hazard_in_Pin)
 8000734:	2101      	movs	r1, #1
 8000736:	480e      	ldr	r0, [pc, #56]	@ (8000770 <hazard_light+0x40>)
 8000738:	f003 f88c 	bl	8003854 <HAL_GPIO_ReadPin>
 800073c:	4603      	mov	r3, r0
 800073e:	2b01      	cmp	r3, #1
 8000740:	d109      	bne.n	8000756 <hazard_light+0x26>
				== GPIO_PIN_SET) {
			HAL_GPIO_TogglePin(R_SignalLight_out_GPIO_Port,
 8000742:	2140      	movs	r1, #64	@ 0x40
 8000744:	480a      	ldr	r0, [pc, #40]	@ (8000770 <hazard_light+0x40>)
 8000746:	f003 f8b5 	bl	80038b4 <HAL_GPIO_TogglePin>
					R_SignalLight_out_Pin);
			HAL_GPIO_TogglePin(L_SignalLight_out_GPIO_Port,
 800074a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800074e:	4809      	ldr	r0, [pc, #36]	@ (8000774 <hazard_light+0x44>)
 8000750:	f003 f8b0 	bl	80038b4 <HAL_GPIO_TogglePin>
 8000754:	e7ee      	b.n	8000734 <hazard_light+0x4>
					L_SignalLight_out_Pin);
		} else {
			HAL_GPIO_WritePin(R_SignalLight_out_GPIO_Port, R_SignalLight_out_Pin, GPIO_PIN_RESET);
 8000756:	2200      	movs	r2, #0
 8000758:	2140      	movs	r1, #64	@ 0x40
 800075a:	4805      	ldr	r0, [pc, #20]	@ (8000770 <hazard_light+0x40>)
 800075c:	f003 f892 	bl	8003884 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(L_SignalLight_out_GPIO_Port, L_SignalLight_out_Pin, GPIO_PIN_RESET);
 8000760:	2200      	movs	r2, #0
 8000762:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000766:	4803      	ldr	r0, [pc, #12]	@ (8000774 <hazard_light+0x44>)
 8000768:	f003 f88c 	bl	8003884 <HAL_GPIO_WritePin>
		if (HAL_GPIO_ReadPin(Hazard_in_GPIO_Port, Hazard_in_Pin)
 800076c:	e7e2      	b.n	8000734 <hazard_light+0x4>
 800076e:	bf00      	nop
 8000770:	48000800 	.word	0x48000800
 8000774:	48000400 	.word	0x48000400

08000778 <buttons_100ms>:
		}
	}

}

void buttons_100ms(void){
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
	brake_light();
 800077c:	f7ff ff8c 	bl	8000698 <brake_light>
	vTaskDelay(100);
 8000780:	2064      	movs	r0, #100	@ 0x64
 8000782:	f006 f8d5 	bl	8006930 <vTaskDelay>
}
 8000786:	bf00      	nop
 8000788:	bd80      	pop	{r7, pc}

0800078a <buttons_500ms>:

void buttons_500ms(void){
 800078a:	b580      	push	{r7, lr}
 800078c:	af00      	add	r7, sp, #0
	r_signal_light();
 800078e:	f7ff ff9f 	bl	80006d0 <r_signal_light>
	l_signal_light();
 8000792:	f7ff ffb3 	bl	80006fc <l_signal_light>
	hazard_light();
 8000796:	f7ff ffcb 	bl	8000730 <hazard_light>
	vTaskDelay(500);
 800079a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800079e:	f006 f8c7 	bl	8006930 <vTaskDelay>
}
 80007a2:	bf00      	nop
 80007a4:	bd80      	pop	{r7, pc}

080007a6 <makeCANFrame>:
#define HEATSINK_ID_MC2      0x60B
#define BMS_TEMP_ID          0x0
#define BMS_VOLTAGE_ID       0x0
#define BMS_CURRENT_ID       0x0

struct CANFrame makeCANFrame(CAN_RxHeaderTypeDef header, uint8_t data[8]) {
 80007a6:	b084      	sub	sp, #16
 80007a8:	b490      	push	{r4, r7}
 80007aa:	b086      	sub	sp, #24
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
 80007b0:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80007b4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	struct CANFrame temp;

	temp.ID = header.StdId;
 80007b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007ba:	60fb      	str	r3, [r7, #12]
	temp.rxData[0] = data[0];
 80007bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	743b      	strb	r3, [r7, #16]
	temp.rxData[1] = data[1];
 80007c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80007c4:	785b      	ldrb	r3, [r3, #1]
 80007c6:	747b      	strb	r3, [r7, #17]
	temp.rxData[2] = data[2];
 80007c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80007ca:	789b      	ldrb	r3, [r3, #2]
 80007cc:	74bb      	strb	r3, [r7, #18]
	temp.rxData[3] = data[3];
 80007ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80007d0:	78db      	ldrb	r3, [r3, #3]
 80007d2:	74fb      	strb	r3, [r7, #19]
	temp.rxData[4] = data[4];
 80007d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80007d6:	791b      	ldrb	r3, [r3, #4]
 80007d8:	753b      	strb	r3, [r7, #20]
	temp.rxData[5] = data[5];
 80007da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80007dc:	795b      	ldrb	r3, [r3, #5]
 80007de:	757b      	strb	r3, [r7, #21]
	temp.rxData[6] = data[6];
 80007e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80007e2:	799b      	ldrb	r3, [r3, #6]
 80007e4:	75bb      	strb	r3, [r7, #22]
	temp.rxData[7] = data[7];
 80007e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80007e8:	79db      	ldrb	r3, [r3, #7]
 80007ea:	75fb      	strb	r3, [r7, #23]

	return temp;
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	461c      	mov	r4, r3
 80007f0:	f107 030c 	add.w	r3, r7, #12
 80007f4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80007f8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80007fc:	6878      	ldr	r0, [r7, #4]
 80007fe:	3718      	adds	r7, #24
 8000800:	46bd      	mov	sp, r7
 8000802:	bc90      	pop	{r4, r7}
 8000804:	b004      	add	sp, #16
 8000806:	4770      	bx	lr

08000808 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000808:	b5f0      	push	{r4, r5, r6, r7, lr}
 800080a:	b08f      	sub	sp, #60	@ 0x3c
 800080c:	af06      	add	r7, sp, #24
 800080e:	61f8      	str	r0, [r7, #28]

	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK) {
 8000810:	4b18      	ldr	r3, [pc, #96]	@ (8000874 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 8000812:	4a19      	ldr	r2, [pc, #100]	@ (8000878 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8000814:	2100      	movs	r1, #0
 8000816:	69f8      	ldr	r0, [r7, #28]
 8000818:	f002 f8b9 	bl	800298e <HAL_CAN_GetRxMessage>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
		Error_Handler();
 8000822:	f000 fd3b 	bl	800129c <Error_Handler>
	}
//	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
	temp = makeCANFrame(RxHeader, RxData);
 8000826:	4b15      	ldr	r3, [pc, #84]	@ (800087c <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 8000828:	607b      	str	r3, [r7, #4]
 800082a:	f107 0608 	add.w	r6, r7, #8
 800082e:	4c12      	ldr	r4, [pc, #72]	@ (8000878 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8000830:	4b10      	ldr	r3, [pc, #64]	@ (8000874 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 8000832:	9304      	str	r3, [sp, #16]
 8000834:	466d      	mov	r5, sp
 8000836:	f104 030c 	add.w	r3, r4, #12
 800083a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800083c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000840:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8000844:	4630      	mov	r0, r6
 8000846:	f7ff ffae 	bl	80007a6 <makeCANFrame>
 800084a:	687c      	ldr	r4, [r7, #4]
 800084c:	f107 0308 	add.w	r3, r7, #8
 8000850:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000854:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	xQueueSendToBackFromISR(CANq, &temp, 1);
 8000858:	4b09      	ldr	r3, [pc, #36]	@ (8000880 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 800085a:	6818      	ldr	r0, [r3, #0]
 800085c:	2300      	movs	r3, #0
 800085e:	2201      	movs	r2, #1
 8000860:	4906      	ldr	r1, [pc, #24]	@ (800087c <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 8000862:	f005 fcff 	bl	8006264 <xQueueGenericSendFromISR>

	datacheck = 1; // signal to your RTOS task
 8000866:	4b07      	ldr	r3, [pc, #28]	@ (8000884 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 8000868:	2201      	movs	r2, #1
 800086a:	701a      	strb	r2, [r3, #0]
}
 800086c:	bf00      	nop
 800086e:	3724      	adds	r7, #36	@ 0x24
 8000870:	46bd      	mov	sp, r7
 8000872:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000874:	2000009c 	.word	0x2000009c
 8000878:	20000080 	.word	0x20000080
 800087c:	200000a4 	.word	0x200000a4
 8000880:	200004b4 	.word	0x200004b4
 8000884:	200004b8 	.word	0x200004b8

08000888 <can_rx>:

void can_rx(void const *argument) {
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
//	int count;
//	CANq = xQueueCreate(100, sizeof(struct CANFrame)); // I didn't realize this was here ca..
	vQueueAddToRegistry(CANq, "CAN queue");
 8000890:	4b25      	ldr	r3, [pc, #148]	@ (8000928 <can_rx+0xa0>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4925      	ldr	r1, [pc, #148]	@ (800092c <can_rx+0xa4>)
 8000896:	4618      	mov	r0, r3
 8000898:	f005 fe92 	bl	80065c0 <vQueueAddToRegistry>

	while (1) {

		if (xQueueReceiveFromISR(CANq, &receivedFrame,
 800089c:	4b22      	ldr	r3, [pc, #136]	@ (8000928 <can_rx+0xa0>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	2264      	movs	r2, #100	@ 0x64
 80008a2:	4923      	ldr	r1, [pc, #140]	@ (8000930 <can_rx+0xa8>)
 80008a4:	4618      	mov	r0, r3
 80008a6:	f005 fd78 	bl	800639a <xQueueReceiveFromISR>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b01      	cmp	r3, #1
 80008ae:	d1f5      	bne.n	800089c <can_rx+0x14>
				pdMS_TO_TICKS(100)) == pdPASS) {
			switch (receivedFrame.ID) {
 80008b0:	4b1f      	ldr	r3, [pc, #124]	@ (8000930 <can_rx+0xa8>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	f240 5203 	movw	r2, #1283	@ 0x503
 80008b8:	4293      	cmp	r3, r2
 80008ba:	d004      	beq.n	80008c6 <can_rx+0x3e>
 80008bc:	f240 6203 	movw	r2, #1539	@ 0x603
 80008c0:	4293      	cmp	r3, r2
 80008c2:	d00f      	beq.n	80008e4 <can_rx+0x5c>
 80008c4:	e01d      	b.n	8000902 <can_rx+0x7a>
//
//					// Motor Controllers
//					// Vehicle velocity
			case VELOCITY_ID_MC1:
				//type: float
				memcpy(TelemRPM_1.byte, RxData, MCmsgSize);
 80008c6:	4b1b      	ldr	r3, [pc, #108]	@ (8000934 <can_rx+0xac>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	461a      	mov	r2, r3
 80008cc:	491a      	ldr	r1, [pc, #104]	@ (8000938 <can_rx+0xb0>)
 80008ce:	481b      	ldr	r0, [pc, #108]	@ (800093c <can_rx+0xb4>)
 80008d0:	f007 f954 	bl	8007b7c <memcpy>
				memcpy(TelemVelocity_1.byte, RxData + 5, MCmsgSize); // m/s, convert to mph
 80008d4:	491a      	ldr	r1, [pc, #104]	@ (8000940 <can_rx+0xb8>)
 80008d6:	4b17      	ldr	r3, [pc, #92]	@ (8000934 <can_rx+0xac>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	461a      	mov	r2, r3
 80008dc:	4819      	ldr	r0, [pc, #100]	@ (8000944 <can_rx+0xbc>)
 80008de:	f007 f94d 	bl	8007b7c <memcpy>
				break;
 80008e2:	e00e      	b.n	8000902 <can_rx+0x7a>

			case VELOCITY_ID_MC2:
				//type: float
				memcpy(TelemRPM_2.byte, RxData, MCmsgSize);
 80008e4:	4b13      	ldr	r3, [pc, #76]	@ (8000934 <can_rx+0xac>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	461a      	mov	r2, r3
 80008ea:	4913      	ldr	r1, [pc, #76]	@ (8000938 <can_rx+0xb0>)
 80008ec:	4816      	ldr	r0, [pc, #88]	@ (8000948 <can_rx+0xc0>)
 80008ee:	f007 f945 	bl	8007b7c <memcpy>
				memcpy(TelemVelocity_2.byte, RxData + 5, MCmsgSize); // m/s, convert to mph
 80008f2:	4913      	ldr	r1, [pc, #76]	@ (8000940 <can_rx+0xb8>)
 80008f4:	4b0f      	ldr	r3, [pc, #60]	@ (8000934 <can_rx+0xac>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	461a      	mov	r2, r3
 80008fa:	4814      	ldr	r0, [pc, #80]	@ (800094c <can_rx+0xc4>)
 80008fc:	f007 f93e 	bl	8007b7c <memcpy>
				break;
 8000900:	bf00      	nop
//					//type: float
//					memcpy(BMS_CurrentDraw.byte, RxData, CurrentDrawSize);
//					break;
			}
//			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
			AvgVelocity.f = (TelemVelocity_1.f + TelemVelocity_2.f) / 2.0f;
 8000902:	4b10      	ldr	r3, [pc, #64]	@ (8000944 <can_rx+0xbc>)
 8000904:	ed93 7a00 	vldr	s14, [r3]
 8000908:	4b10      	ldr	r3, [pc, #64]	@ (800094c <can_rx+0xc4>)
 800090a:	edd3 7a00 	vldr	s15, [r3]
 800090e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000912:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8000916:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800091a:	4b0d      	ldr	r3, [pc, #52]	@ (8000950 <can_rx+0xc8>)
 800091c:	edc3 7a00 	vstr	s15, [r3]
			osDelay(100);
 8000920:	2064      	movs	r0, #100	@ 0x64
 8000922:	f005 fb0f 	bl	8005f44 <osDelay>
		if (xQueueReceiveFromISR(CANq, &receivedFrame,
 8000926:	e7b9      	b.n	800089c <can_rx+0x14>
 8000928:	200004b4 	.word	0x200004b4
 800092c:	0800842c 	.word	0x0800842c
 8000930:	200000b0 	.word	0x200000b0
 8000934:	20000000 	.word	0x20000000
 8000938:	2000009c 	.word	0x2000009c
 800093c:	200000d4 	.word	0x200000d4
 8000940:	200000a1 	.word	0x200000a1
 8000944:	200000bc 	.word	0x200000bc
 8000948:	200000dc 	.word	0x200000dc
 800094c:	200000c4 	.word	0x200000c4
 8000950:	200000cc 	.word	0x200000cc
 8000954:	00000000 	.word	0x00000000

08000958 <can_tx>:
//	int i;
//	float f;
//	uint8_t byte[8];
//};

void can_tx(void const *argument) {
 8000958:	b580      	push	{r7, lr}
 800095a:	b09c      	sub	sp, #112	@ 0x70
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
	CAN_TxHeaderTypeDef txHeader;
	uint8_t txData[8];
	uint32_t txMailbox;
	union Data Current; //how best to control motors? Current, Velocity, mix of both?
	union Data Velocity;
	float sum = 0;
 8000960:	f04f 0300 	mov.w	r3, #0
 8000964:	66fb      	str	r3, [r7, #108]	@ 0x6c
	float avg = 0;
 8000966:	f04f 0300 	mov.w	r3, #0
 800096a:	667b      	str	r3, [r7, #100]	@ 0x64
	char msg[32]; // plenty of space for float + newline
	// Set up header
	txHeader.IDE = CAN_ID_STD;
 800096c:	2300      	movs	r3, #0
 800096e:	653b      	str	r3, [r7, #80]	@ 0x50
	txHeader.StdId = 0x401;
 8000970:	f240 4301 	movw	r3, #1025	@ 0x401
 8000974:	64bb      	str	r3, [r7, #72]	@ 0x48
	txHeader.RTR = CAN_RTR_DATA;
 8000976:	2300      	movs	r3, #0
 8000978:	657b      	str	r3, [r7, #84]	@ 0x54
	txHeader.DLC = 8;
 800097a:	2308      	movs	r3, #8
 800097c:	65bb      	str	r3, [r7, #88]	@ 0x58
	Velocity.f = 500.0f;
 800097e:	4b66      	ldr	r3, [pc, #408]	@ (8000b18 <can_tx+0x1c0>)
 8000980:	62fb      	str	r3, [r7, #44]	@ 0x2c

	while (1) {
		sum = 0;
 8000982:	f04f 0300 	mov.w	r3, #0
 8000986:	66fb      	str	r3, [r7, #108]	@ 0x6c

		for (int i = 0; i < ADC_BUF_LEN; i++) {
 8000988:	2300      	movs	r3, #0
 800098a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800098c:	e010      	b.n	80009b0 <can_tx+0x58>
			sum += adc_buf[i];
 800098e:	4a63      	ldr	r2, [pc, #396]	@ (8000b1c <can_tx+0x1c4>)
 8000990:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000992:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000996:	ee07 3a90 	vmov	s15, r3
 800099a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800099e:	ed97 7a1b 	vldr	s14, [r7, #108]	@ 0x6c
 80009a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80009a6:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
		for (int i = 0; i < ADC_BUF_LEN; i++) {
 80009aa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80009ac:	3301      	adds	r3, #1
 80009ae:	66bb      	str	r3, [r7, #104]	@ 0x68
 80009b0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80009b2:	2b0f      	cmp	r3, #15
 80009b4:	ddeb      	ble.n	800098e <can_tx+0x36>
		}


		avg = fabs(sum / ADC_BUF_LEN);
 80009b6:	ed97 7a1b 	vldr	s14, [r7, #108]	@ 0x6c
 80009ba:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 80009be:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80009c2:	eef0 7ae7 	vabs.f32	s15, s15
 80009c6:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
//		HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);

//		Current.f = avg / 25600.0f;

		// 2. Convert to integer representation (0-100)
		uint8_t display_value = (uint8_t) (Current.f * 100.0f);
 80009ca:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80009ce:	ed9f 7a54 	vldr	s14, [pc, #336]	@ 8000b20 <can_tx+0x1c8>
 80009d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80009d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80009da:	edc7 7a00 	vstr	s15, [r7]
 80009de:	783b      	ldrb	r3, [r7, #0]
 80009e0:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
//
//		// 3. Print with implied decimal
		snprintf(msg, sizeof(msg), "Value: 0.%02d\r\n", display_value); // Prints 0.00-0.10
 80009e4:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 80009e8:	f107 000c 	add.w	r0, r7, #12
 80009ec:	4a4d      	ldr	r2, [pc, #308]	@ (8000b24 <can_tx+0x1cc>)
 80009ee:	2120      	movs	r1, #32
 80009f0:	f007 f85c 	bl	8007aac <sniprintf>

		Current.f = fabs(0.15 - avg / 25600.0f);	//low for testing purposes, maps to max 0.15
 80009f4:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 80009f8:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 8000b28 <can_tx+0x1d0>
 80009fc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000a00:	ee16 0a90 	vmov	r0, s13
 8000a04:	f7ff fda0 	bl	8000548 <__aeabi_f2d>
 8000a08:	4602      	mov	r2, r0
 8000a0a:	460b      	mov	r3, r1
 8000a0c:	a140      	add	r1, pc, #256	@ (adr r1, 8000b10 <can_tx+0x1b8>)
 8000a0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000a12:	f7ff fc39 	bl	8000288 <__aeabi_dsub>
 8000a16:	4602      	mov	r2, r0
 8000a18:	460b      	mov	r3, r1
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	f7ff fdeb 	bl	80005f8 <__aeabi_d2f>
 8000a22:	ee07 0a90 	vmov	s15, r0
 8000a26:	eef0 7ae7 	vabs.f32	s15, s15
 8000a2a:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
		HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8000a2e:	f107 030c 	add.w	r3, r7, #12
 8000a32:	4618      	mov	r0, r3
 8000a34:	f7ff fbcc 	bl	80001d0 <strlen>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	b29a      	uxth	r2, r3
 8000a3c:	f107 010c 	add.w	r1, r7, #12
 8000a40:	f04f 33ff 	mov.w	r3, #4294967295
 8000a44:	4839      	ldr	r0, [pc, #228]	@ (8000b2c <can_tx+0x1d4>)
 8000a46:	f004 fe37 	bl	80056b8 <HAL_UART_Transmit>

		// gear selection
		// have to write in conditions for braking later
		//drive
		if (!HAL_GPIO_ReadPin(GPIOA, Drive_Pin) && AvgVelocity.f >= 0) {
 8000a4a:	2180      	movs	r1, #128	@ 0x80
 8000a4c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a50:	f002 ff00 	bl	8003854 <HAL_GPIO_ReadPin>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d10a      	bne.n	8000a70 <can_tx+0x118>
 8000a5a:	4b35      	ldr	r3, [pc, #212]	@ (8000b30 <can_tx+0x1d8>)
 8000a5c:	edd3 7a00 	vldr	s15, [r3]
 8000a60:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000a64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a68:	db02      	blt.n	8000a70 <can_tx+0x118>
			Velocity.f = 500.0f;
 8000a6a:	4b2b      	ldr	r3, [pc, #172]	@ (8000b18 <can_tx+0x1c0>)
 8000a6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000a6e:	e018      	b.n	8000aa2 <can_tx+0x14a>
		//reverse
		} else if (!HAL_GPIO_ReadPin(GPIOA, Reverse_Pin) && AvgVelocity.f <= 0){
 8000a70:	2120      	movs	r1, #32
 8000a72:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a76:	f002 feed 	bl	8003854 <HAL_GPIO_ReadPin>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d10a      	bne.n	8000a96 <can_tx+0x13e>
 8000a80:	4b2b      	ldr	r3, [pc, #172]	@ (8000b30 <can_tx+0x1d8>)
 8000a82:	edd3 7a00 	vldr	s15, [r3]
 8000a86:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000a8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a8e:	d802      	bhi.n	8000a96 <can_tx+0x13e>
			Velocity.f = -500.0f;
 8000a90:	4b28      	ldr	r3, [pc, #160]	@ (8000b34 <can_tx+0x1dc>)
 8000a92:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000a94:	e005      	b.n	8000aa2 <can_tx+0x14a>
		//neutral
		} else {
			Velocity.f = 0;
 8000a96:	f04f 0300 	mov.w	r3, #0
 8000a9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
			Current.f = 0;
 8000a9c:	f04f 0300 	mov.w	r3, #0
 8000aa0:	637b      	str	r3, [r7, #52]	@ 0x34
		}


//		Current.f = 0.00000006*(pow(avg*0.1, 2));
		txData[0] = Velocity.byte[0];
 8000aa2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000aa6:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
		txData[1] = Velocity.byte[1];
 8000aaa:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8000aae:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
		txData[2] = Velocity.byte[2];
 8000ab2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000ab6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
		txData[3] = Velocity.byte[3];
 8000aba:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000abe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

		txData[4] = Current.byte[0];
 8000ac2:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8000ac6:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
		txData[5] = Current.byte[1];
 8000aca:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8000ace:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
		txData[6] = Current.byte[2];
 8000ad2:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8000ad6:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
		txData[7] = Current.byte[3];
 8000ada:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000ade:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
//		txData[6] = 0x4C;
//		txData[7] = 0x3D;

		//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);

		if (HAL_CAN_AddTxMessage(&hcan, &txHeader, txData, &txMailbox)
 8000ae2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000ae6:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8000aea:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8000aee:	4812      	ldr	r0, [pc, #72]	@ (8000b38 <can_tx+0x1e0>)
 8000af0:	f001 fe7d 	bl	80027ee <HAL_CAN_AddTxMessage>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <can_tx+0x1a6>
				!= HAL_OK) {
			Error_Handler();
 8000afa:	f000 fbcf 	bl	800129c <Error_Handler>
		}
//		  HAL_UART_Transmit(&huart2, "hello world\n", 20, HAL_MAX_DELAY);

		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 8000afe:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b02:	480e      	ldr	r0, [pc, #56]	@ (8000b3c <can_tx+0x1e4>)
 8000b04:	f002 fed6 	bl	80038b4 <HAL_GPIO_TogglePin>

		osDelay(100); // send every 1 second
 8000b08:	2064      	movs	r0, #100	@ 0x64
 8000b0a:	f005 fa1b 	bl	8005f44 <osDelay>
	while (1) {
 8000b0e:	e738      	b.n	8000982 <can_tx+0x2a>
 8000b10:	33333333 	.word	0x33333333
 8000b14:	3fc33333 	.word	0x3fc33333
 8000b18:	43fa0000 	.word	0x43fa0000
 8000b1c:	20000480 	.word	0x20000480
 8000b20:	42c80000 	.word	0x42c80000
 8000b24:	08008438 	.word	0x08008438
 8000b28:	46c80000 	.word	0x46c80000
 8000b2c:	200003f4 	.word	0x200003f4
 8000b30:	200000cc 	.word	0x200000cc
 8000b34:	c3fa0000 	.word	0xc3fa0000
 8000b38:	200003cc 	.word	0x200003cc
 8000b3c:	48000400 	.word	0x48000400

08000b40 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000b40:	b480      	push	{r7}
 8000b42:	b085      	sub	sp, #20
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	60f8      	str	r0, [r7, #12]
 8000b48:	60b9      	str	r1, [r7, #8]
 8000b4a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	4a07      	ldr	r2, [pc, #28]	@ (8000b6c <vApplicationGetIdleTaskMemory+0x2c>)
 8000b50:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000b52:	68bb      	ldr	r3, [r7, #8]
 8000b54:	4a06      	ldr	r2, [pc, #24]	@ (8000b70 <vApplicationGetIdleTaskMemory+0x30>)
 8000b56:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	2280      	movs	r2, #128	@ 0x80
 8000b5c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000b5e:	bf00      	nop
 8000b60:	3714      	adds	r7, #20
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	200000e4 	.word	0x200000e4
 8000b70:	20000138 	.word	0x20000138

08000b74 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000b74:	b5b0      	push	{r4, r5, r7, lr}
 8000b76:	b0a4      	sub	sp, #144	@ 0x90
 8000b78:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000b7a:	f000 fdd7 	bl	800172c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000b7e:	f000 f8a3 	bl	8000cc8 <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	CANq = xQueueCreate(100, sizeof(struct CANFrame));
 8000b82:	2200      	movs	r2, #0
 8000b84:	210c      	movs	r1, #12
 8000b86:	2064      	movs	r0, #100	@ 0x64
 8000b88:	f005 fb0e 	bl	80061a8 <xQueueGenericCreate>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	4a40      	ldr	r2, [pc, #256]	@ (8000c90 <main+0x11c>)
 8000b90:	6013      	str	r3, [r2, #0]

	osThreadDef(parked, parked_init, osPriorityLow, 0, 128);
 8000b92:	4b40      	ldr	r3, [pc, #256]	@ (8000c94 <main+0x120>)
 8000b94:	f107 0474 	add.w	r4, r7, #116	@ 0x74
 8000b98:	461d      	mov	r5, r3
 8000b9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b9e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ba2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	parkedHandle = osThreadCreate(osThread(parked), NULL);
 8000ba6:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000baa:	2100      	movs	r1, #0
 8000bac:	4618      	mov	r0, r3
 8000bae:	f005 f97d 	bl	8005eac <osThreadCreate>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	4a38      	ldr	r2, [pc, #224]	@ (8000c98 <main+0x124>)
 8000bb6:	6013      	str	r3, [r2, #0]

	osThreadDef(canTxTask, can_tx, osPriorityNormal, 0, 128);
 8000bb8:	4b38      	ldr	r3, [pc, #224]	@ (8000c9c <main+0x128>)
 8000bba:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 8000bbe:	461d      	mov	r5, r3
 8000bc0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bc2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bc4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000bc8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	canTxTaskHandle = osThreadCreate(osThread(canTxTask), NULL);
 8000bcc:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f005 f96a 	bl	8005eac <osThreadCreate>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	4a31      	ldr	r2, [pc, #196]	@ (8000ca0 <main+0x12c>)
 8000bdc:	6013      	str	r3, [r2, #0]

	osThreadDef(canRxTask, can_rx, osPriorityHigh, 0, 128);
 8000bde:	4b31      	ldr	r3, [pc, #196]	@ (8000ca4 <main+0x130>)
 8000be0:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8000be4:	461d      	mov	r5, r3
 8000be6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000be8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bea:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000bee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	canRxTaskHandle = osThreadCreate(osThread(canRxTask), NULL);
 8000bf2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f005 f957 	bl	8005eac <osThreadCreate>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	4a29      	ldr	r2, [pc, #164]	@ (8000ca8 <main+0x134>)
 8000c02:	6013      	str	r3, [r2, #0]

	osThreadDef(buttons_task_100ms, buttons_100ms, osPriorityNormal, 0, 128);
 8000c04:	4b29      	ldr	r3, [pc, #164]	@ (8000cac <main+0x138>)
 8000c06:	f107 0420 	add.w	r4, r7, #32
 8000c0a:	461d      	mov	r5, r3
 8000c0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c10:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c14:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	buttons_100ms_TaskHandle = osThreadCreate(osThread(buttons_task_100ms), NULL);
 8000c18:	f107 0320 	add.w	r3, r7, #32
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f005 f944 	bl	8005eac <osThreadCreate>
 8000c24:	4603      	mov	r3, r0
 8000c26:	4a22      	ldr	r2, [pc, #136]	@ (8000cb0 <main+0x13c>)
 8000c28:	6013      	str	r3, [r2, #0]

	osThreadDef(buttons_task_500ms, buttons_500ms, osPriorityNormal, 0, 128);
 8000c2a:	4b22      	ldr	r3, [pc, #136]	@ (8000cb4 <main+0x140>)
 8000c2c:	1d3c      	adds	r4, r7, #4
 8000c2e:	461d      	mov	r5, r3
 8000c30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c34:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c38:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		buttons_500ms_TaskHandle = osThreadCreate(osThread(buttons_task_500ms), NULL);
 8000c3c:	1d3b      	adds	r3, r7, #4
 8000c3e:	2100      	movs	r1, #0
 8000c40:	4618      	mov	r0, r3
 8000c42:	f005 f933 	bl	8005eac <osThreadCreate>
 8000c46:	4603      	mov	r3, r0
 8000c48:	4a1b      	ldr	r2, [pc, #108]	@ (8000cb8 <main+0x144>)
 8000c4a:	6013      	str	r3, [r2, #0]
//		osThreadId RightSignalTaskHandle;
//		osThreadId HazardTaskHandle;
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000c4c:	f000 f9c0 	bl	8000fd0 <MX_GPIO_Init>
	MX_ADC1_Init();
 8000c50:	f000 f892 	bl	8000d78 <MX_ADC1_Init>
	MX_DMA_Init();
 8000c54:	f000 f978 	bl	8000f48 <MX_DMA_Init>
	MX_USART2_UART_Init();
 8000c58:	f000 f946 	bl	8000ee8 <MX_USART2_UART_Init>
	MX_CAN_Init();
 8000c5c:	f000 f8f0 	bl	8000e40 <MX_CAN_Init>

	/* USER CODE BEGIN 2 */
	HAL_CAN_Start(&hcan);
 8000c60:	4816      	ldr	r0, [pc, #88]	@ (8000cbc <main+0x148>)
 8000c62:	f001 fd80 	bl	8002766 <HAL_CAN_Start>

	if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING)
 8000c66:	2102      	movs	r1, #2
 8000c68:	4814      	ldr	r0, [pc, #80]	@ (8000cbc <main+0x148>)
 8000c6a:	f001 ffb2 	bl	8002bd2 <HAL_CAN_ActivateNotification>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <main+0x104>
			!= HAL_OK) {
		Error_Handler();
 8000c74:	f000 fb12 	bl	800129c <Error_Handler>
	}

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc_buf, ADC_BUF_LEN);
 8000c78:	2210      	movs	r2, #16
 8000c7a:	4911      	ldr	r1, [pc, #68]	@ (8000cc0 <main+0x14c>)
 8000c7c:	4811      	ldr	r0, [pc, #68]	@ (8000cc4 <main+0x150>)
 8000c7e:	f000 ff2f 	bl	8001ae0 <HAL_ADC_Start_DMA>
	/* add threads, ... */

	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 8000c82:	f005 f90c 	bl	8005e9e <osKernelStart>
	Enable_DMA_Interrupts();
 8000c86:	f000 fac1 	bl	800120c <Enable_DMA_Interrupts>

	/* We should never get here as control is now taken by the scheduler */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000c8a:	bf00      	nop
 8000c8c:	e7fd      	b.n	8000c8a <main+0x116>
 8000c8e:	bf00      	nop
 8000c90:	200004b4 	.word	0x200004b4
 8000c94:	08008450 	.word	0x08008450
 8000c98:	200004a0 	.word	0x200004a0
 8000c9c:	08008478 	.word	0x08008478
 8000ca0:	200004a4 	.word	0x200004a4
 8000ca4:	080084a0 	.word	0x080084a0
 8000ca8:	200004a8 	.word	0x200004a8
 8000cac:	080084d0 	.word	0x080084d0
 8000cb0:	200004ac 	.word	0x200004ac
 8000cb4:	08008500 	.word	0x08008500
 8000cb8:	200004b0 	.word	0x200004b0
 8000cbc:	200003cc 	.word	0x200003cc
 8000cc0:	20000480 	.word	0x20000480
 8000cc4:	20000338 	.word	0x20000338

08000cc8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b09c      	sub	sp, #112	@ 0x70
 8000ccc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000cce:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000cd2:	2228      	movs	r2, #40	@ 0x28
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f006 ff1c 	bl	8007b14 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000cdc:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	601a      	str	r2, [r3, #0]
 8000ce4:	605a      	str	r2, [r3, #4]
 8000ce6:	609a      	str	r2, [r3, #8]
 8000ce8:	60da      	str	r2, [r3, #12]
 8000cea:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8000cec:	463b      	mov	r3, r7
 8000cee:	2234      	movs	r2, #52	@ 0x34
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f006 ff0e 	bl	8007b14 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	65bb      	str	r3, [r7, #88]	@ 0x58
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d00:	2310      	movs	r3, #16
 8000d02:	65fb      	str	r3, [r7, #92]	@ 0x5c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d04:	2302      	movs	r3, #2
 8000d06:	667b      	str	r3, [r7, #100]	@ 0x64
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	66bb      	str	r3, [r7, #104]	@ 0x68
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000d0c:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8000d10:	66fb      	str	r3, [r7, #108]	@ 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000d12:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000d16:	4618      	mov	r0, r3
 8000d18:	f002 fde6 	bl	80038e8 <HAL_RCC_OscConfig>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <SystemClock_Config+0x5e>
		Error_Handler();
 8000d22:	f000 fabb 	bl	800129c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000d26:	230f      	movs	r3, #15
 8000d28:	637b      	str	r3, [r7, #52]	@ 0x34
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d2a:	2302      	movs	r3, #2
 8000d2c:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d32:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d36:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	647b      	str	r3, [r7, #68]	@ 0x44

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000d3c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000d40:	2102      	movs	r1, #2
 8000d42:	4618      	mov	r0, r3
 8000d44:	f003 fe0e 	bl	8004964 <HAL_RCC_ClockConfig>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <SystemClock_Config+0x8a>
		Error_Handler();
 8000d4e:	f000 faa5 	bl	800129c <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC1;
 8000d52:	2380      	movs	r3, #128	@ 0x80
 8000d54:	603b      	str	r3, [r7, #0]
	PeriphClkInit.Adc1ClockSelection = RCC_ADC1PLLCLK_DIV1;
 8000d56:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d5a:	61bb      	str	r3, [r7, #24]

	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8000d5c:	463b      	mov	r3, r7
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f004 f852 	bl	8004e08 <HAL_RCCEx_PeriphCLKConfig>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <SystemClock_Config+0xa6>
		Error_Handler();
 8000d6a:	f000 fa97 	bl	800129c <Error_Handler>
	}
}
 8000d6e:	bf00      	nop
 8000d70:	3770      	adds	r7, #112	@ 0x70
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
	...

08000d78 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b086      	sub	sp, #24
 8000d7c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000d7e:	463b      	mov	r3, r7
 8000d80:	2200      	movs	r2, #0
 8000d82:	601a      	str	r2, [r3, #0]
 8000d84:	605a      	str	r2, [r3, #4]
 8000d86:	609a      	str	r2, [r3, #8]
 8000d88:	60da      	str	r2, [r3, #12]
 8000d8a:	611a      	str	r2, [r3, #16]
 8000d8c:	615a      	str	r2, [r3, #20]
	__HAL_LINKDMA(&hadc1, DMA_Handle, hdma_adc1);
 8000d8e:	4b2a      	ldr	r3, [pc, #168]	@ (8000e38 <MX_ADC1_Init+0xc0>)
 8000d90:	4a2a      	ldr	r2, [pc, #168]	@ (8000e3c <MX_ADC1_Init+0xc4>)
 8000d92:	639a      	str	r2, [r3, #56]	@ 0x38
 8000d94:	4b29      	ldr	r3, [pc, #164]	@ (8000e3c <MX_ADC1_Init+0xc4>)
 8000d96:	4a28      	ldr	r2, [pc, #160]	@ (8000e38 <MX_ADC1_Init+0xc0>)
 8000d98:	625a      	str	r2, [r3, #36]	@ 0x24

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 8000d9a:	4b27      	ldr	r3, [pc, #156]	@ (8000e38 <MX_ADC1_Init+0xc0>)
 8000d9c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000da0:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000da2:	4b25      	ldr	r3, [pc, #148]	@ (8000e38 <MX_ADC1_Init+0xc0>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000da8:	4b23      	ldr	r3, [pc, #140]	@ (8000e38 <MX_ADC1_Init+0xc0>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000dae:	4b22      	ldr	r3, [pc, #136]	@ (8000e38 <MX_ADC1_Init+0xc0>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8000db4:	4b20      	ldr	r3, [pc, #128]	@ (8000e38 <MX_ADC1_Init+0xc0>)
 8000db6:	2201      	movs	r2, #1
 8000db8:	765a      	strb	r2, [r3, #25]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000dba:	4b1f      	ldr	r3, [pc, #124]	@ (8000e38 <MX_ADC1_Init+0xc0>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000dc2:	4b1d      	ldr	r3, [pc, #116]	@ (8000e38 <MX_ADC1_Init+0xc0>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	62da      	str	r2, [r3, #44]	@ 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000dc8:	4b1b      	ldr	r3, [pc, #108]	@ (8000e38 <MX_ADC1_Init+0xc0>)
 8000dca:	2201      	movs	r2, #1
 8000dcc:	629a      	str	r2, [r3, #40]	@ 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000dce:	4b1a      	ldr	r3, [pc, #104]	@ (8000e38 <MX_ADC1_Init+0xc0>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 8000dd4:	4b18      	ldr	r3, [pc, #96]	@ (8000e38 <MX_ADC1_Init+0xc0>)
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = ENABLE;
 8000dda:	4b17      	ldr	r3, [pc, #92]	@ (8000e38 <MX_ADC1_Init+0xc0>)
 8000ddc:	2201      	movs	r2, #1
 8000dde:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000de2:	4b15      	ldr	r3, [pc, #84]	@ (8000e38 <MX_ADC1_Init+0xc0>)
 8000de4:	2204      	movs	r2, #4
 8000de6:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 8000de8:	4b13      	ldr	r3, [pc, #76]	@ (8000e38 <MX_ADC1_Init+0xc0>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	761a      	strb	r2, [r3, #24]
	hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000dee:	4b12      	ldr	r3, [pc, #72]	@ (8000e38 <MX_ADC1_Init+0xc0>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	635a      	str	r2, [r3, #52]	@ 0x34
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8000df4:	4810      	ldr	r0, [pc, #64]	@ (8000e38 <MX_ADC1_Init+0xc0>)
 8000df6:	f000 fced 	bl	80017d4 <HAL_ADC_Init>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <MX_ADC1_Init+0x8c>
		Error_Handler();
 8000e00:	f000 fa4c 	bl	800129c <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 8000e04:	2301      	movs	r3, #1
 8000e06:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	607b      	str	r3, [r7, #4]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	60fb      	str	r3, [r7, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLE_5;
 8000e10:	2301      	movs	r3, #1
 8000e12:	60bb      	str	r3, [r7, #8]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e14:	2300      	movs	r3, #0
 8000e16:	613b      	str	r3, [r7, #16]
	sConfig.Offset = 0;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	617b      	str	r3, [r7, #20]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000e1c:	463b      	mov	r3, r7
 8000e1e:	4619      	mov	r1, r3
 8000e20:	4805      	ldr	r0, [pc, #20]	@ (8000e38 <MX_ADC1_Init+0xc0>)
 8000e22:	f000 fef9 	bl	8001c18 <HAL_ADC_ConfigChannel>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <MX_ADC1_Init+0xb8>
		Error_Handler();
 8000e2c:	f000 fa36 	bl	800129c <Error_Handler>
//  }
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8000e30:	bf00      	nop
 8000e32:	3718      	adds	r7, #24
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	20000338 	.word	0x20000338
 8000e3c:	20000388 	.word	0x20000388

08000e40 <MX_CAN_Init>:
/**
 * @brief CAN Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN_Init(void) {
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b08a      	sub	sp, #40	@ 0x28
 8000e44:	af00      	add	r7, sp, #0
	/* USER CODE END CAN_Init 0 */

	/* USER CODE BEGIN CAN_Init 1 */

	/* USER CODE END CAN_Init 1 */
	hcan.Instance = CAN;
 8000e46:	4b26      	ldr	r3, [pc, #152]	@ (8000ee0 <MX_CAN_Init+0xa0>)
 8000e48:	4a26      	ldr	r2, [pc, #152]	@ (8000ee4 <MX_CAN_Init+0xa4>)
 8000e4a:	601a      	str	r2, [r3, #0]
	hcan.Init.Prescaler = 8;
 8000e4c:	4b24      	ldr	r3, [pc, #144]	@ (8000ee0 <MX_CAN_Init+0xa0>)
 8000e4e:	2208      	movs	r2, #8
 8000e50:	605a      	str	r2, [r3, #4]
	hcan.Init.Mode = CAN_MODE_LOOPBACK;
 8000e52:	4b23      	ldr	r3, [pc, #140]	@ (8000ee0 <MX_CAN_Init+0xa0>)
 8000e54:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000e58:	609a      	str	r2, [r3, #8]
	hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000e5a:	4b21      	ldr	r3, [pc, #132]	@ (8000ee0 <MX_CAN_Init+0xa0>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	60da      	str	r2, [r3, #12]
	hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000e60:	4b1f      	ldr	r3, [pc, #124]	@ (8000ee0 <MX_CAN_Init+0xa0>)
 8000e62:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000e66:	611a      	str	r2, [r3, #16]
	hcan.Init.TimeSeg2 = CAN_BS2_5TQ;
 8000e68:	4b1d      	ldr	r3, [pc, #116]	@ (8000ee0 <MX_CAN_Init+0xa0>)
 8000e6a:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000e6e:	615a      	str	r2, [r3, #20]
	hcan.Init.TimeTriggeredMode = DISABLE;
 8000e70:	4b1b      	ldr	r3, [pc, #108]	@ (8000ee0 <MX_CAN_Init+0xa0>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	761a      	strb	r2, [r3, #24]
	hcan.Init.AutoBusOff = DISABLE;
 8000e76:	4b1a      	ldr	r3, [pc, #104]	@ (8000ee0 <MX_CAN_Init+0xa0>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	765a      	strb	r2, [r3, #25]
	hcan.Init.AutoWakeUp = DISABLE;
 8000e7c:	4b18      	ldr	r3, [pc, #96]	@ (8000ee0 <MX_CAN_Init+0xa0>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	769a      	strb	r2, [r3, #26]
	hcan.Init.AutoRetransmission = DISABLE;
 8000e82:	4b17      	ldr	r3, [pc, #92]	@ (8000ee0 <MX_CAN_Init+0xa0>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	76da      	strb	r2, [r3, #27]
	hcan.Init.ReceiveFifoLocked = DISABLE;
 8000e88:	4b15      	ldr	r3, [pc, #84]	@ (8000ee0 <MX_CAN_Init+0xa0>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	771a      	strb	r2, [r3, #28]
	hcan.Init.TransmitFifoPriority = DISABLE;
 8000e8e:	4b14      	ldr	r3, [pc, #80]	@ (8000ee0 <MX_CAN_Init+0xa0>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan) != HAL_OK) {
 8000e94:	4812      	ldr	r0, [pc, #72]	@ (8000ee0 <MX_CAN_Init+0xa0>)
 8000e96:	f001 faa1 	bl	80023dc <HAL_CAN_Init>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <MX_CAN_Init+0x64>
		Error_Handler();
 8000ea0:	f000 f9fc 	bl	800129c <Error_Handler>

	//Set a up a filter
	//Allow all messages to pass through from any ID
	CAN_FilterTypeDef canfilterconfig;

	canfilterconfig.FilterActivation = ENABLE;
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	623b      	str	r3, [r7, #32]
	canfilterconfig.FilterBank = 0;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	617b      	str	r3, [r7, #20]
	canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000eac:	2300      	movs	r3, #0
 8000eae:	613b      	str	r3, [r7, #16]
	canfilterconfig.FilterIdHigh = 0x0000;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	603b      	str	r3, [r7, #0]
	canfilterconfig.FilterIdLow = 0x0000;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	607b      	str	r3, [r7, #4]
	canfilterconfig.FilterMaskIdHigh = 0x0000;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	60bb      	str	r3, [r7, #8]
	canfilterconfig.FilterMaskIdLow = 0x0000;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	60fb      	str	r3, [r7, #12]
	canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	61bb      	str	r3, [r7, #24]
	canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	61fb      	str	r3, [r7, #28]
	canfilterconfig.SlaveStartFilterBank = 14;
 8000ec8:	230e      	movs	r3, #14
 8000eca:	627b      	str	r3, [r7, #36]	@ 0x24

	HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 8000ecc:	463b      	mov	r3, r7
 8000ece:	4619      	mov	r1, r3
 8000ed0:	4803      	ldr	r0, [pc, #12]	@ (8000ee0 <MX_CAN_Init+0xa0>)
 8000ed2:	f001 fb7e 	bl	80025d2 <HAL_CAN_ConfigFilter>

	/* USER CODE END CAN_Init 2 */

}
 8000ed6:	bf00      	nop
 8000ed8:	3728      	adds	r7, #40	@ 0x28
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	200003cc 	.word	0x200003cc
 8000ee4:	40006400 	.word	0x40006400

08000ee8 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000eec:	4b14      	ldr	r3, [pc, #80]	@ (8000f40 <MX_USART2_UART_Init+0x58>)
 8000eee:	4a15      	ldr	r2, [pc, #84]	@ (8000f44 <MX_USART2_UART_Init+0x5c>)
 8000ef0:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 57600;
 8000ef2:	4b13      	ldr	r3, [pc, #76]	@ (8000f40 <MX_USART2_UART_Init+0x58>)
 8000ef4:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 8000ef8:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000efa:	4b11      	ldr	r3, [pc, #68]	@ (8000f40 <MX_USART2_UART_Init+0x58>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000f00:	4b0f      	ldr	r3, [pc, #60]	@ (8000f40 <MX_USART2_UART_Init+0x58>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000f06:	4b0e      	ldr	r3, [pc, #56]	@ (8000f40 <MX_USART2_UART_Init+0x58>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000f0c:	4b0c      	ldr	r3, [pc, #48]	@ (8000f40 <MX_USART2_UART_Init+0x58>)
 8000f0e:	220c      	movs	r2, #12
 8000f10:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f12:	4b0b      	ldr	r3, [pc, #44]	@ (8000f40 <MX_USART2_UART_Init+0x58>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f18:	4b09      	ldr	r3, [pc, #36]	@ (8000f40 <MX_USART2_UART_Init+0x58>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f1e:	4b08      	ldr	r3, [pc, #32]	@ (8000f40 <MX_USART2_UART_Init+0x58>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f24:	4b06      	ldr	r3, [pc, #24]	@ (8000f40 <MX_USART2_UART_Init+0x58>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	625a      	str	r2, [r3, #36]	@ 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000f2a:	4805      	ldr	r0, [pc, #20]	@ (8000f40 <MX_USART2_UART_Init+0x58>)
 8000f2c:	f004 fb76 	bl	800561c <HAL_UART_Init>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <MX_USART2_UART_Init+0x52>
		Error_Handler();
 8000f36:	f000 f9b1 	bl	800129c <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000f3a:	bf00      	nop
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	200003f4 	.word	0x200003f4
 8000f44:	40004400 	.word	0x40004400

08000f48 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
//	/* DMA interrupt init */
//	/* DMA1_Channel1_IRQn interrupt configuration */
//	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
//	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8000f4e:	4b1c      	ldr	r3, [pc, #112]	@ (8000fc0 <MX_DMA_Init+0x78>)
 8000f50:	695b      	ldr	r3, [r3, #20]
 8000f52:	4a1b      	ldr	r2, [pc, #108]	@ (8000fc0 <MX_DMA_Init+0x78>)
 8000f54:	f043 0301 	orr.w	r3, r3, #1
 8000f58:	6153      	str	r3, [r2, #20]
 8000f5a:	4b19      	ldr	r3, [pc, #100]	@ (8000fc0 <MX_DMA_Init+0x78>)
 8000f5c:	695b      	ldr	r3, [r3, #20]
 8000f5e:	f003 0301 	and.w	r3, r3, #1
 8000f62:	607b      	str	r3, [r7, #4]
 8000f64:	687b      	ldr	r3, [r7, #4]

	/* Configure DMA for ADC1 */
	hdma_adc1.Instance = DMA1_Channel1; // replace if using a different channel
 8000f66:	4b17      	ldr	r3, [pc, #92]	@ (8000fc4 <MX_DMA_Init+0x7c>)
 8000f68:	4a17      	ldr	r2, [pc, #92]	@ (8000fc8 <MX_DMA_Init+0x80>)
 8000f6a:	601a      	str	r2, [r3, #0]
	hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f6c:	4b15      	ldr	r3, [pc, #84]	@ (8000fc4 <MX_DMA_Init+0x7c>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	605a      	str	r2, [r3, #4]
	hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f72:	4b14      	ldr	r3, [pc, #80]	@ (8000fc4 <MX_DMA_Init+0x7c>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	609a      	str	r2, [r3, #8]
	hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000f78:	4b12      	ldr	r3, [pc, #72]	@ (8000fc4 <MX_DMA_Init+0x7c>)
 8000f7a:	2280      	movs	r2, #128	@ 0x80
 8000f7c:	60da      	str	r2, [r3, #12]
	hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f7e:	4b11      	ldr	r3, [pc, #68]	@ (8000fc4 <MX_DMA_Init+0x7c>)
 8000f80:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f84:	611a      	str	r2, [r3, #16]
	hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f86:	4b0f      	ldr	r3, [pc, #60]	@ (8000fc4 <MX_DMA_Init+0x7c>)
 8000f88:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f8c:	615a      	str	r2, [r3, #20]
	hdma_adc1.Init.Mode = DMA_CIRCULAR; // 🔁 circular buffer
 8000f8e:	4b0d      	ldr	r3, [pc, #52]	@ (8000fc4 <MX_DMA_Init+0x7c>)
 8000f90:	2220      	movs	r2, #32
 8000f92:	619a      	str	r2, [r3, #24]
	hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8000f94:	4b0b      	ldr	r3, [pc, #44]	@ (8000fc4 <MX_DMA_Init+0x7c>)
 8000f96:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f9a:	61da      	str	r2, [r3, #28]

	if (HAL_DMA_Init(&hdma_adc1) != HAL_OK) {
 8000f9c:	4809      	ldr	r0, [pc, #36]	@ (8000fc4 <MX_DMA_Init+0x7c>)
 8000f9e:	f002 f94f 	bl	8003240 <HAL_DMA_Init>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <MX_DMA_Init+0x64>
		Error_Handler();
 8000fa8:	f000 f978 	bl	800129c <Error_Handler>
	}

	// Link DMA to ADC
	__HAL_LINKDMA(&hadc1, DMA_Handle, hdma_adc1);
 8000fac:	4b07      	ldr	r3, [pc, #28]	@ (8000fcc <MX_DMA_Init+0x84>)
 8000fae:	4a05      	ldr	r2, [pc, #20]	@ (8000fc4 <MX_DMA_Init+0x7c>)
 8000fb0:	639a      	str	r2, [r3, #56]	@ 0x38
 8000fb2:	4b04      	ldr	r3, [pc, #16]	@ (8000fc4 <MX_DMA_Init+0x7c>)
 8000fb4:	4a05      	ldr	r2, [pc, #20]	@ (8000fcc <MX_DMA_Init+0x84>)
 8000fb6:	625a      	str	r2, [r3, #36]	@ 0x24

	/* DMA interrupt init */
//    HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
//    HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
}
 8000fb8:	bf00      	nop
 8000fba:	3708      	adds	r7, #8
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	40021000 	.word	0x40021000
 8000fc4:	20000388 	.word	0x20000388
 8000fc8:	40020008 	.word	0x40020008
 8000fcc:	20000338 	.word	0x20000338

08000fd0 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b08a      	sub	sp, #40	@ 0x28
 8000fd4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000fd6:	f107 0314 	add.w	r3, r7, #20
 8000fda:	2200      	movs	r2, #0
 8000fdc:	601a      	str	r2, [r3, #0]
 8000fde:	605a      	str	r2, [r3, #4]
 8000fe0:	609a      	str	r2, [r3, #8]
 8000fe2:	60da      	str	r2, [r3, #12]
 8000fe4:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000fe6:	4b86      	ldr	r3, [pc, #536]	@ (8001200 <MX_GPIO_Init+0x230>)
 8000fe8:	695b      	ldr	r3, [r3, #20]
 8000fea:	4a85      	ldr	r2, [pc, #532]	@ (8001200 <MX_GPIO_Init+0x230>)
 8000fec:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000ff0:	6153      	str	r3, [r2, #20]
 8000ff2:	4b83      	ldr	r3, [pc, #524]	@ (8001200 <MX_GPIO_Init+0x230>)
 8000ff4:	695b      	ldr	r3, [r3, #20]
 8000ff6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000ffa:	613b      	str	r3, [r7, #16]
 8000ffc:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8000ffe:	4b80      	ldr	r3, [pc, #512]	@ (8001200 <MX_GPIO_Init+0x230>)
 8001000:	695b      	ldr	r3, [r3, #20]
 8001002:	4a7f      	ldr	r2, [pc, #508]	@ (8001200 <MX_GPIO_Init+0x230>)
 8001004:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001008:	6153      	str	r3, [r2, #20]
 800100a:	4b7d      	ldr	r3, [pc, #500]	@ (8001200 <MX_GPIO_Init+0x230>)
 800100c:	695b      	ldr	r3, [r3, #20]
 800100e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001012:	60fb      	str	r3, [r7, #12]
 8001014:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001016:	4b7a      	ldr	r3, [pc, #488]	@ (8001200 <MX_GPIO_Init+0x230>)
 8001018:	695b      	ldr	r3, [r3, #20]
 800101a:	4a79      	ldr	r2, [pc, #484]	@ (8001200 <MX_GPIO_Init+0x230>)
 800101c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001020:	6153      	str	r3, [r2, #20]
 8001022:	4b77      	ldr	r3, [pc, #476]	@ (8001200 <MX_GPIO_Init+0x230>)
 8001024:	695b      	ldr	r3, [r3, #20]
 8001026:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800102a:	60bb      	str	r3, [r7, #8]
 800102c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800102e:	4b74      	ldr	r3, [pc, #464]	@ (8001200 <MX_GPIO_Init+0x230>)
 8001030:	695b      	ldr	r3, [r3, #20]
 8001032:	4a73      	ldr	r2, [pc, #460]	@ (8001200 <MX_GPIO_Init+0x230>)
 8001034:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001038:	6153      	str	r3, [r2, #20]
 800103a:	4b71      	ldr	r3, [pc, #452]	@ (8001200 <MX_GPIO_Init+0x230>)
 800103c:	695b      	ldr	r3, [r3, #20]
 800103e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001042:	607b      	str	r3, [r7, #4]
 8001044:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001046:	2200      	movs	r2, #0
 8001048:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800104c:	486d      	ldr	r0, [pc, #436]	@ (8001204 <MX_GPIO_Init+0x234>)
 800104e:	f002 fc19 	bl	8003884 <HAL_GPIO_WritePin>

	// default pins
	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8001052:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001056:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001058:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800105c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105e:	2300      	movs	r3, #0
 8001060:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001062:	f107 0314 	add.w	r3, r7, #20
 8001066:	4619      	mov	r1, r3
 8001068:	4867      	ldr	r0, [pc, #412]	@ (8001208 <MX_GPIO_Init+0x238>)
 800106a:	f002 fa81 	bl	8003570 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 800106e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001072:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001074:	2301      	movs	r3, #1
 8001076:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001078:	2300      	movs	r3, #0
 800107a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107c:	2300      	movs	r3, #0
 800107e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001080:	f107 0314 	add.w	r3, r7, #20
 8001084:	4619      	mov	r1, r3
 8001086:	485f      	ldr	r0, [pc, #380]	@ (8001204 <MX_GPIO_Init+0x234>)
 8001088:	f002 fa72 	bl	8003570 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	//////////////////////////////////////////
	// Gear selection pins
	/*Configure GPIO pin : Drive_Pin */
	GPIO_InitStruct.Pin = Drive_Pin;
 800108c:	2380      	movs	r3, #128	@ 0x80
 800108e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001090:	2300      	movs	r3, #0
 8001092:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001094:	2301      	movs	r3, #1
 8001096:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001098:	2300      	movs	r3, #0
 800109a:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(Drive_GPIO_Port, &GPIO_InitStruct);
 800109c:	f107 0314 	add.w	r3, r7, #20
 80010a0:	4619      	mov	r1, r3
 80010a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010a6:	f002 fa63 	bl	8003570 <HAL_GPIO_Init>

	/*Configure GPIO pin : Neutral_Pin */
	GPIO_InitStruct.Pin = Neutral_Pin;
 80010aa:	2340      	movs	r3, #64	@ 0x40
 80010ac:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010ae:	2300      	movs	r3, #0
 80010b0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010b2:	2301      	movs	r3, #1
 80010b4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b6:	2300      	movs	r3, #0
 80010b8:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ba:	f107 0314 	add.w	r3, r7, #20
 80010be:	4619      	mov	r1, r3
 80010c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010c4:	f002 fa54 	bl	8003570 <HAL_GPIO_Init>

	/*Configure GPIO pin : Reverse_Pin */
	GPIO_InitStruct.Pin = Reverse_Pin;
 80010c8:	2320      	movs	r3, #32
 80010ca:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010cc:	2300      	movs	r3, #0
 80010ce:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010d0:	2301      	movs	r3, #1
 80010d2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d4:	2300      	movs	r3, #0
 80010d6:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d8:	f107 0314 	add.w	r3, r7, #20
 80010dc:	4619      	mov	r1, r3
 80010de:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010e2:	f002 fa45 	bl	8003570 <HAL_GPIO_Init>

	//////////////////////////////////////////
	// Button input pins

	GPIO_InitStruct.Pin = BrakePedal_in_Pin;
 80010e6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80010ea:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80010ec:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80010f0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010f2:	2301      	movs	r3, #1
 80010f4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f6:	2300      	movs	r3, #0
 80010f8:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(BrakePedal_in_GPIO_Port, &GPIO_InitStruct);
 80010fa:	f107 0314 	add.w	r3, r7, #20
 80010fe:	4619      	mov	r1, r3
 8001100:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001104:	f002 fa34 	bl	8003570 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = L_SignalLight_in_Pin;
 8001108:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800110c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800110e:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8001112:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001114:	2301      	movs	r3, #1
 8001116:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001118:	2300      	movs	r3, #0
 800111a:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(L_SignalLight_in_GPIO_Port, &GPIO_InitStruct);
 800111c:	f107 0314 	add.w	r3, r7, #20
 8001120:	4619      	mov	r1, r3
 8001122:	4838      	ldr	r0, [pc, #224]	@ (8001204 <MX_GPIO_Init+0x234>)
 8001124:	f002 fa24 	bl	8003570 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = R_SignalLight_in_Pin;
 8001128:	2302      	movs	r3, #2
 800112a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800112c:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8001130:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001132:	2301      	movs	r3, #1
 8001134:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001136:	2300      	movs	r3, #0
 8001138:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(R_SignalLight_in_GPIO_Port, &GPIO_InitStruct);
 800113a:	f107 0314 	add.w	r3, r7, #20
 800113e:	4619      	mov	r1, r3
 8001140:	4830      	ldr	r0, [pc, #192]	@ (8001204 <MX_GPIO_Init+0x234>)
 8001142:	f002 fa15 	bl	8003570 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = Hazard_in_Pin;
 8001146:	2301      	movs	r3, #1
 8001148:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800114a:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 800114e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001150:	2301      	movs	r3, #1
 8001152:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001154:	2300      	movs	r3, #0
 8001156:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(Hazard_in_GPIO_Port, &GPIO_InitStruct);
 8001158:	f107 0314 	add.w	r3, r7, #20
 800115c:	4619      	mov	r1, r3
 800115e:	482a      	ldr	r0, [pc, #168]	@ (8001208 <MX_GPIO_Init+0x238>)
 8001160:	f002 fa06 	bl	8003570 <HAL_GPIO_Init>

	//////////////////////////////////////////
	// pins providing output to lights
	GPIO_InitStruct.Pin = BrakeLight_out_Pin;
 8001164:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001168:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800116a:	2301      	movs	r3, #1
 800116c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116e:	2300      	movs	r3, #0
 8001170:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001172:	2300      	movs	r3, #0
 8001174:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(BrakeLight_out_GPIO_Port, &GPIO_InitStruct);
 8001176:	f107 0314 	add.w	r3, r7, #20
 800117a:	4619      	mov	r1, r3
 800117c:	4822      	ldr	r0, [pc, #136]	@ (8001208 <MX_GPIO_Init+0x238>)
 800117e:	f002 f9f7 	bl	8003570 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = L_SignalLight_out_Pin;
 8001182:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001186:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001188:	2301      	movs	r3, #1
 800118a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118c:	2300      	movs	r3, #0
 800118e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001190:	2300      	movs	r3, #0
 8001192:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(L_SignalLight_out_GPIO_Port, &GPIO_InitStruct);
 8001194:	f107 0314 	add.w	r3, r7, #20
 8001198:	4619      	mov	r1, r3
 800119a:	481a      	ldr	r0, [pc, #104]	@ (8001204 <MX_GPIO_Init+0x234>)
 800119c:	f002 f9e8 	bl	8003570 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = R_SignalLight_out_Pin;
 80011a0:	2340      	movs	r3, #64	@ 0x40
 80011a2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011a4:	2301      	movs	r3, #1
 80011a6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a8:	2300      	movs	r3, #0
 80011aa:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ac:	2300      	movs	r3, #0
 80011ae:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(R_SignalLight_out_GPIO_Port, &GPIO_InitStruct);
 80011b0:	f107 0314 	add.w	r3, r7, #20
 80011b4:	4619      	mov	r1, r3
 80011b6:	4814      	ldr	r0, [pc, #80]	@ (8001208 <MX_GPIO_Init+0x238>)
 80011b8:	f002 f9da 	bl	8003570 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = DRLLeft_out_Pin;
 80011bc:	2320      	movs	r3, #32
 80011be:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011c0:	2301      	movs	r3, #1
 80011c2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c4:	2300      	movs	r3, #0
 80011c6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c8:	2300      	movs	r3, #0
 80011ca:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(DRLLeft_out_GPIO_Port, &GPIO_InitStruct);
 80011cc:	f107 0314 	add.w	r3, r7, #20
 80011d0:	4619      	mov	r1, r3
 80011d2:	480d      	ldr	r0, [pc, #52]	@ (8001208 <MX_GPIO_Init+0x238>)
 80011d4:	f002 f9cc 	bl	8003570 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = DRLRight_out_Pin;
 80011d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011dc:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011de:	2301      	movs	r3, #1
 80011e0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e2:	2300      	movs	r3, #0
 80011e4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e6:	2300      	movs	r3, #0
 80011e8:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(DRLLeft_out_GPIO_Port, &GPIO_InitStruct);
 80011ea:	f107 0314 	add.w	r3, r7, #20
 80011ee:	4619      	mov	r1, r3
 80011f0:	4805      	ldr	r0, [pc, #20]	@ (8001208 <MX_GPIO_Init+0x238>)
 80011f2:	f002 f9bd 	bl	8003570 <HAL_GPIO_Init>

	////////////////////////////////////////

	/* USER CODE END MX_GPIO_Init_2 */
}
 80011f6:	bf00      	nop
 80011f8:	3728      	adds	r7, #40	@ 0x28
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	40021000 	.word	0x40021000
 8001204:	48000400 	.word	0x48000400
 8001208:	48000800 	.word	0x48000800

0800120c <Enable_DMA_Interrupts>:

/* USER CODE BEGIN 4 */

/* Enable DMA interrupts after RTOS is running */
void Enable_DMA_Interrupts(void) {
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
	/* Give time for RTOS to stabilize */
	osDelay(100);
 8001210:	2064      	movs	r0, #100	@ 0x64
 8001212:	f004 fe97 	bl	8005f44 <osDelay>

	/* Configure at lowest priority */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 15, 0); // Lowest priority
 8001216:	2200      	movs	r2, #0
 8001218:	210f      	movs	r1, #15
 800121a:	200b      	movs	r0, #11
 800121c:	f001 ffe6 	bl	80031ec <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001220:	200b      	movs	r0, #11
 8001222:	f001 ffff 	bl	8003224 <HAL_NVIC_EnableIRQ>

	/* Activate ADC DMA with interrupts */
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc_buf, ADC_BUF_LEN);
 8001226:	2210      	movs	r2, #16
 8001228:	4904      	ldr	r1, [pc, #16]	@ (800123c <Enable_DMA_Interrupts+0x30>)
 800122a:	4805      	ldr	r0, [pc, #20]	@ (8001240 <Enable_DMA_Interrupts+0x34>)
 800122c:	f000 fc58 	bl	8001ae0 <HAL_ADC_Start_DMA>

	dma_interrupts_enabled = 1;
 8001230:	4b04      	ldr	r3, [pc, #16]	@ (8001244 <Enable_DMA_Interrupts+0x38>)
 8001232:	2201      	movs	r2, #1
 8001234:	701a      	strb	r2, [r3, #0]
}
 8001236:	bf00      	nop
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	20000480 	.word	0x20000480
 8001240:	20000338 	.word	0x20000338
 8001244:	2000047c 	.word	0x2000047c

08001248 <DMA1_Channel1_IRQHandler>:

/* Modified DMA IRQ Handler */
void DMA1_Channel1_IRQHandler(void) {
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
	if (dma_interrupts_enabled) {
 800124c:	4b04      	ldr	r3, [pc, #16]	@ (8001260 <DMA1_Channel1_IRQHandler+0x18>)
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	b2db      	uxtb	r3, r3
 8001252:	2b00      	cmp	r3, #0
 8001254:	d002      	beq.n	800125c <DMA1_Channel1_IRQHandler+0x14>
		HAL_DMA_IRQHandler(&hdma_adc1);
 8001256:	4803      	ldr	r0, [pc, #12]	@ (8001264 <DMA1_Channel1_IRQHandler+0x1c>)
 8001258:	f002 f898 	bl	800338c <HAL_DMA_IRQHandler>
	}
}
 800125c:	bf00      	nop
 800125e:	bd80      	pop	{r7, pc}
 8001260:	2000047c 	.word	0x2000047c
 8001264:	20000388 	.word	0x20000388

08001268 <parked_init>:
 * @brief  Function implementing the parked thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_parked_init */
void parked_init(void const *argument) {
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8001270:	2001      	movs	r0, #1
 8001272:	f004 fe67 	bl	8005f44 <osDelay>
 8001276:	e7fb      	b.n	8001270 <parked_init+0x8>

08001278 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1) {
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a04      	ldr	r2, [pc, #16]	@ (8001298 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d101      	bne.n	800128e <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 800128a:	f000 fa65 	bl	8001758 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 800128e:	bf00      	nop
 8001290:	3708      	adds	r7, #8
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	40012c00 	.word	0x40012c00

0800129c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012a0:	b672      	cpsid	i
}
 80012a2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80012a4:	bf00      	nop
 80012a6:	e7fd      	b.n	80012a4 <Error_Handler+0x8>

080012a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ae:	4b11      	ldr	r3, [pc, #68]	@ (80012f4 <HAL_MspInit+0x4c>)
 80012b0:	699b      	ldr	r3, [r3, #24]
 80012b2:	4a10      	ldr	r2, [pc, #64]	@ (80012f4 <HAL_MspInit+0x4c>)
 80012b4:	f043 0301 	orr.w	r3, r3, #1
 80012b8:	6193      	str	r3, [r2, #24]
 80012ba:	4b0e      	ldr	r3, [pc, #56]	@ (80012f4 <HAL_MspInit+0x4c>)
 80012bc:	699b      	ldr	r3, [r3, #24]
 80012be:	f003 0301 	and.w	r3, r3, #1
 80012c2:	607b      	str	r3, [r7, #4]
 80012c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012c6:	4b0b      	ldr	r3, [pc, #44]	@ (80012f4 <HAL_MspInit+0x4c>)
 80012c8:	69db      	ldr	r3, [r3, #28]
 80012ca:	4a0a      	ldr	r2, [pc, #40]	@ (80012f4 <HAL_MspInit+0x4c>)
 80012cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012d0:	61d3      	str	r3, [r2, #28]
 80012d2:	4b08      	ldr	r3, [pc, #32]	@ (80012f4 <HAL_MspInit+0x4c>)
 80012d4:	69db      	ldr	r3, [r3, #28]
 80012d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012da:	603b      	str	r3, [r7, #0]
 80012dc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80012de:	2200      	movs	r2, #0
 80012e0:	210f      	movs	r1, #15
 80012e2:	f06f 0001 	mvn.w	r0, #1
 80012e6:	f001 ff81 	bl	80031ec <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012ea:	bf00      	nop
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	40021000 	.word	0x40021000

080012f8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b08a      	sub	sp, #40	@ 0x28
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001300:	f107 0314 	add.w	r3, r7, #20
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]
 8001308:	605a      	str	r2, [r3, #4]
 800130a:	609a      	str	r2, [r3, #8]
 800130c:	60da      	str	r2, [r3, #12]
 800130e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001318:	d14c      	bne.n	80013b4 <HAL_ADC_MspInit+0xbc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800131a:	4b28      	ldr	r3, [pc, #160]	@ (80013bc <HAL_ADC_MspInit+0xc4>)
 800131c:	695b      	ldr	r3, [r3, #20]
 800131e:	4a27      	ldr	r2, [pc, #156]	@ (80013bc <HAL_ADC_MspInit+0xc4>)
 8001320:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001324:	6153      	str	r3, [r2, #20]
 8001326:	4b25      	ldr	r3, [pc, #148]	@ (80013bc <HAL_ADC_MspInit+0xc4>)
 8001328:	695b      	ldr	r3, [r3, #20]
 800132a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800132e:	613b      	str	r3, [r7, #16]
 8001330:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001332:	4b22      	ldr	r3, [pc, #136]	@ (80013bc <HAL_ADC_MspInit+0xc4>)
 8001334:	695b      	ldr	r3, [r3, #20]
 8001336:	4a21      	ldr	r2, [pc, #132]	@ (80013bc <HAL_ADC_MspInit+0xc4>)
 8001338:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800133c:	6153      	str	r3, [r2, #20]
 800133e:	4b1f      	ldr	r3, [pc, #124]	@ (80013bc <HAL_ADC_MspInit+0xc4>)
 8001340:	695b      	ldr	r3, [r3, #20]
 8001342:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001346:	60fb      	str	r3, [r7, #12]
 8001348:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800134a:	2301      	movs	r3, #1
 800134c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800134e:	2303      	movs	r3, #3
 8001350:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001352:	2300      	movs	r3, #0
 8001354:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001356:	f107 0314 	add.w	r3, r7, #20
 800135a:	4619      	mov	r1, r3
 800135c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001360:	f002 f906 	bl	8003570 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001364:	4b16      	ldr	r3, [pc, #88]	@ (80013c0 <HAL_ADC_MspInit+0xc8>)
 8001366:	4a17      	ldr	r2, [pc, #92]	@ (80013c4 <HAL_ADC_MspInit+0xcc>)
 8001368:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800136a:	4b15      	ldr	r3, [pc, #84]	@ (80013c0 <HAL_ADC_MspInit+0xc8>)
 800136c:	2200      	movs	r2, #0
 800136e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001370:	4b13      	ldr	r3, [pc, #76]	@ (80013c0 <HAL_ADC_MspInit+0xc8>)
 8001372:	2200      	movs	r2, #0
 8001374:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001376:	4b12      	ldr	r3, [pc, #72]	@ (80013c0 <HAL_ADC_MspInit+0xc8>)
 8001378:	2280      	movs	r2, #128	@ 0x80
 800137a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800137c:	4b10      	ldr	r3, [pc, #64]	@ (80013c0 <HAL_ADC_MspInit+0xc8>)
 800137e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001382:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001384:	4b0e      	ldr	r3, [pc, #56]	@ (80013c0 <HAL_ADC_MspInit+0xc8>)
 8001386:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800138a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800138c:	4b0c      	ldr	r3, [pc, #48]	@ (80013c0 <HAL_ADC_MspInit+0xc8>)
 800138e:	2200      	movs	r2, #0
 8001390:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001392:	4b0b      	ldr	r3, [pc, #44]	@ (80013c0 <HAL_ADC_MspInit+0xc8>)
 8001394:	2200      	movs	r2, #0
 8001396:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001398:	4809      	ldr	r0, [pc, #36]	@ (80013c0 <HAL_ADC_MspInit+0xc8>)
 800139a:	f001 ff51 	bl	8003240 <HAL_DMA_Init>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 80013a4:	f7ff ff7a 	bl	800129c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	4a05      	ldr	r2, [pc, #20]	@ (80013c0 <HAL_ADC_MspInit+0xc8>)
 80013ac:	639a      	str	r2, [r3, #56]	@ 0x38
 80013ae:	4a04      	ldr	r2, [pc, #16]	@ (80013c0 <HAL_ADC_MspInit+0xc8>)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6253      	str	r3, [r2, #36]	@ 0x24

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80013b4:	bf00      	nop
 80013b6:	3728      	adds	r7, #40	@ 0x28
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	40021000 	.word	0x40021000
 80013c0:	20000388 	.word	0x20000388
 80013c4:	40020008 	.word	0x40020008

080013c8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b08a      	sub	sp, #40	@ 0x28
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d0:	f107 0314 	add.w	r3, r7, #20
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]
 80013d8:	605a      	str	r2, [r3, #4]
 80013da:	609a      	str	r2, [r3, #8]
 80013dc:	60da      	str	r2, [r3, #12]
 80013de:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a25      	ldr	r2, [pc, #148]	@ (800147c <HAL_CAN_MspInit+0xb4>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d143      	bne.n	8001472 <HAL_CAN_MspInit+0xaa>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80013ea:	4b25      	ldr	r3, [pc, #148]	@ (8001480 <HAL_CAN_MspInit+0xb8>)
 80013ec:	69db      	ldr	r3, [r3, #28]
 80013ee:	4a24      	ldr	r2, [pc, #144]	@ (8001480 <HAL_CAN_MspInit+0xb8>)
 80013f0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80013f4:	61d3      	str	r3, [r2, #28]
 80013f6:	4b22      	ldr	r3, [pc, #136]	@ (8001480 <HAL_CAN_MspInit+0xb8>)
 80013f8:	69db      	ldr	r3, [r3, #28]
 80013fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013fe:	613b      	str	r3, [r7, #16]
 8001400:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001402:	4b1f      	ldr	r3, [pc, #124]	@ (8001480 <HAL_CAN_MspInit+0xb8>)
 8001404:	695b      	ldr	r3, [r3, #20]
 8001406:	4a1e      	ldr	r2, [pc, #120]	@ (8001480 <HAL_CAN_MspInit+0xb8>)
 8001408:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800140c:	6153      	str	r3, [r2, #20]
 800140e:	4b1c      	ldr	r3, [pc, #112]	@ (8001480 <HAL_CAN_MspInit+0xb8>)
 8001410:	695b      	ldr	r3, [r3, #20]
 8001412:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001416:	60fb      	str	r3, [r7, #12]
 8001418:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800141a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800141e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001420:	2302      	movs	r3, #2
 8001422:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001424:	2301      	movs	r3, #1
 8001426:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001428:	2303      	movs	r3, #3
 800142a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM1;
 800142c:	2309      	movs	r3, #9
 800142e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001430:	f107 0314 	add.w	r3, r7, #20
 8001434:	4619      	mov	r1, r3
 8001436:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800143a:	f002 f899 	bl	8003570 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800143e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001442:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001444:	2302      	movs	r3, #2
 8001446:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001448:	2300      	movs	r3, #0
 800144a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800144c:	2303      	movs	r3, #3
 800144e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM1;
 8001450:	2309      	movs	r3, #9
 8001452:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001454:	f107 0314 	add.w	r3, r7, #20
 8001458:	4619      	mov	r1, r3
 800145a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800145e:	f002 f887 	bl	8003570 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 5, 0);
 8001462:	2200      	movs	r2, #0
 8001464:	2105      	movs	r1, #5
 8001466:	2014      	movs	r0, #20
 8001468:	f001 fec0 	bl	80031ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 800146c:	2014      	movs	r0, #20
 800146e:	f001 fed9 	bl	8003224 <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN_MspInit 1 */

  }

}
 8001472:	bf00      	nop
 8001474:	3728      	adds	r7, #40	@ 0x28
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	40006400 	.word	0x40006400
 8001480:	40021000 	.word	0x40021000

08001484 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b08a      	sub	sp, #40	@ 0x28
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800148c:	f107 0314 	add.w	r3, r7, #20
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]
 8001494:	605a      	str	r2, [r3, #4]
 8001496:	609a      	str	r2, [r3, #8]
 8001498:	60da      	str	r2, [r3, #12]
 800149a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a17      	ldr	r2, [pc, #92]	@ (8001500 <HAL_UART_MspInit+0x7c>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d128      	bne.n	80014f8 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80014a6:	4b17      	ldr	r3, [pc, #92]	@ (8001504 <HAL_UART_MspInit+0x80>)
 80014a8:	69db      	ldr	r3, [r3, #28]
 80014aa:	4a16      	ldr	r2, [pc, #88]	@ (8001504 <HAL_UART_MspInit+0x80>)
 80014ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014b0:	61d3      	str	r3, [r2, #28]
 80014b2:	4b14      	ldr	r3, [pc, #80]	@ (8001504 <HAL_UART_MspInit+0x80>)
 80014b4:	69db      	ldr	r3, [r3, #28]
 80014b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014ba:	613b      	str	r3, [r7, #16]
 80014bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014be:	4b11      	ldr	r3, [pc, #68]	@ (8001504 <HAL_UART_MspInit+0x80>)
 80014c0:	695b      	ldr	r3, [r3, #20]
 80014c2:	4a10      	ldr	r2, [pc, #64]	@ (8001504 <HAL_UART_MspInit+0x80>)
 80014c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014c8:	6153      	str	r3, [r2, #20]
 80014ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001504 <HAL_UART_MspInit+0x80>)
 80014cc:	695b      	ldr	r3, [r3, #20]
 80014ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014d2:	60fb      	str	r3, [r7, #12]
 80014d4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80014d6:	230c      	movs	r3, #12
 80014d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014da:	2302      	movs	r3, #2
 80014dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014de:	2300      	movs	r3, #0
 80014e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e2:	2300      	movs	r3, #0
 80014e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014e6:	2307      	movs	r3, #7
 80014e8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ea:	f107 0314 	add.w	r3, r7, #20
 80014ee:	4619      	mov	r1, r3
 80014f0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014f4:	f002 f83c 	bl	8003570 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80014f8:	bf00      	nop
 80014fa:	3728      	adds	r7, #40	@ 0x28
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	40004400 	.word	0x40004400
 8001504:	40021000 	.word	0x40021000

08001508 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b08c      	sub	sp, #48	@ 0x30
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001510:	2300      	movs	r3, #0
 8001512:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001514:	2300      	movs	r3, #0
 8001516:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001518:	4b2e      	ldr	r3, [pc, #184]	@ (80015d4 <HAL_InitTick+0xcc>)
 800151a:	699b      	ldr	r3, [r3, #24]
 800151c:	4a2d      	ldr	r2, [pc, #180]	@ (80015d4 <HAL_InitTick+0xcc>)
 800151e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001522:	6193      	str	r3, [r2, #24]
 8001524:	4b2b      	ldr	r3, [pc, #172]	@ (80015d4 <HAL_InitTick+0xcc>)
 8001526:	699b      	ldr	r3, [r3, #24]
 8001528:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800152c:	60bb      	str	r3, [r7, #8]
 800152e:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001530:	f107 020c 	add.w	r2, r7, #12
 8001534:	f107 0310 	add.w	r3, r7, #16
 8001538:	4611      	mov	r1, r2
 800153a:	4618      	mov	r0, r3
 800153c:	f003 fc32 	bl	8004da4 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001540:	f003 fc0e 	bl	8004d60 <HAL_RCC_GetPCLK2Freq>
 8001544:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001546:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001548:	4a23      	ldr	r2, [pc, #140]	@ (80015d8 <HAL_InitTick+0xd0>)
 800154a:	fba2 2303 	umull	r2, r3, r2, r3
 800154e:	0c9b      	lsrs	r3, r3, #18
 8001550:	3b01      	subs	r3, #1
 8001552:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001554:	4b21      	ldr	r3, [pc, #132]	@ (80015dc <HAL_InitTick+0xd4>)
 8001556:	4a22      	ldr	r2, [pc, #136]	@ (80015e0 <HAL_InitTick+0xd8>)
 8001558:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800155a:	4b20      	ldr	r3, [pc, #128]	@ (80015dc <HAL_InitTick+0xd4>)
 800155c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001560:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001562:	4a1e      	ldr	r2, [pc, #120]	@ (80015dc <HAL_InitTick+0xd4>)
 8001564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001566:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001568:	4b1c      	ldr	r3, [pc, #112]	@ (80015dc <HAL_InitTick+0xd4>)
 800156a:	2200      	movs	r2, #0
 800156c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800156e:	4b1b      	ldr	r3, [pc, #108]	@ (80015dc <HAL_InitTick+0xd4>)
 8001570:	2200      	movs	r2, #0
 8001572:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001574:	4b19      	ldr	r3, [pc, #100]	@ (80015dc <HAL_InitTick+0xd4>)
 8001576:	2200      	movs	r2, #0
 8001578:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800157a:	4818      	ldr	r0, [pc, #96]	@ (80015dc <HAL_InitTick+0xd4>)
 800157c:	f003 fdd6 	bl	800512c <HAL_TIM_Base_Init>
 8001580:	4603      	mov	r3, r0
 8001582:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001586:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800158a:	2b00      	cmp	r3, #0
 800158c:	d11b      	bne.n	80015c6 <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800158e:	4813      	ldr	r0, [pc, #76]	@ (80015dc <HAL_InitTick+0xd4>)
 8001590:	f003 fe2e 	bl	80051f0 <HAL_TIM_Base_Start_IT>
 8001594:	4603      	mov	r3, r0
 8001596:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 800159a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d111      	bne.n	80015c6 <HAL_InitTick+0xbe>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80015a2:	2019      	movs	r0, #25
 80015a4:	f001 fe3e 	bl	8003224 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2b0f      	cmp	r3, #15
 80015ac:	d808      	bhi.n	80015c0 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 80015ae:	2200      	movs	r2, #0
 80015b0:	6879      	ldr	r1, [r7, #4]
 80015b2:	2019      	movs	r0, #25
 80015b4:	f001 fe1a 	bl	80031ec <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80015b8:	4a0a      	ldr	r2, [pc, #40]	@ (80015e4 <HAL_InitTick+0xdc>)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6013      	str	r3, [r2, #0]
 80015be:	e002      	b.n	80015c6 <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 80015c0:	2301      	movs	r3, #1
 80015c2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80015c6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3730      	adds	r7, #48	@ 0x30
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	40021000 	.word	0x40021000
 80015d8:	431bde83 	.word	0x431bde83
 80015dc:	200004bc 	.word	0x200004bc
 80015e0:	40012c00 	.word	0x40012c00
 80015e4:	20000008 	.word	0x20000008

080015e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015ec:	bf00      	nop
 80015ee:	e7fd      	b.n	80015ec <NMI_Handler+0x4>

080015f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015f4:	bf00      	nop
 80015f6:	e7fd      	b.n	80015f4 <HardFault_Handler+0x4>

080015f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015fc:	bf00      	nop
 80015fe:	e7fd      	b.n	80015fc <MemManage_Handler+0x4>

08001600 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001604:	bf00      	nop
 8001606:	e7fd      	b.n	8001604 <BusFault_Handler+0x4>

08001608 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800160c:	bf00      	nop
 800160e:	e7fd      	b.n	800160c <UsageFault_Handler+0x4>

08001610 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001614:	bf00      	nop
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr
	...

08001620 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles CAN RX0 and USB low priority interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001624:	4802      	ldr	r0, [pc, #8]	@ (8001630 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 8001626:	f001 fafa 	bl	8002c1e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 800162a:	bf00      	nop
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	200003cc 	.word	0x200003cc

08001634 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001638:	4802      	ldr	r0, [pc, #8]	@ (8001644 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800163a:	f003 fe2d 	bl	8005298 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800163e:	bf00      	nop
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	200004bc 	.word	0x200004bc

08001648 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b086      	sub	sp, #24
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001650:	4a14      	ldr	r2, [pc, #80]	@ (80016a4 <_sbrk+0x5c>)
 8001652:	4b15      	ldr	r3, [pc, #84]	@ (80016a8 <_sbrk+0x60>)
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800165c:	4b13      	ldr	r3, [pc, #76]	@ (80016ac <_sbrk+0x64>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d102      	bne.n	800166a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001664:	4b11      	ldr	r3, [pc, #68]	@ (80016ac <_sbrk+0x64>)
 8001666:	4a12      	ldr	r2, [pc, #72]	@ (80016b0 <_sbrk+0x68>)
 8001668:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800166a:	4b10      	ldr	r3, [pc, #64]	@ (80016ac <_sbrk+0x64>)
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	4413      	add	r3, r2
 8001672:	693a      	ldr	r2, [r7, #16]
 8001674:	429a      	cmp	r2, r3
 8001676:	d207      	bcs.n	8001688 <_sbrk+0x40>
  {

	  errno = ENOMEM;
 8001678:	f006 fa54 	bl	8007b24 <__errno>
 800167c:	4603      	mov	r3, r0
 800167e:	220c      	movs	r2, #12
 8001680:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001682:	f04f 33ff 	mov.w	r3, #4294967295
 8001686:	e009      	b.n	800169c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001688:	4b08      	ldr	r3, [pc, #32]	@ (80016ac <_sbrk+0x64>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800168e:	4b07      	ldr	r3, [pc, #28]	@ (80016ac <_sbrk+0x64>)
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4413      	add	r3, r2
 8001696:	4a05      	ldr	r2, [pc, #20]	@ (80016ac <_sbrk+0x64>)
 8001698:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800169a:	68fb      	ldr	r3, [r7, #12]
}
 800169c:	4618      	mov	r0, r3
 800169e:	3718      	adds	r7, #24
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	20004000 	.word	0x20004000
 80016a8:	00000400 	.word	0x00000400
 80016ac:	20000508 	.word	0x20000508
 80016b0:	20002fe8 	.word	0x20002fe8

080016b4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016b8:	4b06      	ldr	r3, [pc, #24]	@ (80016d4 <SystemInit+0x20>)
 80016ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016be:	4a05      	ldr	r2, [pc, #20]	@ (80016d4 <SystemInit+0x20>)
 80016c0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80016c4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016c8:	bf00      	nop
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr
 80016d2:	bf00      	nop
 80016d4:	e000ed00 	.word	0xe000ed00

080016d8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80016d8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001710 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80016dc:	f7ff ffea 	bl	80016b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016e0:	480c      	ldr	r0, [pc, #48]	@ (8001714 <LoopForever+0x6>)
  ldr r1, =_edata
 80016e2:	490d      	ldr	r1, [pc, #52]	@ (8001718 <LoopForever+0xa>)
  ldr r2, =_sidata
 80016e4:	4a0d      	ldr	r2, [pc, #52]	@ (800171c <LoopForever+0xe>)
  movs r3, #0
 80016e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016e8:	e002      	b.n	80016f0 <LoopCopyDataInit>

080016ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016ee:	3304      	adds	r3, #4

080016f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016f4:	d3f9      	bcc.n	80016ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016f6:	4a0a      	ldr	r2, [pc, #40]	@ (8001720 <LoopForever+0x12>)
  ldr r4, =_ebss
 80016f8:	4c0a      	ldr	r4, [pc, #40]	@ (8001724 <LoopForever+0x16>)
  movs r3, #0
 80016fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016fc:	e001      	b.n	8001702 <LoopFillZerobss>

080016fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001700:	3204      	adds	r2, #4

08001702 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001702:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001704:	d3fb      	bcc.n	80016fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001706:	f006 fa13 	bl	8007b30 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800170a:	f7ff fa33 	bl	8000b74 <main>

0800170e <LoopForever>:

LoopForever:
    b LoopForever
 800170e:	e7fe      	b.n	800170e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001710:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001714:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001718:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 800171c:	080085a0 	.word	0x080085a0
  ldr r2, =_sbss
 8001720:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8001724:	20002fe4 	.word	0x20002fe4

08001728 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001728:	e7fe      	b.n	8001728 <ADC1_IRQHandler>
	...

0800172c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001730:	4b08      	ldr	r3, [pc, #32]	@ (8001754 <HAL_Init+0x28>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a07      	ldr	r2, [pc, #28]	@ (8001754 <HAL_Init+0x28>)
 8001736:	f043 0310 	orr.w	r3, r3, #16
 800173a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800173c:	2003      	movs	r0, #3
 800173e:	f001 fd4a 	bl	80031d6 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001742:	200f      	movs	r0, #15
 8001744:	f7ff fee0 	bl	8001508 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001748:	f7ff fdae 	bl	80012a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800174c:	2300      	movs	r3, #0
}
 800174e:	4618      	mov	r0, r3
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	40022000 	.word	0x40022000

08001758 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800175c:	4b06      	ldr	r3, [pc, #24]	@ (8001778 <HAL_IncTick+0x20>)
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	461a      	mov	r2, r3
 8001762:	4b06      	ldr	r3, [pc, #24]	@ (800177c <HAL_IncTick+0x24>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4413      	add	r3, r2
 8001768:	4a04      	ldr	r2, [pc, #16]	@ (800177c <HAL_IncTick+0x24>)
 800176a:	6013      	str	r3, [r2, #0]
}
 800176c:	bf00      	nop
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	2000000c 	.word	0x2000000c
 800177c:	2000050c 	.word	0x2000050c

08001780 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  return uwTick;  
 8001784:	4b03      	ldr	r3, [pc, #12]	@ (8001794 <HAL_GetTick+0x14>)
 8001786:	681b      	ldr	r3, [r3, #0]
}
 8001788:	4618      	mov	r0, r3
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	2000050c 	.word	0x2000050c

08001798 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80017a0:	bf00      	nop
 80017a2:	370c      	adds	r7, #12
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr

080017ac <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80017b4:	bf00      	nop
 80017b6:	370c      	adds	r7, #12
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr

080017c0 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80017c8:	bf00      	nop
 80017ca:	370c      	adds	r7, #12
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr

080017d4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b09a      	sub	sp, #104	@ 0x68
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017dc:	2300      	movs	r3, #0
 80017de:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80017e2:	2300      	movs	r3, #0
 80017e4:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 80017e6:	2300      	movs	r3, #0
 80017e8:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d101      	bne.n	80017f4 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	e169      	b.n	8001ac8 <HAL_ADC_Init+0x2f4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	691b      	ldr	r3, [r3, #16]
 80017f8:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017fe:	f003 0310 	and.w	r3, r3, #16
 8001802:	2b00      	cmp	r3, #0
 8001804:	d176      	bne.n	80018f4 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800180a:	2b00      	cmp	r3, #0
 800180c:	d152      	bne.n	80018b4 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2200      	movs	r2, #0
 8001812:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2200      	movs	r2, #0
 8001818:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2200      	movs	r2, #0
 800181e:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2200      	movs	r2, #0
 8001824:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001828:	6878      	ldr	r0, [r7, #4]
 800182a:	f7ff fd65 	bl	80012f8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001838:	2b00      	cmp	r3, #0
 800183a:	d13b      	bne.n	80018b4 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 800183c:	6878      	ldr	r0, [r7, #4]
 800183e:	f000 fd67 	bl	8002310 <ADC_Disable>
 8001842:	4603      	mov	r3, r0
 8001844:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800184c:	f003 0310 	and.w	r3, r3, #16
 8001850:	2b00      	cmp	r3, #0
 8001852:	d12f      	bne.n	80018b4 <HAL_ADC_Init+0xe0>
 8001854:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8001858:	2b00      	cmp	r3, #0
 800185a:	d12b      	bne.n	80018b4 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001860:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001864:	f023 0302 	bic.w	r3, r3, #2
 8001868:	f043 0202 	orr.w	r2, r3, #2
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	689a      	ldr	r2, [r3, #8]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800187e:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	689a      	ldr	r2, [r3, #8]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800188e:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001890:	4b8f      	ldr	r3, [pc, #572]	@ (8001ad0 <HAL_ADC_Init+0x2fc>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a8f      	ldr	r2, [pc, #572]	@ (8001ad4 <HAL_ADC_Init+0x300>)
 8001896:	fba2 2303 	umull	r2, r3, r2, r3
 800189a:	0c9a      	lsrs	r2, r3, #18
 800189c:	4613      	mov	r3, r2
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	4413      	add	r3, r2
 80018a2:	005b      	lsls	r3, r3, #1
 80018a4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80018a6:	e002      	b.n	80018ae <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	3b01      	subs	r3, #1
 80018ac:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d1f9      	bne.n	80018a8 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d007      	beq.n	80018d2 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80018cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80018d0:	d110      	bne.n	80018f4 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018d6:	f023 0312 	bic.w	r3, r3, #18
 80018da:	f043 0210 	orr.w	r2, r3, #16
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018e6:	f043 0201 	orr.w	r2, r3, #1
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018f8:	f003 0310 	and.w	r3, r3, #16
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	f040 80d6 	bne.w	8001aae <HAL_ADC_Init+0x2da>
 8001902:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8001906:	2b00      	cmp	r3, #0
 8001908:	f040 80d1 	bne.w	8001aae <HAL_ADC_Init+0x2da>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8001916:	2b00      	cmp	r3, #0
 8001918:	f040 80c9 	bne.w	8001aae <HAL_ADC_Init+0x2da>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001920:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001924:	f043 0202 	orr.w	r2, r3, #2
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800192c:	4b6a      	ldr	r3, [pc, #424]	@ (8001ad8 <HAL_ADC_Init+0x304>)
 800192e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001930:	2300      	movs	r3, #0
 8001932:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	f003 0303 	and.w	r3, r3, #3
 800193e:	2b01      	cmp	r3, #1
 8001940:	d108      	bne.n	8001954 <HAL_ADC_Init+0x180>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 0301 	and.w	r3, r3, #1
 800194c:	2b01      	cmp	r3, #1
 800194e:	d101      	bne.n	8001954 <HAL_ADC_Init+0x180>
 8001950:	2301      	movs	r3, #1
 8001952:	e000      	b.n	8001956 <HAL_ADC_Init+0x182>
 8001954:	2300      	movs	r3, #0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d11c      	bne.n	8001994 <HAL_ADC_Init+0x1c0>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800195a:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800195c:	2b00      	cmp	r3, #0
 800195e:	d010      	beq.n	8001982 <HAL_ADC_Init+0x1ae>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	f003 0303 	and.w	r3, r3, #3
 8001968:	2b01      	cmp	r3, #1
 800196a:	d107      	bne.n	800197c <HAL_ADC_Init+0x1a8>
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 0301 	and.w	r3, r3, #1
 8001974:	2b01      	cmp	r3, #1
 8001976:	d101      	bne.n	800197c <HAL_ADC_Init+0x1a8>
 8001978:	2301      	movs	r3, #1
 800197a:	e000      	b.n	800197e <HAL_ADC_Init+0x1aa>
 800197c:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800197e:	2b00      	cmp	r3, #0
 8001980:	d108      	bne.n	8001994 <HAL_ADC_Init+0x1c0>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001982:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	431a      	orrs	r2, r3
 8001990:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001992:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	7e5b      	ldrb	r3, [r3, #25]
 8001998:	035b      	lsls	r3, r3, #13
 800199a:	687a      	ldr	r2, [r7, #4]
 800199c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800199e:	2a01      	cmp	r2, #1
 80019a0:	d002      	beq.n	80019a8 <HAL_ADC_Init+0x1d4>
 80019a2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80019a6:	e000      	b.n	80019aa <HAL_ADC_Init+0x1d6>
 80019a8:	2200      	movs	r2, #0
 80019aa:	431a      	orrs	r2, r3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	431a      	orrs	r2, r3
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	4313      	orrs	r3, r2
 80019b8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80019ba:	4313      	orrs	r3, r2
 80019bc:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d11b      	bne.n	8001a00 <HAL_ADC_Init+0x22c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	7e5b      	ldrb	r3, [r3, #25]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d109      	bne.n	80019e4 <HAL_ADC_Init+0x210>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019d4:	3b01      	subs	r3, #1
 80019d6:	045a      	lsls	r2, r3, #17
 80019d8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80019da:	4313      	orrs	r3, r2
 80019dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019e0:	663b      	str	r3, [r7, #96]	@ 0x60
 80019e2:	e00d      	b.n	8001a00 <HAL_ADC_Init+0x22c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019e8:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80019ec:	f043 0220 	orr.w	r2, r3, #32
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019f8:	f043 0201 	orr.w	r2, r3, #1
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d007      	beq.n	8001a18 <HAL_ADC_Init+0x244>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a10:	4313      	orrs	r3, r2
 8001a12:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001a14:	4313      	orrs	r3, r2
 8001a16:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	f003 030c 	and.w	r3, r3, #12
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d114      	bne.n	8001a50 <HAL_ADC_Init+0x27c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	68db      	ldr	r3, [r3, #12]
 8001a2c:	687a      	ldr	r2, [r7, #4]
 8001a2e:	6812      	ldr	r2, [r2, #0]
 8001a30:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001a34:	f023 0302 	bic.w	r3, r3, #2
 8001a38:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	7e1b      	ldrb	r3, [r3, #24]
 8001a3e:	039a      	lsls	r2, r3, #14
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001a46:	005b      	lsls	r3, r3, #1
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	68da      	ldr	r2, [r3, #12]
 8001a56:	4b21      	ldr	r3, [pc, #132]	@ (8001adc <HAL_ADC_Init+0x308>)
 8001a58:	4013      	ands	r3, r2
 8001a5a:	687a      	ldr	r2, [r7, #4]
 8001a5c:	6812      	ldr	r2, [r2, #0]
 8001a5e:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8001a60:	430b      	orrs	r3, r1
 8001a62:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	691b      	ldr	r3, [r3, #16]
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d10c      	bne.n	8001a86 <HAL_ADC_Init+0x2b2>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a72:	f023 010f 	bic.w	r1, r3, #15
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	69db      	ldr	r3, [r3, #28]
 8001a7a:	1e5a      	subs	r2, r3, #1
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	430a      	orrs	r2, r1
 8001a82:	631a      	str	r2, [r3, #48]	@ 0x30
 8001a84:	e007      	b.n	8001a96 <HAL_ADC_Init+0x2c2>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f022 020f 	bic.w	r2, r2, #15
 8001a94:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aa0:	f023 0303 	bic.w	r3, r3, #3
 8001aa4:	f043 0201 	orr.w	r2, r3, #1
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	641a      	str	r2, [r3, #64]	@ 0x40
 8001aac:	e00a      	b.n	8001ac4 <HAL_ADC_Init+0x2f0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ab2:	f023 0312 	bic.w	r3, r3, #18
 8001ab6:	f043 0210 	orr.w	r2, r3, #16
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001abe:	2301      	movs	r3, #1
 8001ac0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001ac4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	3768      	adds	r7, #104	@ 0x68
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	20000004 	.word	0x20000004
 8001ad4:	431bde83 	.word	0x431bde83
 8001ad8:	50000300 	.word	0x50000300
 8001adc:	fff0c007 	.word	0xfff0c007

08001ae0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b086      	sub	sp, #24
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	60f8      	str	r0, [r7, #12]
 8001ae8:	60b9      	str	r1, [r7, #8]
 8001aea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001aec:	2300      	movs	r3, #0
 8001aee:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	f003 0304 	and.w	r3, r3, #4
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d17e      	bne.n	8001bfc <HAL_ADC_Start_DMA+0x11c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d101      	bne.n	8001b0c <HAL_ADC_Start_DMA+0x2c>
 8001b08:	2302      	movs	r3, #2
 8001b0a:	e07a      	b.n	8001c02 <HAL_ADC_Start_DMA+0x122>
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	2201      	movs	r2, #1
 8001b10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001b14:	68f8      	ldr	r0, [r7, #12]
 8001b16:	f000 fb97 	bl	8002248 <ADC_Enable>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001b1e:	7dfb      	ldrb	r3, [r7, #23]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d166      	bne.n	8001bf2 <HAL_ADC_Start_DMA+0x112>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b28:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001b2c:	f023 0301 	bic.w	r3, r3, #1
 8001b30:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	641a      	str	r2, [r3, #64]	@ 0x40
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b3c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	68db      	ldr	r3, [r3, #12]
 8001b4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d007      	beq.n	8001b62 <HAL_ADC_Start_DMA+0x82>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b56:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001b5a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	641a      	str	r2, [r3, #64]	@ 0x40
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b66:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001b6e:	d106      	bne.n	8001b7e <HAL_ADC_Start_DMA+0x9e>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b74:	f023 0206 	bic.w	r2, r3, #6
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	645a      	str	r2, [r3, #68]	@ 0x44
 8001b7c:	e002      	b.n	8001b84 <HAL_ADC_Start_DMA+0xa4>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	2200      	movs	r2, #0
 8001b82:	645a      	str	r2, [r3, #68]	@ 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	2200      	movs	r2, #0
 8001b88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b90:	4a1e      	ldr	r2, [pc, #120]	@ (8001c0c <HAL_ADC_Start_DMA+0x12c>)
 8001b92:	629a      	str	r2, [r3, #40]	@ 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b98:	4a1d      	ldr	r2, [pc, #116]	@ (8001c10 <HAL_ADC_Start_DMA+0x130>)
 8001b9a:	62da      	str	r2, [r3, #44]	@ 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ba0:	4a1c      	ldr	r2, [pc, #112]	@ (8001c14 <HAL_ADC_Start_DMA+0x134>)
 8001ba2:	631a      	str	r2, [r3, #48]	@ 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	221c      	movs	r2, #28
 8001baa:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	685a      	ldr	r2, [r3, #4]
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f042 0210 	orr.w	r2, r2, #16
 8001bba:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	68da      	ldr	r2, [r3, #12]
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f042 0201 	orr.w	r2, r2, #1
 8001bca:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	3340      	adds	r3, #64	@ 0x40
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	68ba      	ldr	r2, [r7, #8]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	f001 fb77 	bl	80032ce <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	689a      	ldr	r2, [r3, #8]
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f042 0204 	orr.w	r2, r2, #4
 8001bee:	609a      	str	r2, [r3, #8]
 8001bf0:	e006      	b.n	8001c00 <HAL_ADC_Start_DMA+0x120>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8001bfa:	e001      	b.n	8001c00 <HAL_ADC_Start_DMA+0x120>
      __HAL_UNLOCK(hadc);
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001bfc:	2302      	movs	r3, #2
 8001bfe:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001c00:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3718      	adds	r7, #24
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	0800217d 	.word	0x0800217d
 8001c10:	080021f7 	.word	0x080021f7
 8001c14:	08002213 	.word	0x08002213

08001c18 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b09b      	sub	sp, #108	@ 0x6c
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
 8001c20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c22:	2300      	movs	r3, #0
 8001c24:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	d101      	bne.n	8001c3a <HAL_ADC_ConfigChannel+0x22>
 8001c36:	2302      	movs	r3, #2
 8001c38:	e295      	b.n	8002166 <HAL_ADC_ConfigChannel+0x54e>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	f003 0304 	and.w	r3, r3, #4
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	f040 8279 	bne.w	8002144 <HAL_ADC_ConfigChannel+0x52c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	2b04      	cmp	r3, #4
 8001c58:	d81c      	bhi.n	8001c94 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	685a      	ldr	r2, [r3, #4]
 8001c64:	4613      	mov	r3, r2
 8001c66:	005b      	lsls	r3, r3, #1
 8001c68:	4413      	add	r3, r2
 8001c6a:	005b      	lsls	r3, r3, #1
 8001c6c:	461a      	mov	r2, r3
 8001c6e:	231f      	movs	r3, #31
 8001c70:	4093      	lsls	r3, r2
 8001c72:	43db      	mvns	r3, r3
 8001c74:	4019      	ands	r1, r3
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	6818      	ldr	r0, [r3, #0]
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	685a      	ldr	r2, [r3, #4]
 8001c7e:	4613      	mov	r3, r2
 8001c80:	005b      	lsls	r3, r3, #1
 8001c82:	4413      	add	r3, r2
 8001c84:	005b      	lsls	r3, r3, #1
 8001c86:	fa00 f203 	lsl.w	r2, r0, r3
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	430a      	orrs	r2, r1
 8001c90:	631a      	str	r2, [r3, #48]	@ 0x30
 8001c92:	e063      	b.n	8001d5c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	2b09      	cmp	r3, #9
 8001c9a:	d81e      	bhi.n	8001cda <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	685a      	ldr	r2, [r3, #4]
 8001ca6:	4613      	mov	r3, r2
 8001ca8:	005b      	lsls	r3, r3, #1
 8001caa:	4413      	add	r3, r2
 8001cac:	005b      	lsls	r3, r3, #1
 8001cae:	3b1e      	subs	r3, #30
 8001cb0:	221f      	movs	r2, #31
 8001cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb6:	43db      	mvns	r3, r3
 8001cb8:	4019      	ands	r1, r3
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	6818      	ldr	r0, [r3, #0]
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	685a      	ldr	r2, [r3, #4]
 8001cc2:	4613      	mov	r3, r2
 8001cc4:	005b      	lsls	r3, r3, #1
 8001cc6:	4413      	add	r3, r2
 8001cc8:	005b      	lsls	r3, r3, #1
 8001cca:	3b1e      	subs	r3, #30
 8001ccc:	fa00 f203 	lsl.w	r2, r0, r3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	430a      	orrs	r2, r1
 8001cd6:	635a      	str	r2, [r3, #52]	@ 0x34
 8001cd8:	e040      	b.n	8001d5c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	2b0e      	cmp	r3, #14
 8001ce0:	d81e      	bhi.n	8001d20 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	685a      	ldr	r2, [r3, #4]
 8001cec:	4613      	mov	r3, r2
 8001cee:	005b      	lsls	r3, r3, #1
 8001cf0:	4413      	add	r3, r2
 8001cf2:	005b      	lsls	r3, r3, #1
 8001cf4:	3b3c      	subs	r3, #60	@ 0x3c
 8001cf6:	221f      	movs	r2, #31
 8001cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfc:	43db      	mvns	r3, r3
 8001cfe:	4019      	ands	r1, r3
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	6818      	ldr	r0, [r3, #0]
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	685a      	ldr	r2, [r3, #4]
 8001d08:	4613      	mov	r3, r2
 8001d0a:	005b      	lsls	r3, r3, #1
 8001d0c:	4413      	add	r3, r2
 8001d0e:	005b      	lsls	r3, r3, #1
 8001d10:	3b3c      	subs	r3, #60	@ 0x3c
 8001d12:	fa00 f203 	lsl.w	r2, r0, r3
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	430a      	orrs	r2, r1
 8001d1c:	639a      	str	r2, [r3, #56]	@ 0x38
 8001d1e:	e01d      	b.n	8001d5c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	685a      	ldr	r2, [r3, #4]
 8001d2a:	4613      	mov	r3, r2
 8001d2c:	005b      	lsls	r3, r3, #1
 8001d2e:	4413      	add	r3, r2
 8001d30:	005b      	lsls	r3, r3, #1
 8001d32:	3b5a      	subs	r3, #90	@ 0x5a
 8001d34:	221f      	movs	r2, #31
 8001d36:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3a:	43db      	mvns	r3, r3
 8001d3c:	4019      	ands	r1, r3
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	6818      	ldr	r0, [r3, #0]
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	685a      	ldr	r2, [r3, #4]
 8001d46:	4613      	mov	r3, r2
 8001d48:	005b      	lsls	r3, r3, #1
 8001d4a:	4413      	add	r3, r2
 8001d4c:	005b      	lsls	r3, r3, #1
 8001d4e:	3b5a      	subs	r3, #90	@ 0x5a
 8001d50:	fa00 f203 	lsl.w	r2, r0, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	430a      	orrs	r2, r1
 8001d5a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	f003 030c 	and.w	r3, r3, #12
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	f040 80e5 	bne.w	8001f36 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	2b09      	cmp	r3, #9
 8001d72:	d91c      	bls.n	8001dae <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	6999      	ldr	r1, [r3, #24]
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	4613      	mov	r3, r2
 8001d80:	005b      	lsls	r3, r3, #1
 8001d82:	4413      	add	r3, r2
 8001d84:	3b1e      	subs	r3, #30
 8001d86:	2207      	movs	r2, #7
 8001d88:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8c:	43db      	mvns	r3, r3
 8001d8e:	4019      	ands	r1, r3
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	6898      	ldr	r0, [r3, #8]
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	4613      	mov	r3, r2
 8001d9a:	005b      	lsls	r3, r3, #1
 8001d9c:	4413      	add	r3, r2
 8001d9e:	3b1e      	subs	r3, #30
 8001da0:	fa00 f203 	lsl.w	r2, r0, r3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	430a      	orrs	r2, r1
 8001daa:	619a      	str	r2, [r3, #24]
 8001dac:	e019      	b.n	8001de2 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	6959      	ldr	r1, [r3, #20]
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	4613      	mov	r3, r2
 8001dba:	005b      	lsls	r3, r3, #1
 8001dbc:	4413      	add	r3, r2
 8001dbe:	2207      	movs	r2, #7
 8001dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc4:	43db      	mvns	r3, r3
 8001dc6:	4019      	ands	r1, r3
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	6898      	ldr	r0, [r3, #8]
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	4613      	mov	r3, r2
 8001dd2:	005b      	lsls	r3, r3, #1
 8001dd4:	4413      	add	r3, r2
 8001dd6:	fa00 f203 	lsl.w	r2, r0, r3
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	430a      	orrs	r2, r1
 8001de0:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	695a      	ldr	r2, [r3, #20]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	08db      	lsrs	r3, r3, #3
 8001dee:	f003 0303 	and.w	r3, r3, #3
 8001df2:	005b      	lsls	r3, r3, #1
 8001df4:	fa02 f303 	lsl.w	r3, r2, r3
 8001df8:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	691b      	ldr	r3, [r3, #16]
 8001dfe:	3b01      	subs	r3, #1
 8001e00:	2b03      	cmp	r3, #3
 8001e02:	d84f      	bhi.n	8001ea4 <HAL_ADC_ConfigChannel+0x28c>
 8001e04:	a201      	add	r2, pc, #4	@ (adr r2, 8001e0c <HAL_ADC_ConfigChannel+0x1f4>)
 8001e06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e0a:	bf00      	nop
 8001e0c:	08001e1d 	.word	0x08001e1d
 8001e10:	08001e3f 	.word	0x08001e3f
 8001e14:	08001e61 	.word	0x08001e61
 8001e18:	08001e83 	.word	0x08001e83
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001e22:	4b97      	ldr	r3, [pc, #604]	@ (8002080 <HAL_ADC_ConfigChannel+0x468>)
 8001e24:	4013      	ands	r3, r2
 8001e26:	683a      	ldr	r2, [r7, #0]
 8001e28:	6812      	ldr	r2, [r2, #0]
 8001e2a:	0691      	lsls	r1, r2, #26
 8001e2c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001e2e:	430a      	orrs	r2, r1
 8001e30:	431a      	orrs	r2, r3
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001e3a:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001e3c:	e07b      	b.n	8001f36 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001e44:	4b8e      	ldr	r3, [pc, #568]	@ (8002080 <HAL_ADC_ConfigChannel+0x468>)
 8001e46:	4013      	ands	r3, r2
 8001e48:	683a      	ldr	r2, [r7, #0]
 8001e4a:	6812      	ldr	r2, [r2, #0]
 8001e4c:	0691      	lsls	r1, r2, #26
 8001e4e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001e50:	430a      	orrs	r2, r1
 8001e52:	431a      	orrs	r2, r3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001e5c:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001e5e:	e06a      	b.n	8001f36 <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8001e66:	4b86      	ldr	r3, [pc, #536]	@ (8002080 <HAL_ADC_ConfigChannel+0x468>)
 8001e68:	4013      	ands	r3, r2
 8001e6a:	683a      	ldr	r2, [r7, #0]
 8001e6c:	6812      	ldr	r2, [r2, #0]
 8001e6e:	0691      	lsls	r1, r2, #26
 8001e70:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001e72:	430a      	orrs	r2, r1
 8001e74:	431a      	orrs	r2, r3
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001e7e:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001e80:	e059      	b.n	8001f36 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001e88:	4b7d      	ldr	r3, [pc, #500]	@ (8002080 <HAL_ADC_ConfigChannel+0x468>)
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	683a      	ldr	r2, [r7, #0]
 8001e8e:	6812      	ldr	r2, [r2, #0]
 8001e90:	0691      	lsls	r1, r2, #26
 8001e92:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001e94:	430a      	orrs	r2, r1
 8001e96:	431a      	orrs	r2, r3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001ea0:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001ea2:	e048      	b.n	8001f36 <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001eaa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	069b      	lsls	r3, r3, #26
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d107      	bne.n	8001ec8 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001ec6:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001ece:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	069b      	lsls	r3, r3, #26
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d107      	bne.n	8001eec <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001eea:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001ef2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	069b      	lsls	r3, r3, #26
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d107      	bne.n	8001f10 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001f0e:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001f16:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	069b      	lsls	r3, r3, #26
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d107      	bne.n	8001f34 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001f32:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 8001f34:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	f003 0303 	and.w	r3, r3, #3
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d108      	bne.n	8001f56 <HAL_ADC_ConfigChannel+0x33e>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0301 	and.w	r3, r3, #1
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d101      	bne.n	8001f56 <HAL_ADC_ConfigChannel+0x33e>
 8001f52:	2301      	movs	r3, #1
 8001f54:	e000      	b.n	8001f58 <HAL_ADC_ConfigChannel+0x340>
 8001f56:	2300      	movs	r3, #0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	f040 80fe 	bne.w	800215a <HAL_ADC_ConfigChannel+0x542>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	68db      	ldr	r3, [r3, #12]
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d00f      	beq.n	8001f86 <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	2201      	movs	r2, #1
 8001f74:	fa02 f303 	lsl.w	r3, r2, r3
 8001f78:	43da      	mvns	r2, r3
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	400a      	ands	r2, r1
 8001f80:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 8001f84:	e049      	b.n	800201a <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	2201      	movs	r2, #1
 8001f94:	409a      	lsls	r2, r3
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	430a      	orrs	r2, r1
 8001f9c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	2b09      	cmp	r3, #9
 8001fa6:	d91c      	bls.n	8001fe2 <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	6999      	ldr	r1, [r3, #24]
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	4613      	mov	r3, r2
 8001fb4:	005b      	lsls	r3, r3, #1
 8001fb6:	4413      	add	r3, r2
 8001fb8:	3b1b      	subs	r3, #27
 8001fba:	2207      	movs	r2, #7
 8001fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc0:	43db      	mvns	r3, r3
 8001fc2:	4019      	ands	r1, r3
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	6898      	ldr	r0, [r3, #8]
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	4613      	mov	r3, r2
 8001fce:	005b      	lsls	r3, r3, #1
 8001fd0:	4413      	add	r3, r2
 8001fd2:	3b1b      	subs	r3, #27
 8001fd4:	fa00 f203 	lsl.w	r2, r0, r3
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	430a      	orrs	r2, r1
 8001fde:	619a      	str	r2, [r3, #24]
 8001fe0:	e01b      	b.n	800201a <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	6959      	ldr	r1, [r3, #20]
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	1c5a      	adds	r2, r3, #1
 8001fee:	4613      	mov	r3, r2
 8001ff0:	005b      	lsls	r3, r3, #1
 8001ff2:	4413      	add	r3, r2
 8001ff4:	2207      	movs	r2, #7
 8001ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffa:	43db      	mvns	r3, r3
 8001ffc:	4019      	ands	r1, r3
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	6898      	ldr	r0, [r3, #8]
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	1c5a      	adds	r2, r3, #1
 8002008:	4613      	mov	r3, r2
 800200a:	005b      	lsls	r3, r3, #1
 800200c:	4413      	add	r3, r2
 800200e:	fa00 f203 	lsl.w	r2, r0, r3
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	430a      	orrs	r2, r1
 8002018:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800201a:	4b1a      	ldr	r3, [pc, #104]	@ (8002084 <HAL_ADC_ConfigChannel+0x46c>)
 800201c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	2b10      	cmp	r3, #16
 8002024:	d105      	bne.n	8002032 <HAL_ADC_ConfigChannel+0x41a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002026:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800202e:	2b00      	cmp	r3, #0
 8002030:	d014      	beq.n	800205c <HAL_ADC_ConfigChannel+0x444>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002036:	2b11      	cmp	r3, #17
 8002038:	d105      	bne.n	8002046 <HAL_ADC_ConfigChannel+0x42e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800203a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002042:	2b00      	cmp	r3, #0
 8002044:	d00a      	beq.n	800205c <HAL_ADC_ConfigChannel+0x444>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800204a:	2b12      	cmp	r3, #18
 800204c:	f040 8085 	bne.w	800215a <HAL_ADC_ConfigChannel+0x542>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002050:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002058:	2b00      	cmp	r3, #0
 800205a:	d17e      	bne.n	800215a <HAL_ADC_ConfigChannel+0x542>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800205c:	2300      	movs	r3, #0
 800205e:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	f003 0303 	and.w	r3, r3, #3
 800206a:	2b01      	cmp	r3, #1
 800206c:	d10c      	bne.n	8002088 <HAL_ADC_ConfigChannel+0x470>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 0301 	and.w	r3, r3, #1
 8002078:	2b01      	cmp	r3, #1
 800207a:	d105      	bne.n	8002088 <HAL_ADC_ConfigChannel+0x470>
 800207c:	2301      	movs	r3, #1
 800207e:	e004      	b.n	800208a <HAL_ADC_ConfigChannel+0x472>
 8002080:	83fff000 	.word	0x83fff000
 8002084:	50000300 	.word	0x50000300
 8002088:	2300      	movs	r3, #0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d150      	bne.n	8002130 <HAL_ADC_ConfigChannel+0x518>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800208e:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002090:	2b00      	cmp	r3, #0
 8002092:	d010      	beq.n	80020b6 <HAL_ADC_ConfigChannel+0x49e>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	f003 0303 	and.w	r3, r3, #3
 800209c:	2b01      	cmp	r3, #1
 800209e:	d107      	bne.n	80020b0 <HAL_ADC_ConfigChannel+0x498>
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 0301 	and.w	r3, r3, #1
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d101      	bne.n	80020b0 <HAL_ADC_ConfigChannel+0x498>
 80020ac:	2301      	movs	r3, #1
 80020ae:	e000      	b.n	80020b2 <HAL_ADC_ConfigChannel+0x49a>
 80020b0:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d13c      	bne.n	8002130 <HAL_ADC_ConfigChannel+0x518>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	2b10      	cmp	r3, #16
 80020bc:	d11d      	bne.n	80020fa <HAL_ADC_ConfigChannel+0x4e2>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80020c6:	d118      	bne.n	80020fa <HAL_ADC_ConfigChannel+0x4e2>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80020c8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80020d0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80020d2:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80020d4:	4b27      	ldr	r3, [pc, #156]	@ (8002174 <HAL_ADC_ConfigChannel+0x55c>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a27      	ldr	r2, [pc, #156]	@ (8002178 <HAL_ADC_ConfigChannel+0x560>)
 80020da:	fba2 2303 	umull	r2, r3, r2, r3
 80020de:	0c9a      	lsrs	r2, r3, #18
 80020e0:	4613      	mov	r3, r2
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	4413      	add	r3, r2
 80020e6:	005b      	lsls	r3, r3, #1
 80020e8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80020ea:	e002      	b.n	80020f2 <HAL_ADC_ConfigChannel+0x4da>
          {
            wait_loop_index--;
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	3b01      	subs	r3, #1
 80020f0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d1f9      	bne.n	80020ec <HAL_ADC_ConfigChannel+0x4d4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80020f8:	e02e      	b.n	8002158 <HAL_ADC_ConfigChannel+0x540>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	2b11      	cmp	r3, #17
 8002100:	d10b      	bne.n	800211a <HAL_ADC_ConfigChannel+0x502>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800210a:	d106      	bne.n	800211a <HAL_ADC_ConfigChannel+0x502>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800210c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8002114:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002116:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002118:	e01e      	b.n	8002158 <HAL_ADC_ConfigChannel+0x540>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	2b12      	cmp	r3, #18
 8002120:	d11a      	bne.n	8002158 <HAL_ADC_ConfigChannel+0x540>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002122:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800212a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800212c:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800212e:	e013      	b.n	8002158 <HAL_ADC_ConfigChannel+0x540>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002134:	f043 0220 	orr.w	r2, r3, #32
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8002142:	e00a      	b.n	800215a <HAL_ADC_ConfigChannel+0x542>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002148:	f043 0220 	orr.w	r2, r3, #32
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8002156:	e000      	b.n	800215a <HAL_ADC_ConfigChannel+0x542>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002158:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2200      	movs	r2, #0
 800215e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002162:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8002166:	4618      	mov	r0, r3
 8002168:	376c      	adds	r7, #108	@ 0x6c
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
 8002174:	20000004 	.word	0x20000004
 8002178:	431bde83 	.word	0x431bde83

0800217c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b084      	sub	sp, #16
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002188:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800218e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002192:	2b00      	cmp	r3, #0
 8002194:	d126      	bne.n	80021e4 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800219a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d115      	bne.n	80021dc <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d111      	bne.n	80021dc <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021bc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021c8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d105      	bne.n	80021dc <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021d4:	f043 0201 	orr.w	r2, r3, #1
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80021dc:	68f8      	ldr	r0, [r7, #12]
 80021de:	f7ff fadb 	bl	8001798 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80021e2:	e004      	b.n	80021ee <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	4798      	blx	r3
}
 80021ee:	bf00      	nop
 80021f0:	3710      	adds	r7, #16
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}

080021f6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80021f6:	b580      	push	{r7, lr}
 80021f8:	b084      	sub	sp, #16
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002202:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002204:	68f8      	ldr	r0, [r7, #12]
 8002206:	f7ff fad1 	bl	80017ac <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 800220a:	bf00      	nop
 800220c:	3710      	adds	r7, #16
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}

08002212 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002212:	b580      	push	{r7, lr}
 8002214:	b084      	sub	sp, #16
 8002216:	af00      	add	r7, sp, #0
 8002218:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800221e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002224:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	641a      	str	r2, [r3, #64]	@ 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002230:	f043 0204 	orr.w	r2, r3, #4
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	645a      	str	r2, [r3, #68]	@ 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002238:	68f8      	ldr	r0, [r7, #12]
 800223a:	f7ff fac1 	bl	80017c0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800223e:	bf00      	nop
 8002240:	3710      	adds	r7, #16
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
	...

08002248 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b084      	sub	sp, #16
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002250:	2300      	movs	r3, #0
 8002252:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	f003 0303 	and.w	r3, r3, #3
 800225e:	2b01      	cmp	r3, #1
 8002260:	d108      	bne.n	8002274 <ADC_Enable+0x2c>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 0301 	and.w	r3, r3, #1
 800226c:	2b01      	cmp	r3, #1
 800226e:	d101      	bne.n	8002274 <ADC_Enable+0x2c>
 8002270:	2301      	movs	r3, #1
 8002272:	e000      	b.n	8002276 <ADC_Enable+0x2e>
 8002274:	2300      	movs	r3, #0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d143      	bne.n	8002302 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	689a      	ldr	r2, [r3, #8]
 8002280:	4b22      	ldr	r3, [pc, #136]	@ (800230c <ADC_Enable+0xc4>)
 8002282:	4013      	ands	r3, r2
 8002284:	2b00      	cmp	r3, #0
 8002286:	d00d      	beq.n	80022a4 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800228c:	f043 0210 	orr.w	r2, r3, #16
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002298:	f043 0201 	orr.w	r2, r3, #1
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	645a      	str	r2, [r3, #68]	@ 0x44
      
      return HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	e02f      	b.n	8002304 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	689a      	ldr	r2, [r3, #8]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f042 0201 	orr.w	r2, r2, #1
 80022b2:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80022b4:	f7ff fa64 	bl	8001780 <HAL_GetTick>
 80022b8:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80022ba:	e01b      	b.n	80022f4 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80022bc:	f7ff fa60 	bl	8001780 <HAL_GetTick>
 80022c0:	4602      	mov	r2, r0
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	1ad3      	subs	r3, r2, r3
 80022c6:	2b02      	cmp	r3, #2
 80022c8:	d914      	bls.n	80022f4 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 0301 	and.w	r3, r3, #1
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d00d      	beq.n	80022f4 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022dc:	f043 0210 	orr.w	r2, r3, #16
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022e8:	f043 0201 	orr.w	r2, r3, #1
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e007      	b.n	8002304 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 0301 	and.w	r3, r3, #1
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d1dc      	bne.n	80022bc <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002302:	2300      	movs	r3, #0
}
 8002304:	4618      	mov	r0, r3
 8002306:	3710      	adds	r7, #16
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}
 800230c:	8000003f 	.word	0x8000003f

08002310 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b084      	sub	sp, #16
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002318:	2300      	movs	r3, #0
 800231a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	f003 0303 	and.w	r3, r3, #3
 8002326:	2b01      	cmp	r3, #1
 8002328:	d108      	bne.n	800233c <ADC_Disable+0x2c>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 0301 	and.w	r3, r3, #1
 8002334:	2b01      	cmp	r3, #1
 8002336:	d101      	bne.n	800233c <ADC_Disable+0x2c>
 8002338:	2301      	movs	r3, #1
 800233a:	e000      	b.n	800233e <ADC_Disable+0x2e>
 800233c:	2300      	movs	r3, #0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d047      	beq.n	80023d2 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	f003 030d 	and.w	r3, r3, #13
 800234c:	2b01      	cmp	r3, #1
 800234e:	d10f      	bne.n	8002370 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	689a      	ldr	r2, [r3, #8]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f042 0202 	orr.w	r2, r2, #2
 800235e:	609a      	str	r2, [r3, #8]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	2203      	movs	r2, #3
 8002366:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002368:	f7ff fa0a 	bl	8001780 <HAL_GetTick>
 800236c:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800236e:	e029      	b.n	80023c4 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002374:	f043 0210 	orr.w	r2, r3, #16
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002380:	f043 0201 	orr.w	r2, r3, #1
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	e023      	b.n	80023d4 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800238c:	f7ff f9f8 	bl	8001780 <HAL_GetTick>
 8002390:	4602      	mov	r2, r0
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	2b02      	cmp	r3, #2
 8002398:	d914      	bls.n	80023c4 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	f003 0301 	and.w	r3, r3, #1
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	d10d      	bne.n	80023c4 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ac:	f043 0210 	orr.w	r2, r3, #16
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023b8:	f043 0201 	orr.w	r2, r3, #1
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e007      	b.n	80023d4 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	f003 0301 	and.w	r3, r3, #1
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d0dc      	beq.n	800238c <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80023d2:	2300      	movs	r3, #0
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	3710      	adds	r7, #16
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}

080023dc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b084      	sub	sp, #16
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d101      	bne.n	80023ee <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e0ed      	b.n	80025ca <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d102      	bne.n	8002400 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f7fe ffe4 	bl	80013c8 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f042 0201 	orr.w	r2, r2, #1
 800240e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002410:	f7ff f9b6 	bl	8001780 <HAL_GetTick>
 8002414:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002416:	e012      	b.n	800243e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002418:	f7ff f9b2 	bl	8001780 <HAL_GetTick>
 800241c:	4602      	mov	r2, r0
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	2b0a      	cmp	r3, #10
 8002424:	d90b      	bls.n	800243e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800242a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2205      	movs	r2, #5
 8002436:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e0c5      	b.n	80025ca <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f003 0301 	and.w	r3, r3, #1
 8002448:	2b00      	cmp	r3, #0
 800244a:	d0e5      	beq.n	8002418 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f022 0202 	bic.w	r2, r2, #2
 800245a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800245c:	f7ff f990 	bl	8001780 <HAL_GetTick>
 8002460:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002462:	e012      	b.n	800248a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002464:	f7ff f98c 	bl	8001780 <HAL_GetTick>
 8002468:	4602      	mov	r2, r0
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	2b0a      	cmp	r3, #10
 8002470:	d90b      	bls.n	800248a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002476:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2205      	movs	r2, #5
 8002482:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e09f      	b.n	80025ca <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f003 0302 	and.w	r3, r3, #2
 8002494:	2b00      	cmp	r3, #0
 8002496:	d1e5      	bne.n	8002464 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	7e1b      	ldrb	r3, [r3, #24]
 800249c:	2b01      	cmp	r3, #1
 800249e:	d108      	bne.n	80024b2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80024ae:	601a      	str	r2, [r3, #0]
 80024b0:	e007      	b.n	80024c2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80024c0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	7e5b      	ldrb	r3, [r3, #25]
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d108      	bne.n	80024dc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80024d8:	601a      	str	r2, [r3, #0]
 80024da:	e007      	b.n	80024ec <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80024ea:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	7e9b      	ldrb	r3, [r3, #26]
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d108      	bne.n	8002506 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f042 0220 	orr.w	r2, r2, #32
 8002502:	601a      	str	r2, [r3, #0]
 8002504:	e007      	b.n	8002516 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f022 0220 	bic.w	r2, r2, #32
 8002514:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	7edb      	ldrb	r3, [r3, #27]
 800251a:	2b01      	cmp	r3, #1
 800251c:	d108      	bne.n	8002530 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f022 0210 	bic.w	r2, r2, #16
 800252c:	601a      	str	r2, [r3, #0]
 800252e:	e007      	b.n	8002540 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f042 0210 	orr.w	r2, r2, #16
 800253e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	7f1b      	ldrb	r3, [r3, #28]
 8002544:	2b01      	cmp	r3, #1
 8002546:	d108      	bne.n	800255a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f042 0208 	orr.w	r2, r2, #8
 8002556:	601a      	str	r2, [r3, #0]
 8002558:	e007      	b.n	800256a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f022 0208 	bic.w	r2, r2, #8
 8002568:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	7f5b      	ldrb	r3, [r3, #29]
 800256e:	2b01      	cmp	r3, #1
 8002570:	d108      	bne.n	8002584 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f042 0204 	orr.w	r2, r2, #4
 8002580:	601a      	str	r2, [r3, #0]
 8002582:	e007      	b.n	8002594 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f022 0204 	bic.w	r2, r2, #4
 8002592:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	689a      	ldr	r2, [r3, #8]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	431a      	orrs	r2, r3
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	691b      	ldr	r3, [r3, #16]
 80025a2:	431a      	orrs	r2, r3
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	695b      	ldr	r3, [r3, #20]
 80025a8:	ea42 0103 	orr.w	r1, r2, r3
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	1e5a      	subs	r2, r3, #1
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	430a      	orrs	r2, r1
 80025b8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2200      	movs	r2, #0
 80025be:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2201      	movs	r2, #1
 80025c4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80025c8:	2300      	movs	r3, #0
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3710      	adds	r7, #16
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}

080025d2 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80025d2:	b480      	push	{r7}
 80025d4:	b087      	sub	sp, #28
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	6078      	str	r0, [r7, #4]
 80025da:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025e8:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80025ea:	7cfb      	ldrb	r3, [r7, #19]
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d003      	beq.n	80025f8 <HAL_CAN_ConfigFilter+0x26>
 80025f0:	7cfb      	ldrb	r3, [r7, #19]
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	f040 80aa 	bne.w	800274c <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80025fe:	f043 0201 	orr.w	r2, r3, #1
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	695b      	ldr	r3, [r3, #20]
 800260c:	f003 031f 	and.w	r3, r3, #31
 8002610:	2201      	movs	r2, #1
 8002612:	fa02 f303 	lsl.w	r3, r2, r3
 8002616:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	43db      	mvns	r3, r3
 8002622:	401a      	ands	r2, r3
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	69db      	ldr	r3, [r3, #28]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d123      	bne.n	800267a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	43db      	mvns	r3, r3
 800263c:	401a      	ands	r2, r3
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002650:	683a      	ldr	r2, [r7, #0]
 8002652:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002654:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	3248      	adds	r2, #72	@ 0x48
 800265a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800266e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002670:	6979      	ldr	r1, [r7, #20]
 8002672:	3348      	adds	r3, #72	@ 0x48
 8002674:	00db      	lsls	r3, r3, #3
 8002676:	440b      	add	r3, r1
 8002678:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	69db      	ldr	r3, [r3, #28]
 800267e:	2b01      	cmp	r3, #1
 8002680:	d122      	bne.n	80026c8 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	431a      	orrs	r2, r3
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800269e:	683a      	ldr	r2, [r7, #0]
 80026a0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80026a2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	3248      	adds	r2, #72	@ 0x48
 80026a8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	68db      	ldr	r3, [r3, #12]
 80026b6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80026bc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80026be:	6979      	ldr	r1, [r7, #20]
 80026c0:	3348      	adds	r3, #72	@ 0x48
 80026c2:	00db      	lsls	r3, r3, #3
 80026c4:	440b      	add	r3, r1
 80026c6:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	699b      	ldr	r3, [r3, #24]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d109      	bne.n	80026e4 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	43db      	mvns	r3, r3
 80026da:	401a      	ands	r2, r3
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80026e2:	e007      	b.n	80026f4 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	431a      	orrs	r2, r3
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	691b      	ldr	r3, [r3, #16]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d109      	bne.n	8002710 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	43db      	mvns	r3, r3
 8002706:	401a      	ands	r2, r3
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 800270e:	e007      	b.n	8002720 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	431a      	orrs	r2, r3
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	6a1b      	ldr	r3, [r3, #32]
 8002724:	2b01      	cmp	r3, #1
 8002726:	d107      	bne.n	8002738 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	431a      	orrs	r2, r3
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800273e:	f023 0201 	bic.w	r2, r3, #1
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8002748:	2300      	movs	r3, #0
 800274a:	e006      	b.n	800275a <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002750:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002758:	2301      	movs	r3, #1
  }
}
 800275a:	4618      	mov	r0, r3
 800275c:	371c      	adds	r7, #28
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr

08002766 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002766:	b580      	push	{r7, lr}
 8002768:	b084      	sub	sp, #16
 800276a:	af00      	add	r7, sp, #0
 800276c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002774:	b2db      	uxtb	r3, r3
 8002776:	2b01      	cmp	r3, #1
 8002778:	d12e      	bne.n	80027d8 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2202      	movs	r2, #2
 800277e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f022 0201 	bic.w	r2, r2, #1
 8002790:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002792:	f7fe fff5 	bl	8001780 <HAL_GetTick>
 8002796:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002798:	e012      	b.n	80027c0 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800279a:	f7fe fff1 	bl	8001780 <HAL_GetTick>
 800279e:	4602      	mov	r2, r0
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	1ad3      	subs	r3, r2, r3
 80027a4:	2b0a      	cmp	r3, #10
 80027a6:	d90b      	bls.n	80027c0 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ac:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2205      	movs	r2, #5
 80027b8:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	e012      	b.n	80027e6 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	f003 0301 	and.w	r3, r3, #1
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d1e5      	bne.n	800279a <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2200      	movs	r2, #0
 80027d2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80027d4:	2300      	movs	r3, #0
 80027d6:	e006      	b.n	80027e6 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027dc:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
  }
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3710      	adds	r7, #16
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}

080027ee <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80027ee:	b480      	push	{r7}
 80027f0:	b089      	sub	sp, #36	@ 0x24
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	60f8      	str	r0, [r7, #12]
 80027f6:	60b9      	str	r1, [r7, #8]
 80027f8:	607a      	str	r2, [r7, #4]
 80027fa:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002802:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800280c:	7ffb      	ldrb	r3, [r7, #31]
 800280e:	2b01      	cmp	r3, #1
 8002810:	d003      	beq.n	800281a <HAL_CAN_AddTxMessage+0x2c>
 8002812:	7ffb      	ldrb	r3, [r7, #31]
 8002814:	2b02      	cmp	r3, #2
 8002816:	f040 80ad 	bne.w	8002974 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800281a:	69bb      	ldr	r3, [r7, #24]
 800281c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002820:	2b00      	cmp	r3, #0
 8002822:	d10a      	bne.n	800283a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002824:	69bb      	ldr	r3, [r7, #24]
 8002826:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800282a:	2b00      	cmp	r3, #0
 800282c:	d105      	bne.n	800283a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800282e:	69bb      	ldr	r3, [r7, #24]
 8002830:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002834:	2b00      	cmp	r3, #0
 8002836:	f000 8095 	beq.w	8002964 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800283a:	69bb      	ldr	r3, [r7, #24]
 800283c:	0e1b      	lsrs	r3, r3, #24
 800283e:	f003 0303 	and.w	r3, r3, #3
 8002842:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002844:	2201      	movs	r2, #1
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	409a      	lsls	r2, r3
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d10d      	bne.n	8002872 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002860:	68f9      	ldr	r1, [r7, #12]
 8002862:	6809      	ldr	r1, [r1, #0]
 8002864:	431a      	orrs	r2, r3
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	3318      	adds	r3, #24
 800286a:	011b      	lsls	r3, r3, #4
 800286c:	440b      	add	r3, r1
 800286e:	601a      	str	r2, [r3, #0]
 8002870:	e00f      	b.n	8002892 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800287c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002882:	68f9      	ldr	r1, [r7, #12]
 8002884:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002886:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	3318      	adds	r3, #24
 800288c:	011b      	lsls	r3, r3, #4
 800288e:	440b      	add	r3, r1
 8002890:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	6819      	ldr	r1, [r3, #0]
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	691a      	ldr	r2, [r3, #16]
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	3318      	adds	r3, #24
 800289e:	011b      	lsls	r3, r3, #4
 80028a0:	440b      	add	r3, r1
 80028a2:	3304      	adds	r3, #4
 80028a4:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	7d1b      	ldrb	r3, [r3, #20]
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d111      	bne.n	80028d2 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	3318      	adds	r3, #24
 80028b6:	011b      	lsls	r3, r3, #4
 80028b8:	4413      	add	r3, r2
 80028ba:	3304      	adds	r3, #4
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	68fa      	ldr	r2, [r7, #12]
 80028c0:	6811      	ldr	r1, [r2, #0]
 80028c2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	3318      	adds	r3, #24
 80028ca:	011b      	lsls	r3, r3, #4
 80028cc:	440b      	add	r3, r1
 80028ce:	3304      	adds	r3, #4
 80028d0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	3307      	adds	r3, #7
 80028d6:	781b      	ldrb	r3, [r3, #0]
 80028d8:	061a      	lsls	r2, r3, #24
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	3306      	adds	r3, #6
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	041b      	lsls	r3, r3, #16
 80028e2:	431a      	orrs	r2, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	3305      	adds	r3, #5
 80028e8:	781b      	ldrb	r3, [r3, #0]
 80028ea:	021b      	lsls	r3, r3, #8
 80028ec:	4313      	orrs	r3, r2
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	3204      	adds	r2, #4
 80028f2:	7812      	ldrb	r2, [r2, #0]
 80028f4:	4610      	mov	r0, r2
 80028f6:	68fa      	ldr	r2, [r7, #12]
 80028f8:	6811      	ldr	r1, [r2, #0]
 80028fa:	ea43 0200 	orr.w	r2, r3, r0
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	011b      	lsls	r3, r3, #4
 8002902:	440b      	add	r3, r1
 8002904:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8002908:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	3303      	adds	r3, #3
 800290e:	781b      	ldrb	r3, [r3, #0]
 8002910:	061a      	lsls	r2, r3, #24
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	3302      	adds	r3, #2
 8002916:	781b      	ldrb	r3, [r3, #0]
 8002918:	041b      	lsls	r3, r3, #16
 800291a:	431a      	orrs	r2, r3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	3301      	adds	r3, #1
 8002920:	781b      	ldrb	r3, [r3, #0]
 8002922:	021b      	lsls	r3, r3, #8
 8002924:	4313      	orrs	r3, r2
 8002926:	687a      	ldr	r2, [r7, #4]
 8002928:	7812      	ldrb	r2, [r2, #0]
 800292a:	4610      	mov	r0, r2
 800292c:	68fa      	ldr	r2, [r7, #12]
 800292e:	6811      	ldr	r1, [r2, #0]
 8002930:	ea43 0200 	orr.w	r2, r3, r0
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	011b      	lsls	r3, r3, #4
 8002938:	440b      	add	r3, r1
 800293a:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 800293e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	3318      	adds	r3, #24
 8002948:	011b      	lsls	r3, r3, #4
 800294a:	4413      	add	r3, r2
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	68fa      	ldr	r2, [r7, #12]
 8002950:	6811      	ldr	r1, [r2, #0]
 8002952:	f043 0201 	orr.w	r2, r3, #1
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	3318      	adds	r3, #24
 800295a:	011b      	lsls	r3, r3, #4
 800295c:	440b      	add	r3, r1
 800295e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002960:	2300      	movs	r3, #0
 8002962:	e00e      	b.n	8002982 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002968:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	e006      	b.n	8002982 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002978:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002980:	2301      	movs	r3, #1
  }
}
 8002982:	4618      	mov	r0, r3
 8002984:	3724      	adds	r7, #36	@ 0x24
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr

0800298e <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800298e:	b480      	push	{r7}
 8002990:	b087      	sub	sp, #28
 8002992:	af00      	add	r7, sp, #0
 8002994:	60f8      	str	r0, [r7, #12]
 8002996:	60b9      	str	r1, [r7, #8]
 8002998:	607a      	str	r2, [r7, #4]
 800299a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029a2:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80029a4:	7dfb      	ldrb	r3, [r7, #23]
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d003      	beq.n	80029b2 <HAL_CAN_GetRxMessage+0x24>
 80029aa:	7dfb      	ldrb	r3, [r7, #23]
 80029ac:	2b02      	cmp	r3, #2
 80029ae:	f040 8103 	bne.w	8002bb8 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d10e      	bne.n	80029d6 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	68db      	ldr	r3, [r3, #12]
 80029be:	f003 0303 	and.w	r3, r3, #3
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d116      	bne.n	80029f4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ca:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e0f7      	b.n	8002bc6 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	691b      	ldr	r3, [r3, #16]
 80029dc:	f003 0303 	and.w	r3, r3, #3
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d107      	bne.n	80029f4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029e8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	e0e8      	b.n	8002bc6 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	331b      	adds	r3, #27
 80029fc:	011b      	lsls	r3, r3, #4
 80029fe:	4413      	add	r3, r2
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 0204 	and.w	r2, r3, #4
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d10c      	bne.n	8002a2c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	331b      	adds	r3, #27
 8002a1a:	011b      	lsls	r3, r3, #4
 8002a1c:	4413      	add	r3, r2
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	0d5b      	lsrs	r3, r3, #21
 8002a22:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	601a      	str	r2, [r3, #0]
 8002a2a:	e00b      	b.n	8002a44 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	331b      	adds	r3, #27
 8002a34:	011b      	lsls	r3, r3, #4
 8002a36:	4413      	add	r3, r2
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	08db      	lsrs	r3, r3, #3
 8002a3c:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	331b      	adds	r3, #27
 8002a4c:	011b      	lsls	r3, r3, #4
 8002a4e:	4413      	add	r3, r2
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 0202 	and.w	r2, r3, #2
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	331b      	adds	r3, #27
 8002a62:	011b      	lsls	r3, r3, #4
 8002a64:	4413      	add	r3, r2
 8002a66:	3304      	adds	r3, #4
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 0308 	and.w	r3, r3, #8
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d003      	beq.n	8002a7a <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2208      	movs	r2, #8
 8002a76:	611a      	str	r2, [r3, #16]
 8002a78:	e00b      	b.n	8002a92 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	331b      	adds	r3, #27
 8002a82:	011b      	lsls	r3, r3, #4
 8002a84:	4413      	add	r3, r2
 8002a86:	3304      	adds	r3, #4
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 020f 	and.w	r2, r3, #15
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	331b      	adds	r3, #27
 8002a9a:	011b      	lsls	r3, r3, #4
 8002a9c:	4413      	add	r3, r2
 8002a9e:	3304      	adds	r3, #4
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	0a1b      	lsrs	r3, r3, #8
 8002aa4:	b2da      	uxtb	r2, r3
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	331b      	adds	r3, #27
 8002ab2:	011b      	lsls	r3, r3, #4
 8002ab4:	4413      	add	r3, r2
 8002ab6:	3304      	adds	r3, #4
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	0c1b      	lsrs	r3, r3, #16
 8002abc:	b29a      	uxth	r2, r3
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	011b      	lsls	r3, r3, #4
 8002aca:	4413      	add	r3, r2
 8002acc:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	b2da      	uxtb	r2, r3
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	011b      	lsls	r3, r3, #4
 8002ae0:	4413      	add	r3, r2
 8002ae2:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	0a1a      	lsrs	r2, r3, #8
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	3301      	adds	r3, #1
 8002aee:	b2d2      	uxtb	r2, r2
 8002af0:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	011b      	lsls	r3, r3, #4
 8002afa:	4413      	add	r3, r2
 8002afc:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	0c1a      	lsrs	r2, r3, #16
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	3302      	adds	r3, #2
 8002b08:	b2d2      	uxtb	r2, r2
 8002b0a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	011b      	lsls	r3, r3, #4
 8002b14:	4413      	add	r3, r2
 8002b16:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	0e1a      	lsrs	r2, r3, #24
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	3303      	adds	r3, #3
 8002b22:	b2d2      	uxtb	r2, r2
 8002b24:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	011b      	lsls	r3, r3, #4
 8002b2e:	4413      	add	r3, r2
 8002b30:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	3304      	adds	r3, #4
 8002b3a:	b2d2      	uxtb	r2, r2
 8002b3c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	011b      	lsls	r3, r3, #4
 8002b46:	4413      	add	r3, r2
 8002b48:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	0a1a      	lsrs	r2, r3, #8
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	3305      	adds	r3, #5
 8002b54:	b2d2      	uxtb	r2, r2
 8002b56:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	011b      	lsls	r3, r3, #4
 8002b60:	4413      	add	r3, r2
 8002b62:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	0c1a      	lsrs	r2, r3, #16
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	3306      	adds	r3, #6
 8002b6e:	b2d2      	uxtb	r2, r2
 8002b70:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	011b      	lsls	r3, r3, #4
 8002b7a:	4413      	add	r3, r2
 8002b7c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	0e1a      	lsrs	r2, r3, #24
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	3307      	adds	r3, #7
 8002b88:	b2d2      	uxtb	r2, r2
 8002b8a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d108      	bne.n	8002ba4 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	68da      	ldr	r2, [r3, #12]
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f042 0220 	orr.w	r2, r2, #32
 8002ba0:	60da      	str	r2, [r3, #12]
 8002ba2:	e007      	b.n	8002bb4 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	691a      	ldr	r2, [r3, #16]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f042 0220 	orr.w	r2, r2, #32
 8002bb2:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	e006      	b.n	8002bc6 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bbc:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
  }
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	371c      	adds	r7, #28
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr

08002bd2 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002bd2:	b480      	push	{r7}
 8002bd4:	b085      	sub	sp, #20
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	6078      	str	r0, [r7, #4]
 8002bda:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002be2:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002be4:	7bfb      	ldrb	r3, [r7, #15]
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d002      	beq.n	8002bf0 <HAL_CAN_ActivateNotification+0x1e>
 8002bea:	7bfb      	ldrb	r3, [r7, #15]
 8002bec:	2b02      	cmp	r3, #2
 8002bee:	d109      	bne.n	8002c04 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	6959      	ldr	r1, [r3, #20]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	683a      	ldr	r2, [r7, #0]
 8002bfc:	430a      	orrs	r2, r1
 8002bfe:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002c00:	2300      	movs	r3, #0
 8002c02:	e006      	b.n	8002c12 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c08:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
  }
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3714      	adds	r7, #20
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr

08002c1e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002c1e:	b580      	push	{r7, lr}
 8002c20:	b08a      	sub	sp, #40	@ 0x28
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002c26:	2300      	movs	r3, #0
 8002c28:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	695b      	ldr	r3, [r3, #20]
 8002c30:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	691b      	ldr	r3, [r3, #16]
 8002c50:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	699b      	ldr	r3, [r3, #24]
 8002c58:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002c5a:	6a3b      	ldr	r3, [r7, #32]
 8002c5c:	f003 0301 	and.w	r3, r3, #1
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d07c      	beq.n	8002d5e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002c64:	69bb      	ldr	r3, [r7, #24]
 8002c66:	f003 0301 	and.w	r3, r3, #1
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d023      	beq.n	8002cb6 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	2201      	movs	r2, #1
 8002c74:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002c76:	69bb      	ldr	r3, [r7, #24]
 8002c78:	f003 0302 	and.w	r3, r3, #2
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d003      	beq.n	8002c88 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	f000 f983 	bl	8002f8c <HAL_CAN_TxMailbox0CompleteCallback>
 8002c86:	e016      	b.n	8002cb6 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002c88:	69bb      	ldr	r3, [r7, #24]
 8002c8a:	f003 0304 	and.w	r3, r3, #4
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d004      	beq.n	8002c9c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c94:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002c98:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c9a:	e00c      	b.n	8002cb6 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002c9c:	69bb      	ldr	r3, [r7, #24]
 8002c9e:	f003 0308 	and.w	r3, r3, #8
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d004      	beq.n	8002cb0 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ca8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002cac:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cae:	e002      	b.n	8002cb6 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	f000 f989 	bl	8002fc8 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002cb6:	69bb      	ldr	r3, [r7, #24]
 8002cb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d024      	beq.n	8002d0a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002cc8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002cca:	69bb      	ldr	r3, [r7, #24]
 8002ccc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d003      	beq.n	8002cdc <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002cd4:	6878      	ldr	r0, [r7, #4]
 8002cd6:	f000 f963 	bl	8002fa0 <HAL_CAN_TxMailbox1CompleteCallback>
 8002cda:	e016      	b.n	8002d0a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002cdc:	69bb      	ldr	r3, [r7, #24]
 8002cde:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d004      	beq.n	8002cf0 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ce8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002cec:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cee:	e00c      	b.n	8002d0a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002cf0:	69bb      	ldr	r3, [r7, #24]
 8002cf2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d004      	beq.n	8002d04 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cfc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d00:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d02:	e002      	b.n	8002d0a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002d04:	6878      	ldr	r0, [r7, #4]
 8002d06:	f000 f969 	bl	8002fdc <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002d0a:	69bb      	ldr	r3, [r7, #24]
 8002d0c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d024      	beq.n	8002d5e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002d1c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002d1e:	69bb      	ldr	r3, [r7, #24]
 8002d20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d003      	beq.n	8002d30 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002d28:	6878      	ldr	r0, [r7, #4]
 8002d2a:	f000 f943 	bl	8002fb4 <HAL_CAN_TxMailbox2CompleteCallback>
 8002d2e:	e016      	b.n	8002d5e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002d30:	69bb      	ldr	r3, [r7, #24]
 8002d32:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d004      	beq.n	8002d44 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d3c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002d40:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d42:	e00c      	b.n	8002d5e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002d44:	69bb      	ldr	r3, [r7, #24]
 8002d46:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d004      	beq.n	8002d58 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d54:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d56:	e002      	b.n	8002d5e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002d58:	6878      	ldr	r0, [r7, #4]
 8002d5a:	f000 f949 	bl	8002ff0 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002d5e:	6a3b      	ldr	r3, [r7, #32]
 8002d60:	f003 0308 	and.w	r3, r3, #8
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d00c      	beq.n	8002d82 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	f003 0310 	and.w	r3, r3, #16
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d007      	beq.n	8002d82 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d74:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002d78:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	2210      	movs	r2, #16
 8002d80:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002d82:	6a3b      	ldr	r3, [r7, #32]
 8002d84:	f003 0304 	and.w	r3, r3, #4
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d00b      	beq.n	8002da4 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	f003 0308 	and.w	r3, r3, #8
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d006      	beq.n	8002da4 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	2208      	movs	r2, #8
 8002d9c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f000 f930 	bl	8003004 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002da4:	6a3b      	ldr	r3, [r7, #32]
 8002da6:	f003 0302 	and.w	r3, r3, #2
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d009      	beq.n	8002dc2 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	f003 0303 	and.w	r3, r3, #3
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d002      	beq.n	8002dc2 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002dbc:	6878      	ldr	r0, [r7, #4]
 8002dbe:	f7fd fd23 	bl	8000808 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002dc2:	6a3b      	ldr	r3, [r7, #32]
 8002dc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d00c      	beq.n	8002de6 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	f003 0310 	and.w	r3, r3, #16
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d007      	beq.n	8002de6 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dd8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002ddc:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	2210      	movs	r2, #16
 8002de4:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002de6:	6a3b      	ldr	r3, [r7, #32]
 8002de8:	f003 0320 	and.w	r3, r3, #32
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d00b      	beq.n	8002e08 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	f003 0308 	and.w	r3, r3, #8
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d006      	beq.n	8002e08 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	2208      	movs	r2, #8
 8002e00:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f000 f912 	bl	800302c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002e08:	6a3b      	ldr	r3, [r7, #32]
 8002e0a:	f003 0310 	and.w	r3, r3, #16
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d009      	beq.n	8002e26 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	691b      	ldr	r3, [r3, #16]
 8002e18:	f003 0303 	and.w	r3, r3, #3
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d002      	beq.n	8002e26 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002e20:	6878      	ldr	r0, [r7, #4]
 8002e22:	f000 f8f9 	bl	8003018 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002e26:	6a3b      	ldr	r3, [r7, #32]
 8002e28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d00b      	beq.n	8002e48 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002e30:	69fb      	ldr	r3, [r7, #28]
 8002e32:	f003 0310 	and.w	r3, r3, #16
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d006      	beq.n	8002e48 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	2210      	movs	r2, #16
 8002e40:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	f000 f8fc 	bl	8003040 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002e48:	6a3b      	ldr	r3, [r7, #32]
 8002e4a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d00b      	beq.n	8002e6a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002e52:	69fb      	ldr	r3, [r7, #28]
 8002e54:	f003 0308 	and.w	r3, r3, #8
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d006      	beq.n	8002e6a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	2208      	movs	r2, #8
 8002e62:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002e64:	6878      	ldr	r0, [r7, #4]
 8002e66:	f000 f8f5 	bl	8003054 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002e6a:	6a3b      	ldr	r3, [r7, #32]
 8002e6c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d07b      	beq.n	8002f6c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002e74:	69fb      	ldr	r3, [r7, #28]
 8002e76:	f003 0304 	and.w	r3, r3, #4
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d072      	beq.n	8002f64 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002e7e:	6a3b      	ldr	r3, [r7, #32]
 8002e80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d008      	beq.n	8002e9a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d003      	beq.n	8002e9a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e94:	f043 0301 	orr.w	r3, r3, #1
 8002e98:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002e9a:	6a3b      	ldr	r3, [r7, #32]
 8002e9c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d008      	beq.n	8002eb6 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d003      	beq.n	8002eb6 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eb0:	f043 0302 	orr.w	r3, r3, #2
 8002eb4:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002eb6:	6a3b      	ldr	r3, [r7, #32]
 8002eb8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d008      	beq.n	8002ed2 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d003      	beq.n	8002ed2 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ecc:	f043 0304 	orr.w	r3, r3, #4
 8002ed0:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002ed2:	6a3b      	ldr	r3, [r7, #32]
 8002ed4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d043      	beq.n	8002f64 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d03e      	beq.n	8002f64 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002eec:	2b60      	cmp	r3, #96	@ 0x60
 8002eee:	d02b      	beq.n	8002f48 <HAL_CAN_IRQHandler+0x32a>
 8002ef0:	2b60      	cmp	r3, #96	@ 0x60
 8002ef2:	d82e      	bhi.n	8002f52 <HAL_CAN_IRQHandler+0x334>
 8002ef4:	2b50      	cmp	r3, #80	@ 0x50
 8002ef6:	d022      	beq.n	8002f3e <HAL_CAN_IRQHandler+0x320>
 8002ef8:	2b50      	cmp	r3, #80	@ 0x50
 8002efa:	d82a      	bhi.n	8002f52 <HAL_CAN_IRQHandler+0x334>
 8002efc:	2b40      	cmp	r3, #64	@ 0x40
 8002efe:	d019      	beq.n	8002f34 <HAL_CAN_IRQHandler+0x316>
 8002f00:	2b40      	cmp	r3, #64	@ 0x40
 8002f02:	d826      	bhi.n	8002f52 <HAL_CAN_IRQHandler+0x334>
 8002f04:	2b30      	cmp	r3, #48	@ 0x30
 8002f06:	d010      	beq.n	8002f2a <HAL_CAN_IRQHandler+0x30c>
 8002f08:	2b30      	cmp	r3, #48	@ 0x30
 8002f0a:	d822      	bhi.n	8002f52 <HAL_CAN_IRQHandler+0x334>
 8002f0c:	2b10      	cmp	r3, #16
 8002f0e:	d002      	beq.n	8002f16 <HAL_CAN_IRQHandler+0x2f8>
 8002f10:	2b20      	cmp	r3, #32
 8002f12:	d005      	beq.n	8002f20 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002f14:	e01d      	b.n	8002f52 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f18:	f043 0308 	orr.w	r3, r3, #8
 8002f1c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002f1e:	e019      	b.n	8002f54 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f22:	f043 0310 	orr.w	r3, r3, #16
 8002f26:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002f28:	e014      	b.n	8002f54 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f2c:	f043 0320 	orr.w	r3, r3, #32
 8002f30:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002f32:	e00f      	b.n	8002f54 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002f34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002f3a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002f3c:	e00a      	b.n	8002f54 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f44:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002f46:	e005      	b.n	8002f54 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002f48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f4a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f4e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002f50:	e000      	b.n	8002f54 <HAL_CAN_IRQHandler+0x336>
            break;
 8002f52:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	699a      	ldr	r2, [r3, #24]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002f62:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	2204      	movs	r2, #4
 8002f6a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d008      	beq.n	8002f84 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f78:	431a      	orrs	r2, r3
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f000 f872 	bl	8003068 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002f84:	bf00      	nop
 8002f86:	3728      	adds	r7, #40	@ 0x28
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}

08002f8c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002f94:	bf00      	nop
 8002f96:	370c      	adds	r7, #12
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9e:	4770      	bx	lr

08002fa0 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b083      	sub	sp, #12
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002fa8:	bf00      	nop
 8002faa:	370c      	adds	r7, #12
 8002fac:	46bd      	mov	sp, r7
 8002fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb2:	4770      	bx	lr

08002fb4 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b083      	sub	sp, #12
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002fbc:	bf00      	nop
 8002fbe:	370c      	adds	r7, #12
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr

08002fc8 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b083      	sub	sp, #12
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002fd0:	bf00      	nop
 8002fd2:	370c      	adds	r7, #12
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr

08002fdc <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b083      	sub	sp, #12
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002fe4:	bf00      	nop
 8002fe6:	370c      	adds	r7, #12
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fee:	4770      	bx	lr

08002ff0 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b083      	sub	sp, #12
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002ff8:	bf00      	nop
 8002ffa:	370c      	adds	r7, #12
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr

08003004 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003004:	b480      	push	{r7}
 8003006:	b083      	sub	sp, #12
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800300c:	bf00      	nop
 800300e:	370c      	adds	r7, #12
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr

08003018 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003018:	b480      	push	{r7}
 800301a:	b083      	sub	sp, #12
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003020:	bf00      	nop
 8003022:	370c      	adds	r7, #12
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr

0800302c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800302c:	b480      	push	{r7}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003034:	bf00      	nop
 8003036:	370c      	adds	r7, #12
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr

08003040 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003040:	b480      	push	{r7}
 8003042:	b083      	sub	sp, #12
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003048:	bf00      	nop
 800304a:	370c      	adds	r7, #12
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr

08003054 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003054:	b480      	push	{r7}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800305c:	bf00      	nop
 800305e:	370c      	adds	r7, #12
 8003060:	46bd      	mov	sp, r7
 8003062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003066:	4770      	bx	lr

08003068 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003068:	b480      	push	{r7}
 800306a:	b083      	sub	sp, #12
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003070:	bf00      	nop
 8003072:	370c      	adds	r7, #12
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr

0800307c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800307c:	b480      	push	{r7}
 800307e:	b085      	sub	sp, #20
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	f003 0307 	and.w	r3, r3, #7
 800308a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800308c:	4b0c      	ldr	r3, [pc, #48]	@ (80030c0 <__NVIC_SetPriorityGrouping+0x44>)
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003092:	68ba      	ldr	r2, [r7, #8]
 8003094:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003098:	4013      	ands	r3, r2
 800309a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030a4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80030a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80030ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030ae:	4a04      	ldr	r2, [pc, #16]	@ (80030c0 <__NVIC_SetPriorityGrouping+0x44>)
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	60d3      	str	r3, [r2, #12]
}
 80030b4:	bf00      	nop
 80030b6:	3714      	adds	r7, #20
 80030b8:	46bd      	mov	sp, r7
 80030ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030be:	4770      	bx	lr
 80030c0:	e000ed00 	.word	0xe000ed00

080030c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030c4:	b480      	push	{r7}
 80030c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030c8:	4b04      	ldr	r3, [pc, #16]	@ (80030dc <__NVIC_GetPriorityGrouping+0x18>)
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	0a1b      	lsrs	r3, r3, #8
 80030ce:	f003 0307 	and.w	r3, r3, #7
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr
 80030dc:	e000ed00 	.word	0xe000ed00

080030e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b083      	sub	sp, #12
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	4603      	mov	r3, r0
 80030e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	db0b      	blt.n	800310a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030f2:	79fb      	ldrb	r3, [r7, #7]
 80030f4:	f003 021f 	and.w	r2, r3, #31
 80030f8:	4907      	ldr	r1, [pc, #28]	@ (8003118 <__NVIC_EnableIRQ+0x38>)
 80030fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030fe:	095b      	lsrs	r3, r3, #5
 8003100:	2001      	movs	r0, #1
 8003102:	fa00 f202 	lsl.w	r2, r0, r2
 8003106:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800310a:	bf00      	nop
 800310c:	370c      	adds	r7, #12
 800310e:	46bd      	mov	sp, r7
 8003110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003114:	4770      	bx	lr
 8003116:	bf00      	nop
 8003118:	e000e100 	.word	0xe000e100

0800311c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800311c:	b480      	push	{r7}
 800311e:	b083      	sub	sp, #12
 8003120:	af00      	add	r7, sp, #0
 8003122:	4603      	mov	r3, r0
 8003124:	6039      	str	r1, [r7, #0]
 8003126:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003128:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800312c:	2b00      	cmp	r3, #0
 800312e:	db0a      	blt.n	8003146 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	b2da      	uxtb	r2, r3
 8003134:	490c      	ldr	r1, [pc, #48]	@ (8003168 <__NVIC_SetPriority+0x4c>)
 8003136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800313a:	0112      	lsls	r2, r2, #4
 800313c:	b2d2      	uxtb	r2, r2
 800313e:	440b      	add	r3, r1
 8003140:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003144:	e00a      	b.n	800315c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	b2da      	uxtb	r2, r3
 800314a:	4908      	ldr	r1, [pc, #32]	@ (800316c <__NVIC_SetPriority+0x50>)
 800314c:	79fb      	ldrb	r3, [r7, #7]
 800314e:	f003 030f 	and.w	r3, r3, #15
 8003152:	3b04      	subs	r3, #4
 8003154:	0112      	lsls	r2, r2, #4
 8003156:	b2d2      	uxtb	r2, r2
 8003158:	440b      	add	r3, r1
 800315a:	761a      	strb	r2, [r3, #24]
}
 800315c:	bf00      	nop
 800315e:	370c      	adds	r7, #12
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr
 8003168:	e000e100 	.word	0xe000e100
 800316c:	e000ed00 	.word	0xe000ed00

08003170 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003170:	b480      	push	{r7}
 8003172:	b089      	sub	sp, #36	@ 0x24
 8003174:	af00      	add	r7, sp, #0
 8003176:	60f8      	str	r0, [r7, #12]
 8003178:	60b9      	str	r1, [r7, #8]
 800317a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	f003 0307 	and.w	r3, r3, #7
 8003182:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003184:	69fb      	ldr	r3, [r7, #28]
 8003186:	f1c3 0307 	rsb	r3, r3, #7
 800318a:	2b04      	cmp	r3, #4
 800318c:	bf28      	it	cs
 800318e:	2304      	movcs	r3, #4
 8003190:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	3304      	adds	r3, #4
 8003196:	2b06      	cmp	r3, #6
 8003198:	d902      	bls.n	80031a0 <NVIC_EncodePriority+0x30>
 800319a:	69fb      	ldr	r3, [r7, #28]
 800319c:	3b03      	subs	r3, #3
 800319e:	e000      	b.n	80031a2 <NVIC_EncodePriority+0x32>
 80031a0:	2300      	movs	r3, #0
 80031a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031a4:	f04f 32ff 	mov.w	r2, #4294967295
 80031a8:	69bb      	ldr	r3, [r7, #24]
 80031aa:	fa02 f303 	lsl.w	r3, r2, r3
 80031ae:	43da      	mvns	r2, r3
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	401a      	ands	r2, r3
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031b8:	f04f 31ff 	mov.w	r1, #4294967295
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	fa01 f303 	lsl.w	r3, r1, r3
 80031c2:	43d9      	mvns	r1, r3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031c8:	4313      	orrs	r3, r2
         );
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3724      	adds	r7, #36	@ 0x24
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr

080031d6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031d6:	b580      	push	{r7, lr}
 80031d8:	b082      	sub	sp, #8
 80031da:	af00      	add	r7, sp, #0
 80031dc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f7ff ff4c 	bl	800307c <__NVIC_SetPriorityGrouping>
}
 80031e4:	bf00      	nop
 80031e6:	3708      	adds	r7, #8
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}

080031ec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b086      	sub	sp, #24
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	4603      	mov	r3, r0
 80031f4:	60b9      	str	r1, [r7, #8]
 80031f6:	607a      	str	r2, [r7, #4]
 80031f8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80031fa:	2300      	movs	r3, #0
 80031fc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80031fe:	f7ff ff61 	bl	80030c4 <__NVIC_GetPriorityGrouping>
 8003202:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003204:	687a      	ldr	r2, [r7, #4]
 8003206:	68b9      	ldr	r1, [r7, #8]
 8003208:	6978      	ldr	r0, [r7, #20]
 800320a:	f7ff ffb1 	bl	8003170 <NVIC_EncodePriority>
 800320e:	4602      	mov	r2, r0
 8003210:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003214:	4611      	mov	r1, r2
 8003216:	4618      	mov	r0, r3
 8003218:	f7ff ff80 	bl	800311c <__NVIC_SetPriority>
}
 800321c:	bf00      	nop
 800321e:	3718      	adds	r7, #24
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}

08003224 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b082      	sub	sp, #8
 8003228:	af00      	add	r7, sp, #0
 800322a:	4603      	mov	r3, r0
 800322c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800322e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003232:	4618      	mov	r0, r3
 8003234:	f7ff ff54 	bl	80030e0 <__NVIC_EnableIRQ>
}
 8003238:	bf00      	nop
 800323a:	3708      	adds	r7, #8
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}

08003240 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b084      	sub	sp, #16
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003248:	2300      	movs	r3, #0
 800324a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d101      	bne.n	8003256 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e037      	b.n	80032c6 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2202      	movs	r2, #2
 800325a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800326c:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8003270:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800327a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003286:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	695b      	ldr	r3, [r3, #20]
 800328c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003292:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	69db      	ldr	r3, [r3, #28]
 8003298:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800329a:	68fa      	ldr	r2, [r7, #12]
 800329c:	4313      	orrs	r3, r2
 800329e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	68fa      	ldr	r2, [r7, #12]
 80032a6:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80032a8:	6878      	ldr	r0, [r7, #4]
 80032aa:	f000 f941 	bl	8003530 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2200      	movs	r2, #0
 80032b2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2201      	movs	r2, #1
 80032b8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2200      	movs	r2, #0
 80032c0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80032c4:	2300      	movs	r3, #0
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3710      	adds	r7, #16
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}

080032ce <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80032ce:	b580      	push	{r7, lr}
 80032d0:	b086      	sub	sp, #24
 80032d2:	af00      	add	r7, sp, #0
 80032d4:	60f8      	str	r0, [r7, #12]
 80032d6:	60b9      	str	r1, [r7, #8]
 80032d8:	607a      	str	r2, [r7, #4]
 80032da:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80032dc:	2300      	movs	r3, #0
 80032de:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d101      	bne.n	80032ee <HAL_DMA_Start_IT+0x20>
 80032ea:	2302      	movs	r3, #2
 80032ec:	e04a      	b.n	8003384 <HAL_DMA_Start_IT+0xb6>
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2201      	movs	r2, #1
 80032f2:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d13a      	bne.n	8003376 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2202      	movs	r2, #2
 8003304:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2200      	movs	r2, #0
 800330c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f022 0201 	bic.w	r2, r2, #1
 800331c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	687a      	ldr	r2, [r7, #4]
 8003322:	68b9      	ldr	r1, [r7, #8]
 8003324:	68f8      	ldr	r0, [r7, #12]
 8003326:	f000 f8d4 	bl	80034d2 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800332e:	2b00      	cmp	r3, #0
 8003330:	d008      	beq.n	8003344 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f042 020e 	orr.w	r2, r2, #14
 8003340:	601a      	str	r2, [r3, #0]
 8003342:	e00f      	b.n	8003364 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f042 020a 	orr.w	r2, r2, #10
 8003352:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f022 0204 	bic.w	r2, r2, #4
 8003362:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f042 0201 	orr.w	r2, r2, #1
 8003372:	601a      	str	r2, [r3, #0]
 8003374:	e005      	b.n	8003382 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2200      	movs	r2, #0
 800337a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800337e:	2302      	movs	r3, #2
 8003380:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003382:	7dfb      	ldrb	r3, [r7, #23]
}
 8003384:	4618      	mov	r0, r3
 8003386:	3718      	adds	r7, #24
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}

0800338c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b084      	sub	sp, #16
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033a8:	2204      	movs	r2, #4
 80033aa:	409a      	lsls	r2, r3
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	4013      	ands	r3, r2
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d024      	beq.n	80033fe <HAL_DMA_IRQHandler+0x72>
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	f003 0304 	and.w	r3, r3, #4
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d01f      	beq.n	80033fe <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 0320 	and.w	r3, r3, #32
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d107      	bne.n	80033dc <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f022 0204 	bic.w	r2, r2, #4
 80033da:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033e4:	2104      	movs	r1, #4
 80033e6:	fa01 f202 	lsl.w	r2, r1, r2
 80033ea:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d06a      	beq.n	80034ca <HAL_DMA_IRQHandler+0x13e>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033f8:	6878      	ldr	r0, [r7, #4]
 80033fa:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80033fc:	e065      	b.n	80034ca <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003402:	2202      	movs	r2, #2
 8003404:	409a      	lsls	r2, r3
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	4013      	ands	r3, r2
 800340a:	2b00      	cmp	r3, #0
 800340c:	d02c      	beq.n	8003468 <HAL_DMA_IRQHandler+0xdc>
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	f003 0302 	and.w	r3, r3, #2
 8003414:	2b00      	cmp	r3, #0
 8003416:	d027      	beq.n	8003468 <HAL_DMA_IRQHandler+0xdc>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 0320 	and.w	r3, r3, #32
 8003422:	2b00      	cmp	r3, #0
 8003424:	d10b      	bne.n	800343e <HAL_DMA_IRQHandler+0xb2>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f022 020a 	bic.w	r2, r2, #10
 8003434:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2201      	movs	r2, #1
 800343a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003446:	2102      	movs	r1, #2
 8003448:	fa01 f202 	lsl.w	r2, r1, r2
 800344c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2200      	movs	r2, #0
 8003452:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800345a:	2b00      	cmp	r3, #0
 800345c:	d035      	beq.n	80034ca <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003466:	e030      	b.n	80034ca <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800346c:	2208      	movs	r2, #8
 800346e:	409a      	lsls	r2, r3
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	4013      	ands	r3, r2
 8003474:	2b00      	cmp	r3, #0
 8003476:	d028      	beq.n	80034ca <HAL_DMA_IRQHandler+0x13e>
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	f003 0308 	and.w	r3, r3, #8
 800347e:	2b00      	cmp	r3, #0
 8003480:	d023      	beq.n	80034ca <HAL_DMA_IRQHandler+0x13e>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f022 020e 	bic.w	r2, r2, #14
 8003490:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800349a:	2101      	movs	r1, #1
 800349c:	fa01 f202 	lsl.w	r2, r1, r2
 80034a0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2201      	movs	r2, #1
 80034a6:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2201      	movs	r2, #1
 80034ac:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2200      	movs	r2, #0
 80034b4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferErrorCallback != NULL)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d004      	beq.n	80034ca <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	4798      	blx	r3
    }
  }
}
 80034c8:	e7ff      	b.n	80034ca <HAL_DMA_IRQHandler+0x13e>
 80034ca:	bf00      	nop
 80034cc:	3710      	adds	r7, #16
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}

080034d2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80034d2:	b480      	push	{r7}
 80034d4:	b085      	sub	sp, #20
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	60f8      	str	r0, [r7, #12]
 80034da:	60b9      	str	r1, [r7, #8]
 80034dc:	607a      	str	r2, [r7, #4]
 80034de:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034e8:	2101      	movs	r1, #1
 80034ea:	fa01 f202 	lsl.w	r2, r1, r2
 80034ee:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	683a      	ldr	r2, [r7, #0]
 80034f6:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	2b10      	cmp	r3, #16
 80034fe:	d108      	bne.n	8003512 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	687a      	ldr	r2, [r7, #4]
 8003506:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	68ba      	ldr	r2, [r7, #8]
 800350e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003510:	e007      	b.n	8003522 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	68ba      	ldr	r2, [r7, #8]
 8003518:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	687a      	ldr	r2, [r7, #4]
 8003520:	60da      	str	r2, [r3, #12]
}
 8003522:	bf00      	nop
 8003524:	3714      	adds	r7, #20
 8003526:	46bd      	mov	sp, r7
 8003528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352c:	4770      	bx	lr
	...

08003530 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003530:	b480      	push	{r7}
 8003532:	b083      	sub	sp, #12
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	461a      	mov	r2, r3
 800353e:	4b09      	ldr	r3, [pc, #36]	@ (8003564 <DMA_CalcBaseAndBitshift+0x34>)
 8003540:	4413      	add	r3, r2
 8003542:	4a09      	ldr	r2, [pc, #36]	@ (8003568 <DMA_CalcBaseAndBitshift+0x38>)
 8003544:	fba2 2303 	umull	r2, r3, r2, r3
 8003548:	091b      	lsrs	r3, r3, #4
 800354a:	009a      	lsls	r2, r3, #2
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	4a06      	ldr	r2, [pc, #24]	@ (800356c <DMA_CalcBaseAndBitshift+0x3c>)
 8003554:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 8003556:	bf00      	nop
 8003558:	370c      	adds	r7, #12
 800355a:	46bd      	mov	sp, r7
 800355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003560:	4770      	bx	lr
 8003562:	bf00      	nop
 8003564:	bffdfff8 	.word	0xbffdfff8
 8003568:	cccccccd 	.word	0xcccccccd
 800356c:	40020000 	.word	0x40020000

08003570 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003570:	b480      	push	{r7}
 8003572:	b087      	sub	sp, #28
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
 8003578:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800357a:	2300      	movs	r3, #0
 800357c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800357e:	e14e      	b.n	800381e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	2101      	movs	r1, #1
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	fa01 f303 	lsl.w	r3, r1, r3
 800358c:	4013      	ands	r3, r2
 800358e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2b00      	cmp	r3, #0
 8003594:	f000 8140 	beq.w	8003818 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	f003 0303 	and.w	r3, r3, #3
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d005      	beq.n	80035b0 <HAL_GPIO_Init+0x40>
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	f003 0303 	and.w	r3, r3, #3
 80035ac:	2b02      	cmp	r3, #2
 80035ae:	d130      	bne.n	8003612 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	005b      	lsls	r3, r3, #1
 80035ba:	2203      	movs	r2, #3
 80035bc:	fa02 f303 	lsl.w	r3, r2, r3
 80035c0:	43db      	mvns	r3, r3
 80035c2:	693a      	ldr	r2, [r7, #16]
 80035c4:	4013      	ands	r3, r2
 80035c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	68da      	ldr	r2, [r3, #12]
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	005b      	lsls	r3, r3, #1
 80035d0:	fa02 f303 	lsl.w	r3, r2, r3
 80035d4:	693a      	ldr	r2, [r7, #16]
 80035d6:	4313      	orrs	r3, r2
 80035d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	693a      	ldr	r2, [r7, #16]
 80035de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80035e6:	2201      	movs	r2, #1
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	fa02 f303 	lsl.w	r3, r2, r3
 80035ee:	43db      	mvns	r3, r3
 80035f0:	693a      	ldr	r2, [r7, #16]
 80035f2:	4013      	ands	r3, r2
 80035f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	091b      	lsrs	r3, r3, #4
 80035fc:	f003 0201 	and.w	r2, r3, #1
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	fa02 f303 	lsl.w	r3, r2, r3
 8003606:	693a      	ldr	r2, [r7, #16]
 8003608:	4313      	orrs	r3, r2
 800360a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	693a      	ldr	r2, [r7, #16]
 8003610:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	f003 0303 	and.w	r3, r3, #3
 800361a:	2b03      	cmp	r3, #3
 800361c:	d017      	beq.n	800364e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	68db      	ldr	r3, [r3, #12]
 8003622:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	005b      	lsls	r3, r3, #1
 8003628:	2203      	movs	r2, #3
 800362a:	fa02 f303 	lsl.w	r3, r2, r3
 800362e:	43db      	mvns	r3, r3
 8003630:	693a      	ldr	r2, [r7, #16]
 8003632:	4013      	ands	r3, r2
 8003634:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	689a      	ldr	r2, [r3, #8]
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	005b      	lsls	r3, r3, #1
 800363e:	fa02 f303 	lsl.w	r3, r2, r3
 8003642:	693a      	ldr	r2, [r7, #16]
 8003644:	4313      	orrs	r3, r2
 8003646:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	693a      	ldr	r2, [r7, #16]
 800364c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	f003 0303 	and.w	r3, r3, #3
 8003656:	2b02      	cmp	r3, #2
 8003658:	d123      	bne.n	80036a2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	08da      	lsrs	r2, r3, #3
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	3208      	adds	r2, #8
 8003662:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003666:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	f003 0307 	and.w	r3, r3, #7
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	220f      	movs	r2, #15
 8003672:	fa02 f303 	lsl.w	r3, r2, r3
 8003676:	43db      	mvns	r3, r3
 8003678:	693a      	ldr	r2, [r7, #16]
 800367a:	4013      	ands	r3, r2
 800367c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	691a      	ldr	r2, [r3, #16]
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	f003 0307 	and.w	r3, r3, #7
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	fa02 f303 	lsl.w	r3, r2, r3
 800368e:	693a      	ldr	r2, [r7, #16]
 8003690:	4313      	orrs	r3, r2
 8003692:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	08da      	lsrs	r2, r3, #3
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	3208      	adds	r2, #8
 800369c:	6939      	ldr	r1, [r7, #16]
 800369e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	005b      	lsls	r3, r3, #1
 80036ac:	2203      	movs	r2, #3
 80036ae:	fa02 f303 	lsl.w	r3, r2, r3
 80036b2:	43db      	mvns	r3, r3
 80036b4:	693a      	ldr	r2, [r7, #16]
 80036b6:	4013      	ands	r3, r2
 80036b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	f003 0203 	and.w	r2, r3, #3
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	005b      	lsls	r3, r3, #1
 80036c6:	fa02 f303 	lsl.w	r3, r2, r3
 80036ca:	693a      	ldr	r2, [r7, #16]
 80036cc:	4313      	orrs	r3, r2
 80036ce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	693a      	ldr	r2, [r7, #16]
 80036d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80036de:	2b00      	cmp	r3, #0
 80036e0:	f000 809a 	beq.w	8003818 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036e4:	4b55      	ldr	r3, [pc, #340]	@ (800383c <HAL_GPIO_Init+0x2cc>)
 80036e6:	699b      	ldr	r3, [r3, #24]
 80036e8:	4a54      	ldr	r2, [pc, #336]	@ (800383c <HAL_GPIO_Init+0x2cc>)
 80036ea:	f043 0301 	orr.w	r3, r3, #1
 80036ee:	6193      	str	r3, [r2, #24]
 80036f0:	4b52      	ldr	r3, [pc, #328]	@ (800383c <HAL_GPIO_Init+0x2cc>)
 80036f2:	699b      	ldr	r3, [r3, #24]
 80036f4:	f003 0301 	and.w	r3, r3, #1
 80036f8:	60bb      	str	r3, [r7, #8]
 80036fa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80036fc:	4a50      	ldr	r2, [pc, #320]	@ (8003840 <HAL_GPIO_Init+0x2d0>)
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	089b      	lsrs	r3, r3, #2
 8003702:	3302      	adds	r3, #2
 8003704:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003708:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	f003 0303 	and.w	r3, r3, #3
 8003710:	009b      	lsls	r3, r3, #2
 8003712:	220f      	movs	r2, #15
 8003714:	fa02 f303 	lsl.w	r3, r2, r3
 8003718:	43db      	mvns	r3, r3
 800371a:	693a      	ldr	r2, [r7, #16]
 800371c:	4013      	ands	r3, r2
 800371e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003726:	d013      	beq.n	8003750 <HAL_GPIO_Init+0x1e0>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	4a46      	ldr	r2, [pc, #280]	@ (8003844 <HAL_GPIO_Init+0x2d4>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d00d      	beq.n	800374c <HAL_GPIO_Init+0x1dc>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	4a45      	ldr	r2, [pc, #276]	@ (8003848 <HAL_GPIO_Init+0x2d8>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d007      	beq.n	8003748 <HAL_GPIO_Init+0x1d8>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	4a44      	ldr	r2, [pc, #272]	@ (800384c <HAL_GPIO_Init+0x2dc>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d101      	bne.n	8003744 <HAL_GPIO_Init+0x1d4>
 8003740:	2303      	movs	r3, #3
 8003742:	e006      	b.n	8003752 <HAL_GPIO_Init+0x1e2>
 8003744:	2305      	movs	r3, #5
 8003746:	e004      	b.n	8003752 <HAL_GPIO_Init+0x1e2>
 8003748:	2302      	movs	r3, #2
 800374a:	e002      	b.n	8003752 <HAL_GPIO_Init+0x1e2>
 800374c:	2301      	movs	r3, #1
 800374e:	e000      	b.n	8003752 <HAL_GPIO_Init+0x1e2>
 8003750:	2300      	movs	r3, #0
 8003752:	697a      	ldr	r2, [r7, #20]
 8003754:	f002 0203 	and.w	r2, r2, #3
 8003758:	0092      	lsls	r2, r2, #2
 800375a:	4093      	lsls	r3, r2
 800375c:	693a      	ldr	r2, [r7, #16]
 800375e:	4313      	orrs	r3, r2
 8003760:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003762:	4937      	ldr	r1, [pc, #220]	@ (8003840 <HAL_GPIO_Init+0x2d0>)
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	089b      	lsrs	r3, r3, #2
 8003768:	3302      	adds	r3, #2
 800376a:	693a      	ldr	r2, [r7, #16]
 800376c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003770:	4b37      	ldr	r3, [pc, #220]	@ (8003850 <HAL_GPIO_Init+0x2e0>)
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	43db      	mvns	r3, r3
 800377a:	693a      	ldr	r2, [r7, #16]
 800377c:	4013      	ands	r3, r2
 800377e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003788:	2b00      	cmp	r3, #0
 800378a:	d003      	beq.n	8003794 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 800378c:	693a      	ldr	r2, [r7, #16]
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	4313      	orrs	r3, r2
 8003792:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003794:	4a2e      	ldr	r2, [pc, #184]	@ (8003850 <HAL_GPIO_Init+0x2e0>)
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800379a:	4b2d      	ldr	r3, [pc, #180]	@ (8003850 <HAL_GPIO_Init+0x2e0>)
 800379c:	68db      	ldr	r3, [r3, #12]
 800379e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	43db      	mvns	r3, r3
 80037a4:	693a      	ldr	r2, [r7, #16]
 80037a6:	4013      	ands	r3, r2
 80037a8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d003      	beq.n	80037be <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80037b6:	693a      	ldr	r2, [r7, #16]
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	4313      	orrs	r3, r2
 80037bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80037be:	4a24      	ldr	r2, [pc, #144]	@ (8003850 <HAL_GPIO_Init+0x2e0>)
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80037c4:	4b22      	ldr	r3, [pc, #136]	@ (8003850 <HAL_GPIO_Init+0x2e0>)
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	43db      	mvns	r3, r3
 80037ce:	693a      	ldr	r2, [r7, #16]
 80037d0:	4013      	ands	r3, r2
 80037d2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d003      	beq.n	80037e8 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80037e0:	693a      	ldr	r2, [r7, #16]
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	4313      	orrs	r3, r2
 80037e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80037e8:	4a19      	ldr	r2, [pc, #100]	@ (8003850 <HAL_GPIO_Init+0x2e0>)
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80037ee:	4b18      	ldr	r3, [pc, #96]	@ (8003850 <HAL_GPIO_Init+0x2e0>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	43db      	mvns	r3, r3
 80037f8:	693a      	ldr	r2, [r7, #16]
 80037fa:	4013      	ands	r3, r2
 80037fc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003806:	2b00      	cmp	r3, #0
 8003808:	d003      	beq.n	8003812 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800380a:	693a      	ldr	r2, [r7, #16]
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	4313      	orrs	r3, r2
 8003810:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003812:	4a0f      	ldr	r2, [pc, #60]	@ (8003850 <HAL_GPIO_Init+0x2e0>)
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	3301      	adds	r3, #1
 800381c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	fa22 f303 	lsr.w	r3, r2, r3
 8003828:	2b00      	cmp	r3, #0
 800382a:	f47f aea9 	bne.w	8003580 <HAL_GPIO_Init+0x10>
  }
}
 800382e:	bf00      	nop
 8003830:	bf00      	nop
 8003832:	371c      	adds	r7, #28
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr
 800383c:	40021000 	.word	0x40021000
 8003840:	40010000 	.word	0x40010000
 8003844:	48000400 	.word	0x48000400
 8003848:	48000800 	.word	0x48000800
 800384c:	48000c00 	.word	0x48000c00
 8003850:	40010400 	.word	0x40010400

08003854 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003854:	b480      	push	{r7}
 8003856:	b085      	sub	sp, #20
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	460b      	mov	r3, r1
 800385e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	691a      	ldr	r2, [r3, #16]
 8003864:	887b      	ldrh	r3, [r7, #2]
 8003866:	4013      	ands	r3, r2
 8003868:	2b00      	cmp	r3, #0
 800386a:	d002      	beq.n	8003872 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800386c:	2301      	movs	r3, #1
 800386e:	73fb      	strb	r3, [r7, #15]
 8003870:	e001      	b.n	8003876 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003872:	2300      	movs	r3, #0
 8003874:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003876:	7bfb      	ldrb	r3, [r7, #15]
}
 8003878:	4618      	mov	r0, r3
 800387a:	3714      	adds	r7, #20
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr

08003884 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003884:	b480      	push	{r7}
 8003886:	b083      	sub	sp, #12
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
 800388c:	460b      	mov	r3, r1
 800388e:	807b      	strh	r3, [r7, #2]
 8003890:	4613      	mov	r3, r2
 8003892:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003894:	787b      	ldrb	r3, [r7, #1]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d003      	beq.n	80038a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800389a:	887a      	ldrh	r2, [r7, #2]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80038a0:	e002      	b.n	80038a8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80038a2:	887a      	ldrh	r2, [r7, #2]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80038a8:	bf00      	nop
 80038aa:	370c      	adds	r7, #12
 80038ac:	46bd      	mov	sp, r7
 80038ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b2:	4770      	bx	lr

080038b4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b085      	sub	sp, #20
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
 80038bc:	460b      	mov	r3, r1
 80038be:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	695b      	ldr	r3, [r3, #20]
 80038c4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80038c6:	887a      	ldrh	r2, [r7, #2]
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	4013      	ands	r3, r2
 80038cc:	041a      	lsls	r2, r3, #16
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	43d9      	mvns	r1, r3
 80038d2:	887b      	ldrh	r3, [r7, #2]
 80038d4:	400b      	ands	r3, r1
 80038d6:	431a      	orrs	r2, r3
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	619a      	str	r2, [r3, #24]
}
 80038dc:	bf00      	nop
 80038de:	3714      	adds	r7, #20
 80038e0:	46bd      	mov	sp, r7
 80038e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e6:	4770      	bx	lr

080038e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 80038ee:	af00      	add	r7, sp, #0
 80038f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038f4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80038f8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80038fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038fe:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d102      	bne.n	800390e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	f001 b823 	b.w	8004954 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800390e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003912:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 0301 	and.w	r3, r3, #1
 800391e:	2b00      	cmp	r3, #0
 8003920:	f000 817d 	beq.w	8003c1e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003924:	4bbc      	ldr	r3, [pc, #752]	@ (8003c18 <HAL_RCC_OscConfig+0x330>)
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	f003 030c 	and.w	r3, r3, #12
 800392c:	2b04      	cmp	r3, #4
 800392e:	d00c      	beq.n	800394a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003930:	4bb9      	ldr	r3, [pc, #740]	@ (8003c18 <HAL_RCC_OscConfig+0x330>)
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	f003 030c 	and.w	r3, r3, #12
 8003938:	2b08      	cmp	r3, #8
 800393a:	d15c      	bne.n	80039f6 <HAL_RCC_OscConfig+0x10e>
 800393c:	4bb6      	ldr	r3, [pc, #728]	@ (8003c18 <HAL_RCC_OscConfig+0x330>)
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003944:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003948:	d155      	bne.n	80039f6 <HAL_RCC_OscConfig+0x10e>
 800394a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800394e:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003952:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8003956:	fa93 f3a3 	rbit	r3, r3
 800395a:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800395e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003962:	fab3 f383 	clz	r3, r3
 8003966:	b2db      	uxtb	r3, r3
 8003968:	095b      	lsrs	r3, r3, #5
 800396a:	b2db      	uxtb	r3, r3
 800396c:	f043 0301 	orr.w	r3, r3, #1
 8003970:	b2db      	uxtb	r3, r3
 8003972:	2b01      	cmp	r3, #1
 8003974:	d102      	bne.n	800397c <HAL_RCC_OscConfig+0x94>
 8003976:	4ba8      	ldr	r3, [pc, #672]	@ (8003c18 <HAL_RCC_OscConfig+0x330>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	e015      	b.n	80039a8 <HAL_RCC_OscConfig+0xc0>
 800397c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003980:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003984:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8003988:	fa93 f3a3 	rbit	r3, r3
 800398c:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8003990:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003994:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8003998:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 800399c:	fa93 f3a3 	rbit	r3, r3
 80039a0:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 80039a4:	4b9c      	ldr	r3, [pc, #624]	@ (8003c18 <HAL_RCC_OscConfig+0x330>)
 80039a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039a8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80039ac:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 80039b0:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80039b4:	fa92 f2a2 	rbit	r2, r2
 80039b8:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 80039bc:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 80039c0:	fab2 f282 	clz	r2, r2
 80039c4:	b2d2      	uxtb	r2, r2
 80039c6:	f042 0220 	orr.w	r2, r2, #32
 80039ca:	b2d2      	uxtb	r2, r2
 80039cc:	f002 021f 	and.w	r2, r2, #31
 80039d0:	2101      	movs	r1, #1
 80039d2:	fa01 f202 	lsl.w	r2, r1, r2
 80039d6:	4013      	ands	r3, r2
 80039d8:	2b00      	cmp	r3, #0
 80039da:	f000 811f 	beq.w	8003c1c <HAL_RCC_OscConfig+0x334>
 80039de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039e2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	f040 8116 	bne.w	8003c1c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	f000 bfaf 	b.w	8004954 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039fa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a06:	d106      	bne.n	8003a16 <HAL_RCC_OscConfig+0x12e>
 8003a08:	4b83      	ldr	r3, [pc, #524]	@ (8003c18 <HAL_RCC_OscConfig+0x330>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a82      	ldr	r2, [pc, #520]	@ (8003c18 <HAL_RCC_OscConfig+0x330>)
 8003a0e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a12:	6013      	str	r3, [r2, #0]
 8003a14:	e036      	b.n	8003a84 <HAL_RCC_OscConfig+0x19c>
 8003a16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a1a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d10c      	bne.n	8003a40 <HAL_RCC_OscConfig+0x158>
 8003a26:	4b7c      	ldr	r3, [pc, #496]	@ (8003c18 <HAL_RCC_OscConfig+0x330>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a7b      	ldr	r2, [pc, #492]	@ (8003c18 <HAL_RCC_OscConfig+0x330>)
 8003a2c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a30:	6013      	str	r3, [r2, #0]
 8003a32:	4b79      	ldr	r3, [pc, #484]	@ (8003c18 <HAL_RCC_OscConfig+0x330>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a78      	ldr	r2, [pc, #480]	@ (8003c18 <HAL_RCC_OscConfig+0x330>)
 8003a38:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a3c:	6013      	str	r3, [r2, #0]
 8003a3e:	e021      	b.n	8003a84 <HAL_RCC_OscConfig+0x19c>
 8003a40:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a44:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003a50:	d10c      	bne.n	8003a6c <HAL_RCC_OscConfig+0x184>
 8003a52:	4b71      	ldr	r3, [pc, #452]	@ (8003c18 <HAL_RCC_OscConfig+0x330>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a70      	ldr	r2, [pc, #448]	@ (8003c18 <HAL_RCC_OscConfig+0x330>)
 8003a58:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003a5c:	6013      	str	r3, [r2, #0]
 8003a5e:	4b6e      	ldr	r3, [pc, #440]	@ (8003c18 <HAL_RCC_OscConfig+0x330>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a6d      	ldr	r2, [pc, #436]	@ (8003c18 <HAL_RCC_OscConfig+0x330>)
 8003a64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a68:	6013      	str	r3, [r2, #0]
 8003a6a:	e00b      	b.n	8003a84 <HAL_RCC_OscConfig+0x19c>
 8003a6c:	4b6a      	ldr	r3, [pc, #424]	@ (8003c18 <HAL_RCC_OscConfig+0x330>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a69      	ldr	r2, [pc, #420]	@ (8003c18 <HAL_RCC_OscConfig+0x330>)
 8003a72:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a76:	6013      	str	r3, [r2, #0]
 8003a78:	4b67      	ldr	r3, [pc, #412]	@ (8003c18 <HAL_RCC_OscConfig+0x330>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a66      	ldr	r2, [pc, #408]	@ (8003c18 <HAL_RCC_OscConfig+0x330>)
 8003a7e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a82:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003a84:	4b64      	ldr	r3, [pc, #400]	@ (8003c18 <HAL_RCC_OscConfig+0x330>)
 8003a86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a88:	f023 020f 	bic.w	r2, r3, #15
 8003a8c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a90:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	495f      	ldr	r1, [pc, #380]	@ (8003c18 <HAL_RCC_OscConfig+0x330>)
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003aa2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d059      	beq.n	8003b62 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aae:	f7fd fe67 	bl	8001780 <HAL_GetTick>
 8003ab2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ab6:	e00a      	b.n	8003ace <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ab8:	f7fd fe62 	bl	8001780 <HAL_GetTick>
 8003abc:	4602      	mov	r2, r0
 8003abe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003ac2:	1ad3      	subs	r3, r2, r3
 8003ac4:	2b64      	cmp	r3, #100	@ 0x64
 8003ac6:	d902      	bls.n	8003ace <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8003ac8:	2303      	movs	r3, #3
 8003aca:	f000 bf43 	b.w	8004954 <HAL_RCC_OscConfig+0x106c>
 8003ace:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003ad2:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ad6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8003ada:	fa93 f3a3 	rbit	r3, r3
 8003ade:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8003ae2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ae6:	fab3 f383 	clz	r3, r3
 8003aea:	b2db      	uxtb	r3, r3
 8003aec:	095b      	lsrs	r3, r3, #5
 8003aee:	b2db      	uxtb	r3, r3
 8003af0:	f043 0301 	orr.w	r3, r3, #1
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	d102      	bne.n	8003b00 <HAL_RCC_OscConfig+0x218>
 8003afa:	4b47      	ldr	r3, [pc, #284]	@ (8003c18 <HAL_RCC_OscConfig+0x330>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	e015      	b.n	8003b2c <HAL_RCC_OscConfig+0x244>
 8003b00:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003b04:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b08:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8003b0c:	fa93 f3a3 	rbit	r3, r3
 8003b10:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8003b14:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003b18:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8003b1c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8003b20:	fa93 f3a3 	rbit	r3, r3
 8003b24:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8003b28:	4b3b      	ldr	r3, [pc, #236]	@ (8003c18 <HAL_RCC_OscConfig+0x330>)
 8003b2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b2c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003b30:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8003b34:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8003b38:	fa92 f2a2 	rbit	r2, r2
 8003b3c:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8003b40:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8003b44:	fab2 f282 	clz	r2, r2
 8003b48:	b2d2      	uxtb	r2, r2
 8003b4a:	f042 0220 	orr.w	r2, r2, #32
 8003b4e:	b2d2      	uxtb	r2, r2
 8003b50:	f002 021f 	and.w	r2, r2, #31
 8003b54:	2101      	movs	r1, #1
 8003b56:	fa01 f202 	lsl.w	r2, r1, r2
 8003b5a:	4013      	ands	r3, r2
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d0ab      	beq.n	8003ab8 <HAL_RCC_OscConfig+0x1d0>
 8003b60:	e05d      	b.n	8003c1e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b62:	f7fd fe0d 	bl	8001780 <HAL_GetTick>
 8003b66:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b6a:	e00a      	b.n	8003b82 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b6c:	f7fd fe08 	bl	8001780 <HAL_GetTick>
 8003b70:	4602      	mov	r2, r0
 8003b72:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003b76:	1ad3      	subs	r3, r2, r3
 8003b78:	2b64      	cmp	r3, #100	@ 0x64
 8003b7a:	d902      	bls.n	8003b82 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8003b7c:	2303      	movs	r3, #3
 8003b7e:	f000 bee9 	b.w	8004954 <HAL_RCC_OscConfig+0x106c>
 8003b82:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003b86:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b8a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8003b8e:	fa93 f3a3 	rbit	r3, r3
 8003b92:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8003b96:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b9a:	fab3 f383 	clz	r3, r3
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	095b      	lsrs	r3, r3, #5
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	f043 0301 	orr.w	r3, r3, #1
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	2b01      	cmp	r3, #1
 8003bac:	d102      	bne.n	8003bb4 <HAL_RCC_OscConfig+0x2cc>
 8003bae:	4b1a      	ldr	r3, [pc, #104]	@ (8003c18 <HAL_RCC_OscConfig+0x330>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	e015      	b.n	8003be0 <HAL_RCC_OscConfig+0x2f8>
 8003bb4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003bb8:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bbc:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8003bc0:	fa93 f3a3 	rbit	r3, r3
 8003bc4:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8003bc8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003bcc:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8003bd0:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8003bd4:	fa93 f3a3 	rbit	r3, r3
 8003bd8:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8003bdc:	4b0e      	ldr	r3, [pc, #56]	@ (8003c18 <HAL_RCC_OscConfig+0x330>)
 8003bde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003be0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003be4:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8003be8:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8003bec:	fa92 f2a2 	rbit	r2, r2
 8003bf0:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8003bf4:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8003bf8:	fab2 f282 	clz	r2, r2
 8003bfc:	b2d2      	uxtb	r2, r2
 8003bfe:	f042 0220 	orr.w	r2, r2, #32
 8003c02:	b2d2      	uxtb	r2, r2
 8003c04:	f002 021f 	and.w	r2, r2, #31
 8003c08:	2101      	movs	r1, #1
 8003c0a:	fa01 f202 	lsl.w	r2, r1, r2
 8003c0e:	4013      	ands	r3, r2
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d1ab      	bne.n	8003b6c <HAL_RCC_OscConfig+0x284>
 8003c14:	e003      	b.n	8003c1e <HAL_RCC_OscConfig+0x336>
 8003c16:	bf00      	nop
 8003c18:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c1e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c22:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 0302 	and.w	r3, r3, #2
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	f000 817d 	beq.w	8003f2e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003c34:	4ba6      	ldr	r3, [pc, #664]	@ (8003ed0 <HAL_RCC_OscConfig+0x5e8>)
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	f003 030c 	and.w	r3, r3, #12
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d00b      	beq.n	8003c58 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003c40:	4ba3      	ldr	r3, [pc, #652]	@ (8003ed0 <HAL_RCC_OscConfig+0x5e8>)
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	f003 030c 	and.w	r3, r3, #12
 8003c48:	2b08      	cmp	r3, #8
 8003c4a:	d172      	bne.n	8003d32 <HAL_RCC_OscConfig+0x44a>
 8003c4c:	4ba0      	ldr	r3, [pc, #640]	@ (8003ed0 <HAL_RCC_OscConfig+0x5e8>)
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d16c      	bne.n	8003d32 <HAL_RCC_OscConfig+0x44a>
 8003c58:	2302      	movs	r3, #2
 8003c5a:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c5e:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8003c62:	fa93 f3a3 	rbit	r3, r3
 8003c66:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8003c6a:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c6e:	fab3 f383 	clz	r3, r3
 8003c72:	b2db      	uxtb	r3, r3
 8003c74:	095b      	lsrs	r3, r3, #5
 8003c76:	b2db      	uxtb	r3, r3
 8003c78:	f043 0301 	orr.w	r3, r3, #1
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	d102      	bne.n	8003c88 <HAL_RCC_OscConfig+0x3a0>
 8003c82:	4b93      	ldr	r3, [pc, #588]	@ (8003ed0 <HAL_RCC_OscConfig+0x5e8>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	e013      	b.n	8003cb0 <HAL_RCC_OscConfig+0x3c8>
 8003c88:	2302      	movs	r3, #2
 8003c8a:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c8e:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8003c92:	fa93 f3a3 	rbit	r3, r3
 8003c96:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8003c9a:	2302      	movs	r3, #2
 8003c9c:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8003ca0:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8003ca4:	fa93 f3a3 	rbit	r3, r3
 8003ca8:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8003cac:	4b88      	ldr	r3, [pc, #544]	@ (8003ed0 <HAL_RCC_OscConfig+0x5e8>)
 8003cae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cb0:	2202      	movs	r2, #2
 8003cb2:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8003cb6:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8003cba:	fa92 f2a2 	rbit	r2, r2
 8003cbe:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8003cc2:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8003cc6:	fab2 f282 	clz	r2, r2
 8003cca:	b2d2      	uxtb	r2, r2
 8003ccc:	f042 0220 	orr.w	r2, r2, #32
 8003cd0:	b2d2      	uxtb	r2, r2
 8003cd2:	f002 021f 	and.w	r2, r2, #31
 8003cd6:	2101      	movs	r1, #1
 8003cd8:	fa01 f202 	lsl.w	r2, r1, r2
 8003cdc:	4013      	ands	r3, r2
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d00a      	beq.n	8003cf8 <HAL_RCC_OscConfig+0x410>
 8003ce2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ce6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	691b      	ldr	r3, [r3, #16]
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	d002      	beq.n	8003cf8 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	f000 be2e 	b.w	8004954 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cf8:	4b75      	ldr	r3, [pc, #468]	@ (8003ed0 <HAL_RCC_OscConfig+0x5e8>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003d00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d04:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	695b      	ldr	r3, [r3, #20]
 8003d0c:	21f8      	movs	r1, #248	@ 0xf8
 8003d0e:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d12:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8003d16:	fa91 f1a1 	rbit	r1, r1
 8003d1a:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8003d1e:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8003d22:	fab1 f181 	clz	r1, r1
 8003d26:	b2c9      	uxtb	r1, r1
 8003d28:	408b      	lsls	r3, r1
 8003d2a:	4969      	ldr	r1, [pc, #420]	@ (8003ed0 <HAL_RCC_OscConfig+0x5e8>)
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d30:	e0fd      	b.n	8003f2e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003d32:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d36:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	691b      	ldr	r3, [r3, #16]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	f000 8088 	beq.w	8003e54 <HAL_RCC_OscConfig+0x56c>
 8003d44:	2301      	movs	r3, #1
 8003d46:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d4a:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8003d4e:	fa93 f3a3 	rbit	r3, r3
 8003d52:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8003d56:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d5a:	fab3 f383 	clz	r3, r3
 8003d5e:	b2db      	uxtb	r3, r3
 8003d60:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003d64:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003d68:	009b      	lsls	r3, r3, #2
 8003d6a:	461a      	mov	r2, r3
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d70:	f7fd fd06 	bl	8001780 <HAL_GetTick>
 8003d74:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d78:	e00a      	b.n	8003d90 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d7a:	f7fd fd01 	bl	8001780 <HAL_GetTick>
 8003d7e:	4602      	mov	r2, r0
 8003d80:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003d84:	1ad3      	subs	r3, r2, r3
 8003d86:	2b02      	cmp	r3, #2
 8003d88:	d902      	bls.n	8003d90 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8003d8a:	2303      	movs	r3, #3
 8003d8c:	f000 bde2 	b.w	8004954 <HAL_RCC_OscConfig+0x106c>
 8003d90:	2302      	movs	r3, #2
 8003d92:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d96:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8003d9a:	fa93 f3a3 	rbit	r3, r3
 8003d9e:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8003da2:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003da6:	fab3 f383 	clz	r3, r3
 8003daa:	b2db      	uxtb	r3, r3
 8003dac:	095b      	lsrs	r3, r3, #5
 8003dae:	b2db      	uxtb	r3, r3
 8003db0:	f043 0301 	orr.w	r3, r3, #1
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	d102      	bne.n	8003dc0 <HAL_RCC_OscConfig+0x4d8>
 8003dba:	4b45      	ldr	r3, [pc, #276]	@ (8003ed0 <HAL_RCC_OscConfig+0x5e8>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	e013      	b.n	8003de8 <HAL_RCC_OscConfig+0x500>
 8003dc0:	2302      	movs	r3, #2
 8003dc2:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dc6:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8003dca:	fa93 f3a3 	rbit	r3, r3
 8003dce:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8003dd2:	2302      	movs	r3, #2
 8003dd4:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8003dd8:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8003ddc:	fa93 f3a3 	rbit	r3, r3
 8003de0:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8003de4:	4b3a      	ldr	r3, [pc, #232]	@ (8003ed0 <HAL_RCC_OscConfig+0x5e8>)
 8003de6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003de8:	2202      	movs	r2, #2
 8003dea:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8003dee:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8003df2:	fa92 f2a2 	rbit	r2, r2
 8003df6:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8003dfa:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8003dfe:	fab2 f282 	clz	r2, r2
 8003e02:	b2d2      	uxtb	r2, r2
 8003e04:	f042 0220 	orr.w	r2, r2, #32
 8003e08:	b2d2      	uxtb	r2, r2
 8003e0a:	f002 021f 	and.w	r2, r2, #31
 8003e0e:	2101      	movs	r1, #1
 8003e10:	fa01 f202 	lsl.w	r2, r1, r2
 8003e14:	4013      	ands	r3, r2
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d0af      	beq.n	8003d7a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e1a:	4b2d      	ldr	r3, [pc, #180]	@ (8003ed0 <HAL_RCC_OscConfig+0x5e8>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003e22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e26:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	695b      	ldr	r3, [r3, #20]
 8003e2e:	21f8      	movs	r1, #248	@ 0xf8
 8003e30:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e34:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8003e38:	fa91 f1a1 	rbit	r1, r1
 8003e3c:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8003e40:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8003e44:	fab1 f181 	clz	r1, r1
 8003e48:	b2c9      	uxtb	r1, r1
 8003e4a:	408b      	lsls	r3, r1
 8003e4c:	4920      	ldr	r1, [pc, #128]	@ (8003ed0 <HAL_RCC_OscConfig+0x5e8>)
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	600b      	str	r3, [r1, #0]
 8003e52:	e06c      	b.n	8003f2e <HAL_RCC_OscConfig+0x646>
 8003e54:	2301      	movs	r3, #1
 8003e56:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e5a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003e5e:	fa93 f3a3 	rbit	r3, r3
 8003e62:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8003e66:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e6a:	fab3 f383 	clz	r3, r3
 8003e6e:	b2db      	uxtb	r3, r3
 8003e70:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003e74:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003e78:	009b      	lsls	r3, r3, #2
 8003e7a:	461a      	mov	r2, r3
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e80:	f7fd fc7e 	bl	8001780 <HAL_GetTick>
 8003e84:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e88:	e00a      	b.n	8003ea0 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e8a:	f7fd fc79 	bl	8001780 <HAL_GetTick>
 8003e8e:	4602      	mov	r2, r0
 8003e90:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003e94:	1ad3      	subs	r3, r2, r3
 8003e96:	2b02      	cmp	r3, #2
 8003e98:	d902      	bls.n	8003ea0 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8003e9a:	2303      	movs	r3, #3
 8003e9c:	f000 bd5a 	b.w	8004954 <HAL_RCC_OscConfig+0x106c>
 8003ea0:	2302      	movs	r3, #2
 8003ea2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ea6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8003eaa:	fa93 f3a3 	rbit	r3, r3
 8003eae:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8003eb2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003eb6:	fab3 f383 	clz	r3, r3
 8003eba:	b2db      	uxtb	r3, r3
 8003ebc:	095b      	lsrs	r3, r3, #5
 8003ebe:	b2db      	uxtb	r3, r3
 8003ec0:	f043 0301 	orr.w	r3, r3, #1
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d104      	bne.n	8003ed4 <HAL_RCC_OscConfig+0x5ec>
 8003eca:	4b01      	ldr	r3, [pc, #4]	@ (8003ed0 <HAL_RCC_OscConfig+0x5e8>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	e015      	b.n	8003efc <HAL_RCC_OscConfig+0x614>
 8003ed0:	40021000 	.word	0x40021000
 8003ed4:	2302      	movs	r3, #2
 8003ed6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eda:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8003ede:	fa93 f3a3 	rbit	r3, r3
 8003ee2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8003ee6:	2302      	movs	r3, #2
 8003ee8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8003eec:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003ef0:	fa93 f3a3 	rbit	r3, r3
 8003ef4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8003ef8:	4bc8      	ldr	r3, [pc, #800]	@ (800421c <HAL_RCC_OscConfig+0x934>)
 8003efa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003efc:	2202      	movs	r2, #2
 8003efe:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8003f02:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8003f06:	fa92 f2a2 	rbit	r2, r2
 8003f0a:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8003f0e:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8003f12:	fab2 f282 	clz	r2, r2
 8003f16:	b2d2      	uxtb	r2, r2
 8003f18:	f042 0220 	orr.w	r2, r2, #32
 8003f1c:	b2d2      	uxtb	r2, r2
 8003f1e:	f002 021f 	and.w	r2, r2, #31
 8003f22:	2101      	movs	r1, #1
 8003f24:	fa01 f202 	lsl.w	r2, r1, r2
 8003f28:	4013      	ands	r3, r2
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d1ad      	bne.n	8003e8a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f32:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f003 0308 	and.w	r3, r3, #8
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	f000 8110 	beq.w	8004164 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f44:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f48:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	699b      	ldr	r3, [r3, #24]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d079      	beq.n	8004048 <HAL_RCC_OscConfig+0x760>
 8003f54:	2301      	movs	r3, #1
 8003f56:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f5a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003f5e:	fa93 f3a3 	rbit	r3, r3
 8003f62:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8003f66:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f6a:	fab3 f383 	clz	r3, r3
 8003f6e:	b2db      	uxtb	r3, r3
 8003f70:	461a      	mov	r2, r3
 8003f72:	4bab      	ldr	r3, [pc, #684]	@ (8004220 <HAL_RCC_OscConfig+0x938>)
 8003f74:	4413      	add	r3, r2
 8003f76:	009b      	lsls	r3, r3, #2
 8003f78:	461a      	mov	r2, r3
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f7e:	f7fd fbff 	bl	8001780 <HAL_GetTick>
 8003f82:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f86:	e00a      	b.n	8003f9e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f88:	f7fd fbfa 	bl	8001780 <HAL_GetTick>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003f92:	1ad3      	subs	r3, r2, r3
 8003f94:	2b02      	cmp	r3, #2
 8003f96:	d902      	bls.n	8003f9e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8003f98:	2303      	movs	r3, #3
 8003f9a:	f000 bcdb 	b.w	8004954 <HAL_RCC_OscConfig+0x106c>
 8003f9e:	2302      	movs	r3, #2
 8003fa0:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fa4:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8003fa8:	fa93 f3a3 	rbit	r3, r3
 8003fac:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003fb0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fb4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003fb8:	2202      	movs	r2, #2
 8003fba:	601a      	str	r2, [r3, #0]
 8003fbc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fc0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	fa93 f2a3 	rbit	r2, r3
 8003fca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003fd2:	601a      	str	r2, [r3, #0]
 8003fd4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fd8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003fdc:	2202      	movs	r2, #2
 8003fde:	601a      	str	r2, [r3, #0]
 8003fe0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fe4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	fa93 f2a3 	rbit	r2, r3
 8003fee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ff2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003ff6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ff8:	4b88      	ldr	r3, [pc, #544]	@ (800421c <HAL_RCC_OscConfig+0x934>)
 8003ffa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003ffc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004000:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8004004:	2102      	movs	r1, #2
 8004006:	6019      	str	r1, [r3, #0]
 8004008:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800400c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	fa93 f1a3 	rbit	r1, r3
 8004016:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800401a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800401e:	6019      	str	r1, [r3, #0]
  return result;
 8004020:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004024:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	fab3 f383 	clz	r3, r3
 800402e:	b2db      	uxtb	r3, r3
 8004030:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8004034:	b2db      	uxtb	r3, r3
 8004036:	f003 031f 	and.w	r3, r3, #31
 800403a:	2101      	movs	r1, #1
 800403c:	fa01 f303 	lsl.w	r3, r1, r3
 8004040:	4013      	ands	r3, r2
 8004042:	2b00      	cmp	r3, #0
 8004044:	d0a0      	beq.n	8003f88 <HAL_RCC_OscConfig+0x6a0>
 8004046:	e08d      	b.n	8004164 <HAL_RCC_OscConfig+0x87c>
 8004048:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800404c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004050:	2201      	movs	r2, #1
 8004052:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004054:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004058:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	fa93 f2a3 	rbit	r2, r3
 8004062:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004066:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800406a:	601a      	str	r2, [r3, #0]
  return result;
 800406c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004070:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8004074:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004076:	fab3 f383 	clz	r3, r3
 800407a:	b2db      	uxtb	r3, r3
 800407c:	461a      	mov	r2, r3
 800407e:	4b68      	ldr	r3, [pc, #416]	@ (8004220 <HAL_RCC_OscConfig+0x938>)
 8004080:	4413      	add	r3, r2
 8004082:	009b      	lsls	r3, r3, #2
 8004084:	461a      	mov	r2, r3
 8004086:	2300      	movs	r3, #0
 8004088:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800408a:	f7fd fb79 	bl	8001780 <HAL_GetTick>
 800408e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004092:	e00a      	b.n	80040aa <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004094:	f7fd fb74 	bl	8001780 <HAL_GetTick>
 8004098:	4602      	mov	r2, r0
 800409a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800409e:	1ad3      	subs	r3, r2, r3
 80040a0:	2b02      	cmp	r3, #2
 80040a2:	d902      	bls.n	80040aa <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80040a4:	2303      	movs	r3, #3
 80040a6:	f000 bc55 	b.w	8004954 <HAL_RCC_OscConfig+0x106c>
 80040aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040ae:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80040b2:	2202      	movs	r2, #2
 80040b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040ba:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	fa93 f2a3 	rbit	r2, r3
 80040c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040c8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80040cc:	601a      	str	r2, [r3, #0]
 80040ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040d2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80040d6:	2202      	movs	r2, #2
 80040d8:	601a      	str	r2, [r3, #0]
 80040da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040de:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	fa93 f2a3 	rbit	r2, r3
 80040e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040ec:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80040f0:	601a      	str	r2, [r3, #0]
 80040f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040f6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80040fa:	2202      	movs	r2, #2
 80040fc:	601a      	str	r2, [r3, #0]
 80040fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004102:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	fa93 f2a3 	rbit	r2, r3
 800410c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004110:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8004114:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004116:	4b41      	ldr	r3, [pc, #260]	@ (800421c <HAL_RCC_OscConfig+0x934>)
 8004118:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800411a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800411e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8004122:	2102      	movs	r1, #2
 8004124:	6019      	str	r1, [r3, #0]
 8004126:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800412a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	fa93 f1a3 	rbit	r1, r3
 8004134:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004138:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800413c:	6019      	str	r1, [r3, #0]
  return result;
 800413e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004142:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	fab3 f383 	clz	r3, r3
 800414c:	b2db      	uxtb	r3, r3
 800414e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8004152:	b2db      	uxtb	r3, r3
 8004154:	f003 031f 	and.w	r3, r3, #31
 8004158:	2101      	movs	r1, #1
 800415a:	fa01 f303 	lsl.w	r3, r1, r3
 800415e:	4013      	ands	r3, r2
 8004160:	2b00      	cmp	r3, #0
 8004162:	d197      	bne.n	8004094 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004164:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004168:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f003 0304 	and.w	r3, r3, #4
 8004174:	2b00      	cmp	r3, #0
 8004176:	f000 81a1 	beq.w	80044bc <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800417a:	2300      	movs	r3, #0
 800417c:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004180:	4b26      	ldr	r3, [pc, #152]	@ (800421c <HAL_RCC_OscConfig+0x934>)
 8004182:	69db      	ldr	r3, [r3, #28]
 8004184:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004188:	2b00      	cmp	r3, #0
 800418a:	d116      	bne.n	80041ba <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800418c:	4b23      	ldr	r3, [pc, #140]	@ (800421c <HAL_RCC_OscConfig+0x934>)
 800418e:	69db      	ldr	r3, [r3, #28]
 8004190:	4a22      	ldr	r2, [pc, #136]	@ (800421c <HAL_RCC_OscConfig+0x934>)
 8004192:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004196:	61d3      	str	r3, [r2, #28]
 8004198:	4b20      	ldr	r3, [pc, #128]	@ (800421c <HAL_RCC_OscConfig+0x934>)
 800419a:	69db      	ldr	r3, [r3, #28]
 800419c:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80041a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041a4:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80041a8:	601a      	str	r2, [r3, #0]
 80041aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041ae:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80041b2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80041b4:	2301      	movs	r3, #1
 80041b6:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041ba:	4b1a      	ldr	r3, [pc, #104]	@ (8004224 <HAL_RCC_OscConfig+0x93c>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d11a      	bne.n	80041fc <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041c6:	4b17      	ldr	r3, [pc, #92]	@ (8004224 <HAL_RCC_OscConfig+0x93c>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a16      	ldr	r2, [pc, #88]	@ (8004224 <HAL_RCC_OscConfig+0x93c>)
 80041cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80041d0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041d2:	f7fd fad5 	bl	8001780 <HAL_GetTick>
 80041d6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041da:	e009      	b.n	80041f0 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041dc:	f7fd fad0 	bl	8001780 <HAL_GetTick>
 80041e0:	4602      	mov	r2, r0
 80041e2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80041e6:	1ad3      	subs	r3, r2, r3
 80041e8:	2b64      	cmp	r3, #100	@ 0x64
 80041ea:	d901      	bls.n	80041f0 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80041ec:	2303      	movs	r3, #3
 80041ee:	e3b1      	b.n	8004954 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041f0:	4b0c      	ldr	r3, [pc, #48]	@ (8004224 <HAL_RCC_OscConfig+0x93c>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d0ef      	beq.n	80041dc <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004200:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	68db      	ldr	r3, [r3, #12]
 8004208:	2b01      	cmp	r3, #1
 800420a:	d10d      	bne.n	8004228 <HAL_RCC_OscConfig+0x940>
 800420c:	4b03      	ldr	r3, [pc, #12]	@ (800421c <HAL_RCC_OscConfig+0x934>)
 800420e:	6a1b      	ldr	r3, [r3, #32]
 8004210:	4a02      	ldr	r2, [pc, #8]	@ (800421c <HAL_RCC_OscConfig+0x934>)
 8004212:	f043 0301 	orr.w	r3, r3, #1
 8004216:	6213      	str	r3, [r2, #32]
 8004218:	e03c      	b.n	8004294 <HAL_RCC_OscConfig+0x9ac>
 800421a:	bf00      	nop
 800421c:	40021000 	.word	0x40021000
 8004220:	10908120 	.word	0x10908120
 8004224:	40007000 	.word	0x40007000
 8004228:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800422c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	68db      	ldr	r3, [r3, #12]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d10c      	bne.n	8004252 <HAL_RCC_OscConfig+0x96a>
 8004238:	4bc1      	ldr	r3, [pc, #772]	@ (8004540 <HAL_RCC_OscConfig+0xc58>)
 800423a:	6a1b      	ldr	r3, [r3, #32]
 800423c:	4ac0      	ldr	r2, [pc, #768]	@ (8004540 <HAL_RCC_OscConfig+0xc58>)
 800423e:	f023 0301 	bic.w	r3, r3, #1
 8004242:	6213      	str	r3, [r2, #32]
 8004244:	4bbe      	ldr	r3, [pc, #760]	@ (8004540 <HAL_RCC_OscConfig+0xc58>)
 8004246:	6a1b      	ldr	r3, [r3, #32]
 8004248:	4abd      	ldr	r2, [pc, #756]	@ (8004540 <HAL_RCC_OscConfig+0xc58>)
 800424a:	f023 0304 	bic.w	r3, r3, #4
 800424e:	6213      	str	r3, [r2, #32]
 8004250:	e020      	b.n	8004294 <HAL_RCC_OscConfig+0x9ac>
 8004252:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004256:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	68db      	ldr	r3, [r3, #12]
 800425e:	2b05      	cmp	r3, #5
 8004260:	d10c      	bne.n	800427c <HAL_RCC_OscConfig+0x994>
 8004262:	4bb7      	ldr	r3, [pc, #732]	@ (8004540 <HAL_RCC_OscConfig+0xc58>)
 8004264:	6a1b      	ldr	r3, [r3, #32]
 8004266:	4ab6      	ldr	r2, [pc, #728]	@ (8004540 <HAL_RCC_OscConfig+0xc58>)
 8004268:	f043 0304 	orr.w	r3, r3, #4
 800426c:	6213      	str	r3, [r2, #32]
 800426e:	4bb4      	ldr	r3, [pc, #720]	@ (8004540 <HAL_RCC_OscConfig+0xc58>)
 8004270:	6a1b      	ldr	r3, [r3, #32]
 8004272:	4ab3      	ldr	r2, [pc, #716]	@ (8004540 <HAL_RCC_OscConfig+0xc58>)
 8004274:	f043 0301 	orr.w	r3, r3, #1
 8004278:	6213      	str	r3, [r2, #32]
 800427a:	e00b      	b.n	8004294 <HAL_RCC_OscConfig+0x9ac>
 800427c:	4bb0      	ldr	r3, [pc, #704]	@ (8004540 <HAL_RCC_OscConfig+0xc58>)
 800427e:	6a1b      	ldr	r3, [r3, #32]
 8004280:	4aaf      	ldr	r2, [pc, #700]	@ (8004540 <HAL_RCC_OscConfig+0xc58>)
 8004282:	f023 0301 	bic.w	r3, r3, #1
 8004286:	6213      	str	r3, [r2, #32]
 8004288:	4bad      	ldr	r3, [pc, #692]	@ (8004540 <HAL_RCC_OscConfig+0xc58>)
 800428a:	6a1b      	ldr	r3, [r3, #32]
 800428c:	4aac      	ldr	r2, [pc, #688]	@ (8004540 <HAL_RCC_OscConfig+0xc58>)
 800428e:	f023 0304 	bic.w	r3, r3, #4
 8004292:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004294:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004298:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	68db      	ldr	r3, [r3, #12]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	f000 8081 	beq.w	80043a8 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042a6:	f7fd fa6b 	bl	8001780 <HAL_GetTick>
 80042aa:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042ae:	e00b      	b.n	80042c8 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042b0:	f7fd fa66 	bl	8001780 <HAL_GetTick>
 80042b4:	4602      	mov	r2, r0
 80042b6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80042ba:	1ad3      	subs	r3, r2, r3
 80042bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d901      	bls.n	80042c8 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80042c4:	2303      	movs	r3, #3
 80042c6:	e345      	b.n	8004954 <HAL_RCC_OscConfig+0x106c>
 80042c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042cc:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80042d0:	2202      	movs	r2, #2
 80042d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042d8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	fa93 f2a3 	rbit	r2, r3
 80042e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042e6:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80042ea:	601a      	str	r2, [r3, #0]
 80042ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042f0:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80042f4:	2202      	movs	r2, #2
 80042f6:	601a      	str	r2, [r3, #0]
 80042f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042fc:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	fa93 f2a3 	rbit	r2, r3
 8004306:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800430a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800430e:	601a      	str	r2, [r3, #0]
  return result;
 8004310:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004314:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8004318:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800431a:	fab3 f383 	clz	r3, r3
 800431e:	b2db      	uxtb	r3, r3
 8004320:	095b      	lsrs	r3, r3, #5
 8004322:	b2db      	uxtb	r3, r3
 8004324:	f043 0302 	orr.w	r3, r3, #2
 8004328:	b2db      	uxtb	r3, r3
 800432a:	2b02      	cmp	r3, #2
 800432c:	d102      	bne.n	8004334 <HAL_RCC_OscConfig+0xa4c>
 800432e:	4b84      	ldr	r3, [pc, #528]	@ (8004540 <HAL_RCC_OscConfig+0xc58>)
 8004330:	6a1b      	ldr	r3, [r3, #32]
 8004332:	e013      	b.n	800435c <HAL_RCC_OscConfig+0xa74>
 8004334:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004338:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800433c:	2202      	movs	r2, #2
 800433e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004340:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004344:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	fa93 f2a3 	rbit	r2, r3
 800434e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004352:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8004356:	601a      	str	r2, [r3, #0]
 8004358:	4b79      	ldr	r3, [pc, #484]	@ (8004540 <HAL_RCC_OscConfig+0xc58>)
 800435a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800435c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004360:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8004364:	2102      	movs	r1, #2
 8004366:	6011      	str	r1, [r2, #0]
 8004368:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800436c:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8004370:	6812      	ldr	r2, [r2, #0]
 8004372:	fa92 f1a2 	rbit	r1, r2
 8004376:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800437a:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800437e:	6011      	str	r1, [r2, #0]
  return result;
 8004380:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004384:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8004388:	6812      	ldr	r2, [r2, #0]
 800438a:	fab2 f282 	clz	r2, r2
 800438e:	b2d2      	uxtb	r2, r2
 8004390:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004394:	b2d2      	uxtb	r2, r2
 8004396:	f002 021f 	and.w	r2, r2, #31
 800439a:	2101      	movs	r1, #1
 800439c:	fa01 f202 	lsl.w	r2, r1, r2
 80043a0:	4013      	ands	r3, r2
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d084      	beq.n	80042b0 <HAL_RCC_OscConfig+0x9c8>
 80043a6:	e07f      	b.n	80044a8 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043a8:	f7fd f9ea 	bl	8001780 <HAL_GetTick>
 80043ac:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043b0:	e00b      	b.n	80043ca <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043b2:	f7fd f9e5 	bl	8001780 <HAL_GetTick>
 80043b6:	4602      	mov	r2, r0
 80043b8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80043bc:	1ad3      	subs	r3, r2, r3
 80043be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d901      	bls.n	80043ca <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80043c6:	2303      	movs	r3, #3
 80043c8:	e2c4      	b.n	8004954 <HAL_RCC_OscConfig+0x106c>
 80043ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043ce:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80043d2:	2202      	movs	r2, #2
 80043d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043da:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	fa93 f2a3 	rbit	r2, r3
 80043e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043e8:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80043ec:	601a      	str	r2, [r3, #0]
 80043ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043f2:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80043f6:	2202      	movs	r2, #2
 80043f8:	601a      	str	r2, [r3, #0]
 80043fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043fe:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	fa93 f2a3 	rbit	r2, r3
 8004408:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800440c:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8004410:	601a      	str	r2, [r3, #0]
  return result;
 8004412:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004416:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800441a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800441c:	fab3 f383 	clz	r3, r3
 8004420:	b2db      	uxtb	r3, r3
 8004422:	095b      	lsrs	r3, r3, #5
 8004424:	b2db      	uxtb	r3, r3
 8004426:	f043 0302 	orr.w	r3, r3, #2
 800442a:	b2db      	uxtb	r3, r3
 800442c:	2b02      	cmp	r3, #2
 800442e:	d102      	bne.n	8004436 <HAL_RCC_OscConfig+0xb4e>
 8004430:	4b43      	ldr	r3, [pc, #268]	@ (8004540 <HAL_RCC_OscConfig+0xc58>)
 8004432:	6a1b      	ldr	r3, [r3, #32]
 8004434:	e013      	b.n	800445e <HAL_RCC_OscConfig+0xb76>
 8004436:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800443a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800443e:	2202      	movs	r2, #2
 8004440:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004442:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004446:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	fa93 f2a3 	rbit	r2, r3
 8004450:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004454:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8004458:	601a      	str	r2, [r3, #0]
 800445a:	4b39      	ldr	r3, [pc, #228]	@ (8004540 <HAL_RCC_OscConfig+0xc58>)
 800445c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800445e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004462:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8004466:	2102      	movs	r1, #2
 8004468:	6011      	str	r1, [r2, #0]
 800446a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800446e:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8004472:	6812      	ldr	r2, [r2, #0]
 8004474:	fa92 f1a2 	rbit	r1, r2
 8004478:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800447c:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8004480:	6011      	str	r1, [r2, #0]
  return result;
 8004482:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004486:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800448a:	6812      	ldr	r2, [r2, #0]
 800448c:	fab2 f282 	clz	r2, r2
 8004490:	b2d2      	uxtb	r2, r2
 8004492:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004496:	b2d2      	uxtb	r2, r2
 8004498:	f002 021f 	and.w	r2, r2, #31
 800449c:	2101      	movs	r1, #1
 800449e:	fa01 f202 	lsl.w	r2, r1, r2
 80044a2:	4013      	ands	r3, r2
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d184      	bne.n	80043b2 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80044a8:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d105      	bne.n	80044bc <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044b0:	4b23      	ldr	r3, [pc, #140]	@ (8004540 <HAL_RCC_OscConfig+0xc58>)
 80044b2:	69db      	ldr	r3, [r3, #28]
 80044b4:	4a22      	ldr	r2, [pc, #136]	@ (8004540 <HAL_RCC_OscConfig+0xc58>)
 80044b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80044ba:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80044bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044c0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	69db      	ldr	r3, [r3, #28]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	f000 8242 	beq.w	8004952 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80044ce:	4b1c      	ldr	r3, [pc, #112]	@ (8004540 <HAL_RCC_OscConfig+0xc58>)
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	f003 030c 	and.w	r3, r3, #12
 80044d6:	2b08      	cmp	r3, #8
 80044d8:	f000 8213 	beq.w	8004902 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80044dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044e0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	69db      	ldr	r3, [r3, #28]
 80044e8:	2b02      	cmp	r3, #2
 80044ea:	f040 8162 	bne.w	80047b2 <HAL_RCC_OscConfig+0xeca>
 80044ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044f2:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80044f6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80044fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004500:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	fa93 f2a3 	rbit	r2, r3
 800450a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800450e:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8004512:	601a      	str	r2, [r3, #0]
  return result;
 8004514:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004518:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800451c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800451e:	fab3 f383 	clz	r3, r3
 8004522:	b2db      	uxtb	r3, r3
 8004524:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004528:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800452c:	009b      	lsls	r3, r3, #2
 800452e:	461a      	mov	r2, r3
 8004530:	2300      	movs	r3, #0
 8004532:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004534:	f7fd f924 	bl	8001780 <HAL_GetTick>
 8004538:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800453c:	e00c      	b.n	8004558 <HAL_RCC_OscConfig+0xc70>
 800453e:	bf00      	nop
 8004540:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004544:	f7fd f91c 	bl	8001780 <HAL_GetTick>
 8004548:	4602      	mov	r2, r0
 800454a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800454e:	1ad3      	subs	r3, r2, r3
 8004550:	2b02      	cmp	r3, #2
 8004552:	d901      	bls.n	8004558 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8004554:	2303      	movs	r3, #3
 8004556:	e1fd      	b.n	8004954 <HAL_RCC_OscConfig+0x106c>
 8004558:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800455c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8004560:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004564:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004566:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800456a:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	fa93 f2a3 	rbit	r2, r3
 8004574:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004578:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800457c:	601a      	str	r2, [r3, #0]
  return result;
 800457e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004582:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8004586:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004588:	fab3 f383 	clz	r3, r3
 800458c:	b2db      	uxtb	r3, r3
 800458e:	095b      	lsrs	r3, r3, #5
 8004590:	b2db      	uxtb	r3, r3
 8004592:	f043 0301 	orr.w	r3, r3, #1
 8004596:	b2db      	uxtb	r3, r3
 8004598:	2b01      	cmp	r3, #1
 800459a:	d102      	bne.n	80045a2 <HAL_RCC_OscConfig+0xcba>
 800459c:	4bb0      	ldr	r3, [pc, #704]	@ (8004860 <HAL_RCC_OscConfig+0xf78>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	e027      	b.n	80045f2 <HAL_RCC_OscConfig+0xd0a>
 80045a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045a6:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80045aa:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80045ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045b4:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	fa93 f2a3 	rbit	r2, r3
 80045be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045c2:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80045c6:	601a      	str	r2, [r3, #0]
 80045c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045cc:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80045d0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80045d4:	601a      	str	r2, [r3, #0]
 80045d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045da:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	fa93 f2a3 	rbit	r2, r3
 80045e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045e8:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80045ec:	601a      	str	r2, [r3, #0]
 80045ee:	4b9c      	ldr	r3, [pc, #624]	@ (8004860 <HAL_RCC_OscConfig+0xf78>)
 80045f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045f2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80045f6:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80045fa:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80045fe:	6011      	str	r1, [r2, #0]
 8004600:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004604:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8004608:	6812      	ldr	r2, [r2, #0]
 800460a:	fa92 f1a2 	rbit	r1, r2
 800460e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004612:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8004616:	6011      	str	r1, [r2, #0]
  return result;
 8004618:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800461c:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8004620:	6812      	ldr	r2, [r2, #0]
 8004622:	fab2 f282 	clz	r2, r2
 8004626:	b2d2      	uxtb	r2, r2
 8004628:	f042 0220 	orr.w	r2, r2, #32
 800462c:	b2d2      	uxtb	r2, r2
 800462e:	f002 021f 	and.w	r2, r2, #31
 8004632:	2101      	movs	r1, #1
 8004634:	fa01 f202 	lsl.w	r2, r1, r2
 8004638:	4013      	ands	r3, r2
 800463a:	2b00      	cmp	r3, #0
 800463c:	d182      	bne.n	8004544 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800463e:	4b88      	ldr	r3, [pc, #544]	@ (8004860 <HAL_RCC_OscConfig+0xf78>)
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004646:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800464a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8004652:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004656:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	6a1b      	ldr	r3, [r3, #32]
 800465e:	430b      	orrs	r3, r1
 8004660:	497f      	ldr	r1, [pc, #508]	@ (8004860 <HAL_RCC_OscConfig+0xf78>)
 8004662:	4313      	orrs	r3, r2
 8004664:	604b      	str	r3, [r1, #4]
 8004666:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800466a:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800466e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004672:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004674:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004678:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	fa93 f2a3 	rbit	r2, r3
 8004682:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004686:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800468a:	601a      	str	r2, [r3, #0]
  return result;
 800468c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004690:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8004694:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004696:	fab3 f383 	clz	r3, r3
 800469a:	b2db      	uxtb	r3, r3
 800469c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80046a0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80046a4:	009b      	lsls	r3, r3, #2
 80046a6:	461a      	mov	r2, r3
 80046a8:	2301      	movs	r3, #1
 80046aa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046ac:	f7fd f868 	bl	8001780 <HAL_GetTick>
 80046b0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80046b4:	e009      	b.n	80046ca <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046b6:	f7fd f863 	bl	8001780 <HAL_GetTick>
 80046ba:	4602      	mov	r2, r0
 80046bc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80046c0:	1ad3      	subs	r3, r2, r3
 80046c2:	2b02      	cmp	r3, #2
 80046c4:	d901      	bls.n	80046ca <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80046c6:	2303      	movs	r3, #3
 80046c8:	e144      	b.n	8004954 <HAL_RCC_OscConfig+0x106c>
 80046ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046ce:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80046d2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80046d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046dc:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	fa93 f2a3 	rbit	r2, r3
 80046e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046ea:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80046ee:	601a      	str	r2, [r3, #0]
  return result;
 80046f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046f4:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80046f8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80046fa:	fab3 f383 	clz	r3, r3
 80046fe:	b2db      	uxtb	r3, r3
 8004700:	095b      	lsrs	r3, r3, #5
 8004702:	b2db      	uxtb	r3, r3
 8004704:	f043 0301 	orr.w	r3, r3, #1
 8004708:	b2db      	uxtb	r3, r3
 800470a:	2b01      	cmp	r3, #1
 800470c:	d102      	bne.n	8004714 <HAL_RCC_OscConfig+0xe2c>
 800470e:	4b54      	ldr	r3, [pc, #336]	@ (8004860 <HAL_RCC_OscConfig+0xf78>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	e027      	b.n	8004764 <HAL_RCC_OscConfig+0xe7c>
 8004714:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004718:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800471c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004720:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004722:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004726:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	fa93 f2a3 	rbit	r2, r3
 8004730:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004734:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8004738:	601a      	str	r2, [r3, #0]
 800473a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800473e:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8004742:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004746:	601a      	str	r2, [r3, #0]
 8004748:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800474c:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	fa93 f2a3 	rbit	r2, r3
 8004756:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800475a:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800475e:	601a      	str	r2, [r3, #0]
 8004760:	4b3f      	ldr	r3, [pc, #252]	@ (8004860 <HAL_RCC_OscConfig+0xf78>)
 8004762:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004764:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004768:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 800476c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004770:	6011      	str	r1, [r2, #0]
 8004772:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004776:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 800477a:	6812      	ldr	r2, [r2, #0]
 800477c:	fa92 f1a2 	rbit	r1, r2
 8004780:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004784:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8004788:	6011      	str	r1, [r2, #0]
  return result;
 800478a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800478e:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8004792:	6812      	ldr	r2, [r2, #0]
 8004794:	fab2 f282 	clz	r2, r2
 8004798:	b2d2      	uxtb	r2, r2
 800479a:	f042 0220 	orr.w	r2, r2, #32
 800479e:	b2d2      	uxtb	r2, r2
 80047a0:	f002 021f 	and.w	r2, r2, #31
 80047a4:	2101      	movs	r1, #1
 80047a6:	fa01 f202 	lsl.w	r2, r1, r2
 80047aa:	4013      	ands	r3, r2
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d082      	beq.n	80046b6 <HAL_RCC_OscConfig+0xdce>
 80047b0:	e0cf      	b.n	8004952 <HAL_RCC_OscConfig+0x106a>
 80047b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047b6:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80047ba:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80047be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047c4:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	fa93 f2a3 	rbit	r2, r3
 80047ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047d2:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80047d6:	601a      	str	r2, [r3, #0]
  return result;
 80047d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047dc:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80047e0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047e2:	fab3 f383 	clz	r3, r3
 80047e6:	b2db      	uxtb	r3, r3
 80047e8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80047ec:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80047f0:	009b      	lsls	r3, r3, #2
 80047f2:	461a      	mov	r2, r3
 80047f4:	2300      	movs	r3, #0
 80047f6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047f8:	f7fc ffc2 	bl	8001780 <HAL_GetTick>
 80047fc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004800:	e009      	b.n	8004816 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004802:	f7fc ffbd 	bl	8001780 <HAL_GetTick>
 8004806:	4602      	mov	r2, r0
 8004808:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800480c:	1ad3      	subs	r3, r2, r3
 800480e:	2b02      	cmp	r3, #2
 8004810:	d901      	bls.n	8004816 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8004812:	2303      	movs	r3, #3
 8004814:	e09e      	b.n	8004954 <HAL_RCC_OscConfig+0x106c>
 8004816:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800481a:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800481e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004822:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004824:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004828:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	fa93 f2a3 	rbit	r2, r3
 8004832:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004836:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800483a:	601a      	str	r2, [r3, #0]
  return result;
 800483c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004840:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8004844:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004846:	fab3 f383 	clz	r3, r3
 800484a:	b2db      	uxtb	r3, r3
 800484c:	095b      	lsrs	r3, r3, #5
 800484e:	b2db      	uxtb	r3, r3
 8004850:	f043 0301 	orr.w	r3, r3, #1
 8004854:	b2db      	uxtb	r3, r3
 8004856:	2b01      	cmp	r3, #1
 8004858:	d104      	bne.n	8004864 <HAL_RCC_OscConfig+0xf7c>
 800485a:	4b01      	ldr	r3, [pc, #4]	@ (8004860 <HAL_RCC_OscConfig+0xf78>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	e029      	b.n	80048b4 <HAL_RCC_OscConfig+0xfcc>
 8004860:	40021000 	.word	0x40021000
 8004864:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004868:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800486c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004870:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004872:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004876:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	fa93 f2a3 	rbit	r2, r3
 8004880:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004884:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8004888:	601a      	str	r2, [r3, #0]
 800488a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800488e:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8004892:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004896:	601a      	str	r2, [r3, #0]
 8004898:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800489c:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	fa93 f2a3 	rbit	r2, r3
 80048a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048aa:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80048ae:	601a      	str	r2, [r3, #0]
 80048b0:	4b2b      	ldr	r3, [pc, #172]	@ (8004960 <HAL_RCC_OscConfig+0x1078>)
 80048b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048b4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80048b8:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80048bc:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80048c0:	6011      	str	r1, [r2, #0]
 80048c2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80048c6:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80048ca:	6812      	ldr	r2, [r2, #0]
 80048cc:	fa92 f1a2 	rbit	r1, r2
 80048d0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80048d4:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80048d8:	6011      	str	r1, [r2, #0]
  return result;
 80048da:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80048de:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80048e2:	6812      	ldr	r2, [r2, #0]
 80048e4:	fab2 f282 	clz	r2, r2
 80048e8:	b2d2      	uxtb	r2, r2
 80048ea:	f042 0220 	orr.w	r2, r2, #32
 80048ee:	b2d2      	uxtb	r2, r2
 80048f0:	f002 021f 	and.w	r2, r2, #31
 80048f4:	2101      	movs	r1, #1
 80048f6:	fa01 f202 	lsl.w	r2, r1, r2
 80048fa:	4013      	ands	r3, r2
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d180      	bne.n	8004802 <HAL_RCC_OscConfig+0xf1a>
 8004900:	e027      	b.n	8004952 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004902:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004906:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	69db      	ldr	r3, [r3, #28]
 800490e:	2b01      	cmp	r3, #1
 8004910:	d101      	bne.n	8004916 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	e01e      	b.n	8004954 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004916:	4b12      	ldr	r3, [pc, #72]	@ (8004960 <HAL_RCC_OscConfig+0x1078>)
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800491e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8004922:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004926:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800492a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	6a1b      	ldr	r3, [r3, #32]
 8004932:	429a      	cmp	r2, r3
 8004934:	d10b      	bne.n	800494e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8004936:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800493a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800493e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004942:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800494a:	429a      	cmp	r2, r3
 800494c:	d001      	beq.n	8004952 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	e000      	b.n	8004954 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8004952:	2300      	movs	r3, #0
}
 8004954:	4618      	mov	r0, r3
 8004956:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}
 800495e:	bf00      	nop
 8004960:	40021000 	.word	0x40021000

08004964 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b09e      	sub	sp, #120	@ 0x78
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
 800496c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800496e:	2300      	movs	r3, #0
 8004970:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d101      	bne.n	800497c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004978:	2301      	movs	r3, #1
 800497a:	e162      	b.n	8004c42 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800497c:	4b90      	ldr	r3, [pc, #576]	@ (8004bc0 <HAL_RCC_ClockConfig+0x25c>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f003 0307 	and.w	r3, r3, #7
 8004984:	683a      	ldr	r2, [r7, #0]
 8004986:	429a      	cmp	r2, r3
 8004988:	d910      	bls.n	80049ac <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800498a:	4b8d      	ldr	r3, [pc, #564]	@ (8004bc0 <HAL_RCC_ClockConfig+0x25c>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f023 0207 	bic.w	r2, r3, #7
 8004992:	498b      	ldr	r1, [pc, #556]	@ (8004bc0 <HAL_RCC_ClockConfig+0x25c>)
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	4313      	orrs	r3, r2
 8004998:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800499a:	4b89      	ldr	r3, [pc, #548]	@ (8004bc0 <HAL_RCC_ClockConfig+0x25c>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f003 0307 	and.w	r3, r3, #7
 80049a2:	683a      	ldr	r2, [r7, #0]
 80049a4:	429a      	cmp	r2, r3
 80049a6:	d001      	beq.n	80049ac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80049a8:	2301      	movs	r3, #1
 80049aa:	e14a      	b.n	8004c42 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f003 0302 	and.w	r3, r3, #2
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d008      	beq.n	80049ca <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049b8:	4b82      	ldr	r3, [pc, #520]	@ (8004bc4 <HAL_RCC_ClockConfig+0x260>)
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	497f      	ldr	r1, [pc, #508]	@ (8004bc4 <HAL_RCC_ClockConfig+0x260>)
 80049c6:	4313      	orrs	r3, r2
 80049c8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f003 0301 	and.w	r3, r3, #1
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	f000 80dc 	beq.w	8004b90 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	2b01      	cmp	r3, #1
 80049de:	d13c      	bne.n	8004a5a <HAL_RCC_ClockConfig+0xf6>
 80049e0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80049e4:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049e6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80049e8:	fa93 f3a3 	rbit	r3, r3
 80049ec:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80049ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049f0:	fab3 f383 	clz	r3, r3
 80049f4:	b2db      	uxtb	r3, r3
 80049f6:	095b      	lsrs	r3, r3, #5
 80049f8:	b2db      	uxtb	r3, r3
 80049fa:	f043 0301 	orr.w	r3, r3, #1
 80049fe:	b2db      	uxtb	r3, r3
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	d102      	bne.n	8004a0a <HAL_RCC_ClockConfig+0xa6>
 8004a04:	4b6f      	ldr	r3, [pc, #444]	@ (8004bc4 <HAL_RCC_ClockConfig+0x260>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	e00f      	b.n	8004a2a <HAL_RCC_ClockConfig+0xc6>
 8004a0a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004a0e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a10:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004a12:	fa93 f3a3 	rbit	r3, r3
 8004a16:	667b      	str	r3, [r7, #100]	@ 0x64
 8004a18:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004a1c:	663b      	str	r3, [r7, #96]	@ 0x60
 8004a1e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004a20:	fa93 f3a3 	rbit	r3, r3
 8004a24:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004a26:	4b67      	ldr	r3, [pc, #412]	@ (8004bc4 <HAL_RCC_ClockConfig+0x260>)
 8004a28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a2a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004a2e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004a30:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004a32:	fa92 f2a2 	rbit	r2, r2
 8004a36:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8004a38:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004a3a:	fab2 f282 	clz	r2, r2
 8004a3e:	b2d2      	uxtb	r2, r2
 8004a40:	f042 0220 	orr.w	r2, r2, #32
 8004a44:	b2d2      	uxtb	r2, r2
 8004a46:	f002 021f 	and.w	r2, r2, #31
 8004a4a:	2101      	movs	r1, #1
 8004a4c:	fa01 f202 	lsl.w	r2, r1, r2
 8004a50:	4013      	ands	r3, r2
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d17b      	bne.n	8004b4e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	e0f3      	b.n	8004c42 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	2b02      	cmp	r3, #2
 8004a60:	d13c      	bne.n	8004adc <HAL_RCC_ClockConfig+0x178>
 8004a62:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004a66:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a68:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004a6a:	fa93 f3a3 	rbit	r3, r3
 8004a6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8004a70:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a72:	fab3 f383 	clz	r3, r3
 8004a76:	b2db      	uxtb	r3, r3
 8004a78:	095b      	lsrs	r3, r3, #5
 8004a7a:	b2db      	uxtb	r3, r3
 8004a7c:	f043 0301 	orr.w	r3, r3, #1
 8004a80:	b2db      	uxtb	r3, r3
 8004a82:	2b01      	cmp	r3, #1
 8004a84:	d102      	bne.n	8004a8c <HAL_RCC_ClockConfig+0x128>
 8004a86:	4b4f      	ldr	r3, [pc, #316]	@ (8004bc4 <HAL_RCC_ClockConfig+0x260>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	e00f      	b.n	8004aac <HAL_RCC_ClockConfig+0x148>
 8004a8c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004a90:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a92:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004a94:	fa93 f3a3 	rbit	r3, r3
 8004a98:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a9a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004a9e:	643b      	str	r3, [r7, #64]	@ 0x40
 8004aa0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004aa2:	fa93 f3a3 	rbit	r3, r3
 8004aa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004aa8:	4b46      	ldr	r3, [pc, #280]	@ (8004bc4 <HAL_RCC_ClockConfig+0x260>)
 8004aaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aac:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004ab0:	63ba      	str	r2, [r7, #56]	@ 0x38
 8004ab2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004ab4:	fa92 f2a2 	rbit	r2, r2
 8004ab8:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8004aba:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004abc:	fab2 f282 	clz	r2, r2
 8004ac0:	b2d2      	uxtb	r2, r2
 8004ac2:	f042 0220 	orr.w	r2, r2, #32
 8004ac6:	b2d2      	uxtb	r2, r2
 8004ac8:	f002 021f 	and.w	r2, r2, #31
 8004acc:	2101      	movs	r1, #1
 8004ace:	fa01 f202 	lsl.w	r2, r1, r2
 8004ad2:	4013      	ands	r3, r2
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d13a      	bne.n	8004b4e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	e0b2      	b.n	8004c42 <HAL_RCC_ClockConfig+0x2de>
 8004adc:	2302      	movs	r3, #2
 8004ade:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ae0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ae2:	fa93 f3a3 	rbit	r3, r3
 8004ae6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8004ae8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004aea:	fab3 f383 	clz	r3, r3
 8004aee:	b2db      	uxtb	r3, r3
 8004af0:	095b      	lsrs	r3, r3, #5
 8004af2:	b2db      	uxtb	r3, r3
 8004af4:	f043 0301 	orr.w	r3, r3, #1
 8004af8:	b2db      	uxtb	r3, r3
 8004afa:	2b01      	cmp	r3, #1
 8004afc:	d102      	bne.n	8004b04 <HAL_RCC_ClockConfig+0x1a0>
 8004afe:	4b31      	ldr	r3, [pc, #196]	@ (8004bc4 <HAL_RCC_ClockConfig+0x260>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	e00d      	b.n	8004b20 <HAL_RCC_ClockConfig+0x1bc>
 8004b04:	2302      	movs	r3, #2
 8004b06:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b0a:	fa93 f3a3 	rbit	r3, r3
 8004b0e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b10:	2302      	movs	r3, #2
 8004b12:	623b      	str	r3, [r7, #32]
 8004b14:	6a3b      	ldr	r3, [r7, #32]
 8004b16:	fa93 f3a3 	rbit	r3, r3
 8004b1a:	61fb      	str	r3, [r7, #28]
 8004b1c:	4b29      	ldr	r3, [pc, #164]	@ (8004bc4 <HAL_RCC_ClockConfig+0x260>)
 8004b1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b20:	2202      	movs	r2, #2
 8004b22:	61ba      	str	r2, [r7, #24]
 8004b24:	69ba      	ldr	r2, [r7, #24]
 8004b26:	fa92 f2a2 	rbit	r2, r2
 8004b2a:	617a      	str	r2, [r7, #20]
  return result;
 8004b2c:	697a      	ldr	r2, [r7, #20]
 8004b2e:	fab2 f282 	clz	r2, r2
 8004b32:	b2d2      	uxtb	r2, r2
 8004b34:	f042 0220 	orr.w	r2, r2, #32
 8004b38:	b2d2      	uxtb	r2, r2
 8004b3a:	f002 021f 	and.w	r2, r2, #31
 8004b3e:	2101      	movs	r1, #1
 8004b40:	fa01 f202 	lsl.w	r2, r1, r2
 8004b44:	4013      	ands	r3, r2
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d101      	bne.n	8004b4e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	e079      	b.n	8004c42 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b4e:	4b1d      	ldr	r3, [pc, #116]	@ (8004bc4 <HAL_RCC_ClockConfig+0x260>)
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	f023 0203 	bic.w	r2, r3, #3
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	491a      	ldr	r1, [pc, #104]	@ (8004bc4 <HAL_RCC_ClockConfig+0x260>)
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b60:	f7fc fe0e 	bl	8001780 <HAL_GetTick>
 8004b64:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b66:	e00a      	b.n	8004b7e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b68:	f7fc fe0a 	bl	8001780 <HAL_GetTick>
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004b70:	1ad3      	subs	r3, r2, r3
 8004b72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d901      	bls.n	8004b7e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004b7a:	2303      	movs	r3, #3
 8004b7c:	e061      	b.n	8004c42 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b7e:	4b11      	ldr	r3, [pc, #68]	@ (8004bc4 <HAL_RCC_ClockConfig+0x260>)
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	f003 020c 	and.w	r2, r3, #12
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	009b      	lsls	r3, r3, #2
 8004b8c:	429a      	cmp	r2, r3
 8004b8e:	d1eb      	bne.n	8004b68 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b90:	4b0b      	ldr	r3, [pc, #44]	@ (8004bc0 <HAL_RCC_ClockConfig+0x25c>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f003 0307 	and.w	r3, r3, #7
 8004b98:	683a      	ldr	r2, [r7, #0]
 8004b9a:	429a      	cmp	r2, r3
 8004b9c:	d214      	bcs.n	8004bc8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b9e:	4b08      	ldr	r3, [pc, #32]	@ (8004bc0 <HAL_RCC_ClockConfig+0x25c>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f023 0207 	bic.w	r2, r3, #7
 8004ba6:	4906      	ldr	r1, [pc, #24]	@ (8004bc0 <HAL_RCC_ClockConfig+0x25c>)
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	4313      	orrs	r3, r2
 8004bac:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bae:	4b04      	ldr	r3, [pc, #16]	@ (8004bc0 <HAL_RCC_ClockConfig+0x25c>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f003 0307 	and.w	r3, r3, #7
 8004bb6:	683a      	ldr	r2, [r7, #0]
 8004bb8:	429a      	cmp	r2, r3
 8004bba:	d005      	beq.n	8004bc8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	e040      	b.n	8004c42 <HAL_RCC_ClockConfig+0x2de>
 8004bc0:	40022000 	.word	0x40022000
 8004bc4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 0304 	and.w	r3, r3, #4
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d008      	beq.n	8004be6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004bd4:	4b1d      	ldr	r3, [pc, #116]	@ (8004c4c <HAL_RCC_ClockConfig+0x2e8>)
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	68db      	ldr	r3, [r3, #12]
 8004be0:	491a      	ldr	r1, [pc, #104]	@ (8004c4c <HAL_RCC_ClockConfig+0x2e8>)
 8004be2:	4313      	orrs	r3, r2
 8004be4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f003 0308 	and.w	r3, r3, #8
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d009      	beq.n	8004c06 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004bf2:	4b16      	ldr	r3, [pc, #88]	@ (8004c4c <HAL_RCC_ClockConfig+0x2e8>)
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	691b      	ldr	r3, [r3, #16]
 8004bfe:	00db      	lsls	r3, r3, #3
 8004c00:	4912      	ldr	r1, [pc, #72]	@ (8004c4c <HAL_RCC_ClockConfig+0x2e8>)
 8004c02:	4313      	orrs	r3, r2
 8004c04:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004c06:	f000 f829 	bl	8004c5c <HAL_RCC_GetSysClockFreq>
 8004c0a:	4601      	mov	r1, r0
 8004c0c:	4b0f      	ldr	r3, [pc, #60]	@ (8004c4c <HAL_RCC_ClockConfig+0x2e8>)
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004c14:	22f0      	movs	r2, #240	@ 0xf0
 8004c16:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c18:	693a      	ldr	r2, [r7, #16]
 8004c1a:	fa92 f2a2 	rbit	r2, r2
 8004c1e:	60fa      	str	r2, [r7, #12]
  return result;
 8004c20:	68fa      	ldr	r2, [r7, #12]
 8004c22:	fab2 f282 	clz	r2, r2
 8004c26:	b2d2      	uxtb	r2, r2
 8004c28:	40d3      	lsrs	r3, r2
 8004c2a:	4a09      	ldr	r2, [pc, #36]	@ (8004c50 <HAL_RCC_ClockConfig+0x2ec>)
 8004c2c:	5cd3      	ldrb	r3, [r2, r3]
 8004c2e:	fa21 f303 	lsr.w	r3, r1, r3
 8004c32:	4a08      	ldr	r2, [pc, #32]	@ (8004c54 <HAL_RCC_ClockConfig+0x2f0>)
 8004c34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004c36:	4b08      	ldr	r3, [pc, #32]	@ (8004c58 <HAL_RCC_ClockConfig+0x2f4>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f7fc fc64 	bl	8001508 <HAL_InitTick>
  
  return HAL_OK;
 8004c40:	2300      	movs	r3, #0
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	3778      	adds	r7, #120	@ 0x78
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}
 8004c4a:	bf00      	nop
 8004c4c:	40021000 	.word	0x40021000
 8004c50:	08008524 	.word	0x08008524
 8004c54:	20000004 	.word	0x20000004
 8004c58:	20000008 	.word	0x20000008

08004c5c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b087      	sub	sp, #28
 8004c60:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004c62:	2300      	movs	r3, #0
 8004c64:	60fb      	str	r3, [r7, #12]
 8004c66:	2300      	movs	r3, #0
 8004c68:	60bb      	str	r3, [r7, #8]
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	617b      	str	r3, [r7, #20]
 8004c6e:	2300      	movs	r3, #0
 8004c70:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004c72:	2300      	movs	r3, #0
 8004c74:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8004c76:	4b1e      	ldr	r3, [pc, #120]	@ (8004cf0 <HAL_RCC_GetSysClockFreq+0x94>)
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	f003 030c 	and.w	r3, r3, #12
 8004c82:	2b04      	cmp	r3, #4
 8004c84:	d002      	beq.n	8004c8c <HAL_RCC_GetSysClockFreq+0x30>
 8004c86:	2b08      	cmp	r3, #8
 8004c88:	d003      	beq.n	8004c92 <HAL_RCC_GetSysClockFreq+0x36>
 8004c8a:	e026      	b.n	8004cda <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004c8c:	4b19      	ldr	r3, [pc, #100]	@ (8004cf4 <HAL_RCC_GetSysClockFreq+0x98>)
 8004c8e:	613b      	str	r3, [r7, #16]
      break;
 8004c90:	e026      	b.n	8004ce0 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	0c9b      	lsrs	r3, r3, #18
 8004c96:	f003 030f 	and.w	r3, r3, #15
 8004c9a:	4a17      	ldr	r2, [pc, #92]	@ (8004cf8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004c9c:	5cd3      	ldrb	r3, [r2, r3]
 8004c9e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8004ca0:	4b13      	ldr	r3, [pc, #76]	@ (8004cf0 <HAL_RCC_GetSysClockFreq+0x94>)
 8004ca2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ca4:	f003 030f 	and.w	r3, r3, #15
 8004ca8:	4a14      	ldr	r2, [pc, #80]	@ (8004cfc <HAL_RCC_GetSysClockFreq+0xa0>)
 8004caa:	5cd3      	ldrb	r3, [r2, r3]
 8004cac:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d008      	beq.n	8004cca <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004cb8:	4a0e      	ldr	r2, [pc, #56]	@ (8004cf4 <HAL_RCC_GetSysClockFreq+0x98>)
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	fbb2 f2f3 	udiv	r2, r2, r3
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	fb02 f303 	mul.w	r3, r2, r3
 8004cc6:	617b      	str	r3, [r7, #20]
 8004cc8:	e004      	b.n	8004cd4 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	4a0c      	ldr	r2, [pc, #48]	@ (8004d00 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004cce:	fb02 f303 	mul.w	r3, r2, r3
 8004cd2:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	613b      	str	r3, [r7, #16]
      break;
 8004cd8:	e002      	b.n	8004ce0 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004cda:	4b06      	ldr	r3, [pc, #24]	@ (8004cf4 <HAL_RCC_GetSysClockFreq+0x98>)
 8004cdc:	613b      	str	r3, [r7, #16]
      break;
 8004cde:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ce0:	693b      	ldr	r3, [r7, #16]
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	371c      	adds	r7, #28
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cec:	4770      	bx	lr
 8004cee:	bf00      	nop
 8004cf0:	40021000 	.word	0x40021000
 8004cf4:	007a1200 	.word	0x007a1200
 8004cf8:	0800853c 	.word	0x0800853c
 8004cfc:	0800854c 	.word	0x0800854c
 8004d00:	003d0900 	.word	0x003d0900

08004d04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d04:	b480      	push	{r7}
 8004d06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d08:	4b03      	ldr	r3, [pc, #12]	@ (8004d18 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d14:	4770      	bx	lr
 8004d16:	bf00      	nop
 8004d18:	20000004 	.word	0x20000004

08004d1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b082      	sub	sp, #8
 8004d20:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004d22:	f7ff ffef 	bl	8004d04 <HAL_RCC_GetHCLKFreq>
 8004d26:	4601      	mov	r1, r0
 8004d28:	4b0b      	ldr	r3, [pc, #44]	@ (8004d58 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004d30:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8004d34:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d36:	687a      	ldr	r2, [r7, #4]
 8004d38:	fa92 f2a2 	rbit	r2, r2
 8004d3c:	603a      	str	r2, [r7, #0]
  return result;
 8004d3e:	683a      	ldr	r2, [r7, #0]
 8004d40:	fab2 f282 	clz	r2, r2
 8004d44:	b2d2      	uxtb	r2, r2
 8004d46:	40d3      	lsrs	r3, r2
 8004d48:	4a04      	ldr	r2, [pc, #16]	@ (8004d5c <HAL_RCC_GetPCLK1Freq+0x40>)
 8004d4a:	5cd3      	ldrb	r3, [r2, r3]
 8004d4c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004d50:	4618      	mov	r0, r3
 8004d52:	3708      	adds	r7, #8
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}
 8004d58:	40021000 	.word	0x40021000
 8004d5c:	08008534 	.word	0x08008534

08004d60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b082      	sub	sp, #8
 8004d64:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004d66:	f7ff ffcd 	bl	8004d04 <HAL_RCC_GetHCLKFreq>
 8004d6a:	4601      	mov	r1, r0
 8004d6c:	4b0b      	ldr	r3, [pc, #44]	@ (8004d9c <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8004d74:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8004d78:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d7a:	687a      	ldr	r2, [r7, #4]
 8004d7c:	fa92 f2a2 	rbit	r2, r2
 8004d80:	603a      	str	r2, [r7, #0]
  return result;
 8004d82:	683a      	ldr	r2, [r7, #0]
 8004d84:	fab2 f282 	clz	r2, r2
 8004d88:	b2d2      	uxtb	r2, r2
 8004d8a:	40d3      	lsrs	r3, r2
 8004d8c:	4a04      	ldr	r2, [pc, #16]	@ (8004da0 <HAL_RCC_GetPCLK2Freq+0x40>)
 8004d8e:	5cd3      	ldrb	r3, [r2, r3]
 8004d90:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004d94:	4618      	mov	r0, r3
 8004d96:	3708      	adds	r7, #8
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}
 8004d9c:	40021000 	.word	0x40021000
 8004da0:	08008534 	.word	0x08008534

08004da4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b083      	sub	sp, #12
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
 8004dac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	220f      	movs	r2, #15
 8004db2:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004db4:	4b12      	ldr	r3, [pc, #72]	@ (8004e00 <HAL_RCC_GetClockConfig+0x5c>)
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	f003 0203 	and.w	r2, r3, #3
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8004dc0:	4b0f      	ldr	r3, [pc, #60]	@ (8004e00 <HAL_RCC_GetClockConfig+0x5c>)
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8004dcc:	4b0c      	ldr	r3, [pc, #48]	@ (8004e00 <HAL_RCC_GetClockConfig+0x5c>)
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004dd8:	4b09      	ldr	r3, [pc, #36]	@ (8004e00 <HAL_RCC_GetClockConfig+0x5c>)
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	08db      	lsrs	r3, r3, #3
 8004dde:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8004de6:	4b07      	ldr	r3, [pc, #28]	@ (8004e04 <HAL_RCC_GetClockConfig+0x60>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f003 0207 	and.w	r2, r3, #7
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	601a      	str	r2, [r3, #0]
}
 8004df2:	bf00      	nop
 8004df4:	370c      	adds	r7, #12
 8004df6:	46bd      	mov	sp, r7
 8004df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfc:	4770      	bx	lr
 8004dfe:	bf00      	nop
 8004e00:	40021000 	.word	0x40021000
 8004e04:	40022000 	.word	0x40022000

08004e08 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b092      	sub	sp, #72	@ 0x48
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004e10:	2300      	movs	r3, #0
 8004e12:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8004e14:	2300      	movs	r3, #0
 8004e16:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004e18:	2300      	movs	r3, #0
 8004e1a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	f000 80d4 	beq.w	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e2c:	4b4e      	ldr	r3, [pc, #312]	@ (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e2e:	69db      	ldr	r3, [r3, #28]
 8004e30:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d10e      	bne.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e38:	4b4b      	ldr	r3, [pc, #300]	@ (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e3a:	69db      	ldr	r3, [r3, #28]
 8004e3c:	4a4a      	ldr	r2, [pc, #296]	@ (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e3e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e42:	61d3      	str	r3, [r2, #28]
 8004e44:	4b48      	ldr	r3, [pc, #288]	@ (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e46:	69db      	ldr	r3, [r3, #28]
 8004e48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e4c:	60bb      	str	r3, [r7, #8]
 8004e4e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e50:	2301      	movs	r3, #1
 8004e52:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e56:	4b45      	ldr	r3, [pc, #276]	@ (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d118      	bne.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e62:	4b42      	ldr	r3, [pc, #264]	@ (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a41      	ldr	r2, [pc, #260]	@ (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004e68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e6c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e6e:	f7fc fc87 	bl	8001780 <HAL_GetTick>
 8004e72:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e74:	e008      	b.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e76:	f7fc fc83 	bl	8001780 <HAL_GetTick>
 8004e7a:	4602      	mov	r2, r0
 8004e7c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e7e:	1ad3      	subs	r3, r2, r3
 8004e80:	2b64      	cmp	r3, #100	@ 0x64
 8004e82:	d901      	bls.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004e84:	2303      	movs	r3, #3
 8004e86:	e14b      	b.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e88:	4b38      	ldr	r3, [pc, #224]	@ (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d0f0      	beq.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004e94:	4b34      	ldr	r3, [pc, #208]	@ (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e96:	6a1b      	ldr	r3, [r3, #32]
 8004e98:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004e9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	f000 8084 	beq.w	8004fae <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004eae:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004eb0:	429a      	cmp	r2, r3
 8004eb2:	d07c      	beq.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004eb4:	4b2c      	ldr	r3, [pc, #176]	@ (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004eb6:	6a1b      	ldr	r3, [r3, #32]
 8004eb8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ebc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004ebe:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004ec2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ec4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ec6:	fa93 f3a3 	rbit	r3, r3
 8004eca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8004ecc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004ece:	fab3 f383 	clz	r3, r3
 8004ed2:	b2db      	uxtb	r3, r3
 8004ed4:	461a      	mov	r2, r3
 8004ed6:	4b26      	ldr	r3, [pc, #152]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004ed8:	4413      	add	r3, r2
 8004eda:	009b      	lsls	r3, r3, #2
 8004edc:	461a      	mov	r2, r3
 8004ede:	2301      	movs	r3, #1
 8004ee0:	6013      	str	r3, [r2, #0]
 8004ee2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004ee6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ee8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004eea:	fa93 f3a3 	rbit	r3, r3
 8004eee:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004ef0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004ef2:	fab3 f383 	clz	r3, r3
 8004ef6:	b2db      	uxtb	r3, r3
 8004ef8:	461a      	mov	r2, r3
 8004efa:	4b1d      	ldr	r3, [pc, #116]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004efc:	4413      	add	r3, r2
 8004efe:	009b      	lsls	r3, r3, #2
 8004f00:	461a      	mov	r2, r3
 8004f02:	2300      	movs	r3, #0
 8004f04:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004f06:	4a18      	ldr	r2, [pc, #96]	@ (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f0a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004f0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f0e:	f003 0301 	and.w	r3, r3, #1
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d04b      	beq.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f16:	f7fc fc33 	bl	8001780 <HAL_GetTick>
 8004f1a:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f1c:	e00a      	b.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f1e:	f7fc fc2f 	bl	8001780 <HAL_GetTick>
 8004f22:	4602      	mov	r2, r0
 8004f24:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004f26:	1ad3      	subs	r3, r2, r3
 8004f28:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d901      	bls.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004f30:	2303      	movs	r3, #3
 8004f32:	e0f5      	b.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8004f34:	2302      	movs	r3, #2
 8004f36:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f3a:	fa93 f3a3 	rbit	r3, r3
 8004f3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f40:	2302      	movs	r3, #2
 8004f42:	623b      	str	r3, [r7, #32]
 8004f44:	6a3b      	ldr	r3, [r7, #32]
 8004f46:	fa93 f3a3 	rbit	r3, r3
 8004f4a:	61fb      	str	r3, [r7, #28]
  return result;
 8004f4c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f4e:	fab3 f383 	clz	r3, r3
 8004f52:	b2db      	uxtb	r3, r3
 8004f54:	095b      	lsrs	r3, r3, #5
 8004f56:	b2db      	uxtb	r3, r3
 8004f58:	f043 0302 	orr.w	r3, r3, #2
 8004f5c:	b2db      	uxtb	r3, r3
 8004f5e:	2b02      	cmp	r3, #2
 8004f60:	d108      	bne.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004f62:	4b01      	ldr	r3, [pc, #4]	@ (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f64:	6a1b      	ldr	r3, [r3, #32]
 8004f66:	e00d      	b.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004f68:	40021000 	.word	0x40021000
 8004f6c:	40007000 	.word	0x40007000
 8004f70:	10908100 	.word	0x10908100
 8004f74:	2302      	movs	r3, #2
 8004f76:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f78:	69bb      	ldr	r3, [r7, #24]
 8004f7a:	fa93 f3a3 	rbit	r3, r3
 8004f7e:	617b      	str	r3, [r7, #20]
 8004f80:	4b69      	ldr	r3, [pc, #420]	@ (8005128 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004f82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f84:	2202      	movs	r2, #2
 8004f86:	613a      	str	r2, [r7, #16]
 8004f88:	693a      	ldr	r2, [r7, #16]
 8004f8a:	fa92 f2a2 	rbit	r2, r2
 8004f8e:	60fa      	str	r2, [r7, #12]
  return result;
 8004f90:	68fa      	ldr	r2, [r7, #12]
 8004f92:	fab2 f282 	clz	r2, r2
 8004f96:	b2d2      	uxtb	r2, r2
 8004f98:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004f9c:	b2d2      	uxtb	r2, r2
 8004f9e:	f002 021f 	and.w	r2, r2, #31
 8004fa2:	2101      	movs	r1, #1
 8004fa4:	fa01 f202 	lsl.w	r2, r1, r2
 8004fa8:	4013      	ands	r3, r2
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d0b7      	beq.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004fae:	4b5e      	ldr	r3, [pc, #376]	@ (8005128 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004fb0:	6a1b      	ldr	r3, [r3, #32]
 8004fb2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	495b      	ldr	r1, [pc, #364]	@ (8005128 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004fc0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	d105      	bne.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fc8:	4b57      	ldr	r3, [pc, #348]	@ (8005128 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004fca:	69db      	ldr	r3, [r3, #28]
 8004fcc:	4a56      	ldr	r2, [pc, #344]	@ (8005128 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004fce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004fd2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f003 0301 	and.w	r3, r3, #1
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d008      	beq.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004fe0:	4b51      	ldr	r3, [pc, #324]	@ (8005128 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004fe2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fe4:	f023 0203 	bic.w	r2, r3, #3
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	689b      	ldr	r3, [r3, #8]
 8004fec:	494e      	ldr	r1, [pc, #312]	@ (8005128 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f003 0320 	and.w	r3, r3, #32
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d008      	beq.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004ffe:	4b4a      	ldr	r3, [pc, #296]	@ (8005128 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005002:	f023 0210 	bic.w	r2, r3, #16
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	68db      	ldr	r3, [r3, #12]
 800500a:	4947      	ldr	r1, [pc, #284]	@ (8005128 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800500c:	4313      	orrs	r3, r2
 800500e:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005018:	2b00      	cmp	r3, #0
 800501a:	d008      	beq.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800501c:	4b42      	ldr	r3, [pc, #264]	@ (8005128 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005028:	493f      	ldr	r1, [pc, #252]	@ (8005128 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800502a:	4313      	orrs	r3, r2
 800502c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005036:	2b00      	cmp	r3, #0
 8005038:	d008      	beq.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800503a:	4b3b      	ldr	r3, [pc, #236]	@ (8005128 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800503c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800503e:	f023 0220 	bic.w	r2, r3, #32
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	691b      	ldr	r3, [r3, #16]
 8005046:	4938      	ldr	r1, [pc, #224]	@ (8005128 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005048:	4313      	orrs	r3, r2
 800504a:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005054:	2b00      	cmp	r3, #0
 8005056:	d008      	beq.n	800506a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005058:	4b33      	ldr	r3, [pc, #204]	@ (8005128 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800505a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800505c:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	695b      	ldr	r3, [r3, #20]
 8005064:	4930      	ldr	r1, [pc, #192]	@ (8005128 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005066:	4313      	orrs	r3, r2
 8005068:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005072:	2b00      	cmp	r3, #0
 8005074:	d008      	beq.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005076:	4b2c      	ldr	r3, [pc, #176]	@ (8005128 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	69db      	ldr	r3, [r3, #28]
 8005082:	4929      	ldr	r1, [pc, #164]	@ (8005128 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005084:	4313      	orrs	r3, r2
 8005086:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005090:	2b00      	cmp	r3, #0
 8005092:	d008      	beq.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8005094:	4b24      	ldr	r3, [pc, #144]	@ (8005128 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005096:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005098:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	699b      	ldr	r3, [r3, #24]
 80050a0:	4921      	ldr	r1, [pc, #132]	@ (8005128 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80050a2:	4313      	orrs	r3, r2
 80050a4:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d008      	beq.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80050b2:	4b1d      	ldr	r3, [pc, #116]	@ (8005128 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80050b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050b6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6a1b      	ldr	r3, [r3, #32]
 80050be:	491a      	ldr	r1, [pc, #104]	@ (8005128 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80050c0:	4313      	orrs	r3, r2
 80050c2:	630b      	str	r3, [r1, #48]	@ 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d008      	beq.n	80050e2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80050d0:	4b15      	ldr	r3, [pc, #84]	@ (8005128 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80050d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050d4:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050dc:	4912      	ldr	r1, [pc, #72]	@ (8005128 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80050de:	4313      	orrs	r3, r2
 80050e0:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d008      	beq.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80050ee:	4b0e      	ldr	r3, [pc, #56]	@ (8005128 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80050f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050f2:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050fa:	490b      	ldr	r1, [pc, #44]	@ (8005128 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80050fc:	4313      	orrs	r3, r2
 80050fe:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005108:	2b00      	cmp	r3, #0
 800510a:	d008      	beq.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 800510c:	4b06      	ldr	r3, [pc, #24]	@ (8005128 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800510e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005110:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005118:	4903      	ldr	r1, [pc, #12]	@ (8005128 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800511a:	4313      	orrs	r3, r2
 800511c:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800511e:	2300      	movs	r3, #0
}
 8005120:	4618      	mov	r0, r3
 8005122:	3748      	adds	r7, #72	@ 0x48
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}
 8005128:	40021000 	.word	0x40021000

0800512c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b082      	sub	sp, #8
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d101      	bne.n	800513e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	e049      	b.n	80051d2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005144:	b2db      	uxtb	r3, r3
 8005146:	2b00      	cmp	r3, #0
 8005148:	d106      	bne.n	8005158 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2200      	movs	r2, #0
 800514e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f000 f841 	bl	80051da <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2202      	movs	r2, #2
 800515c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681a      	ldr	r2, [r3, #0]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	3304      	adds	r3, #4
 8005168:	4619      	mov	r1, r3
 800516a:	4610      	mov	r0, r2
 800516c:	f000 f9be 	bl	80054ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2201      	movs	r2, #1
 8005174:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2201      	movs	r2, #1
 800517c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2201      	movs	r2, #1
 8005184:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2201      	movs	r2, #1
 800518c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2201      	movs	r2, #1
 8005194:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2201      	movs	r2, #1
 800519c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2201      	movs	r2, #1
 80051a4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2201      	movs	r2, #1
 80051ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2201      	movs	r2, #1
 80051b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2201      	movs	r2, #1
 80051bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2201      	movs	r2, #1
 80051c4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2201      	movs	r2, #1
 80051cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80051d0:	2300      	movs	r3, #0
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	3708      	adds	r7, #8
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bd80      	pop	{r7, pc}

080051da <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80051da:	b480      	push	{r7}
 80051dc:	b083      	sub	sp, #12
 80051de:	af00      	add	r7, sp, #0
 80051e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80051e2:	bf00      	nop
 80051e4:	370c      	adds	r7, #12
 80051e6:	46bd      	mov	sp, r7
 80051e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ec:	4770      	bx	lr
	...

080051f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b085      	sub	sp, #20
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051fe:	b2db      	uxtb	r3, r3
 8005200:	2b01      	cmp	r3, #1
 8005202:	d001      	beq.n	8005208 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005204:	2301      	movs	r3, #1
 8005206:	e03b      	b.n	8005280 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2202      	movs	r2, #2
 800520c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	68da      	ldr	r2, [r3, #12]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f042 0201 	orr.w	r2, r2, #1
 800521e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a19      	ldr	r2, [pc, #100]	@ (800528c <HAL_TIM_Base_Start_IT+0x9c>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d009      	beq.n	800523e <HAL_TIM_Base_Start_IT+0x4e>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005232:	d004      	beq.n	800523e <HAL_TIM_Base_Start_IT+0x4e>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a15      	ldr	r2, [pc, #84]	@ (8005290 <HAL_TIM_Base_Start_IT+0xa0>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d115      	bne.n	800526a <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	689a      	ldr	r2, [r3, #8]
 8005244:	4b13      	ldr	r3, [pc, #76]	@ (8005294 <HAL_TIM_Base_Start_IT+0xa4>)
 8005246:	4013      	ands	r3, r2
 8005248:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	2b06      	cmp	r3, #6
 800524e:	d015      	beq.n	800527c <HAL_TIM_Base_Start_IT+0x8c>
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005256:	d011      	beq.n	800527c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	681a      	ldr	r2, [r3, #0]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f042 0201 	orr.w	r2, r2, #1
 8005266:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005268:	e008      	b.n	800527c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	681a      	ldr	r2, [r3, #0]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f042 0201 	orr.w	r2, r2, #1
 8005278:	601a      	str	r2, [r3, #0]
 800527a:	e000      	b.n	800527e <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800527c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800527e:	2300      	movs	r3, #0
}
 8005280:	4618      	mov	r0, r3
 8005282:	3714      	adds	r7, #20
 8005284:	46bd      	mov	sp, r7
 8005286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528a:	4770      	bx	lr
 800528c:	40012c00 	.word	0x40012c00
 8005290:	40014000 	.word	0x40014000
 8005294:	00010007 	.word	0x00010007

08005298 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b084      	sub	sp, #16
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	68db      	ldr	r3, [r3, #12]
 80052a6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	691b      	ldr	r3, [r3, #16]
 80052ae:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	f003 0302 	and.w	r3, r3, #2
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d020      	beq.n	80052fc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	f003 0302 	and.w	r3, r3, #2
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d01b      	beq.n	80052fc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f06f 0202 	mvn.w	r2, #2
 80052cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2201      	movs	r2, #1
 80052d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	699b      	ldr	r3, [r3, #24]
 80052da:	f003 0303 	and.w	r3, r3, #3
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d003      	beq.n	80052ea <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	f000 f8e4 	bl	80054b0 <HAL_TIM_IC_CaptureCallback>
 80052e8:	e005      	b.n	80052f6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f000 f8d6 	bl	800549c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052f0:	6878      	ldr	r0, [r7, #4]
 80052f2:	f000 f8e7 	bl	80054c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2200      	movs	r2, #0
 80052fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	f003 0304 	and.w	r3, r3, #4
 8005302:	2b00      	cmp	r3, #0
 8005304:	d020      	beq.n	8005348 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	f003 0304 	and.w	r3, r3, #4
 800530c:	2b00      	cmp	r3, #0
 800530e:	d01b      	beq.n	8005348 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f06f 0204 	mvn.w	r2, #4
 8005318:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2202      	movs	r2, #2
 800531e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	699b      	ldr	r3, [r3, #24]
 8005326:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800532a:	2b00      	cmp	r3, #0
 800532c:	d003      	beq.n	8005336 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f000 f8be 	bl	80054b0 <HAL_TIM_IC_CaptureCallback>
 8005334:	e005      	b.n	8005342 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	f000 f8b0 	bl	800549c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800533c:	6878      	ldr	r0, [r7, #4]
 800533e:	f000 f8c1 	bl	80054c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2200      	movs	r2, #0
 8005346:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	f003 0308 	and.w	r3, r3, #8
 800534e:	2b00      	cmp	r3, #0
 8005350:	d020      	beq.n	8005394 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	f003 0308 	and.w	r3, r3, #8
 8005358:	2b00      	cmp	r3, #0
 800535a:	d01b      	beq.n	8005394 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f06f 0208 	mvn.w	r2, #8
 8005364:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2204      	movs	r2, #4
 800536a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	69db      	ldr	r3, [r3, #28]
 8005372:	f003 0303 	and.w	r3, r3, #3
 8005376:	2b00      	cmp	r3, #0
 8005378:	d003      	beq.n	8005382 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800537a:	6878      	ldr	r0, [r7, #4]
 800537c:	f000 f898 	bl	80054b0 <HAL_TIM_IC_CaptureCallback>
 8005380:	e005      	b.n	800538e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	f000 f88a 	bl	800549c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005388:	6878      	ldr	r0, [r7, #4]
 800538a:	f000 f89b 	bl	80054c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2200      	movs	r2, #0
 8005392:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	f003 0310 	and.w	r3, r3, #16
 800539a:	2b00      	cmp	r3, #0
 800539c:	d020      	beq.n	80053e0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	f003 0310 	and.w	r3, r3, #16
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d01b      	beq.n	80053e0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f06f 0210 	mvn.w	r2, #16
 80053b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2208      	movs	r2, #8
 80053b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	69db      	ldr	r3, [r3, #28]
 80053be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d003      	beq.n	80053ce <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053c6:	6878      	ldr	r0, [r7, #4]
 80053c8:	f000 f872 	bl	80054b0 <HAL_TIM_IC_CaptureCallback>
 80053cc:	e005      	b.n	80053da <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f000 f864 	bl	800549c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053d4:	6878      	ldr	r0, [r7, #4]
 80053d6:	f000 f875 	bl	80054c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2200      	movs	r2, #0
 80053de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	f003 0301 	and.w	r3, r3, #1
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d00c      	beq.n	8005404 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	f003 0301 	and.w	r3, r3, #1
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d007      	beq.n	8005404 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f06f 0201 	mvn.w	r2, #1
 80053fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	f7fb ff3a 	bl	8001278 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800540a:	2b00      	cmp	r3, #0
 800540c:	d00c      	beq.n	8005428 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005414:	2b00      	cmp	r3, #0
 8005416:	d007      	beq.n	8005428 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005420:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f000 f8e6 	bl	80055f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800542e:	2b00      	cmp	r3, #0
 8005430:	d00c      	beq.n	800544c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005438:	2b00      	cmp	r3, #0
 800543a:	d007      	beq.n	800544c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005444:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005446:	6878      	ldr	r0, [r7, #4]
 8005448:	f000 f8de 	bl	8005608 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005452:	2b00      	cmp	r3, #0
 8005454:	d00c      	beq.n	8005470 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800545c:	2b00      	cmp	r3, #0
 800545e:	d007      	beq.n	8005470 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005468:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	f000 f834 	bl	80054d8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	f003 0320 	and.w	r3, r3, #32
 8005476:	2b00      	cmp	r3, #0
 8005478:	d00c      	beq.n	8005494 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	f003 0320 	and.w	r3, r3, #32
 8005480:	2b00      	cmp	r3, #0
 8005482:	d007      	beq.n	8005494 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f06f 0220 	mvn.w	r2, #32
 800548c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f000 f8a6 	bl	80055e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005494:	bf00      	nop
 8005496:	3710      	adds	r7, #16
 8005498:	46bd      	mov	sp, r7
 800549a:	bd80      	pop	{r7, pc}

0800549c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800549c:	b480      	push	{r7}
 800549e:	b083      	sub	sp, #12
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80054a4:	bf00      	nop
 80054a6:	370c      	adds	r7, #12
 80054a8:	46bd      	mov	sp, r7
 80054aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ae:	4770      	bx	lr

080054b0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b083      	sub	sp, #12
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80054b8:	bf00      	nop
 80054ba:	370c      	adds	r7, #12
 80054bc:	46bd      	mov	sp, r7
 80054be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c2:	4770      	bx	lr

080054c4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b083      	sub	sp, #12
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80054cc:	bf00      	nop
 80054ce:	370c      	adds	r7, #12
 80054d0:	46bd      	mov	sp, r7
 80054d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d6:	4770      	bx	lr

080054d8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80054d8:	b480      	push	{r7}
 80054da:	b083      	sub	sp, #12
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80054e0:	bf00      	nop
 80054e2:	370c      	adds	r7, #12
 80054e4:	46bd      	mov	sp, r7
 80054e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ea:	4770      	bx	lr

080054ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b085      	sub	sp, #20
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
 80054f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	4a34      	ldr	r2, [pc, #208]	@ (80055d0 <TIM_Base_SetConfig+0xe4>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d003      	beq.n	800550c <TIM_Base_SetConfig+0x20>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800550a:	d108      	bne.n	800551e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005512:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	68fa      	ldr	r2, [r7, #12]
 800551a:	4313      	orrs	r3, r2
 800551c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	4a2b      	ldr	r2, [pc, #172]	@ (80055d0 <TIM_Base_SetConfig+0xe4>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d00f      	beq.n	8005546 <TIM_Base_SetConfig+0x5a>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800552c:	d00b      	beq.n	8005546 <TIM_Base_SetConfig+0x5a>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	4a28      	ldr	r2, [pc, #160]	@ (80055d4 <TIM_Base_SetConfig+0xe8>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d007      	beq.n	8005546 <TIM_Base_SetConfig+0x5a>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	4a27      	ldr	r2, [pc, #156]	@ (80055d8 <TIM_Base_SetConfig+0xec>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d003      	beq.n	8005546 <TIM_Base_SetConfig+0x5a>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	4a26      	ldr	r2, [pc, #152]	@ (80055dc <TIM_Base_SetConfig+0xf0>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d108      	bne.n	8005558 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800554c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	68db      	ldr	r3, [r3, #12]
 8005552:	68fa      	ldr	r2, [r7, #12]
 8005554:	4313      	orrs	r3, r2
 8005556:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	695b      	ldr	r3, [r3, #20]
 8005562:	4313      	orrs	r3, r2
 8005564:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	68fa      	ldr	r2, [r7, #12]
 800556a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	689a      	ldr	r2, [r3, #8]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	681a      	ldr	r2, [r3, #0]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	4a14      	ldr	r2, [pc, #80]	@ (80055d0 <TIM_Base_SetConfig+0xe4>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d00b      	beq.n	800559c <TIM_Base_SetConfig+0xb0>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	4a13      	ldr	r2, [pc, #76]	@ (80055d4 <TIM_Base_SetConfig+0xe8>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d007      	beq.n	800559c <TIM_Base_SetConfig+0xb0>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	4a12      	ldr	r2, [pc, #72]	@ (80055d8 <TIM_Base_SetConfig+0xec>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d003      	beq.n	800559c <TIM_Base_SetConfig+0xb0>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	4a11      	ldr	r2, [pc, #68]	@ (80055dc <TIM_Base_SetConfig+0xf0>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d103      	bne.n	80055a4 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	691a      	ldr	r2, [r3, #16]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2201      	movs	r2, #1
 80055a8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	691b      	ldr	r3, [r3, #16]
 80055ae:	f003 0301 	and.w	r3, r3, #1
 80055b2:	2b01      	cmp	r3, #1
 80055b4:	d105      	bne.n	80055c2 <TIM_Base_SetConfig+0xd6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	691b      	ldr	r3, [r3, #16]
 80055ba:	f023 0201 	bic.w	r2, r3, #1
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	611a      	str	r2, [r3, #16]
  }
}
 80055c2:	bf00      	nop
 80055c4:	3714      	adds	r7, #20
 80055c6:	46bd      	mov	sp, r7
 80055c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055cc:	4770      	bx	lr
 80055ce:	bf00      	nop
 80055d0:	40012c00 	.word	0x40012c00
 80055d4:	40014000 	.word	0x40014000
 80055d8:	40014400 	.word	0x40014400
 80055dc:	40014800 	.word	0x40014800

080055e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80055e0:	b480      	push	{r7}
 80055e2:	b083      	sub	sp, #12
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80055e8:	bf00      	nop
 80055ea:	370c      	adds	r7, #12
 80055ec:	46bd      	mov	sp, r7
 80055ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f2:	4770      	bx	lr

080055f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80055f4:	b480      	push	{r7}
 80055f6:	b083      	sub	sp, #12
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80055fc:	bf00      	nop
 80055fe:	370c      	adds	r7, #12
 8005600:	46bd      	mov	sp, r7
 8005602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005606:	4770      	bx	lr

08005608 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005608:	b480      	push	{r7}
 800560a:	b083      	sub	sp, #12
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005610:	bf00      	nop
 8005612:	370c      	adds	r7, #12
 8005614:	46bd      	mov	sp, r7
 8005616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561a:	4770      	bx	lr

0800561c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b082      	sub	sp, #8
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d101      	bne.n	800562e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800562a:	2301      	movs	r3, #1
 800562c:	e040      	b.n	80056b0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005632:	2b00      	cmp	r3, #0
 8005634:	d106      	bne.n	8005644 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2200      	movs	r2, #0
 800563a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f7fb ff20 	bl	8001484 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2224      	movs	r2, #36	@ 0x24
 8005648:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	681a      	ldr	r2, [r3, #0]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f022 0201 	bic.w	r2, r2, #1
 8005658:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800565e:	2b00      	cmp	r3, #0
 8005660:	d002      	beq.n	8005668 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f000 f9e8 	bl	8005a38 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005668:	6878      	ldr	r0, [r7, #4]
 800566a:	f000 f8af 	bl	80057cc <UART_SetConfig>
 800566e:	4603      	mov	r3, r0
 8005670:	2b01      	cmp	r3, #1
 8005672:	d101      	bne.n	8005678 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005674:	2301      	movs	r3, #1
 8005676:	e01b      	b.n	80056b0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	685a      	ldr	r2, [r3, #4]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005686:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	689a      	ldr	r2, [r3, #8]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005696:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	681a      	ldr	r2, [r3, #0]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f042 0201 	orr.w	r2, r2, #1
 80056a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80056a8:	6878      	ldr	r0, [r7, #4]
 80056aa:	f000 fa67 	bl	8005b7c <UART_CheckIdleState>
 80056ae:	4603      	mov	r3, r0
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	3708      	adds	r7, #8
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}

080056b8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b08a      	sub	sp, #40	@ 0x28
 80056bc:	af02      	add	r7, sp, #8
 80056be:	60f8      	str	r0, [r7, #12]
 80056c0:	60b9      	str	r1, [r7, #8]
 80056c2:	603b      	str	r3, [r7, #0]
 80056c4:	4613      	mov	r3, r2
 80056c6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80056cc:	2b20      	cmp	r3, #32
 80056ce:	d177      	bne.n	80057c0 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d002      	beq.n	80056dc <HAL_UART_Transmit+0x24>
 80056d6:	88fb      	ldrh	r3, [r7, #6]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d101      	bne.n	80056e0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80056dc:	2301      	movs	r3, #1
 80056de:	e070      	b.n	80057c2 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	2200      	movs	r2, #0
 80056e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	2221      	movs	r2, #33	@ 0x21
 80056ec:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80056ee:	f7fc f847 	bl	8001780 <HAL_GetTick>
 80056f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	88fa      	ldrh	r2, [r7, #6]
 80056f8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	88fa      	ldrh	r2, [r7, #6]
 8005700:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	689b      	ldr	r3, [r3, #8]
 8005708:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800570c:	d108      	bne.n	8005720 <HAL_UART_Transmit+0x68>
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	691b      	ldr	r3, [r3, #16]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d104      	bne.n	8005720 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005716:	2300      	movs	r3, #0
 8005718:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	61bb      	str	r3, [r7, #24]
 800571e:	e003      	b.n	8005728 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005724:	2300      	movs	r3, #0
 8005726:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005728:	e02f      	b.n	800578a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	9300      	str	r3, [sp, #0]
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	2200      	movs	r2, #0
 8005732:	2180      	movs	r1, #128	@ 0x80
 8005734:	68f8      	ldr	r0, [r7, #12]
 8005736:	f000 fac9 	bl	8005ccc <UART_WaitOnFlagUntilTimeout>
 800573a:	4603      	mov	r3, r0
 800573c:	2b00      	cmp	r3, #0
 800573e:	d004      	beq.n	800574a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	2220      	movs	r2, #32
 8005744:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8005746:	2303      	movs	r3, #3
 8005748:	e03b      	b.n	80057c2 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800574a:	69fb      	ldr	r3, [r7, #28]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d10b      	bne.n	8005768 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005750:	69bb      	ldr	r3, [r7, #24]
 8005752:	881a      	ldrh	r2, [r3, #0]
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800575c:	b292      	uxth	r2, r2
 800575e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005760:	69bb      	ldr	r3, [r7, #24]
 8005762:	3302      	adds	r3, #2
 8005764:	61bb      	str	r3, [r7, #24]
 8005766:	e007      	b.n	8005778 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005768:	69fb      	ldr	r3, [r7, #28]
 800576a:	781a      	ldrb	r2, [r3, #0]
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005772:	69fb      	ldr	r3, [r7, #28]
 8005774:	3301      	adds	r3, #1
 8005776:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800577e:	b29b      	uxth	r3, r3
 8005780:	3b01      	subs	r3, #1
 8005782:	b29a      	uxth	r2, r3
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005790:	b29b      	uxth	r3, r3
 8005792:	2b00      	cmp	r3, #0
 8005794:	d1c9      	bne.n	800572a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	9300      	str	r3, [sp, #0]
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	2200      	movs	r2, #0
 800579e:	2140      	movs	r1, #64	@ 0x40
 80057a0:	68f8      	ldr	r0, [r7, #12]
 80057a2:	f000 fa93 	bl	8005ccc <UART_WaitOnFlagUntilTimeout>
 80057a6:	4603      	mov	r3, r0
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d004      	beq.n	80057b6 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2220      	movs	r2, #32
 80057b0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80057b2:	2303      	movs	r3, #3
 80057b4:	e005      	b.n	80057c2 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	2220      	movs	r2, #32
 80057ba:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80057bc:	2300      	movs	r3, #0
 80057be:	e000      	b.n	80057c2 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80057c0:	2302      	movs	r3, #2
  }
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	3720      	adds	r7, #32
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}
	...

080057cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b088      	sub	sp, #32
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80057d4:	2300      	movs	r3, #0
 80057d6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	689a      	ldr	r2, [r3, #8]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	691b      	ldr	r3, [r3, #16]
 80057e0:	431a      	orrs	r2, r3
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	695b      	ldr	r3, [r3, #20]
 80057e6:	431a      	orrs	r2, r3
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	69db      	ldr	r3, [r3, #28]
 80057ec:	4313      	orrs	r3, r2
 80057ee:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	681a      	ldr	r2, [r3, #0]
 80057f6:	4b8a      	ldr	r3, [pc, #552]	@ (8005a20 <UART_SetConfig+0x254>)
 80057f8:	4013      	ands	r3, r2
 80057fa:	687a      	ldr	r2, [r7, #4]
 80057fc:	6812      	ldr	r2, [r2, #0]
 80057fe:	6979      	ldr	r1, [r7, #20]
 8005800:	430b      	orrs	r3, r1
 8005802:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	685b      	ldr	r3, [r3, #4]
 800580a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	68da      	ldr	r2, [r3, #12]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	430a      	orrs	r2, r1
 8005818:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	699b      	ldr	r3, [r3, #24]
 800581e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6a1b      	ldr	r3, [r3, #32]
 8005824:	697a      	ldr	r2, [r7, #20]
 8005826:	4313      	orrs	r3, r2
 8005828:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	689b      	ldr	r3, [r3, #8]
 8005830:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	697a      	ldr	r2, [r7, #20]
 800583a:	430a      	orrs	r2, r1
 800583c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a78      	ldr	r2, [pc, #480]	@ (8005a24 <UART_SetConfig+0x258>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d120      	bne.n	800588a <UART_SetConfig+0xbe>
 8005848:	4b77      	ldr	r3, [pc, #476]	@ (8005a28 <UART_SetConfig+0x25c>)
 800584a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800584c:	f003 0303 	and.w	r3, r3, #3
 8005850:	2b03      	cmp	r3, #3
 8005852:	d817      	bhi.n	8005884 <UART_SetConfig+0xb8>
 8005854:	a201      	add	r2, pc, #4	@ (adr r2, 800585c <UART_SetConfig+0x90>)
 8005856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800585a:	bf00      	nop
 800585c:	0800586d 	.word	0x0800586d
 8005860:	08005879 	.word	0x08005879
 8005864:	0800587f 	.word	0x0800587f
 8005868:	08005873 	.word	0x08005873
 800586c:	2300      	movs	r3, #0
 800586e:	77fb      	strb	r3, [r7, #31]
 8005870:	e01d      	b.n	80058ae <UART_SetConfig+0xe2>
 8005872:	2302      	movs	r3, #2
 8005874:	77fb      	strb	r3, [r7, #31]
 8005876:	e01a      	b.n	80058ae <UART_SetConfig+0xe2>
 8005878:	2304      	movs	r3, #4
 800587a:	77fb      	strb	r3, [r7, #31]
 800587c:	e017      	b.n	80058ae <UART_SetConfig+0xe2>
 800587e:	2308      	movs	r3, #8
 8005880:	77fb      	strb	r3, [r7, #31]
 8005882:	e014      	b.n	80058ae <UART_SetConfig+0xe2>
 8005884:	2310      	movs	r3, #16
 8005886:	77fb      	strb	r3, [r7, #31]
 8005888:	e011      	b.n	80058ae <UART_SetConfig+0xe2>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a67      	ldr	r2, [pc, #412]	@ (8005a2c <UART_SetConfig+0x260>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d102      	bne.n	800589a <UART_SetConfig+0xce>
 8005894:	2300      	movs	r3, #0
 8005896:	77fb      	strb	r3, [r7, #31]
 8005898:	e009      	b.n	80058ae <UART_SetConfig+0xe2>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a64      	ldr	r2, [pc, #400]	@ (8005a30 <UART_SetConfig+0x264>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d102      	bne.n	80058aa <UART_SetConfig+0xde>
 80058a4:	2300      	movs	r3, #0
 80058a6:	77fb      	strb	r3, [r7, #31]
 80058a8:	e001      	b.n	80058ae <UART_SetConfig+0xe2>
 80058aa:	2310      	movs	r3, #16
 80058ac:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	69db      	ldr	r3, [r3, #28]
 80058b2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80058b6:	d15a      	bne.n	800596e <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 80058b8:	7ffb      	ldrb	r3, [r7, #31]
 80058ba:	2b08      	cmp	r3, #8
 80058bc:	d827      	bhi.n	800590e <UART_SetConfig+0x142>
 80058be:	a201      	add	r2, pc, #4	@ (adr r2, 80058c4 <UART_SetConfig+0xf8>)
 80058c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058c4:	080058e9 	.word	0x080058e9
 80058c8:	080058f1 	.word	0x080058f1
 80058cc:	080058f9 	.word	0x080058f9
 80058d0:	0800590f 	.word	0x0800590f
 80058d4:	080058ff 	.word	0x080058ff
 80058d8:	0800590f 	.word	0x0800590f
 80058dc:	0800590f 	.word	0x0800590f
 80058e0:	0800590f 	.word	0x0800590f
 80058e4:	08005907 	.word	0x08005907
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058e8:	f7ff fa18 	bl	8004d1c <HAL_RCC_GetPCLK1Freq>
 80058ec:	61b8      	str	r0, [r7, #24]
        break;
 80058ee:	e013      	b.n	8005918 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80058f0:	f7ff fa36 	bl	8004d60 <HAL_RCC_GetPCLK2Freq>
 80058f4:	61b8      	str	r0, [r7, #24]
        break;
 80058f6:	e00f      	b.n	8005918 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80058f8:	4b4e      	ldr	r3, [pc, #312]	@ (8005a34 <UART_SetConfig+0x268>)
 80058fa:	61bb      	str	r3, [r7, #24]
        break;
 80058fc:	e00c      	b.n	8005918 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80058fe:	f7ff f9ad 	bl	8004c5c <HAL_RCC_GetSysClockFreq>
 8005902:	61b8      	str	r0, [r7, #24]
        break;
 8005904:	e008      	b.n	8005918 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005906:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800590a:	61bb      	str	r3, [r7, #24]
        break;
 800590c:	e004      	b.n	8005918 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800590e:	2300      	movs	r3, #0
 8005910:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005912:	2301      	movs	r3, #1
 8005914:	77bb      	strb	r3, [r7, #30]
        break;
 8005916:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005918:	69bb      	ldr	r3, [r7, #24]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d074      	beq.n	8005a08 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800591e:	69bb      	ldr	r3, [r7, #24]
 8005920:	005a      	lsls	r2, r3, #1
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	085b      	lsrs	r3, r3, #1
 8005928:	441a      	add	r2, r3
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005932:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	2b0f      	cmp	r3, #15
 8005938:	d916      	bls.n	8005968 <UART_SetConfig+0x19c>
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005940:	d212      	bcs.n	8005968 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005942:	693b      	ldr	r3, [r7, #16]
 8005944:	b29b      	uxth	r3, r3
 8005946:	f023 030f 	bic.w	r3, r3, #15
 800594a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800594c:	693b      	ldr	r3, [r7, #16]
 800594e:	085b      	lsrs	r3, r3, #1
 8005950:	b29b      	uxth	r3, r3
 8005952:	f003 0307 	and.w	r3, r3, #7
 8005956:	b29a      	uxth	r2, r3
 8005958:	89fb      	ldrh	r3, [r7, #14]
 800595a:	4313      	orrs	r3, r2
 800595c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	89fa      	ldrh	r2, [r7, #14]
 8005964:	60da      	str	r2, [r3, #12]
 8005966:	e04f      	b.n	8005a08 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005968:	2301      	movs	r3, #1
 800596a:	77bb      	strb	r3, [r7, #30]
 800596c:	e04c      	b.n	8005a08 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800596e:	7ffb      	ldrb	r3, [r7, #31]
 8005970:	2b08      	cmp	r3, #8
 8005972:	d828      	bhi.n	80059c6 <UART_SetConfig+0x1fa>
 8005974:	a201      	add	r2, pc, #4	@ (adr r2, 800597c <UART_SetConfig+0x1b0>)
 8005976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800597a:	bf00      	nop
 800597c:	080059a1 	.word	0x080059a1
 8005980:	080059a9 	.word	0x080059a9
 8005984:	080059b1 	.word	0x080059b1
 8005988:	080059c7 	.word	0x080059c7
 800598c:	080059b7 	.word	0x080059b7
 8005990:	080059c7 	.word	0x080059c7
 8005994:	080059c7 	.word	0x080059c7
 8005998:	080059c7 	.word	0x080059c7
 800599c:	080059bf 	.word	0x080059bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059a0:	f7ff f9bc 	bl	8004d1c <HAL_RCC_GetPCLK1Freq>
 80059a4:	61b8      	str	r0, [r7, #24]
        break;
 80059a6:	e013      	b.n	80059d0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80059a8:	f7ff f9da 	bl	8004d60 <HAL_RCC_GetPCLK2Freq>
 80059ac:	61b8      	str	r0, [r7, #24]
        break;
 80059ae:	e00f      	b.n	80059d0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80059b0:	4b20      	ldr	r3, [pc, #128]	@ (8005a34 <UART_SetConfig+0x268>)
 80059b2:	61bb      	str	r3, [r7, #24]
        break;
 80059b4:	e00c      	b.n	80059d0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80059b6:	f7ff f951 	bl	8004c5c <HAL_RCC_GetSysClockFreq>
 80059ba:	61b8      	str	r0, [r7, #24]
        break;
 80059bc:	e008      	b.n	80059d0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80059be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80059c2:	61bb      	str	r3, [r7, #24]
        break;
 80059c4:	e004      	b.n	80059d0 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80059c6:	2300      	movs	r3, #0
 80059c8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80059ca:	2301      	movs	r3, #1
 80059cc:	77bb      	strb	r3, [r7, #30]
        break;
 80059ce:	bf00      	nop
    }

    if (pclk != 0U)
 80059d0:	69bb      	ldr	r3, [r7, #24]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d018      	beq.n	8005a08 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	085a      	lsrs	r2, r3, #1
 80059dc:	69bb      	ldr	r3, [r7, #24]
 80059de:	441a      	add	r2, r3
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80059e8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	2b0f      	cmp	r3, #15
 80059ee:	d909      	bls.n	8005a04 <UART_SetConfig+0x238>
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80059f6:	d205      	bcs.n	8005a04 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	b29a      	uxth	r2, r3
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	60da      	str	r2, [r3, #12]
 8005a02:	e001      	b.n	8005a08 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005a04:	2301      	movs	r3, #1
 8005a06:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2200      	movs	r2, #0
 8005a12:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005a14:	7fbb      	ldrb	r3, [r7, #30]
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	3720      	adds	r7, #32
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}
 8005a1e:	bf00      	nop
 8005a20:	efff69f3 	.word	0xefff69f3
 8005a24:	40013800 	.word	0x40013800
 8005a28:	40021000 	.word	0x40021000
 8005a2c:	40004400 	.word	0x40004400
 8005a30:	40004800 	.word	0x40004800
 8005a34:	007a1200 	.word	0x007a1200

08005a38 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b083      	sub	sp, #12
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a44:	f003 0308 	and.w	r3, r3, #8
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d00a      	beq.n	8005a62 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	430a      	orrs	r2, r1
 8005a60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a66:	f003 0301 	and.w	r3, r3, #1
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d00a      	beq.n	8005a84 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	430a      	orrs	r2, r1
 8005a82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a88:	f003 0302 	and.w	r3, r3, #2
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d00a      	beq.n	8005aa6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	430a      	orrs	r2, r1
 8005aa4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005aaa:	f003 0304 	and.w	r3, r3, #4
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d00a      	beq.n	8005ac8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	430a      	orrs	r2, r1
 8005ac6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005acc:	f003 0310 	and.w	r3, r3, #16
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d00a      	beq.n	8005aea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	689b      	ldr	r3, [r3, #8]
 8005ada:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	430a      	orrs	r2, r1
 8005ae8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005aee:	f003 0320 	and.w	r3, r3, #32
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d00a      	beq.n	8005b0c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	689b      	ldr	r3, [r3, #8]
 8005afc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	430a      	orrs	r2, r1
 8005b0a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d01a      	beq.n	8005b4e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	685b      	ldr	r3, [r3, #4]
 8005b1e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	430a      	orrs	r2, r1
 8005b2c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b32:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005b36:	d10a      	bne.n	8005b4e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	430a      	orrs	r2, r1
 8005b4c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d00a      	beq.n	8005b70 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	430a      	orrs	r2, r1
 8005b6e:	605a      	str	r2, [r3, #4]
  }
}
 8005b70:	bf00      	nop
 8005b72:	370c      	adds	r7, #12
 8005b74:	46bd      	mov	sp, r7
 8005b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7a:	4770      	bx	lr

08005b7c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b098      	sub	sp, #96	@ 0x60
 8005b80:	af02      	add	r7, sp, #8
 8005b82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2200      	movs	r2, #0
 8005b88:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005b8c:	f7fb fdf8 	bl	8001780 <HAL_GetTick>
 8005b90:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f003 0308 	and.w	r3, r3, #8
 8005b9c:	2b08      	cmp	r3, #8
 8005b9e:	d12e      	bne.n	8005bfe <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ba0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005ba4:	9300      	str	r3, [sp, #0]
 8005ba6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ba8:	2200      	movs	r2, #0
 8005baa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f000 f88c 	bl	8005ccc <UART_WaitOnFlagUntilTimeout>
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d021      	beq.n	8005bfe <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bc2:	e853 3f00 	ldrex	r3, [r3]
 8005bc6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005bc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005bce:	653b      	str	r3, [r7, #80]	@ 0x50
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	461a      	mov	r2, r3
 8005bd6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005bd8:	647b      	str	r3, [r7, #68]	@ 0x44
 8005bda:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bdc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005bde:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005be0:	e841 2300 	strex	r3, r2, [r1]
 8005be4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005be6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d1e6      	bne.n	8005bba <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2220      	movs	r2, #32
 8005bf0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005bfa:	2303      	movs	r3, #3
 8005bfc:	e062      	b.n	8005cc4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f003 0304 	and.w	r3, r3, #4
 8005c08:	2b04      	cmp	r3, #4
 8005c0a:	d149      	bne.n	8005ca0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c0c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005c10:	9300      	str	r3, [sp, #0]
 8005c12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c14:	2200      	movs	r2, #0
 8005c16:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f000 f856 	bl	8005ccc <UART_WaitOnFlagUntilTimeout>
 8005c20:	4603      	mov	r3, r0
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d03c      	beq.n	8005ca0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c2e:	e853 3f00 	ldrex	r3, [r3]
 8005c32:	623b      	str	r3, [r7, #32]
   return(result);
 8005c34:	6a3b      	ldr	r3, [r7, #32]
 8005c36:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005c3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	461a      	mov	r2, r3
 8005c42:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c44:	633b      	str	r3, [r7, #48]	@ 0x30
 8005c46:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c48:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005c4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c4c:	e841 2300 	strex	r3, r2, [r1]
 8005c50:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005c52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d1e6      	bne.n	8005c26 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	3308      	adds	r3, #8
 8005c5e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c60:	693b      	ldr	r3, [r7, #16]
 8005c62:	e853 3f00 	ldrex	r3, [r3]
 8005c66:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	f023 0301 	bic.w	r3, r3, #1
 8005c6e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	3308      	adds	r3, #8
 8005c76:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005c78:	61fa      	str	r2, [r7, #28]
 8005c7a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c7c:	69b9      	ldr	r1, [r7, #24]
 8005c7e:	69fa      	ldr	r2, [r7, #28]
 8005c80:	e841 2300 	strex	r3, r2, [r1]
 8005c84:	617b      	str	r3, [r7, #20]
   return(result);
 8005c86:	697b      	ldr	r3, [r7, #20]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d1e5      	bne.n	8005c58 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2220      	movs	r2, #32
 8005c90:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2200      	movs	r2, #0
 8005c98:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c9c:	2303      	movs	r3, #3
 8005c9e:	e011      	b.n	8005cc4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2220      	movs	r2, #32
 8005ca4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2220      	movs	r2, #32
 8005caa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005cc2:	2300      	movs	r3, #0
}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	3758      	adds	r7, #88	@ 0x58
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bd80      	pop	{r7, pc}

08005ccc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b084      	sub	sp, #16
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	60f8      	str	r0, [r7, #12]
 8005cd4:	60b9      	str	r1, [r7, #8]
 8005cd6:	603b      	str	r3, [r7, #0]
 8005cd8:	4613      	mov	r3, r2
 8005cda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005cdc:	e04f      	b.n	8005d7e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cde:	69bb      	ldr	r3, [r7, #24]
 8005ce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ce4:	d04b      	beq.n	8005d7e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ce6:	f7fb fd4b 	bl	8001780 <HAL_GetTick>
 8005cea:	4602      	mov	r2, r0
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	1ad3      	subs	r3, r2, r3
 8005cf0:	69ba      	ldr	r2, [r7, #24]
 8005cf2:	429a      	cmp	r2, r3
 8005cf4:	d302      	bcc.n	8005cfc <UART_WaitOnFlagUntilTimeout+0x30>
 8005cf6:	69bb      	ldr	r3, [r7, #24]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d101      	bne.n	8005d00 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005cfc:	2303      	movs	r3, #3
 8005cfe:	e04e      	b.n	8005d9e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f003 0304 	and.w	r3, r3, #4
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d037      	beq.n	8005d7e <UART_WaitOnFlagUntilTimeout+0xb2>
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	2b80      	cmp	r3, #128	@ 0x80
 8005d12:	d034      	beq.n	8005d7e <UART_WaitOnFlagUntilTimeout+0xb2>
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	2b40      	cmp	r3, #64	@ 0x40
 8005d18:	d031      	beq.n	8005d7e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	69db      	ldr	r3, [r3, #28]
 8005d20:	f003 0308 	and.w	r3, r3, #8
 8005d24:	2b08      	cmp	r3, #8
 8005d26:	d110      	bne.n	8005d4a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	2208      	movs	r2, #8
 8005d2e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005d30:	68f8      	ldr	r0, [r7, #12]
 8005d32:	f000 f838 	bl	8005da6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	2208      	movs	r2, #8
 8005d3a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	2200      	movs	r2, #0
 8005d42:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005d46:	2301      	movs	r3, #1
 8005d48:	e029      	b.n	8005d9e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	69db      	ldr	r3, [r3, #28]
 8005d50:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005d54:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005d58:	d111      	bne.n	8005d7e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005d62:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005d64:	68f8      	ldr	r0, [r7, #12]
 8005d66:	f000 f81e 	bl	8005da6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	2220      	movs	r2, #32
 8005d6e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	2200      	movs	r2, #0
 8005d76:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005d7a:	2303      	movs	r3, #3
 8005d7c:	e00f      	b.n	8005d9e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	69da      	ldr	r2, [r3, #28]
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	4013      	ands	r3, r2
 8005d88:	68ba      	ldr	r2, [r7, #8]
 8005d8a:	429a      	cmp	r2, r3
 8005d8c:	bf0c      	ite	eq
 8005d8e:	2301      	moveq	r3, #1
 8005d90:	2300      	movne	r3, #0
 8005d92:	b2db      	uxtb	r3, r3
 8005d94:	461a      	mov	r2, r3
 8005d96:	79fb      	ldrb	r3, [r7, #7]
 8005d98:	429a      	cmp	r2, r3
 8005d9a:	d0a0      	beq.n	8005cde <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005d9c:	2300      	movs	r3, #0
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	3710      	adds	r7, #16
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}

08005da6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005da6:	b480      	push	{r7}
 8005da8:	b095      	sub	sp, #84	@ 0x54
 8005daa:	af00      	add	r7, sp, #0
 8005dac:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005db4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005db6:	e853 3f00 	ldrex	r3, [r3]
 8005dba:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005dbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dbe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005dc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	461a      	mov	r2, r3
 8005dca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005dcc:	643b      	str	r3, [r7, #64]	@ 0x40
 8005dce:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dd0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005dd2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005dd4:	e841 2300 	strex	r3, r2, [r1]
 8005dd8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005dda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d1e6      	bne.n	8005dae <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	3308      	adds	r3, #8
 8005de6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005de8:	6a3b      	ldr	r3, [r7, #32]
 8005dea:	e853 3f00 	ldrex	r3, [r3]
 8005dee:	61fb      	str	r3, [r7, #28]
   return(result);
 8005df0:	69fb      	ldr	r3, [r7, #28]
 8005df2:	f023 0301 	bic.w	r3, r3, #1
 8005df6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	3308      	adds	r3, #8
 8005dfe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005e00:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005e02:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e04:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005e06:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005e08:	e841 2300 	strex	r3, r2, [r1]
 8005e0c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d1e5      	bne.n	8005de0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e18:	2b01      	cmp	r3, #1
 8005e1a:	d118      	bne.n	8005e4e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	e853 3f00 	ldrex	r3, [r3]
 8005e28:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	f023 0310 	bic.w	r3, r3, #16
 8005e30:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	461a      	mov	r2, r3
 8005e38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e3a:	61bb      	str	r3, [r7, #24]
 8005e3c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e3e:	6979      	ldr	r1, [r7, #20]
 8005e40:	69ba      	ldr	r2, [r7, #24]
 8005e42:	e841 2300 	strex	r3, r2, [r1]
 8005e46:	613b      	str	r3, [r7, #16]
   return(result);
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d1e6      	bne.n	8005e1c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2220      	movs	r2, #32
 8005e52:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005e62:	bf00      	nop
 8005e64:	3754      	adds	r7, #84	@ 0x54
 8005e66:	46bd      	mov	sp, r7
 8005e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6c:	4770      	bx	lr

08005e6e <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005e6e:	b480      	push	{r7}
 8005e70:	b085      	sub	sp, #20
 8005e72:	af00      	add	r7, sp, #0
 8005e74:	4603      	mov	r3, r0
 8005e76:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005e78:	2300      	movs	r3, #0
 8005e7a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005e7c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005e80:	2b84      	cmp	r3, #132	@ 0x84
 8005e82:	d005      	beq.n	8005e90 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005e84:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	4413      	add	r3, r2
 8005e8c:	3303      	adds	r3, #3
 8005e8e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005e90:	68fb      	ldr	r3, [r7, #12]
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3714      	adds	r7, #20
 8005e96:	46bd      	mov	sp, r7
 8005e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9c:	4770      	bx	lr

08005e9e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005e9e:	b580      	push	{r7, lr}
 8005ea0:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005ea2:	f000 fd7b 	bl	800699c <vTaskStartScheduler>
  
  return osOK;
 8005ea6:	2300      	movs	r3, #0
}
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	bd80      	pop	{r7, pc}

08005eac <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005eac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005eae:	b089      	sub	sp, #36	@ 0x24
 8005eb0:	af04      	add	r7, sp, #16
 8005eb2:	6078      	str	r0, [r7, #4]
 8005eb4:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	695b      	ldr	r3, [r3, #20]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d020      	beq.n	8005f00 <osThreadCreate+0x54>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	699b      	ldr	r3, [r3, #24]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d01c      	beq.n	8005f00 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	685c      	ldr	r4, [r3, #4]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	691e      	ldr	r6, [r3, #16]
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005ed8:	4618      	mov	r0, r3
 8005eda:	f7ff ffc8 	bl	8005e6e <makeFreeRtosPriority>
 8005ede:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	695b      	ldr	r3, [r3, #20]
 8005ee4:	687a      	ldr	r2, [r7, #4]
 8005ee6:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005ee8:	9202      	str	r2, [sp, #8]
 8005eea:	9301      	str	r3, [sp, #4]
 8005eec:	9100      	str	r1, [sp, #0]
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	4632      	mov	r2, r6
 8005ef2:	4629      	mov	r1, r5
 8005ef4:	4620      	mov	r0, r4
 8005ef6:	f000 fb8d 	bl	8006614 <xTaskCreateStatic>
 8005efa:	4603      	mov	r3, r0
 8005efc:	60fb      	str	r3, [r7, #12]
 8005efe:	e01c      	b.n	8005f3a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	685c      	ldr	r4, [r3, #4]
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005f0c:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005f14:	4618      	mov	r0, r3
 8005f16:	f7ff ffaa 	bl	8005e6e <makeFreeRtosPriority>
 8005f1a:	4602      	mov	r2, r0
 8005f1c:	f107 030c 	add.w	r3, r7, #12
 8005f20:	9301      	str	r3, [sp, #4]
 8005f22:	9200      	str	r2, [sp, #0]
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	4632      	mov	r2, r6
 8005f28:	4629      	mov	r1, r5
 8005f2a:	4620      	mov	r0, r4
 8005f2c:	f000 fbd1 	bl	80066d2 <xTaskCreate>
 8005f30:	4603      	mov	r3, r0
 8005f32:	2b01      	cmp	r3, #1
 8005f34:	d001      	beq.n	8005f3a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005f36:	2300      	movs	r3, #0
 8005f38:	e000      	b.n	8005f3c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
}
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	3714      	adds	r7, #20
 8005f40:	46bd      	mov	sp, r7
 8005f42:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005f44 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b084      	sub	sp, #16
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d001      	beq.n	8005f5a <osDelay+0x16>
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	e000      	b.n	8005f5c <osDelay+0x18>
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	f000 fce7 	bl	8006930 <vTaskDelay>
  
  return osOK;
 8005f62:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005f64:	4618      	mov	r0, r3
 8005f66:	3710      	adds	r7, #16
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd80      	pop	{r7, pc}

08005f6c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b083      	sub	sp, #12
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	f103 0208 	add.w	r2, r3, #8
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	f04f 32ff 	mov.w	r2, #4294967295
 8005f84:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	f103 0208 	add.w	r2, r3, #8
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	f103 0208 	add.w	r2, r3, #8
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005fa0:	bf00      	nop
 8005fa2:	370c      	adds	r7, #12
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005faa:	4770      	bx	lr

08005fac <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005fac:	b480      	push	{r7}
 8005fae:	b083      	sub	sp, #12
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005fba:	bf00      	nop
 8005fbc:	370c      	adds	r7, #12
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc4:	4770      	bx	lr

08005fc6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005fc6:	b480      	push	{r7}
 8005fc8:	b085      	sub	sp, #20
 8005fca:	af00      	add	r7, sp, #0
 8005fcc:	6078      	str	r0, [r7, #4]
 8005fce:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	68fa      	ldr	r2, [r7, #12]
 8005fda:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	689a      	ldr	r2, [r3, #8]
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	689b      	ldr	r3, [r3, #8]
 8005fe8:	683a      	ldr	r2, [r7, #0]
 8005fea:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	683a      	ldr	r2, [r7, #0]
 8005ff0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	687a      	ldr	r2, [r7, #4]
 8005ff6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	1c5a      	adds	r2, r3, #1
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	601a      	str	r2, [r3, #0]
}
 8006002:	bf00      	nop
 8006004:	3714      	adds	r7, #20
 8006006:	46bd      	mov	sp, r7
 8006008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600c:	4770      	bx	lr

0800600e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800600e:	b480      	push	{r7}
 8006010:	b085      	sub	sp, #20
 8006012:	af00      	add	r7, sp, #0
 8006014:	6078      	str	r0, [r7, #4]
 8006016:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006024:	d103      	bne.n	800602e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	691b      	ldr	r3, [r3, #16]
 800602a:	60fb      	str	r3, [r7, #12]
 800602c:	e00c      	b.n	8006048 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	3308      	adds	r3, #8
 8006032:	60fb      	str	r3, [r7, #12]
 8006034:	e002      	b.n	800603c <vListInsert+0x2e>
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	685b      	ldr	r3, [r3, #4]
 800603a:	60fb      	str	r3, [r7, #12]
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	68ba      	ldr	r2, [r7, #8]
 8006044:	429a      	cmp	r2, r3
 8006046:	d2f6      	bcs.n	8006036 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	685a      	ldr	r2, [r3, #4]
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	685b      	ldr	r3, [r3, #4]
 8006054:	683a      	ldr	r2, [r7, #0]
 8006056:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	68fa      	ldr	r2, [r7, #12]
 800605c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	683a      	ldr	r2, [r7, #0]
 8006062:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	687a      	ldr	r2, [r7, #4]
 8006068:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	1c5a      	adds	r2, r3, #1
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	601a      	str	r2, [r3, #0]
}
 8006074:	bf00      	nop
 8006076:	3714      	adds	r7, #20
 8006078:	46bd      	mov	sp, r7
 800607a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607e:	4770      	bx	lr

08006080 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006080:	b480      	push	{r7}
 8006082:	b085      	sub	sp, #20
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	691b      	ldr	r3, [r3, #16]
 800608c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	685b      	ldr	r3, [r3, #4]
 8006092:	687a      	ldr	r2, [r7, #4]
 8006094:	6892      	ldr	r2, [r2, #8]
 8006096:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	689b      	ldr	r3, [r3, #8]
 800609c:	687a      	ldr	r2, [r7, #4]
 800609e:	6852      	ldr	r2, [r2, #4]
 80060a0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	685b      	ldr	r3, [r3, #4]
 80060a6:	687a      	ldr	r2, [r7, #4]
 80060a8:	429a      	cmp	r2, r3
 80060aa:	d103      	bne.n	80060b4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	689a      	ldr	r2, [r3, #8]
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2200      	movs	r2, #0
 80060b8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	1e5a      	subs	r2, r3, #1
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
}
 80060c8:	4618      	mov	r0, r3
 80060ca:	3714      	adds	r7, #20
 80060cc:	46bd      	mov	sp, r7
 80060ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d2:	4770      	bx	lr

080060d4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b084      	sub	sp, #16
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
 80060dc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d10b      	bne.n	8006100 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80060e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060ec:	f383 8811 	msr	BASEPRI, r3
 80060f0:	f3bf 8f6f 	isb	sy
 80060f4:	f3bf 8f4f 	dsb	sy
 80060f8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80060fa:	bf00      	nop
 80060fc:	bf00      	nop
 80060fe:	e7fd      	b.n	80060fc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006100:	f001 f9d2 	bl	80074a8 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681a      	ldr	r2, [r3, #0]
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800610c:	68f9      	ldr	r1, [r7, #12]
 800610e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006110:	fb01 f303 	mul.w	r3, r1, r3
 8006114:	441a      	add	r2, r3
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	2200      	movs	r2, #0
 800611e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681a      	ldr	r2, [r3, #0]
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681a      	ldr	r2, [r3, #0]
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006130:	3b01      	subs	r3, #1
 8006132:	68f9      	ldr	r1, [r7, #12]
 8006134:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006136:	fb01 f303 	mul.w	r3, r1, r3
 800613a:	441a      	add	r2, r3
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	22ff      	movs	r2, #255	@ 0xff
 8006144:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	22ff      	movs	r2, #255	@ 0xff
 800614c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d114      	bne.n	8006180 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	691b      	ldr	r3, [r3, #16]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d01a      	beq.n	8006194 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	3310      	adds	r3, #16
 8006162:	4618      	mov	r0, r3
 8006164:	f000 fe42 	bl	8006dec <xTaskRemoveFromEventList>
 8006168:	4603      	mov	r3, r0
 800616a:	2b00      	cmp	r3, #0
 800616c:	d012      	beq.n	8006194 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800616e:	4b0d      	ldr	r3, [pc, #52]	@ (80061a4 <xQueueGenericReset+0xd0>)
 8006170:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006174:	601a      	str	r2, [r3, #0]
 8006176:	f3bf 8f4f 	dsb	sy
 800617a:	f3bf 8f6f 	isb	sy
 800617e:	e009      	b.n	8006194 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	3310      	adds	r3, #16
 8006184:	4618      	mov	r0, r3
 8006186:	f7ff fef1 	bl	8005f6c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	3324      	adds	r3, #36	@ 0x24
 800618e:	4618      	mov	r0, r3
 8006190:	f7ff feec 	bl	8005f6c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006194:	f001 f9ba 	bl	800750c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006198:	2301      	movs	r3, #1
}
 800619a:	4618      	mov	r0, r3
 800619c:	3710      	adds	r7, #16
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}
 80061a2:	bf00      	nop
 80061a4:	e000ed04 	.word	0xe000ed04

080061a8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b08a      	sub	sp, #40	@ 0x28
 80061ac:	af02      	add	r7, sp, #8
 80061ae:	60f8      	str	r0, [r7, #12]
 80061b0:	60b9      	str	r1, [r7, #8]
 80061b2:	4613      	mov	r3, r2
 80061b4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d10b      	bne.n	80061d4 <xQueueGenericCreate+0x2c>
	__asm volatile
 80061bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061c0:	f383 8811 	msr	BASEPRI, r3
 80061c4:	f3bf 8f6f 	isb	sy
 80061c8:	f3bf 8f4f 	dsb	sy
 80061cc:	613b      	str	r3, [r7, #16]
}
 80061ce:	bf00      	nop
 80061d0:	bf00      	nop
 80061d2:	e7fd      	b.n	80061d0 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d102      	bne.n	80061e0 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80061da:	2300      	movs	r3, #0
 80061dc:	61fb      	str	r3, [r7, #28]
 80061de:	e004      	b.n	80061ea <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	68ba      	ldr	r2, [r7, #8]
 80061e4:	fb02 f303 	mul.w	r3, r2, r3
 80061e8:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80061ea:	69fb      	ldr	r3, [r7, #28]
 80061ec:	3348      	adds	r3, #72	@ 0x48
 80061ee:	4618      	mov	r0, r3
 80061f0:	f001 fa7c 	bl	80076ec <pvPortMalloc>
 80061f4:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80061f6:	69bb      	ldr	r3, [r7, #24]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d00f      	beq.n	800621c <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80061fc:	69bb      	ldr	r3, [r7, #24]
 80061fe:	3348      	adds	r3, #72	@ 0x48
 8006200:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006202:	69bb      	ldr	r3, [r7, #24]
 8006204:	2200      	movs	r2, #0
 8006206:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800620a:	79fa      	ldrb	r2, [r7, #7]
 800620c:	69bb      	ldr	r3, [r7, #24]
 800620e:	9300      	str	r3, [sp, #0]
 8006210:	4613      	mov	r3, r2
 8006212:	697a      	ldr	r2, [r7, #20]
 8006214:	68b9      	ldr	r1, [r7, #8]
 8006216:	68f8      	ldr	r0, [r7, #12]
 8006218:	f000 f805 	bl	8006226 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800621c:	69bb      	ldr	r3, [r7, #24]
	}
 800621e:	4618      	mov	r0, r3
 8006220:	3720      	adds	r7, #32
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}

08006226 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006226:	b580      	push	{r7, lr}
 8006228:	b084      	sub	sp, #16
 800622a:	af00      	add	r7, sp, #0
 800622c:	60f8      	str	r0, [r7, #12]
 800622e:	60b9      	str	r1, [r7, #8]
 8006230:	607a      	str	r2, [r7, #4]
 8006232:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d103      	bne.n	8006242 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800623a:	69bb      	ldr	r3, [r7, #24]
 800623c:	69ba      	ldr	r2, [r7, #24]
 800623e:	601a      	str	r2, [r3, #0]
 8006240:	e002      	b.n	8006248 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006242:	69bb      	ldr	r3, [r7, #24]
 8006244:	687a      	ldr	r2, [r7, #4]
 8006246:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006248:	69bb      	ldr	r3, [r7, #24]
 800624a:	68fa      	ldr	r2, [r7, #12]
 800624c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800624e:	69bb      	ldr	r3, [r7, #24]
 8006250:	68ba      	ldr	r2, [r7, #8]
 8006252:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006254:	2101      	movs	r1, #1
 8006256:	69b8      	ldr	r0, [r7, #24]
 8006258:	f7ff ff3c 	bl	80060d4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800625c:	bf00      	nop
 800625e:	3710      	adds	r7, #16
 8006260:	46bd      	mov	sp, r7
 8006262:	bd80      	pop	{r7, pc}

08006264 <xQueueGenericSendFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b08e      	sub	sp, #56	@ 0x38
 8006268:	af00      	add	r7, sp, #0
 800626a:	60f8      	str	r0, [r7, #12]
 800626c:	60b9      	str	r1, [r7, #8]
 800626e:	607a      	str	r2, [r7, #4]
 8006270:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006278:	2b00      	cmp	r3, #0
 800627a:	d10b      	bne.n	8006294 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800627c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006280:	f383 8811 	msr	BASEPRI, r3
 8006284:	f3bf 8f6f 	isb	sy
 8006288:	f3bf 8f4f 	dsb	sy
 800628c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800628e:	bf00      	nop
 8006290:	bf00      	nop
 8006292:	e7fd      	b.n	8006290 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d103      	bne.n	80062a2 <xQueueGenericSendFromISR+0x3e>
 800629a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800629c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d101      	bne.n	80062a6 <xQueueGenericSendFromISR+0x42>
 80062a2:	2301      	movs	r3, #1
 80062a4:	e000      	b.n	80062a8 <xQueueGenericSendFromISR+0x44>
 80062a6:	2300      	movs	r3, #0
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d10b      	bne.n	80062c4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80062ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062b0:	f383 8811 	msr	BASEPRI, r3
 80062b4:	f3bf 8f6f 	isb	sy
 80062b8:	f3bf 8f4f 	dsb	sy
 80062bc:	623b      	str	r3, [r7, #32]
}
 80062be:	bf00      	nop
 80062c0:	bf00      	nop
 80062c2:	e7fd      	b.n	80062c0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	2b02      	cmp	r3, #2
 80062c8:	d103      	bne.n	80062d2 <xQueueGenericSendFromISR+0x6e>
 80062ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062ce:	2b01      	cmp	r3, #1
 80062d0:	d101      	bne.n	80062d6 <xQueueGenericSendFromISR+0x72>
 80062d2:	2301      	movs	r3, #1
 80062d4:	e000      	b.n	80062d8 <xQueueGenericSendFromISR+0x74>
 80062d6:	2300      	movs	r3, #0
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d10b      	bne.n	80062f4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80062dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062e0:	f383 8811 	msr	BASEPRI, r3
 80062e4:	f3bf 8f6f 	isb	sy
 80062e8:	f3bf 8f4f 	dsb	sy
 80062ec:	61fb      	str	r3, [r7, #28]
}
 80062ee:	bf00      	nop
 80062f0:	bf00      	nop
 80062f2:	e7fd      	b.n	80062f0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80062f4:	f001 f9b8 	bl	8007668 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80062f8:	f3ef 8211 	mrs	r2, BASEPRI
 80062fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006300:	f383 8811 	msr	BASEPRI, r3
 8006304:	f3bf 8f6f 	isb	sy
 8006308:	f3bf 8f4f 	dsb	sy
 800630c:	61ba      	str	r2, [r7, #24]
 800630e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006310:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006312:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006314:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006316:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006318:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800631a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800631c:	429a      	cmp	r2, r3
 800631e:	d302      	bcc.n	8006326 <xQueueGenericSendFromISR+0xc2>
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	2b02      	cmp	r3, #2
 8006324:	d12c      	bne.n	8006380 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006326:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006328:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800632c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006330:	683a      	ldr	r2, [r7, #0]
 8006332:	68b9      	ldr	r1, [r7, #8]
 8006334:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006336:	f000 f8b2 	bl	800649e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800633a:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800633e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006342:	d112      	bne.n	800636a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006344:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006346:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006348:	2b00      	cmp	r3, #0
 800634a:	d016      	beq.n	800637a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800634c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800634e:	3324      	adds	r3, #36	@ 0x24
 8006350:	4618      	mov	r0, r3
 8006352:	f000 fd4b 	bl	8006dec <xTaskRemoveFromEventList>
 8006356:	4603      	mov	r3, r0
 8006358:	2b00      	cmp	r3, #0
 800635a:	d00e      	beq.n	800637a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d00b      	beq.n	800637a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2201      	movs	r2, #1
 8006366:	601a      	str	r2, [r3, #0]
 8006368:	e007      	b.n	800637a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800636a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800636e:	3301      	adds	r3, #1
 8006370:	b2db      	uxtb	r3, r3
 8006372:	b25a      	sxtb	r2, r3
 8006374:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006376:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800637a:	2301      	movs	r3, #1
 800637c:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 800637e:	e001      	b.n	8006384 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006380:	2300      	movs	r3, #0
 8006382:	637b      	str	r3, [r7, #52]	@ 0x34
 8006384:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006386:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006388:	693b      	ldr	r3, [r7, #16]
 800638a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800638e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006390:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006392:	4618      	mov	r0, r3
 8006394:	3738      	adds	r7, #56	@ 0x38
 8006396:	46bd      	mov	sp, r7
 8006398:	bd80      	pop	{r7, pc}

0800639a <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800639a:	b580      	push	{r7, lr}
 800639c:	b08e      	sub	sp, #56	@ 0x38
 800639e:	af00      	add	r7, sp, #0
 80063a0:	60f8      	str	r0, [r7, #12]
 80063a2:	60b9      	str	r1, [r7, #8]
 80063a4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80063aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d10b      	bne.n	80063c8 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 80063b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063b4:	f383 8811 	msr	BASEPRI, r3
 80063b8:	f3bf 8f6f 	isb	sy
 80063bc:	f3bf 8f4f 	dsb	sy
 80063c0:	623b      	str	r3, [r7, #32]
}
 80063c2:	bf00      	nop
 80063c4:	bf00      	nop
 80063c6:	e7fd      	b.n	80063c4 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d103      	bne.n	80063d6 <xQueueReceiveFromISR+0x3c>
 80063ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d101      	bne.n	80063da <xQueueReceiveFromISR+0x40>
 80063d6:	2301      	movs	r3, #1
 80063d8:	e000      	b.n	80063dc <xQueueReceiveFromISR+0x42>
 80063da:	2300      	movs	r3, #0
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d10b      	bne.n	80063f8 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 80063e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063e4:	f383 8811 	msr	BASEPRI, r3
 80063e8:	f3bf 8f6f 	isb	sy
 80063ec:	f3bf 8f4f 	dsb	sy
 80063f0:	61fb      	str	r3, [r7, #28]
}
 80063f2:	bf00      	nop
 80063f4:	bf00      	nop
 80063f6:	e7fd      	b.n	80063f4 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80063f8:	f001 f936 	bl	8007668 <vPortValidateInterruptPriority>
	__asm volatile
 80063fc:	f3ef 8211 	mrs	r2, BASEPRI
 8006400:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006404:	f383 8811 	msr	BASEPRI, r3
 8006408:	f3bf 8f6f 	isb	sy
 800640c:	f3bf 8f4f 	dsb	sy
 8006410:	61ba      	str	r2, [r7, #24]
 8006412:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006414:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006416:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006418:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800641a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800641c:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800641e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006420:	2b00      	cmp	r3, #0
 8006422:	d02f      	beq.n	8006484 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006424:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006426:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800642a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800642e:	68b9      	ldr	r1, [r7, #8]
 8006430:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006432:	f000 f89e 	bl	8006572 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006436:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006438:	1e5a      	subs	r2, r3, #1
 800643a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800643c:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800643e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006442:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006446:	d112      	bne.n	800646e <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006448:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800644a:	691b      	ldr	r3, [r3, #16]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d016      	beq.n	800647e <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006450:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006452:	3310      	adds	r3, #16
 8006454:	4618      	mov	r0, r3
 8006456:	f000 fcc9 	bl	8006dec <xTaskRemoveFromEventList>
 800645a:	4603      	mov	r3, r0
 800645c:	2b00      	cmp	r3, #0
 800645e:	d00e      	beq.n	800647e <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d00b      	beq.n	800647e <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2201      	movs	r2, #1
 800646a:	601a      	str	r2, [r3, #0]
 800646c:	e007      	b.n	800647e <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800646e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006472:	3301      	adds	r3, #1
 8006474:	b2db      	uxtb	r3, r3
 8006476:	b25a      	sxtb	r2, r3
 8006478:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800647a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800647e:	2301      	movs	r3, #1
 8006480:	637b      	str	r3, [r7, #52]	@ 0x34
 8006482:	e001      	b.n	8006488 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8006484:	2300      	movs	r3, #0
 8006486:	637b      	str	r3, [r7, #52]	@ 0x34
 8006488:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800648a:	613b      	str	r3, [r7, #16]
	__asm volatile
 800648c:	693b      	ldr	r3, [r7, #16]
 800648e:	f383 8811 	msr	BASEPRI, r3
}
 8006492:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006494:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006496:	4618      	mov	r0, r3
 8006498:	3738      	adds	r7, #56	@ 0x38
 800649a:	46bd      	mov	sp, r7
 800649c:	bd80      	pop	{r7, pc}

0800649e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800649e:	b580      	push	{r7, lr}
 80064a0:	b086      	sub	sp, #24
 80064a2:	af00      	add	r7, sp, #0
 80064a4:	60f8      	str	r0, [r7, #12]
 80064a6:	60b9      	str	r1, [r7, #8]
 80064a8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80064aa:	2300      	movs	r3, #0
 80064ac:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064b2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d10d      	bne.n	80064d8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d14d      	bne.n	8006560 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	685b      	ldr	r3, [r3, #4]
 80064c8:	4618      	mov	r0, r3
 80064ca:	f000 fdcf 	bl	800706c <xTaskPriorityDisinherit>
 80064ce:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	2200      	movs	r2, #0
 80064d4:	605a      	str	r2, [r3, #4]
 80064d6:	e043      	b.n	8006560 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d119      	bne.n	8006512 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	6898      	ldr	r0, [r3, #8]
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064e6:	461a      	mov	r2, r3
 80064e8:	68b9      	ldr	r1, [r7, #8]
 80064ea:	f001 fb47 	bl	8007b7c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	689a      	ldr	r2, [r3, #8]
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064f6:	441a      	add	r2, r3
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	689a      	ldr	r2, [r3, #8]
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	685b      	ldr	r3, [r3, #4]
 8006504:	429a      	cmp	r2, r3
 8006506:	d32b      	bcc.n	8006560 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681a      	ldr	r2, [r3, #0]
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	609a      	str	r2, [r3, #8]
 8006510:	e026      	b.n	8006560 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	68d8      	ldr	r0, [r3, #12]
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800651a:	461a      	mov	r2, r3
 800651c:	68b9      	ldr	r1, [r7, #8]
 800651e:	f001 fb2d 	bl	8007b7c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	68da      	ldr	r2, [r3, #12]
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800652a:	425b      	negs	r3, r3
 800652c:	441a      	add	r2, r3
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	68da      	ldr	r2, [r3, #12]
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	429a      	cmp	r2, r3
 800653c:	d207      	bcs.n	800654e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	685a      	ldr	r2, [r3, #4]
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006546:	425b      	negs	r3, r3
 8006548:	441a      	add	r2, r3
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2b02      	cmp	r3, #2
 8006552:	d105      	bne.n	8006560 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006554:	693b      	ldr	r3, [r7, #16]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d002      	beq.n	8006560 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800655a:	693b      	ldr	r3, [r7, #16]
 800655c:	3b01      	subs	r3, #1
 800655e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006560:	693b      	ldr	r3, [r7, #16]
 8006562:	1c5a      	adds	r2, r3, #1
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8006568:	697b      	ldr	r3, [r7, #20]
}
 800656a:	4618      	mov	r0, r3
 800656c:	3718      	adds	r7, #24
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}

08006572 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006572:	b580      	push	{r7, lr}
 8006574:	b082      	sub	sp, #8
 8006576:	af00      	add	r7, sp, #0
 8006578:	6078      	str	r0, [r7, #4]
 800657a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006580:	2b00      	cmp	r3, #0
 8006582:	d018      	beq.n	80065b6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	68da      	ldr	r2, [r3, #12]
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800658c:	441a      	add	r2, r3
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	68da      	ldr	r2, [r3, #12]
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	685b      	ldr	r3, [r3, #4]
 800659a:	429a      	cmp	r2, r3
 800659c:	d303      	bcc.n	80065a6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681a      	ldr	r2, [r3, #0]
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	68d9      	ldr	r1, [r3, #12]
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065ae:	461a      	mov	r2, r3
 80065b0:	6838      	ldr	r0, [r7, #0]
 80065b2:	f001 fae3 	bl	8007b7c <memcpy>
	}
}
 80065b6:	bf00      	nop
 80065b8:	3708      	adds	r7, #8
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bd80      	pop	{r7, pc}
	...

080065c0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80065c0:	b480      	push	{r7}
 80065c2:	b085      	sub	sp, #20
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
 80065c8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80065ca:	2300      	movs	r3, #0
 80065cc:	60fb      	str	r3, [r7, #12]
 80065ce:	e014      	b.n	80065fa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80065d0:	4a0f      	ldr	r2, [pc, #60]	@ (8006610 <vQueueAddToRegistry+0x50>)
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d10b      	bne.n	80065f4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80065dc:	490c      	ldr	r1, [pc, #48]	@ (8006610 <vQueueAddToRegistry+0x50>)
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	683a      	ldr	r2, [r7, #0]
 80065e2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80065e6:	4a0a      	ldr	r2, [pc, #40]	@ (8006610 <vQueueAddToRegistry+0x50>)
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	00db      	lsls	r3, r3, #3
 80065ec:	4413      	add	r3, r2
 80065ee:	687a      	ldr	r2, [r7, #4]
 80065f0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80065f2:	e006      	b.n	8006602 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	3301      	adds	r3, #1
 80065f8:	60fb      	str	r3, [r7, #12]
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	2b07      	cmp	r3, #7
 80065fe:	d9e7      	bls.n	80065d0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006600:	bf00      	nop
 8006602:	bf00      	nop
 8006604:	3714      	adds	r7, #20
 8006606:	46bd      	mov	sp, r7
 8006608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660c:	4770      	bx	lr
 800660e:	bf00      	nop
 8006610:	20000510 	.word	0x20000510

08006614 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006614:	b580      	push	{r7, lr}
 8006616:	b08e      	sub	sp, #56	@ 0x38
 8006618:	af04      	add	r7, sp, #16
 800661a:	60f8      	str	r0, [r7, #12]
 800661c:	60b9      	str	r1, [r7, #8]
 800661e:	607a      	str	r2, [r7, #4]
 8006620:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006622:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006624:	2b00      	cmp	r3, #0
 8006626:	d10b      	bne.n	8006640 <xTaskCreateStatic+0x2c>
	__asm volatile
 8006628:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800662c:	f383 8811 	msr	BASEPRI, r3
 8006630:	f3bf 8f6f 	isb	sy
 8006634:	f3bf 8f4f 	dsb	sy
 8006638:	623b      	str	r3, [r7, #32]
}
 800663a:	bf00      	nop
 800663c:	bf00      	nop
 800663e:	e7fd      	b.n	800663c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006640:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006642:	2b00      	cmp	r3, #0
 8006644:	d10b      	bne.n	800665e <xTaskCreateStatic+0x4a>
	__asm volatile
 8006646:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800664a:	f383 8811 	msr	BASEPRI, r3
 800664e:	f3bf 8f6f 	isb	sy
 8006652:	f3bf 8f4f 	dsb	sy
 8006656:	61fb      	str	r3, [r7, #28]
}
 8006658:	bf00      	nop
 800665a:	bf00      	nop
 800665c:	e7fd      	b.n	800665a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800665e:	2354      	movs	r3, #84	@ 0x54
 8006660:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006662:	693b      	ldr	r3, [r7, #16]
 8006664:	2b54      	cmp	r3, #84	@ 0x54
 8006666:	d00b      	beq.n	8006680 <xTaskCreateStatic+0x6c>
	__asm volatile
 8006668:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800666c:	f383 8811 	msr	BASEPRI, r3
 8006670:	f3bf 8f6f 	isb	sy
 8006674:	f3bf 8f4f 	dsb	sy
 8006678:	61bb      	str	r3, [r7, #24]
}
 800667a:	bf00      	nop
 800667c:	bf00      	nop
 800667e:	e7fd      	b.n	800667c <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006680:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006682:	2b00      	cmp	r3, #0
 8006684:	d01e      	beq.n	80066c4 <xTaskCreateStatic+0xb0>
 8006686:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006688:	2b00      	cmp	r3, #0
 800668a:	d01b      	beq.n	80066c4 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800668c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800668e:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006692:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006694:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006698:	2202      	movs	r2, #2
 800669a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800669e:	2300      	movs	r3, #0
 80066a0:	9303      	str	r3, [sp, #12]
 80066a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066a4:	9302      	str	r3, [sp, #8]
 80066a6:	f107 0314 	add.w	r3, r7, #20
 80066aa:	9301      	str	r3, [sp, #4]
 80066ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066ae:	9300      	str	r3, [sp, #0]
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	687a      	ldr	r2, [r7, #4]
 80066b4:	68b9      	ldr	r1, [r7, #8]
 80066b6:	68f8      	ldr	r0, [r7, #12]
 80066b8:	f000 f850 	bl	800675c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80066bc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80066be:	f000 f8cd 	bl	800685c <prvAddNewTaskToReadyList>
 80066c2:	e001      	b.n	80066c8 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 80066c4:	2300      	movs	r3, #0
 80066c6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80066c8:	697b      	ldr	r3, [r7, #20]
	}
 80066ca:	4618      	mov	r0, r3
 80066cc:	3728      	adds	r7, #40	@ 0x28
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}

080066d2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80066d2:	b580      	push	{r7, lr}
 80066d4:	b08c      	sub	sp, #48	@ 0x30
 80066d6:	af04      	add	r7, sp, #16
 80066d8:	60f8      	str	r0, [r7, #12]
 80066da:	60b9      	str	r1, [r7, #8]
 80066dc:	603b      	str	r3, [r7, #0]
 80066de:	4613      	mov	r3, r2
 80066e0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80066e2:	88fb      	ldrh	r3, [r7, #6]
 80066e4:	009b      	lsls	r3, r3, #2
 80066e6:	4618      	mov	r0, r3
 80066e8:	f001 f800 	bl	80076ec <pvPortMalloc>
 80066ec:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80066ee:	697b      	ldr	r3, [r7, #20]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d00e      	beq.n	8006712 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80066f4:	2054      	movs	r0, #84	@ 0x54
 80066f6:	f000 fff9 	bl	80076ec <pvPortMalloc>
 80066fa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80066fc:	69fb      	ldr	r3, [r7, #28]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d003      	beq.n	800670a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006702:	69fb      	ldr	r3, [r7, #28]
 8006704:	697a      	ldr	r2, [r7, #20]
 8006706:	631a      	str	r2, [r3, #48]	@ 0x30
 8006708:	e005      	b.n	8006716 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800670a:	6978      	ldr	r0, [r7, #20]
 800670c:	f001 f8b6 	bl	800787c <vPortFree>
 8006710:	e001      	b.n	8006716 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006712:	2300      	movs	r3, #0
 8006714:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006716:	69fb      	ldr	r3, [r7, #28]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d017      	beq.n	800674c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800671c:	69fb      	ldr	r3, [r7, #28]
 800671e:	2200      	movs	r2, #0
 8006720:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006724:	88fa      	ldrh	r2, [r7, #6]
 8006726:	2300      	movs	r3, #0
 8006728:	9303      	str	r3, [sp, #12]
 800672a:	69fb      	ldr	r3, [r7, #28]
 800672c:	9302      	str	r3, [sp, #8]
 800672e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006730:	9301      	str	r3, [sp, #4]
 8006732:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006734:	9300      	str	r3, [sp, #0]
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	68b9      	ldr	r1, [r7, #8]
 800673a:	68f8      	ldr	r0, [r7, #12]
 800673c:	f000 f80e 	bl	800675c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006740:	69f8      	ldr	r0, [r7, #28]
 8006742:	f000 f88b 	bl	800685c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006746:	2301      	movs	r3, #1
 8006748:	61bb      	str	r3, [r7, #24]
 800674a:	e002      	b.n	8006752 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800674c:	f04f 33ff 	mov.w	r3, #4294967295
 8006750:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006752:	69bb      	ldr	r3, [r7, #24]
	}
 8006754:	4618      	mov	r0, r3
 8006756:	3720      	adds	r7, #32
 8006758:	46bd      	mov	sp, r7
 800675a:	bd80      	pop	{r7, pc}

0800675c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b088      	sub	sp, #32
 8006760:	af00      	add	r7, sp, #0
 8006762:	60f8      	str	r0, [r7, #12]
 8006764:	60b9      	str	r1, [r7, #8]
 8006766:	607a      	str	r2, [r7, #4]
 8006768:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800676a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800676c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006774:	3b01      	subs	r3, #1
 8006776:	009b      	lsls	r3, r3, #2
 8006778:	4413      	add	r3, r2
 800677a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800677c:	69bb      	ldr	r3, [r7, #24]
 800677e:	f023 0307 	bic.w	r3, r3, #7
 8006782:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006784:	69bb      	ldr	r3, [r7, #24]
 8006786:	f003 0307 	and.w	r3, r3, #7
 800678a:	2b00      	cmp	r3, #0
 800678c:	d00b      	beq.n	80067a6 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800678e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006792:	f383 8811 	msr	BASEPRI, r3
 8006796:	f3bf 8f6f 	isb	sy
 800679a:	f3bf 8f4f 	dsb	sy
 800679e:	617b      	str	r3, [r7, #20]
}
 80067a0:	bf00      	nop
 80067a2:	bf00      	nop
 80067a4:	e7fd      	b.n	80067a2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80067a6:	2300      	movs	r3, #0
 80067a8:	61fb      	str	r3, [r7, #28]
 80067aa:	e012      	b.n	80067d2 <prvInitialiseNewTask+0x76>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80067ac:	68ba      	ldr	r2, [r7, #8]
 80067ae:	69fb      	ldr	r3, [r7, #28]
 80067b0:	4413      	add	r3, r2
 80067b2:	7819      	ldrb	r1, [r3, #0]
 80067b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80067b6:	69fb      	ldr	r3, [r7, #28]
 80067b8:	4413      	add	r3, r2
 80067ba:	3334      	adds	r3, #52	@ 0x34
 80067bc:	460a      	mov	r2, r1
 80067be:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80067c0:	68ba      	ldr	r2, [r7, #8]
 80067c2:	69fb      	ldr	r3, [r7, #28]
 80067c4:	4413      	add	r3, r2
 80067c6:	781b      	ldrb	r3, [r3, #0]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d006      	beq.n	80067da <prvInitialiseNewTask+0x7e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80067cc:	69fb      	ldr	r3, [r7, #28]
 80067ce:	3301      	adds	r3, #1
 80067d0:	61fb      	str	r3, [r7, #28]
 80067d2:	69fb      	ldr	r3, [r7, #28]
 80067d4:	2b0f      	cmp	r3, #15
 80067d6:	d9e9      	bls.n	80067ac <prvInitialiseNewTask+0x50>
 80067d8:	e000      	b.n	80067dc <prvInitialiseNewTask+0x80>
		{
			break;
 80067da:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80067dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067de:	2200      	movs	r2, #0
 80067e0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80067e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067e6:	2b06      	cmp	r3, #6
 80067e8:	d901      	bls.n	80067ee <prvInitialiseNewTask+0x92>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80067ea:	2306      	movs	r3, #6
 80067ec:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80067ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067f0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80067f2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80067f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067f6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80067f8:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80067fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067fc:	2200      	movs	r2, #0
 80067fe:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006800:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006802:	3304      	adds	r3, #4
 8006804:	4618      	mov	r0, r3
 8006806:	f7ff fbd1 	bl	8005fac <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800680a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800680c:	3318      	adds	r3, #24
 800680e:	4618      	mov	r0, r3
 8006810:	f7ff fbcc 	bl	8005fac <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006814:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006816:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006818:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800681a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800681c:	f1c3 0207 	rsb	r2, r3, #7
 8006820:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006822:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006824:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006826:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006828:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800682a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800682c:	2200      	movs	r2, #0
 800682e:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006830:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006832:	2200      	movs	r2, #0
 8006834:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006838:	683a      	ldr	r2, [r7, #0]
 800683a:	68f9      	ldr	r1, [r7, #12]
 800683c:	69b8      	ldr	r0, [r7, #24]
 800683e:	f000 fd03 	bl	8007248 <pxPortInitialiseStack>
 8006842:	4602      	mov	r2, r0
 8006844:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006846:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8006848:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800684a:	2b00      	cmp	r3, #0
 800684c:	d002      	beq.n	8006854 <prvInitialiseNewTask+0xf8>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800684e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006850:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006852:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006854:	bf00      	nop
 8006856:	3720      	adds	r7, #32
 8006858:	46bd      	mov	sp, r7
 800685a:	bd80      	pop	{r7, pc}

0800685c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b082      	sub	sp, #8
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006864:	f000 fe20 	bl	80074a8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006868:	4b2a      	ldr	r3, [pc, #168]	@ (8006914 <prvAddNewTaskToReadyList+0xb8>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	3301      	adds	r3, #1
 800686e:	4a29      	ldr	r2, [pc, #164]	@ (8006914 <prvAddNewTaskToReadyList+0xb8>)
 8006870:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006872:	4b29      	ldr	r3, [pc, #164]	@ (8006918 <prvAddNewTaskToReadyList+0xbc>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d109      	bne.n	800688e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800687a:	4a27      	ldr	r2, [pc, #156]	@ (8006918 <prvAddNewTaskToReadyList+0xbc>)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006880:	4b24      	ldr	r3, [pc, #144]	@ (8006914 <prvAddNewTaskToReadyList+0xb8>)
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	2b01      	cmp	r3, #1
 8006886:	d110      	bne.n	80068aa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006888:	f000 fb2c 	bl	8006ee4 <prvInitialiseTaskLists>
 800688c:	e00d      	b.n	80068aa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800688e:	4b23      	ldr	r3, [pc, #140]	@ (800691c <prvAddNewTaskToReadyList+0xc0>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d109      	bne.n	80068aa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006896:	4b20      	ldr	r3, [pc, #128]	@ (8006918 <prvAddNewTaskToReadyList+0xbc>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068a0:	429a      	cmp	r2, r3
 80068a2:	d802      	bhi.n	80068aa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80068a4:	4a1c      	ldr	r2, [pc, #112]	@ (8006918 <prvAddNewTaskToReadyList+0xbc>)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80068aa:	4b1d      	ldr	r3, [pc, #116]	@ (8006920 <prvAddNewTaskToReadyList+0xc4>)
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	3301      	adds	r3, #1
 80068b0:	4a1b      	ldr	r2, [pc, #108]	@ (8006920 <prvAddNewTaskToReadyList+0xc4>)
 80068b2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068b8:	2201      	movs	r2, #1
 80068ba:	409a      	lsls	r2, r3
 80068bc:	4b19      	ldr	r3, [pc, #100]	@ (8006924 <prvAddNewTaskToReadyList+0xc8>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4313      	orrs	r3, r2
 80068c2:	4a18      	ldr	r2, [pc, #96]	@ (8006924 <prvAddNewTaskToReadyList+0xc8>)
 80068c4:	6013      	str	r3, [r2, #0]
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068ca:	4613      	mov	r3, r2
 80068cc:	009b      	lsls	r3, r3, #2
 80068ce:	4413      	add	r3, r2
 80068d0:	009b      	lsls	r3, r3, #2
 80068d2:	4a15      	ldr	r2, [pc, #84]	@ (8006928 <prvAddNewTaskToReadyList+0xcc>)
 80068d4:	441a      	add	r2, r3
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	3304      	adds	r3, #4
 80068da:	4619      	mov	r1, r3
 80068dc:	4610      	mov	r0, r2
 80068de:	f7ff fb72 	bl	8005fc6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80068e2:	f000 fe13 	bl	800750c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80068e6:	4b0d      	ldr	r3, [pc, #52]	@ (800691c <prvAddNewTaskToReadyList+0xc0>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d00e      	beq.n	800690c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80068ee:	4b0a      	ldr	r3, [pc, #40]	@ (8006918 <prvAddNewTaskToReadyList+0xbc>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068f8:	429a      	cmp	r2, r3
 80068fa:	d207      	bcs.n	800690c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80068fc:	4b0b      	ldr	r3, [pc, #44]	@ (800692c <prvAddNewTaskToReadyList+0xd0>)
 80068fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006902:	601a      	str	r2, [r3, #0]
 8006904:	f3bf 8f4f 	dsb	sy
 8006908:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800690c:	bf00      	nop
 800690e:	3708      	adds	r7, #8
 8006910:	46bd      	mov	sp, r7
 8006912:	bd80      	pop	{r7, pc}
 8006914:	20000650 	.word	0x20000650
 8006918:	20000550 	.word	0x20000550
 800691c:	2000065c 	.word	0x2000065c
 8006920:	2000066c 	.word	0x2000066c
 8006924:	20000658 	.word	0x20000658
 8006928:	20000554 	.word	0x20000554
 800692c:	e000ed04 	.word	0xe000ed04

08006930 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006930:	b580      	push	{r7, lr}
 8006932:	b084      	sub	sp, #16
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006938:	2300      	movs	r3, #0
 800693a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d018      	beq.n	8006974 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006942:	4b14      	ldr	r3, [pc, #80]	@ (8006994 <vTaskDelay+0x64>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d00b      	beq.n	8006962 <vTaskDelay+0x32>
	__asm volatile
 800694a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800694e:	f383 8811 	msr	BASEPRI, r3
 8006952:	f3bf 8f6f 	isb	sy
 8006956:	f3bf 8f4f 	dsb	sy
 800695a:	60bb      	str	r3, [r7, #8]
}
 800695c:	bf00      	nop
 800695e:	bf00      	nop
 8006960:	e7fd      	b.n	800695e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006962:	f000 f87d 	bl	8006a60 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006966:	2100      	movs	r1, #0
 8006968:	6878      	ldr	r0, [r7, #4]
 800696a:	f000 fc07 	bl	800717c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800696e:	f000 f885 	bl	8006a7c <xTaskResumeAll>
 8006972:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d107      	bne.n	800698a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800697a:	4b07      	ldr	r3, [pc, #28]	@ (8006998 <vTaskDelay+0x68>)
 800697c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006980:	601a      	str	r2, [r3, #0]
 8006982:	f3bf 8f4f 	dsb	sy
 8006986:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800698a:	bf00      	nop
 800698c:	3710      	adds	r7, #16
 800698e:	46bd      	mov	sp, r7
 8006990:	bd80      	pop	{r7, pc}
 8006992:	bf00      	nop
 8006994:	20000678 	.word	0x20000678
 8006998:	e000ed04 	.word	0xe000ed04

0800699c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b08a      	sub	sp, #40	@ 0x28
 80069a0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80069a2:	2300      	movs	r3, #0
 80069a4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80069a6:	2300      	movs	r3, #0
 80069a8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80069aa:	463a      	mov	r2, r7
 80069ac:	1d39      	adds	r1, r7, #4
 80069ae:	f107 0308 	add.w	r3, r7, #8
 80069b2:	4618      	mov	r0, r3
 80069b4:	f7fa f8c4 	bl	8000b40 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80069b8:	6839      	ldr	r1, [r7, #0]
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	68ba      	ldr	r2, [r7, #8]
 80069be:	9202      	str	r2, [sp, #8]
 80069c0:	9301      	str	r3, [sp, #4]
 80069c2:	2300      	movs	r3, #0
 80069c4:	9300      	str	r3, [sp, #0]
 80069c6:	2300      	movs	r3, #0
 80069c8:	460a      	mov	r2, r1
 80069ca:	491f      	ldr	r1, [pc, #124]	@ (8006a48 <vTaskStartScheduler+0xac>)
 80069cc:	481f      	ldr	r0, [pc, #124]	@ (8006a4c <vTaskStartScheduler+0xb0>)
 80069ce:	f7ff fe21 	bl	8006614 <xTaskCreateStatic>
 80069d2:	4603      	mov	r3, r0
 80069d4:	4a1e      	ldr	r2, [pc, #120]	@ (8006a50 <vTaskStartScheduler+0xb4>)
 80069d6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80069d8:	4b1d      	ldr	r3, [pc, #116]	@ (8006a50 <vTaskStartScheduler+0xb4>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d002      	beq.n	80069e6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80069e0:	2301      	movs	r3, #1
 80069e2:	617b      	str	r3, [r7, #20]
 80069e4:	e001      	b.n	80069ea <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80069e6:	2300      	movs	r3, #0
 80069e8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80069ea:	697b      	ldr	r3, [r7, #20]
 80069ec:	2b01      	cmp	r3, #1
 80069ee:	d116      	bne.n	8006a1e <vTaskStartScheduler+0x82>
	__asm volatile
 80069f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069f4:	f383 8811 	msr	BASEPRI, r3
 80069f8:	f3bf 8f6f 	isb	sy
 80069fc:	f3bf 8f4f 	dsb	sy
 8006a00:	613b      	str	r3, [r7, #16]
}
 8006a02:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006a04:	4b13      	ldr	r3, [pc, #76]	@ (8006a54 <vTaskStartScheduler+0xb8>)
 8006a06:	f04f 32ff 	mov.w	r2, #4294967295
 8006a0a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006a0c:	4b12      	ldr	r3, [pc, #72]	@ (8006a58 <vTaskStartScheduler+0xbc>)
 8006a0e:	2201      	movs	r2, #1
 8006a10:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8006a12:	4b12      	ldr	r3, [pc, #72]	@ (8006a5c <vTaskStartScheduler+0xc0>)
 8006a14:	2200      	movs	r2, #0
 8006a16:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006a18:	f000 fca2 	bl	8007360 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006a1c:	e00f      	b.n	8006a3e <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a24:	d10b      	bne.n	8006a3e <vTaskStartScheduler+0xa2>
	__asm volatile
 8006a26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a2a:	f383 8811 	msr	BASEPRI, r3
 8006a2e:	f3bf 8f6f 	isb	sy
 8006a32:	f3bf 8f4f 	dsb	sy
 8006a36:	60fb      	str	r3, [r7, #12]
}
 8006a38:	bf00      	nop
 8006a3a:	bf00      	nop
 8006a3c:	e7fd      	b.n	8006a3a <vTaskStartScheduler+0x9e>
}
 8006a3e:	bf00      	nop
 8006a40:	3718      	adds	r7, #24
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bd80      	pop	{r7, pc}
 8006a46:	bf00      	nop
 8006a48:	0800851c 	.word	0x0800851c
 8006a4c:	08006eb5 	.word	0x08006eb5
 8006a50:	20000674 	.word	0x20000674
 8006a54:	20000670 	.word	0x20000670
 8006a58:	2000065c 	.word	0x2000065c
 8006a5c:	20000654 	.word	0x20000654

08006a60 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006a60:	b480      	push	{r7}
 8006a62:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006a64:	4b04      	ldr	r3, [pc, #16]	@ (8006a78 <vTaskSuspendAll+0x18>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	3301      	adds	r3, #1
 8006a6a:	4a03      	ldr	r2, [pc, #12]	@ (8006a78 <vTaskSuspendAll+0x18>)
 8006a6c:	6013      	str	r3, [r2, #0]
}
 8006a6e:	bf00      	nop
 8006a70:	46bd      	mov	sp, r7
 8006a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a76:	4770      	bx	lr
 8006a78:	20000678 	.word	0x20000678

08006a7c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b084      	sub	sp, #16
 8006a80:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006a82:	2300      	movs	r3, #0
 8006a84:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006a86:	2300      	movs	r3, #0
 8006a88:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006a8a:	4b42      	ldr	r3, [pc, #264]	@ (8006b94 <xTaskResumeAll+0x118>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d10b      	bne.n	8006aaa <xTaskResumeAll+0x2e>
	__asm volatile
 8006a92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a96:	f383 8811 	msr	BASEPRI, r3
 8006a9a:	f3bf 8f6f 	isb	sy
 8006a9e:	f3bf 8f4f 	dsb	sy
 8006aa2:	603b      	str	r3, [r7, #0]
}
 8006aa4:	bf00      	nop
 8006aa6:	bf00      	nop
 8006aa8:	e7fd      	b.n	8006aa6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006aaa:	f000 fcfd 	bl	80074a8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006aae:	4b39      	ldr	r3, [pc, #228]	@ (8006b94 <xTaskResumeAll+0x118>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	3b01      	subs	r3, #1
 8006ab4:	4a37      	ldr	r2, [pc, #220]	@ (8006b94 <xTaskResumeAll+0x118>)
 8006ab6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ab8:	4b36      	ldr	r3, [pc, #216]	@ (8006b94 <xTaskResumeAll+0x118>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d161      	bne.n	8006b84 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006ac0:	4b35      	ldr	r3, [pc, #212]	@ (8006b98 <xTaskResumeAll+0x11c>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d05d      	beq.n	8006b84 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006ac8:	e02e      	b.n	8006b28 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006aca:	4b34      	ldr	r3, [pc, #208]	@ (8006b9c <xTaskResumeAll+0x120>)
 8006acc:	68db      	ldr	r3, [r3, #12]
 8006ace:	68db      	ldr	r3, [r3, #12]
 8006ad0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	3318      	adds	r3, #24
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	f7ff fad2 	bl	8006080 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	3304      	adds	r3, #4
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	f7ff facd 	bl	8006080 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006aea:	2201      	movs	r2, #1
 8006aec:	409a      	lsls	r2, r3
 8006aee:	4b2c      	ldr	r3, [pc, #176]	@ (8006ba0 <xTaskResumeAll+0x124>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4313      	orrs	r3, r2
 8006af4:	4a2a      	ldr	r2, [pc, #168]	@ (8006ba0 <xTaskResumeAll+0x124>)
 8006af6:	6013      	str	r3, [r2, #0]
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006afc:	4613      	mov	r3, r2
 8006afe:	009b      	lsls	r3, r3, #2
 8006b00:	4413      	add	r3, r2
 8006b02:	009b      	lsls	r3, r3, #2
 8006b04:	4a27      	ldr	r2, [pc, #156]	@ (8006ba4 <xTaskResumeAll+0x128>)
 8006b06:	441a      	add	r2, r3
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	3304      	adds	r3, #4
 8006b0c:	4619      	mov	r1, r3
 8006b0e:	4610      	mov	r0, r2
 8006b10:	f7ff fa59 	bl	8005fc6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b18:	4b23      	ldr	r3, [pc, #140]	@ (8006ba8 <xTaskResumeAll+0x12c>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b1e:	429a      	cmp	r2, r3
 8006b20:	d302      	bcc.n	8006b28 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006b22:	4b22      	ldr	r3, [pc, #136]	@ (8006bac <xTaskResumeAll+0x130>)
 8006b24:	2201      	movs	r2, #1
 8006b26:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006b28:	4b1c      	ldr	r3, [pc, #112]	@ (8006b9c <xTaskResumeAll+0x120>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d1cc      	bne.n	8006aca <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d001      	beq.n	8006b3a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006b36:	f000 fa73 	bl	8007020 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006b3a:	4b1d      	ldr	r3, [pc, #116]	@ (8006bb0 <xTaskResumeAll+0x134>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d010      	beq.n	8006b68 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006b46:	f000 f837 	bl	8006bb8 <xTaskIncrementTick>
 8006b4a:	4603      	mov	r3, r0
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d002      	beq.n	8006b56 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006b50:	4b16      	ldr	r3, [pc, #88]	@ (8006bac <xTaskResumeAll+0x130>)
 8006b52:	2201      	movs	r2, #1
 8006b54:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	3b01      	subs	r3, #1
 8006b5a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d1f1      	bne.n	8006b46 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8006b62:	4b13      	ldr	r3, [pc, #76]	@ (8006bb0 <xTaskResumeAll+0x134>)
 8006b64:	2200      	movs	r2, #0
 8006b66:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006b68:	4b10      	ldr	r3, [pc, #64]	@ (8006bac <xTaskResumeAll+0x130>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d009      	beq.n	8006b84 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006b70:	2301      	movs	r3, #1
 8006b72:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006b74:	4b0f      	ldr	r3, [pc, #60]	@ (8006bb4 <xTaskResumeAll+0x138>)
 8006b76:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b7a:	601a      	str	r2, [r3, #0]
 8006b7c:	f3bf 8f4f 	dsb	sy
 8006b80:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006b84:	f000 fcc2 	bl	800750c <vPortExitCritical>

	return xAlreadyYielded;
 8006b88:	68bb      	ldr	r3, [r7, #8]
}
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	3710      	adds	r7, #16
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bd80      	pop	{r7, pc}
 8006b92:	bf00      	nop
 8006b94:	20000678 	.word	0x20000678
 8006b98:	20000650 	.word	0x20000650
 8006b9c:	20000610 	.word	0x20000610
 8006ba0:	20000658 	.word	0x20000658
 8006ba4:	20000554 	.word	0x20000554
 8006ba8:	20000550 	.word	0x20000550
 8006bac:	20000664 	.word	0x20000664
 8006bb0:	20000660 	.word	0x20000660
 8006bb4:	e000ed04 	.word	0xe000ed04

08006bb8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b086      	sub	sp, #24
 8006bbc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006bc2:	4b51      	ldr	r3, [pc, #324]	@ (8006d08 <xTaskIncrementTick+0x150>)
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	f040 808e 	bne.w	8006ce8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006bcc:	4b4f      	ldr	r3, [pc, #316]	@ (8006d0c <xTaskIncrementTick+0x154>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	3301      	adds	r3, #1
 8006bd2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006bd4:	4a4d      	ldr	r2, [pc, #308]	@ (8006d0c <xTaskIncrementTick+0x154>)
 8006bd6:	693b      	ldr	r3, [r7, #16]
 8006bd8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006bda:	693b      	ldr	r3, [r7, #16]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d121      	bne.n	8006c24 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006be0:	4b4b      	ldr	r3, [pc, #300]	@ (8006d10 <xTaskIncrementTick+0x158>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d00b      	beq.n	8006c02 <xTaskIncrementTick+0x4a>
	__asm volatile
 8006bea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bee:	f383 8811 	msr	BASEPRI, r3
 8006bf2:	f3bf 8f6f 	isb	sy
 8006bf6:	f3bf 8f4f 	dsb	sy
 8006bfa:	603b      	str	r3, [r7, #0]
}
 8006bfc:	bf00      	nop
 8006bfe:	bf00      	nop
 8006c00:	e7fd      	b.n	8006bfe <xTaskIncrementTick+0x46>
 8006c02:	4b43      	ldr	r3, [pc, #268]	@ (8006d10 <xTaskIncrementTick+0x158>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	60fb      	str	r3, [r7, #12]
 8006c08:	4b42      	ldr	r3, [pc, #264]	@ (8006d14 <xTaskIncrementTick+0x15c>)
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4a40      	ldr	r2, [pc, #256]	@ (8006d10 <xTaskIncrementTick+0x158>)
 8006c0e:	6013      	str	r3, [r2, #0]
 8006c10:	4a40      	ldr	r2, [pc, #256]	@ (8006d14 <xTaskIncrementTick+0x15c>)
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	6013      	str	r3, [r2, #0]
 8006c16:	4b40      	ldr	r3, [pc, #256]	@ (8006d18 <xTaskIncrementTick+0x160>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	3301      	adds	r3, #1
 8006c1c:	4a3e      	ldr	r2, [pc, #248]	@ (8006d18 <xTaskIncrementTick+0x160>)
 8006c1e:	6013      	str	r3, [r2, #0]
 8006c20:	f000 f9fe 	bl	8007020 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006c24:	4b3d      	ldr	r3, [pc, #244]	@ (8006d1c <xTaskIncrementTick+0x164>)
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	693a      	ldr	r2, [r7, #16]
 8006c2a:	429a      	cmp	r2, r3
 8006c2c:	d34d      	bcc.n	8006cca <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006c2e:	4b38      	ldr	r3, [pc, #224]	@ (8006d10 <xTaskIncrementTick+0x158>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d101      	bne.n	8006c3c <xTaskIncrementTick+0x84>
 8006c38:	2301      	movs	r3, #1
 8006c3a:	e000      	b.n	8006c3e <xTaskIncrementTick+0x86>
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d004      	beq.n	8006c4c <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c42:	4b36      	ldr	r3, [pc, #216]	@ (8006d1c <xTaskIncrementTick+0x164>)
 8006c44:	f04f 32ff 	mov.w	r2, #4294967295
 8006c48:	601a      	str	r2, [r3, #0]
					break;
 8006c4a:	e03e      	b.n	8006cca <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006c4c:	4b30      	ldr	r3, [pc, #192]	@ (8006d10 <xTaskIncrementTick+0x158>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	68db      	ldr	r3, [r3, #12]
 8006c52:	68db      	ldr	r3, [r3, #12]
 8006c54:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	685b      	ldr	r3, [r3, #4]
 8006c5a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006c5c:	693a      	ldr	r2, [r7, #16]
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	429a      	cmp	r2, r3
 8006c62:	d203      	bcs.n	8006c6c <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006c64:	4a2d      	ldr	r2, [pc, #180]	@ (8006d1c <xTaskIncrementTick+0x164>)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6013      	str	r3, [r2, #0]
						break;
 8006c6a:	e02e      	b.n	8006cca <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	3304      	adds	r3, #4
 8006c70:	4618      	mov	r0, r3
 8006c72:	f7ff fa05 	bl	8006080 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d004      	beq.n	8006c88 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006c7e:	68bb      	ldr	r3, [r7, #8]
 8006c80:	3318      	adds	r3, #24
 8006c82:	4618      	mov	r0, r3
 8006c84:	f7ff f9fc 	bl	8006080 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c8c:	2201      	movs	r2, #1
 8006c8e:	409a      	lsls	r2, r3
 8006c90:	4b23      	ldr	r3, [pc, #140]	@ (8006d20 <xTaskIncrementTick+0x168>)
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	4313      	orrs	r3, r2
 8006c96:	4a22      	ldr	r2, [pc, #136]	@ (8006d20 <xTaskIncrementTick+0x168>)
 8006c98:	6013      	str	r3, [r2, #0]
 8006c9a:	68bb      	ldr	r3, [r7, #8]
 8006c9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c9e:	4613      	mov	r3, r2
 8006ca0:	009b      	lsls	r3, r3, #2
 8006ca2:	4413      	add	r3, r2
 8006ca4:	009b      	lsls	r3, r3, #2
 8006ca6:	4a1f      	ldr	r2, [pc, #124]	@ (8006d24 <xTaskIncrementTick+0x16c>)
 8006ca8:	441a      	add	r2, r3
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	3304      	adds	r3, #4
 8006cae:	4619      	mov	r1, r3
 8006cb0:	4610      	mov	r0, r2
 8006cb2:	f7ff f988 	bl	8005fc6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006cb6:	68bb      	ldr	r3, [r7, #8]
 8006cb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cba:	4b1b      	ldr	r3, [pc, #108]	@ (8006d28 <xTaskIncrementTick+0x170>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cc0:	429a      	cmp	r2, r3
 8006cc2:	d3b4      	bcc.n	8006c2e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006cc8:	e7b1      	b.n	8006c2e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006cca:	4b17      	ldr	r3, [pc, #92]	@ (8006d28 <xTaskIncrementTick+0x170>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cd0:	4914      	ldr	r1, [pc, #80]	@ (8006d24 <xTaskIncrementTick+0x16c>)
 8006cd2:	4613      	mov	r3, r2
 8006cd4:	009b      	lsls	r3, r3, #2
 8006cd6:	4413      	add	r3, r2
 8006cd8:	009b      	lsls	r3, r3, #2
 8006cda:	440b      	add	r3, r1
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	2b01      	cmp	r3, #1
 8006ce0:	d907      	bls.n	8006cf2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	617b      	str	r3, [r7, #20]
 8006ce6:	e004      	b.n	8006cf2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006ce8:	4b10      	ldr	r3, [pc, #64]	@ (8006d2c <xTaskIncrementTick+0x174>)
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	3301      	adds	r3, #1
 8006cee:	4a0f      	ldr	r2, [pc, #60]	@ (8006d2c <xTaskIncrementTick+0x174>)
 8006cf0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006cf2:	4b0f      	ldr	r3, [pc, #60]	@ (8006d30 <xTaskIncrementTick+0x178>)
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d001      	beq.n	8006cfe <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8006cfa:	2301      	movs	r3, #1
 8006cfc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006cfe:	697b      	ldr	r3, [r7, #20]
}
 8006d00:	4618      	mov	r0, r3
 8006d02:	3718      	adds	r7, #24
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bd80      	pop	{r7, pc}
 8006d08:	20000678 	.word	0x20000678
 8006d0c:	20000654 	.word	0x20000654
 8006d10:	20000608 	.word	0x20000608
 8006d14:	2000060c 	.word	0x2000060c
 8006d18:	20000668 	.word	0x20000668
 8006d1c:	20000670 	.word	0x20000670
 8006d20:	20000658 	.word	0x20000658
 8006d24:	20000554 	.word	0x20000554
 8006d28:	20000550 	.word	0x20000550
 8006d2c:	20000660 	.word	0x20000660
 8006d30:	20000664 	.word	0x20000664

08006d34 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006d34:	b480      	push	{r7}
 8006d36:	b087      	sub	sp, #28
 8006d38:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006d3a:	4b27      	ldr	r3, [pc, #156]	@ (8006dd8 <vTaskSwitchContext+0xa4>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d003      	beq.n	8006d4a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006d42:	4b26      	ldr	r3, [pc, #152]	@ (8006ddc <vTaskSwitchContext+0xa8>)
 8006d44:	2201      	movs	r2, #1
 8006d46:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006d48:	e040      	b.n	8006dcc <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8006d4a:	4b24      	ldr	r3, [pc, #144]	@ (8006ddc <vTaskSwitchContext+0xa8>)
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006d50:	4b23      	ldr	r3, [pc, #140]	@ (8006de0 <vTaskSwitchContext+0xac>)
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	fab3 f383 	clz	r3, r3
 8006d5c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006d5e:	7afb      	ldrb	r3, [r7, #11]
 8006d60:	f1c3 031f 	rsb	r3, r3, #31
 8006d64:	617b      	str	r3, [r7, #20]
 8006d66:	491f      	ldr	r1, [pc, #124]	@ (8006de4 <vTaskSwitchContext+0xb0>)
 8006d68:	697a      	ldr	r2, [r7, #20]
 8006d6a:	4613      	mov	r3, r2
 8006d6c:	009b      	lsls	r3, r3, #2
 8006d6e:	4413      	add	r3, r2
 8006d70:	009b      	lsls	r3, r3, #2
 8006d72:	440b      	add	r3, r1
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d10b      	bne.n	8006d92 <vTaskSwitchContext+0x5e>
	__asm volatile
 8006d7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d7e:	f383 8811 	msr	BASEPRI, r3
 8006d82:	f3bf 8f6f 	isb	sy
 8006d86:	f3bf 8f4f 	dsb	sy
 8006d8a:	607b      	str	r3, [r7, #4]
}
 8006d8c:	bf00      	nop
 8006d8e:	bf00      	nop
 8006d90:	e7fd      	b.n	8006d8e <vTaskSwitchContext+0x5a>
 8006d92:	697a      	ldr	r2, [r7, #20]
 8006d94:	4613      	mov	r3, r2
 8006d96:	009b      	lsls	r3, r3, #2
 8006d98:	4413      	add	r3, r2
 8006d9a:	009b      	lsls	r3, r3, #2
 8006d9c:	4a11      	ldr	r2, [pc, #68]	@ (8006de4 <vTaskSwitchContext+0xb0>)
 8006d9e:	4413      	add	r3, r2
 8006da0:	613b      	str	r3, [r7, #16]
 8006da2:	693b      	ldr	r3, [r7, #16]
 8006da4:	685b      	ldr	r3, [r3, #4]
 8006da6:	685a      	ldr	r2, [r3, #4]
 8006da8:	693b      	ldr	r3, [r7, #16]
 8006daa:	605a      	str	r2, [r3, #4]
 8006dac:	693b      	ldr	r3, [r7, #16]
 8006dae:	685a      	ldr	r2, [r3, #4]
 8006db0:	693b      	ldr	r3, [r7, #16]
 8006db2:	3308      	adds	r3, #8
 8006db4:	429a      	cmp	r2, r3
 8006db6:	d104      	bne.n	8006dc2 <vTaskSwitchContext+0x8e>
 8006db8:	693b      	ldr	r3, [r7, #16]
 8006dba:	685b      	ldr	r3, [r3, #4]
 8006dbc:	685a      	ldr	r2, [r3, #4]
 8006dbe:	693b      	ldr	r3, [r7, #16]
 8006dc0:	605a      	str	r2, [r3, #4]
 8006dc2:	693b      	ldr	r3, [r7, #16]
 8006dc4:	685b      	ldr	r3, [r3, #4]
 8006dc6:	68db      	ldr	r3, [r3, #12]
 8006dc8:	4a07      	ldr	r2, [pc, #28]	@ (8006de8 <vTaskSwitchContext+0xb4>)
 8006dca:	6013      	str	r3, [r2, #0]
}
 8006dcc:	bf00      	nop
 8006dce:	371c      	adds	r7, #28
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd6:	4770      	bx	lr
 8006dd8:	20000678 	.word	0x20000678
 8006ddc:	20000664 	.word	0x20000664
 8006de0:	20000658 	.word	0x20000658
 8006de4:	20000554 	.word	0x20000554
 8006de8:	20000550 	.word	0x20000550

08006dec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b086      	sub	sp, #24
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	68db      	ldr	r3, [r3, #12]
 8006df8:	68db      	ldr	r3, [r3, #12]
 8006dfa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006dfc:	693b      	ldr	r3, [r7, #16]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d10b      	bne.n	8006e1a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8006e02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e06:	f383 8811 	msr	BASEPRI, r3
 8006e0a:	f3bf 8f6f 	isb	sy
 8006e0e:	f3bf 8f4f 	dsb	sy
 8006e12:	60fb      	str	r3, [r7, #12]
}
 8006e14:	bf00      	nop
 8006e16:	bf00      	nop
 8006e18:	e7fd      	b.n	8006e16 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006e1a:	693b      	ldr	r3, [r7, #16]
 8006e1c:	3318      	adds	r3, #24
 8006e1e:	4618      	mov	r0, r3
 8006e20:	f7ff f92e 	bl	8006080 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e24:	4b1d      	ldr	r3, [pc, #116]	@ (8006e9c <xTaskRemoveFromEventList+0xb0>)
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d11c      	bne.n	8006e66 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006e2c:	693b      	ldr	r3, [r7, #16]
 8006e2e:	3304      	adds	r3, #4
 8006e30:	4618      	mov	r0, r3
 8006e32:	f7ff f925 	bl	8006080 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006e36:	693b      	ldr	r3, [r7, #16]
 8006e38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e3a:	2201      	movs	r2, #1
 8006e3c:	409a      	lsls	r2, r3
 8006e3e:	4b18      	ldr	r3, [pc, #96]	@ (8006ea0 <xTaskRemoveFromEventList+0xb4>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	4313      	orrs	r3, r2
 8006e44:	4a16      	ldr	r2, [pc, #88]	@ (8006ea0 <xTaskRemoveFromEventList+0xb4>)
 8006e46:	6013      	str	r3, [r2, #0]
 8006e48:	693b      	ldr	r3, [r7, #16]
 8006e4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e4c:	4613      	mov	r3, r2
 8006e4e:	009b      	lsls	r3, r3, #2
 8006e50:	4413      	add	r3, r2
 8006e52:	009b      	lsls	r3, r3, #2
 8006e54:	4a13      	ldr	r2, [pc, #76]	@ (8006ea4 <xTaskRemoveFromEventList+0xb8>)
 8006e56:	441a      	add	r2, r3
 8006e58:	693b      	ldr	r3, [r7, #16]
 8006e5a:	3304      	adds	r3, #4
 8006e5c:	4619      	mov	r1, r3
 8006e5e:	4610      	mov	r0, r2
 8006e60:	f7ff f8b1 	bl	8005fc6 <vListInsertEnd>
 8006e64:	e005      	b.n	8006e72 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006e66:	693b      	ldr	r3, [r7, #16]
 8006e68:	3318      	adds	r3, #24
 8006e6a:	4619      	mov	r1, r3
 8006e6c:	480e      	ldr	r0, [pc, #56]	@ (8006ea8 <xTaskRemoveFromEventList+0xbc>)
 8006e6e:	f7ff f8aa 	bl	8005fc6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006e72:	693b      	ldr	r3, [r7, #16]
 8006e74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e76:	4b0d      	ldr	r3, [pc, #52]	@ (8006eac <xTaskRemoveFromEventList+0xc0>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e7c:	429a      	cmp	r2, r3
 8006e7e:	d905      	bls.n	8006e8c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006e80:	2301      	movs	r3, #1
 8006e82:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006e84:	4b0a      	ldr	r3, [pc, #40]	@ (8006eb0 <xTaskRemoveFromEventList+0xc4>)
 8006e86:	2201      	movs	r2, #1
 8006e88:	601a      	str	r2, [r3, #0]
 8006e8a:	e001      	b.n	8006e90 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8006e90:	697b      	ldr	r3, [r7, #20]
}
 8006e92:	4618      	mov	r0, r3
 8006e94:	3718      	adds	r7, #24
 8006e96:	46bd      	mov	sp, r7
 8006e98:	bd80      	pop	{r7, pc}
 8006e9a:	bf00      	nop
 8006e9c:	20000678 	.word	0x20000678
 8006ea0:	20000658 	.word	0x20000658
 8006ea4:	20000554 	.word	0x20000554
 8006ea8:	20000610 	.word	0x20000610
 8006eac:	20000550 	.word	0x20000550
 8006eb0:	20000664 	.word	0x20000664

08006eb4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b082      	sub	sp, #8
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006ebc:	f000 f852 	bl	8006f64 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006ec0:	4b06      	ldr	r3, [pc, #24]	@ (8006edc <prvIdleTask+0x28>)
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	2b01      	cmp	r3, #1
 8006ec6:	d9f9      	bls.n	8006ebc <prvIdleTask+0x8>
			{
				taskYIELD();
 8006ec8:	4b05      	ldr	r3, [pc, #20]	@ (8006ee0 <prvIdleTask+0x2c>)
 8006eca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006ece:	601a      	str	r2, [r3, #0]
 8006ed0:	f3bf 8f4f 	dsb	sy
 8006ed4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006ed8:	e7f0      	b.n	8006ebc <prvIdleTask+0x8>
 8006eda:	bf00      	nop
 8006edc:	20000554 	.word	0x20000554
 8006ee0:	e000ed04 	.word	0xe000ed04

08006ee4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b082      	sub	sp, #8
 8006ee8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006eea:	2300      	movs	r3, #0
 8006eec:	607b      	str	r3, [r7, #4]
 8006eee:	e00c      	b.n	8006f0a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006ef0:	687a      	ldr	r2, [r7, #4]
 8006ef2:	4613      	mov	r3, r2
 8006ef4:	009b      	lsls	r3, r3, #2
 8006ef6:	4413      	add	r3, r2
 8006ef8:	009b      	lsls	r3, r3, #2
 8006efa:	4a12      	ldr	r2, [pc, #72]	@ (8006f44 <prvInitialiseTaskLists+0x60>)
 8006efc:	4413      	add	r3, r2
 8006efe:	4618      	mov	r0, r3
 8006f00:	f7ff f834 	bl	8005f6c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	3301      	adds	r3, #1
 8006f08:	607b      	str	r3, [r7, #4]
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2b06      	cmp	r3, #6
 8006f0e:	d9ef      	bls.n	8006ef0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006f10:	480d      	ldr	r0, [pc, #52]	@ (8006f48 <prvInitialiseTaskLists+0x64>)
 8006f12:	f7ff f82b 	bl	8005f6c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006f16:	480d      	ldr	r0, [pc, #52]	@ (8006f4c <prvInitialiseTaskLists+0x68>)
 8006f18:	f7ff f828 	bl	8005f6c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006f1c:	480c      	ldr	r0, [pc, #48]	@ (8006f50 <prvInitialiseTaskLists+0x6c>)
 8006f1e:	f7ff f825 	bl	8005f6c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006f22:	480c      	ldr	r0, [pc, #48]	@ (8006f54 <prvInitialiseTaskLists+0x70>)
 8006f24:	f7ff f822 	bl	8005f6c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006f28:	480b      	ldr	r0, [pc, #44]	@ (8006f58 <prvInitialiseTaskLists+0x74>)
 8006f2a:	f7ff f81f 	bl	8005f6c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006f2e:	4b0b      	ldr	r3, [pc, #44]	@ (8006f5c <prvInitialiseTaskLists+0x78>)
 8006f30:	4a05      	ldr	r2, [pc, #20]	@ (8006f48 <prvInitialiseTaskLists+0x64>)
 8006f32:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006f34:	4b0a      	ldr	r3, [pc, #40]	@ (8006f60 <prvInitialiseTaskLists+0x7c>)
 8006f36:	4a05      	ldr	r2, [pc, #20]	@ (8006f4c <prvInitialiseTaskLists+0x68>)
 8006f38:	601a      	str	r2, [r3, #0]
}
 8006f3a:	bf00      	nop
 8006f3c:	3708      	adds	r7, #8
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bd80      	pop	{r7, pc}
 8006f42:	bf00      	nop
 8006f44:	20000554 	.word	0x20000554
 8006f48:	200005e0 	.word	0x200005e0
 8006f4c:	200005f4 	.word	0x200005f4
 8006f50:	20000610 	.word	0x20000610
 8006f54:	20000624 	.word	0x20000624
 8006f58:	2000063c 	.word	0x2000063c
 8006f5c:	20000608 	.word	0x20000608
 8006f60:	2000060c 	.word	0x2000060c

08006f64 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b082      	sub	sp, #8
 8006f68:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006f6a:	e019      	b.n	8006fa0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006f6c:	f000 fa9c 	bl	80074a8 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006f70:	4b10      	ldr	r3, [pc, #64]	@ (8006fb4 <prvCheckTasksWaitingTermination+0x50>)
 8006f72:	68db      	ldr	r3, [r3, #12]
 8006f74:	68db      	ldr	r3, [r3, #12]
 8006f76:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	3304      	adds	r3, #4
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	f7ff f87f 	bl	8006080 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006f82:	4b0d      	ldr	r3, [pc, #52]	@ (8006fb8 <prvCheckTasksWaitingTermination+0x54>)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	3b01      	subs	r3, #1
 8006f88:	4a0b      	ldr	r2, [pc, #44]	@ (8006fb8 <prvCheckTasksWaitingTermination+0x54>)
 8006f8a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006f8c:	4b0b      	ldr	r3, [pc, #44]	@ (8006fbc <prvCheckTasksWaitingTermination+0x58>)
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	3b01      	subs	r3, #1
 8006f92:	4a0a      	ldr	r2, [pc, #40]	@ (8006fbc <prvCheckTasksWaitingTermination+0x58>)
 8006f94:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006f96:	f000 fab9 	bl	800750c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f000 f810 	bl	8006fc0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006fa0:	4b06      	ldr	r3, [pc, #24]	@ (8006fbc <prvCheckTasksWaitingTermination+0x58>)
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d1e1      	bne.n	8006f6c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006fa8:	bf00      	nop
 8006faa:	bf00      	nop
 8006fac:	3708      	adds	r7, #8
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	bd80      	pop	{r7, pc}
 8006fb2:	bf00      	nop
 8006fb4:	20000624 	.word	0x20000624
 8006fb8:	20000650 	.word	0x20000650
 8006fbc:	20000638 	.word	0x20000638

08006fc0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b084      	sub	sp, #16
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d108      	bne.n	8006fe4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	f000 fc50 	bl	800787c <vPortFree>
				vPortFree( pxTCB );
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	f000 fc4d 	bl	800787c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006fe2:	e019      	b.n	8007018 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006fea:	2b01      	cmp	r3, #1
 8006fec:	d103      	bne.n	8006ff6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	f000 fc44 	bl	800787c <vPortFree>
	}
 8006ff4:	e010      	b.n	8007018 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006ffc:	2b02      	cmp	r3, #2
 8006ffe:	d00b      	beq.n	8007018 <prvDeleteTCB+0x58>
	__asm volatile
 8007000:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007004:	f383 8811 	msr	BASEPRI, r3
 8007008:	f3bf 8f6f 	isb	sy
 800700c:	f3bf 8f4f 	dsb	sy
 8007010:	60fb      	str	r3, [r7, #12]
}
 8007012:	bf00      	nop
 8007014:	bf00      	nop
 8007016:	e7fd      	b.n	8007014 <prvDeleteTCB+0x54>
	}
 8007018:	bf00      	nop
 800701a:	3710      	adds	r7, #16
 800701c:	46bd      	mov	sp, r7
 800701e:	bd80      	pop	{r7, pc}

08007020 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007020:	b480      	push	{r7}
 8007022:	b083      	sub	sp, #12
 8007024:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007026:	4b0f      	ldr	r3, [pc, #60]	@ (8007064 <prvResetNextTaskUnblockTime+0x44>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d101      	bne.n	8007034 <prvResetNextTaskUnblockTime+0x14>
 8007030:	2301      	movs	r3, #1
 8007032:	e000      	b.n	8007036 <prvResetNextTaskUnblockTime+0x16>
 8007034:	2300      	movs	r3, #0
 8007036:	2b00      	cmp	r3, #0
 8007038:	d004      	beq.n	8007044 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800703a:	4b0b      	ldr	r3, [pc, #44]	@ (8007068 <prvResetNextTaskUnblockTime+0x48>)
 800703c:	f04f 32ff 	mov.w	r2, #4294967295
 8007040:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007042:	e008      	b.n	8007056 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007044:	4b07      	ldr	r3, [pc, #28]	@ (8007064 <prvResetNextTaskUnblockTime+0x44>)
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	68db      	ldr	r3, [r3, #12]
 800704a:	68db      	ldr	r3, [r3, #12]
 800704c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	685b      	ldr	r3, [r3, #4]
 8007052:	4a05      	ldr	r2, [pc, #20]	@ (8007068 <prvResetNextTaskUnblockTime+0x48>)
 8007054:	6013      	str	r3, [r2, #0]
}
 8007056:	bf00      	nop
 8007058:	370c      	adds	r7, #12
 800705a:	46bd      	mov	sp, r7
 800705c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007060:	4770      	bx	lr
 8007062:	bf00      	nop
 8007064:	20000608 	.word	0x20000608
 8007068:	20000670 	.word	0x20000670

0800706c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800706c:	b580      	push	{r7, lr}
 800706e:	b086      	sub	sp, #24
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007078:	2300      	movs	r3, #0
 800707a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d070      	beq.n	8007164 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007082:	4b3b      	ldr	r3, [pc, #236]	@ (8007170 <xTaskPriorityDisinherit+0x104>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	693a      	ldr	r2, [r7, #16]
 8007088:	429a      	cmp	r2, r3
 800708a:	d00b      	beq.n	80070a4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800708c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007090:	f383 8811 	msr	BASEPRI, r3
 8007094:	f3bf 8f6f 	isb	sy
 8007098:	f3bf 8f4f 	dsb	sy
 800709c:	60fb      	str	r3, [r7, #12]
}
 800709e:	bf00      	nop
 80070a0:	bf00      	nop
 80070a2:	e7fd      	b.n	80070a0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80070a4:	693b      	ldr	r3, [r7, #16]
 80070a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d10b      	bne.n	80070c4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80070ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070b0:	f383 8811 	msr	BASEPRI, r3
 80070b4:	f3bf 8f6f 	isb	sy
 80070b8:	f3bf 8f4f 	dsb	sy
 80070bc:	60bb      	str	r3, [r7, #8]
}
 80070be:	bf00      	nop
 80070c0:	bf00      	nop
 80070c2:	e7fd      	b.n	80070c0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80070c4:	693b      	ldr	r3, [r7, #16]
 80070c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80070c8:	1e5a      	subs	r2, r3, #1
 80070ca:	693b      	ldr	r3, [r7, #16]
 80070cc:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80070ce:	693b      	ldr	r3, [r7, #16]
 80070d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070d2:	693b      	ldr	r3, [r7, #16]
 80070d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070d6:	429a      	cmp	r2, r3
 80070d8:	d044      	beq.n	8007164 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80070da:	693b      	ldr	r3, [r7, #16]
 80070dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d140      	bne.n	8007164 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80070e2:	693b      	ldr	r3, [r7, #16]
 80070e4:	3304      	adds	r3, #4
 80070e6:	4618      	mov	r0, r3
 80070e8:	f7fe ffca 	bl	8006080 <uxListRemove>
 80070ec:	4603      	mov	r3, r0
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d115      	bne.n	800711e <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80070f2:	693b      	ldr	r3, [r7, #16]
 80070f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070f6:	491f      	ldr	r1, [pc, #124]	@ (8007174 <xTaskPriorityDisinherit+0x108>)
 80070f8:	4613      	mov	r3, r2
 80070fa:	009b      	lsls	r3, r3, #2
 80070fc:	4413      	add	r3, r2
 80070fe:	009b      	lsls	r3, r3, #2
 8007100:	440b      	add	r3, r1
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d10a      	bne.n	800711e <xTaskPriorityDisinherit+0xb2>
 8007108:	693b      	ldr	r3, [r7, #16]
 800710a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800710c:	2201      	movs	r2, #1
 800710e:	fa02 f303 	lsl.w	r3, r2, r3
 8007112:	43da      	mvns	r2, r3
 8007114:	4b18      	ldr	r3, [pc, #96]	@ (8007178 <xTaskPriorityDisinherit+0x10c>)
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	4013      	ands	r3, r2
 800711a:	4a17      	ldr	r2, [pc, #92]	@ (8007178 <xTaskPriorityDisinherit+0x10c>)
 800711c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800711e:	693b      	ldr	r3, [r7, #16]
 8007120:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007122:	693b      	ldr	r3, [r7, #16]
 8007124:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007126:	693b      	ldr	r3, [r7, #16]
 8007128:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800712a:	f1c3 0207 	rsb	r2, r3, #7
 800712e:	693b      	ldr	r3, [r7, #16]
 8007130:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007132:	693b      	ldr	r3, [r7, #16]
 8007134:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007136:	2201      	movs	r2, #1
 8007138:	409a      	lsls	r2, r3
 800713a:	4b0f      	ldr	r3, [pc, #60]	@ (8007178 <xTaskPriorityDisinherit+0x10c>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	4313      	orrs	r3, r2
 8007140:	4a0d      	ldr	r2, [pc, #52]	@ (8007178 <xTaskPriorityDisinherit+0x10c>)
 8007142:	6013      	str	r3, [r2, #0]
 8007144:	693b      	ldr	r3, [r7, #16]
 8007146:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007148:	4613      	mov	r3, r2
 800714a:	009b      	lsls	r3, r3, #2
 800714c:	4413      	add	r3, r2
 800714e:	009b      	lsls	r3, r3, #2
 8007150:	4a08      	ldr	r2, [pc, #32]	@ (8007174 <xTaskPriorityDisinherit+0x108>)
 8007152:	441a      	add	r2, r3
 8007154:	693b      	ldr	r3, [r7, #16]
 8007156:	3304      	adds	r3, #4
 8007158:	4619      	mov	r1, r3
 800715a:	4610      	mov	r0, r2
 800715c:	f7fe ff33 	bl	8005fc6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007160:	2301      	movs	r3, #1
 8007162:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007164:	697b      	ldr	r3, [r7, #20]
	}
 8007166:	4618      	mov	r0, r3
 8007168:	3718      	adds	r7, #24
 800716a:	46bd      	mov	sp, r7
 800716c:	bd80      	pop	{r7, pc}
 800716e:	bf00      	nop
 8007170:	20000550 	.word	0x20000550
 8007174:	20000554 	.word	0x20000554
 8007178:	20000658 	.word	0x20000658

0800717c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b084      	sub	sp, #16
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
 8007184:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007186:	4b29      	ldr	r3, [pc, #164]	@ (800722c <prvAddCurrentTaskToDelayedList+0xb0>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800718c:	4b28      	ldr	r3, [pc, #160]	@ (8007230 <prvAddCurrentTaskToDelayedList+0xb4>)
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	3304      	adds	r3, #4
 8007192:	4618      	mov	r0, r3
 8007194:	f7fe ff74 	bl	8006080 <uxListRemove>
 8007198:	4603      	mov	r3, r0
 800719a:	2b00      	cmp	r3, #0
 800719c:	d10b      	bne.n	80071b6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800719e:	4b24      	ldr	r3, [pc, #144]	@ (8007230 <prvAddCurrentTaskToDelayedList+0xb4>)
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071a4:	2201      	movs	r2, #1
 80071a6:	fa02 f303 	lsl.w	r3, r2, r3
 80071aa:	43da      	mvns	r2, r3
 80071ac:	4b21      	ldr	r3, [pc, #132]	@ (8007234 <prvAddCurrentTaskToDelayedList+0xb8>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4013      	ands	r3, r2
 80071b2:	4a20      	ldr	r2, [pc, #128]	@ (8007234 <prvAddCurrentTaskToDelayedList+0xb8>)
 80071b4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071bc:	d10a      	bne.n	80071d4 <prvAddCurrentTaskToDelayedList+0x58>
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d007      	beq.n	80071d4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80071c4:	4b1a      	ldr	r3, [pc, #104]	@ (8007230 <prvAddCurrentTaskToDelayedList+0xb4>)
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	3304      	adds	r3, #4
 80071ca:	4619      	mov	r1, r3
 80071cc:	481a      	ldr	r0, [pc, #104]	@ (8007238 <prvAddCurrentTaskToDelayedList+0xbc>)
 80071ce:	f7fe fefa 	bl	8005fc6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80071d2:	e026      	b.n	8007222 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80071d4:	68fa      	ldr	r2, [r7, #12]
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	4413      	add	r3, r2
 80071da:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80071dc:	4b14      	ldr	r3, [pc, #80]	@ (8007230 <prvAddCurrentTaskToDelayedList+0xb4>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	68ba      	ldr	r2, [r7, #8]
 80071e2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80071e4:	68ba      	ldr	r2, [r7, #8]
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	429a      	cmp	r2, r3
 80071ea:	d209      	bcs.n	8007200 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80071ec:	4b13      	ldr	r3, [pc, #76]	@ (800723c <prvAddCurrentTaskToDelayedList+0xc0>)
 80071ee:	681a      	ldr	r2, [r3, #0]
 80071f0:	4b0f      	ldr	r3, [pc, #60]	@ (8007230 <prvAddCurrentTaskToDelayedList+0xb4>)
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	3304      	adds	r3, #4
 80071f6:	4619      	mov	r1, r3
 80071f8:	4610      	mov	r0, r2
 80071fa:	f7fe ff08 	bl	800600e <vListInsert>
}
 80071fe:	e010      	b.n	8007222 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007200:	4b0f      	ldr	r3, [pc, #60]	@ (8007240 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007202:	681a      	ldr	r2, [r3, #0]
 8007204:	4b0a      	ldr	r3, [pc, #40]	@ (8007230 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	3304      	adds	r3, #4
 800720a:	4619      	mov	r1, r3
 800720c:	4610      	mov	r0, r2
 800720e:	f7fe fefe 	bl	800600e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007212:	4b0c      	ldr	r3, [pc, #48]	@ (8007244 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	68ba      	ldr	r2, [r7, #8]
 8007218:	429a      	cmp	r2, r3
 800721a:	d202      	bcs.n	8007222 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800721c:	4a09      	ldr	r2, [pc, #36]	@ (8007244 <prvAddCurrentTaskToDelayedList+0xc8>)
 800721e:	68bb      	ldr	r3, [r7, #8]
 8007220:	6013      	str	r3, [r2, #0]
}
 8007222:	bf00      	nop
 8007224:	3710      	adds	r7, #16
 8007226:	46bd      	mov	sp, r7
 8007228:	bd80      	pop	{r7, pc}
 800722a:	bf00      	nop
 800722c:	20000654 	.word	0x20000654
 8007230:	20000550 	.word	0x20000550
 8007234:	20000658 	.word	0x20000658
 8007238:	2000063c 	.word	0x2000063c
 800723c:	2000060c 	.word	0x2000060c
 8007240:	20000608 	.word	0x20000608
 8007244:	20000670 	.word	0x20000670

08007248 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007248:	b480      	push	{r7}
 800724a:	b085      	sub	sp, #20
 800724c:	af00      	add	r7, sp, #0
 800724e:	60f8      	str	r0, [r7, #12]
 8007250:	60b9      	str	r1, [r7, #8]
 8007252:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	3b04      	subs	r3, #4
 8007258:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007260:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	3b04      	subs	r3, #4
 8007266:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	f023 0201 	bic.w	r2, r3, #1
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	3b04      	subs	r3, #4
 8007276:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007278:	4a0c      	ldr	r2, [pc, #48]	@ (80072ac <pxPortInitialiseStack+0x64>)
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	3b14      	subs	r3, #20
 8007282:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007284:	687a      	ldr	r2, [r7, #4]
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	3b04      	subs	r3, #4
 800728e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	f06f 0202 	mvn.w	r2, #2
 8007296:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	3b20      	subs	r3, #32
 800729c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800729e:	68fb      	ldr	r3, [r7, #12]
}
 80072a0:	4618      	mov	r0, r3
 80072a2:	3714      	adds	r7, #20
 80072a4:	46bd      	mov	sp, r7
 80072a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072aa:	4770      	bx	lr
 80072ac:	080072b1 	.word	0x080072b1

080072b0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80072b0:	b480      	push	{r7}
 80072b2:	b085      	sub	sp, #20
 80072b4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80072b6:	2300      	movs	r3, #0
 80072b8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80072ba:	4b13      	ldr	r3, [pc, #76]	@ (8007308 <prvTaskExitError+0x58>)
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072c2:	d00b      	beq.n	80072dc <prvTaskExitError+0x2c>
	__asm volatile
 80072c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072c8:	f383 8811 	msr	BASEPRI, r3
 80072cc:	f3bf 8f6f 	isb	sy
 80072d0:	f3bf 8f4f 	dsb	sy
 80072d4:	60fb      	str	r3, [r7, #12]
}
 80072d6:	bf00      	nop
 80072d8:	bf00      	nop
 80072da:	e7fd      	b.n	80072d8 <prvTaskExitError+0x28>
	__asm volatile
 80072dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072e0:	f383 8811 	msr	BASEPRI, r3
 80072e4:	f3bf 8f6f 	isb	sy
 80072e8:	f3bf 8f4f 	dsb	sy
 80072ec:	60bb      	str	r3, [r7, #8]
}
 80072ee:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80072f0:	bf00      	nop
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d0fc      	beq.n	80072f2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80072f8:	bf00      	nop
 80072fa:	bf00      	nop
 80072fc:	3714      	adds	r7, #20
 80072fe:	46bd      	mov	sp, r7
 8007300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007304:	4770      	bx	lr
 8007306:	bf00      	nop
 8007308:	20000010 	.word	0x20000010
 800730c:	00000000 	.word	0x00000000

08007310 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007310:	4b07      	ldr	r3, [pc, #28]	@ (8007330 <pxCurrentTCBConst2>)
 8007312:	6819      	ldr	r1, [r3, #0]
 8007314:	6808      	ldr	r0, [r1, #0]
 8007316:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800731a:	f380 8809 	msr	PSP, r0
 800731e:	f3bf 8f6f 	isb	sy
 8007322:	f04f 0000 	mov.w	r0, #0
 8007326:	f380 8811 	msr	BASEPRI, r0
 800732a:	4770      	bx	lr
 800732c:	f3af 8000 	nop.w

08007330 <pxCurrentTCBConst2>:
 8007330:	20000550 	.word	0x20000550
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007334:	bf00      	nop
 8007336:	bf00      	nop

08007338 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007338:	4808      	ldr	r0, [pc, #32]	@ (800735c <prvPortStartFirstTask+0x24>)
 800733a:	6800      	ldr	r0, [r0, #0]
 800733c:	6800      	ldr	r0, [r0, #0]
 800733e:	f380 8808 	msr	MSP, r0
 8007342:	f04f 0000 	mov.w	r0, #0
 8007346:	f380 8814 	msr	CONTROL, r0
 800734a:	b662      	cpsie	i
 800734c:	b661      	cpsie	f
 800734e:	f3bf 8f4f 	dsb	sy
 8007352:	f3bf 8f6f 	isb	sy
 8007356:	df00      	svc	0
 8007358:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800735a:	bf00      	nop
 800735c:	e000ed08 	.word	0xe000ed08

08007360 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b086      	sub	sp, #24
 8007364:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007366:	4b47      	ldr	r3, [pc, #284]	@ (8007484 <xPortStartScheduler+0x124>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	4a47      	ldr	r2, [pc, #284]	@ (8007488 <xPortStartScheduler+0x128>)
 800736c:	4293      	cmp	r3, r2
 800736e:	d10b      	bne.n	8007388 <xPortStartScheduler+0x28>
	__asm volatile
 8007370:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007374:	f383 8811 	msr	BASEPRI, r3
 8007378:	f3bf 8f6f 	isb	sy
 800737c:	f3bf 8f4f 	dsb	sy
 8007380:	613b      	str	r3, [r7, #16]
}
 8007382:	bf00      	nop
 8007384:	bf00      	nop
 8007386:	e7fd      	b.n	8007384 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007388:	4b3e      	ldr	r3, [pc, #248]	@ (8007484 <xPortStartScheduler+0x124>)
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	4a3f      	ldr	r2, [pc, #252]	@ (800748c <xPortStartScheduler+0x12c>)
 800738e:	4293      	cmp	r3, r2
 8007390:	d10b      	bne.n	80073aa <xPortStartScheduler+0x4a>
	__asm volatile
 8007392:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007396:	f383 8811 	msr	BASEPRI, r3
 800739a:	f3bf 8f6f 	isb	sy
 800739e:	f3bf 8f4f 	dsb	sy
 80073a2:	60fb      	str	r3, [r7, #12]
}
 80073a4:	bf00      	nop
 80073a6:	bf00      	nop
 80073a8:	e7fd      	b.n	80073a6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80073aa:	4b39      	ldr	r3, [pc, #228]	@ (8007490 <xPortStartScheduler+0x130>)
 80073ac:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80073ae:	697b      	ldr	r3, [r7, #20]
 80073b0:	781b      	ldrb	r3, [r3, #0]
 80073b2:	b2db      	uxtb	r3, r3
 80073b4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80073b6:	697b      	ldr	r3, [r7, #20]
 80073b8:	22ff      	movs	r2, #255	@ 0xff
 80073ba:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80073bc:	697b      	ldr	r3, [r7, #20]
 80073be:	781b      	ldrb	r3, [r3, #0]
 80073c0:	b2db      	uxtb	r3, r3
 80073c2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80073c4:	78fb      	ldrb	r3, [r7, #3]
 80073c6:	b2db      	uxtb	r3, r3
 80073c8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80073cc:	b2da      	uxtb	r2, r3
 80073ce:	4b31      	ldr	r3, [pc, #196]	@ (8007494 <xPortStartScheduler+0x134>)
 80073d0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80073d2:	4b31      	ldr	r3, [pc, #196]	@ (8007498 <xPortStartScheduler+0x138>)
 80073d4:	2207      	movs	r2, #7
 80073d6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80073d8:	e009      	b.n	80073ee <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80073da:	4b2f      	ldr	r3, [pc, #188]	@ (8007498 <xPortStartScheduler+0x138>)
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	3b01      	subs	r3, #1
 80073e0:	4a2d      	ldr	r2, [pc, #180]	@ (8007498 <xPortStartScheduler+0x138>)
 80073e2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80073e4:	78fb      	ldrb	r3, [r7, #3]
 80073e6:	b2db      	uxtb	r3, r3
 80073e8:	005b      	lsls	r3, r3, #1
 80073ea:	b2db      	uxtb	r3, r3
 80073ec:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80073ee:	78fb      	ldrb	r3, [r7, #3]
 80073f0:	b2db      	uxtb	r3, r3
 80073f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80073f6:	2b80      	cmp	r3, #128	@ 0x80
 80073f8:	d0ef      	beq.n	80073da <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80073fa:	4b27      	ldr	r3, [pc, #156]	@ (8007498 <xPortStartScheduler+0x138>)
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f1c3 0307 	rsb	r3, r3, #7
 8007402:	2b04      	cmp	r3, #4
 8007404:	d00b      	beq.n	800741e <xPortStartScheduler+0xbe>
	__asm volatile
 8007406:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800740a:	f383 8811 	msr	BASEPRI, r3
 800740e:	f3bf 8f6f 	isb	sy
 8007412:	f3bf 8f4f 	dsb	sy
 8007416:	60bb      	str	r3, [r7, #8]
}
 8007418:	bf00      	nop
 800741a:	bf00      	nop
 800741c:	e7fd      	b.n	800741a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800741e:	4b1e      	ldr	r3, [pc, #120]	@ (8007498 <xPortStartScheduler+0x138>)
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	021b      	lsls	r3, r3, #8
 8007424:	4a1c      	ldr	r2, [pc, #112]	@ (8007498 <xPortStartScheduler+0x138>)
 8007426:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007428:	4b1b      	ldr	r3, [pc, #108]	@ (8007498 <xPortStartScheduler+0x138>)
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007430:	4a19      	ldr	r2, [pc, #100]	@ (8007498 <xPortStartScheduler+0x138>)
 8007432:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	b2da      	uxtb	r2, r3
 8007438:	697b      	ldr	r3, [r7, #20]
 800743a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800743c:	4b17      	ldr	r3, [pc, #92]	@ (800749c <xPortStartScheduler+0x13c>)
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	4a16      	ldr	r2, [pc, #88]	@ (800749c <xPortStartScheduler+0x13c>)
 8007442:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007446:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007448:	4b14      	ldr	r3, [pc, #80]	@ (800749c <xPortStartScheduler+0x13c>)
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	4a13      	ldr	r2, [pc, #76]	@ (800749c <xPortStartScheduler+0x13c>)
 800744e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007452:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007454:	f000 f8da 	bl	800760c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007458:	4b11      	ldr	r3, [pc, #68]	@ (80074a0 <xPortStartScheduler+0x140>)
 800745a:	2200      	movs	r2, #0
 800745c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800745e:	f000 f8f9 	bl	8007654 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007462:	4b10      	ldr	r3, [pc, #64]	@ (80074a4 <xPortStartScheduler+0x144>)
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	4a0f      	ldr	r2, [pc, #60]	@ (80074a4 <xPortStartScheduler+0x144>)
 8007468:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800746c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800746e:	f7ff ff63 	bl	8007338 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007472:	f7ff fc5f 	bl	8006d34 <vTaskSwitchContext>
	prvTaskExitError();
 8007476:	f7ff ff1b 	bl	80072b0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800747a:	2300      	movs	r3, #0
}
 800747c:	4618      	mov	r0, r3
 800747e:	3718      	adds	r7, #24
 8007480:	46bd      	mov	sp, r7
 8007482:	bd80      	pop	{r7, pc}
 8007484:	e000ed00 	.word	0xe000ed00
 8007488:	410fc271 	.word	0x410fc271
 800748c:	410fc270 	.word	0x410fc270
 8007490:	e000e400 	.word	0xe000e400
 8007494:	2000067c 	.word	0x2000067c
 8007498:	20000680 	.word	0x20000680
 800749c:	e000ed20 	.word	0xe000ed20
 80074a0:	20000010 	.word	0x20000010
 80074a4:	e000ef34 	.word	0xe000ef34

080074a8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80074a8:	b480      	push	{r7}
 80074aa:	b083      	sub	sp, #12
 80074ac:	af00      	add	r7, sp, #0
	__asm volatile
 80074ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074b2:	f383 8811 	msr	BASEPRI, r3
 80074b6:	f3bf 8f6f 	isb	sy
 80074ba:	f3bf 8f4f 	dsb	sy
 80074be:	607b      	str	r3, [r7, #4]
}
 80074c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80074c2:	4b10      	ldr	r3, [pc, #64]	@ (8007504 <vPortEnterCritical+0x5c>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	3301      	adds	r3, #1
 80074c8:	4a0e      	ldr	r2, [pc, #56]	@ (8007504 <vPortEnterCritical+0x5c>)
 80074ca:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80074cc:	4b0d      	ldr	r3, [pc, #52]	@ (8007504 <vPortEnterCritical+0x5c>)
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	2b01      	cmp	r3, #1
 80074d2:	d110      	bne.n	80074f6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80074d4:	4b0c      	ldr	r3, [pc, #48]	@ (8007508 <vPortEnterCritical+0x60>)
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	b2db      	uxtb	r3, r3
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d00b      	beq.n	80074f6 <vPortEnterCritical+0x4e>
	__asm volatile
 80074de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074e2:	f383 8811 	msr	BASEPRI, r3
 80074e6:	f3bf 8f6f 	isb	sy
 80074ea:	f3bf 8f4f 	dsb	sy
 80074ee:	603b      	str	r3, [r7, #0]
}
 80074f0:	bf00      	nop
 80074f2:	bf00      	nop
 80074f4:	e7fd      	b.n	80074f2 <vPortEnterCritical+0x4a>
	}
}
 80074f6:	bf00      	nop
 80074f8:	370c      	adds	r7, #12
 80074fa:	46bd      	mov	sp, r7
 80074fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007500:	4770      	bx	lr
 8007502:	bf00      	nop
 8007504:	20000010 	.word	0x20000010
 8007508:	e000ed04 	.word	0xe000ed04

0800750c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800750c:	b480      	push	{r7}
 800750e:	b083      	sub	sp, #12
 8007510:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007512:	4b12      	ldr	r3, [pc, #72]	@ (800755c <vPortExitCritical+0x50>)
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d10b      	bne.n	8007532 <vPortExitCritical+0x26>
	__asm volatile
 800751a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800751e:	f383 8811 	msr	BASEPRI, r3
 8007522:	f3bf 8f6f 	isb	sy
 8007526:	f3bf 8f4f 	dsb	sy
 800752a:	607b      	str	r3, [r7, #4]
}
 800752c:	bf00      	nop
 800752e:	bf00      	nop
 8007530:	e7fd      	b.n	800752e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007532:	4b0a      	ldr	r3, [pc, #40]	@ (800755c <vPortExitCritical+0x50>)
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	3b01      	subs	r3, #1
 8007538:	4a08      	ldr	r2, [pc, #32]	@ (800755c <vPortExitCritical+0x50>)
 800753a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800753c:	4b07      	ldr	r3, [pc, #28]	@ (800755c <vPortExitCritical+0x50>)
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d105      	bne.n	8007550 <vPortExitCritical+0x44>
 8007544:	2300      	movs	r3, #0
 8007546:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	f383 8811 	msr	BASEPRI, r3
}
 800754e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007550:	bf00      	nop
 8007552:	370c      	adds	r7, #12
 8007554:	46bd      	mov	sp, r7
 8007556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755a:	4770      	bx	lr
 800755c:	20000010 	.word	0x20000010

08007560 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007560:	f3ef 8009 	mrs	r0, PSP
 8007564:	f3bf 8f6f 	isb	sy
 8007568:	4b15      	ldr	r3, [pc, #84]	@ (80075c0 <pxCurrentTCBConst>)
 800756a:	681a      	ldr	r2, [r3, #0]
 800756c:	f01e 0f10 	tst.w	lr, #16
 8007570:	bf08      	it	eq
 8007572:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007576:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800757a:	6010      	str	r0, [r2, #0]
 800757c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007580:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007584:	f380 8811 	msr	BASEPRI, r0
 8007588:	f3bf 8f4f 	dsb	sy
 800758c:	f3bf 8f6f 	isb	sy
 8007590:	f7ff fbd0 	bl	8006d34 <vTaskSwitchContext>
 8007594:	f04f 0000 	mov.w	r0, #0
 8007598:	f380 8811 	msr	BASEPRI, r0
 800759c:	bc09      	pop	{r0, r3}
 800759e:	6819      	ldr	r1, [r3, #0]
 80075a0:	6808      	ldr	r0, [r1, #0]
 80075a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075a6:	f01e 0f10 	tst.w	lr, #16
 80075aa:	bf08      	it	eq
 80075ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80075b0:	f380 8809 	msr	PSP, r0
 80075b4:	f3bf 8f6f 	isb	sy
 80075b8:	4770      	bx	lr
 80075ba:	bf00      	nop
 80075bc:	f3af 8000 	nop.w

080075c0 <pxCurrentTCBConst>:
 80075c0:	20000550 	.word	0x20000550
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80075c4:	bf00      	nop
 80075c6:	bf00      	nop

080075c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b082      	sub	sp, #8
 80075cc:	af00      	add	r7, sp, #0
	__asm volatile
 80075ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075d2:	f383 8811 	msr	BASEPRI, r3
 80075d6:	f3bf 8f6f 	isb	sy
 80075da:	f3bf 8f4f 	dsb	sy
 80075de:	607b      	str	r3, [r7, #4]
}
 80075e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80075e2:	f7ff fae9 	bl	8006bb8 <xTaskIncrementTick>
 80075e6:	4603      	mov	r3, r0
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d003      	beq.n	80075f4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80075ec:	4b06      	ldr	r3, [pc, #24]	@ (8007608 <SysTick_Handler+0x40>)
 80075ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80075f2:	601a      	str	r2, [r3, #0]
 80075f4:	2300      	movs	r3, #0
 80075f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	f383 8811 	msr	BASEPRI, r3
}
 80075fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007600:	bf00      	nop
 8007602:	3708      	adds	r7, #8
 8007604:	46bd      	mov	sp, r7
 8007606:	bd80      	pop	{r7, pc}
 8007608:	e000ed04 	.word	0xe000ed04

0800760c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800760c:	b480      	push	{r7}
 800760e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007610:	4b0b      	ldr	r3, [pc, #44]	@ (8007640 <vPortSetupTimerInterrupt+0x34>)
 8007612:	2200      	movs	r2, #0
 8007614:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007616:	4b0b      	ldr	r3, [pc, #44]	@ (8007644 <vPortSetupTimerInterrupt+0x38>)
 8007618:	2200      	movs	r2, #0
 800761a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800761c:	4b0a      	ldr	r3, [pc, #40]	@ (8007648 <vPortSetupTimerInterrupt+0x3c>)
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	4a0a      	ldr	r2, [pc, #40]	@ (800764c <vPortSetupTimerInterrupt+0x40>)
 8007622:	fba2 2303 	umull	r2, r3, r2, r3
 8007626:	099b      	lsrs	r3, r3, #6
 8007628:	4a09      	ldr	r2, [pc, #36]	@ (8007650 <vPortSetupTimerInterrupt+0x44>)
 800762a:	3b01      	subs	r3, #1
 800762c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800762e:	4b04      	ldr	r3, [pc, #16]	@ (8007640 <vPortSetupTimerInterrupt+0x34>)
 8007630:	2207      	movs	r2, #7
 8007632:	601a      	str	r2, [r3, #0]
}
 8007634:	bf00      	nop
 8007636:	46bd      	mov	sp, r7
 8007638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763c:	4770      	bx	lr
 800763e:	bf00      	nop
 8007640:	e000e010 	.word	0xe000e010
 8007644:	e000e018 	.word	0xe000e018
 8007648:	20000004 	.word	0x20000004
 800764c:	10624dd3 	.word	0x10624dd3
 8007650:	e000e014 	.word	0xe000e014

08007654 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007654:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007664 <vPortEnableVFP+0x10>
 8007658:	6801      	ldr	r1, [r0, #0]
 800765a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800765e:	6001      	str	r1, [r0, #0]
 8007660:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007662:	bf00      	nop
 8007664:	e000ed88 	.word	0xe000ed88

08007668 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007668:	b480      	push	{r7}
 800766a:	b085      	sub	sp, #20
 800766c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800766e:	f3ef 8305 	mrs	r3, IPSR
 8007672:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	2b0f      	cmp	r3, #15
 8007678:	d915      	bls.n	80076a6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800767a:	4a18      	ldr	r2, [pc, #96]	@ (80076dc <vPortValidateInterruptPriority+0x74>)
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	4413      	add	r3, r2
 8007680:	781b      	ldrb	r3, [r3, #0]
 8007682:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007684:	4b16      	ldr	r3, [pc, #88]	@ (80076e0 <vPortValidateInterruptPriority+0x78>)
 8007686:	781b      	ldrb	r3, [r3, #0]
 8007688:	7afa      	ldrb	r2, [r7, #11]
 800768a:	429a      	cmp	r2, r3
 800768c:	d20b      	bcs.n	80076a6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800768e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007692:	f383 8811 	msr	BASEPRI, r3
 8007696:	f3bf 8f6f 	isb	sy
 800769a:	f3bf 8f4f 	dsb	sy
 800769e:	607b      	str	r3, [r7, #4]
}
 80076a0:	bf00      	nop
 80076a2:	bf00      	nop
 80076a4:	e7fd      	b.n	80076a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80076a6:	4b0f      	ldr	r3, [pc, #60]	@ (80076e4 <vPortValidateInterruptPriority+0x7c>)
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80076ae:	4b0e      	ldr	r3, [pc, #56]	@ (80076e8 <vPortValidateInterruptPriority+0x80>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	429a      	cmp	r2, r3
 80076b4:	d90b      	bls.n	80076ce <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80076b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076ba:	f383 8811 	msr	BASEPRI, r3
 80076be:	f3bf 8f6f 	isb	sy
 80076c2:	f3bf 8f4f 	dsb	sy
 80076c6:	603b      	str	r3, [r7, #0]
}
 80076c8:	bf00      	nop
 80076ca:	bf00      	nop
 80076cc:	e7fd      	b.n	80076ca <vPortValidateInterruptPriority+0x62>
	}
 80076ce:	bf00      	nop
 80076d0:	3714      	adds	r7, #20
 80076d2:	46bd      	mov	sp, r7
 80076d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d8:	4770      	bx	lr
 80076da:	bf00      	nop
 80076dc:	e000e3f0 	.word	0xe000e3f0
 80076e0:	2000067c 	.word	0x2000067c
 80076e4:	e000ed0c 	.word	0xe000ed0c
 80076e8:	20000680 	.word	0x20000680

080076ec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b08a      	sub	sp, #40	@ 0x28
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80076f4:	2300      	movs	r3, #0
 80076f6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80076f8:	f7ff f9b2 	bl	8006a60 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80076fc:	4b5a      	ldr	r3, [pc, #360]	@ (8007868 <pvPortMalloc+0x17c>)
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d101      	bne.n	8007708 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007704:	f000 f916 	bl	8007934 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007708:	4b58      	ldr	r3, [pc, #352]	@ (800786c <pvPortMalloc+0x180>)
 800770a:	681a      	ldr	r2, [r3, #0]
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	4013      	ands	r3, r2
 8007710:	2b00      	cmp	r3, #0
 8007712:	f040 8090 	bne.w	8007836 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d01e      	beq.n	800775a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800771c:	2208      	movs	r2, #8
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	4413      	add	r3, r2
 8007722:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	f003 0307 	and.w	r3, r3, #7
 800772a:	2b00      	cmp	r3, #0
 800772c:	d015      	beq.n	800775a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	f023 0307 	bic.w	r3, r3, #7
 8007734:	3308      	adds	r3, #8
 8007736:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	f003 0307 	and.w	r3, r3, #7
 800773e:	2b00      	cmp	r3, #0
 8007740:	d00b      	beq.n	800775a <pvPortMalloc+0x6e>
	__asm volatile
 8007742:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007746:	f383 8811 	msr	BASEPRI, r3
 800774a:	f3bf 8f6f 	isb	sy
 800774e:	f3bf 8f4f 	dsb	sy
 8007752:	617b      	str	r3, [r7, #20]
}
 8007754:	bf00      	nop
 8007756:	bf00      	nop
 8007758:	e7fd      	b.n	8007756 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d06a      	beq.n	8007836 <pvPortMalloc+0x14a>
 8007760:	4b43      	ldr	r3, [pc, #268]	@ (8007870 <pvPortMalloc+0x184>)
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	687a      	ldr	r2, [r7, #4]
 8007766:	429a      	cmp	r2, r3
 8007768:	d865      	bhi.n	8007836 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800776a:	4b42      	ldr	r3, [pc, #264]	@ (8007874 <pvPortMalloc+0x188>)
 800776c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800776e:	4b41      	ldr	r3, [pc, #260]	@ (8007874 <pvPortMalloc+0x188>)
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007774:	e004      	b.n	8007780 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007778:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800777a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007782:	685b      	ldr	r3, [r3, #4]
 8007784:	687a      	ldr	r2, [r7, #4]
 8007786:	429a      	cmp	r2, r3
 8007788:	d903      	bls.n	8007792 <pvPortMalloc+0xa6>
 800778a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d1f1      	bne.n	8007776 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007792:	4b35      	ldr	r3, [pc, #212]	@ (8007868 <pvPortMalloc+0x17c>)
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007798:	429a      	cmp	r2, r3
 800779a:	d04c      	beq.n	8007836 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800779c:	6a3b      	ldr	r3, [r7, #32]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	2208      	movs	r2, #8
 80077a2:	4413      	add	r3, r2
 80077a4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80077a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077a8:	681a      	ldr	r2, [r3, #0]
 80077aa:	6a3b      	ldr	r3, [r7, #32]
 80077ac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80077ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077b0:	685a      	ldr	r2, [r3, #4]
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	1ad2      	subs	r2, r2, r3
 80077b6:	2308      	movs	r3, #8
 80077b8:	005b      	lsls	r3, r3, #1
 80077ba:	429a      	cmp	r2, r3
 80077bc:	d920      	bls.n	8007800 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80077be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	4413      	add	r3, r2
 80077c4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80077c6:	69bb      	ldr	r3, [r7, #24]
 80077c8:	f003 0307 	and.w	r3, r3, #7
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d00b      	beq.n	80077e8 <pvPortMalloc+0xfc>
	__asm volatile
 80077d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077d4:	f383 8811 	msr	BASEPRI, r3
 80077d8:	f3bf 8f6f 	isb	sy
 80077dc:	f3bf 8f4f 	dsb	sy
 80077e0:	613b      	str	r3, [r7, #16]
}
 80077e2:	bf00      	nop
 80077e4:	bf00      	nop
 80077e6:	e7fd      	b.n	80077e4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80077e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077ea:	685a      	ldr	r2, [r3, #4]
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	1ad2      	subs	r2, r2, r3
 80077f0:	69bb      	ldr	r3, [r7, #24]
 80077f2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80077f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077f6:	687a      	ldr	r2, [r7, #4]
 80077f8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80077fa:	69b8      	ldr	r0, [r7, #24]
 80077fc:	f000 f8fc 	bl	80079f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007800:	4b1b      	ldr	r3, [pc, #108]	@ (8007870 <pvPortMalloc+0x184>)
 8007802:	681a      	ldr	r2, [r3, #0]
 8007804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007806:	685b      	ldr	r3, [r3, #4]
 8007808:	1ad3      	subs	r3, r2, r3
 800780a:	4a19      	ldr	r2, [pc, #100]	@ (8007870 <pvPortMalloc+0x184>)
 800780c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800780e:	4b18      	ldr	r3, [pc, #96]	@ (8007870 <pvPortMalloc+0x184>)
 8007810:	681a      	ldr	r2, [r3, #0]
 8007812:	4b19      	ldr	r3, [pc, #100]	@ (8007878 <pvPortMalloc+0x18c>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	429a      	cmp	r2, r3
 8007818:	d203      	bcs.n	8007822 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800781a:	4b15      	ldr	r3, [pc, #84]	@ (8007870 <pvPortMalloc+0x184>)
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	4a16      	ldr	r2, [pc, #88]	@ (8007878 <pvPortMalloc+0x18c>)
 8007820:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007824:	685a      	ldr	r2, [r3, #4]
 8007826:	4b11      	ldr	r3, [pc, #68]	@ (800786c <pvPortMalloc+0x180>)
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	431a      	orrs	r2, r3
 800782c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800782e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007832:	2200      	movs	r2, #0
 8007834:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007836:	f7ff f921 	bl	8006a7c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800783a:	69fb      	ldr	r3, [r7, #28]
 800783c:	f003 0307 	and.w	r3, r3, #7
 8007840:	2b00      	cmp	r3, #0
 8007842:	d00b      	beq.n	800785c <pvPortMalloc+0x170>
	__asm volatile
 8007844:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007848:	f383 8811 	msr	BASEPRI, r3
 800784c:	f3bf 8f6f 	isb	sy
 8007850:	f3bf 8f4f 	dsb	sy
 8007854:	60fb      	str	r3, [r7, #12]
}
 8007856:	bf00      	nop
 8007858:	bf00      	nop
 800785a:	e7fd      	b.n	8007858 <pvPortMalloc+0x16c>
	return pvReturn;
 800785c:	69fb      	ldr	r3, [r7, #28]
}
 800785e:	4618      	mov	r0, r3
 8007860:	3728      	adds	r7, #40	@ 0x28
 8007862:	46bd      	mov	sp, r7
 8007864:	bd80      	pop	{r7, pc}
 8007866:	bf00      	nop
 8007868:	20002e8c 	.word	0x20002e8c
 800786c:	20002e98 	.word	0x20002e98
 8007870:	20002e90 	.word	0x20002e90
 8007874:	20002e84 	.word	0x20002e84
 8007878:	20002e94 	.word	0x20002e94

0800787c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b086      	sub	sp, #24
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d04a      	beq.n	8007924 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800788e:	2308      	movs	r3, #8
 8007890:	425b      	negs	r3, r3
 8007892:	697a      	ldr	r2, [r7, #20]
 8007894:	4413      	add	r3, r2
 8007896:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007898:	697b      	ldr	r3, [r7, #20]
 800789a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800789c:	693b      	ldr	r3, [r7, #16]
 800789e:	685a      	ldr	r2, [r3, #4]
 80078a0:	4b22      	ldr	r3, [pc, #136]	@ (800792c <vPortFree+0xb0>)
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	4013      	ands	r3, r2
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d10b      	bne.n	80078c2 <vPortFree+0x46>
	__asm volatile
 80078aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078ae:	f383 8811 	msr	BASEPRI, r3
 80078b2:	f3bf 8f6f 	isb	sy
 80078b6:	f3bf 8f4f 	dsb	sy
 80078ba:	60fb      	str	r3, [r7, #12]
}
 80078bc:	bf00      	nop
 80078be:	bf00      	nop
 80078c0:	e7fd      	b.n	80078be <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80078c2:	693b      	ldr	r3, [r7, #16]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d00b      	beq.n	80078e2 <vPortFree+0x66>
	__asm volatile
 80078ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078ce:	f383 8811 	msr	BASEPRI, r3
 80078d2:	f3bf 8f6f 	isb	sy
 80078d6:	f3bf 8f4f 	dsb	sy
 80078da:	60bb      	str	r3, [r7, #8]
}
 80078dc:	bf00      	nop
 80078de:	bf00      	nop
 80078e0:	e7fd      	b.n	80078de <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80078e2:	693b      	ldr	r3, [r7, #16]
 80078e4:	685a      	ldr	r2, [r3, #4]
 80078e6:	4b11      	ldr	r3, [pc, #68]	@ (800792c <vPortFree+0xb0>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	4013      	ands	r3, r2
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d019      	beq.n	8007924 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80078f0:	693b      	ldr	r3, [r7, #16]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d115      	bne.n	8007924 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80078f8:	693b      	ldr	r3, [r7, #16]
 80078fa:	685a      	ldr	r2, [r3, #4]
 80078fc:	4b0b      	ldr	r3, [pc, #44]	@ (800792c <vPortFree+0xb0>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	43db      	mvns	r3, r3
 8007902:	401a      	ands	r2, r3
 8007904:	693b      	ldr	r3, [r7, #16]
 8007906:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007908:	f7ff f8aa 	bl	8006a60 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800790c:	693b      	ldr	r3, [r7, #16]
 800790e:	685a      	ldr	r2, [r3, #4]
 8007910:	4b07      	ldr	r3, [pc, #28]	@ (8007930 <vPortFree+0xb4>)
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	4413      	add	r3, r2
 8007916:	4a06      	ldr	r2, [pc, #24]	@ (8007930 <vPortFree+0xb4>)
 8007918:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800791a:	6938      	ldr	r0, [r7, #16]
 800791c:	f000 f86c 	bl	80079f8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007920:	f7ff f8ac 	bl	8006a7c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007924:	bf00      	nop
 8007926:	3718      	adds	r7, #24
 8007928:	46bd      	mov	sp, r7
 800792a:	bd80      	pop	{r7, pc}
 800792c:	20002e98 	.word	0x20002e98
 8007930:	20002e90 	.word	0x20002e90

08007934 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007934:	b480      	push	{r7}
 8007936:	b085      	sub	sp, #20
 8007938:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800793a:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800793e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007940:	4b27      	ldr	r3, [pc, #156]	@ (80079e0 <prvHeapInit+0xac>)
 8007942:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	f003 0307 	and.w	r3, r3, #7
 800794a:	2b00      	cmp	r3, #0
 800794c:	d00c      	beq.n	8007968 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	3307      	adds	r3, #7
 8007952:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	f023 0307 	bic.w	r3, r3, #7
 800795a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800795c:	68ba      	ldr	r2, [r7, #8]
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	1ad3      	subs	r3, r2, r3
 8007962:	4a1f      	ldr	r2, [pc, #124]	@ (80079e0 <prvHeapInit+0xac>)
 8007964:	4413      	add	r3, r2
 8007966:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800796c:	4a1d      	ldr	r2, [pc, #116]	@ (80079e4 <prvHeapInit+0xb0>)
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007972:	4b1c      	ldr	r3, [pc, #112]	@ (80079e4 <prvHeapInit+0xb0>)
 8007974:	2200      	movs	r2, #0
 8007976:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	68ba      	ldr	r2, [r7, #8]
 800797c:	4413      	add	r3, r2
 800797e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007980:	2208      	movs	r2, #8
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	1a9b      	subs	r3, r3, r2
 8007986:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	f023 0307 	bic.w	r3, r3, #7
 800798e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	4a15      	ldr	r2, [pc, #84]	@ (80079e8 <prvHeapInit+0xb4>)
 8007994:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007996:	4b14      	ldr	r3, [pc, #80]	@ (80079e8 <prvHeapInit+0xb4>)
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	2200      	movs	r2, #0
 800799c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800799e:	4b12      	ldr	r3, [pc, #72]	@ (80079e8 <prvHeapInit+0xb4>)
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	2200      	movs	r2, #0
 80079a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	68fa      	ldr	r2, [r7, #12]
 80079ae:	1ad2      	subs	r2, r2, r3
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80079b4:	4b0c      	ldr	r3, [pc, #48]	@ (80079e8 <prvHeapInit+0xb4>)
 80079b6:	681a      	ldr	r2, [r3, #0]
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	685b      	ldr	r3, [r3, #4]
 80079c0:	4a0a      	ldr	r2, [pc, #40]	@ (80079ec <prvHeapInit+0xb8>)
 80079c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	685b      	ldr	r3, [r3, #4]
 80079c8:	4a09      	ldr	r2, [pc, #36]	@ (80079f0 <prvHeapInit+0xbc>)
 80079ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80079cc:	4b09      	ldr	r3, [pc, #36]	@ (80079f4 <prvHeapInit+0xc0>)
 80079ce:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80079d2:	601a      	str	r2, [r3, #0]
}
 80079d4:	bf00      	nop
 80079d6:	3714      	adds	r7, #20
 80079d8:	46bd      	mov	sp, r7
 80079da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079de:	4770      	bx	lr
 80079e0:	20000684 	.word	0x20000684
 80079e4:	20002e84 	.word	0x20002e84
 80079e8:	20002e8c 	.word	0x20002e8c
 80079ec:	20002e94 	.word	0x20002e94
 80079f0:	20002e90 	.word	0x20002e90
 80079f4:	20002e98 	.word	0x20002e98

080079f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80079f8:	b480      	push	{r7}
 80079fa:	b085      	sub	sp, #20
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007a00:	4b28      	ldr	r3, [pc, #160]	@ (8007aa4 <prvInsertBlockIntoFreeList+0xac>)
 8007a02:	60fb      	str	r3, [r7, #12]
 8007a04:	e002      	b.n	8007a0c <prvInsertBlockIntoFreeList+0x14>
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	60fb      	str	r3, [r7, #12]
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	687a      	ldr	r2, [r7, #4]
 8007a12:	429a      	cmp	r2, r3
 8007a14:	d8f7      	bhi.n	8007a06 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	685b      	ldr	r3, [r3, #4]
 8007a1e:	68ba      	ldr	r2, [r7, #8]
 8007a20:	4413      	add	r3, r2
 8007a22:	687a      	ldr	r2, [r7, #4]
 8007a24:	429a      	cmp	r2, r3
 8007a26:	d108      	bne.n	8007a3a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	685a      	ldr	r2, [r3, #4]
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	685b      	ldr	r3, [r3, #4]
 8007a30:	441a      	add	r2, r3
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	685b      	ldr	r3, [r3, #4]
 8007a42:	68ba      	ldr	r2, [r7, #8]
 8007a44:	441a      	add	r2, r3
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	429a      	cmp	r2, r3
 8007a4c:	d118      	bne.n	8007a80 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	681a      	ldr	r2, [r3, #0]
 8007a52:	4b15      	ldr	r3, [pc, #84]	@ (8007aa8 <prvInsertBlockIntoFreeList+0xb0>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	429a      	cmp	r2, r3
 8007a58:	d00d      	beq.n	8007a76 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	685a      	ldr	r2, [r3, #4]
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	685b      	ldr	r3, [r3, #4]
 8007a64:	441a      	add	r2, r3
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	681a      	ldr	r2, [r3, #0]
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	601a      	str	r2, [r3, #0]
 8007a74:	e008      	b.n	8007a88 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007a76:	4b0c      	ldr	r3, [pc, #48]	@ (8007aa8 <prvInsertBlockIntoFreeList+0xb0>)
 8007a78:	681a      	ldr	r2, [r3, #0]
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	601a      	str	r2, [r3, #0]
 8007a7e:	e003      	b.n	8007a88 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	681a      	ldr	r2, [r3, #0]
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007a88:	68fa      	ldr	r2, [r7, #12]
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	429a      	cmp	r2, r3
 8007a8e:	d002      	beq.n	8007a96 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	687a      	ldr	r2, [r7, #4]
 8007a94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007a96:	bf00      	nop
 8007a98:	3714      	adds	r7, #20
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa0:	4770      	bx	lr
 8007aa2:	bf00      	nop
 8007aa4:	20002e84 	.word	0x20002e84
 8007aa8:	20002e8c 	.word	0x20002e8c

08007aac <sniprintf>:
 8007aac:	b40c      	push	{r2, r3}
 8007aae:	b530      	push	{r4, r5, lr}
 8007ab0:	4b17      	ldr	r3, [pc, #92]	@ (8007b10 <sniprintf+0x64>)
 8007ab2:	1e0c      	subs	r4, r1, #0
 8007ab4:	681d      	ldr	r5, [r3, #0]
 8007ab6:	b09d      	sub	sp, #116	@ 0x74
 8007ab8:	da08      	bge.n	8007acc <sniprintf+0x20>
 8007aba:	238b      	movs	r3, #139	@ 0x8b
 8007abc:	602b      	str	r3, [r5, #0]
 8007abe:	f04f 30ff 	mov.w	r0, #4294967295
 8007ac2:	b01d      	add	sp, #116	@ 0x74
 8007ac4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007ac8:	b002      	add	sp, #8
 8007aca:	4770      	bx	lr
 8007acc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007ad0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007ad4:	bf14      	ite	ne
 8007ad6:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007ada:	4623      	moveq	r3, r4
 8007adc:	9304      	str	r3, [sp, #16]
 8007ade:	9307      	str	r3, [sp, #28]
 8007ae0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007ae4:	9002      	str	r0, [sp, #8]
 8007ae6:	9006      	str	r0, [sp, #24]
 8007ae8:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007aec:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007aee:	ab21      	add	r3, sp, #132	@ 0x84
 8007af0:	a902      	add	r1, sp, #8
 8007af2:	4628      	mov	r0, r5
 8007af4:	9301      	str	r3, [sp, #4]
 8007af6:	f000 f9a3 	bl	8007e40 <_svfiprintf_r>
 8007afa:	1c43      	adds	r3, r0, #1
 8007afc:	bfbc      	itt	lt
 8007afe:	238b      	movlt	r3, #139	@ 0x8b
 8007b00:	602b      	strlt	r3, [r5, #0]
 8007b02:	2c00      	cmp	r4, #0
 8007b04:	d0dd      	beq.n	8007ac2 <sniprintf+0x16>
 8007b06:	9b02      	ldr	r3, [sp, #8]
 8007b08:	2200      	movs	r2, #0
 8007b0a:	701a      	strb	r2, [r3, #0]
 8007b0c:	e7d9      	b.n	8007ac2 <sniprintf+0x16>
 8007b0e:	bf00      	nop
 8007b10:	20000014 	.word	0x20000014

08007b14 <memset>:
 8007b14:	4402      	add	r2, r0
 8007b16:	4603      	mov	r3, r0
 8007b18:	4293      	cmp	r3, r2
 8007b1a:	d100      	bne.n	8007b1e <memset+0xa>
 8007b1c:	4770      	bx	lr
 8007b1e:	f803 1b01 	strb.w	r1, [r3], #1
 8007b22:	e7f9      	b.n	8007b18 <memset+0x4>

08007b24 <__errno>:
 8007b24:	4b01      	ldr	r3, [pc, #4]	@ (8007b2c <__errno+0x8>)
 8007b26:	6818      	ldr	r0, [r3, #0]
 8007b28:	4770      	bx	lr
 8007b2a:	bf00      	nop
 8007b2c:	20000014 	.word	0x20000014

08007b30 <__libc_init_array>:
 8007b30:	b570      	push	{r4, r5, r6, lr}
 8007b32:	4d0d      	ldr	r5, [pc, #52]	@ (8007b68 <__libc_init_array+0x38>)
 8007b34:	4c0d      	ldr	r4, [pc, #52]	@ (8007b6c <__libc_init_array+0x3c>)
 8007b36:	1b64      	subs	r4, r4, r5
 8007b38:	10a4      	asrs	r4, r4, #2
 8007b3a:	2600      	movs	r6, #0
 8007b3c:	42a6      	cmp	r6, r4
 8007b3e:	d109      	bne.n	8007b54 <__libc_init_array+0x24>
 8007b40:	4d0b      	ldr	r5, [pc, #44]	@ (8007b70 <__libc_init_array+0x40>)
 8007b42:	4c0c      	ldr	r4, [pc, #48]	@ (8007b74 <__libc_init_array+0x44>)
 8007b44:	f000 fc66 	bl	8008414 <_init>
 8007b48:	1b64      	subs	r4, r4, r5
 8007b4a:	10a4      	asrs	r4, r4, #2
 8007b4c:	2600      	movs	r6, #0
 8007b4e:	42a6      	cmp	r6, r4
 8007b50:	d105      	bne.n	8007b5e <__libc_init_array+0x2e>
 8007b52:	bd70      	pop	{r4, r5, r6, pc}
 8007b54:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b58:	4798      	blx	r3
 8007b5a:	3601      	adds	r6, #1
 8007b5c:	e7ee      	b.n	8007b3c <__libc_init_array+0xc>
 8007b5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b62:	4798      	blx	r3
 8007b64:	3601      	adds	r6, #1
 8007b66:	e7f2      	b.n	8007b4e <__libc_init_array+0x1e>
 8007b68:	08008598 	.word	0x08008598
 8007b6c:	08008598 	.word	0x08008598
 8007b70:	08008598 	.word	0x08008598
 8007b74:	0800859c 	.word	0x0800859c

08007b78 <__retarget_lock_acquire_recursive>:
 8007b78:	4770      	bx	lr

08007b7a <__retarget_lock_release_recursive>:
 8007b7a:	4770      	bx	lr

08007b7c <memcpy>:
 8007b7c:	440a      	add	r2, r1
 8007b7e:	4291      	cmp	r1, r2
 8007b80:	f100 33ff 	add.w	r3, r0, #4294967295
 8007b84:	d100      	bne.n	8007b88 <memcpy+0xc>
 8007b86:	4770      	bx	lr
 8007b88:	b510      	push	{r4, lr}
 8007b8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b8e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b92:	4291      	cmp	r1, r2
 8007b94:	d1f9      	bne.n	8007b8a <memcpy+0xe>
 8007b96:	bd10      	pop	{r4, pc}

08007b98 <_free_r>:
 8007b98:	b538      	push	{r3, r4, r5, lr}
 8007b9a:	4605      	mov	r5, r0
 8007b9c:	2900      	cmp	r1, #0
 8007b9e:	d041      	beq.n	8007c24 <_free_r+0x8c>
 8007ba0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ba4:	1f0c      	subs	r4, r1, #4
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	bfb8      	it	lt
 8007baa:	18e4      	addlt	r4, r4, r3
 8007bac:	f000 f8e0 	bl	8007d70 <__malloc_lock>
 8007bb0:	4a1d      	ldr	r2, [pc, #116]	@ (8007c28 <_free_r+0x90>)
 8007bb2:	6813      	ldr	r3, [r2, #0]
 8007bb4:	b933      	cbnz	r3, 8007bc4 <_free_r+0x2c>
 8007bb6:	6063      	str	r3, [r4, #4]
 8007bb8:	6014      	str	r4, [r2, #0]
 8007bba:	4628      	mov	r0, r5
 8007bbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007bc0:	f000 b8dc 	b.w	8007d7c <__malloc_unlock>
 8007bc4:	42a3      	cmp	r3, r4
 8007bc6:	d908      	bls.n	8007bda <_free_r+0x42>
 8007bc8:	6820      	ldr	r0, [r4, #0]
 8007bca:	1821      	adds	r1, r4, r0
 8007bcc:	428b      	cmp	r3, r1
 8007bce:	bf01      	itttt	eq
 8007bd0:	6819      	ldreq	r1, [r3, #0]
 8007bd2:	685b      	ldreq	r3, [r3, #4]
 8007bd4:	1809      	addeq	r1, r1, r0
 8007bd6:	6021      	streq	r1, [r4, #0]
 8007bd8:	e7ed      	b.n	8007bb6 <_free_r+0x1e>
 8007bda:	461a      	mov	r2, r3
 8007bdc:	685b      	ldr	r3, [r3, #4]
 8007bde:	b10b      	cbz	r3, 8007be4 <_free_r+0x4c>
 8007be0:	42a3      	cmp	r3, r4
 8007be2:	d9fa      	bls.n	8007bda <_free_r+0x42>
 8007be4:	6811      	ldr	r1, [r2, #0]
 8007be6:	1850      	adds	r0, r2, r1
 8007be8:	42a0      	cmp	r0, r4
 8007bea:	d10b      	bne.n	8007c04 <_free_r+0x6c>
 8007bec:	6820      	ldr	r0, [r4, #0]
 8007bee:	4401      	add	r1, r0
 8007bf0:	1850      	adds	r0, r2, r1
 8007bf2:	4283      	cmp	r3, r0
 8007bf4:	6011      	str	r1, [r2, #0]
 8007bf6:	d1e0      	bne.n	8007bba <_free_r+0x22>
 8007bf8:	6818      	ldr	r0, [r3, #0]
 8007bfa:	685b      	ldr	r3, [r3, #4]
 8007bfc:	6053      	str	r3, [r2, #4]
 8007bfe:	4408      	add	r0, r1
 8007c00:	6010      	str	r0, [r2, #0]
 8007c02:	e7da      	b.n	8007bba <_free_r+0x22>
 8007c04:	d902      	bls.n	8007c0c <_free_r+0x74>
 8007c06:	230c      	movs	r3, #12
 8007c08:	602b      	str	r3, [r5, #0]
 8007c0a:	e7d6      	b.n	8007bba <_free_r+0x22>
 8007c0c:	6820      	ldr	r0, [r4, #0]
 8007c0e:	1821      	adds	r1, r4, r0
 8007c10:	428b      	cmp	r3, r1
 8007c12:	bf04      	itt	eq
 8007c14:	6819      	ldreq	r1, [r3, #0]
 8007c16:	685b      	ldreq	r3, [r3, #4]
 8007c18:	6063      	str	r3, [r4, #4]
 8007c1a:	bf04      	itt	eq
 8007c1c:	1809      	addeq	r1, r1, r0
 8007c1e:	6021      	streq	r1, [r4, #0]
 8007c20:	6054      	str	r4, [r2, #4]
 8007c22:	e7ca      	b.n	8007bba <_free_r+0x22>
 8007c24:	bd38      	pop	{r3, r4, r5, pc}
 8007c26:	bf00      	nop
 8007c28:	20002fe0 	.word	0x20002fe0

08007c2c <sbrk_aligned>:
 8007c2c:	b570      	push	{r4, r5, r6, lr}
 8007c2e:	4e0f      	ldr	r6, [pc, #60]	@ (8007c6c <sbrk_aligned+0x40>)
 8007c30:	460c      	mov	r4, r1
 8007c32:	6831      	ldr	r1, [r6, #0]
 8007c34:	4605      	mov	r5, r0
 8007c36:	b911      	cbnz	r1, 8007c3e <sbrk_aligned+0x12>
 8007c38:	f000 fba6 	bl	8008388 <_sbrk_r>
 8007c3c:	6030      	str	r0, [r6, #0]
 8007c3e:	4621      	mov	r1, r4
 8007c40:	4628      	mov	r0, r5
 8007c42:	f000 fba1 	bl	8008388 <_sbrk_r>
 8007c46:	1c43      	adds	r3, r0, #1
 8007c48:	d103      	bne.n	8007c52 <sbrk_aligned+0x26>
 8007c4a:	f04f 34ff 	mov.w	r4, #4294967295
 8007c4e:	4620      	mov	r0, r4
 8007c50:	bd70      	pop	{r4, r5, r6, pc}
 8007c52:	1cc4      	adds	r4, r0, #3
 8007c54:	f024 0403 	bic.w	r4, r4, #3
 8007c58:	42a0      	cmp	r0, r4
 8007c5a:	d0f8      	beq.n	8007c4e <sbrk_aligned+0x22>
 8007c5c:	1a21      	subs	r1, r4, r0
 8007c5e:	4628      	mov	r0, r5
 8007c60:	f000 fb92 	bl	8008388 <_sbrk_r>
 8007c64:	3001      	adds	r0, #1
 8007c66:	d1f2      	bne.n	8007c4e <sbrk_aligned+0x22>
 8007c68:	e7ef      	b.n	8007c4a <sbrk_aligned+0x1e>
 8007c6a:	bf00      	nop
 8007c6c:	20002fdc 	.word	0x20002fdc

08007c70 <_malloc_r>:
 8007c70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c74:	1ccd      	adds	r5, r1, #3
 8007c76:	f025 0503 	bic.w	r5, r5, #3
 8007c7a:	3508      	adds	r5, #8
 8007c7c:	2d0c      	cmp	r5, #12
 8007c7e:	bf38      	it	cc
 8007c80:	250c      	movcc	r5, #12
 8007c82:	2d00      	cmp	r5, #0
 8007c84:	4606      	mov	r6, r0
 8007c86:	db01      	blt.n	8007c8c <_malloc_r+0x1c>
 8007c88:	42a9      	cmp	r1, r5
 8007c8a:	d904      	bls.n	8007c96 <_malloc_r+0x26>
 8007c8c:	230c      	movs	r3, #12
 8007c8e:	6033      	str	r3, [r6, #0]
 8007c90:	2000      	movs	r0, #0
 8007c92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c96:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007d6c <_malloc_r+0xfc>
 8007c9a:	f000 f869 	bl	8007d70 <__malloc_lock>
 8007c9e:	f8d8 3000 	ldr.w	r3, [r8]
 8007ca2:	461c      	mov	r4, r3
 8007ca4:	bb44      	cbnz	r4, 8007cf8 <_malloc_r+0x88>
 8007ca6:	4629      	mov	r1, r5
 8007ca8:	4630      	mov	r0, r6
 8007caa:	f7ff ffbf 	bl	8007c2c <sbrk_aligned>
 8007cae:	1c43      	adds	r3, r0, #1
 8007cb0:	4604      	mov	r4, r0
 8007cb2:	d158      	bne.n	8007d66 <_malloc_r+0xf6>
 8007cb4:	f8d8 4000 	ldr.w	r4, [r8]
 8007cb8:	4627      	mov	r7, r4
 8007cba:	2f00      	cmp	r7, #0
 8007cbc:	d143      	bne.n	8007d46 <_malloc_r+0xd6>
 8007cbe:	2c00      	cmp	r4, #0
 8007cc0:	d04b      	beq.n	8007d5a <_malloc_r+0xea>
 8007cc2:	6823      	ldr	r3, [r4, #0]
 8007cc4:	4639      	mov	r1, r7
 8007cc6:	4630      	mov	r0, r6
 8007cc8:	eb04 0903 	add.w	r9, r4, r3
 8007ccc:	f000 fb5c 	bl	8008388 <_sbrk_r>
 8007cd0:	4581      	cmp	r9, r0
 8007cd2:	d142      	bne.n	8007d5a <_malloc_r+0xea>
 8007cd4:	6821      	ldr	r1, [r4, #0]
 8007cd6:	1a6d      	subs	r5, r5, r1
 8007cd8:	4629      	mov	r1, r5
 8007cda:	4630      	mov	r0, r6
 8007cdc:	f7ff ffa6 	bl	8007c2c <sbrk_aligned>
 8007ce0:	3001      	adds	r0, #1
 8007ce2:	d03a      	beq.n	8007d5a <_malloc_r+0xea>
 8007ce4:	6823      	ldr	r3, [r4, #0]
 8007ce6:	442b      	add	r3, r5
 8007ce8:	6023      	str	r3, [r4, #0]
 8007cea:	f8d8 3000 	ldr.w	r3, [r8]
 8007cee:	685a      	ldr	r2, [r3, #4]
 8007cf0:	bb62      	cbnz	r2, 8007d4c <_malloc_r+0xdc>
 8007cf2:	f8c8 7000 	str.w	r7, [r8]
 8007cf6:	e00f      	b.n	8007d18 <_malloc_r+0xa8>
 8007cf8:	6822      	ldr	r2, [r4, #0]
 8007cfa:	1b52      	subs	r2, r2, r5
 8007cfc:	d420      	bmi.n	8007d40 <_malloc_r+0xd0>
 8007cfe:	2a0b      	cmp	r2, #11
 8007d00:	d917      	bls.n	8007d32 <_malloc_r+0xc2>
 8007d02:	1961      	adds	r1, r4, r5
 8007d04:	42a3      	cmp	r3, r4
 8007d06:	6025      	str	r5, [r4, #0]
 8007d08:	bf18      	it	ne
 8007d0a:	6059      	strne	r1, [r3, #4]
 8007d0c:	6863      	ldr	r3, [r4, #4]
 8007d0e:	bf08      	it	eq
 8007d10:	f8c8 1000 	streq.w	r1, [r8]
 8007d14:	5162      	str	r2, [r4, r5]
 8007d16:	604b      	str	r3, [r1, #4]
 8007d18:	4630      	mov	r0, r6
 8007d1a:	f000 f82f 	bl	8007d7c <__malloc_unlock>
 8007d1e:	f104 000b 	add.w	r0, r4, #11
 8007d22:	1d23      	adds	r3, r4, #4
 8007d24:	f020 0007 	bic.w	r0, r0, #7
 8007d28:	1ac2      	subs	r2, r0, r3
 8007d2a:	bf1c      	itt	ne
 8007d2c:	1a1b      	subne	r3, r3, r0
 8007d2e:	50a3      	strne	r3, [r4, r2]
 8007d30:	e7af      	b.n	8007c92 <_malloc_r+0x22>
 8007d32:	6862      	ldr	r2, [r4, #4]
 8007d34:	42a3      	cmp	r3, r4
 8007d36:	bf0c      	ite	eq
 8007d38:	f8c8 2000 	streq.w	r2, [r8]
 8007d3c:	605a      	strne	r2, [r3, #4]
 8007d3e:	e7eb      	b.n	8007d18 <_malloc_r+0xa8>
 8007d40:	4623      	mov	r3, r4
 8007d42:	6864      	ldr	r4, [r4, #4]
 8007d44:	e7ae      	b.n	8007ca4 <_malloc_r+0x34>
 8007d46:	463c      	mov	r4, r7
 8007d48:	687f      	ldr	r7, [r7, #4]
 8007d4a:	e7b6      	b.n	8007cba <_malloc_r+0x4a>
 8007d4c:	461a      	mov	r2, r3
 8007d4e:	685b      	ldr	r3, [r3, #4]
 8007d50:	42a3      	cmp	r3, r4
 8007d52:	d1fb      	bne.n	8007d4c <_malloc_r+0xdc>
 8007d54:	2300      	movs	r3, #0
 8007d56:	6053      	str	r3, [r2, #4]
 8007d58:	e7de      	b.n	8007d18 <_malloc_r+0xa8>
 8007d5a:	230c      	movs	r3, #12
 8007d5c:	6033      	str	r3, [r6, #0]
 8007d5e:	4630      	mov	r0, r6
 8007d60:	f000 f80c 	bl	8007d7c <__malloc_unlock>
 8007d64:	e794      	b.n	8007c90 <_malloc_r+0x20>
 8007d66:	6005      	str	r5, [r0, #0]
 8007d68:	e7d6      	b.n	8007d18 <_malloc_r+0xa8>
 8007d6a:	bf00      	nop
 8007d6c:	20002fe0 	.word	0x20002fe0

08007d70 <__malloc_lock>:
 8007d70:	4801      	ldr	r0, [pc, #4]	@ (8007d78 <__malloc_lock+0x8>)
 8007d72:	f7ff bf01 	b.w	8007b78 <__retarget_lock_acquire_recursive>
 8007d76:	bf00      	nop
 8007d78:	20002fd8 	.word	0x20002fd8

08007d7c <__malloc_unlock>:
 8007d7c:	4801      	ldr	r0, [pc, #4]	@ (8007d84 <__malloc_unlock+0x8>)
 8007d7e:	f7ff befc 	b.w	8007b7a <__retarget_lock_release_recursive>
 8007d82:	bf00      	nop
 8007d84:	20002fd8 	.word	0x20002fd8

08007d88 <__ssputs_r>:
 8007d88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d8c:	688e      	ldr	r6, [r1, #8]
 8007d8e:	461f      	mov	r7, r3
 8007d90:	42be      	cmp	r6, r7
 8007d92:	680b      	ldr	r3, [r1, #0]
 8007d94:	4682      	mov	sl, r0
 8007d96:	460c      	mov	r4, r1
 8007d98:	4690      	mov	r8, r2
 8007d9a:	d82d      	bhi.n	8007df8 <__ssputs_r+0x70>
 8007d9c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007da0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007da4:	d026      	beq.n	8007df4 <__ssputs_r+0x6c>
 8007da6:	6965      	ldr	r5, [r4, #20]
 8007da8:	6909      	ldr	r1, [r1, #16]
 8007daa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007dae:	eba3 0901 	sub.w	r9, r3, r1
 8007db2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007db6:	1c7b      	adds	r3, r7, #1
 8007db8:	444b      	add	r3, r9
 8007dba:	106d      	asrs	r5, r5, #1
 8007dbc:	429d      	cmp	r5, r3
 8007dbe:	bf38      	it	cc
 8007dc0:	461d      	movcc	r5, r3
 8007dc2:	0553      	lsls	r3, r2, #21
 8007dc4:	d527      	bpl.n	8007e16 <__ssputs_r+0x8e>
 8007dc6:	4629      	mov	r1, r5
 8007dc8:	f7ff ff52 	bl	8007c70 <_malloc_r>
 8007dcc:	4606      	mov	r6, r0
 8007dce:	b360      	cbz	r0, 8007e2a <__ssputs_r+0xa2>
 8007dd0:	6921      	ldr	r1, [r4, #16]
 8007dd2:	464a      	mov	r2, r9
 8007dd4:	f7ff fed2 	bl	8007b7c <memcpy>
 8007dd8:	89a3      	ldrh	r3, [r4, #12]
 8007dda:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007dde:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007de2:	81a3      	strh	r3, [r4, #12]
 8007de4:	6126      	str	r6, [r4, #16]
 8007de6:	6165      	str	r5, [r4, #20]
 8007de8:	444e      	add	r6, r9
 8007dea:	eba5 0509 	sub.w	r5, r5, r9
 8007dee:	6026      	str	r6, [r4, #0]
 8007df0:	60a5      	str	r5, [r4, #8]
 8007df2:	463e      	mov	r6, r7
 8007df4:	42be      	cmp	r6, r7
 8007df6:	d900      	bls.n	8007dfa <__ssputs_r+0x72>
 8007df8:	463e      	mov	r6, r7
 8007dfa:	6820      	ldr	r0, [r4, #0]
 8007dfc:	4632      	mov	r2, r6
 8007dfe:	4641      	mov	r1, r8
 8007e00:	f000 faa8 	bl	8008354 <memmove>
 8007e04:	68a3      	ldr	r3, [r4, #8]
 8007e06:	1b9b      	subs	r3, r3, r6
 8007e08:	60a3      	str	r3, [r4, #8]
 8007e0a:	6823      	ldr	r3, [r4, #0]
 8007e0c:	4433      	add	r3, r6
 8007e0e:	6023      	str	r3, [r4, #0]
 8007e10:	2000      	movs	r0, #0
 8007e12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e16:	462a      	mov	r2, r5
 8007e18:	f000 fac6 	bl	80083a8 <_realloc_r>
 8007e1c:	4606      	mov	r6, r0
 8007e1e:	2800      	cmp	r0, #0
 8007e20:	d1e0      	bne.n	8007de4 <__ssputs_r+0x5c>
 8007e22:	6921      	ldr	r1, [r4, #16]
 8007e24:	4650      	mov	r0, sl
 8007e26:	f7ff feb7 	bl	8007b98 <_free_r>
 8007e2a:	230c      	movs	r3, #12
 8007e2c:	f8ca 3000 	str.w	r3, [sl]
 8007e30:	89a3      	ldrh	r3, [r4, #12]
 8007e32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007e36:	81a3      	strh	r3, [r4, #12]
 8007e38:	f04f 30ff 	mov.w	r0, #4294967295
 8007e3c:	e7e9      	b.n	8007e12 <__ssputs_r+0x8a>
	...

08007e40 <_svfiprintf_r>:
 8007e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e44:	4698      	mov	r8, r3
 8007e46:	898b      	ldrh	r3, [r1, #12]
 8007e48:	061b      	lsls	r3, r3, #24
 8007e4a:	b09d      	sub	sp, #116	@ 0x74
 8007e4c:	4607      	mov	r7, r0
 8007e4e:	460d      	mov	r5, r1
 8007e50:	4614      	mov	r4, r2
 8007e52:	d510      	bpl.n	8007e76 <_svfiprintf_r+0x36>
 8007e54:	690b      	ldr	r3, [r1, #16]
 8007e56:	b973      	cbnz	r3, 8007e76 <_svfiprintf_r+0x36>
 8007e58:	2140      	movs	r1, #64	@ 0x40
 8007e5a:	f7ff ff09 	bl	8007c70 <_malloc_r>
 8007e5e:	6028      	str	r0, [r5, #0]
 8007e60:	6128      	str	r0, [r5, #16]
 8007e62:	b930      	cbnz	r0, 8007e72 <_svfiprintf_r+0x32>
 8007e64:	230c      	movs	r3, #12
 8007e66:	603b      	str	r3, [r7, #0]
 8007e68:	f04f 30ff 	mov.w	r0, #4294967295
 8007e6c:	b01d      	add	sp, #116	@ 0x74
 8007e6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e72:	2340      	movs	r3, #64	@ 0x40
 8007e74:	616b      	str	r3, [r5, #20]
 8007e76:	2300      	movs	r3, #0
 8007e78:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e7a:	2320      	movs	r3, #32
 8007e7c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007e80:	f8cd 800c 	str.w	r8, [sp, #12]
 8007e84:	2330      	movs	r3, #48	@ 0x30
 8007e86:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008024 <_svfiprintf_r+0x1e4>
 8007e8a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007e8e:	f04f 0901 	mov.w	r9, #1
 8007e92:	4623      	mov	r3, r4
 8007e94:	469a      	mov	sl, r3
 8007e96:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007e9a:	b10a      	cbz	r2, 8007ea0 <_svfiprintf_r+0x60>
 8007e9c:	2a25      	cmp	r2, #37	@ 0x25
 8007e9e:	d1f9      	bne.n	8007e94 <_svfiprintf_r+0x54>
 8007ea0:	ebba 0b04 	subs.w	fp, sl, r4
 8007ea4:	d00b      	beq.n	8007ebe <_svfiprintf_r+0x7e>
 8007ea6:	465b      	mov	r3, fp
 8007ea8:	4622      	mov	r2, r4
 8007eaa:	4629      	mov	r1, r5
 8007eac:	4638      	mov	r0, r7
 8007eae:	f7ff ff6b 	bl	8007d88 <__ssputs_r>
 8007eb2:	3001      	adds	r0, #1
 8007eb4:	f000 80a7 	beq.w	8008006 <_svfiprintf_r+0x1c6>
 8007eb8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007eba:	445a      	add	r2, fp
 8007ebc:	9209      	str	r2, [sp, #36]	@ 0x24
 8007ebe:	f89a 3000 	ldrb.w	r3, [sl]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	f000 809f 	beq.w	8008006 <_svfiprintf_r+0x1c6>
 8007ec8:	2300      	movs	r3, #0
 8007eca:	f04f 32ff 	mov.w	r2, #4294967295
 8007ece:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007ed2:	f10a 0a01 	add.w	sl, sl, #1
 8007ed6:	9304      	str	r3, [sp, #16]
 8007ed8:	9307      	str	r3, [sp, #28]
 8007eda:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007ede:	931a      	str	r3, [sp, #104]	@ 0x68
 8007ee0:	4654      	mov	r4, sl
 8007ee2:	2205      	movs	r2, #5
 8007ee4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ee8:	484e      	ldr	r0, [pc, #312]	@ (8008024 <_svfiprintf_r+0x1e4>)
 8007eea:	f7f8 f979 	bl	80001e0 <memchr>
 8007eee:	9a04      	ldr	r2, [sp, #16]
 8007ef0:	b9d8      	cbnz	r0, 8007f2a <_svfiprintf_r+0xea>
 8007ef2:	06d0      	lsls	r0, r2, #27
 8007ef4:	bf44      	itt	mi
 8007ef6:	2320      	movmi	r3, #32
 8007ef8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007efc:	0711      	lsls	r1, r2, #28
 8007efe:	bf44      	itt	mi
 8007f00:	232b      	movmi	r3, #43	@ 0x2b
 8007f02:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007f06:	f89a 3000 	ldrb.w	r3, [sl]
 8007f0a:	2b2a      	cmp	r3, #42	@ 0x2a
 8007f0c:	d015      	beq.n	8007f3a <_svfiprintf_r+0xfa>
 8007f0e:	9a07      	ldr	r2, [sp, #28]
 8007f10:	4654      	mov	r4, sl
 8007f12:	2000      	movs	r0, #0
 8007f14:	f04f 0c0a 	mov.w	ip, #10
 8007f18:	4621      	mov	r1, r4
 8007f1a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007f1e:	3b30      	subs	r3, #48	@ 0x30
 8007f20:	2b09      	cmp	r3, #9
 8007f22:	d94b      	bls.n	8007fbc <_svfiprintf_r+0x17c>
 8007f24:	b1b0      	cbz	r0, 8007f54 <_svfiprintf_r+0x114>
 8007f26:	9207      	str	r2, [sp, #28]
 8007f28:	e014      	b.n	8007f54 <_svfiprintf_r+0x114>
 8007f2a:	eba0 0308 	sub.w	r3, r0, r8
 8007f2e:	fa09 f303 	lsl.w	r3, r9, r3
 8007f32:	4313      	orrs	r3, r2
 8007f34:	9304      	str	r3, [sp, #16]
 8007f36:	46a2      	mov	sl, r4
 8007f38:	e7d2      	b.n	8007ee0 <_svfiprintf_r+0xa0>
 8007f3a:	9b03      	ldr	r3, [sp, #12]
 8007f3c:	1d19      	adds	r1, r3, #4
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	9103      	str	r1, [sp, #12]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	bfbb      	ittet	lt
 8007f46:	425b      	neglt	r3, r3
 8007f48:	f042 0202 	orrlt.w	r2, r2, #2
 8007f4c:	9307      	strge	r3, [sp, #28]
 8007f4e:	9307      	strlt	r3, [sp, #28]
 8007f50:	bfb8      	it	lt
 8007f52:	9204      	strlt	r2, [sp, #16]
 8007f54:	7823      	ldrb	r3, [r4, #0]
 8007f56:	2b2e      	cmp	r3, #46	@ 0x2e
 8007f58:	d10a      	bne.n	8007f70 <_svfiprintf_r+0x130>
 8007f5a:	7863      	ldrb	r3, [r4, #1]
 8007f5c:	2b2a      	cmp	r3, #42	@ 0x2a
 8007f5e:	d132      	bne.n	8007fc6 <_svfiprintf_r+0x186>
 8007f60:	9b03      	ldr	r3, [sp, #12]
 8007f62:	1d1a      	adds	r2, r3, #4
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	9203      	str	r2, [sp, #12]
 8007f68:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007f6c:	3402      	adds	r4, #2
 8007f6e:	9305      	str	r3, [sp, #20]
 8007f70:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008034 <_svfiprintf_r+0x1f4>
 8007f74:	7821      	ldrb	r1, [r4, #0]
 8007f76:	2203      	movs	r2, #3
 8007f78:	4650      	mov	r0, sl
 8007f7a:	f7f8 f931 	bl	80001e0 <memchr>
 8007f7e:	b138      	cbz	r0, 8007f90 <_svfiprintf_r+0x150>
 8007f80:	9b04      	ldr	r3, [sp, #16]
 8007f82:	eba0 000a 	sub.w	r0, r0, sl
 8007f86:	2240      	movs	r2, #64	@ 0x40
 8007f88:	4082      	lsls	r2, r0
 8007f8a:	4313      	orrs	r3, r2
 8007f8c:	3401      	adds	r4, #1
 8007f8e:	9304      	str	r3, [sp, #16]
 8007f90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f94:	4824      	ldr	r0, [pc, #144]	@ (8008028 <_svfiprintf_r+0x1e8>)
 8007f96:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007f9a:	2206      	movs	r2, #6
 8007f9c:	f7f8 f920 	bl	80001e0 <memchr>
 8007fa0:	2800      	cmp	r0, #0
 8007fa2:	d036      	beq.n	8008012 <_svfiprintf_r+0x1d2>
 8007fa4:	4b21      	ldr	r3, [pc, #132]	@ (800802c <_svfiprintf_r+0x1ec>)
 8007fa6:	bb1b      	cbnz	r3, 8007ff0 <_svfiprintf_r+0x1b0>
 8007fa8:	9b03      	ldr	r3, [sp, #12]
 8007faa:	3307      	adds	r3, #7
 8007fac:	f023 0307 	bic.w	r3, r3, #7
 8007fb0:	3308      	adds	r3, #8
 8007fb2:	9303      	str	r3, [sp, #12]
 8007fb4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007fb6:	4433      	add	r3, r6
 8007fb8:	9309      	str	r3, [sp, #36]	@ 0x24
 8007fba:	e76a      	b.n	8007e92 <_svfiprintf_r+0x52>
 8007fbc:	fb0c 3202 	mla	r2, ip, r2, r3
 8007fc0:	460c      	mov	r4, r1
 8007fc2:	2001      	movs	r0, #1
 8007fc4:	e7a8      	b.n	8007f18 <_svfiprintf_r+0xd8>
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	3401      	adds	r4, #1
 8007fca:	9305      	str	r3, [sp, #20]
 8007fcc:	4619      	mov	r1, r3
 8007fce:	f04f 0c0a 	mov.w	ip, #10
 8007fd2:	4620      	mov	r0, r4
 8007fd4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007fd8:	3a30      	subs	r2, #48	@ 0x30
 8007fda:	2a09      	cmp	r2, #9
 8007fdc:	d903      	bls.n	8007fe6 <_svfiprintf_r+0x1a6>
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d0c6      	beq.n	8007f70 <_svfiprintf_r+0x130>
 8007fe2:	9105      	str	r1, [sp, #20]
 8007fe4:	e7c4      	b.n	8007f70 <_svfiprintf_r+0x130>
 8007fe6:	fb0c 2101 	mla	r1, ip, r1, r2
 8007fea:	4604      	mov	r4, r0
 8007fec:	2301      	movs	r3, #1
 8007fee:	e7f0      	b.n	8007fd2 <_svfiprintf_r+0x192>
 8007ff0:	ab03      	add	r3, sp, #12
 8007ff2:	9300      	str	r3, [sp, #0]
 8007ff4:	462a      	mov	r2, r5
 8007ff6:	4b0e      	ldr	r3, [pc, #56]	@ (8008030 <_svfiprintf_r+0x1f0>)
 8007ff8:	a904      	add	r1, sp, #16
 8007ffa:	4638      	mov	r0, r7
 8007ffc:	f3af 8000 	nop.w
 8008000:	1c42      	adds	r2, r0, #1
 8008002:	4606      	mov	r6, r0
 8008004:	d1d6      	bne.n	8007fb4 <_svfiprintf_r+0x174>
 8008006:	89ab      	ldrh	r3, [r5, #12]
 8008008:	065b      	lsls	r3, r3, #25
 800800a:	f53f af2d 	bmi.w	8007e68 <_svfiprintf_r+0x28>
 800800e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008010:	e72c      	b.n	8007e6c <_svfiprintf_r+0x2c>
 8008012:	ab03      	add	r3, sp, #12
 8008014:	9300      	str	r3, [sp, #0]
 8008016:	462a      	mov	r2, r5
 8008018:	4b05      	ldr	r3, [pc, #20]	@ (8008030 <_svfiprintf_r+0x1f0>)
 800801a:	a904      	add	r1, sp, #16
 800801c:	4638      	mov	r0, r7
 800801e:	f000 f879 	bl	8008114 <_printf_i>
 8008022:	e7ed      	b.n	8008000 <_svfiprintf_r+0x1c0>
 8008024:	0800855c 	.word	0x0800855c
 8008028:	08008566 	.word	0x08008566
 800802c:	00000000 	.word	0x00000000
 8008030:	08007d89 	.word	0x08007d89
 8008034:	08008562 	.word	0x08008562

08008038 <_printf_common>:
 8008038:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800803c:	4616      	mov	r6, r2
 800803e:	4698      	mov	r8, r3
 8008040:	688a      	ldr	r2, [r1, #8]
 8008042:	690b      	ldr	r3, [r1, #16]
 8008044:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008048:	4293      	cmp	r3, r2
 800804a:	bfb8      	it	lt
 800804c:	4613      	movlt	r3, r2
 800804e:	6033      	str	r3, [r6, #0]
 8008050:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008054:	4607      	mov	r7, r0
 8008056:	460c      	mov	r4, r1
 8008058:	b10a      	cbz	r2, 800805e <_printf_common+0x26>
 800805a:	3301      	adds	r3, #1
 800805c:	6033      	str	r3, [r6, #0]
 800805e:	6823      	ldr	r3, [r4, #0]
 8008060:	0699      	lsls	r1, r3, #26
 8008062:	bf42      	ittt	mi
 8008064:	6833      	ldrmi	r3, [r6, #0]
 8008066:	3302      	addmi	r3, #2
 8008068:	6033      	strmi	r3, [r6, #0]
 800806a:	6825      	ldr	r5, [r4, #0]
 800806c:	f015 0506 	ands.w	r5, r5, #6
 8008070:	d106      	bne.n	8008080 <_printf_common+0x48>
 8008072:	f104 0a19 	add.w	sl, r4, #25
 8008076:	68e3      	ldr	r3, [r4, #12]
 8008078:	6832      	ldr	r2, [r6, #0]
 800807a:	1a9b      	subs	r3, r3, r2
 800807c:	42ab      	cmp	r3, r5
 800807e:	dc26      	bgt.n	80080ce <_printf_common+0x96>
 8008080:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008084:	6822      	ldr	r2, [r4, #0]
 8008086:	3b00      	subs	r3, #0
 8008088:	bf18      	it	ne
 800808a:	2301      	movne	r3, #1
 800808c:	0692      	lsls	r2, r2, #26
 800808e:	d42b      	bmi.n	80080e8 <_printf_common+0xb0>
 8008090:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008094:	4641      	mov	r1, r8
 8008096:	4638      	mov	r0, r7
 8008098:	47c8      	blx	r9
 800809a:	3001      	adds	r0, #1
 800809c:	d01e      	beq.n	80080dc <_printf_common+0xa4>
 800809e:	6823      	ldr	r3, [r4, #0]
 80080a0:	6922      	ldr	r2, [r4, #16]
 80080a2:	f003 0306 	and.w	r3, r3, #6
 80080a6:	2b04      	cmp	r3, #4
 80080a8:	bf02      	ittt	eq
 80080aa:	68e5      	ldreq	r5, [r4, #12]
 80080ac:	6833      	ldreq	r3, [r6, #0]
 80080ae:	1aed      	subeq	r5, r5, r3
 80080b0:	68a3      	ldr	r3, [r4, #8]
 80080b2:	bf0c      	ite	eq
 80080b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80080b8:	2500      	movne	r5, #0
 80080ba:	4293      	cmp	r3, r2
 80080bc:	bfc4      	itt	gt
 80080be:	1a9b      	subgt	r3, r3, r2
 80080c0:	18ed      	addgt	r5, r5, r3
 80080c2:	2600      	movs	r6, #0
 80080c4:	341a      	adds	r4, #26
 80080c6:	42b5      	cmp	r5, r6
 80080c8:	d11a      	bne.n	8008100 <_printf_common+0xc8>
 80080ca:	2000      	movs	r0, #0
 80080cc:	e008      	b.n	80080e0 <_printf_common+0xa8>
 80080ce:	2301      	movs	r3, #1
 80080d0:	4652      	mov	r2, sl
 80080d2:	4641      	mov	r1, r8
 80080d4:	4638      	mov	r0, r7
 80080d6:	47c8      	blx	r9
 80080d8:	3001      	adds	r0, #1
 80080da:	d103      	bne.n	80080e4 <_printf_common+0xac>
 80080dc:	f04f 30ff 	mov.w	r0, #4294967295
 80080e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080e4:	3501      	adds	r5, #1
 80080e6:	e7c6      	b.n	8008076 <_printf_common+0x3e>
 80080e8:	18e1      	adds	r1, r4, r3
 80080ea:	1c5a      	adds	r2, r3, #1
 80080ec:	2030      	movs	r0, #48	@ 0x30
 80080ee:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80080f2:	4422      	add	r2, r4
 80080f4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80080f8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80080fc:	3302      	adds	r3, #2
 80080fe:	e7c7      	b.n	8008090 <_printf_common+0x58>
 8008100:	2301      	movs	r3, #1
 8008102:	4622      	mov	r2, r4
 8008104:	4641      	mov	r1, r8
 8008106:	4638      	mov	r0, r7
 8008108:	47c8      	blx	r9
 800810a:	3001      	adds	r0, #1
 800810c:	d0e6      	beq.n	80080dc <_printf_common+0xa4>
 800810e:	3601      	adds	r6, #1
 8008110:	e7d9      	b.n	80080c6 <_printf_common+0x8e>
	...

08008114 <_printf_i>:
 8008114:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008118:	7e0f      	ldrb	r7, [r1, #24]
 800811a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800811c:	2f78      	cmp	r7, #120	@ 0x78
 800811e:	4691      	mov	r9, r2
 8008120:	4680      	mov	r8, r0
 8008122:	460c      	mov	r4, r1
 8008124:	469a      	mov	sl, r3
 8008126:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800812a:	d807      	bhi.n	800813c <_printf_i+0x28>
 800812c:	2f62      	cmp	r7, #98	@ 0x62
 800812e:	d80a      	bhi.n	8008146 <_printf_i+0x32>
 8008130:	2f00      	cmp	r7, #0
 8008132:	f000 80d2 	beq.w	80082da <_printf_i+0x1c6>
 8008136:	2f58      	cmp	r7, #88	@ 0x58
 8008138:	f000 80b9 	beq.w	80082ae <_printf_i+0x19a>
 800813c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008140:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008144:	e03a      	b.n	80081bc <_printf_i+0xa8>
 8008146:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800814a:	2b15      	cmp	r3, #21
 800814c:	d8f6      	bhi.n	800813c <_printf_i+0x28>
 800814e:	a101      	add	r1, pc, #4	@ (adr r1, 8008154 <_printf_i+0x40>)
 8008150:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008154:	080081ad 	.word	0x080081ad
 8008158:	080081c1 	.word	0x080081c1
 800815c:	0800813d 	.word	0x0800813d
 8008160:	0800813d 	.word	0x0800813d
 8008164:	0800813d 	.word	0x0800813d
 8008168:	0800813d 	.word	0x0800813d
 800816c:	080081c1 	.word	0x080081c1
 8008170:	0800813d 	.word	0x0800813d
 8008174:	0800813d 	.word	0x0800813d
 8008178:	0800813d 	.word	0x0800813d
 800817c:	0800813d 	.word	0x0800813d
 8008180:	080082c1 	.word	0x080082c1
 8008184:	080081eb 	.word	0x080081eb
 8008188:	0800827b 	.word	0x0800827b
 800818c:	0800813d 	.word	0x0800813d
 8008190:	0800813d 	.word	0x0800813d
 8008194:	080082e3 	.word	0x080082e3
 8008198:	0800813d 	.word	0x0800813d
 800819c:	080081eb 	.word	0x080081eb
 80081a0:	0800813d 	.word	0x0800813d
 80081a4:	0800813d 	.word	0x0800813d
 80081a8:	08008283 	.word	0x08008283
 80081ac:	6833      	ldr	r3, [r6, #0]
 80081ae:	1d1a      	adds	r2, r3, #4
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	6032      	str	r2, [r6, #0]
 80081b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80081b8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80081bc:	2301      	movs	r3, #1
 80081be:	e09d      	b.n	80082fc <_printf_i+0x1e8>
 80081c0:	6833      	ldr	r3, [r6, #0]
 80081c2:	6820      	ldr	r0, [r4, #0]
 80081c4:	1d19      	adds	r1, r3, #4
 80081c6:	6031      	str	r1, [r6, #0]
 80081c8:	0606      	lsls	r6, r0, #24
 80081ca:	d501      	bpl.n	80081d0 <_printf_i+0xbc>
 80081cc:	681d      	ldr	r5, [r3, #0]
 80081ce:	e003      	b.n	80081d8 <_printf_i+0xc4>
 80081d0:	0645      	lsls	r5, r0, #25
 80081d2:	d5fb      	bpl.n	80081cc <_printf_i+0xb8>
 80081d4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80081d8:	2d00      	cmp	r5, #0
 80081da:	da03      	bge.n	80081e4 <_printf_i+0xd0>
 80081dc:	232d      	movs	r3, #45	@ 0x2d
 80081de:	426d      	negs	r5, r5
 80081e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80081e4:	4859      	ldr	r0, [pc, #356]	@ (800834c <_printf_i+0x238>)
 80081e6:	230a      	movs	r3, #10
 80081e8:	e011      	b.n	800820e <_printf_i+0xfa>
 80081ea:	6821      	ldr	r1, [r4, #0]
 80081ec:	6833      	ldr	r3, [r6, #0]
 80081ee:	0608      	lsls	r0, r1, #24
 80081f0:	f853 5b04 	ldr.w	r5, [r3], #4
 80081f4:	d402      	bmi.n	80081fc <_printf_i+0xe8>
 80081f6:	0649      	lsls	r1, r1, #25
 80081f8:	bf48      	it	mi
 80081fa:	b2ad      	uxthmi	r5, r5
 80081fc:	2f6f      	cmp	r7, #111	@ 0x6f
 80081fe:	4853      	ldr	r0, [pc, #332]	@ (800834c <_printf_i+0x238>)
 8008200:	6033      	str	r3, [r6, #0]
 8008202:	bf14      	ite	ne
 8008204:	230a      	movne	r3, #10
 8008206:	2308      	moveq	r3, #8
 8008208:	2100      	movs	r1, #0
 800820a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800820e:	6866      	ldr	r6, [r4, #4]
 8008210:	60a6      	str	r6, [r4, #8]
 8008212:	2e00      	cmp	r6, #0
 8008214:	bfa2      	ittt	ge
 8008216:	6821      	ldrge	r1, [r4, #0]
 8008218:	f021 0104 	bicge.w	r1, r1, #4
 800821c:	6021      	strge	r1, [r4, #0]
 800821e:	b90d      	cbnz	r5, 8008224 <_printf_i+0x110>
 8008220:	2e00      	cmp	r6, #0
 8008222:	d04b      	beq.n	80082bc <_printf_i+0x1a8>
 8008224:	4616      	mov	r6, r2
 8008226:	fbb5 f1f3 	udiv	r1, r5, r3
 800822a:	fb03 5711 	mls	r7, r3, r1, r5
 800822e:	5dc7      	ldrb	r7, [r0, r7]
 8008230:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008234:	462f      	mov	r7, r5
 8008236:	42bb      	cmp	r3, r7
 8008238:	460d      	mov	r5, r1
 800823a:	d9f4      	bls.n	8008226 <_printf_i+0x112>
 800823c:	2b08      	cmp	r3, #8
 800823e:	d10b      	bne.n	8008258 <_printf_i+0x144>
 8008240:	6823      	ldr	r3, [r4, #0]
 8008242:	07df      	lsls	r7, r3, #31
 8008244:	d508      	bpl.n	8008258 <_printf_i+0x144>
 8008246:	6923      	ldr	r3, [r4, #16]
 8008248:	6861      	ldr	r1, [r4, #4]
 800824a:	4299      	cmp	r1, r3
 800824c:	bfde      	ittt	le
 800824e:	2330      	movle	r3, #48	@ 0x30
 8008250:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008254:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008258:	1b92      	subs	r2, r2, r6
 800825a:	6122      	str	r2, [r4, #16]
 800825c:	f8cd a000 	str.w	sl, [sp]
 8008260:	464b      	mov	r3, r9
 8008262:	aa03      	add	r2, sp, #12
 8008264:	4621      	mov	r1, r4
 8008266:	4640      	mov	r0, r8
 8008268:	f7ff fee6 	bl	8008038 <_printf_common>
 800826c:	3001      	adds	r0, #1
 800826e:	d14a      	bne.n	8008306 <_printf_i+0x1f2>
 8008270:	f04f 30ff 	mov.w	r0, #4294967295
 8008274:	b004      	add	sp, #16
 8008276:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800827a:	6823      	ldr	r3, [r4, #0]
 800827c:	f043 0320 	orr.w	r3, r3, #32
 8008280:	6023      	str	r3, [r4, #0]
 8008282:	4833      	ldr	r0, [pc, #204]	@ (8008350 <_printf_i+0x23c>)
 8008284:	2778      	movs	r7, #120	@ 0x78
 8008286:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800828a:	6823      	ldr	r3, [r4, #0]
 800828c:	6831      	ldr	r1, [r6, #0]
 800828e:	061f      	lsls	r7, r3, #24
 8008290:	f851 5b04 	ldr.w	r5, [r1], #4
 8008294:	d402      	bmi.n	800829c <_printf_i+0x188>
 8008296:	065f      	lsls	r7, r3, #25
 8008298:	bf48      	it	mi
 800829a:	b2ad      	uxthmi	r5, r5
 800829c:	6031      	str	r1, [r6, #0]
 800829e:	07d9      	lsls	r1, r3, #31
 80082a0:	bf44      	itt	mi
 80082a2:	f043 0320 	orrmi.w	r3, r3, #32
 80082a6:	6023      	strmi	r3, [r4, #0]
 80082a8:	b11d      	cbz	r5, 80082b2 <_printf_i+0x19e>
 80082aa:	2310      	movs	r3, #16
 80082ac:	e7ac      	b.n	8008208 <_printf_i+0xf4>
 80082ae:	4827      	ldr	r0, [pc, #156]	@ (800834c <_printf_i+0x238>)
 80082b0:	e7e9      	b.n	8008286 <_printf_i+0x172>
 80082b2:	6823      	ldr	r3, [r4, #0]
 80082b4:	f023 0320 	bic.w	r3, r3, #32
 80082b8:	6023      	str	r3, [r4, #0]
 80082ba:	e7f6      	b.n	80082aa <_printf_i+0x196>
 80082bc:	4616      	mov	r6, r2
 80082be:	e7bd      	b.n	800823c <_printf_i+0x128>
 80082c0:	6833      	ldr	r3, [r6, #0]
 80082c2:	6825      	ldr	r5, [r4, #0]
 80082c4:	6961      	ldr	r1, [r4, #20]
 80082c6:	1d18      	adds	r0, r3, #4
 80082c8:	6030      	str	r0, [r6, #0]
 80082ca:	062e      	lsls	r6, r5, #24
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	d501      	bpl.n	80082d4 <_printf_i+0x1c0>
 80082d0:	6019      	str	r1, [r3, #0]
 80082d2:	e002      	b.n	80082da <_printf_i+0x1c6>
 80082d4:	0668      	lsls	r0, r5, #25
 80082d6:	d5fb      	bpl.n	80082d0 <_printf_i+0x1bc>
 80082d8:	8019      	strh	r1, [r3, #0]
 80082da:	2300      	movs	r3, #0
 80082dc:	6123      	str	r3, [r4, #16]
 80082de:	4616      	mov	r6, r2
 80082e0:	e7bc      	b.n	800825c <_printf_i+0x148>
 80082e2:	6833      	ldr	r3, [r6, #0]
 80082e4:	1d1a      	adds	r2, r3, #4
 80082e6:	6032      	str	r2, [r6, #0]
 80082e8:	681e      	ldr	r6, [r3, #0]
 80082ea:	6862      	ldr	r2, [r4, #4]
 80082ec:	2100      	movs	r1, #0
 80082ee:	4630      	mov	r0, r6
 80082f0:	f7f7 ff76 	bl	80001e0 <memchr>
 80082f4:	b108      	cbz	r0, 80082fa <_printf_i+0x1e6>
 80082f6:	1b80      	subs	r0, r0, r6
 80082f8:	6060      	str	r0, [r4, #4]
 80082fa:	6863      	ldr	r3, [r4, #4]
 80082fc:	6123      	str	r3, [r4, #16]
 80082fe:	2300      	movs	r3, #0
 8008300:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008304:	e7aa      	b.n	800825c <_printf_i+0x148>
 8008306:	6923      	ldr	r3, [r4, #16]
 8008308:	4632      	mov	r2, r6
 800830a:	4649      	mov	r1, r9
 800830c:	4640      	mov	r0, r8
 800830e:	47d0      	blx	sl
 8008310:	3001      	adds	r0, #1
 8008312:	d0ad      	beq.n	8008270 <_printf_i+0x15c>
 8008314:	6823      	ldr	r3, [r4, #0]
 8008316:	079b      	lsls	r3, r3, #30
 8008318:	d413      	bmi.n	8008342 <_printf_i+0x22e>
 800831a:	68e0      	ldr	r0, [r4, #12]
 800831c:	9b03      	ldr	r3, [sp, #12]
 800831e:	4298      	cmp	r0, r3
 8008320:	bfb8      	it	lt
 8008322:	4618      	movlt	r0, r3
 8008324:	e7a6      	b.n	8008274 <_printf_i+0x160>
 8008326:	2301      	movs	r3, #1
 8008328:	4632      	mov	r2, r6
 800832a:	4649      	mov	r1, r9
 800832c:	4640      	mov	r0, r8
 800832e:	47d0      	blx	sl
 8008330:	3001      	adds	r0, #1
 8008332:	d09d      	beq.n	8008270 <_printf_i+0x15c>
 8008334:	3501      	adds	r5, #1
 8008336:	68e3      	ldr	r3, [r4, #12]
 8008338:	9903      	ldr	r1, [sp, #12]
 800833a:	1a5b      	subs	r3, r3, r1
 800833c:	42ab      	cmp	r3, r5
 800833e:	dcf2      	bgt.n	8008326 <_printf_i+0x212>
 8008340:	e7eb      	b.n	800831a <_printf_i+0x206>
 8008342:	2500      	movs	r5, #0
 8008344:	f104 0619 	add.w	r6, r4, #25
 8008348:	e7f5      	b.n	8008336 <_printf_i+0x222>
 800834a:	bf00      	nop
 800834c:	0800856d 	.word	0x0800856d
 8008350:	0800857e 	.word	0x0800857e

08008354 <memmove>:
 8008354:	4288      	cmp	r0, r1
 8008356:	b510      	push	{r4, lr}
 8008358:	eb01 0402 	add.w	r4, r1, r2
 800835c:	d902      	bls.n	8008364 <memmove+0x10>
 800835e:	4284      	cmp	r4, r0
 8008360:	4623      	mov	r3, r4
 8008362:	d807      	bhi.n	8008374 <memmove+0x20>
 8008364:	1e43      	subs	r3, r0, #1
 8008366:	42a1      	cmp	r1, r4
 8008368:	d008      	beq.n	800837c <memmove+0x28>
 800836a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800836e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008372:	e7f8      	b.n	8008366 <memmove+0x12>
 8008374:	4402      	add	r2, r0
 8008376:	4601      	mov	r1, r0
 8008378:	428a      	cmp	r2, r1
 800837a:	d100      	bne.n	800837e <memmove+0x2a>
 800837c:	bd10      	pop	{r4, pc}
 800837e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008382:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008386:	e7f7      	b.n	8008378 <memmove+0x24>

08008388 <_sbrk_r>:
 8008388:	b538      	push	{r3, r4, r5, lr}
 800838a:	4d06      	ldr	r5, [pc, #24]	@ (80083a4 <_sbrk_r+0x1c>)
 800838c:	2300      	movs	r3, #0
 800838e:	4604      	mov	r4, r0
 8008390:	4608      	mov	r0, r1
 8008392:	602b      	str	r3, [r5, #0]
 8008394:	f7f9 f958 	bl	8001648 <_sbrk>
 8008398:	1c43      	adds	r3, r0, #1
 800839a:	d102      	bne.n	80083a2 <_sbrk_r+0x1a>
 800839c:	682b      	ldr	r3, [r5, #0]
 800839e:	b103      	cbz	r3, 80083a2 <_sbrk_r+0x1a>
 80083a0:	6023      	str	r3, [r4, #0]
 80083a2:	bd38      	pop	{r3, r4, r5, pc}
 80083a4:	20002fd4 	.word	0x20002fd4

080083a8 <_realloc_r>:
 80083a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083ac:	4680      	mov	r8, r0
 80083ae:	4615      	mov	r5, r2
 80083b0:	460c      	mov	r4, r1
 80083b2:	b921      	cbnz	r1, 80083be <_realloc_r+0x16>
 80083b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80083b8:	4611      	mov	r1, r2
 80083ba:	f7ff bc59 	b.w	8007c70 <_malloc_r>
 80083be:	b92a      	cbnz	r2, 80083cc <_realloc_r+0x24>
 80083c0:	f7ff fbea 	bl	8007b98 <_free_r>
 80083c4:	2400      	movs	r4, #0
 80083c6:	4620      	mov	r0, r4
 80083c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80083cc:	f000 f81a 	bl	8008404 <_malloc_usable_size_r>
 80083d0:	4285      	cmp	r5, r0
 80083d2:	4606      	mov	r6, r0
 80083d4:	d802      	bhi.n	80083dc <_realloc_r+0x34>
 80083d6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80083da:	d8f4      	bhi.n	80083c6 <_realloc_r+0x1e>
 80083dc:	4629      	mov	r1, r5
 80083de:	4640      	mov	r0, r8
 80083e0:	f7ff fc46 	bl	8007c70 <_malloc_r>
 80083e4:	4607      	mov	r7, r0
 80083e6:	2800      	cmp	r0, #0
 80083e8:	d0ec      	beq.n	80083c4 <_realloc_r+0x1c>
 80083ea:	42b5      	cmp	r5, r6
 80083ec:	462a      	mov	r2, r5
 80083ee:	4621      	mov	r1, r4
 80083f0:	bf28      	it	cs
 80083f2:	4632      	movcs	r2, r6
 80083f4:	f7ff fbc2 	bl	8007b7c <memcpy>
 80083f8:	4621      	mov	r1, r4
 80083fa:	4640      	mov	r0, r8
 80083fc:	f7ff fbcc 	bl	8007b98 <_free_r>
 8008400:	463c      	mov	r4, r7
 8008402:	e7e0      	b.n	80083c6 <_realloc_r+0x1e>

08008404 <_malloc_usable_size_r>:
 8008404:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008408:	1f18      	subs	r0, r3, #4
 800840a:	2b00      	cmp	r3, #0
 800840c:	bfbc      	itt	lt
 800840e:	580b      	ldrlt	r3, [r1, r0]
 8008410:	18c0      	addlt	r0, r0, r3
 8008412:	4770      	bx	lr

08008414 <_init>:
 8008414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008416:	bf00      	nop
 8008418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800841a:	bc08      	pop	{r3}
 800841c:	469e      	mov	lr, r3
 800841e:	4770      	bx	lr

08008420 <_fini>:
 8008420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008422:	bf00      	nop
 8008424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008426:	bc08      	pop	{r3}
 8008428:	469e      	mov	lr, r3
 800842a:	4770      	bx	lr
