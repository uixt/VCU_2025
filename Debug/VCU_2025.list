
VCU_2025.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004158  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  080042e8  080042e8  000052e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800436c  0800436c  00006010  2**0
                  CONTENTS
  4 .ARM          00000000  0800436c  0800436c  00006010  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800436c  0800436c  00006010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800436c  0800436c  0000536c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004370  08004370  00005370  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08004374  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000109c  20000010  08004384  00006010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200010ac  08004384  000060ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011d60  00000000  00000000  00006040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027df  00000000  00000000  00017da0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001048  00000000  00000000  0001a580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cb2  00000000  00000000  0001b5c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c790  00000000  00000000  0001c27a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000134d3  00000000  00000000  00038a0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ad879  00000000  00000000  0004bedd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f9756  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000043b0  00000000  00000000  000f979c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  000fdb4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080042d0 	.word	0x080042d0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	080042d0 	.word	0x080042d0

080001d0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80001d0:	b480      	push	{r7}
 80001d2:	b085      	sub	sp, #20
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	60f8      	str	r0, [r7, #12]
 80001d8:	60b9      	str	r1, [r7, #8]
 80001da:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80001dc:	68fb      	ldr	r3, [r7, #12]
 80001de:	4a07      	ldr	r2, [pc, #28]	@ (80001fc <vApplicationGetIdleTaskMemory+0x2c>)
 80001e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80001e2:	68bb      	ldr	r3, [r7, #8]
 80001e4:	4a06      	ldr	r2, [pc, #24]	@ (8000200 <vApplicationGetIdleTaskMemory+0x30>)
 80001e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	2280      	movs	r2, #128	@ 0x80
 80001ec:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80001ee:	bf00      	nop
 80001f0:	3714      	adds	r7, #20
 80001f2:	46bd      	mov	sp, r7
 80001f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f8:	4770      	bx	lr
 80001fa:	bf00      	nop
 80001fc:	2000002c 	.word	0x2000002c
 8000200:	20000080 	.word	0x20000080

08000204 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000204:	b5b0      	push	{r4, r5, r7, lr}
 8000206:	b08e      	sub	sp, #56	@ 0x38
 8000208:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800020a:	f000 fa7f 	bl	800070c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800020e:	f000 f835 	bl	800027c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000212:	f000 f8a5 	bl	8000360 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000216:	f000 f873 	bl	8000300 <MX_USART2_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of parked */
  osThreadDef(parked, parked_init, osPriorityNormal, 0, 128);
 800021a:	4b14      	ldr	r3, [pc, #80]	@ (800026c <main+0x68>)
 800021c:	f107 041c 	add.w	r4, r7, #28
 8000220:	461d      	mov	r5, r3
 8000222:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000224:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000226:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800022a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  parkedHandle = osThreadCreate(osThread(parked), NULL);
 800022e:	f107 031c 	add.w	r3, r7, #28
 8000232:	2100      	movs	r1, #0
 8000234:	4618      	mov	r0, r3
 8000236:	f002 fdeb 	bl	8002e10 <osThreadCreate>
 800023a:	4603      	mov	r3, r0
 800023c:	4a0c      	ldr	r2, [pc, #48]	@ (8000270 <main+0x6c>)
 800023e:	6013      	str	r3, [r2, #0]

  /* definition and creation of LED */
  osThreadDef(LED, LED_init, osPriorityNormal, 0, 128);
 8000240:	4b0c      	ldr	r3, [pc, #48]	@ (8000274 <main+0x70>)
 8000242:	463c      	mov	r4, r7
 8000244:	461d      	mov	r5, r3
 8000246:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000248:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800024a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800024e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LEDHandle = osThreadCreate(osThread(LED), NULL);
 8000252:	463b      	mov	r3, r7
 8000254:	2100      	movs	r1, #0
 8000256:	4618      	mov	r0, r3
 8000258:	f002 fdda 	bl	8002e10 <osThreadCreate>
 800025c:	4603      	mov	r3, r0
 800025e:	4a06      	ldr	r2, [pc, #24]	@ (8000278 <main+0x74>)
 8000260:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000262:	f002 fdce 	bl	8002e02 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000266:	bf00      	nop
 8000268:	e7fd      	b.n	8000266 <main+0x62>
 800026a:	bf00      	nop
 800026c:	080042f0 	.word	0x080042f0
 8000270:	20000308 	.word	0x20000308
 8000274:	08004310 	.word	0x08004310
 8000278:	2000030c 	.word	0x2000030c

0800027c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	b090      	sub	sp, #64	@ 0x40
 8000280:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000282:	f107 0318 	add.w	r3, r7, #24
 8000286:	2228      	movs	r2, #40	@ 0x28
 8000288:	2100      	movs	r1, #0
 800028a:	4618      	mov	r0, r3
 800028c:	f003 fff4 	bl	8004278 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000290:	1d3b      	adds	r3, r7, #4
 8000292:	2200      	movs	r2, #0
 8000294:	601a      	str	r2, [r3, #0]
 8000296:	605a      	str	r2, [r3, #4]
 8000298:	609a      	str	r2, [r3, #8]
 800029a:	60da      	str	r2, [r3, #12]
 800029c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800029e:	2302      	movs	r3, #2
 80002a0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002a2:	2301      	movs	r3, #1
 80002a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002a6:	2310      	movs	r3, #16
 80002a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002aa:	2302      	movs	r3, #2
 80002ac:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002ae:	2300      	movs	r3, #0
 80002b0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80002b2:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 80002b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002b8:	f107 0318 	add.w	r3, r7, #24
 80002bc:	4618      	mov	r0, r3
 80002be:	f000 fce1 	bl	8000c84 <HAL_RCC_OscConfig>
 80002c2:	4603      	mov	r3, r0
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d001      	beq.n	80002cc <SystemClock_Config+0x50>
  {
    Error_Handler();
 80002c8:	f000 f8de 	bl	8000488 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002cc:	230f      	movs	r3, #15
 80002ce:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002d0:	2302      	movs	r3, #2
 80002d2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002d4:	2300      	movs	r3, #0
 80002d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002d8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80002dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002de:	2300      	movs	r3, #0
 80002e0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002e2:	1d3b      	adds	r3, r7, #4
 80002e4:	2102      	movs	r1, #2
 80002e6:	4618      	mov	r0, r3
 80002e8:	f001 fd0a 	bl	8001d00 <HAL_RCC_ClockConfig>
 80002ec:	4603      	mov	r3, r0
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d001      	beq.n	80002f6 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80002f2:	f000 f8c9 	bl	8000488 <Error_Handler>
  }
}
 80002f6:	bf00      	nop
 80002f8:	3740      	adds	r7, #64	@ 0x40
 80002fa:	46bd      	mov	sp, r7
 80002fc:	bd80      	pop	{r7, pc}
	...

08000300 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000304:	4b14      	ldr	r3, [pc, #80]	@ (8000358 <MX_USART2_UART_Init+0x58>)
 8000306:	4a15      	ldr	r2, [pc, #84]	@ (800035c <MX_USART2_UART_Init+0x5c>)
 8000308:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800030a:	4b13      	ldr	r3, [pc, #76]	@ (8000358 <MX_USART2_UART_Init+0x58>)
 800030c:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8000310:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000312:	4b11      	ldr	r3, [pc, #68]	@ (8000358 <MX_USART2_UART_Init+0x58>)
 8000314:	2200      	movs	r2, #0
 8000316:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000318:	4b0f      	ldr	r3, [pc, #60]	@ (8000358 <MX_USART2_UART_Init+0x58>)
 800031a:	2200      	movs	r2, #0
 800031c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800031e:	4b0e      	ldr	r3, [pc, #56]	@ (8000358 <MX_USART2_UART_Init+0x58>)
 8000320:	2200      	movs	r2, #0
 8000322:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000324:	4b0c      	ldr	r3, [pc, #48]	@ (8000358 <MX_USART2_UART_Init+0x58>)
 8000326:	220c      	movs	r2, #12
 8000328:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800032a:	4b0b      	ldr	r3, [pc, #44]	@ (8000358 <MX_USART2_UART_Init+0x58>)
 800032c:	2200      	movs	r2, #0
 800032e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000330:	4b09      	ldr	r3, [pc, #36]	@ (8000358 <MX_USART2_UART_Init+0x58>)
 8000332:	2200      	movs	r2, #0
 8000334:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000336:	4b08      	ldr	r3, [pc, #32]	@ (8000358 <MX_USART2_UART_Init+0x58>)
 8000338:	2200      	movs	r2, #0
 800033a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800033c:	4b06      	ldr	r3, [pc, #24]	@ (8000358 <MX_USART2_UART_Init+0x58>)
 800033e:	2200      	movs	r2, #0
 8000340:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000342:	4805      	ldr	r0, [pc, #20]	@ (8000358 <MX_USART2_UART_Init+0x58>)
 8000344:	f002 f9a6 	bl	8002694 <HAL_UART_Init>
 8000348:	4603      	mov	r3, r0
 800034a:	2b00      	cmp	r3, #0
 800034c:	d001      	beq.n	8000352 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800034e:	f000 f89b 	bl	8000488 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000352:	bf00      	nop
 8000354:	bd80      	pop	{r7, pc}
 8000356:	bf00      	nop
 8000358:	20000280 	.word	0x20000280
 800035c:	40004400 	.word	0x40004400

08000360 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b08a      	sub	sp, #40	@ 0x28
 8000364:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000366:	f107 0314 	add.w	r3, r7, #20
 800036a:	2200      	movs	r2, #0
 800036c:	601a      	str	r2, [r3, #0]
 800036e:	605a      	str	r2, [r3, #4]
 8000370:	609a      	str	r2, [r3, #8]
 8000372:	60da      	str	r2, [r3, #12]
 8000374:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000376:	4b2b      	ldr	r3, [pc, #172]	@ (8000424 <MX_GPIO_Init+0xc4>)
 8000378:	695b      	ldr	r3, [r3, #20]
 800037a:	4a2a      	ldr	r2, [pc, #168]	@ (8000424 <MX_GPIO_Init+0xc4>)
 800037c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000380:	6153      	str	r3, [r2, #20]
 8000382:	4b28      	ldr	r3, [pc, #160]	@ (8000424 <MX_GPIO_Init+0xc4>)
 8000384:	695b      	ldr	r3, [r3, #20]
 8000386:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800038a:	613b      	str	r3, [r7, #16]
 800038c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800038e:	4b25      	ldr	r3, [pc, #148]	@ (8000424 <MX_GPIO_Init+0xc4>)
 8000390:	695b      	ldr	r3, [r3, #20]
 8000392:	4a24      	ldr	r2, [pc, #144]	@ (8000424 <MX_GPIO_Init+0xc4>)
 8000394:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000398:	6153      	str	r3, [r2, #20]
 800039a:	4b22      	ldr	r3, [pc, #136]	@ (8000424 <MX_GPIO_Init+0xc4>)
 800039c:	695b      	ldr	r3, [r3, #20]
 800039e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80003a2:	60fb      	str	r3, [r7, #12]
 80003a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003a6:	4b1f      	ldr	r3, [pc, #124]	@ (8000424 <MX_GPIO_Init+0xc4>)
 80003a8:	695b      	ldr	r3, [r3, #20]
 80003aa:	4a1e      	ldr	r2, [pc, #120]	@ (8000424 <MX_GPIO_Init+0xc4>)
 80003ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80003b0:	6153      	str	r3, [r2, #20]
 80003b2:	4b1c      	ldr	r3, [pc, #112]	@ (8000424 <MX_GPIO_Init+0xc4>)
 80003b4:	695b      	ldr	r3, [r3, #20]
 80003b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80003ba:	60bb      	str	r3, [r7, #8]
 80003bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003be:	4b19      	ldr	r3, [pc, #100]	@ (8000424 <MX_GPIO_Init+0xc4>)
 80003c0:	695b      	ldr	r3, [r3, #20]
 80003c2:	4a18      	ldr	r2, [pc, #96]	@ (8000424 <MX_GPIO_Init+0xc4>)
 80003c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80003c8:	6153      	str	r3, [r2, #20]
 80003ca:	4b16      	ldr	r3, [pc, #88]	@ (8000424 <MX_GPIO_Init+0xc4>)
 80003cc:	695b      	ldr	r3, [r3, #20]
 80003ce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80003d2:	607b      	str	r3, [r7, #4]
 80003d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80003d6:	2200      	movs	r2, #0
 80003d8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80003dc:	4812      	ldr	r0, [pc, #72]	@ (8000428 <MX_GPIO_Init+0xc8>)
 80003de:	f000 fc1f 	bl	8000c20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80003e2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80003e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80003e8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80003ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ee:	2300      	movs	r3, #0
 80003f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80003f2:	f107 0314 	add.w	r3, r7, #20
 80003f6:	4619      	mov	r1, r3
 80003f8:	480c      	ldr	r0, [pc, #48]	@ (800042c <MX_GPIO_Init+0xcc>)
 80003fa:	f000 fa9f 	bl	800093c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80003fe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000402:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000404:	2301      	movs	r3, #1
 8000406:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000408:	2300      	movs	r3, #0
 800040a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800040c:	2300      	movs	r3, #0
 800040e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000410:	f107 0314 	add.w	r3, r7, #20
 8000414:	4619      	mov	r1, r3
 8000416:	4804      	ldr	r0, [pc, #16]	@ (8000428 <MX_GPIO_Init+0xc8>)
 8000418:	f000 fa90 	bl	800093c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800041c:	bf00      	nop
 800041e:	3728      	adds	r7, #40	@ 0x28
 8000420:	46bd      	mov	sp, r7
 8000422:	bd80      	pop	{r7, pc}
 8000424:	40021000 	.word	0x40021000
 8000428:	48000400 	.word	0x48000400
 800042c:	48000800 	.word	0x48000800

08000430 <parked_init>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_parked_init */
void parked_init(void const * argument)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b082      	sub	sp, #8
 8000434:	af00      	add	r7, sp, #0
 8000436:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000438:	2001      	movs	r0, #1
 800043a:	f002 fd35 	bl	8002ea8 <osDelay>
 800043e:	e7fb      	b.n	8000438 <parked_init+0x8>

08000440 <LED_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_LED_init */
void LED_init(void const * argument)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	b082      	sub	sp, #8
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN LED_init */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000448:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800044c:	4804      	ldr	r0, [pc, #16]	@ (8000460 <LED_init+0x20>)
 800044e:	f000 fbff 	bl	8000c50 <HAL_GPIO_TogglePin>
	        osDelay(500);
 8000452:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000456:	f002 fd27 	bl	8002ea8 <osDelay>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800045a:	bf00      	nop
 800045c:	e7f4      	b.n	8000448 <LED_init+0x8>
 800045e:	bf00      	nop
 8000460:	48000400 	.word	0x48000400

08000464 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b082      	sub	sp, #8
 8000468:	af00      	add	r7, sp, #0
 800046a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	4a04      	ldr	r2, [pc, #16]	@ (8000484 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000472:	4293      	cmp	r3, r2
 8000474:	d101      	bne.n	800047a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000476:	f000 f95f 	bl	8000738 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800047a:	bf00      	nop
 800047c:	3708      	adds	r7, #8
 800047e:	46bd      	mov	sp, r7
 8000480:	bd80      	pop	{r7, pc}
 8000482:	bf00      	nop
 8000484:	40012c00 	.word	0x40012c00

08000488 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000488:	b480      	push	{r7}
 800048a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800048c:	b672      	cpsid	i
}
 800048e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000490:	bf00      	nop
 8000492:	e7fd      	b.n	8000490 <Error_Handler+0x8>

08000494 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b082      	sub	sp, #8
 8000498:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800049a:	4b11      	ldr	r3, [pc, #68]	@ (80004e0 <HAL_MspInit+0x4c>)
 800049c:	699b      	ldr	r3, [r3, #24]
 800049e:	4a10      	ldr	r2, [pc, #64]	@ (80004e0 <HAL_MspInit+0x4c>)
 80004a0:	f043 0301 	orr.w	r3, r3, #1
 80004a4:	6193      	str	r3, [r2, #24]
 80004a6:	4b0e      	ldr	r3, [pc, #56]	@ (80004e0 <HAL_MspInit+0x4c>)
 80004a8:	699b      	ldr	r3, [r3, #24]
 80004aa:	f003 0301 	and.w	r3, r3, #1
 80004ae:	607b      	str	r3, [r7, #4]
 80004b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004b2:	4b0b      	ldr	r3, [pc, #44]	@ (80004e0 <HAL_MspInit+0x4c>)
 80004b4:	69db      	ldr	r3, [r3, #28]
 80004b6:	4a0a      	ldr	r2, [pc, #40]	@ (80004e0 <HAL_MspInit+0x4c>)
 80004b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80004bc:	61d3      	str	r3, [r2, #28]
 80004be:	4b08      	ldr	r3, [pc, #32]	@ (80004e0 <HAL_MspInit+0x4c>)
 80004c0:	69db      	ldr	r3, [r3, #28]
 80004c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80004c6:	603b      	str	r3, [r7, #0]
 80004c8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80004ca:	2200      	movs	r2, #0
 80004cc:	210f      	movs	r1, #15
 80004ce:	f06f 0001 	mvn.w	r0, #1
 80004d2:	f000 fa09 	bl	80008e8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004d6:	bf00      	nop
 80004d8:	3708      	adds	r7, #8
 80004da:	46bd      	mov	sp, r7
 80004dc:	bd80      	pop	{r7, pc}
 80004de:	bf00      	nop
 80004e0:	40021000 	.word	0x40021000

080004e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b08a      	sub	sp, #40	@ 0x28
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ec:	f107 0314 	add.w	r3, r7, #20
 80004f0:	2200      	movs	r2, #0
 80004f2:	601a      	str	r2, [r3, #0]
 80004f4:	605a      	str	r2, [r3, #4]
 80004f6:	609a      	str	r2, [r3, #8]
 80004f8:	60da      	str	r2, [r3, #12]
 80004fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	4a17      	ldr	r2, [pc, #92]	@ (8000560 <HAL_UART_MspInit+0x7c>)
 8000502:	4293      	cmp	r3, r2
 8000504:	d128      	bne.n	8000558 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000506:	4b17      	ldr	r3, [pc, #92]	@ (8000564 <HAL_UART_MspInit+0x80>)
 8000508:	69db      	ldr	r3, [r3, #28]
 800050a:	4a16      	ldr	r2, [pc, #88]	@ (8000564 <HAL_UART_MspInit+0x80>)
 800050c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000510:	61d3      	str	r3, [r2, #28]
 8000512:	4b14      	ldr	r3, [pc, #80]	@ (8000564 <HAL_UART_MspInit+0x80>)
 8000514:	69db      	ldr	r3, [r3, #28]
 8000516:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800051a:	613b      	str	r3, [r7, #16]
 800051c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800051e:	4b11      	ldr	r3, [pc, #68]	@ (8000564 <HAL_UART_MspInit+0x80>)
 8000520:	695b      	ldr	r3, [r3, #20]
 8000522:	4a10      	ldr	r2, [pc, #64]	@ (8000564 <HAL_UART_MspInit+0x80>)
 8000524:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000528:	6153      	str	r3, [r2, #20]
 800052a:	4b0e      	ldr	r3, [pc, #56]	@ (8000564 <HAL_UART_MspInit+0x80>)
 800052c:	695b      	ldr	r3, [r3, #20]
 800052e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000532:	60fb      	str	r3, [r7, #12]
 8000534:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000536:	230c      	movs	r3, #12
 8000538:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800053a:	2302      	movs	r3, #2
 800053c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800053e:	2300      	movs	r3, #0
 8000540:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000542:	2300      	movs	r3, #0
 8000544:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000546:	2307      	movs	r3, #7
 8000548:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800054a:	f107 0314 	add.w	r3, r7, #20
 800054e:	4619      	mov	r1, r3
 8000550:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000554:	f000 f9f2 	bl	800093c <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000558:	bf00      	nop
 800055a:	3728      	adds	r7, #40	@ 0x28
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	40004400 	.word	0x40004400
 8000564:	40021000 	.word	0x40021000

08000568 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b08c      	sub	sp, #48	@ 0x30
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000570:	2300      	movs	r3, #0
 8000572:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000574:	2300      	movs	r3, #0
 8000576:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000578:	4b2e      	ldr	r3, [pc, #184]	@ (8000634 <HAL_InitTick+0xcc>)
 800057a:	699b      	ldr	r3, [r3, #24]
 800057c:	4a2d      	ldr	r2, [pc, #180]	@ (8000634 <HAL_InitTick+0xcc>)
 800057e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000582:	6193      	str	r3, [r2, #24]
 8000584:	4b2b      	ldr	r3, [pc, #172]	@ (8000634 <HAL_InitTick+0xcc>)
 8000586:	699b      	ldr	r3, [r3, #24]
 8000588:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800058c:	60bb      	str	r3, [r7, #8]
 800058e:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000590:	f107 020c 	add.w	r2, r7, #12
 8000594:	f107 0310 	add.w	r3, r7, #16
 8000598:	4611      	mov	r1, r2
 800059a:	4618      	mov	r0, r3
 800059c:	f001 fdd0 	bl	8002140 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80005a0:	f001 fdac 	bl	80020fc <HAL_RCC_GetPCLK2Freq>
 80005a4:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80005a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80005a8:	4a23      	ldr	r2, [pc, #140]	@ (8000638 <HAL_InitTick+0xd0>)
 80005aa:	fba2 2303 	umull	r2, r3, r2, r3
 80005ae:	0c9b      	lsrs	r3, r3, #18
 80005b0:	3b01      	subs	r3, #1
 80005b2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80005b4:	4b21      	ldr	r3, [pc, #132]	@ (800063c <HAL_InitTick+0xd4>)
 80005b6:	4a22      	ldr	r2, [pc, #136]	@ (8000640 <HAL_InitTick+0xd8>)
 80005b8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80005ba:	4b20      	ldr	r3, [pc, #128]	@ (800063c <HAL_InitTick+0xd4>)
 80005bc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80005c0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80005c2:	4a1e      	ldr	r2, [pc, #120]	@ (800063c <HAL_InitTick+0xd4>)
 80005c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80005c6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80005c8:	4b1c      	ldr	r3, [pc, #112]	@ (800063c <HAL_InitTick+0xd4>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005ce:	4b1b      	ldr	r3, [pc, #108]	@ (800063c <HAL_InitTick+0xd4>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005d4:	4b19      	ldr	r3, [pc, #100]	@ (800063c <HAL_InitTick+0xd4>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80005da:	4818      	ldr	r0, [pc, #96]	@ (800063c <HAL_InitTick+0xd4>)
 80005dc:	f001 fde2 	bl	80021a4 <HAL_TIM_Base_Init>
 80005e0:	4603      	mov	r3, r0
 80005e2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80005e6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d11b      	bne.n	8000626 <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80005ee:	4813      	ldr	r0, [pc, #76]	@ (800063c <HAL_InitTick+0xd4>)
 80005f0:	f001 fe3a 	bl	8002268 <HAL_TIM_Base_Start_IT>
 80005f4:	4603      	mov	r3, r0
 80005f6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80005fa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d111      	bne.n	8000626 <HAL_InitTick+0xbe>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000602:	2019      	movs	r0, #25
 8000604:	f000 f98c 	bl	8000920 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	2b0f      	cmp	r3, #15
 800060c:	d808      	bhi.n	8000620 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 800060e:	2200      	movs	r2, #0
 8000610:	6879      	ldr	r1, [r7, #4]
 8000612:	2019      	movs	r0, #25
 8000614:	f000 f968 	bl	80008e8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000618:	4a0a      	ldr	r2, [pc, #40]	@ (8000644 <HAL_InitTick+0xdc>)
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	6013      	str	r3, [r2, #0]
 800061e:	e002      	b.n	8000626 <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 8000620:	2301      	movs	r3, #1
 8000622:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000626:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800062a:	4618      	mov	r0, r3
 800062c:	3730      	adds	r7, #48	@ 0x30
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	40021000 	.word	0x40021000
 8000638:	431bde83 	.word	0x431bde83
 800063c:	20000310 	.word	0x20000310
 8000640:	40012c00 	.word	0x40012c00
 8000644:	20000004 	.word	0x20000004

08000648 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800064c:	bf00      	nop
 800064e:	e7fd      	b.n	800064c <NMI_Handler+0x4>

08000650 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000654:	bf00      	nop
 8000656:	e7fd      	b.n	8000654 <HardFault_Handler+0x4>

08000658 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800065c:	bf00      	nop
 800065e:	e7fd      	b.n	800065c <MemManage_Handler+0x4>

08000660 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000664:	bf00      	nop
 8000666:	e7fd      	b.n	8000664 <BusFault_Handler+0x4>

08000668 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800066c:	bf00      	nop
 800066e:	e7fd      	b.n	800066c <UsageFault_Handler+0x4>

08000670 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000674:	bf00      	nop
 8000676:	46bd      	mov	sp, r7
 8000678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067c:	4770      	bx	lr
	...

08000680 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000684:	4802      	ldr	r0, [pc, #8]	@ (8000690 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000686:	f001 fe43 	bl	8002310 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800068a:	bf00      	nop
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	20000310 	.word	0x20000310

08000694 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000698:	4b06      	ldr	r3, [pc, #24]	@ (80006b4 <SystemInit+0x20>)
 800069a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800069e:	4a05      	ldr	r2, [pc, #20]	@ (80006b4 <SystemInit+0x20>)
 80006a0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80006a4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006a8:	bf00      	nop
 80006aa:	46bd      	mov	sp, r7
 80006ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop
 80006b4:	e000ed00 	.word	0xe000ed00

080006b8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80006b8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80006f0 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80006bc:	f7ff ffea 	bl	8000694 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006c0:	480c      	ldr	r0, [pc, #48]	@ (80006f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80006c2:	490d      	ldr	r1, [pc, #52]	@ (80006f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006c4:	4a0d      	ldr	r2, [pc, #52]	@ (80006fc <LoopForever+0xe>)
  movs r3, #0
 80006c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006c8:	e002      	b.n	80006d0 <LoopCopyDataInit>

080006ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006ce:	3304      	adds	r3, #4

080006d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006d4:	d3f9      	bcc.n	80006ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006d6:	4a0a      	ldr	r2, [pc, #40]	@ (8000700 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006d8:	4c0a      	ldr	r4, [pc, #40]	@ (8000704 <LoopForever+0x16>)
  movs r3, #0
 80006da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006dc:	e001      	b.n	80006e2 <LoopFillZerobss>

080006de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006e0:	3204      	adds	r2, #4

080006e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006e4:	d3fb      	bcc.n	80006de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006e6:	f003 fdcf 	bl	8004288 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80006ea:	f7ff fd8b 	bl	8000204 <main>

080006ee <LoopForever>:

LoopForever:
    b LoopForever
 80006ee:	e7fe      	b.n	80006ee <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80006f0:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80006f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006f8:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80006fc:	08004374 	.word	0x08004374
  ldr r2, =_sbss
 8000700:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000704:	200010ac 	.word	0x200010ac

08000708 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000708:	e7fe      	b.n	8000708 <ADC1_IRQHandler>
	...

0800070c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000710:	4b08      	ldr	r3, [pc, #32]	@ (8000734 <HAL_Init+0x28>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4a07      	ldr	r2, [pc, #28]	@ (8000734 <HAL_Init+0x28>)
 8000716:	f043 0310 	orr.w	r3, r3, #16
 800071a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800071c:	2003      	movs	r0, #3
 800071e:	f000 f8d8 	bl	80008d2 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000722:	200f      	movs	r0, #15
 8000724:	f7ff ff20 	bl	8000568 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000728:	f7ff feb4 	bl	8000494 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800072c:	2300      	movs	r3, #0
}
 800072e:	4618      	mov	r0, r3
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	40022000 	.word	0x40022000

08000738 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800073c:	4b06      	ldr	r3, [pc, #24]	@ (8000758 <HAL_IncTick+0x20>)
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	461a      	mov	r2, r3
 8000742:	4b06      	ldr	r3, [pc, #24]	@ (800075c <HAL_IncTick+0x24>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	4413      	add	r3, r2
 8000748:	4a04      	ldr	r2, [pc, #16]	@ (800075c <HAL_IncTick+0x24>)
 800074a:	6013      	str	r3, [r2, #0]
}
 800074c:	bf00      	nop
 800074e:	46bd      	mov	sp, r7
 8000750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000754:	4770      	bx	lr
 8000756:	bf00      	nop
 8000758:	20000008 	.word	0x20000008
 800075c:	2000035c 	.word	0x2000035c

08000760 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  return uwTick;  
 8000764:	4b03      	ldr	r3, [pc, #12]	@ (8000774 <HAL_GetTick+0x14>)
 8000766:	681b      	ldr	r3, [r3, #0]
}
 8000768:	4618      	mov	r0, r3
 800076a:	46bd      	mov	sp, r7
 800076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000770:	4770      	bx	lr
 8000772:	bf00      	nop
 8000774:	2000035c 	.word	0x2000035c

08000778 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000778:	b480      	push	{r7}
 800077a:	b085      	sub	sp, #20
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	f003 0307 	and.w	r3, r3, #7
 8000786:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000788:	4b0c      	ldr	r3, [pc, #48]	@ (80007bc <__NVIC_SetPriorityGrouping+0x44>)
 800078a:	68db      	ldr	r3, [r3, #12]
 800078c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800078e:	68ba      	ldr	r2, [r7, #8]
 8000790:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000794:	4013      	ands	r3, r2
 8000796:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800079c:	68bb      	ldr	r3, [r7, #8]
 800079e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007a0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80007a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007aa:	4a04      	ldr	r2, [pc, #16]	@ (80007bc <__NVIC_SetPriorityGrouping+0x44>)
 80007ac:	68bb      	ldr	r3, [r7, #8]
 80007ae:	60d3      	str	r3, [r2, #12]
}
 80007b0:	bf00      	nop
 80007b2:	3714      	adds	r7, #20
 80007b4:	46bd      	mov	sp, r7
 80007b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ba:	4770      	bx	lr
 80007bc:	e000ed00 	.word	0xe000ed00

080007c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007c4:	4b04      	ldr	r3, [pc, #16]	@ (80007d8 <__NVIC_GetPriorityGrouping+0x18>)
 80007c6:	68db      	ldr	r3, [r3, #12]
 80007c8:	0a1b      	lsrs	r3, r3, #8
 80007ca:	f003 0307 	and.w	r3, r3, #7
}
 80007ce:	4618      	mov	r0, r3
 80007d0:	46bd      	mov	sp, r7
 80007d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d6:	4770      	bx	lr
 80007d8:	e000ed00 	.word	0xe000ed00

080007dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007dc:	b480      	push	{r7}
 80007de:	b083      	sub	sp, #12
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	4603      	mov	r3, r0
 80007e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	db0b      	blt.n	8000806 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007ee:	79fb      	ldrb	r3, [r7, #7]
 80007f0:	f003 021f 	and.w	r2, r3, #31
 80007f4:	4907      	ldr	r1, [pc, #28]	@ (8000814 <__NVIC_EnableIRQ+0x38>)
 80007f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007fa:	095b      	lsrs	r3, r3, #5
 80007fc:	2001      	movs	r0, #1
 80007fe:	fa00 f202 	lsl.w	r2, r0, r2
 8000802:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000806:	bf00      	nop
 8000808:	370c      	adds	r7, #12
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop
 8000814:	e000e100 	.word	0xe000e100

08000818 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000818:	b480      	push	{r7}
 800081a:	b083      	sub	sp, #12
 800081c:	af00      	add	r7, sp, #0
 800081e:	4603      	mov	r3, r0
 8000820:	6039      	str	r1, [r7, #0]
 8000822:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000824:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000828:	2b00      	cmp	r3, #0
 800082a:	db0a      	blt.n	8000842 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800082c:	683b      	ldr	r3, [r7, #0]
 800082e:	b2da      	uxtb	r2, r3
 8000830:	490c      	ldr	r1, [pc, #48]	@ (8000864 <__NVIC_SetPriority+0x4c>)
 8000832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000836:	0112      	lsls	r2, r2, #4
 8000838:	b2d2      	uxtb	r2, r2
 800083a:	440b      	add	r3, r1
 800083c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000840:	e00a      	b.n	8000858 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000842:	683b      	ldr	r3, [r7, #0]
 8000844:	b2da      	uxtb	r2, r3
 8000846:	4908      	ldr	r1, [pc, #32]	@ (8000868 <__NVIC_SetPriority+0x50>)
 8000848:	79fb      	ldrb	r3, [r7, #7]
 800084a:	f003 030f 	and.w	r3, r3, #15
 800084e:	3b04      	subs	r3, #4
 8000850:	0112      	lsls	r2, r2, #4
 8000852:	b2d2      	uxtb	r2, r2
 8000854:	440b      	add	r3, r1
 8000856:	761a      	strb	r2, [r3, #24]
}
 8000858:	bf00      	nop
 800085a:	370c      	adds	r7, #12
 800085c:	46bd      	mov	sp, r7
 800085e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000862:	4770      	bx	lr
 8000864:	e000e100 	.word	0xe000e100
 8000868:	e000ed00 	.word	0xe000ed00

0800086c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800086c:	b480      	push	{r7}
 800086e:	b089      	sub	sp, #36	@ 0x24
 8000870:	af00      	add	r7, sp, #0
 8000872:	60f8      	str	r0, [r7, #12]
 8000874:	60b9      	str	r1, [r7, #8]
 8000876:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	f003 0307 	and.w	r3, r3, #7
 800087e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000880:	69fb      	ldr	r3, [r7, #28]
 8000882:	f1c3 0307 	rsb	r3, r3, #7
 8000886:	2b04      	cmp	r3, #4
 8000888:	bf28      	it	cs
 800088a:	2304      	movcs	r3, #4
 800088c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800088e:	69fb      	ldr	r3, [r7, #28]
 8000890:	3304      	adds	r3, #4
 8000892:	2b06      	cmp	r3, #6
 8000894:	d902      	bls.n	800089c <NVIC_EncodePriority+0x30>
 8000896:	69fb      	ldr	r3, [r7, #28]
 8000898:	3b03      	subs	r3, #3
 800089a:	e000      	b.n	800089e <NVIC_EncodePriority+0x32>
 800089c:	2300      	movs	r3, #0
 800089e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008a0:	f04f 32ff 	mov.w	r2, #4294967295
 80008a4:	69bb      	ldr	r3, [r7, #24]
 80008a6:	fa02 f303 	lsl.w	r3, r2, r3
 80008aa:	43da      	mvns	r2, r3
 80008ac:	68bb      	ldr	r3, [r7, #8]
 80008ae:	401a      	ands	r2, r3
 80008b0:	697b      	ldr	r3, [r7, #20]
 80008b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008b4:	f04f 31ff 	mov.w	r1, #4294967295
 80008b8:	697b      	ldr	r3, [r7, #20]
 80008ba:	fa01 f303 	lsl.w	r3, r1, r3
 80008be:	43d9      	mvns	r1, r3
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008c4:	4313      	orrs	r3, r2
         );
}
 80008c6:	4618      	mov	r0, r3
 80008c8:	3724      	adds	r7, #36	@ 0x24
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr

080008d2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008d2:	b580      	push	{r7, lr}
 80008d4:	b082      	sub	sp, #8
 80008d6:	af00      	add	r7, sp, #0
 80008d8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008da:	6878      	ldr	r0, [r7, #4]
 80008dc:	f7ff ff4c 	bl	8000778 <__NVIC_SetPriorityGrouping>
}
 80008e0:	bf00      	nop
 80008e2:	3708      	adds	r7, #8
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}

080008e8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b086      	sub	sp, #24
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	4603      	mov	r3, r0
 80008f0:	60b9      	str	r1, [r7, #8]
 80008f2:	607a      	str	r2, [r7, #4]
 80008f4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80008f6:	2300      	movs	r3, #0
 80008f8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008fa:	f7ff ff61 	bl	80007c0 <__NVIC_GetPriorityGrouping>
 80008fe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000900:	687a      	ldr	r2, [r7, #4]
 8000902:	68b9      	ldr	r1, [r7, #8]
 8000904:	6978      	ldr	r0, [r7, #20]
 8000906:	f7ff ffb1 	bl	800086c <NVIC_EncodePriority>
 800090a:	4602      	mov	r2, r0
 800090c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000910:	4611      	mov	r1, r2
 8000912:	4618      	mov	r0, r3
 8000914:	f7ff ff80 	bl	8000818 <__NVIC_SetPriority>
}
 8000918:	bf00      	nop
 800091a:	3718      	adds	r7, #24
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}

08000920 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0
 8000926:	4603      	mov	r3, r0
 8000928:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800092a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800092e:	4618      	mov	r0, r3
 8000930:	f7ff ff54 	bl	80007dc <__NVIC_EnableIRQ>
}
 8000934:	bf00      	nop
 8000936:	3708      	adds	r7, #8
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}

0800093c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800093c:	b480      	push	{r7}
 800093e:	b087      	sub	sp, #28
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
 8000944:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000946:	2300      	movs	r3, #0
 8000948:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800094a:	e14e      	b.n	8000bea <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	681a      	ldr	r2, [r3, #0]
 8000950:	2101      	movs	r1, #1
 8000952:	697b      	ldr	r3, [r7, #20]
 8000954:	fa01 f303 	lsl.w	r3, r1, r3
 8000958:	4013      	ands	r3, r2
 800095a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	2b00      	cmp	r3, #0
 8000960:	f000 8140 	beq.w	8000be4 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	685b      	ldr	r3, [r3, #4]
 8000968:	f003 0303 	and.w	r3, r3, #3
 800096c:	2b01      	cmp	r3, #1
 800096e:	d005      	beq.n	800097c <HAL_GPIO_Init+0x40>
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	685b      	ldr	r3, [r3, #4]
 8000974:	f003 0303 	and.w	r3, r3, #3
 8000978:	2b02      	cmp	r3, #2
 800097a:	d130      	bne.n	80009de <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	689b      	ldr	r3, [r3, #8]
 8000980:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000982:	697b      	ldr	r3, [r7, #20]
 8000984:	005b      	lsls	r3, r3, #1
 8000986:	2203      	movs	r2, #3
 8000988:	fa02 f303 	lsl.w	r3, r2, r3
 800098c:	43db      	mvns	r3, r3
 800098e:	693a      	ldr	r2, [r7, #16]
 8000990:	4013      	ands	r3, r2
 8000992:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	68da      	ldr	r2, [r3, #12]
 8000998:	697b      	ldr	r3, [r7, #20]
 800099a:	005b      	lsls	r3, r3, #1
 800099c:	fa02 f303 	lsl.w	r3, r2, r3
 80009a0:	693a      	ldr	r2, [r7, #16]
 80009a2:	4313      	orrs	r3, r2
 80009a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	693a      	ldr	r2, [r7, #16]
 80009aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	685b      	ldr	r3, [r3, #4]
 80009b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80009b2:	2201      	movs	r2, #1
 80009b4:	697b      	ldr	r3, [r7, #20]
 80009b6:	fa02 f303 	lsl.w	r3, r2, r3
 80009ba:	43db      	mvns	r3, r3
 80009bc:	693a      	ldr	r2, [r7, #16]
 80009be:	4013      	ands	r3, r2
 80009c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80009c2:	683b      	ldr	r3, [r7, #0]
 80009c4:	685b      	ldr	r3, [r3, #4]
 80009c6:	091b      	lsrs	r3, r3, #4
 80009c8:	f003 0201 	and.w	r2, r3, #1
 80009cc:	697b      	ldr	r3, [r7, #20]
 80009ce:	fa02 f303 	lsl.w	r3, r2, r3
 80009d2:	693a      	ldr	r2, [r7, #16]
 80009d4:	4313      	orrs	r3, r2
 80009d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	693a      	ldr	r2, [r7, #16]
 80009dc:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	685b      	ldr	r3, [r3, #4]
 80009e2:	f003 0303 	and.w	r3, r3, #3
 80009e6:	2b03      	cmp	r3, #3
 80009e8:	d017      	beq.n	8000a1a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	68db      	ldr	r3, [r3, #12]
 80009ee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80009f0:	697b      	ldr	r3, [r7, #20]
 80009f2:	005b      	lsls	r3, r3, #1
 80009f4:	2203      	movs	r2, #3
 80009f6:	fa02 f303 	lsl.w	r3, r2, r3
 80009fa:	43db      	mvns	r3, r3
 80009fc:	693a      	ldr	r2, [r7, #16]
 80009fe:	4013      	ands	r3, r2
 8000a00:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000a02:	683b      	ldr	r3, [r7, #0]
 8000a04:	689a      	ldr	r2, [r3, #8]
 8000a06:	697b      	ldr	r3, [r7, #20]
 8000a08:	005b      	lsls	r3, r3, #1
 8000a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a0e:	693a      	ldr	r2, [r7, #16]
 8000a10:	4313      	orrs	r3, r2
 8000a12:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	693a      	ldr	r2, [r7, #16]
 8000a18:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	685b      	ldr	r3, [r3, #4]
 8000a1e:	f003 0303 	and.w	r3, r3, #3
 8000a22:	2b02      	cmp	r3, #2
 8000a24:	d123      	bne.n	8000a6e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a26:	697b      	ldr	r3, [r7, #20]
 8000a28:	08da      	lsrs	r2, r3, #3
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	3208      	adds	r2, #8
 8000a2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a32:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a34:	697b      	ldr	r3, [r7, #20]
 8000a36:	f003 0307 	and.w	r3, r3, #7
 8000a3a:	009b      	lsls	r3, r3, #2
 8000a3c:	220f      	movs	r2, #15
 8000a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a42:	43db      	mvns	r3, r3
 8000a44:	693a      	ldr	r2, [r7, #16]
 8000a46:	4013      	ands	r3, r2
 8000a48:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	691a      	ldr	r2, [r3, #16]
 8000a4e:	697b      	ldr	r3, [r7, #20]
 8000a50:	f003 0307 	and.w	r3, r3, #7
 8000a54:	009b      	lsls	r3, r3, #2
 8000a56:	fa02 f303 	lsl.w	r3, r2, r3
 8000a5a:	693a      	ldr	r2, [r7, #16]
 8000a5c:	4313      	orrs	r3, r2
 8000a5e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a60:	697b      	ldr	r3, [r7, #20]
 8000a62:	08da      	lsrs	r2, r3, #3
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	3208      	adds	r2, #8
 8000a68:	6939      	ldr	r1, [r7, #16]
 8000a6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000a74:	697b      	ldr	r3, [r7, #20]
 8000a76:	005b      	lsls	r3, r3, #1
 8000a78:	2203      	movs	r2, #3
 8000a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7e:	43db      	mvns	r3, r3
 8000a80:	693a      	ldr	r2, [r7, #16]
 8000a82:	4013      	ands	r3, r2
 8000a84:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	685b      	ldr	r3, [r3, #4]
 8000a8a:	f003 0203 	and.w	r2, r3, #3
 8000a8e:	697b      	ldr	r3, [r7, #20]
 8000a90:	005b      	lsls	r3, r3, #1
 8000a92:	fa02 f303 	lsl.w	r3, r2, r3
 8000a96:	693a      	ldr	r2, [r7, #16]
 8000a98:	4313      	orrs	r3, r2
 8000a9a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	693a      	ldr	r2, [r7, #16]
 8000aa0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	685b      	ldr	r3, [r3, #4]
 8000aa6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	f000 809a 	beq.w	8000be4 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ab0:	4b55      	ldr	r3, [pc, #340]	@ (8000c08 <HAL_GPIO_Init+0x2cc>)
 8000ab2:	699b      	ldr	r3, [r3, #24]
 8000ab4:	4a54      	ldr	r2, [pc, #336]	@ (8000c08 <HAL_GPIO_Init+0x2cc>)
 8000ab6:	f043 0301 	orr.w	r3, r3, #1
 8000aba:	6193      	str	r3, [r2, #24]
 8000abc:	4b52      	ldr	r3, [pc, #328]	@ (8000c08 <HAL_GPIO_Init+0x2cc>)
 8000abe:	699b      	ldr	r3, [r3, #24]
 8000ac0:	f003 0301 	and.w	r3, r3, #1
 8000ac4:	60bb      	str	r3, [r7, #8]
 8000ac6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000ac8:	4a50      	ldr	r2, [pc, #320]	@ (8000c0c <HAL_GPIO_Init+0x2d0>)
 8000aca:	697b      	ldr	r3, [r7, #20]
 8000acc:	089b      	lsrs	r3, r3, #2
 8000ace:	3302      	adds	r3, #2
 8000ad0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ad4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000ad6:	697b      	ldr	r3, [r7, #20]
 8000ad8:	f003 0303 	and.w	r3, r3, #3
 8000adc:	009b      	lsls	r3, r3, #2
 8000ade:	220f      	movs	r2, #15
 8000ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae4:	43db      	mvns	r3, r3
 8000ae6:	693a      	ldr	r2, [r7, #16]
 8000ae8:	4013      	ands	r3, r2
 8000aea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000af2:	d013      	beq.n	8000b1c <HAL_GPIO_Init+0x1e0>
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	4a46      	ldr	r2, [pc, #280]	@ (8000c10 <HAL_GPIO_Init+0x2d4>)
 8000af8:	4293      	cmp	r3, r2
 8000afa:	d00d      	beq.n	8000b18 <HAL_GPIO_Init+0x1dc>
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	4a45      	ldr	r2, [pc, #276]	@ (8000c14 <HAL_GPIO_Init+0x2d8>)
 8000b00:	4293      	cmp	r3, r2
 8000b02:	d007      	beq.n	8000b14 <HAL_GPIO_Init+0x1d8>
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	4a44      	ldr	r2, [pc, #272]	@ (8000c18 <HAL_GPIO_Init+0x2dc>)
 8000b08:	4293      	cmp	r3, r2
 8000b0a:	d101      	bne.n	8000b10 <HAL_GPIO_Init+0x1d4>
 8000b0c:	2303      	movs	r3, #3
 8000b0e:	e006      	b.n	8000b1e <HAL_GPIO_Init+0x1e2>
 8000b10:	2305      	movs	r3, #5
 8000b12:	e004      	b.n	8000b1e <HAL_GPIO_Init+0x1e2>
 8000b14:	2302      	movs	r3, #2
 8000b16:	e002      	b.n	8000b1e <HAL_GPIO_Init+0x1e2>
 8000b18:	2301      	movs	r3, #1
 8000b1a:	e000      	b.n	8000b1e <HAL_GPIO_Init+0x1e2>
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	697a      	ldr	r2, [r7, #20]
 8000b20:	f002 0203 	and.w	r2, r2, #3
 8000b24:	0092      	lsls	r2, r2, #2
 8000b26:	4093      	lsls	r3, r2
 8000b28:	693a      	ldr	r2, [r7, #16]
 8000b2a:	4313      	orrs	r3, r2
 8000b2c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000b2e:	4937      	ldr	r1, [pc, #220]	@ (8000c0c <HAL_GPIO_Init+0x2d0>)
 8000b30:	697b      	ldr	r3, [r7, #20]
 8000b32:	089b      	lsrs	r3, r3, #2
 8000b34:	3302      	adds	r3, #2
 8000b36:	693a      	ldr	r2, [r7, #16]
 8000b38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b3c:	4b37      	ldr	r3, [pc, #220]	@ (8000c1c <HAL_GPIO_Init+0x2e0>)
 8000b3e:	689b      	ldr	r3, [r3, #8]
 8000b40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	43db      	mvns	r3, r3
 8000b46:	693a      	ldr	r2, [r7, #16]
 8000b48:	4013      	ands	r3, r2
 8000b4a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	685b      	ldr	r3, [r3, #4]
 8000b50:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d003      	beq.n	8000b60 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000b58:	693a      	ldr	r2, [r7, #16]
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	4313      	orrs	r3, r2
 8000b5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000b60:	4a2e      	ldr	r2, [pc, #184]	@ (8000c1c <HAL_GPIO_Init+0x2e0>)
 8000b62:	693b      	ldr	r3, [r7, #16]
 8000b64:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000b66:	4b2d      	ldr	r3, [pc, #180]	@ (8000c1c <HAL_GPIO_Init+0x2e0>)
 8000b68:	68db      	ldr	r3, [r3, #12]
 8000b6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	43db      	mvns	r3, r3
 8000b70:	693a      	ldr	r2, [r7, #16]
 8000b72:	4013      	ands	r3, r2
 8000b74:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	685b      	ldr	r3, [r3, #4]
 8000b7a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d003      	beq.n	8000b8a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000b82:	693a      	ldr	r2, [r7, #16]
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	4313      	orrs	r3, r2
 8000b88:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000b8a:	4a24      	ldr	r2, [pc, #144]	@ (8000c1c <HAL_GPIO_Init+0x2e0>)
 8000b8c:	693b      	ldr	r3, [r7, #16]
 8000b8e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000b90:	4b22      	ldr	r3, [pc, #136]	@ (8000c1c <HAL_GPIO_Init+0x2e0>)
 8000b92:	685b      	ldr	r3, [r3, #4]
 8000b94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	43db      	mvns	r3, r3
 8000b9a:	693a      	ldr	r2, [r7, #16]
 8000b9c:	4013      	ands	r3, r2
 8000b9e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	685b      	ldr	r3, [r3, #4]
 8000ba4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d003      	beq.n	8000bb4 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000bac:	693a      	ldr	r2, [r7, #16]
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	4313      	orrs	r3, r2
 8000bb2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000bb4:	4a19      	ldr	r2, [pc, #100]	@ (8000c1c <HAL_GPIO_Init+0x2e0>)
 8000bb6:	693b      	ldr	r3, [r7, #16]
 8000bb8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000bba:	4b18      	ldr	r3, [pc, #96]	@ (8000c1c <HAL_GPIO_Init+0x2e0>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	43db      	mvns	r3, r3
 8000bc4:	693a      	ldr	r2, [r7, #16]
 8000bc6:	4013      	ands	r3, r2
 8000bc8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	685b      	ldr	r3, [r3, #4]
 8000bce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d003      	beq.n	8000bde <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000bd6:	693a      	ldr	r2, [r7, #16]
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	4313      	orrs	r3, r2
 8000bdc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000bde:	4a0f      	ldr	r2, [pc, #60]	@ (8000c1c <HAL_GPIO_Init+0x2e0>)
 8000be0:	693b      	ldr	r3, [r7, #16]
 8000be2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	3301      	adds	r3, #1
 8000be8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	681a      	ldr	r2, [r3, #0]
 8000bee:	697b      	ldr	r3, [r7, #20]
 8000bf0:	fa22 f303 	lsr.w	r3, r2, r3
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	f47f aea9 	bne.w	800094c <HAL_GPIO_Init+0x10>
  }
}
 8000bfa:	bf00      	nop
 8000bfc:	bf00      	nop
 8000bfe:	371c      	adds	r7, #28
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr
 8000c08:	40021000 	.word	0x40021000
 8000c0c:	40010000 	.word	0x40010000
 8000c10:	48000400 	.word	0x48000400
 8000c14:	48000800 	.word	0x48000800
 8000c18:	48000c00 	.word	0x48000c00
 8000c1c:	40010400 	.word	0x40010400

08000c20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b083      	sub	sp, #12
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
 8000c28:	460b      	mov	r3, r1
 8000c2a:	807b      	strh	r3, [r7, #2]
 8000c2c:	4613      	mov	r3, r2
 8000c2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c30:	787b      	ldrb	r3, [r7, #1]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d003      	beq.n	8000c3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c36:	887a      	ldrh	r2, [r7, #2]
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000c3c:	e002      	b.n	8000c44 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000c3e:	887a      	ldrh	r2, [r7, #2]
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000c44:	bf00      	nop
 8000c46:	370c      	adds	r7, #12
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr

08000c50 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b085      	sub	sp, #20
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
 8000c58:	460b      	mov	r3, r1
 8000c5a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	695b      	ldr	r3, [r3, #20]
 8000c60:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000c62:	887a      	ldrh	r2, [r7, #2]
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	4013      	ands	r3, r2
 8000c68:	041a      	lsls	r2, r3, #16
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	43d9      	mvns	r1, r3
 8000c6e:	887b      	ldrh	r3, [r7, #2]
 8000c70:	400b      	ands	r3, r1
 8000c72:	431a      	orrs	r2, r3
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	619a      	str	r2, [r3, #24]
}
 8000c78:	bf00      	nop
 8000c7a:	3714      	adds	r7, #20
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr

08000c84 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000c90:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000c94:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c96:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000c9a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d102      	bne.n	8000caa <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	f001 b823 	b.w	8001cf0 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000caa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000cae:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	f003 0301 	and.w	r3, r3, #1
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	f000 817d 	beq.w	8000fba <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000cc0:	4bbc      	ldr	r3, [pc, #752]	@ (8000fb4 <HAL_RCC_OscConfig+0x330>)
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	f003 030c 	and.w	r3, r3, #12
 8000cc8:	2b04      	cmp	r3, #4
 8000cca:	d00c      	beq.n	8000ce6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ccc:	4bb9      	ldr	r3, [pc, #740]	@ (8000fb4 <HAL_RCC_OscConfig+0x330>)
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	f003 030c 	and.w	r3, r3, #12
 8000cd4:	2b08      	cmp	r3, #8
 8000cd6:	d15c      	bne.n	8000d92 <HAL_RCC_OscConfig+0x10e>
 8000cd8:	4bb6      	ldr	r3, [pc, #728]	@ (8000fb4 <HAL_RCC_OscConfig+0x330>)
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ce0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000ce4:	d155      	bne.n	8000d92 <HAL_RCC_OscConfig+0x10e>
 8000ce6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000cea:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cee:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8000cf2:	fa93 f3a3 	rbit	r3, r3
 8000cf6:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000cfa:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cfe:	fab3 f383 	clz	r3, r3
 8000d02:	b2db      	uxtb	r3, r3
 8000d04:	095b      	lsrs	r3, r3, #5
 8000d06:	b2db      	uxtb	r3, r3
 8000d08:	f043 0301 	orr.w	r3, r3, #1
 8000d0c:	b2db      	uxtb	r3, r3
 8000d0e:	2b01      	cmp	r3, #1
 8000d10:	d102      	bne.n	8000d18 <HAL_RCC_OscConfig+0x94>
 8000d12:	4ba8      	ldr	r3, [pc, #672]	@ (8000fb4 <HAL_RCC_OscConfig+0x330>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	e015      	b.n	8000d44 <HAL_RCC_OscConfig+0xc0>
 8000d18:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000d1c:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d20:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8000d24:	fa93 f3a3 	rbit	r3, r3
 8000d28:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8000d2c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000d30:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8000d34:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8000d38:	fa93 f3a3 	rbit	r3, r3
 8000d3c:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8000d40:	4b9c      	ldr	r3, [pc, #624]	@ (8000fb4 <HAL_RCC_OscConfig+0x330>)
 8000d42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d44:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000d48:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8000d4c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8000d50:	fa92 f2a2 	rbit	r2, r2
 8000d54:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8000d58:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8000d5c:	fab2 f282 	clz	r2, r2
 8000d60:	b2d2      	uxtb	r2, r2
 8000d62:	f042 0220 	orr.w	r2, r2, #32
 8000d66:	b2d2      	uxtb	r2, r2
 8000d68:	f002 021f 	and.w	r2, r2, #31
 8000d6c:	2101      	movs	r1, #1
 8000d6e:	fa01 f202 	lsl.w	r2, r1, r2
 8000d72:	4013      	ands	r3, r2
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	f000 811f 	beq.w	8000fb8 <HAL_RCC_OscConfig+0x334>
 8000d7a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000d7e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	f040 8116 	bne.w	8000fb8 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	f000 bfaf 	b.w	8001cf0 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000d96:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000da2:	d106      	bne.n	8000db2 <HAL_RCC_OscConfig+0x12e>
 8000da4:	4b83      	ldr	r3, [pc, #524]	@ (8000fb4 <HAL_RCC_OscConfig+0x330>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a82      	ldr	r2, [pc, #520]	@ (8000fb4 <HAL_RCC_OscConfig+0x330>)
 8000daa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000dae:	6013      	str	r3, [r2, #0]
 8000db0:	e036      	b.n	8000e20 <HAL_RCC_OscConfig+0x19c>
 8000db2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000db6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d10c      	bne.n	8000ddc <HAL_RCC_OscConfig+0x158>
 8000dc2:	4b7c      	ldr	r3, [pc, #496]	@ (8000fb4 <HAL_RCC_OscConfig+0x330>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4a7b      	ldr	r2, [pc, #492]	@ (8000fb4 <HAL_RCC_OscConfig+0x330>)
 8000dc8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000dcc:	6013      	str	r3, [r2, #0]
 8000dce:	4b79      	ldr	r3, [pc, #484]	@ (8000fb4 <HAL_RCC_OscConfig+0x330>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4a78      	ldr	r2, [pc, #480]	@ (8000fb4 <HAL_RCC_OscConfig+0x330>)
 8000dd4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000dd8:	6013      	str	r3, [r2, #0]
 8000dda:	e021      	b.n	8000e20 <HAL_RCC_OscConfig+0x19c>
 8000ddc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000de0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000dec:	d10c      	bne.n	8000e08 <HAL_RCC_OscConfig+0x184>
 8000dee:	4b71      	ldr	r3, [pc, #452]	@ (8000fb4 <HAL_RCC_OscConfig+0x330>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	4a70      	ldr	r2, [pc, #448]	@ (8000fb4 <HAL_RCC_OscConfig+0x330>)
 8000df4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000df8:	6013      	str	r3, [r2, #0]
 8000dfa:	4b6e      	ldr	r3, [pc, #440]	@ (8000fb4 <HAL_RCC_OscConfig+0x330>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4a6d      	ldr	r2, [pc, #436]	@ (8000fb4 <HAL_RCC_OscConfig+0x330>)
 8000e00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e04:	6013      	str	r3, [r2, #0]
 8000e06:	e00b      	b.n	8000e20 <HAL_RCC_OscConfig+0x19c>
 8000e08:	4b6a      	ldr	r3, [pc, #424]	@ (8000fb4 <HAL_RCC_OscConfig+0x330>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a69      	ldr	r2, [pc, #420]	@ (8000fb4 <HAL_RCC_OscConfig+0x330>)
 8000e0e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000e12:	6013      	str	r3, [r2, #0]
 8000e14:	4b67      	ldr	r3, [pc, #412]	@ (8000fb4 <HAL_RCC_OscConfig+0x330>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a66      	ldr	r2, [pc, #408]	@ (8000fb4 <HAL_RCC_OscConfig+0x330>)
 8000e1a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000e1e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000e20:	4b64      	ldr	r3, [pc, #400]	@ (8000fb4 <HAL_RCC_OscConfig+0x330>)
 8000e22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e24:	f023 020f 	bic.w	r2, r3, #15
 8000e28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000e2c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	689b      	ldr	r3, [r3, #8]
 8000e34:	495f      	ldr	r1, [pc, #380]	@ (8000fb4 <HAL_RCC_OscConfig+0x330>)
 8000e36:	4313      	orrs	r3, r2
 8000e38:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000e3e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d059      	beq.n	8000efe <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e4a:	f7ff fc89 	bl	8000760 <HAL_GetTick>
 8000e4e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e52:	e00a      	b.n	8000e6a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e54:	f7ff fc84 	bl	8000760 <HAL_GetTick>
 8000e58:	4602      	mov	r2, r0
 8000e5a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8000e5e:	1ad3      	subs	r3, r2, r3
 8000e60:	2b64      	cmp	r3, #100	@ 0x64
 8000e62:	d902      	bls.n	8000e6a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8000e64:	2303      	movs	r3, #3
 8000e66:	f000 bf43 	b.w	8001cf0 <HAL_RCC_OscConfig+0x106c>
 8000e6a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000e6e:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e72:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8000e76:	fa93 f3a3 	rbit	r3, r3
 8000e7a:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8000e7e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e82:	fab3 f383 	clz	r3, r3
 8000e86:	b2db      	uxtb	r3, r3
 8000e88:	095b      	lsrs	r3, r3, #5
 8000e8a:	b2db      	uxtb	r3, r3
 8000e8c:	f043 0301 	orr.w	r3, r3, #1
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	2b01      	cmp	r3, #1
 8000e94:	d102      	bne.n	8000e9c <HAL_RCC_OscConfig+0x218>
 8000e96:	4b47      	ldr	r3, [pc, #284]	@ (8000fb4 <HAL_RCC_OscConfig+0x330>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	e015      	b.n	8000ec8 <HAL_RCC_OscConfig+0x244>
 8000e9c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000ea0:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ea4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8000ea8:	fa93 f3a3 	rbit	r3, r3
 8000eac:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8000eb0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000eb4:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8000eb8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8000ebc:	fa93 f3a3 	rbit	r3, r3
 8000ec0:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8000ec4:	4b3b      	ldr	r3, [pc, #236]	@ (8000fb4 <HAL_RCC_OscConfig+0x330>)
 8000ec6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ec8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000ecc:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8000ed0:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8000ed4:	fa92 f2a2 	rbit	r2, r2
 8000ed8:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8000edc:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8000ee0:	fab2 f282 	clz	r2, r2
 8000ee4:	b2d2      	uxtb	r2, r2
 8000ee6:	f042 0220 	orr.w	r2, r2, #32
 8000eea:	b2d2      	uxtb	r2, r2
 8000eec:	f002 021f 	and.w	r2, r2, #31
 8000ef0:	2101      	movs	r1, #1
 8000ef2:	fa01 f202 	lsl.w	r2, r1, r2
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d0ab      	beq.n	8000e54 <HAL_RCC_OscConfig+0x1d0>
 8000efc:	e05d      	b.n	8000fba <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000efe:	f7ff fc2f 	bl	8000760 <HAL_GetTick>
 8000f02:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f06:	e00a      	b.n	8000f1e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f08:	f7ff fc2a 	bl	8000760 <HAL_GetTick>
 8000f0c:	4602      	mov	r2, r0
 8000f0e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8000f12:	1ad3      	subs	r3, r2, r3
 8000f14:	2b64      	cmp	r3, #100	@ 0x64
 8000f16:	d902      	bls.n	8000f1e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8000f18:	2303      	movs	r3, #3
 8000f1a:	f000 bee9 	b.w	8001cf0 <HAL_RCC_OscConfig+0x106c>
 8000f1e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000f22:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f26:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8000f2a:	fa93 f3a3 	rbit	r3, r3
 8000f2e:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8000f32:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f36:	fab3 f383 	clz	r3, r3
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	095b      	lsrs	r3, r3, #5
 8000f3e:	b2db      	uxtb	r3, r3
 8000f40:	f043 0301 	orr.w	r3, r3, #1
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	2b01      	cmp	r3, #1
 8000f48:	d102      	bne.n	8000f50 <HAL_RCC_OscConfig+0x2cc>
 8000f4a:	4b1a      	ldr	r3, [pc, #104]	@ (8000fb4 <HAL_RCC_OscConfig+0x330>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	e015      	b.n	8000f7c <HAL_RCC_OscConfig+0x2f8>
 8000f50:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000f54:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f58:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8000f5c:	fa93 f3a3 	rbit	r3, r3
 8000f60:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8000f64:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000f68:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8000f6c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8000f70:	fa93 f3a3 	rbit	r3, r3
 8000f74:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8000f78:	4b0e      	ldr	r3, [pc, #56]	@ (8000fb4 <HAL_RCC_OscConfig+0x330>)
 8000f7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f7c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000f80:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8000f84:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8000f88:	fa92 f2a2 	rbit	r2, r2
 8000f8c:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8000f90:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8000f94:	fab2 f282 	clz	r2, r2
 8000f98:	b2d2      	uxtb	r2, r2
 8000f9a:	f042 0220 	orr.w	r2, r2, #32
 8000f9e:	b2d2      	uxtb	r2, r2
 8000fa0:	f002 021f 	and.w	r2, r2, #31
 8000fa4:	2101      	movs	r1, #1
 8000fa6:	fa01 f202 	lsl.w	r2, r1, r2
 8000faa:	4013      	ands	r3, r2
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d1ab      	bne.n	8000f08 <HAL_RCC_OscConfig+0x284>
 8000fb0:	e003      	b.n	8000fba <HAL_RCC_OscConfig+0x336>
 8000fb2:	bf00      	nop
 8000fb4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000fbe:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f003 0302 	and.w	r3, r3, #2
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	f000 817d 	beq.w	80012ca <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000fd0:	4ba6      	ldr	r3, [pc, #664]	@ (800126c <HAL_RCC_OscConfig+0x5e8>)
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	f003 030c 	and.w	r3, r3, #12
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d00b      	beq.n	8000ff4 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000fdc:	4ba3      	ldr	r3, [pc, #652]	@ (800126c <HAL_RCC_OscConfig+0x5e8>)
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	f003 030c 	and.w	r3, r3, #12
 8000fe4:	2b08      	cmp	r3, #8
 8000fe6:	d172      	bne.n	80010ce <HAL_RCC_OscConfig+0x44a>
 8000fe8:	4ba0      	ldr	r3, [pc, #640]	@ (800126c <HAL_RCC_OscConfig+0x5e8>)
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d16c      	bne.n	80010ce <HAL_RCC_OscConfig+0x44a>
 8000ff4:	2302      	movs	r3, #2
 8000ff6:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ffa:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8000ffe:	fa93 f3a3 	rbit	r3, r3
 8001002:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8001006:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800100a:	fab3 f383 	clz	r3, r3
 800100e:	b2db      	uxtb	r3, r3
 8001010:	095b      	lsrs	r3, r3, #5
 8001012:	b2db      	uxtb	r3, r3
 8001014:	f043 0301 	orr.w	r3, r3, #1
 8001018:	b2db      	uxtb	r3, r3
 800101a:	2b01      	cmp	r3, #1
 800101c:	d102      	bne.n	8001024 <HAL_RCC_OscConfig+0x3a0>
 800101e:	4b93      	ldr	r3, [pc, #588]	@ (800126c <HAL_RCC_OscConfig+0x5e8>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	e013      	b.n	800104c <HAL_RCC_OscConfig+0x3c8>
 8001024:	2302      	movs	r3, #2
 8001026:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800102a:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 800102e:	fa93 f3a3 	rbit	r3, r3
 8001032:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001036:	2302      	movs	r3, #2
 8001038:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 800103c:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8001040:	fa93 f3a3 	rbit	r3, r3
 8001044:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8001048:	4b88      	ldr	r3, [pc, #544]	@ (800126c <HAL_RCC_OscConfig+0x5e8>)
 800104a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800104c:	2202      	movs	r2, #2
 800104e:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8001052:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001056:	fa92 f2a2 	rbit	r2, r2
 800105a:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 800105e:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8001062:	fab2 f282 	clz	r2, r2
 8001066:	b2d2      	uxtb	r2, r2
 8001068:	f042 0220 	orr.w	r2, r2, #32
 800106c:	b2d2      	uxtb	r2, r2
 800106e:	f002 021f 	and.w	r2, r2, #31
 8001072:	2101      	movs	r1, #1
 8001074:	fa01 f202 	lsl.w	r2, r1, r2
 8001078:	4013      	ands	r3, r2
 800107a:	2b00      	cmp	r3, #0
 800107c:	d00a      	beq.n	8001094 <HAL_RCC_OscConfig+0x410>
 800107e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001082:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	691b      	ldr	r3, [r3, #16]
 800108a:	2b01      	cmp	r3, #1
 800108c:	d002      	beq.n	8001094 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800108e:	2301      	movs	r3, #1
 8001090:	f000 be2e 	b.w	8001cf0 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001094:	4b75      	ldr	r3, [pc, #468]	@ (800126c <HAL_RCC_OscConfig+0x5e8>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800109c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80010a0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	695b      	ldr	r3, [r3, #20]
 80010a8:	21f8      	movs	r1, #248	@ 0xf8
 80010aa:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010ae:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80010b2:	fa91 f1a1 	rbit	r1, r1
 80010b6:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 80010ba:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 80010be:	fab1 f181 	clz	r1, r1
 80010c2:	b2c9      	uxtb	r1, r1
 80010c4:	408b      	lsls	r3, r1
 80010c6:	4969      	ldr	r1, [pc, #420]	@ (800126c <HAL_RCC_OscConfig+0x5e8>)
 80010c8:	4313      	orrs	r3, r2
 80010ca:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010cc:	e0fd      	b.n	80012ca <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80010d2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	691b      	ldr	r3, [r3, #16]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	f000 8088 	beq.w	80011f0 <HAL_RCC_OscConfig+0x56c>
 80010e0:	2301      	movs	r3, #1
 80010e2:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010e6:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 80010ea:	fa93 f3a3 	rbit	r3, r3
 80010ee:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 80010f2:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010f6:	fab3 f383 	clz	r3, r3
 80010fa:	b2db      	uxtb	r3, r3
 80010fc:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001100:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001104:	009b      	lsls	r3, r3, #2
 8001106:	461a      	mov	r2, r3
 8001108:	2301      	movs	r3, #1
 800110a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800110c:	f7ff fb28 	bl	8000760 <HAL_GetTick>
 8001110:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001114:	e00a      	b.n	800112c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001116:	f7ff fb23 	bl	8000760 <HAL_GetTick>
 800111a:	4602      	mov	r2, r0
 800111c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001120:	1ad3      	subs	r3, r2, r3
 8001122:	2b02      	cmp	r3, #2
 8001124:	d902      	bls.n	800112c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001126:	2303      	movs	r3, #3
 8001128:	f000 bde2 	b.w	8001cf0 <HAL_RCC_OscConfig+0x106c>
 800112c:	2302      	movs	r3, #2
 800112e:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001132:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8001136:	fa93 f3a3 	rbit	r3, r3
 800113a:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 800113e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001142:	fab3 f383 	clz	r3, r3
 8001146:	b2db      	uxtb	r3, r3
 8001148:	095b      	lsrs	r3, r3, #5
 800114a:	b2db      	uxtb	r3, r3
 800114c:	f043 0301 	orr.w	r3, r3, #1
 8001150:	b2db      	uxtb	r3, r3
 8001152:	2b01      	cmp	r3, #1
 8001154:	d102      	bne.n	800115c <HAL_RCC_OscConfig+0x4d8>
 8001156:	4b45      	ldr	r3, [pc, #276]	@ (800126c <HAL_RCC_OscConfig+0x5e8>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	e013      	b.n	8001184 <HAL_RCC_OscConfig+0x500>
 800115c:	2302      	movs	r3, #2
 800115e:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001162:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8001166:	fa93 f3a3 	rbit	r3, r3
 800116a:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 800116e:	2302      	movs	r3, #2
 8001170:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001174:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8001178:	fa93 f3a3 	rbit	r3, r3
 800117c:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8001180:	4b3a      	ldr	r3, [pc, #232]	@ (800126c <HAL_RCC_OscConfig+0x5e8>)
 8001182:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001184:	2202      	movs	r2, #2
 8001186:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 800118a:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800118e:	fa92 f2a2 	rbit	r2, r2
 8001192:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8001196:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 800119a:	fab2 f282 	clz	r2, r2
 800119e:	b2d2      	uxtb	r2, r2
 80011a0:	f042 0220 	orr.w	r2, r2, #32
 80011a4:	b2d2      	uxtb	r2, r2
 80011a6:	f002 021f 	and.w	r2, r2, #31
 80011aa:	2101      	movs	r1, #1
 80011ac:	fa01 f202 	lsl.w	r2, r1, r2
 80011b0:	4013      	ands	r3, r2
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d0af      	beq.n	8001116 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011b6:	4b2d      	ldr	r3, [pc, #180]	@ (800126c <HAL_RCC_OscConfig+0x5e8>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80011be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80011c2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	695b      	ldr	r3, [r3, #20]
 80011ca:	21f8      	movs	r1, #248	@ 0xf8
 80011cc:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011d0:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80011d4:	fa91 f1a1 	rbit	r1, r1
 80011d8:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 80011dc:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 80011e0:	fab1 f181 	clz	r1, r1
 80011e4:	b2c9      	uxtb	r1, r1
 80011e6:	408b      	lsls	r3, r1
 80011e8:	4920      	ldr	r1, [pc, #128]	@ (800126c <HAL_RCC_OscConfig+0x5e8>)
 80011ea:	4313      	orrs	r3, r2
 80011ec:	600b      	str	r3, [r1, #0]
 80011ee:	e06c      	b.n	80012ca <HAL_RCC_OscConfig+0x646>
 80011f0:	2301      	movs	r3, #1
 80011f2:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011f6:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80011fa:	fa93 f3a3 	rbit	r3, r3
 80011fe:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8001202:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001206:	fab3 f383 	clz	r3, r3
 800120a:	b2db      	uxtb	r3, r3
 800120c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001210:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001214:	009b      	lsls	r3, r3, #2
 8001216:	461a      	mov	r2, r3
 8001218:	2300      	movs	r3, #0
 800121a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800121c:	f7ff faa0 	bl	8000760 <HAL_GetTick>
 8001220:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001224:	e00a      	b.n	800123c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001226:	f7ff fa9b 	bl	8000760 <HAL_GetTick>
 800122a:	4602      	mov	r2, r0
 800122c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001230:	1ad3      	subs	r3, r2, r3
 8001232:	2b02      	cmp	r3, #2
 8001234:	d902      	bls.n	800123c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001236:	2303      	movs	r3, #3
 8001238:	f000 bd5a 	b.w	8001cf0 <HAL_RCC_OscConfig+0x106c>
 800123c:	2302      	movs	r3, #2
 800123e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001242:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001246:	fa93 f3a3 	rbit	r3, r3
 800124a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 800124e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001252:	fab3 f383 	clz	r3, r3
 8001256:	b2db      	uxtb	r3, r3
 8001258:	095b      	lsrs	r3, r3, #5
 800125a:	b2db      	uxtb	r3, r3
 800125c:	f043 0301 	orr.w	r3, r3, #1
 8001260:	b2db      	uxtb	r3, r3
 8001262:	2b01      	cmp	r3, #1
 8001264:	d104      	bne.n	8001270 <HAL_RCC_OscConfig+0x5ec>
 8001266:	4b01      	ldr	r3, [pc, #4]	@ (800126c <HAL_RCC_OscConfig+0x5e8>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	e015      	b.n	8001298 <HAL_RCC_OscConfig+0x614>
 800126c:	40021000 	.word	0x40021000
 8001270:	2302      	movs	r3, #2
 8001272:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001276:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800127a:	fa93 f3a3 	rbit	r3, r3
 800127e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001282:	2302      	movs	r3, #2
 8001284:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001288:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800128c:	fa93 f3a3 	rbit	r3, r3
 8001290:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8001294:	4bc8      	ldr	r3, [pc, #800]	@ (80015b8 <HAL_RCC_OscConfig+0x934>)
 8001296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001298:	2202      	movs	r2, #2
 800129a:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 800129e:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80012a2:	fa92 f2a2 	rbit	r2, r2
 80012a6:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 80012aa:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80012ae:	fab2 f282 	clz	r2, r2
 80012b2:	b2d2      	uxtb	r2, r2
 80012b4:	f042 0220 	orr.w	r2, r2, #32
 80012b8:	b2d2      	uxtb	r2, r2
 80012ba:	f002 021f 	and.w	r2, r2, #31
 80012be:	2101      	movs	r1, #1
 80012c0:	fa01 f202 	lsl.w	r2, r1, r2
 80012c4:	4013      	ands	r3, r2
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d1ad      	bne.n	8001226 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80012ce:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f003 0308 	and.w	r3, r3, #8
 80012da:	2b00      	cmp	r3, #0
 80012dc:	f000 8110 	beq.w	8001500 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80012e4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	699b      	ldr	r3, [r3, #24]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d079      	beq.n	80013e4 <HAL_RCC_OscConfig+0x760>
 80012f0:	2301      	movs	r3, #1
 80012f2:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012f6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80012fa:	fa93 f3a3 	rbit	r3, r3
 80012fe:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8001302:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001306:	fab3 f383 	clz	r3, r3
 800130a:	b2db      	uxtb	r3, r3
 800130c:	461a      	mov	r2, r3
 800130e:	4bab      	ldr	r3, [pc, #684]	@ (80015bc <HAL_RCC_OscConfig+0x938>)
 8001310:	4413      	add	r3, r2
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	461a      	mov	r2, r3
 8001316:	2301      	movs	r3, #1
 8001318:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800131a:	f7ff fa21 	bl	8000760 <HAL_GetTick>
 800131e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001322:	e00a      	b.n	800133a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001324:	f7ff fa1c 	bl	8000760 <HAL_GetTick>
 8001328:	4602      	mov	r2, r0
 800132a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800132e:	1ad3      	subs	r3, r2, r3
 8001330:	2b02      	cmp	r3, #2
 8001332:	d902      	bls.n	800133a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001334:	2303      	movs	r3, #3
 8001336:	f000 bcdb 	b.w	8001cf0 <HAL_RCC_OscConfig+0x106c>
 800133a:	2302      	movs	r3, #2
 800133c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001340:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001344:	fa93 f3a3 	rbit	r3, r3
 8001348:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800134c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001350:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001354:	2202      	movs	r2, #2
 8001356:	601a      	str	r2, [r3, #0]
 8001358:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800135c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	fa93 f2a3 	rbit	r2, r3
 8001366:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800136a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800136e:	601a      	str	r2, [r3, #0]
 8001370:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001374:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001378:	2202      	movs	r2, #2
 800137a:	601a      	str	r2, [r3, #0]
 800137c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001380:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	fa93 f2a3 	rbit	r2, r3
 800138a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800138e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001392:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001394:	4b88      	ldr	r3, [pc, #544]	@ (80015b8 <HAL_RCC_OscConfig+0x934>)
 8001396:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001398:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800139c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80013a0:	2102      	movs	r1, #2
 80013a2:	6019      	str	r1, [r3, #0]
 80013a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013a8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	fa93 f1a3 	rbit	r1, r3
 80013b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013b6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80013ba:	6019      	str	r1, [r3, #0]
  return result;
 80013bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013c0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	fab3 f383 	clz	r3, r3
 80013ca:	b2db      	uxtb	r3, r3
 80013cc:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	f003 031f 	and.w	r3, r3, #31
 80013d6:	2101      	movs	r1, #1
 80013d8:	fa01 f303 	lsl.w	r3, r1, r3
 80013dc:	4013      	ands	r3, r2
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d0a0      	beq.n	8001324 <HAL_RCC_OscConfig+0x6a0>
 80013e2:	e08d      	b.n	8001500 <HAL_RCC_OscConfig+0x87c>
 80013e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013e8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80013ec:	2201      	movs	r2, #1
 80013ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013f4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	fa93 f2a3 	rbit	r2, r3
 80013fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001402:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001406:	601a      	str	r2, [r3, #0]
  return result;
 8001408:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800140c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001410:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001412:	fab3 f383 	clz	r3, r3
 8001416:	b2db      	uxtb	r3, r3
 8001418:	461a      	mov	r2, r3
 800141a:	4b68      	ldr	r3, [pc, #416]	@ (80015bc <HAL_RCC_OscConfig+0x938>)
 800141c:	4413      	add	r3, r2
 800141e:	009b      	lsls	r3, r3, #2
 8001420:	461a      	mov	r2, r3
 8001422:	2300      	movs	r3, #0
 8001424:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001426:	f7ff f99b 	bl	8000760 <HAL_GetTick>
 800142a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800142e:	e00a      	b.n	8001446 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001430:	f7ff f996 	bl	8000760 <HAL_GetTick>
 8001434:	4602      	mov	r2, r0
 8001436:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800143a:	1ad3      	subs	r3, r2, r3
 800143c:	2b02      	cmp	r3, #2
 800143e:	d902      	bls.n	8001446 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001440:	2303      	movs	r3, #3
 8001442:	f000 bc55 	b.w	8001cf0 <HAL_RCC_OscConfig+0x106c>
 8001446:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800144a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800144e:	2202      	movs	r2, #2
 8001450:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001452:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001456:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	fa93 f2a3 	rbit	r2, r3
 8001460:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001464:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001468:	601a      	str	r2, [r3, #0]
 800146a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800146e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001472:	2202      	movs	r2, #2
 8001474:	601a      	str	r2, [r3, #0]
 8001476:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800147a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	fa93 f2a3 	rbit	r2, r3
 8001484:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001488:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800148c:	601a      	str	r2, [r3, #0]
 800148e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001492:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001496:	2202      	movs	r2, #2
 8001498:	601a      	str	r2, [r3, #0]
 800149a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800149e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	fa93 f2a3 	rbit	r2, r3
 80014a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014ac:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80014b0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014b2:	4b41      	ldr	r3, [pc, #260]	@ (80015b8 <HAL_RCC_OscConfig+0x934>)
 80014b4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80014b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014ba:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80014be:	2102      	movs	r1, #2
 80014c0:	6019      	str	r1, [r3, #0]
 80014c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014c6:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	fa93 f1a3 	rbit	r1, r3
 80014d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014d4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80014d8:	6019      	str	r1, [r3, #0]
  return result;
 80014da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014de:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	fab3 f383 	clz	r3, r3
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	f003 031f 	and.w	r3, r3, #31
 80014f4:	2101      	movs	r1, #1
 80014f6:	fa01 f303 	lsl.w	r3, r1, r3
 80014fa:	4013      	ands	r3, r2
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d197      	bne.n	8001430 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001500:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001504:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f003 0304 	and.w	r3, r3, #4
 8001510:	2b00      	cmp	r3, #0
 8001512:	f000 81a1 	beq.w	8001858 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001516:	2300      	movs	r3, #0
 8001518:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800151c:	4b26      	ldr	r3, [pc, #152]	@ (80015b8 <HAL_RCC_OscConfig+0x934>)
 800151e:	69db      	ldr	r3, [r3, #28]
 8001520:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001524:	2b00      	cmp	r3, #0
 8001526:	d116      	bne.n	8001556 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001528:	4b23      	ldr	r3, [pc, #140]	@ (80015b8 <HAL_RCC_OscConfig+0x934>)
 800152a:	69db      	ldr	r3, [r3, #28]
 800152c:	4a22      	ldr	r2, [pc, #136]	@ (80015b8 <HAL_RCC_OscConfig+0x934>)
 800152e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001532:	61d3      	str	r3, [r2, #28]
 8001534:	4b20      	ldr	r3, [pc, #128]	@ (80015b8 <HAL_RCC_OscConfig+0x934>)
 8001536:	69db      	ldr	r3, [r3, #28]
 8001538:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 800153c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001540:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8001544:	601a      	str	r2, [r3, #0]
 8001546:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800154a:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 800154e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001550:	2301      	movs	r3, #1
 8001552:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001556:	4b1a      	ldr	r3, [pc, #104]	@ (80015c0 <HAL_RCC_OscConfig+0x93c>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800155e:	2b00      	cmp	r3, #0
 8001560:	d11a      	bne.n	8001598 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001562:	4b17      	ldr	r3, [pc, #92]	@ (80015c0 <HAL_RCC_OscConfig+0x93c>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a16      	ldr	r2, [pc, #88]	@ (80015c0 <HAL_RCC_OscConfig+0x93c>)
 8001568:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800156c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800156e:	f7ff f8f7 	bl	8000760 <HAL_GetTick>
 8001572:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001576:	e009      	b.n	800158c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001578:	f7ff f8f2 	bl	8000760 <HAL_GetTick>
 800157c:	4602      	mov	r2, r0
 800157e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001582:	1ad3      	subs	r3, r2, r3
 8001584:	2b64      	cmp	r3, #100	@ 0x64
 8001586:	d901      	bls.n	800158c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001588:	2303      	movs	r3, #3
 800158a:	e3b1      	b.n	8001cf0 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800158c:	4b0c      	ldr	r3, [pc, #48]	@ (80015c0 <HAL_RCC_OscConfig+0x93c>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001594:	2b00      	cmp	r3, #0
 8001596:	d0ef      	beq.n	8001578 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001598:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800159c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	d10d      	bne.n	80015c4 <HAL_RCC_OscConfig+0x940>
 80015a8:	4b03      	ldr	r3, [pc, #12]	@ (80015b8 <HAL_RCC_OscConfig+0x934>)
 80015aa:	6a1b      	ldr	r3, [r3, #32]
 80015ac:	4a02      	ldr	r2, [pc, #8]	@ (80015b8 <HAL_RCC_OscConfig+0x934>)
 80015ae:	f043 0301 	orr.w	r3, r3, #1
 80015b2:	6213      	str	r3, [r2, #32]
 80015b4:	e03c      	b.n	8001630 <HAL_RCC_OscConfig+0x9ac>
 80015b6:	bf00      	nop
 80015b8:	40021000 	.word	0x40021000
 80015bc:	10908120 	.word	0x10908120
 80015c0:	40007000 	.word	0x40007000
 80015c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015c8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	68db      	ldr	r3, [r3, #12]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d10c      	bne.n	80015ee <HAL_RCC_OscConfig+0x96a>
 80015d4:	4bc1      	ldr	r3, [pc, #772]	@ (80018dc <HAL_RCC_OscConfig+0xc58>)
 80015d6:	6a1b      	ldr	r3, [r3, #32]
 80015d8:	4ac0      	ldr	r2, [pc, #768]	@ (80018dc <HAL_RCC_OscConfig+0xc58>)
 80015da:	f023 0301 	bic.w	r3, r3, #1
 80015de:	6213      	str	r3, [r2, #32]
 80015e0:	4bbe      	ldr	r3, [pc, #760]	@ (80018dc <HAL_RCC_OscConfig+0xc58>)
 80015e2:	6a1b      	ldr	r3, [r3, #32]
 80015e4:	4abd      	ldr	r2, [pc, #756]	@ (80018dc <HAL_RCC_OscConfig+0xc58>)
 80015e6:	f023 0304 	bic.w	r3, r3, #4
 80015ea:	6213      	str	r3, [r2, #32]
 80015ec:	e020      	b.n	8001630 <HAL_RCC_OscConfig+0x9ac>
 80015ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015f2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	68db      	ldr	r3, [r3, #12]
 80015fa:	2b05      	cmp	r3, #5
 80015fc:	d10c      	bne.n	8001618 <HAL_RCC_OscConfig+0x994>
 80015fe:	4bb7      	ldr	r3, [pc, #732]	@ (80018dc <HAL_RCC_OscConfig+0xc58>)
 8001600:	6a1b      	ldr	r3, [r3, #32]
 8001602:	4ab6      	ldr	r2, [pc, #728]	@ (80018dc <HAL_RCC_OscConfig+0xc58>)
 8001604:	f043 0304 	orr.w	r3, r3, #4
 8001608:	6213      	str	r3, [r2, #32]
 800160a:	4bb4      	ldr	r3, [pc, #720]	@ (80018dc <HAL_RCC_OscConfig+0xc58>)
 800160c:	6a1b      	ldr	r3, [r3, #32]
 800160e:	4ab3      	ldr	r2, [pc, #716]	@ (80018dc <HAL_RCC_OscConfig+0xc58>)
 8001610:	f043 0301 	orr.w	r3, r3, #1
 8001614:	6213      	str	r3, [r2, #32]
 8001616:	e00b      	b.n	8001630 <HAL_RCC_OscConfig+0x9ac>
 8001618:	4bb0      	ldr	r3, [pc, #704]	@ (80018dc <HAL_RCC_OscConfig+0xc58>)
 800161a:	6a1b      	ldr	r3, [r3, #32]
 800161c:	4aaf      	ldr	r2, [pc, #700]	@ (80018dc <HAL_RCC_OscConfig+0xc58>)
 800161e:	f023 0301 	bic.w	r3, r3, #1
 8001622:	6213      	str	r3, [r2, #32]
 8001624:	4bad      	ldr	r3, [pc, #692]	@ (80018dc <HAL_RCC_OscConfig+0xc58>)
 8001626:	6a1b      	ldr	r3, [r3, #32]
 8001628:	4aac      	ldr	r2, [pc, #688]	@ (80018dc <HAL_RCC_OscConfig+0xc58>)
 800162a:	f023 0304 	bic.w	r3, r3, #4
 800162e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001630:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001634:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	68db      	ldr	r3, [r3, #12]
 800163c:	2b00      	cmp	r3, #0
 800163e:	f000 8081 	beq.w	8001744 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001642:	f7ff f88d 	bl	8000760 <HAL_GetTick>
 8001646:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800164a:	e00b      	b.n	8001664 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800164c:	f7ff f888 	bl	8000760 <HAL_GetTick>
 8001650:	4602      	mov	r2, r0
 8001652:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	f241 3288 	movw	r2, #5000	@ 0x1388
 800165c:	4293      	cmp	r3, r2
 800165e:	d901      	bls.n	8001664 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8001660:	2303      	movs	r3, #3
 8001662:	e345      	b.n	8001cf0 <HAL_RCC_OscConfig+0x106c>
 8001664:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001668:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800166c:	2202      	movs	r2, #2
 800166e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001670:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001674:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	fa93 f2a3 	rbit	r2, r3
 800167e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001682:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001686:	601a      	str	r2, [r3, #0]
 8001688:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800168c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001690:	2202      	movs	r2, #2
 8001692:	601a      	str	r2, [r3, #0]
 8001694:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001698:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	fa93 f2a3 	rbit	r2, r3
 80016a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016a6:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80016aa:	601a      	str	r2, [r3, #0]
  return result;
 80016ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016b0:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80016b4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016b6:	fab3 f383 	clz	r3, r3
 80016ba:	b2db      	uxtb	r3, r3
 80016bc:	095b      	lsrs	r3, r3, #5
 80016be:	b2db      	uxtb	r3, r3
 80016c0:	f043 0302 	orr.w	r3, r3, #2
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	2b02      	cmp	r3, #2
 80016c8:	d102      	bne.n	80016d0 <HAL_RCC_OscConfig+0xa4c>
 80016ca:	4b84      	ldr	r3, [pc, #528]	@ (80018dc <HAL_RCC_OscConfig+0xc58>)
 80016cc:	6a1b      	ldr	r3, [r3, #32]
 80016ce:	e013      	b.n	80016f8 <HAL_RCC_OscConfig+0xa74>
 80016d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016d4:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80016d8:	2202      	movs	r2, #2
 80016da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016e0:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	fa93 f2a3 	rbit	r2, r3
 80016ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016ee:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80016f2:	601a      	str	r2, [r3, #0]
 80016f4:	4b79      	ldr	r3, [pc, #484]	@ (80018dc <HAL_RCC_OscConfig+0xc58>)
 80016f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016f8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80016fc:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8001700:	2102      	movs	r1, #2
 8001702:	6011      	str	r1, [r2, #0]
 8001704:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001708:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 800170c:	6812      	ldr	r2, [r2, #0]
 800170e:	fa92 f1a2 	rbit	r1, r2
 8001712:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001716:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800171a:	6011      	str	r1, [r2, #0]
  return result;
 800171c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001720:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001724:	6812      	ldr	r2, [r2, #0]
 8001726:	fab2 f282 	clz	r2, r2
 800172a:	b2d2      	uxtb	r2, r2
 800172c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001730:	b2d2      	uxtb	r2, r2
 8001732:	f002 021f 	and.w	r2, r2, #31
 8001736:	2101      	movs	r1, #1
 8001738:	fa01 f202 	lsl.w	r2, r1, r2
 800173c:	4013      	ands	r3, r2
 800173e:	2b00      	cmp	r3, #0
 8001740:	d084      	beq.n	800164c <HAL_RCC_OscConfig+0x9c8>
 8001742:	e07f      	b.n	8001844 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001744:	f7ff f80c 	bl	8000760 <HAL_GetTick>
 8001748:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800174c:	e00b      	b.n	8001766 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800174e:	f7ff f807 	bl	8000760 <HAL_GetTick>
 8001752:	4602      	mov	r2, r0
 8001754:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800175e:	4293      	cmp	r3, r2
 8001760:	d901      	bls.n	8001766 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8001762:	2303      	movs	r3, #3
 8001764:	e2c4      	b.n	8001cf0 <HAL_RCC_OscConfig+0x106c>
 8001766:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800176a:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800176e:	2202      	movs	r2, #2
 8001770:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001772:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001776:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	fa93 f2a3 	rbit	r2, r3
 8001780:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001784:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001788:	601a      	str	r2, [r3, #0]
 800178a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800178e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001792:	2202      	movs	r2, #2
 8001794:	601a      	str	r2, [r3, #0]
 8001796:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800179a:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	fa93 f2a3 	rbit	r2, r3
 80017a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017a8:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80017ac:	601a      	str	r2, [r3, #0]
  return result;
 80017ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017b2:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80017b6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017b8:	fab3 f383 	clz	r3, r3
 80017bc:	b2db      	uxtb	r3, r3
 80017be:	095b      	lsrs	r3, r3, #5
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	f043 0302 	orr.w	r3, r3, #2
 80017c6:	b2db      	uxtb	r3, r3
 80017c8:	2b02      	cmp	r3, #2
 80017ca:	d102      	bne.n	80017d2 <HAL_RCC_OscConfig+0xb4e>
 80017cc:	4b43      	ldr	r3, [pc, #268]	@ (80018dc <HAL_RCC_OscConfig+0xc58>)
 80017ce:	6a1b      	ldr	r3, [r3, #32]
 80017d0:	e013      	b.n	80017fa <HAL_RCC_OscConfig+0xb76>
 80017d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017d6:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80017da:	2202      	movs	r2, #2
 80017dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017e2:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	fa93 f2a3 	rbit	r2, r3
 80017ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017f0:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80017f4:	601a      	str	r2, [r3, #0]
 80017f6:	4b39      	ldr	r3, [pc, #228]	@ (80018dc <HAL_RCC_OscConfig+0xc58>)
 80017f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017fa:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80017fe:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8001802:	2102      	movs	r1, #2
 8001804:	6011      	str	r1, [r2, #0]
 8001806:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800180a:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800180e:	6812      	ldr	r2, [r2, #0]
 8001810:	fa92 f1a2 	rbit	r1, r2
 8001814:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001818:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800181c:	6011      	str	r1, [r2, #0]
  return result;
 800181e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001822:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001826:	6812      	ldr	r2, [r2, #0]
 8001828:	fab2 f282 	clz	r2, r2
 800182c:	b2d2      	uxtb	r2, r2
 800182e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001832:	b2d2      	uxtb	r2, r2
 8001834:	f002 021f 	and.w	r2, r2, #31
 8001838:	2101      	movs	r1, #1
 800183a:	fa01 f202 	lsl.w	r2, r1, r2
 800183e:	4013      	ands	r3, r2
 8001840:	2b00      	cmp	r3, #0
 8001842:	d184      	bne.n	800174e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001844:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8001848:	2b01      	cmp	r3, #1
 800184a:	d105      	bne.n	8001858 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800184c:	4b23      	ldr	r3, [pc, #140]	@ (80018dc <HAL_RCC_OscConfig+0xc58>)
 800184e:	69db      	ldr	r3, [r3, #28]
 8001850:	4a22      	ldr	r2, [pc, #136]	@ (80018dc <HAL_RCC_OscConfig+0xc58>)
 8001852:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001856:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001858:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800185c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	69db      	ldr	r3, [r3, #28]
 8001864:	2b00      	cmp	r3, #0
 8001866:	f000 8242 	beq.w	8001cee <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800186a:	4b1c      	ldr	r3, [pc, #112]	@ (80018dc <HAL_RCC_OscConfig+0xc58>)
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	f003 030c 	and.w	r3, r3, #12
 8001872:	2b08      	cmp	r3, #8
 8001874:	f000 8213 	beq.w	8001c9e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001878:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800187c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	69db      	ldr	r3, [r3, #28]
 8001884:	2b02      	cmp	r3, #2
 8001886:	f040 8162 	bne.w	8001b4e <HAL_RCC_OscConfig+0xeca>
 800188a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800188e:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8001892:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001896:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001898:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800189c:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	fa93 f2a3 	rbit	r2, r3
 80018a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018aa:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80018ae:	601a      	str	r2, [r3, #0]
  return result;
 80018b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018b4:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80018b8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018ba:	fab3 f383 	clz	r3, r3
 80018be:	b2db      	uxtb	r3, r3
 80018c0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80018c4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80018c8:	009b      	lsls	r3, r3, #2
 80018ca:	461a      	mov	r2, r3
 80018cc:	2300      	movs	r3, #0
 80018ce:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018d0:	f7fe ff46 	bl	8000760 <HAL_GetTick>
 80018d4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018d8:	e00c      	b.n	80018f4 <HAL_RCC_OscConfig+0xc70>
 80018da:	bf00      	nop
 80018dc:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018e0:	f7fe ff3e 	bl	8000760 <HAL_GetTick>
 80018e4:	4602      	mov	r2, r0
 80018e6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80018ea:	1ad3      	subs	r3, r2, r3
 80018ec:	2b02      	cmp	r3, #2
 80018ee:	d901      	bls.n	80018f4 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80018f0:	2303      	movs	r3, #3
 80018f2:	e1fd      	b.n	8001cf0 <HAL_RCC_OscConfig+0x106c>
 80018f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018f8:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80018fc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001900:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001902:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001906:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	fa93 f2a3 	rbit	r2, r3
 8001910:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001914:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001918:	601a      	str	r2, [r3, #0]
  return result;
 800191a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800191e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001922:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001924:	fab3 f383 	clz	r3, r3
 8001928:	b2db      	uxtb	r3, r3
 800192a:	095b      	lsrs	r3, r3, #5
 800192c:	b2db      	uxtb	r3, r3
 800192e:	f043 0301 	orr.w	r3, r3, #1
 8001932:	b2db      	uxtb	r3, r3
 8001934:	2b01      	cmp	r3, #1
 8001936:	d102      	bne.n	800193e <HAL_RCC_OscConfig+0xcba>
 8001938:	4bb0      	ldr	r3, [pc, #704]	@ (8001bfc <HAL_RCC_OscConfig+0xf78>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	e027      	b.n	800198e <HAL_RCC_OscConfig+0xd0a>
 800193e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001942:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001946:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800194a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800194c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001950:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	fa93 f2a3 	rbit	r2, r3
 800195a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800195e:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8001962:	601a      	str	r2, [r3, #0]
 8001964:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001968:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800196c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001970:	601a      	str	r2, [r3, #0]
 8001972:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001976:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	fa93 f2a3 	rbit	r2, r3
 8001980:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001984:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001988:	601a      	str	r2, [r3, #0]
 800198a:	4b9c      	ldr	r3, [pc, #624]	@ (8001bfc <HAL_RCC_OscConfig+0xf78>)
 800198c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800198e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001992:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8001996:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800199a:	6011      	str	r1, [r2, #0]
 800199c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80019a0:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80019a4:	6812      	ldr	r2, [r2, #0]
 80019a6:	fa92 f1a2 	rbit	r1, r2
 80019aa:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80019ae:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80019b2:	6011      	str	r1, [r2, #0]
  return result;
 80019b4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80019b8:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80019bc:	6812      	ldr	r2, [r2, #0]
 80019be:	fab2 f282 	clz	r2, r2
 80019c2:	b2d2      	uxtb	r2, r2
 80019c4:	f042 0220 	orr.w	r2, r2, #32
 80019c8:	b2d2      	uxtb	r2, r2
 80019ca:	f002 021f 	and.w	r2, r2, #31
 80019ce:	2101      	movs	r1, #1
 80019d0:	fa01 f202 	lsl.w	r2, r1, r2
 80019d4:	4013      	ands	r3, r2
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d182      	bne.n	80018e0 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019da:	4b88      	ldr	r3, [pc, #544]	@ (8001bfc <HAL_RCC_OscConfig+0xf78>)
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80019e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019e6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80019ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019f2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	6a1b      	ldr	r3, [r3, #32]
 80019fa:	430b      	orrs	r3, r1
 80019fc:	497f      	ldr	r1, [pc, #508]	@ (8001bfc <HAL_RCC_OscConfig+0xf78>)
 80019fe:	4313      	orrs	r3, r2
 8001a00:	604b      	str	r3, [r1, #4]
 8001a02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a06:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8001a0a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001a0e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a14:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	fa93 f2a3 	rbit	r2, r3
 8001a1e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a22:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001a26:	601a      	str	r2, [r3, #0]
  return result;
 8001a28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a2c:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001a30:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a32:	fab3 f383 	clz	r3, r3
 8001a36:	b2db      	uxtb	r3, r3
 8001a38:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001a3c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001a40:	009b      	lsls	r3, r3, #2
 8001a42:	461a      	mov	r2, r3
 8001a44:	2301      	movs	r3, #1
 8001a46:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a48:	f7fe fe8a 	bl	8000760 <HAL_GetTick>
 8001a4c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a50:	e009      	b.n	8001a66 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a52:	f7fe fe85 	bl	8000760 <HAL_GetTick>
 8001a56:	4602      	mov	r2, r0
 8001a58:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	2b02      	cmp	r3, #2
 8001a60:	d901      	bls.n	8001a66 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001a62:	2303      	movs	r3, #3
 8001a64:	e144      	b.n	8001cf0 <HAL_RCC_OscConfig+0x106c>
 8001a66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a6a:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001a6e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001a72:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a78:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	fa93 f2a3 	rbit	r2, r3
 8001a82:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a86:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001a8a:	601a      	str	r2, [r3, #0]
  return result;
 8001a8c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a90:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001a94:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a96:	fab3 f383 	clz	r3, r3
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	095b      	lsrs	r3, r3, #5
 8001a9e:	b2db      	uxtb	r3, r3
 8001aa0:	f043 0301 	orr.w	r3, r3, #1
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d102      	bne.n	8001ab0 <HAL_RCC_OscConfig+0xe2c>
 8001aaa:	4b54      	ldr	r3, [pc, #336]	@ (8001bfc <HAL_RCC_OscConfig+0xf78>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	e027      	b.n	8001b00 <HAL_RCC_OscConfig+0xe7c>
 8001ab0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ab4:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001ab8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001abc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001abe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ac2:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	fa93 f2a3 	rbit	r2, r3
 8001acc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ad0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001ad4:	601a      	str	r2, [r3, #0]
 8001ad6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ada:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8001ade:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001ae2:	601a      	str	r2, [r3, #0]
 8001ae4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ae8:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	fa93 f2a3 	rbit	r2, r3
 8001af2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001af6:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8001afa:	601a      	str	r2, [r3, #0]
 8001afc:	4b3f      	ldr	r3, [pc, #252]	@ (8001bfc <HAL_RCC_OscConfig+0xf78>)
 8001afe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b00:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001b04:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8001b08:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001b0c:	6011      	str	r1, [r2, #0]
 8001b0e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001b12:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8001b16:	6812      	ldr	r2, [r2, #0]
 8001b18:	fa92 f1a2 	rbit	r1, r2
 8001b1c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001b20:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001b24:	6011      	str	r1, [r2, #0]
  return result;
 8001b26:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001b2a:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001b2e:	6812      	ldr	r2, [r2, #0]
 8001b30:	fab2 f282 	clz	r2, r2
 8001b34:	b2d2      	uxtb	r2, r2
 8001b36:	f042 0220 	orr.w	r2, r2, #32
 8001b3a:	b2d2      	uxtb	r2, r2
 8001b3c:	f002 021f 	and.w	r2, r2, #31
 8001b40:	2101      	movs	r1, #1
 8001b42:	fa01 f202 	lsl.w	r2, r1, r2
 8001b46:	4013      	ands	r3, r2
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d082      	beq.n	8001a52 <HAL_RCC_OscConfig+0xdce>
 8001b4c:	e0cf      	b.n	8001cee <HAL_RCC_OscConfig+0x106a>
 8001b4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b52:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8001b56:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001b5a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b60:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	fa93 f2a3 	rbit	r2, r3
 8001b6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b6e:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001b72:	601a      	str	r2, [r3, #0]
  return result;
 8001b74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b78:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001b7c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b7e:	fab3 f383 	clz	r3, r3
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001b88:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001b8c:	009b      	lsls	r3, r3, #2
 8001b8e:	461a      	mov	r2, r3
 8001b90:	2300      	movs	r3, #0
 8001b92:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b94:	f7fe fde4 	bl	8000760 <HAL_GetTick>
 8001b98:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b9c:	e009      	b.n	8001bb2 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b9e:	f7fe fddf 	bl	8000760 <HAL_GetTick>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	2b02      	cmp	r3, #2
 8001bac:	d901      	bls.n	8001bb2 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	e09e      	b.n	8001cf0 <HAL_RCC_OscConfig+0x106c>
 8001bb2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bb6:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001bba:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001bbe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bc0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bc4:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	fa93 f2a3 	rbit	r2, r3
 8001bce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bd2:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001bd6:	601a      	str	r2, [r3, #0]
  return result;
 8001bd8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bdc:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001be0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001be2:	fab3 f383 	clz	r3, r3
 8001be6:	b2db      	uxtb	r3, r3
 8001be8:	095b      	lsrs	r3, r3, #5
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	f043 0301 	orr.w	r3, r3, #1
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	2b01      	cmp	r3, #1
 8001bf4:	d104      	bne.n	8001c00 <HAL_RCC_OscConfig+0xf7c>
 8001bf6:	4b01      	ldr	r3, [pc, #4]	@ (8001bfc <HAL_RCC_OscConfig+0xf78>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	e029      	b.n	8001c50 <HAL_RCC_OscConfig+0xfcc>
 8001bfc:	40021000 	.word	0x40021000
 8001c00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c04:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001c08:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001c0c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c12:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	fa93 f2a3 	rbit	r2, r3
 8001c1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c20:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8001c24:	601a      	str	r2, [r3, #0]
 8001c26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c2a:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8001c2e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001c32:	601a      	str	r2, [r3, #0]
 8001c34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c38:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	fa93 f2a3 	rbit	r2, r3
 8001c42:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c46:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8001c4a:	601a      	str	r2, [r3, #0]
 8001c4c:	4b2b      	ldr	r3, [pc, #172]	@ (8001cfc <HAL_RCC_OscConfig+0x1078>)
 8001c4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c50:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001c54:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8001c58:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001c5c:	6011      	str	r1, [r2, #0]
 8001c5e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001c62:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8001c66:	6812      	ldr	r2, [r2, #0]
 8001c68:	fa92 f1a2 	rbit	r1, r2
 8001c6c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001c70:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001c74:	6011      	str	r1, [r2, #0]
  return result;
 8001c76:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001c7a:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001c7e:	6812      	ldr	r2, [r2, #0]
 8001c80:	fab2 f282 	clz	r2, r2
 8001c84:	b2d2      	uxtb	r2, r2
 8001c86:	f042 0220 	orr.w	r2, r2, #32
 8001c8a:	b2d2      	uxtb	r2, r2
 8001c8c:	f002 021f 	and.w	r2, r2, #31
 8001c90:	2101      	movs	r1, #1
 8001c92:	fa01 f202 	lsl.w	r2, r1, r2
 8001c96:	4013      	ands	r3, r2
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d180      	bne.n	8001b9e <HAL_RCC_OscConfig+0xf1a>
 8001c9c:	e027      	b.n	8001cee <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ca2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	69db      	ldr	r3, [r3, #28]
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d101      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e01e      	b.n	8001cf0 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001cb2:	4b12      	ldr	r3, [pc, #72]	@ (8001cfc <HAL_RCC_OscConfig+0x1078>)
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001cba:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8001cbe:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001cc2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cc6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	6a1b      	ldr	r3, [r3, #32]
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	d10b      	bne.n	8001cea <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001cd2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8001cd6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001cda:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cde:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	d001      	beq.n	8001cee <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e000      	b.n	8001cf0 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8001cee:	2300      	movs	r3, #0
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	40021000 	.word	0x40021000

08001d00 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b09e      	sub	sp, #120	@ 0x78
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
 8001d08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d101      	bne.n	8001d18 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	e162      	b.n	8001fde <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d18:	4b90      	ldr	r3, [pc, #576]	@ (8001f5c <HAL_RCC_ClockConfig+0x25c>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 0307 	and.w	r3, r3, #7
 8001d20:	683a      	ldr	r2, [r7, #0]
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d910      	bls.n	8001d48 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d26:	4b8d      	ldr	r3, [pc, #564]	@ (8001f5c <HAL_RCC_ClockConfig+0x25c>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f023 0207 	bic.w	r2, r3, #7
 8001d2e:	498b      	ldr	r1, [pc, #556]	@ (8001f5c <HAL_RCC_ClockConfig+0x25c>)
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	4313      	orrs	r3, r2
 8001d34:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d36:	4b89      	ldr	r3, [pc, #548]	@ (8001f5c <HAL_RCC_ClockConfig+0x25c>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 0307 	and.w	r3, r3, #7
 8001d3e:	683a      	ldr	r2, [r7, #0]
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d001      	beq.n	8001d48 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001d44:	2301      	movs	r3, #1
 8001d46:	e14a      	b.n	8001fde <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 0302 	and.w	r3, r3, #2
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d008      	beq.n	8001d66 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d54:	4b82      	ldr	r3, [pc, #520]	@ (8001f60 <HAL_RCC_ClockConfig+0x260>)
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	497f      	ldr	r1, [pc, #508]	@ (8001f60 <HAL_RCC_ClockConfig+0x260>)
 8001d62:	4313      	orrs	r3, r2
 8001d64:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 0301 	and.w	r3, r3, #1
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	f000 80dc 	beq.w	8001f2c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d13c      	bne.n	8001df6 <HAL_RCC_ClockConfig+0xf6>
 8001d7c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001d80:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d82:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001d84:	fa93 f3a3 	rbit	r3, r3
 8001d88:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8001d8a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d8c:	fab3 f383 	clz	r3, r3
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	095b      	lsrs	r3, r3, #5
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	f043 0301 	orr.w	r3, r3, #1
 8001d9a:	b2db      	uxtb	r3, r3
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d102      	bne.n	8001da6 <HAL_RCC_ClockConfig+0xa6>
 8001da0:	4b6f      	ldr	r3, [pc, #444]	@ (8001f60 <HAL_RCC_ClockConfig+0x260>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	e00f      	b.n	8001dc6 <HAL_RCC_ClockConfig+0xc6>
 8001da6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001daa:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001dae:	fa93 f3a3 	rbit	r3, r3
 8001db2:	667b      	str	r3, [r7, #100]	@ 0x64
 8001db4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001db8:	663b      	str	r3, [r7, #96]	@ 0x60
 8001dba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001dbc:	fa93 f3a3 	rbit	r3, r3
 8001dc0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001dc2:	4b67      	ldr	r3, [pc, #412]	@ (8001f60 <HAL_RCC_ClockConfig+0x260>)
 8001dc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dc6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001dca:	65ba      	str	r2, [r7, #88]	@ 0x58
 8001dcc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001dce:	fa92 f2a2 	rbit	r2, r2
 8001dd2:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8001dd4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001dd6:	fab2 f282 	clz	r2, r2
 8001dda:	b2d2      	uxtb	r2, r2
 8001ddc:	f042 0220 	orr.w	r2, r2, #32
 8001de0:	b2d2      	uxtb	r2, r2
 8001de2:	f002 021f 	and.w	r2, r2, #31
 8001de6:	2101      	movs	r1, #1
 8001de8:	fa01 f202 	lsl.w	r2, r1, r2
 8001dec:	4013      	ands	r3, r2
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d17b      	bne.n	8001eea <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e0f3      	b.n	8001fde <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	2b02      	cmp	r3, #2
 8001dfc:	d13c      	bne.n	8001e78 <HAL_RCC_ClockConfig+0x178>
 8001dfe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001e02:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e04:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001e06:	fa93 f3a3 	rbit	r3, r3
 8001e0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8001e0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e0e:	fab3 f383 	clz	r3, r3
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	095b      	lsrs	r3, r3, #5
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	f043 0301 	orr.w	r3, r3, #1
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d102      	bne.n	8001e28 <HAL_RCC_ClockConfig+0x128>
 8001e22:	4b4f      	ldr	r3, [pc, #316]	@ (8001f60 <HAL_RCC_ClockConfig+0x260>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	e00f      	b.n	8001e48 <HAL_RCC_ClockConfig+0x148>
 8001e28:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001e2c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001e30:	fa93 f3a3 	rbit	r3, r3
 8001e34:	647b      	str	r3, [r7, #68]	@ 0x44
 8001e36:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001e3a:	643b      	str	r3, [r7, #64]	@ 0x40
 8001e3c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001e3e:	fa93 f3a3 	rbit	r3, r3
 8001e42:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001e44:	4b46      	ldr	r3, [pc, #280]	@ (8001f60 <HAL_RCC_ClockConfig+0x260>)
 8001e46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e48:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001e4c:	63ba      	str	r2, [r7, #56]	@ 0x38
 8001e4e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001e50:	fa92 f2a2 	rbit	r2, r2
 8001e54:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8001e56:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001e58:	fab2 f282 	clz	r2, r2
 8001e5c:	b2d2      	uxtb	r2, r2
 8001e5e:	f042 0220 	orr.w	r2, r2, #32
 8001e62:	b2d2      	uxtb	r2, r2
 8001e64:	f002 021f 	and.w	r2, r2, #31
 8001e68:	2101      	movs	r1, #1
 8001e6a:	fa01 f202 	lsl.w	r2, r1, r2
 8001e6e:	4013      	ands	r3, r2
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d13a      	bne.n	8001eea <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	e0b2      	b.n	8001fde <HAL_RCC_ClockConfig+0x2de>
 8001e78:	2302      	movs	r3, #2
 8001e7a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e7e:	fa93 f3a3 	rbit	r3, r3
 8001e82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8001e84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e86:	fab3 f383 	clz	r3, r3
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	095b      	lsrs	r3, r3, #5
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	f043 0301 	orr.w	r3, r3, #1
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d102      	bne.n	8001ea0 <HAL_RCC_ClockConfig+0x1a0>
 8001e9a:	4b31      	ldr	r3, [pc, #196]	@ (8001f60 <HAL_RCC_ClockConfig+0x260>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	e00d      	b.n	8001ebc <HAL_RCC_ClockConfig+0x1bc>
 8001ea0:	2302      	movs	r3, #2
 8001ea2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ea4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ea6:	fa93 f3a3 	rbit	r3, r3
 8001eaa:	627b      	str	r3, [r7, #36]	@ 0x24
 8001eac:	2302      	movs	r3, #2
 8001eae:	623b      	str	r3, [r7, #32]
 8001eb0:	6a3b      	ldr	r3, [r7, #32]
 8001eb2:	fa93 f3a3 	rbit	r3, r3
 8001eb6:	61fb      	str	r3, [r7, #28]
 8001eb8:	4b29      	ldr	r3, [pc, #164]	@ (8001f60 <HAL_RCC_ClockConfig+0x260>)
 8001eba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ebc:	2202      	movs	r2, #2
 8001ebe:	61ba      	str	r2, [r7, #24]
 8001ec0:	69ba      	ldr	r2, [r7, #24]
 8001ec2:	fa92 f2a2 	rbit	r2, r2
 8001ec6:	617a      	str	r2, [r7, #20]
  return result;
 8001ec8:	697a      	ldr	r2, [r7, #20]
 8001eca:	fab2 f282 	clz	r2, r2
 8001ece:	b2d2      	uxtb	r2, r2
 8001ed0:	f042 0220 	orr.w	r2, r2, #32
 8001ed4:	b2d2      	uxtb	r2, r2
 8001ed6:	f002 021f 	and.w	r2, r2, #31
 8001eda:	2101      	movs	r1, #1
 8001edc:	fa01 f202 	lsl.w	r2, r1, r2
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d101      	bne.n	8001eea <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e079      	b.n	8001fde <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001eea:	4b1d      	ldr	r3, [pc, #116]	@ (8001f60 <HAL_RCC_ClockConfig+0x260>)
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	f023 0203 	bic.w	r2, r3, #3
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	491a      	ldr	r1, [pc, #104]	@ (8001f60 <HAL_RCC_ClockConfig+0x260>)
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001efc:	f7fe fc30 	bl	8000760 <HAL_GetTick>
 8001f00:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f02:	e00a      	b.n	8001f1a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f04:	f7fe fc2c 	bl	8000760 <HAL_GetTick>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d901      	bls.n	8001f1a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001f16:	2303      	movs	r3, #3
 8001f18:	e061      	b.n	8001fde <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f1a:	4b11      	ldr	r3, [pc, #68]	@ (8001f60 <HAL_RCC_ClockConfig+0x260>)
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	f003 020c 	and.w	r2, r3, #12
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d1eb      	bne.n	8001f04 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f2c:	4b0b      	ldr	r3, [pc, #44]	@ (8001f5c <HAL_RCC_ClockConfig+0x25c>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 0307 	and.w	r3, r3, #7
 8001f34:	683a      	ldr	r2, [r7, #0]
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d214      	bcs.n	8001f64 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f3a:	4b08      	ldr	r3, [pc, #32]	@ (8001f5c <HAL_RCC_ClockConfig+0x25c>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f023 0207 	bic.w	r2, r3, #7
 8001f42:	4906      	ldr	r1, [pc, #24]	@ (8001f5c <HAL_RCC_ClockConfig+0x25c>)
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f4a:	4b04      	ldr	r3, [pc, #16]	@ (8001f5c <HAL_RCC_ClockConfig+0x25c>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 0307 	and.w	r3, r3, #7
 8001f52:	683a      	ldr	r2, [r7, #0]
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d005      	beq.n	8001f64 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e040      	b.n	8001fde <HAL_RCC_ClockConfig+0x2de>
 8001f5c:	40022000 	.word	0x40022000
 8001f60:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 0304 	and.w	r3, r3, #4
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d008      	beq.n	8001f82 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f70:	4b1d      	ldr	r3, [pc, #116]	@ (8001fe8 <HAL_RCC_ClockConfig+0x2e8>)
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	491a      	ldr	r1, [pc, #104]	@ (8001fe8 <HAL_RCC_ClockConfig+0x2e8>)
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0308 	and.w	r3, r3, #8
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d009      	beq.n	8001fa2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f8e:	4b16      	ldr	r3, [pc, #88]	@ (8001fe8 <HAL_RCC_ClockConfig+0x2e8>)
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	691b      	ldr	r3, [r3, #16]
 8001f9a:	00db      	lsls	r3, r3, #3
 8001f9c:	4912      	ldr	r1, [pc, #72]	@ (8001fe8 <HAL_RCC_ClockConfig+0x2e8>)
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001fa2:	f000 f829 	bl	8001ff8 <HAL_RCC_GetSysClockFreq>
 8001fa6:	4601      	mov	r1, r0
 8001fa8:	4b0f      	ldr	r3, [pc, #60]	@ (8001fe8 <HAL_RCC_ClockConfig+0x2e8>)
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001fb0:	22f0      	movs	r2, #240	@ 0xf0
 8001fb2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb4:	693a      	ldr	r2, [r7, #16]
 8001fb6:	fa92 f2a2 	rbit	r2, r2
 8001fba:	60fa      	str	r2, [r7, #12]
  return result;
 8001fbc:	68fa      	ldr	r2, [r7, #12]
 8001fbe:	fab2 f282 	clz	r2, r2
 8001fc2:	b2d2      	uxtb	r2, r2
 8001fc4:	40d3      	lsrs	r3, r2
 8001fc6:	4a09      	ldr	r2, [pc, #36]	@ (8001fec <HAL_RCC_ClockConfig+0x2ec>)
 8001fc8:	5cd3      	ldrb	r3, [r2, r3]
 8001fca:	fa21 f303 	lsr.w	r3, r1, r3
 8001fce:	4a08      	ldr	r2, [pc, #32]	@ (8001ff0 <HAL_RCC_ClockConfig+0x2f0>)
 8001fd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001fd2:	4b08      	ldr	r3, [pc, #32]	@ (8001ff4 <HAL_RCC_ClockConfig+0x2f4>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f7fe fac6 	bl	8000568 <HAL_InitTick>
  
  return HAL_OK;
 8001fdc:	2300      	movs	r3, #0
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3778      	adds	r7, #120	@ 0x78
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	40021000 	.word	0x40021000
 8001fec:	08004334 	.word	0x08004334
 8001ff0:	20000000 	.word	0x20000000
 8001ff4:	20000004 	.word	0x20000004

08001ff8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b087      	sub	sp, #28
 8001ffc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ffe:	2300      	movs	r3, #0
 8002000:	60fb      	str	r3, [r7, #12]
 8002002:	2300      	movs	r3, #0
 8002004:	60bb      	str	r3, [r7, #8]
 8002006:	2300      	movs	r3, #0
 8002008:	617b      	str	r3, [r7, #20]
 800200a:	2300      	movs	r3, #0
 800200c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800200e:	2300      	movs	r3, #0
 8002010:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002012:	4b1e      	ldr	r3, [pc, #120]	@ (800208c <HAL_RCC_GetSysClockFreq+0x94>)
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	f003 030c 	and.w	r3, r3, #12
 800201e:	2b04      	cmp	r3, #4
 8002020:	d002      	beq.n	8002028 <HAL_RCC_GetSysClockFreq+0x30>
 8002022:	2b08      	cmp	r3, #8
 8002024:	d003      	beq.n	800202e <HAL_RCC_GetSysClockFreq+0x36>
 8002026:	e026      	b.n	8002076 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002028:	4b19      	ldr	r3, [pc, #100]	@ (8002090 <HAL_RCC_GetSysClockFreq+0x98>)
 800202a:	613b      	str	r3, [r7, #16]
      break;
 800202c:	e026      	b.n	800207c <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	0c9b      	lsrs	r3, r3, #18
 8002032:	f003 030f 	and.w	r3, r3, #15
 8002036:	4a17      	ldr	r2, [pc, #92]	@ (8002094 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002038:	5cd3      	ldrb	r3, [r2, r3]
 800203a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 800203c:	4b13      	ldr	r3, [pc, #76]	@ (800208c <HAL_RCC_GetSysClockFreq+0x94>)
 800203e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002040:	f003 030f 	and.w	r3, r3, #15
 8002044:	4a14      	ldr	r2, [pc, #80]	@ (8002098 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002046:	5cd3      	ldrb	r3, [r2, r3]
 8002048:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002050:	2b00      	cmp	r3, #0
 8002052:	d008      	beq.n	8002066 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002054:	4a0e      	ldr	r2, [pc, #56]	@ (8002090 <HAL_RCC_GetSysClockFreq+0x98>)
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	fbb2 f2f3 	udiv	r2, r2, r3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	fb02 f303 	mul.w	r3, r2, r3
 8002062:	617b      	str	r3, [r7, #20]
 8002064:	e004      	b.n	8002070 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a0c      	ldr	r2, [pc, #48]	@ (800209c <HAL_RCC_GetSysClockFreq+0xa4>)
 800206a:	fb02 f303 	mul.w	r3, r2, r3
 800206e:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	613b      	str	r3, [r7, #16]
      break;
 8002074:	e002      	b.n	800207c <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002076:	4b06      	ldr	r3, [pc, #24]	@ (8002090 <HAL_RCC_GetSysClockFreq+0x98>)
 8002078:	613b      	str	r3, [r7, #16]
      break;
 800207a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800207c:	693b      	ldr	r3, [r7, #16]
}
 800207e:	4618      	mov	r0, r3
 8002080:	371c      	adds	r7, #28
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop
 800208c:	40021000 	.word	0x40021000
 8002090:	007a1200 	.word	0x007a1200
 8002094:	0800434c 	.word	0x0800434c
 8002098:	0800435c 	.word	0x0800435c
 800209c:	003d0900 	.word	0x003d0900

080020a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020a4:	4b03      	ldr	r3, [pc, #12]	@ (80020b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80020a6:	681b      	ldr	r3, [r3, #0]
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr
 80020b2:	bf00      	nop
 80020b4:	20000000 	.word	0x20000000

080020b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80020be:	f7ff ffef 	bl	80020a0 <HAL_RCC_GetHCLKFreq>
 80020c2:	4601      	mov	r1, r0
 80020c4:	4b0b      	ldr	r3, [pc, #44]	@ (80020f4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80020cc:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80020d0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020d2:	687a      	ldr	r2, [r7, #4]
 80020d4:	fa92 f2a2 	rbit	r2, r2
 80020d8:	603a      	str	r2, [r7, #0]
  return result;
 80020da:	683a      	ldr	r2, [r7, #0]
 80020dc:	fab2 f282 	clz	r2, r2
 80020e0:	b2d2      	uxtb	r2, r2
 80020e2:	40d3      	lsrs	r3, r2
 80020e4:	4a04      	ldr	r2, [pc, #16]	@ (80020f8 <HAL_RCC_GetPCLK1Freq+0x40>)
 80020e6:	5cd3      	ldrb	r3, [r2, r3]
 80020e8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80020ec:	4618      	mov	r0, r3
 80020ee:	3708      	adds	r7, #8
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	40021000 	.word	0x40021000
 80020f8:	08004344 	.word	0x08004344

080020fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002102:	f7ff ffcd 	bl	80020a0 <HAL_RCC_GetHCLKFreq>
 8002106:	4601      	mov	r1, r0
 8002108:	4b0b      	ldr	r3, [pc, #44]	@ (8002138 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8002110:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8002114:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002116:	687a      	ldr	r2, [r7, #4]
 8002118:	fa92 f2a2 	rbit	r2, r2
 800211c:	603a      	str	r2, [r7, #0]
  return result;
 800211e:	683a      	ldr	r2, [r7, #0]
 8002120:	fab2 f282 	clz	r2, r2
 8002124:	b2d2      	uxtb	r2, r2
 8002126:	40d3      	lsrs	r3, r2
 8002128:	4a04      	ldr	r2, [pc, #16]	@ (800213c <HAL_RCC_GetPCLK2Freq+0x40>)
 800212a:	5cd3      	ldrb	r3, [r2, r3]
 800212c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002130:	4618      	mov	r0, r3
 8002132:	3708      	adds	r7, #8
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}
 8002138:	40021000 	.word	0x40021000
 800213c:	08004344 	.word	0x08004344

08002140 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
 8002148:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	220f      	movs	r2, #15
 800214e:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002150:	4b12      	ldr	r3, [pc, #72]	@ (800219c <HAL_RCC_GetClockConfig+0x5c>)
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f003 0203 	and.w	r2, r3, #3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 800215c:	4b0f      	ldr	r3, [pc, #60]	@ (800219c <HAL_RCC_GetClockConfig+0x5c>)
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8002168:	4b0c      	ldr	r3, [pc, #48]	@ (800219c <HAL_RCC_GetClockConfig+0x5c>)
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002174:	4b09      	ldr	r3, [pc, #36]	@ (800219c <HAL_RCC_GetClockConfig+0x5c>)
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	08db      	lsrs	r3, r3, #3
 800217a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8002182:	4b07      	ldr	r3, [pc, #28]	@ (80021a0 <HAL_RCC_GetClockConfig+0x60>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 0207 	and.w	r2, r3, #7
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	601a      	str	r2, [r3, #0]
}
 800218e:	bf00      	nop
 8002190:	370c      	adds	r7, #12
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr
 800219a:	bf00      	nop
 800219c:	40021000 	.word	0x40021000
 80021a0:	40022000 	.word	0x40022000

080021a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b082      	sub	sp, #8
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d101      	bne.n	80021b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e049      	b.n	800224a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d106      	bne.n	80021d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2200      	movs	r2, #0
 80021c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f000 f841 	bl	8002252 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2202      	movs	r2, #2
 80021d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	3304      	adds	r3, #4
 80021e0:	4619      	mov	r1, r3
 80021e2:	4610      	mov	r0, r2
 80021e4:	f000 f9be 	bl	8002564 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2201      	movs	r2, #1
 80021ec:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2201      	movs	r2, #1
 80021f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2201      	movs	r2, #1
 80021fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2201      	movs	r2, #1
 8002204:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2201      	movs	r2, #1
 800220c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2201      	movs	r2, #1
 8002214:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2201      	movs	r2, #1
 800221c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2201      	movs	r2, #1
 8002224:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2201      	movs	r2, #1
 800222c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2201      	movs	r2, #1
 8002234:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2201      	movs	r2, #1
 800223c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2201      	movs	r2, #1
 8002244:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002248:	2300      	movs	r3, #0
}
 800224a:	4618      	mov	r0, r3
 800224c:	3708      	adds	r7, #8
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}

08002252 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002252:	b480      	push	{r7}
 8002254:	b083      	sub	sp, #12
 8002256:	af00      	add	r7, sp, #0
 8002258:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800225a:	bf00      	nop
 800225c:	370c      	adds	r7, #12
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr
	...

08002268 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002268:	b480      	push	{r7}
 800226a:	b085      	sub	sp, #20
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002276:	b2db      	uxtb	r3, r3
 8002278:	2b01      	cmp	r3, #1
 800227a:	d001      	beq.n	8002280 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	e03b      	b.n	80022f8 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2202      	movs	r2, #2
 8002284:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	68da      	ldr	r2, [r3, #12]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f042 0201 	orr.w	r2, r2, #1
 8002296:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a19      	ldr	r2, [pc, #100]	@ (8002304 <HAL_TIM_Base_Start_IT+0x9c>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d009      	beq.n	80022b6 <HAL_TIM_Base_Start_IT+0x4e>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80022aa:	d004      	beq.n	80022b6 <HAL_TIM_Base_Start_IT+0x4e>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a15      	ldr	r2, [pc, #84]	@ (8002308 <HAL_TIM_Base_Start_IT+0xa0>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d115      	bne.n	80022e2 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	689a      	ldr	r2, [r3, #8]
 80022bc:	4b13      	ldr	r3, [pc, #76]	@ (800230c <HAL_TIM_Base_Start_IT+0xa4>)
 80022be:	4013      	ands	r3, r2
 80022c0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	2b06      	cmp	r3, #6
 80022c6:	d015      	beq.n	80022f4 <HAL_TIM_Base_Start_IT+0x8c>
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022ce:	d011      	beq.n	80022f4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f042 0201 	orr.w	r2, r2, #1
 80022de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022e0:	e008      	b.n	80022f4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f042 0201 	orr.w	r2, r2, #1
 80022f0:	601a      	str	r2, [r3, #0]
 80022f2:	e000      	b.n	80022f6 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022f4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80022f6:	2300      	movs	r3, #0
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3714      	adds	r7, #20
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr
 8002304:	40012c00 	.word	0x40012c00
 8002308:	40014000 	.word	0x40014000
 800230c:	00010007 	.word	0x00010007

08002310 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b084      	sub	sp, #16
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	68db      	ldr	r3, [r3, #12]
 800231e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	691b      	ldr	r3, [r3, #16]
 8002326:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	f003 0302 	and.w	r3, r3, #2
 800232e:	2b00      	cmp	r3, #0
 8002330:	d020      	beq.n	8002374 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	f003 0302 	and.w	r3, r3, #2
 8002338:	2b00      	cmp	r3, #0
 800233a:	d01b      	beq.n	8002374 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f06f 0202 	mvn.w	r2, #2
 8002344:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2201      	movs	r2, #1
 800234a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	699b      	ldr	r3, [r3, #24]
 8002352:	f003 0303 	and.w	r3, r3, #3
 8002356:	2b00      	cmp	r3, #0
 8002358:	d003      	beq.n	8002362 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f000 f8e4 	bl	8002528 <HAL_TIM_IC_CaptureCallback>
 8002360:	e005      	b.n	800236e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f000 f8d6 	bl	8002514 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002368:	6878      	ldr	r0, [r7, #4]
 800236a:	f000 f8e7 	bl	800253c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2200      	movs	r2, #0
 8002372:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	f003 0304 	and.w	r3, r3, #4
 800237a:	2b00      	cmp	r3, #0
 800237c:	d020      	beq.n	80023c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	f003 0304 	and.w	r3, r3, #4
 8002384:	2b00      	cmp	r3, #0
 8002386:	d01b      	beq.n	80023c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f06f 0204 	mvn.w	r2, #4
 8002390:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2202      	movs	r2, #2
 8002396:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	699b      	ldr	r3, [r3, #24]
 800239e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d003      	beq.n	80023ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f000 f8be 	bl	8002528 <HAL_TIM_IC_CaptureCallback>
 80023ac:	e005      	b.n	80023ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f000 f8b0 	bl	8002514 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023b4:	6878      	ldr	r0, [r7, #4]
 80023b6:	f000 f8c1 	bl	800253c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2200      	movs	r2, #0
 80023be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	f003 0308 	and.w	r3, r3, #8
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d020      	beq.n	800240c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	f003 0308 	and.w	r3, r3, #8
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d01b      	beq.n	800240c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f06f 0208 	mvn.w	r2, #8
 80023dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2204      	movs	r2, #4
 80023e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	69db      	ldr	r3, [r3, #28]
 80023ea:	f003 0303 	and.w	r3, r3, #3
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d003      	beq.n	80023fa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	f000 f898 	bl	8002528 <HAL_TIM_IC_CaptureCallback>
 80023f8:	e005      	b.n	8002406 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f000 f88a 	bl	8002514 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002400:	6878      	ldr	r0, [r7, #4]
 8002402:	f000 f89b 	bl	800253c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2200      	movs	r2, #0
 800240a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	f003 0310 	and.w	r3, r3, #16
 8002412:	2b00      	cmp	r3, #0
 8002414:	d020      	beq.n	8002458 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	f003 0310 	and.w	r3, r3, #16
 800241c:	2b00      	cmp	r3, #0
 800241e:	d01b      	beq.n	8002458 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f06f 0210 	mvn.w	r2, #16
 8002428:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2208      	movs	r2, #8
 800242e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	69db      	ldr	r3, [r3, #28]
 8002436:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800243a:	2b00      	cmp	r3, #0
 800243c:	d003      	beq.n	8002446 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f000 f872 	bl	8002528 <HAL_TIM_IC_CaptureCallback>
 8002444:	e005      	b.n	8002452 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	f000 f864 	bl	8002514 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800244c:	6878      	ldr	r0, [r7, #4]
 800244e:	f000 f875 	bl	800253c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2200      	movs	r2, #0
 8002456:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	f003 0301 	and.w	r3, r3, #1
 800245e:	2b00      	cmp	r3, #0
 8002460:	d00c      	beq.n	800247c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	f003 0301 	and.w	r3, r3, #1
 8002468:	2b00      	cmp	r3, #0
 800246a:	d007      	beq.n	800247c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f06f 0201 	mvn.w	r2, #1
 8002474:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f7fd fff4 	bl	8000464 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002482:	2b00      	cmp	r3, #0
 8002484:	d00c      	beq.n	80024a0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800248c:	2b00      	cmp	r3, #0
 800248e:	d007      	beq.n	80024a0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002498:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f000 f8e6 	bl	800266c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d00c      	beq.n	80024c4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d007      	beq.n	80024c4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80024bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f000 f8de 	bl	8002680 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d00c      	beq.n	80024e8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d007      	beq.n	80024e8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80024e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f000 f834 	bl	8002550 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	f003 0320 	and.w	r3, r3, #32
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d00c      	beq.n	800250c <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	f003 0320 	and.w	r3, r3, #32
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d007      	beq.n	800250c <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f06f 0220 	mvn.w	r2, #32
 8002504:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f000 f8a6 	bl	8002658 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800250c:	bf00      	nop
 800250e:	3710      	adds	r7, #16
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}

08002514 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002514:	b480      	push	{r7}
 8002516:	b083      	sub	sp, #12
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800251c:	bf00      	nop
 800251e:	370c      	adds	r7, #12
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr

08002528 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002528:	b480      	push	{r7}
 800252a:	b083      	sub	sp, #12
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002530:	bf00      	nop
 8002532:	370c      	adds	r7, #12
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr

0800253c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800253c:	b480      	push	{r7}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002544:	bf00      	nop
 8002546:	370c      	adds	r7, #12
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr

08002550 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002550:	b480      	push	{r7}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002558:	bf00      	nop
 800255a:	370c      	adds	r7, #12
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr

08002564 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002564:	b480      	push	{r7}
 8002566:	b085      	sub	sp, #20
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
 800256c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	4a34      	ldr	r2, [pc, #208]	@ (8002648 <TIM_Base_SetConfig+0xe4>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d003      	beq.n	8002584 <TIM_Base_SetConfig+0x20>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002582:	d108      	bne.n	8002596 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800258a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	68fa      	ldr	r2, [r7, #12]
 8002592:	4313      	orrs	r3, r2
 8002594:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4a2b      	ldr	r2, [pc, #172]	@ (8002648 <TIM_Base_SetConfig+0xe4>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d00f      	beq.n	80025be <TIM_Base_SetConfig+0x5a>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025a4:	d00b      	beq.n	80025be <TIM_Base_SetConfig+0x5a>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	4a28      	ldr	r2, [pc, #160]	@ (800264c <TIM_Base_SetConfig+0xe8>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d007      	beq.n	80025be <TIM_Base_SetConfig+0x5a>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	4a27      	ldr	r2, [pc, #156]	@ (8002650 <TIM_Base_SetConfig+0xec>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d003      	beq.n	80025be <TIM_Base_SetConfig+0x5a>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	4a26      	ldr	r2, [pc, #152]	@ (8002654 <TIM_Base_SetConfig+0xf0>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d108      	bne.n	80025d0 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80025c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	68db      	ldr	r3, [r3, #12]
 80025ca:	68fa      	ldr	r2, [r7, #12]
 80025cc:	4313      	orrs	r3, r2
 80025ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	695b      	ldr	r3, [r3, #20]
 80025da:	4313      	orrs	r3, r2
 80025dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	68fa      	ldr	r2, [r7, #12]
 80025e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	689a      	ldr	r2, [r3, #8]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	4a14      	ldr	r2, [pc, #80]	@ (8002648 <TIM_Base_SetConfig+0xe4>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d00b      	beq.n	8002614 <TIM_Base_SetConfig+0xb0>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	4a13      	ldr	r2, [pc, #76]	@ (800264c <TIM_Base_SetConfig+0xe8>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d007      	beq.n	8002614 <TIM_Base_SetConfig+0xb0>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	4a12      	ldr	r2, [pc, #72]	@ (8002650 <TIM_Base_SetConfig+0xec>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d003      	beq.n	8002614 <TIM_Base_SetConfig+0xb0>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	4a11      	ldr	r2, [pc, #68]	@ (8002654 <TIM_Base_SetConfig+0xf0>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d103      	bne.n	800261c <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	691a      	ldr	r2, [r3, #16]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2201      	movs	r2, #1
 8002620:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	691b      	ldr	r3, [r3, #16]
 8002626:	f003 0301 	and.w	r3, r3, #1
 800262a:	2b01      	cmp	r3, #1
 800262c:	d105      	bne.n	800263a <TIM_Base_SetConfig+0xd6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	691b      	ldr	r3, [r3, #16]
 8002632:	f023 0201 	bic.w	r2, r3, #1
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	611a      	str	r2, [r3, #16]
  }
}
 800263a:	bf00      	nop
 800263c:	3714      	adds	r7, #20
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr
 8002646:	bf00      	nop
 8002648:	40012c00 	.word	0x40012c00
 800264c:	40014000 	.word	0x40014000
 8002650:	40014400 	.word	0x40014400
 8002654:	40014800 	.word	0x40014800

08002658 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002660:	bf00      	nop
 8002662:	370c      	adds	r7, #12
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr

0800266c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002674:	bf00      	nop
 8002676:	370c      	adds	r7, #12
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr

08002680 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002688:	bf00      	nop
 800268a:	370c      	adds	r7, #12
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr

08002694 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b082      	sub	sp, #8
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d101      	bne.n	80026a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e040      	b.n	8002728 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d106      	bne.n	80026bc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2200      	movs	r2, #0
 80026b2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f7fd ff14 	bl	80004e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2224      	movs	r2, #36	@ 0x24
 80026c0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f022 0201 	bic.w	r2, r2, #1
 80026d0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d002      	beq.n	80026e0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f000 f95e 	bl	800299c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80026e0:	6878      	ldr	r0, [r7, #4]
 80026e2:	f000 f825 	bl	8002730 <UART_SetConfig>
 80026e6:	4603      	mov	r3, r0
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d101      	bne.n	80026f0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	e01b      	b.n	8002728 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	685a      	ldr	r2, [r3, #4]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80026fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	689a      	ldr	r2, [r3, #8]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800270e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f042 0201 	orr.w	r2, r2, #1
 800271e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002720:	6878      	ldr	r0, [r7, #4]
 8002722:	f000 f9dd 	bl	8002ae0 <UART_CheckIdleState>
 8002726:	4603      	mov	r3, r0
}
 8002728:	4618      	mov	r0, r3
 800272a:	3708      	adds	r7, #8
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}

08002730 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b088      	sub	sp, #32
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002738:	2300      	movs	r3, #0
 800273a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	689a      	ldr	r2, [r3, #8]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	691b      	ldr	r3, [r3, #16]
 8002744:	431a      	orrs	r2, r3
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	695b      	ldr	r3, [r3, #20]
 800274a:	431a      	orrs	r2, r3
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	69db      	ldr	r3, [r3, #28]
 8002750:	4313      	orrs	r3, r2
 8002752:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	4b8a      	ldr	r3, [pc, #552]	@ (8002984 <UART_SetConfig+0x254>)
 800275c:	4013      	ands	r3, r2
 800275e:	687a      	ldr	r2, [r7, #4]
 8002760:	6812      	ldr	r2, [r2, #0]
 8002762:	6979      	ldr	r1, [r7, #20]
 8002764:	430b      	orrs	r3, r1
 8002766:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	68da      	ldr	r2, [r3, #12]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	430a      	orrs	r2, r1
 800277c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	699b      	ldr	r3, [r3, #24]
 8002782:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6a1b      	ldr	r3, [r3, #32]
 8002788:	697a      	ldr	r2, [r7, #20]
 800278a:	4313      	orrs	r3, r2
 800278c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	697a      	ldr	r2, [r7, #20]
 800279e:	430a      	orrs	r2, r1
 80027a0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a78      	ldr	r2, [pc, #480]	@ (8002988 <UART_SetConfig+0x258>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d120      	bne.n	80027ee <UART_SetConfig+0xbe>
 80027ac:	4b77      	ldr	r3, [pc, #476]	@ (800298c <UART_SetConfig+0x25c>)
 80027ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027b0:	f003 0303 	and.w	r3, r3, #3
 80027b4:	2b03      	cmp	r3, #3
 80027b6:	d817      	bhi.n	80027e8 <UART_SetConfig+0xb8>
 80027b8:	a201      	add	r2, pc, #4	@ (adr r2, 80027c0 <UART_SetConfig+0x90>)
 80027ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027be:	bf00      	nop
 80027c0:	080027d1 	.word	0x080027d1
 80027c4:	080027dd 	.word	0x080027dd
 80027c8:	080027e3 	.word	0x080027e3
 80027cc:	080027d7 	.word	0x080027d7
 80027d0:	2300      	movs	r3, #0
 80027d2:	77fb      	strb	r3, [r7, #31]
 80027d4:	e01d      	b.n	8002812 <UART_SetConfig+0xe2>
 80027d6:	2302      	movs	r3, #2
 80027d8:	77fb      	strb	r3, [r7, #31]
 80027da:	e01a      	b.n	8002812 <UART_SetConfig+0xe2>
 80027dc:	2304      	movs	r3, #4
 80027de:	77fb      	strb	r3, [r7, #31]
 80027e0:	e017      	b.n	8002812 <UART_SetConfig+0xe2>
 80027e2:	2308      	movs	r3, #8
 80027e4:	77fb      	strb	r3, [r7, #31]
 80027e6:	e014      	b.n	8002812 <UART_SetConfig+0xe2>
 80027e8:	2310      	movs	r3, #16
 80027ea:	77fb      	strb	r3, [r7, #31]
 80027ec:	e011      	b.n	8002812 <UART_SetConfig+0xe2>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a67      	ldr	r2, [pc, #412]	@ (8002990 <UART_SetConfig+0x260>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d102      	bne.n	80027fe <UART_SetConfig+0xce>
 80027f8:	2300      	movs	r3, #0
 80027fa:	77fb      	strb	r3, [r7, #31]
 80027fc:	e009      	b.n	8002812 <UART_SetConfig+0xe2>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a64      	ldr	r2, [pc, #400]	@ (8002994 <UART_SetConfig+0x264>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d102      	bne.n	800280e <UART_SetConfig+0xde>
 8002808:	2300      	movs	r3, #0
 800280a:	77fb      	strb	r3, [r7, #31]
 800280c:	e001      	b.n	8002812 <UART_SetConfig+0xe2>
 800280e:	2310      	movs	r3, #16
 8002810:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	69db      	ldr	r3, [r3, #28]
 8002816:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800281a:	d15a      	bne.n	80028d2 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 800281c:	7ffb      	ldrb	r3, [r7, #31]
 800281e:	2b08      	cmp	r3, #8
 8002820:	d827      	bhi.n	8002872 <UART_SetConfig+0x142>
 8002822:	a201      	add	r2, pc, #4	@ (adr r2, 8002828 <UART_SetConfig+0xf8>)
 8002824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002828:	0800284d 	.word	0x0800284d
 800282c:	08002855 	.word	0x08002855
 8002830:	0800285d 	.word	0x0800285d
 8002834:	08002873 	.word	0x08002873
 8002838:	08002863 	.word	0x08002863
 800283c:	08002873 	.word	0x08002873
 8002840:	08002873 	.word	0x08002873
 8002844:	08002873 	.word	0x08002873
 8002848:	0800286b 	.word	0x0800286b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800284c:	f7ff fc34 	bl	80020b8 <HAL_RCC_GetPCLK1Freq>
 8002850:	61b8      	str	r0, [r7, #24]
        break;
 8002852:	e013      	b.n	800287c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002854:	f7ff fc52 	bl	80020fc <HAL_RCC_GetPCLK2Freq>
 8002858:	61b8      	str	r0, [r7, #24]
        break;
 800285a:	e00f      	b.n	800287c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800285c:	4b4e      	ldr	r3, [pc, #312]	@ (8002998 <UART_SetConfig+0x268>)
 800285e:	61bb      	str	r3, [r7, #24]
        break;
 8002860:	e00c      	b.n	800287c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002862:	f7ff fbc9 	bl	8001ff8 <HAL_RCC_GetSysClockFreq>
 8002866:	61b8      	str	r0, [r7, #24]
        break;
 8002868:	e008      	b.n	800287c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800286a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800286e:	61bb      	str	r3, [r7, #24]
        break;
 8002870:	e004      	b.n	800287c <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8002872:	2300      	movs	r3, #0
 8002874:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	77bb      	strb	r3, [r7, #30]
        break;
 800287a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800287c:	69bb      	ldr	r3, [r7, #24]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d074      	beq.n	800296c <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002882:	69bb      	ldr	r3, [r7, #24]
 8002884:	005a      	lsls	r2, r3, #1
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	085b      	lsrs	r3, r3, #1
 800288c:	441a      	add	r2, r3
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	fbb2 f3f3 	udiv	r3, r2, r3
 8002896:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	2b0f      	cmp	r3, #15
 800289c:	d916      	bls.n	80028cc <UART_SetConfig+0x19c>
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028a4:	d212      	bcs.n	80028cc <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	b29b      	uxth	r3, r3
 80028aa:	f023 030f 	bic.w	r3, r3, #15
 80028ae:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	085b      	lsrs	r3, r3, #1
 80028b4:	b29b      	uxth	r3, r3
 80028b6:	f003 0307 	and.w	r3, r3, #7
 80028ba:	b29a      	uxth	r2, r3
 80028bc:	89fb      	ldrh	r3, [r7, #14]
 80028be:	4313      	orrs	r3, r2
 80028c0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	89fa      	ldrh	r2, [r7, #14]
 80028c8:	60da      	str	r2, [r3, #12]
 80028ca:	e04f      	b.n	800296c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	77bb      	strb	r3, [r7, #30]
 80028d0:	e04c      	b.n	800296c <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80028d2:	7ffb      	ldrb	r3, [r7, #31]
 80028d4:	2b08      	cmp	r3, #8
 80028d6:	d828      	bhi.n	800292a <UART_SetConfig+0x1fa>
 80028d8:	a201      	add	r2, pc, #4	@ (adr r2, 80028e0 <UART_SetConfig+0x1b0>)
 80028da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028de:	bf00      	nop
 80028e0:	08002905 	.word	0x08002905
 80028e4:	0800290d 	.word	0x0800290d
 80028e8:	08002915 	.word	0x08002915
 80028ec:	0800292b 	.word	0x0800292b
 80028f0:	0800291b 	.word	0x0800291b
 80028f4:	0800292b 	.word	0x0800292b
 80028f8:	0800292b 	.word	0x0800292b
 80028fc:	0800292b 	.word	0x0800292b
 8002900:	08002923 	.word	0x08002923
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002904:	f7ff fbd8 	bl	80020b8 <HAL_RCC_GetPCLK1Freq>
 8002908:	61b8      	str	r0, [r7, #24]
        break;
 800290a:	e013      	b.n	8002934 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800290c:	f7ff fbf6 	bl	80020fc <HAL_RCC_GetPCLK2Freq>
 8002910:	61b8      	str	r0, [r7, #24]
        break;
 8002912:	e00f      	b.n	8002934 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002914:	4b20      	ldr	r3, [pc, #128]	@ (8002998 <UART_SetConfig+0x268>)
 8002916:	61bb      	str	r3, [r7, #24]
        break;
 8002918:	e00c      	b.n	8002934 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800291a:	f7ff fb6d 	bl	8001ff8 <HAL_RCC_GetSysClockFreq>
 800291e:	61b8      	str	r0, [r7, #24]
        break;
 8002920:	e008      	b.n	8002934 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002922:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002926:	61bb      	str	r3, [r7, #24]
        break;
 8002928:	e004      	b.n	8002934 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800292a:	2300      	movs	r3, #0
 800292c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	77bb      	strb	r3, [r7, #30]
        break;
 8002932:	bf00      	nop
    }

    if (pclk != 0U)
 8002934:	69bb      	ldr	r3, [r7, #24]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d018      	beq.n	800296c <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	085a      	lsrs	r2, r3, #1
 8002940:	69bb      	ldr	r3, [r7, #24]
 8002942:	441a      	add	r2, r3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	fbb2 f3f3 	udiv	r3, r2, r3
 800294c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	2b0f      	cmp	r3, #15
 8002952:	d909      	bls.n	8002968 <UART_SetConfig+0x238>
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800295a:	d205      	bcs.n	8002968 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	b29a      	uxth	r2, r3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	60da      	str	r2, [r3, #12]
 8002966:	e001      	b.n	800296c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2200      	movs	r2, #0
 8002970:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2200      	movs	r2, #0
 8002976:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8002978:	7fbb      	ldrb	r3, [r7, #30]
}
 800297a:	4618      	mov	r0, r3
 800297c:	3720      	adds	r7, #32
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	efff69f3 	.word	0xefff69f3
 8002988:	40013800 	.word	0x40013800
 800298c:	40021000 	.word	0x40021000
 8002990:	40004400 	.word	0x40004400
 8002994:	40004800 	.word	0x40004800
 8002998:	007a1200 	.word	0x007a1200

0800299c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800299c:	b480      	push	{r7}
 800299e:	b083      	sub	sp, #12
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029a8:	f003 0308 	and.w	r3, r3, #8
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d00a      	beq.n	80029c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	430a      	orrs	r2, r1
 80029c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ca:	f003 0301 	and.w	r3, r3, #1
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d00a      	beq.n	80029e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	430a      	orrs	r2, r1
 80029e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ec:	f003 0302 	and.w	r3, r3, #2
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d00a      	beq.n	8002a0a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	430a      	orrs	r2, r1
 8002a08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a0e:	f003 0304 	and.w	r3, r3, #4
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d00a      	beq.n	8002a2c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	430a      	orrs	r2, r1
 8002a2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a30:	f003 0310 	and.w	r3, r3, #16
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d00a      	beq.n	8002a4e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	430a      	orrs	r2, r1
 8002a4c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a52:	f003 0320 	and.w	r3, r3, #32
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d00a      	beq.n	8002a70 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	430a      	orrs	r2, r1
 8002a6e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d01a      	beq.n	8002ab2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	430a      	orrs	r2, r1
 8002a90:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a96:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002a9a:	d10a      	bne.n	8002ab2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	430a      	orrs	r2, r1
 8002ab0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ab6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d00a      	beq.n	8002ad4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	430a      	orrs	r2, r1
 8002ad2:	605a      	str	r2, [r3, #4]
  }
}
 8002ad4:	bf00      	nop
 8002ad6:	370c      	adds	r7, #12
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr

08002ae0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b098      	sub	sp, #96	@ 0x60
 8002ae4:	af02      	add	r7, sp, #8
 8002ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2200      	movs	r2, #0
 8002aec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002af0:	f7fd fe36 	bl	8000760 <HAL_GetTick>
 8002af4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 0308 	and.w	r3, r3, #8
 8002b00:	2b08      	cmp	r3, #8
 8002b02:	d12e      	bne.n	8002b62 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002b04:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002b08:	9300      	str	r3, [sp, #0]
 8002b0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f000 f88c 	bl	8002c30 <UART_WaitOnFlagUntilTimeout>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d021      	beq.n	8002b62 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b26:	e853 3f00 	ldrex	r3, [r3]
 8002b2a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002b2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b2e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002b32:	653b      	str	r3, [r7, #80]	@ 0x50
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	461a      	mov	r2, r3
 8002b3a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002b3c:	647b      	str	r3, [r7, #68]	@ 0x44
 8002b3e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b40:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002b42:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002b44:	e841 2300 	strex	r3, r2, [r1]
 8002b48:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002b4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d1e6      	bne.n	8002b1e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2220      	movs	r2, #32
 8002b54:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	e062      	b.n	8002c28 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 0304 	and.w	r3, r3, #4
 8002b6c:	2b04      	cmp	r3, #4
 8002b6e:	d149      	bne.n	8002c04 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002b70:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002b74:	9300      	str	r3, [sp, #0]
 8002b76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b78:	2200      	movs	r2, #0
 8002b7a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f000 f856 	bl	8002c30 <UART_WaitOnFlagUntilTimeout>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d03c      	beq.n	8002c04 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b92:	e853 3f00 	ldrex	r3, [r3]
 8002b96:	623b      	str	r3, [r7, #32]
   return(result);
 8002b98:	6a3b      	ldr	r3, [r7, #32]
 8002b9a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002b9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002ba8:	633b      	str	r3, [r7, #48]	@ 0x30
 8002baa:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bac:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002bae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002bb0:	e841 2300 	strex	r3, r2, [r1]
 8002bb4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002bb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d1e6      	bne.n	8002b8a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	3308      	adds	r3, #8
 8002bc2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	e853 3f00 	ldrex	r3, [r3]
 8002bca:	60fb      	str	r3, [r7, #12]
   return(result);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	f023 0301 	bic.w	r3, r3, #1
 8002bd2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	3308      	adds	r3, #8
 8002bda:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002bdc:	61fa      	str	r2, [r7, #28]
 8002bde:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002be0:	69b9      	ldr	r1, [r7, #24]
 8002be2:	69fa      	ldr	r2, [r7, #28]
 8002be4:	e841 2300 	strex	r3, r2, [r1]
 8002be8:	617b      	str	r3, [r7, #20]
   return(result);
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d1e5      	bne.n	8002bbc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2220      	movs	r2, #32
 8002bf4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002c00:	2303      	movs	r3, #3
 8002c02:	e011      	b.n	8002c28 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2220      	movs	r2, #32
 8002c08:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2220      	movs	r2, #32
 8002c0e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2200      	movs	r2, #0
 8002c16:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2200      	movs	r2, #0
 8002c22:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8002c26:	2300      	movs	r3, #0
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	3758      	adds	r7, #88	@ 0x58
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}

08002c30 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b084      	sub	sp, #16
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	60f8      	str	r0, [r7, #12]
 8002c38:	60b9      	str	r1, [r7, #8]
 8002c3a:	603b      	str	r3, [r7, #0]
 8002c3c:	4613      	mov	r3, r2
 8002c3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c40:	e04f      	b.n	8002ce2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c42:	69bb      	ldr	r3, [r7, #24]
 8002c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c48:	d04b      	beq.n	8002ce2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c4a:	f7fd fd89 	bl	8000760 <HAL_GetTick>
 8002c4e:	4602      	mov	r2, r0
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	1ad3      	subs	r3, r2, r3
 8002c54:	69ba      	ldr	r2, [r7, #24]
 8002c56:	429a      	cmp	r2, r3
 8002c58:	d302      	bcc.n	8002c60 <UART_WaitOnFlagUntilTimeout+0x30>
 8002c5a:	69bb      	ldr	r3, [r7, #24]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d101      	bne.n	8002c64 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002c60:	2303      	movs	r3, #3
 8002c62:	e04e      	b.n	8002d02 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 0304 	and.w	r3, r3, #4
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d037      	beq.n	8002ce2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	2b80      	cmp	r3, #128	@ 0x80
 8002c76:	d034      	beq.n	8002ce2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	2b40      	cmp	r3, #64	@ 0x40
 8002c7c:	d031      	beq.n	8002ce2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	69db      	ldr	r3, [r3, #28]
 8002c84:	f003 0308 	and.w	r3, r3, #8
 8002c88:	2b08      	cmp	r3, #8
 8002c8a:	d110      	bne.n	8002cae <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	2208      	movs	r2, #8
 8002c92:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002c94:	68f8      	ldr	r0, [r7, #12]
 8002c96:	f000 f838 	bl	8002d0a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2208      	movs	r2, #8
 8002c9e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e029      	b.n	8002d02 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	69db      	ldr	r3, [r3, #28]
 8002cb4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002cb8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002cbc:	d111      	bne.n	8002ce2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002cc6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002cc8:	68f8      	ldr	r0, [r7, #12]
 8002cca:	f000 f81e 	bl	8002d0a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2220      	movs	r2, #32
 8002cd2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e00f      	b.n	8002d02 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	69da      	ldr	r2, [r3, #28]
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	4013      	ands	r3, r2
 8002cec:	68ba      	ldr	r2, [r7, #8]
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	bf0c      	ite	eq
 8002cf2:	2301      	moveq	r3, #1
 8002cf4:	2300      	movne	r3, #0
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	79fb      	ldrb	r3, [r7, #7]
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d0a0      	beq.n	8002c42 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002d00:	2300      	movs	r3, #0
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3710      	adds	r7, #16
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}

08002d0a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002d0a:	b480      	push	{r7}
 8002d0c:	b095      	sub	sp, #84	@ 0x54
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d1a:	e853 3f00 	ldrex	r3, [r3]
 8002d1e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002d20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d22:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002d26:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002d30:	643b      	str	r3, [r7, #64]	@ 0x40
 8002d32:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d34:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002d36:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002d38:	e841 2300 	strex	r3, r2, [r1]
 8002d3c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002d3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d1e6      	bne.n	8002d12 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	3308      	adds	r3, #8
 8002d4a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d4c:	6a3b      	ldr	r3, [r7, #32]
 8002d4e:	e853 3f00 	ldrex	r3, [r3]
 8002d52:	61fb      	str	r3, [r7, #28]
   return(result);
 8002d54:	69fb      	ldr	r3, [r7, #28]
 8002d56:	f023 0301 	bic.w	r3, r3, #1
 8002d5a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	3308      	adds	r3, #8
 8002d62:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002d64:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002d66:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d68:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002d6a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002d6c:	e841 2300 	strex	r3, r2, [r1]
 8002d70:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d1e5      	bne.n	8002d44 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d118      	bne.n	8002db2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	e853 3f00 	ldrex	r3, [r3]
 8002d8c:	60bb      	str	r3, [r7, #8]
   return(result);
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	f023 0310 	bic.w	r3, r3, #16
 8002d94:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	461a      	mov	r2, r3
 8002d9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d9e:	61bb      	str	r3, [r7, #24]
 8002da0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002da2:	6979      	ldr	r1, [r7, #20]
 8002da4:	69ba      	ldr	r2, [r7, #24]
 8002da6:	e841 2300 	strex	r3, r2, [r1]
 8002daa:	613b      	str	r3, [r7, #16]
   return(result);
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d1e6      	bne.n	8002d80 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2220      	movs	r2, #32
 8002db6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8002dc6:	bf00      	nop
 8002dc8:	3754      	adds	r7, #84	@ 0x54
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr

08002dd2 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002dd2:	b480      	push	{r7}
 8002dd4:	b085      	sub	sp, #20
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	4603      	mov	r3, r0
 8002dda:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002de0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002de4:	2b84      	cmp	r3, #132	@ 0x84
 8002de6:	d005      	beq.n	8002df4 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002de8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	4413      	add	r3, r2
 8002df0:	3303      	adds	r3, #3
 8002df2:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002df4:	68fb      	ldr	r3, [r7, #12]
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3714      	adds	r7, #20
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr

08002e02 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002e02:	b580      	push	{r7, lr}
 8002e04:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002e06:	f000 fadb 	bl	80033c0 <vTaskStartScheduler>
  
  return osOK;
 8002e0a:	2300      	movs	r3, #0
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	bd80      	pop	{r7, pc}

08002e10 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002e10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e12:	b089      	sub	sp, #36	@ 0x24
 8002e14:	af04      	add	r7, sp, #16
 8002e16:	6078      	str	r0, [r7, #4]
 8002e18:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	695b      	ldr	r3, [r3, #20]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d020      	beq.n	8002e64 <osThreadCreate+0x54>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	699b      	ldr	r3, [r3, #24]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d01c      	beq.n	8002e64 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	685c      	ldr	r4, [r3, #4]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	691e      	ldr	r6, [r3, #16]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f7ff ffc8 	bl	8002dd2 <makeFreeRtosPriority>
 8002e42:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	695b      	ldr	r3, [r3, #20]
 8002e48:	687a      	ldr	r2, [r7, #4]
 8002e4a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002e4c:	9202      	str	r2, [sp, #8]
 8002e4e:	9301      	str	r3, [sp, #4]
 8002e50:	9100      	str	r1, [sp, #0]
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	4632      	mov	r2, r6
 8002e56:	4629      	mov	r1, r5
 8002e58:	4620      	mov	r0, r4
 8002e5a:	f000 f8ed 	bl	8003038 <xTaskCreateStatic>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	60fb      	str	r3, [r7, #12]
 8002e62:	e01c      	b.n	8002e9e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	685c      	ldr	r4, [r3, #4]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002e70:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f7ff ffaa 	bl	8002dd2 <makeFreeRtosPriority>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	f107 030c 	add.w	r3, r7, #12
 8002e84:	9301      	str	r3, [sp, #4]
 8002e86:	9200      	str	r2, [sp, #0]
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	4632      	mov	r2, r6
 8002e8c:	4629      	mov	r1, r5
 8002e8e:	4620      	mov	r0, r4
 8002e90:	f000 f931 	bl	80030f6 <xTaskCreate>
 8002e94:	4603      	mov	r3, r0
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d001      	beq.n	8002e9e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	e000      	b.n	8002ea0 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	3714      	adds	r7, #20
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002ea8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b084      	sub	sp, #16
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d001      	beq.n	8002ebe <osDelay+0x16>
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	e000      	b.n	8002ec0 <osDelay+0x18>
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f000 fa47 	bl	8003354 <vTaskDelay>
  
  return osOK;
 8002ec6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	3710      	adds	r7, #16
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}

08002ed0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	f103 0208 	add.w	r2, r3, #8
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ee8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	f103 0208 	add.w	r2, r3, #8
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	f103 0208 	add.w	r2, r3, #8
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2200      	movs	r2, #0
 8002f02:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002f04:	bf00      	nop
 8002f06:	370c      	adds	r7, #12
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0e:	4770      	bx	lr

08002f10 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002f10:	b480      	push	{r7}
 8002f12:	b083      	sub	sp, #12
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002f1e:	bf00      	nop
 8002f20:	370c      	adds	r7, #12
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr

08002f2a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002f2a:	b480      	push	{r7}
 8002f2c:	b085      	sub	sp, #20
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	6078      	str	r0, [r7, #4]
 8002f32:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	68fa      	ldr	r2, [r7, #12]
 8002f3e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	689a      	ldr	r2, [r3, #8]
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	683a      	ldr	r2, [r7, #0]
 8002f4e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	683a      	ldr	r2, [r7, #0]
 8002f54:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	1c5a      	adds	r2, r3, #1
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	601a      	str	r2, [r3, #0]
}
 8002f66:	bf00      	nop
 8002f68:	3714      	adds	r7, #20
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f70:	4770      	bx	lr

08002f72 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002f72:	b480      	push	{r7}
 8002f74:	b085      	sub	sp, #20
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	6078      	str	r0, [r7, #4]
 8002f7a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f88:	d103      	bne.n	8002f92 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	691b      	ldr	r3, [r3, #16]
 8002f8e:	60fb      	str	r3, [r7, #12]
 8002f90:	e00c      	b.n	8002fac <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	3308      	adds	r3, #8
 8002f96:	60fb      	str	r3, [r7, #12]
 8002f98:	e002      	b.n	8002fa0 <vListInsert+0x2e>
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	60fb      	str	r3, [r7, #12]
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	68ba      	ldr	r2, [r7, #8]
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d2f6      	bcs.n	8002f9a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	685a      	ldr	r2, [r3, #4]
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	683a      	ldr	r2, [r7, #0]
 8002fba:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	68fa      	ldr	r2, [r7, #12]
 8002fc0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	683a      	ldr	r2, [r7, #0]
 8002fc6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	687a      	ldr	r2, [r7, #4]
 8002fcc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	1c5a      	adds	r2, r3, #1
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	601a      	str	r2, [r3, #0]
}
 8002fd8:	bf00      	nop
 8002fda:	3714      	adds	r7, #20
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe2:	4770      	bx	lr

08002fe4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b085      	sub	sp, #20
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	691b      	ldr	r3, [r3, #16]
 8002ff0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	687a      	ldr	r2, [r7, #4]
 8002ff8:	6892      	ldr	r2, [r2, #8]
 8002ffa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	687a      	ldr	r2, [r7, #4]
 8003002:	6852      	ldr	r2, [r2, #4]
 8003004:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	429a      	cmp	r2, r3
 800300e:	d103      	bne.n	8003018 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	689a      	ldr	r2, [r3, #8]
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2200      	movs	r2, #0
 800301c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	1e5a      	subs	r2, r3, #1
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
}
 800302c:	4618      	mov	r0, r3
 800302e:	3714      	adds	r7, #20
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr

08003038 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003038:	b580      	push	{r7, lr}
 800303a:	b08e      	sub	sp, #56	@ 0x38
 800303c:	af04      	add	r7, sp, #16
 800303e:	60f8      	str	r0, [r7, #12]
 8003040:	60b9      	str	r1, [r7, #8]
 8003042:	607a      	str	r2, [r7, #4]
 8003044:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003046:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003048:	2b00      	cmp	r3, #0
 800304a:	d10b      	bne.n	8003064 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800304c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003050:	f383 8811 	msr	BASEPRI, r3
 8003054:	f3bf 8f6f 	isb	sy
 8003058:	f3bf 8f4f 	dsb	sy
 800305c:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800305e:	bf00      	nop
 8003060:	bf00      	nop
 8003062:	e7fd      	b.n	8003060 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003064:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003066:	2b00      	cmp	r3, #0
 8003068:	d10b      	bne.n	8003082 <xTaskCreateStatic+0x4a>
	__asm volatile
 800306a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800306e:	f383 8811 	msr	BASEPRI, r3
 8003072:	f3bf 8f6f 	isb	sy
 8003076:	f3bf 8f4f 	dsb	sy
 800307a:	61fb      	str	r3, [r7, #28]
}
 800307c:	bf00      	nop
 800307e:	bf00      	nop
 8003080:	e7fd      	b.n	800307e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003082:	2354      	movs	r3, #84	@ 0x54
 8003084:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	2b54      	cmp	r3, #84	@ 0x54
 800308a:	d00b      	beq.n	80030a4 <xTaskCreateStatic+0x6c>
	__asm volatile
 800308c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003090:	f383 8811 	msr	BASEPRI, r3
 8003094:	f3bf 8f6f 	isb	sy
 8003098:	f3bf 8f4f 	dsb	sy
 800309c:	61bb      	str	r3, [r7, #24]
}
 800309e:	bf00      	nop
 80030a0:	bf00      	nop
 80030a2:	e7fd      	b.n	80030a0 <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80030a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d01e      	beq.n	80030e8 <xTaskCreateStatic+0xb0>
 80030aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d01b      	beq.n	80030e8 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80030b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030b2:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80030b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030b6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80030b8:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80030ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030bc:	2202      	movs	r2, #2
 80030be:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80030c2:	2300      	movs	r3, #0
 80030c4:	9303      	str	r3, [sp, #12]
 80030c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030c8:	9302      	str	r3, [sp, #8]
 80030ca:	f107 0314 	add.w	r3, r7, #20
 80030ce:	9301      	str	r3, [sp, #4]
 80030d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030d2:	9300      	str	r3, [sp, #0]
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	687a      	ldr	r2, [r7, #4]
 80030d8:	68b9      	ldr	r1, [r7, #8]
 80030da:	68f8      	ldr	r0, [r7, #12]
 80030dc:	f000 f850 	bl	8003180 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80030e0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80030e2:	f000 f8cd 	bl	8003280 <prvAddNewTaskToReadyList>
 80030e6:	e001      	b.n	80030ec <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 80030e8:	2300      	movs	r3, #0
 80030ea:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80030ec:	697b      	ldr	r3, [r7, #20]
	}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3728      	adds	r7, #40	@ 0x28
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}

080030f6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80030f6:	b580      	push	{r7, lr}
 80030f8:	b08c      	sub	sp, #48	@ 0x30
 80030fa:	af04      	add	r7, sp, #16
 80030fc:	60f8      	str	r0, [r7, #12]
 80030fe:	60b9      	str	r1, [r7, #8]
 8003100:	603b      	str	r3, [r7, #0]
 8003102:	4613      	mov	r3, r2
 8003104:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003106:	88fb      	ldrh	r3, [r7, #6]
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	4618      	mov	r0, r3
 800310c:	f000 fed4 	bl	8003eb8 <pvPortMalloc>
 8003110:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d00e      	beq.n	8003136 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003118:	2054      	movs	r0, #84	@ 0x54
 800311a:	f000 fecd 	bl	8003eb8 <pvPortMalloc>
 800311e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003120:	69fb      	ldr	r3, [r7, #28]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d003      	beq.n	800312e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003126:	69fb      	ldr	r3, [r7, #28]
 8003128:	697a      	ldr	r2, [r7, #20]
 800312a:	631a      	str	r2, [r3, #48]	@ 0x30
 800312c:	e005      	b.n	800313a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800312e:	6978      	ldr	r0, [r7, #20]
 8003130:	f000 ff8a 	bl	8004048 <vPortFree>
 8003134:	e001      	b.n	800313a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003136:	2300      	movs	r3, #0
 8003138:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800313a:	69fb      	ldr	r3, [r7, #28]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d017      	beq.n	8003170 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003140:	69fb      	ldr	r3, [r7, #28]
 8003142:	2200      	movs	r2, #0
 8003144:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003148:	88fa      	ldrh	r2, [r7, #6]
 800314a:	2300      	movs	r3, #0
 800314c:	9303      	str	r3, [sp, #12]
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	9302      	str	r3, [sp, #8]
 8003152:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003154:	9301      	str	r3, [sp, #4]
 8003156:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003158:	9300      	str	r3, [sp, #0]
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	68b9      	ldr	r1, [r7, #8]
 800315e:	68f8      	ldr	r0, [r7, #12]
 8003160:	f000 f80e 	bl	8003180 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003164:	69f8      	ldr	r0, [r7, #28]
 8003166:	f000 f88b 	bl	8003280 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800316a:	2301      	movs	r3, #1
 800316c:	61bb      	str	r3, [r7, #24]
 800316e:	e002      	b.n	8003176 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003170:	f04f 33ff 	mov.w	r3, #4294967295
 8003174:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003176:	69bb      	ldr	r3, [r7, #24]
	}
 8003178:	4618      	mov	r0, r3
 800317a:	3720      	adds	r7, #32
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}

08003180 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b088      	sub	sp, #32
 8003184:	af00      	add	r7, sp, #0
 8003186:	60f8      	str	r0, [r7, #12]
 8003188:	60b9      	str	r1, [r7, #8]
 800318a:	607a      	str	r2, [r7, #4]
 800318c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800318e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003190:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003198:	3b01      	subs	r3, #1
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	4413      	add	r3, r2
 800319e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80031a0:	69bb      	ldr	r3, [r7, #24]
 80031a2:	f023 0307 	bic.w	r3, r3, #7
 80031a6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80031a8:	69bb      	ldr	r3, [r7, #24]
 80031aa:	f003 0307 	and.w	r3, r3, #7
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d00b      	beq.n	80031ca <prvInitialiseNewTask+0x4a>
	__asm volatile
 80031b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031b6:	f383 8811 	msr	BASEPRI, r3
 80031ba:	f3bf 8f6f 	isb	sy
 80031be:	f3bf 8f4f 	dsb	sy
 80031c2:	617b      	str	r3, [r7, #20]
}
 80031c4:	bf00      	nop
 80031c6:	bf00      	nop
 80031c8:	e7fd      	b.n	80031c6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80031ca:	2300      	movs	r3, #0
 80031cc:	61fb      	str	r3, [r7, #28]
 80031ce:	e012      	b.n	80031f6 <prvInitialiseNewTask+0x76>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80031d0:	68ba      	ldr	r2, [r7, #8]
 80031d2:	69fb      	ldr	r3, [r7, #28]
 80031d4:	4413      	add	r3, r2
 80031d6:	7819      	ldrb	r1, [r3, #0]
 80031d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	4413      	add	r3, r2
 80031de:	3334      	adds	r3, #52	@ 0x34
 80031e0:	460a      	mov	r2, r1
 80031e2:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80031e4:	68ba      	ldr	r2, [r7, #8]
 80031e6:	69fb      	ldr	r3, [r7, #28]
 80031e8:	4413      	add	r3, r2
 80031ea:	781b      	ldrb	r3, [r3, #0]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d006      	beq.n	80031fe <prvInitialiseNewTask+0x7e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80031f0:	69fb      	ldr	r3, [r7, #28]
 80031f2:	3301      	adds	r3, #1
 80031f4:	61fb      	str	r3, [r7, #28]
 80031f6:	69fb      	ldr	r3, [r7, #28]
 80031f8:	2b0f      	cmp	r3, #15
 80031fa:	d9e9      	bls.n	80031d0 <prvInitialiseNewTask+0x50>
 80031fc:	e000      	b.n	8003200 <prvInitialiseNewTask+0x80>
		{
			break;
 80031fe:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003200:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003202:	2200      	movs	r2, #0
 8003204:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003208:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800320a:	2b06      	cmp	r3, #6
 800320c:	d901      	bls.n	8003212 <prvInitialiseNewTask+0x92>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800320e:	2306      	movs	r3, #6
 8003210:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003212:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003214:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003216:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003218:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800321a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800321c:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800321e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003220:	2200      	movs	r2, #0
 8003222:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003224:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003226:	3304      	adds	r3, #4
 8003228:	4618      	mov	r0, r3
 800322a:	f7ff fe71 	bl	8002f10 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800322e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003230:	3318      	adds	r3, #24
 8003232:	4618      	mov	r0, r3
 8003234:	f7ff fe6c 	bl	8002f10 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003238:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800323a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800323c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800323e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003240:	f1c3 0207 	rsb	r2, r3, #7
 8003244:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003246:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003248:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800324a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800324c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800324e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003250:	2200      	movs	r2, #0
 8003252:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003254:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003256:	2200      	movs	r2, #0
 8003258:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800325c:	683a      	ldr	r2, [r7, #0]
 800325e:	68f9      	ldr	r1, [r7, #12]
 8003260:	69b8      	ldr	r0, [r7, #24]
 8003262:	f000 fc17 	bl	8003a94 <pxPortInitialiseStack>
 8003266:	4602      	mov	r2, r0
 8003268:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800326a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800326c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800326e:	2b00      	cmp	r3, #0
 8003270:	d002      	beq.n	8003278 <prvInitialiseNewTask+0xf8>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003272:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003274:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003276:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003278:	bf00      	nop
 800327a:	3720      	adds	r7, #32
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}

08003280 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b082      	sub	sp, #8
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003288:	f000 fd36 	bl	8003cf8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800328c:	4b2a      	ldr	r3, [pc, #168]	@ (8003338 <prvAddNewTaskToReadyList+0xb8>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	3301      	adds	r3, #1
 8003292:	4a29      	ldr	r2, [pc, #164]	@ (8003338 <prvAddNewTaskToReadyList+0xb8>)
 8003294:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003296:	4b29      	ldr	r3, [pc, #164]	@ (800333c <prvAddNewTaskToReadyList+0xbc>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d109      	bne.n	80032b2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800329e:	4a27      	ldr	r2, [pc, #156]	@ (800333c <prvAddNewTaskToReadyList+0xbc>)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80032a4:	4b24      	ldr	r3, [pc, #144]	@ (8003338 <prvAddNewTaskToReadyList+0xb8>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d110      	bne.n	80032ce <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80032ac:	f000 fac8 	bl	8003840 <prvInitialiseTaskLists>
 80032b0:	e00d      	b.n	80032ce <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80032b2:	4b23      	ldr	r3, [pc, #140]	@ (8003340 <prvAddNewTaskToReadyList+0xc0>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d109      	bne.n	80032ce <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80032ba:	4b20      	ldr	r3, [pc, #128]	@ (800333c <prvAddNewTaskToReadyList+0xbc>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032c4:	429a      	cmp	r2, r3
 80032c6:	d802      	bhi.n	80032ce <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80032c8:	4a1c      	ldr	r2, [pc, #112]	@ (800333c <prvAddNewTaskToReadyList+0xbc>)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80032ce:	4b1d      	ldr	r3, [pc, #116]	@ (8003344 <prvAddNewTaskToReadyList+0xc4>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	3301      	adds	r3, #1
 80032d4:	4a1b      	ldr	r2, [pc, #108]	@ (8003344 <prvAddNewTaskToReadyList+0xc4>)
 80032d6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032dc:	2201      	movs	r2, #1
 80032de:	409a      	lsls	r2, r3
 80032e0:	4b19      	ldr	r3, [pc, #100]	@ (8003348 <prvAddNewTaskToReadyList+0xc8>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4313      	orrs	r3, r2
 80032e6:	4a18      	ldr	r2, [pc, #96]	@ (8003348 <prvAddNewTaskToReadyList+0xc8>)
 80032e8:	6013      	str	r3, [r2, #0]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032ee:	4613      	mov	r3, r2
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	4413      	add	r3, r2
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	4a15      	ldr	r2, [pc, #84]	@ (800334c <prvAddNewTaskToReadyList+0xcc>)
 80032f8:	441a      	add	r2, r3
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	3304      	adds	r3, #4
 80032fe:	4619      	mov	r1, r3
 8003300:	4610      	mov	r0, r2
 8003302:	f7ff fe12 	bl	8002f2a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003306:	f000 fd29 	bl	8003d5c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800330a:	4b0d      	ldr	r3, [pc, #52]	@ (8003340 <prvAddNewTaskToReadyList+0xc0>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d00e      	beq.n	8003330 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003312:	4b0a      	ldr	r3, [pc, #40]	@ (800333c <prvAddNewTaskToReadyList+0xbc>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800331c:	429a      	cmp	r2, r3
 800331e:	d207      	bcs.n	8003330 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003320:	4b0b      	ldr	r3, [pc, #44]	@ (8003350 <prvAddNewTaskToReadyList+0xd0>)
 8003322:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003326:	601a      	str	r2, [r3, #0]
 8003328:	f3bf 8f4f 	dsb	sy
 800332c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003330:	bf00      	nop
 8003332:	3708      	adds	r7, #8
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}
 8003338:	20000460 	.word	0x20000460
 800333c:	20000360 	.word	0x20000360
 8003340:	2000046c 	.word	0x2000046c
 8003344:	2000047c 	.word	0x2000047c
 8003348:	20000468 	.word	0x20000468
 800334c:	20000364 	.word	0x20000364
 8003350:	e000ed04 	.word	0xe000ed04

08003354 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003354:	b580      	push	{r7, lr}
 8003356:	b084      	sub	sp, #16
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800335c:	2300      	movs	r3, #0
 800335e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d018      	beq.n	8003398 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003366:	4b14      	ldr	r3, [pc, #80]	@ (80033b8 <vTaskDelay+0x64>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d00b      	beq.n	8003386 <vTaskDelay+0x32>
	__asm volatile
 800336e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003372:	f383 8811 	msr	BASEPRI, r3
 8003376:	f3bf 8f6f 	isb	sy
 800337a:	f3bf 8f4f 	dsb	sy
 800337e:	60bb      	str	r3, [r7, #8]
}
 8003380:	bf00      	nop
 8003382:	bf00      	nop
 8003384:	e7fd      	b.n	8003382 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003386:	f000 f87d 	bl	8003484 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800338a:	2100      	movs	r1, #0
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	f000 fb1b 	bl	80039c8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003392:	f000 f885 	bl	80034a0 <xTaskResumeAll>
 8003396:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d107      	bne.n	80033ae <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800339e:	4b07      	ldr	r3, [pc, #28]	@ (80033bc <vTaskDelay+0x68>)
 80033a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80033a4:	601a      	str	r2, [r3, #0]
 80033a6:	f3bf 8f4f 	dsb	sy
 80033aa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80033ae:	bf00      	nop
 80033b0:	3710      	adds	r7, #16
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	bf00      	nop
 80033b8:	20000488 	.word	0x20000488
 80033bc:	e000ed04 	.word	0xe000ed04

080033c0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b08a      	sub	sp, #40	@ 0x28
 80033c4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80033c6:	2300      	movs	r3, #0
 80033c8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80033ca:	2300      	movs	r3, #0
 80033cc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80033ce:	463a      	mov	r2, r7
 80033d0:	1d39      	adds	r1, r7, #4
 80033d2:	f107 0308 	add.w	r3, r7, #8
 80033d6:	4618      	mov	r0, r3
 80033d8:	f7fc fefa 	bl	80001d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80033dc:	6839      	ldr	r1, [r7, #0]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	68ba      	ldr	r2, [r7, #8]
 80033e2:	9202      	str	r2, [sp, #8]
 80033e4:	9301      	str	r3, [sp, #4]
 80033e6:	2300      	movs	r3, #0
 80033e8:	9300      	str	r3, [sp, #0]
 80033ea:	2300      	movs	r3, #0
 80033ec:	460a      	mov	r2, r1
 80033ee:	491f      	ldr	r1, [pc, #124]	@ (800346c <vTaskStartScheduler+0xac>)
 80033f0:	481f      	ldr	r0, [pc, #124]	@ (8003470 <vTaskStartScheduler+0xb0>)
 80033f2:	f7ff fe21 	bl	8003038 <xTaskCreateStatic>
 80033f6:	4603      	mov	r3, r0
 80033f8:	4a1e      	ldr	r2, [pc, #120]	@ (8003474 <vTaskStartScheduler+0xb4>)
 80033fa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80033fc:	4b1d      	ldr	r3, [pc, #116]	@ (8003474 <vTaskStartScheduler+0xb4>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d002      	beq.n	800340a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003404:	2301      	movs	r3, #1
 8003406:	617b      	str	r3, [r7, #20]
 8003408:	e001      	b.n	800340e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800340a:	2300      	movs	r3, #0
 800340c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	2b01      	cmp	r3, #1
 8003412:	d116      	bne.n	8003442 <vTaskStartScheduler+0x82>
	__asm volatile
 8003414:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003418:	f383 8811 	msr	BASEPRI, r3
 800341c:	f3bf 8f6f 	isb	sy
 8003420:	f3bf 8f4f 	dsb	sy
 8003424:	613b      	str	r3, [r7, #16]
}
 8003426:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003428:	4b13      	ldr	r3, [pc, #76]	@ (8003478 <vTaskStartScheduler+0xb8>)
 800342a:	f04f 32ff 	mov.w	r2, #4294967295
 800342e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003430:	4b12      	ldr	r3, [pc, #72]	@ (800347c <vTaskStartScheduler+0xbc>)
 8003432:	2201      	movs	r2, #1
 8003434:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003436:	4b12      	ldr	r3, [pc, #72]	@ (8003480 <vTaskStartScheduler+0xc0>)
 8003438:	2200      	movs	r2, #0
 800343a:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800343c:	f000 fbb8 	bl	8003bb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003440:	e00f      	b.n	8003462 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003448:	d10b      	bne.n	8003462 <vTaskStartScheduler+0xa2>
	__asm volatile
 800344a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800344e:	f383 8811 	msr	BASEPRI, r3
 8003452:	f3bf 8f6f 	isb	sy
 8003456:	f3bf 8f4f 	dsb	sy
 800345a:	60fb      	str	r3, [r7, #12]
}
 800345c:	bf00      	nop
 800345e:	bf00      	nop
 8003460:	e7fd      	b.n	800345e <vTaskStartScheduler+0x9e>
}
 8003462:	bf00      	nop
 8003464:	3718      	adds	r7, #24
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop
 800346c:	0800432c 	.word	0x0800432c
 8003470:	08003811 	.word	0x08003811
 8003474:	20000484 	.word	0x20000484
 8003478:	20000480 	.word	0x20000480
 800347c:	2000046c 	.word	0x2000046c
 8003480:	20000464 	.word	0x20000464

08003484 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003484:	b480      	push	{r7}
 8003486:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003488:	4b04      	ldr	r3, [pc, #16]	@ (800349c <vTaskSuspendAll+0x18>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	3301      	adds	r3, #1
 800348e:	4a03      	ldr	r2, [pc, #12]	@ (800349c <vTaskSuspendAll+0x18>)
 8003490:	6013      	str	r3, [r2, #0]
}
 8003492:	bf00      	nop
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr
 800349c:	20000488 	.word	0x20000488

080034a0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b084      	sub	sp, #16
 80034a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80034a6:	2300      	movs	r3, #0
 80034a8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80034aa:	2300      	movs	r3, #0
 80034ac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80034ae:	4b42      	ldr	r3, [pc, #264]	@ (80035b8 <xTaskResumeAll+0x118>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d10b      	bne.n	80034ce <xTaskResumeAll+0x2e>
	__asm volatile
 80034b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034ba:	f383 8811 	msr	BASEPRI, r3
 80034be:	f3bf 8f6f 	isb	sy
 80034c2:	f3bf 8f4f 	dsb	sy
 80034c6:	603b      	str	r3, [r7, #0]
}
 80034c8:	bf00      	nop
 80034ca:	bf00      	nop
 80034cc:	e7fd      	b.n	80034ca <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80034ce:	f000 fc13 	bl	8003cf8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80034d2:	4b39      	ldr	r3, [pc, #228]	@ (80035b8 <xTaskResumeAll+0x118>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	3b01      	subs	r3, #1
 80034d8:	4a37      	ldr	r2, [pc, #220]	@ (80035b8 <xTaskResumeAll+0x118>)
 80034da:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80034dc:	4b36      	ldr	r3, [pc, #216]	@ (80035b8 <xTaskResumeAll+0x118>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d161      	bne.n	80035a8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80034e4:	4b35      	ldr	r3, [pc, #212]	@ (80035bc <xTaskResumeAll+0x11c>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d05d      	beq.n	80035a8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80034ec:	e02e      	b.n	800354c <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80034ee:	4b34      	ldr	r3, [pc, #208]	@ (80035c0 <xTaskResumeAll+0x120>)
 80034f0:	68db      	ldr	r3, [r3, #12]
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	3318      	adds	r3, #24
 80034fa:	4618      	mov	r0, r3
 80034fc:	f7ff fd72 	bl	8002fe4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	3304      	adds	r3, #4
 8003504:	4618      	mov	r0, r3
 8003506:	f7ff fd6d 	bl	8002fe4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800350e:	2201      	movs	r2, #1
 8003510:	409a      	lsls	r2, r3
 8003512:	4b2c      	ldr	r3, [pc, #176]	@ (80035c4 <xTaskResumeAll+0x124>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4313      	orrs	r3, r2
 8003518:	4a2a      	ldr	r2, [pc, #168]	@ (80035c4 <xTaskResumeAll+0x124>)
 800351a:	6013      	str	r3, [r2, #0]
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003520:	4613      	mov	r3, r2
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	4413      	add	r3, r2
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	4a27      	ldr	r2, [pc, #156]	@ (80035c8 <xTaskResumeAll+0x128>)
 800352a:	441a      	add	r2, r3
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	3304      	adds	r3, #4
 8003530:	4619      	mov	r1, r3
 8003532:	4610      	mov	r0, r2
 8003534:	f7ff fcf9 	bl	8002f2a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800353c:	4b23      	ldr	r3, [pc, #140]	@ (80035cc <xTaskResumeAll+0x12c>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003542:	429a      	cmp	r2, r3
 8003544:	d302      	bcc.n	800354c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003546:	4b22      	ldr	r3, [pc, #136]	@ (80035d0 <xTaskResumeAll+0x130>)
 8003548:	2201      	movs	r2, #1
 800354a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800354c:	4b1c      	ldr	r3, [pc, #112]	@ (80035c0 <xTaskResumeAll+0x120>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d1cc      	bne.n	80034ee <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d001      	beq.n	800355e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800355a:	f000 fa0f 	bl	800397c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800355e:	4b1d      	ldr	r3, [pc, #116]	@ (80035d4 <xTaskResumeAll+0x134>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d010      	beq.n	800358c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800356a:	f000 f837 	bl	80035dc <xTaskIncrementTick>
 800356e:	4603      	mov	r3, r0
 8003570:	2b00      	cmp	r3, #0
 8003572:	d002      	beq.n	800357a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003574:	4b16      	ldr	r3, [pc, #88]	@ (80035d0 <xTaskResumeAll+0x130>)
 8003576:	2201      	movs	r2, #1
 8003578:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	3b01      	subs	r3, #1
 800357e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d1f1      	bne.n	800356a <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8003586:	4b13      	ldr	r3, [pc, #76]	@ (80035d4 <xTaskResumeAll+0x134>)
 8003588:	2200      	movs	r2, #0
 800358a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800358c:	4b10      	ldr	r3, [pc, #64]	@ (80035d0 <xTaskResumeAll+0x130>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d009      	beq.n	80035a8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003594:	2301      	movs	r3, #1
 8003596:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003598:	4b0f      	ldr	r3, [pc, #60]	@ (80035d8 <xTaskResumeAll+0x138>)
 800359a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800359e:	601a      	str	r2, [r3, #0]
 80035a0:	f3bf 8f4f 	dsb	sy
 80035a4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80035a8:	f000 fbd8 	bl	8003d5c <vPortExitCritical>

	return xAlreadyYielded;
 80035ac:	68bb      	ldr	r3, [r7, #8]
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3710      	adds	r7, #16
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	bf00      	nop
 80035b8:	20000488 	.word	0x20000488
 80035bc:	20000460 	.word	0x20000460
 80035c0:	20000420 	.word	0x20000420
 80035c4:	20000468 	.word	0x20000468
 80035c8:	20000364 	.word	0x20000364
 80035cc:	20000360 	.word	0x20000360
 80035d0:	20000474 	.word	0x20000474
 80035d4:	20000470 	.word	0x20000470
 80035d8:	e000ed04 	.word	0xe000ed04

080035dc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b086      	sub	sp, #24
 80035e0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80035e2:	2300      	movs	r3, #0
 80035e4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80035e6:	4b51      	ldr	r3, [pc, #324]	@ (800372c <xTaskIncrementTick+0x150>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	f040 808e 	bne.w	800370c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80035f0:	4b4f      	ldr	r3, [pc, #316]	@ (8003730 <xTaskIncrementTick+0x154>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	3301      	adds	r3, #1
 80035f6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80035f8:	4a4d      	ldr	r2, [pc, #308]	@ (8003730 <xTaskIncrementTick+0x154>)
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d121      	bne.n	8003648 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003604:	4b4b      	ldr	r3, [pc, #300]	@ (8003734 <xTaskIncrementTick+0x158>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d00b      	beq.n	8003626 <xTaskIncrementTick+0x4a>
	__asm volatile
 800360e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003612:	f383 8811 	msr	BASEPRI, r3
 8003616:	f3bf 8f6f 	isb	sy
 800361a:	f3bf 8f4f 	dsb	sy
 800361e:	603b      	str	r3, [r7, #0]
}
 8003620:	bf00      	nop
 8003622:	bf00      	nop
 8003624:	e7fd      	b.n	8003622 <xTaskIncrementTick+0x46>
 8003626:	4b43      	ldr	r3, [pc, #268]	@ (8003734 <xTaskIncrementTick+0x158>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	60fb      	str	r3, [r7, #12]
 800362c:	4b42      	ldr	r3, [pc, #264]	@ (8003738 <xTaskIncrementTick+0x15c>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a40      	ldr	r2, [pc, #256]	@ (8003734 <xTaskIncrementTick+0x158>)
 8003632:	6013      	str	r3, [r2, #0]
 8003634:	4a40      	ldr	r2, [pc, #256]	@ (8003738 <xTaskIncrementTick+0x15c>)
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	6013      	str	r3, [r2, #0]
 800363a:	4b40      	ldr	r3, [pc, #256]	@ (800373c <xTaskIncrementTick+0x160>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	3301      	adds	r3, #1
 8003640:	4a3e      	ldr	r2, [pc, #248]	@ (800373c <xTaskIncrementTick+0x160>)
 8003642:	6013      	str	r3, [r2, #0]
 8003644:	f000 f99a 	bl	800397c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003648:	4b3d      	ldr	r3, [pc, #244]	@ (8003740 <xTaskIncrementTick+0x164>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	693a      	ldr	r2, [r7, #16]
 800364e:	429a      	cmp	r2, r3
 8003650:	d34d      	bcc.n	80036ee <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003652:	4b38      	ldr	r3, [pc, #224]	@ (8003734 <xTaskIncrementTick+0x158>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d101      	bne.n	8003660 <xTaskIncrementTick+0x84>
 800365c:	2301      	movs	r3, #1
 800365e:	e000      	b.n	8003662 <xTaskIncrementTick+0x86>
 8003660:	2300      	movs	r3, #0
 8003662:	2b00      	cmp	r3, #0
 8003664:	d004      	beq.n	8003670 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003666:	4b36      	ldr	r3, [pc, #216]	@ (8003740 <xTaskIncrementTick+0x164>)
 8003668:	f04f 32ff 	mov.w	r2, #4294967295
 800366c:	601a      	str	r2, [r3, #0]
					break;
 800366e:	e03e      	b.n	80036ee <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003670:	4b30      	ldr	r3, [pc, #192]	@ (8003734 <xTaskIncrementTick+0x158>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	68db      	ldr	r3, [r3, #12]
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003680:	693a      	ldr	r2, [r7, #16]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	429a      	cmp	r2, r3
 8003686:	d203      	bcs.n	8003690 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003688:	4a2d      	ldr	r2, [pc, #180]	@ (8003740 <xTaskIncrementTick+0x164>)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6013      	str	r3, [r2, #0]
						break;
 800368e:	e02e      	b.n	80036ee <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	3304      	adds	r3, #4
 8003694:	4618      	mov	r0, r3
 8003696:	f7ff fca5 	bl	8002fe4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d004      	beq.n	80036ac <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	3318      	adds	r3, #24
 80036a6:	4618      	mov	r0, r3
 80036a8:	f7ff fc9c 	bl	8002fe4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036b0:	2201      	movs	r2, #1
 80036b2:	409a      	lsls	r2, r3
 80036b4:	4b23      	ldr	r3, [pc, #140]	@ (8003744 <xTaskIncrementTick+0x168>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4313      	orrs	r3, r2
 80036ba:	4a22      	ldr	r2, [pc, #136]	@ (8003744 <xTaskIncrementTick+0x168>)
 80036bc:	6013      	str	r3, [r2, #0]
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036c2:	4613      	mov	r3, r2
 80036c4:	009b      	lsls	r3, r3, #2
 80036c6:	4413      	add	r3, r2
 80036c8:	009b      	lsls	r3, r3, #2
 80036ca:	4a1f      	ldr	r2, [pc, #124]	@ (8003748 <xTaskIncrementTick+0x16c>)
 80036cc:	441a      	add	r2, r3
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	3304      	adds	r3, #4
 80036d2:	4619      	mov	r1, r3
 80036d4:	4610      	mov	r0, r2
 80036d6:	f7ff fc28 	bl	8002f2a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036de:	4b1b      	ldr	r3, [pc, #108]	@ (800374c <xTaskIncrementTick+0x170>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d3b4      	bcc.n	8003652 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80036e8:	2301      	movs	r3, #1
 80036ea:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80036ec:	e7b1      	b.n	8003652 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80036ee:	4b17      	ldr	r3, [pc, #92]	@ (800374c <xTaskIncrementTick+0x170>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036f4:	4914      	ldr	r1, [pc, #80]	@ (8003748 <xTaskIncrementTick+0x16c>)
 80036f6:	4613      	mov	r3, r2
 80036f8:	009b      	lsls	r3, r3, #2
 80036fa:	4413      	add	r3, r2
 80036fc:	009b      	lsls	r3, r3, #2
 80036fe:	440b      	add	r3, r1
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	2b01      	cmp	r3, #1
 8003704:	d907      	bls.n	8003716 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8003706:	2301      	movs	r3, #1
 8003708:	617b      	str	r3, [r7, #20]
 800370a:	e004      	b.n	8003716 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800370c:	4b10      	ldr	r3, [pc, #64]	@ (8003750 <xTaskIncrementTick+0x174>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	3301      	adds	r3, #1
 8003712:	4a0f      	ldr	r2, [pc, #60]	@ (8003750 <xTaskIncrementTick+0x174>)
 8003714:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003716:	4b0f      	ldr	r3, [pc, #60]	@ (8003754 <xTaskIncrementTick+0x178>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d001      	beq.n	8003722 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800371e:	2301      	movs	r3, #1
 8003720:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003722:	697b      	ldr	r3, [r7, #20]
}
 8003724:	4618      	mov	r0, r3
 8003726:	3718      	adds	r7, #24
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}
 800372c:	20000488 	.word	0x20000488
 8003730:	20000464 	.word	0x20000464
 8003734:	20000418 	.word	0x20000418
 8003738:	2000041c 	.word	0x2000041c
 800373c:	20000478 	.word	0x20000478
 8003740:	20000480 	.word	0x20000480
 8003744:	20000468 	.word	0x20000468
 8003748:	20000364 	.word	0x20000364
 800374c:	20000360 	.word	0x20000360
 8003750:	20000470 	.word	0x20000470
 8003754:	20000474 	.word	0x20000474

08003758 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003758:	b480      	push	{r7}
 800375a:	b087      	sub	sp, #28
 800375c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800375e:	4b27      	ldr	r3, [pc, #156]	@ (80037fc <vTaskSwitchContext+0xa4>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d003      	beq.n	800376e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003766:	4b26      	ldr	r3, [pc, #152]	@ (8003800 <vTaskSwitchContext+0xa8>)
 8003768:	2201      	movs	r2, #1
 800376a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800376c:	e040      	b.n	80037f0 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800376e:	4b24      	ldr	r3, [pc, #144]	@ (8003800 <vTaskSwitchContext+0xa8>)
 8003770:	2200      	movs	r2, #0
 8003772:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003774:	4b23      	ldr	r3, [pc, #140]	@ (8003804 <vTaskSwitchContext+0xac>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	fab3 f383 	clz	r3, r3
 8003780:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003782:	7afb      	ldrb	r3, [r7, #11]
 8003784:	f1c3 031f 	rsb	r3, r3, #31
 8003788:	617b      	str	r3, [r7, #20]
 800378a:	491f      	ldr	r1, [pc, #124]	@ (8003808 <vTaskSwitchContext+0xb0>)
 800378c:	697a      	ldr	r2, [r7, #20]
 800378e:	4613      	mov	r3, r2
 8003790:	009b      	lsls	r3, r3, #2
 8003792:	4413      	add	r3, r2
 8003794:	009b      	lsls	r3, r3, #2
 8003796:	440b      	add	r3, r1
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d10b      	bne.n	80037b6 <vTaskSwitchContext+0x5e>
	__asm volatile
 800379e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037a2:	f383 8811 	msr	BASEPRI, r3
 80037a6:	f3bf 8f6f 	isb	sy
 80037aa:	f3bf 8f4f 	dsb	sy
 80037ae:	607b      	str	r3, [r7, #4]
}
 80037b0:	bf00      	nop
 80037b2:	bf00      	nop
 80037b4:	e7fd      	b.n	80037b2 <vTaskSwitchContext+0x5a>
 80037b6:	697a      	ldr	r2, [r7, #20]
 80037b8:	4613      	mov	r3, r2
 80037ba:	009b      	lsls	r3, r3, #2
 80037bc:	4413      	add	r3, r2
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	4a11      	ldr	r2, [pc, #68]	@ (8003808 <vTaskSwitchContext+0xb0>)
 80037c2:	4413      	add	r3, r2
 80037c4:	613b      	str	r3, [r7, #16]
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	685a      	ldr	r2, [r3, #4]
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	605a      	str	r2, [r3, #4]
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	685a      	ldr	r2, [r3, #4]
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	3308      	adds	r3, #8
 80037d8:	429a      	cmp	r2, r3
 80037da:	d104      	bne.n	80037e6 <vTaskSwitchContext+0x8e>
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	685a      	ldr	r2, [r3, #4]
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	605a      	str	r2, [r3, #4]
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	68db      	ldr	r3, [r3, #12]
 80037ec:	4a07      	ldr	r2, [pc, #28]	@ (800380c <vTaskSwitchContext+0xb4>)
 80037ee:	6013      	str	r3, [r2, #0]
}
 80037f0:	bf00      	nop
 80037f2:	371c      	adds	r7, #28
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr
 80037fc:	20000488 	.word	0x20000488
 8003800:	20000474 	.word	0x20000474
 8003804:	20000468 	.word	0x20000468
 8003808:	20000364 	.word	0x20000364
 800380c:	20000360 	.word	0x20000360

08003810 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b082      	sub	sp, #8
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003818:	f000 f852 	bl	80038c0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800381c:	4b06      	ldr	r3, [pc, #24]	@ (8003838 <prvIdleTask+0x28>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	2b01      	cmp	r3, #1
 8003822:	d9f9      	bls.n	8003818 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003824:	4b05      	ldr	r3, [pc, #20]	@ (800383c <prvIdleTask+0x2c>)
 8003826:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800382a:	601a      	str	r2, [r3, #0]
 800382c:	f3bf 8f4f 	dsb	sy
 8003830:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003834:	e7f0      	b.n	8003818 <prvIdleTask+0x8>
 8003836:	bf00      	nop
 8003838:	20000364 	.word	0x20000364
 800383c:	e000ed04 	.word	0xe000ed04

08003840 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b082      	sub	sp, #8
 8003844:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003846:	2300      	movs	r3, #0
 8003848:	607b      	str	r3, [r7, #4]
 800384a:	e00c      	b.n	8003866 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800384c:	687a      	ldr	r2, [r7, #4]
 800384e:	4613      	mov	r3, r2
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	4413      	add	r3, r2
 8003854:	009b      	lsls	r3, r3, #2
 8003856:	4a12      	ldr	r2, [pc, #72]	@ (80038a0 <prvInitialiseTaskLists+0x60>)
 8003858:	4413      	add	r3, r2
 800385a:	4618      	mov	r0, r3
 800385c:	f7ff fb38 	bl	8002ed0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	3301      	adds	r3, #1
 8003864:	607b      	str	r3, [r7, #4]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2b06      	cmp	r3, #6
 800386a:	d9ef      	bls.n	800384c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800386c:	480d      	ldr	r0, [pc, #52]	@ (80038a4 <prvInitialiseTaskLists+0x64>)
 800386e:	f7ff fb2f 	bl	8002ed0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003872:	480d      	ldr	r0, [pc, #52]	@ (80038a8 <prvInitialiseTaskLists+0x68>)
 8003874:	f7ff fb2c 	bl	8002ed0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003878:	480c      	ldr	r0, [pc, #48]	@ (80038ac <prvInitialiseTaskLists+0x6c>)
 800387a:	f7ff fb29 	bl	8002ed0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800387e:	480c      	ldr	r0, [pc, #48]	@ (80038b0 <prvInitialiseTaskLists+0x70>)
 8003880:	f7ff fb26 	bl	8002ed0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003884:	480b      	ldr	r0, [pc, #44]	@ (80038b4 <prvInitialiseTaskLists+0x74>)
 8003886:	f7ff fb23 	bl	8002ed0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800388a:	4b0b      	ldr	r3, [pc, #44]	@ (80038b8 <prvInitialiseTaskLists+0x78>)
 800388c:	4a05      	ldr	r2, [pc, #20]	@ (80038a4 <prvInitialiseTaskLists+0x64>)
 800388e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003890:	4b0a      	ldr	r3, [pc, #40]	@ (80038bc <prvInitialiseTaskLists+0x7c>)
 8003892:	4a05      	ldr	r2, [pc, #20]	@ (80038a8 <prvInitialiseTaskLists+0x68>)
 8003894:	601a      	str	r2, [r3, #0]
}
 8003896:	bf00      	nop
 8003898:	3708      	adds	r7, #8
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
 800389e:	bf00      	nop
 80038a0:	20000364 	.word	0x20000364
 80038a4:	200003f0 	.word	0x200003f0
 80038a8:	20000404 	.word	0x20000404
 80038ac:	20000420 	.word	0x20000420
 80038b0:	20000434 	.word	0x20000434
 80038b4:	2000044c 	.word	0x2000044c
 80038b8:	20000418 	.word	0x20000418
 80038bc:	2000041c 	.word	0x2000041c

080038c0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b082      	sub	sp, #8
 80038c4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80038c6:	e019      	b.n	80038fc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80038c8:	f000 fa16 	bl	8003cf8 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80038cc:	4b10      	ldr	r3, [pc, #64]	@ (8003910 <prvCheckTasksWaitingTermination+0x50>)
 80038ce:	68db      	ldr	r3, [r3, #12]
 80038d0:	68db      	ldr	r3, [r3, #12]
 80038d2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	3304      	adds	r3, #4
 80038d8:	4618      	mov	r0, r3
 80038da:	f7ff fb83 	bl	8002fe4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80038de:	4b0d      	ldr	r3, [pc, #52]	@ (8003914 <prvCheckTasksWaitingTermination+0x54>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	3b01      	subs	r3, #1
 80038e4:	4a0b      	ldr	r2, [pc, #44]	@ (8003914 <prvCheckTasksWaitingTermination+0x54>)
 80038e6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80038e8:	4b0b      	ldr	r3, [pc, #44]	@ (8003918 <prvCheckTasksWaitingTermination+0x58>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	3b01      	subs	r3, #1
 80038ee:	4a0a      	ldr	r2, [pc, #40]	@ (8003918 <prvCheckTasksWaitingTermination+0x58>)
 80038f0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80038f2:	f000 fa33 	bl	8003d5c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f000 f810 	bl	800391c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80038fc:	4b06      	ldr	r3, [pc, #24]	@ (8003918 <prvCheckTasksWaitingTermination+0x58>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d1e1      	bne.n	80038c8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003904:	bf00      	nop
 8003906:	bf00      	nop
 8003908:	3708      	adds	r7, #8
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}
 800390e:	bf00      	nop
 8003910:	20000434 	.word	0x20000434
 8003914:	20000460 	.word	0x20000460
 8003918:	20000448 	.word	0x20000448

0800391c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800391c:	b580      	push	{r7, lr}
 800391e:	b084      	sub	sp, #16
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800392a:	2b00      	cmp	r3, #0
 800392c:	d108      	bne.n	8003940 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003932:	4618      	mov	r0, r3
 8003934:	f000 fb88 	bl	8004048 <vPortFree>
				vPortFree( pxTCB );
 8003938:	6878      	ldr	r0, [r7, #4]
 800393a:	f000 fb85 	bl	8004048 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800393e:	e019      	b.n	8003974 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003946:	2b01      	cmp	r3, #1
 8003948:	d103      	bne.n	8003952 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f000 fb7c 	bl	8004048 <vPortFree>
	}
 8003950:	e010      	b.n	8003974 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003958:	2b02      	cmp	r3, #2
 800395a:	d00b      	beq.n	8003974 <prvDeleteTCB+0x58>
	__asm volatile
 800395c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003960:	f383 8811 	msr	BASEPRI, r3
 8003964:	f3bf 8f6f 	isb	sy
 8003968:	f3bf 8f4f 	dsb	sy
 800396c:	60fb      	str	r3, [r7, #12]
}
 800396e:	bf00      	nop
 8003970:	bf00      	nop
 8003972:	e7fd      	b.n	8003970 <prvDeleteTCB+0x54>
	}
 8003974:	bf00      	nop
 8003976:	3710      	adds	r7, #16
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}

0800397c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800397c:	b480      	push	{r7}
 800397e:	b083      	sub	sp, #12
 8003980:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003982:	4b0f      	ldr	r3, [pc, #60]	@ (80039c0 <prvResetNextTaskUnblockTime+0x44>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d101      	bne.n	8003990 <prvResetNextTaskUnblockTime+0x14>
 800398c:	2301      	movs	r3, #1
 800398e:	e000      	b.n	8003992 <prvResetNextTaskUnblockTime+0x16>
 8003990:	2300      	movs	r3, #0
 8003992:	2b00      	cmp	r3, #0
 8003994:	d004      	beq.n	80039a0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003996:	4b0b      	ldr	r3, [pc, #44]	@ (80039c4 <prvResetNextTaskUnblockTime+0x48>)
 8003998:	f04f 32ff 	mov.w	r2, #4294967295
 800399c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800399e:	e008      	b.n	80039b2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80039a0:	4b07      	ldr	r3, [pc, #28]	@ (80039c0 <prvResetNextTaskUnblockTime+0x44>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	68db      	ldr	r3, [r3, #12]
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	4a05      	ldr	r2, [pc, #20]	@ (80039c4 <prvResetNextTaskUnblockTime+0x48>)
 80039b0:	6013      	str	r3, [r2, #0]
}
 80039b2:	bf00      	nop
 80039b4:	370c      	adds	r7, #12
 80039b6:	46bd      	mov	sp, r7
 80039b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039bc:	4770      	bx	lr
 80039be:	bf00      	nop
 80039c0:	20000418 	.word	0x20000418
 80039c4:	20000480 	.word	0x20000480

080039c8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b084      	sub	sp, #16
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
 80039d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80039d2:	4b29      	ldr	r3, [pc, #164]	@ (8003a78 <prvAddCurrentTaskToDelayedList+0xb0>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80039d8:	4b28      	ldr	r3, [pc, #160]	@ (8003a7c <prvAddCurrentTaskToDelayedList+0xb4>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	3304      	adds	r3, #4
 80039de:	4618      	mov	r0, r3
 80039e0:	f7ff fb00 	bl	8002fe4 <uxListRemove>
 80039e4:	4603      	mov	r3, r0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d10b      	bne.n	8003a02 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80039ea:	4b24      	ldr	r3, [pc, #144]	@ (8003a7c <prvAddCurrentTaskToDelayedList+0xb4>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039f0:	2201      	movs	r2, #1
 80039f2:	fa02 f303 	lsl.w	r3, r2, r3
 80039f6:	43da      	mvns	r2, r3
 80039f8:	4b21      	ldr	r3, [pc, #132]	@ (8003a80 <prvAddCurrentTaskToDelayedList+0xb8>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4013      	ands	r3, r2
 80039fe:	4a20      	ldr	r2, [pc, #128]	@ (8003a80 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003a00:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a08:	d10a      	bne.n	8003a20 <prvAddCurrentTaskToDelayedList+0x58>
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d007      	beq.n	8003a20 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a10:	4b1a      	ldr	r3, [pc, #104]	@ (8003a7c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	3304      	adds	r3, #4
 8003a16:	4619      	mov	r1, r3
 8003a18:	481a      	ldr	r0, [pc, #104]	@ (8003a84 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003a1a:	f7ff fa86 	bl	8002f2a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003a1e:	e026      	b.n	8003a6e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003a20:	68fa      	ldr	r2, [r7, #12]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	4413      	add	r3, r2
 8003a26:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003a28:	4b14      	ldr	r3, [pc, #80]	@ (8003a7c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	68ba      	ldr	r2, [r7, #8]
 8003a2e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003a30:	68ba      	ldr	r2, [r7, #8]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d209      	bcs.n	8003a4c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a38:	4b13      	ldr	r3, [pc, #76]	@ (8003a88 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	4b0f      	ldr	r3, [pc, #60]	@ (8003a7c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	3304      	adds	r3, #4
 8003a42:	4619      	mov	r1, r3
 8003a44:	4610      	mov	r0, r2
 8003a46:	f7ff fa94 	bl	8002f72 <vListInsert>
}
 8003a4a:	e010      	b.n	8003a6e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a4c:	4b0f      	ldr	r3, [pc, #60]	@ (8003a8c <prvAddCurrentTaskToDelayedList+0xc4>)
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	4b0a      	ldr	r3, [pc, #40]	@ (8003a7c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	3304      	adds	r3, #4
 8003a56:	4619      	mov	r1, r3
 8003a58:	4610      	mov	r0, r2
 8003a5a:	f7ff fa8a 	bl	8002f72 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003a5e:	4b0c      	ldr	r3, [pc, #48]	@ (8003a90 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	68ba      	ldr	r2, [r7, #8]
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d202      	bcs.n	8003a6e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003a68:	4a09      	ldr	r2, [pc, #36]	@ (8003a90 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	6013      	str	r3, [r2, #0]
}
 8003a6e:	bf00      	nop
 8003a70:	3710      	adds	r7, #16
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}
 8003a76:	bf00      	nop
 8003a78:	20000464 	.word	0x20000464
 8003a7c:	20000360 	.word	0x20000360
 8003a80:	20000468 	.word	0x20000468
 8003a84:	2000044c 	.word	0x2000044c
 8003a88:	2000041c 	.word	0x2000041c
 8003a8c:	20000418 	.word	0x20000418
 8003a90:	20000480 	.word	0x20000480

08003a94 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003a94:	b480      	push	{r7}
 8003a96:	b085      	sub	sp, #20
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	60f8      	str	r0, [r7, #12]
 8003a9c:	60b9      	str	r1, [r7, #8]
 8003a9e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	3b04      	subs	r3, #4
 8003aa4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003aac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	3b04      	subs	r3, #4
 8003ab2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	f023 0201 	bic.w	r2, r3, #1
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	3b04      	subs	r3, #4
 8003ac2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003ac4:	4a0c      	ldr	r2, [pc, #48]	@ (8003af8 <pxPortInitialiseStack+0x64>)
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	3b14      	subs	r3, #20
 8003ace:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003ad0:	687a      	ldr	r2, [r7, #4]
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	3b04      	subs	r3, #4
 8003ada:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	f06f 0202 	mvn.w	r2, #2
 8003ae2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	3b20      	subs	r3, #32
 8003ae8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003aea:	68fb      	ldr	r3, [r7, #12]
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	3714      	adds	r7, #20
 8003af0:	46bd      	mov	sp, r7
 8003af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af6:	4770      	bx	lr
 8003af8:	08003afd 	.word	0x08003afd

08003afc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003afc:	b480      	push	{r7}
 8003afe:	b085      	sub	sp, #20
 8003b00:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003b02:	2300      	movs	r3, #0
 8003b04:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003b06:	4b13      	ldr	r3, [pc, #76]	@ (8003b54 <prvTaskExitError+0x58>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b0e:	d00b      	beq.n	8003b28 <prvTaskExitError+0x2c>
	__asm volatile
 8003b10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b14:	f383 8811 	msr	BASEPRI, r3
 8003b18:	f3bf 8f6f 	isb	sy
 8003b1c:	f3bf 8f4f 	dsb	sy
 8003b20:	60fb      	str	r3, [r7, #12]
}
 8003b22:	bf00      	nop
 8003b24:	bf00      	nop
 8003b26:	e7fd      	b.n	8003b24 <prvTaskExitError+0x28>
	__asm volatile
 8003b28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b2c:	f383 8811 	msr	BASEPRI, r3
 8003b30:	f3bf 8f6f 	isb	sy
 8003b34:	f3bf 8f4f 	dsb	sy
 8003b38:	60bb      	str	r3, [r7, #8]
}
 8003b3a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003b3c:	bf00      	nop
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d0fc      	beq.n	8003b3e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003b44:	bf00      	nop
 8003b46:	bf00      	nop
 8003b48:	3714      	adds	r7, #20
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b50:	4770      	bx	lr
 8003b52:	bf00      	nop
 8003b54:	2000000c 	.word	0x2000000c
	...

08003b60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003b60:	4b07      	ldr	r3, [pc, #28]	@ (8003b80 <pxCurrentTCBConst2>)
 8003b62:	6819      	ldr	r1, [r3, #0]
 8003b64:	6808      	ldr	r0, [r1, #0]
 8003b66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b6a:	f380 8809 	msr	PSP, r0
 8003b6e:	f3bf 8f6f 	isb	sy
 8003b72:	f04f 0000 	mov.w	r0, #0
 8003b76:	f380 8811 	msr	BASEPRI, r0
 8003b7a:	4770      	bx	lr
 8003b7c:	f3af 8000 	nop.w

08003b80 <pxCurrentTCBConst2>:
 8003b80:	20000360 	.word	0x20000360
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003b84:	bf00      	nop
 8003b86:	bf00      	nop

08003b88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003b88:	4808      	ldr	r0, [pc, #32]	@ (8003bac <prvPortStartFirstTask+0x24>)
 8003b8a:	6800      	ldr	r0, [r0, #0]
 8003b8c:	6800      	ldr	r0, [r0, #0]
 8003b8e:	f380 8808 	msr	MSP, r0
 8003b92:	f04f 0000 	mov.w	r0, #0
 8003b96:	f380 8814 	msr	CONTROL, r0
 8003b9a:	b662      	cpsie	i
 8003b9c:	b661      	cpsie	f
 8003b9e:	f3bf 8f4f 	dsb	sy
 8003ba2:	f3bf 8f6f 	isb	sy
 8003ba6:	df00      	svc	0
 8003ba8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003baa:	bf00      	nop
 8003bac:	e000ed08 	.word	0xe000ed08

08003bb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b086      	sub	sp, #24
 8003bb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003bb6:	4b47      	ldr	r3, [pc, #284]	@ (8003cd4 <xPortStartScheduler+0x124>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a47      	ldr	r2, [pc, #284]	@ (8003cd8 <xPortStartScheduler+0x128>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d10b      	bne.n	8003bd8 <xPortStartScheduler+0x28>
	__asm volatile
 8003bc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bc4:	f383 8811 	msr	BASEPRI, r3
 8003bc8:	f3bf 8f6f 	isb	sy
 8003bcc:	f3bf 8f4f 	dsb	sy
 8003bd0:	613b      	str	r3, [r7, #16]
}
 8003bd2:	bf00      	nop
 8003bd4:	bf00      	nop
 8003bd6:	e7fd      	b.n	8003bd4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003bd8:	4b3e      	ldr	r3, [pc, #248]	@ (8003cd4 <xPortStartScheduler+0x124>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a3f      	ldr	r2, [pc, #252]	@ (8003cdc <xPortStartScheduler+0x12c>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d10b      	bne.n	8003bfa <xPortStartScheduler+0x4a>
	__asm volatile
 8003be2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003be6:	f383 8811 	msr	BASEPRI, r3
 8003bea:	f3bf 8f6f 	isb	sy
 8003bee:	f3bf 8f4f 	dsb	sy
 8003bf2:	60fb      	str	r3, [r7, #12]
}
 8003bf4:	bf00      	nop
 8003bf6:	bf00      	nop
 8003bf8:	e7fd      	b.n	8003bf6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003bfa:	4b39      	ldr	r3, [pc, #228]	@ (8003ce0 <xPortStartScheduler+0x130>)
 8003bfc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	781b      	ldrb	r3, [r3, #0]
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	22ff      	movs	r2, #255	@ 0xff
 8003c0a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	781b      	ldrb	r3, [r3, #0]
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003c14:	78fb      	ldrb	r3, [r7, #3]
 8003c16:	b2db      	uxtb	r3, r3
 8003c18:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003c1c:	b2da      	uxtb	r2, r3
 8003c1e:	4b31      	ldr	r3, [pc, #196]	@ (8003ce4 <xPortStartScheduler+0x134>)
 8003c20:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003c22:	4b31      	ldr	r3, [pc, #196]	@ (8003ce8 <xPortStartScheduler+0x138>)
 8003c24:	2207      	movs	r2, #7
 8003c26:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003c28:	e009      	b.n	8003c3e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8003c2a:	4b2f      	ldr	r3, [pc, #188]	@ (8003ce8 <xPortStartScheduler+0x138>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	3b01      	subs	r3, #1
 8003c30:	4a2d      	ldr	r2, [pc, #180]	@ (8003ce8 <xPortStartScheduler+0x138>)
 8003c32:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003c34:	78fb      	ldrb	r3, [r7, #3]
 8003c36:	b2db      	uxtb	r3, r3
 8003c38:	005b      	lsls	r3, r3, #1
 8003c3a:	b2db      	uxtb	r3, r3
 8003c3c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003c3e:	78fb      	ldrb	r3, [r7, #3]
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c46:	2b80      	cmp	r3, #128	@ 0x80
 8003c48:	d0ef      	beq.n	8003c2a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003c4a:	4b27      	ldr	r3, [pc, #156]	@ (8003ce8 <xPortStartScheduler+0x138>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f1c3 0307 	rsb	r3, r3, #7
 8003c52:	2b04      	cmp	r3, #4
 8003c54:	d00b      	beq.n	8003c6e <xPortStartScheduler+0xbe>
	__asm volatile
 8003c56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c5a:	f383 8811 	msr	BASEPRI, r3
 8003c5e:	f3bf 8f6f 	isb	sy
 8003c62:	f3bf 8f4f 	dsb	sy
 8003c66:	60bb      	str	r3, [r7, #8]
}
 8003c68:	bf00      	nop
 8003c6a:	bf00      	nop
 8003c6c:	e7fd      	b.n	8003c6a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003c6e:	4b1e      	ldr	r3, [pc, #120]	@ (8003ce8 <xPortStartScheduler+0x138>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	021b      	lsls	r3, r3, #8
 8003c74:	4a1c      	ldr	r2, [pc, #112]	@ (8003ce8 <xPortStartScheduler+0x138>)
 8003c76:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003c78:	4b1b      	ldr	r3, [pc, #108]	@ (8003ce8 <xPortStartScheduler+0x138>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003c80:	4a19      	ldr	r2, [pc, #100]	@ (8003ce8 <xPortStartScheduler+0x138>)
 8003c82:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	b2da      	uxtb	r2, r3
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003c8c:	4b17      	ldr	r3, [pc, #92]	@ (8003cec <xPortStartScheduler+0x13c>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a16      	ldr	r2, [pc, #88]	@ (8003cec <xPortStartScheduler+0x13c>)
 8003c92:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003c96:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003c98:	4b14      	ldr	r3, [pc, #80]	@ (8003cec <xPortStartScheduler+0x13c>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a13      	ldr	r2, [pc, #76]	@ (8003cec <xPortStartScheduler+0x13c>)
 8003c9e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8003ca2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003ca4:	f000 f8da 	bl	8003e5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003ca8:	4b11      	ldr	r3, [pc, #68]	@ (8003cf0 <xPortStartScheduler+0x140>)
 8003caa:	2200      	movs	r2, #0
 8003cac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003cae:	f000 f8f9 	bl	8003ea4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003cb2:	4b10      	ldr	r3, [pc, #64]	@ (8003cf4 <xPortStartScheduler+0x144>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a0f      	ldr	r2, [pc, #60]	@ (8003cf4 <xPortStartScheduler+0x144>)
 8003cb8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8003cbc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003cbe:	f7ff ff63 	bl	8003b88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003cc2:	f7ff fd49 	bl	8003758 <vTaskSwitchContext>
	prvTaskExitError();
 8003cc6:	f7ff ff19 	bl	8003afc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003cca:	2300      	movs	r3, #0
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	3718      	adds	r7, #24
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bd80      	pop	{r7, pc}
 8003cd4:	e000ed00 	.word	0xe000ed00
 8003cd8:	410fc271 	.word	0x410fc271
 8003cdc:	410fc270 	.word	0x410fc270
 8003ce0:	e000e400 	.word	0xe000e400
 8003ce4:	2000048c 	.word	0x2000048c
 8003ce8:	20000490 	.word	0x20000490
 8003cec:	e000ed20 	.word	0xe000ed20
 8003cf0:	2000000c 	.word	0x2000000c
 8003cf4:	e000ef34 	.word	0xe000ef34

08003cf8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b083      	sub	sp, #12
 8003cfc:	af00      	add	r7, sp, #0
	__asm volatile
 8003cfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d02:	f383 8811 	msr	BASEPRI, r3
 8003d06:	f3bf 8f6f 	isb	sy
 8003d0a:	f3bf 8f4f 	dsb	sy
 8003d0e:	607b      	str	r3, [r7, #4]
}
 8003d10:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003d12:	4b10      	ldr	r3, [pc, #64]	@ (8003d54 <vPortEnterCritical+0x5c>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	3301      	adds	r3, #1
 8003d18:	4a0e      	ldr	r2, [pc, #56]	@ (8003d54 <vPortEnterCritical+0x5c>)
 8003d1a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003d1c:	4b0d      	ldr	r3, [pc, #52]	@ (8003d54 <vPortEnterCritical+0x5c>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d110      	bne.n	8003d46 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003d24:	4b0c      	ldr	r3, [pc, #48]	@ (8003d58 <vPortEnterCritical+0x60>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d00b      	beq.n	8003d46 <vPortEnterCritical+0x4e>
	__asm volatile
 8003d2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d32:	f383 8811 	msr	BASEPRI, r3
 8003d36:	f3bf 8f6f 	isb	sy
 8003d3a:	f3bf 8f4f 	dsb	sy
 8003d3e:	603b      	str	r3, [r7, #0]
}
 8003d40:	bf00      	nop
 8003d42:	bf00      	nop
 8003d44:	e7fd      	b.n	8003d42 <vPortEnterCritical+0x4a>
	}
}
 8003d46:	bf00      	nop
 8003d48:	370c      	adds	r7, #12
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d50:	4770      	bx	lr
 8003d52:	bf00      	nop
 8003d54:	2000000c 	.word	0x2000000c
 8003d58:	e000ed04 	.word	0xe000ed04

08003d5c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b083      	sub	sp, #12
 8003d60:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003d62:	4b12      	ldr	r3, [pc, #72]	@ (8003dac <vPortExitCritical+0x50>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d10b      	bne.n	8003d82 <vPortExitCritical+0x26>
	__asm volatile
 8003d6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d6e:	f383 8811 	msr	BASEPRI, r3
 8003d72:	f3bf 8f6f 	isb	sy
 8003d76:	f3bf 8f4f 	dsb	sy
 8003d7a:	607b      	str	r3, [r7, #4]
}
 8003d7c:	bf00      	nop
 8003d7e:	bf00      	nop
 8003d80:	e7fd      	b.n	8003d7e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003d82:	4b0a      	ldr	r3, [pc, #40]	@ (8003dac <vPortExitCritical+0x50>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	3b01      	subs	r3, #1
 8003d88:	4a08      	ldr	r2, [pc, #32]	@ (8003dac <vPortExitCritical+0x50>)
 8003d8a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003d8c:	4b07      	ldr	r3, [pc, #28]	@ (8003dac <vPortExitCritical+0x50>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d105      	bne.n	8003da0 <vPortExitCritical+0x44>
 8003d94:	2300      	movs	r3, #0
 8003d96:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003d9e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003da0:	bf00      	nop
 8003da2:	370c      	adds	r7, #12
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr
 8003dac:	2000000c 	.word	0x2000000c

08003db0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003db0:	f3ef 8009 	mrs	r0, PSP
 8003db4:	f3bf 8f6f 	isb	sy
 8003db8:	4b15      	ldr	r3, [pc, #84]	@ (8003e10 <pxCurrentTCBConst>)
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	f01e 0f10 	tst.w	lr, #16
 8003dc0:	bf08      	it	eq
 8003dc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003dc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dca:	6010      	str	r0, [r2, #0]
 8003dcc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003dd0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8003dd4:	f380 8811 	msr	BASEPRI, r0
 8003dd8:	f3bf 8f4f 	dsb	sy
 8003ddc:	f3bf 8f6f 	isb	sy
 8003de0:	f7ff fcba 	bl	8003758 <vTaskSwitchContext>
 8003de4:	f04f 0000 	mov.w	r0, #0
 8003de8:	f380 8811 	msr	BASEPRI, r0
 8003dec:	bc09      	pop	{r0, r3}
 8003dee:	6819      	ldr	r1, [r3, #0]
 8003df0:	6808      	ldr	r0, [r1, #0]
 8003df2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003df6:	f01e 0f10 	tst.w	lr, #16
 8003dfa:	bf08      	it	eq
 8003dfc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003e00:	f380 8809 	msr	PSP, r0
 8003e04:	f3bf 8f6f 	isb	sy
 8003e08:	4770      	bx	lr
 8003e0a:	bf00      	nop
 8003e0c:	f3af 8000 	nop.w

08003e10 <pxCurrentTCBConst>:
 8003e10:	20000360 	.word	0x20000360
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003e14:	bf00      	nop
 8003e16:	bf00      	nop

08003e18 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b082      	sub	sp, #8
 8003e1c:	af00      	add	r7, sp, #0
	__asm volatile
 8003e1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e22:	f383 8811 	msr	BASEPRI, r3
 8003e26:	f3bf 8f6f 	isb	sy
 8003e2a:	f3bf 8f4f 	dsb	sy
 8003e2e:	607b      	str	r3, [r7, #4]
}
 8003e30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003e32:	f7ff fbd3 	bl	80035dc <xTaskIncrementTick>
 8003e36:	4603      	mov	r3, r0
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d003      	beq.n	8003e44 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003e3c:	4b06      	ldr	r3, [pc, #24]	@ (8003e58 <SysTick_Handler+0x40>)
 8003e3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e42:	601a      	str	r2, [r3, #0]
 8003e44:	2300      	movs	r3, #0
 8003e46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	f383 8811 	msr	BASEPRI, r3
}
 8003e4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003e50:	bf00      	nop
 8003e52:	3708      	adds	r7, #8
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}
 8003e58:	e000ed04 	.word	0xe000ed04

08003e5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003e60:	4b0b      	ldr	r3, [pc, #44]	@ (8003e90 <vPortSetupTimerInterrupt+0x34>)
 8003e62:	2200      	movs	r2, #0
 8003e64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003e66:	4b0b      	ldr	r3, [pc, #44]	@ (8003e94 <vPortSetupTimerInterrupt+0x38>)
 8003e68:	2200      	movs	r2, #0
 8003e6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003e6c:	4b0a      	ldr	r3, [pc, #40]	@ (8003e98 <vPortSetupTimerInterrupt+0x3c>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a0a      	ldr	r2, [pc, #40]	@ (8003e9c <vPortSetupTimerInterrupt+0x40>)
 8003e72:	fba2 2303 	umull	r2, r3, r2, r3
 8003e76:	099b      	lsrs	r3, r3, #6
 8003e78:	4a09      	ldr	r2, [pc, #36]	@ (8003ea0 <vPortSetupTimerInterrupt+0x44>)
 8003e7a:	3b01      	subs	r3, #1
 8003e7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003e7e:	4b04      	ldr	r3, [pc, #16]	@ (8003e90 <vPortSetupTimerInterrupt+0x34>)
 8003e80:	2207      	movs	r2, #7
 8003e82:	601a      	str	r2, [r3, #0]
}
 8003e84:	bf00      	nop
 8003e86:	46bd      	mov	sp, r7
 8003e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8c:	4770      	bx	lr
 8003e8e:	bf00      	nop
 8003e90:	e000e010 	.word	0xe000e010
 8003e94:	e000e018 	.word	0xe000e018
 8003e98:	20000000 	.word	0x20000000
 8003e9c:	10624dd3 	.word	0x10624dd3
 8003ea0:	e000e014 	.word	0xe000e014

08003ea4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003ea4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8003eb4 <vPortEnableVFP+0x10>
 8003ea8:	6801      	ldr	r1, [r0, #0]
 8003eaa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8003eae:	6001      	str	r1, [r0, #0]
 8003eb0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003eb2:	bf00      	nop
 8003eb4:	e000ed88 	.word	0xe000ed88

08003eb8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b08a      	sub	sp, #40	@ 0x28
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003ec4:	f7ff fade 	bl	8003484 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003ec8:	4b5a      	ldr	r3, [pc, #360]	@ (8004034 <pvPortMalloc+0x17c>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d101      	bne.n	8003ed4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003ed0:	f000 f916 	bl	8004100 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003ed4:	4b58      	ldr	r3, [pc, #352]	@ (8004038 <pvPortMalloc+0x180>)
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	4013      	ands	r3, r2
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	f040 8090 	bne.w	8004002 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d01e      	beq.n	8003f26 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8003ee8:	2208      	movs	r2, #8
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	4413      	add	r3, r2
 8003eee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	f003 0307 	and.w	r3, r3, #7
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d015      	beq.n	8003f26 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	f023 0307 	bic.w	r3, r3, #7
 8003f00:	3308      	adds	r3, #8
 8003f02:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	f003 0307 	and.w	r3, r3, #7
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d00b      	beq.n	8003f26 <pvPortMalloc+0x6e>
	__asm volatile
 8003f0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f12:	f383 8811 	msr	BASEPRI, r3
 8003f16:	f3bf 8f6f 	isb	sy
 8003f1a:	f3bf 8f4f 	dsb	sy
 8003f1e:	617b      	str	r3, [r7, #20]
}
 8003f20:	bf00      	nop
 8003f22:	bf00      	nop
 8003f24:	e7fd      	b.n	8003f22 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d06a      	beq.n	8004002 <pvPortMalloc+0x14a>
 8003f2c:	4b43      	ldr	r3, [pc, #268]	@ (800403c <pvPortMalloc+0x184>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	687a      	ldr	r2, [r7, #4]
 8003f32:	429a      	cmp	r2, r3
 8003f34:	d865      	bhi.n	8004002 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003f36:	4b42      	ldr	r3, [pc, #264]	@ (8004040 <pvPortMalloc+0x188>)
 8003f38:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003f3a:	4b41      	ldr	r3, [pc, #260]	@ (8004040 <pvPortMalloc+0x188>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003f40:	e004      	b.n	8003f4c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8003f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f44:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003f4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	687a      	ldr	r2, [r7, #4]
 8003f52:	429a      	cmp	r2, r3
 8003f54:	d903      	bls.n	8003f5e <pvPortMalloc+0xa6>
 8003f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d1f1      	bne.n	8003f42 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003f5e:	4b35      	ldr	r3, [pc, #212]	@ (8004034 <pvPortMalloc+0x17c>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f64:	429a      	cmp	r2, r3
 8003f66:	d04c      	beq.n	8004002 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003f68:	6a3b      	ldr	r3, [r7, #32]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	2208      	movs	r2, #8
 8003f6e:	4413      	add	r3, r2
 8003f70:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f74:	681a      	ldr	r2, [r3, #0]
 8003f76:	6a3b      	ldr	r3, [r7, #32]
 8003f78:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f7c:	685a      	ldr	r2, [r3, #4]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	1ad2      	subs	r2, r2, r3
 8003f82:	2308      	movs	r3, #8
 8003f84:	005b      	lsls	r3, r3, #1
 8003f86:	429a      	cmp	r2, r3
 8003f88:	d920      	bls.n	8003fcc <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003f8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	4413      	add	r3, r2
 8003f90:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003f92:	69bb      	ldr	r3, [r7, #24]
 8003f94:	f003 0307 	and.w	r3, r3, #7
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d00b      	beq.n	8003fb4 <pvPortMalloc+0xfc>
	__asm volatile
 8003f9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fa0:	f383 8811 	msr	BASEPRI, r3
 8003fa4:	f3bf 8f6f 	isb	sy
 8003fa8:	f3bf 8f4f 	dsb	sy
 8003fac:	613b      	str	r3, [r7, #16]
}
 8003fae:	bf00      	nop
 8003fb0:	bf00      	nop
 8003fb2:	e7fd      	b.n	8003fb0 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003fb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fb6:	685a      	ldr	r2, [r3, #4]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	1ad2      	subs	r2, r2, r3
 8003fbc:	69bb      	ldr	r3, [r7, #24]
 8003fbe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003fc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fc2:	687a      	ldr	r2, [r7, #4]
 8003fc4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003fc6:	69b8      	ldr	r0, [r7, #24]
 8003fc8:	f000 f8fc 	bl	80041c4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003fcc:	4b1b      	ldr	r3, [pc, #108]	@ (800403c <pvPortMalloc+0x184>)
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	1ad3      	subs	r3, r2, r3
 8003fd6:	4a19      	ldr	r2, [pc, #100]	@ (800403c <pvPortMalloc+0x184>)
 8003fd8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003fda:	4b18      	ldr	r3, [pc, #96]	@ (800403c <pvPortMalloc+0x184>)
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	4b19      	ldr	r3, [pc, #100]	@ (8004044 <pvPortMalloc+0x18c>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	d203      	bcs.n	8003fee <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003fe6:	4b15      	ldr	r3, [pc, #84]	@ (800403c <pvPortMalloc+0x184>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a16      	ldr	r2, [pc, #88]	@ (8004044 <pvPortMalloc+0x18c>)
 8003fec:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ff0:	685a      	ldr	r2, [r3, #4]
 8003ff2:	4b11      	ldr	r3, [pc, #68]	@ (8004038 <pvPortMalloc+0x180>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	431a      	orrs	r2, r3
 8003ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ffa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ffe:	2200      	movs	r2, #0
 8004000:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004002:	f7ff fa4d 	bl	80034a0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004006:	69fb      	ldr	r3, [r7, #28]
 8004008:	f003 0307 	and.w	r3, r3, #7
 800400c:	2b00      	cmp	r3, #0
 800400e:	d00b      	beq.n	8004028 <pvPortMalloc+0x170>
	__asm volatile
 8004010:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004014:	f383 8811 	msr	BASEPRI, r3
 8004018:	f3bf 8f6f 	isb	sy
 800401c:	f3bf 8f4f 	dsb	sy
 8004020:	60fb      	str	r3, [r7, #12]
}
 8004022:	bf00      	nop
 8004024:	bf00      	nop
 8004026:	e7fd      	b.n	8004024 <pvPortMalloc+0x16c>
	return pvReturn;
 8004028:	69fb      	ldr	r3, [r7, #28]
}
 800402a:	4618      	mov	r0, r3
 800402c:	3728      	adds	r7, #40	@ 0x28
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}
 8004032:	bf00      	nop
 8004034:	2000109c 	.word	0x2000109c
 8004038:	200010a8 	.word	0x200010a8
 800403c:	200010a0 	.word	0x200010a0
 8004040:	20001094 	.word	0x20001094
 8004044:	200010a4 	.word	0x200010a4

08004048 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b086      	sub	sp, #24
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d04a      	beq.n	80040f0 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800405a:	2308      	movs	r3, #8
 800405c:	425b      	negs	r3, r3
 800405e:	697a      	ldr	r2, [r7, #20]
 8004060:	4413      	add	r3, r2
 8004062:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	685a      	ldr	r2, [r3, #4]
 800406c:	4b22      	ldr	r3, [pc, #136]	@ (80040f8 <vPortFree+0xb0>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4013      	ands	r3, r2
 8004072:	2b00      	cmp	r3, #0
 8004074:	d10b      	bne.n	800408e <vPortFree+0x46>
	__asm volatile
 8004076:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800407a:	f383 8811 	msr	BASEPRI, r3
 800407e:	f3bf 8f6f 	isb	sy
 8004082:	f3bf 8f4f 	dsb	sy
 8004086:	60fb      	str	r3, [r7, #12]
}
 8004088:	bf00      	nop
 800408a:	bf00      	nop
 800408c:	e7fd      	b.n	800408a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d00b      	beq.n	80040ae <vPortFree+0x66>
	__asm volatile
 8004096:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800409a:	f383 8811 	msr	BASEPRI, r3
 800409e:	f3bf 8f6f 	isb	sy
 80040a2:	f3bf 8f4f 	dsb	sy
 80040a6:	60bb      	str	r3, [r7, #8]
}
 80040a8:	bf00      	nop
 80040aa:	bf00      	nop
 80040ac:	e7fd      	b.n	80040aa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	685a      	ldr	r2, [r3, #4]
 80040b2:	4b11      	ldr	r3, [pc, #68]	@ (80040f8 <vPortFree+0xb0>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4013      	ands	r3, r2
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d019      	beq.n	80040f0 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d115      	bne.n	80040f0 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	685a      	ldr	r2, [r3, #4]
 80040c8:	4b0b      	ldr	r3, [pc, #44]	@ (80040f8 <vPortFree+0xb0>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	43db      	mvns	r3, r3
 80040ce:	401a      	ands	r2, r3
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80040d4:	f7ff f9d6 	bl	8003484 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	685a      	ldr	r2, [r3, #4]
 80040dc:	4b07      	ldr	r3, [pc, #28]	@ (80040fc <vPortFree+0xb4>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4413      	add	r3, r2
 80040e2:	4a06      	ldr	r2, [pc, #24]	@ (80040fc <vPortFree+0xb4>)
 80040e4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80040e6:	6938      	ldr	r0, [r7, #16]
 80040e8:	f000 f86c 	bl	80041c4 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80040ec:	f7ff f9d8 	bl	80034a0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80040f0:	bf00      	nop
 80040f2:	3718      	adds	r7, #24
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}
 80040f8:	200010a8 	.word	0x200010a8
 80040fc:	200010a0 	.word	0x200010a0

08004100 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004100:	b480      	push	{r7}
 8004102:	b085      	sub	sp, #20
 8004104:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004106:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800410a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800410c:	4b27      	ldr	r3, [pc, #156]	@ (80041ac <prvHeapInit+0xac>)
 800410e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	f003 0307 	and.w	r3, r3, #7
 8004116:	2b00      	cmp	r3, #0
 8004118:	d00c      	beq.n	8004134 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	3307      	adds	r3, #7
 800411e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	f023 0307 	bic.w	r3, r3, #7
 8004126:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004128:	68ba      	ldr	r2, [r7, #8]
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	1ad3      	subs	r3, r2, r3
 800412e:	4a1f      	ldr	r2, [pc, #124]	@ (80041ac <prvHeapInit+0xac>)
 8004130:	4413      	add	r3, r2
 8004132:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004138:	4a1d      	ldr	r2, [pc, #116]	@ (80041b0 <prvHeapInit+0xb0>)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800413e:	4b1c      	ldr	r3, [pc, #112]	@ (80041b0 <prvHeapInit+0xb0>)
 8004140:	2200      	movs	r2, #0
 8004142:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	68ba      	ldr	r2, [r7, #8]
 8004148:	4413      	add	r3, r2
 800414a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800414c:	2208      	movs	r2, #8
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	1a9b      	subs	r3, r3, r2
 8004152:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	f023 0307 	bic.w	r3, r3, #7
 800415a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	4a15      	ldr	r2, [pc, #84]	@ (80041b4 <prvHeapInit+0xb4>)
 8004160:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004162:	4b14      	ldr	r3, [pc, #80]	@ (80041b4 <prvHeapInit+0xb4>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	2200      	movs	r2, #0
 8004168:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800416a:	4b12      	ldr	r3, [pc, #72]	@ (80041b4 <prvHeapInit+0xb4>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	2200      	movs	r2, #0
 8004170:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	68fa      	ldr	r2, [r7, #12]
 800417a:	1ad2      	subs	r2, r2, r3
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004180:	4b0c      	ldr	r3, [pc, #48]	@ (80041b4 <prvHeapInit+0xb4>)
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	4a0a      	ldr	r2, [pc, #40]	@ (80041b8 <prvHeapInit+0xb8>)
 800418e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	4a09      	ldr	r2, [pc, #36]	@ (80041bc <prvHeapInit+0xbc>)
 8004196:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004198:	4b09      	ldr	r3, [pc, #36]	@ (80041c0 <prvHeapInit+0xc0>)
 800419a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800419e:	601a      	str	r2, [r3, #0]
}
 80041a0:	bf00      	nop
 80041a2:	3714      	adds	r7, #20
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr
 80041ac:	20000494 	.word	0x20000494
 80041b0:	20001094 	.word	0x20001094
 80041b4:	2000109c 	.word	0x2000109c
 80041b8:	200010a4 	.word	0x200010a4
 80041bc:	200010a0 	.word	0x200010a0
 80041c0:	200010a8 	.word	0x200010a8

080041c4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80041c4:	b480      	push	{r7}
 80041c6:	b085      	sub	sp, #20
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80041cc:	4b28      	ldr	r3, [pc, #160]	@ (8004270 <prvInsertBlockIntoFreeList+0xac>)
 80041ce:	60fb      	str	r3, [r7, #12]
 80041d0:	e002      	b.n	80041d8 <prvInsertBlockIntoFreeList+0x14>
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	60fb      	str	r3, [r7, #12]
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	687a      	ldr	r2, [r7, #4]
 80041de:	429a      	cmp	r2, r3
 80041e0:	d8f7      	bhi.n	80041d2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	68ba      	ldr	r2, [r7, #8]
 80041ec:	4413      	add	r3, r2
 80041ee:	687a      	ldr	r2, [r7, #4]
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d108      	bne.n	8004206 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	685a      	ldr	r2, [r3, #4]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	441a      	add	r2, r3
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	68ba      	ldr	r2, [r7, #8]
 8004210:	441a      	add	r2, r3
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	429a      	cmp	r2, r3
 8004218:	d118      	bne.n	800424c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	4b15      	ldr	r3, [pc, #84]	@ (8004274 <prvInsertBlockIntoFreeList+0xb0>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	429a      	cmp	r2, r3
 8004224:	d00d      	beq.n	8004242 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	685a      	ldr	r2, [r3, #4]
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	441a      	add	r2, r3
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	601a      	str	r2, [r3, #0]
 8004240:	e008      	b.n	8004254 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004242:	4b0c      	ldr	r3, [pc, #48]	@ (8004274 <prvInsertBlockIntoFreeList+0xb0>)
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	601a      	str	r2, [r3, #0]
 800424a:	e003      	b.n	8004254 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681a      	ldr	r2, [r3, #0]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004254:	68fa      	ldr	r2, [r7, #12]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	429a      	cmp	r2, r3
 800425a:	d002      	beq.n	8004262 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	687a      	ldr	r2, [r7, #4]
 8004260:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004262:	bf00      	nop
 8004264:	3714      	adds	r7, #20
 8004266:	46bd      	mov	sp, r7
 8004268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426c:	4770      	bx	lr
 800426e:	bf00      	nop
 8004270:	20001094 	.word	0x20001094
 8004274:	2000109c 	.word	0x2000109c

08004278 <memset>:
 8004278:	4402      	add	r2, r0
 800427a:	4603      	mov	r3, r0
 800427c:	4293      	cmp	r3, r2
 800427e:	d100      	bne.n	8004282 <memset+0xa>
 8004280:	4770      	bx	lr
 8004282:	f803 1b01 	strb.w	r1, [r3], #1
 8004286:	e7f9      	b.n	800427c <memset+0x4>

08004288 <__libc_init_array>:
 8004288:	b570      	push	{r4, r5, r6, lr}
 800428a:	4d0d      	ldr	r5, [pc, #52]	@ (80042c0 <__libc_init_array+0x38>)
 800428c:	4c0d      	ldr	r4, [pc, #52]	@ (80042c4 <__libc_init_array+0x3c>)
 800428e:	1b64      	subs	r4, r4, r5
 8004290:	10a4      	asrs	r4, r4, #2
 8004292:	2600      	movs	r6, #0
 8004294:	42a6      	cmp	r6, r4
 8004296:	d109      	bne.n	80042ac <__libc_init_array+0x24>
 8004298:	4d0b      	ldr	r5, [pc, #44]	@ (80042c8 <__libc_init_array+0x40>)
 800429a:	4c0c      	ldr	r4, [pc, #48]	@ (80042cc <__libc_init_array+0x44>)
 800429c:	f000 f818 	bl	80042d0 <_init>
 80042a0:	1b64      	subs	r4, r4, r5
 80042a2:	10a4      	asrs	r4, r4, #2
 80042a4:	2600      	movs	r6, #0
 80042a6:	42a6      	cmp	r6, r4
 80042a8:	d105      	bne.n	80042b6 <__libc_init_array+0x2e>
 80042aa:	bd70      	pop	{r4, r5, r6, pc}
 80042ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80042b0:	4798      	blx	r3
 80042b2:	3601      	adds	r6, #1
 80042b4:	e7ee      	b.n	8004294 <__libc_init_array+0xc>
 80042b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80042ba:	4798      	blx	r3
 80042bc:	3601      	adds	r6, #1
 80042be:	e7f2      	b.n	80042a6 <__libc_init_array+0x1e>
 80042c0:	0800436c 	.word	0x0800436c
 80042c4:	0800436c 	.word	0x0800436c
 80042c8:	0800436c 	.word	0x0800436c
 80042cc:	08004370 	.word	0x08004370

080042d0 <_init>:
 80042d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042d2:	bf00      	nop
 80042d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042d6:	bc08      	pop	{r3}
 80042d8:	469e      	mov	lr, r3
 80042da:	4770      	bx	lr

080042dc <_fini>:
 80042dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042de:	bf00      	nop
 80042e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042e2:	bc08      	pop	{r3}
 80042e4:	469e      	mov	lr, r3
 80042e6:	4770      	bx	lr
