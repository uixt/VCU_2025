
VCU_2025.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b18  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08003ca8  08003ca8  00004ca8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d10  08003d10  00005010  2**0
                  CONTENTS
  4 .ARM          00000000  08003d10  08003d10  00005010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003d10  08003d10  00005010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d10  08003d10  00004d10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003d14  08003d14  00004d14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08003d18  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000104c  20000010  08003d28  00005010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000105c  08003d28  0000505c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c9be  00000000  00000000  00005040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ff0  00000000  00000000  000119fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ab0  00000000  00000000  000139f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000082d  00000000  00000000  000144a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b72d  00000000  00000000  00014ccd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d4cc  00000000  00000000  000303fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a3a9d  00000000  00000000  0003d8c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e1363  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a58  00000000  00000000  000e13a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  000e3e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003c90 	.word	0x08003c90

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08003c90 	.word	0x08003c90

080001d0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80001d0:	b480      	push	{r7}
 80001d2:	b085      	sub	sp, #20
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	60f8      	str	r0, [r7, #12]
 80001d8:	60b9      	str	r1, [r7, #8]
 80001da:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80001dc:	68fb      	ldr	r3, [r7, #12]
 80001de:	4a07      	ldr	r2, [pc, #28]	@ (80001fc <vApplicationGetIdleTaskMemory+0x2c>)
 80001e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80001e2:	68bb      	ldr	r3, [r7, #8]
 80001e4:	4a06      	ldr	r2, [pc, #24]	@ (8000200 <vApplicationGetIdleTaskMemory+0x30>)
 80001e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	2280      	movs	r2, #128	@ 0x80
 80001ec:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80001ee:	bf00      	nop
 80001f0:	3714      	adds	r7, #20
 80001f2:	46bd      	mov	sp, r7
 80001f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f8:	4770      	bx	lr
 80001fa:	bf00      	nop
 80001fc:	2000002c 	.word	0x2000002c
 8000200:	20000080 	.word	0x20000080

08000204 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000204:	b5b0      	push	{r4, r5, r7, lr}
 8000206:	b088      	sub	sp, #32
 8000208:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800020a:	f000 f9d5 	bl	80005b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800020e:	f000 f81d 	bl	800024c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000212:	f000 f88d 	bl	8000330 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000216:	f000 f85b 	bl	80002d0 <MX_USART2_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800021a:	4b0a      	ldr	r3, [pc, #40]	@ (8000244 <main+0x40>)
 800021c:	1d3c      	adds	r4, r7, #4
 800021e:	461d      	mov	r5, r3
 8000220:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000222:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000224:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000228:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800022c:	1d3b      	adds	r3, r7, #4
 800022e:	2100      	movs	r1, #0
 8000230:	4618      	mov	r0, r3
 8000232:	f002 fab3 	bl	800279c <osThreadCreate>
 8000236:	4603      	mov	r3, r0
 8000238:	4a03      	ldr	r2, [pc, #12]	@ (8000248 <main+0x44>)
 800023a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800023c:	f002 faa7 	bl	800278e <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000240:	bf00      	nop
 8000242:	e7fd      	b.n	8000240 <main+0x3c>
 8000244:	08003cb4 	.word	0x08003cb4
 8000248:	20000308 	.word	0x20000308

0800024c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800024c:	b580      	push	{r7, lr}
 800024e:	b090      	sub	sp, #64	@ 0x40
 8000250:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000252:	f107 0318 	add.w	r3, r7, #24
 8000256:	2228      	movs	r2, #40	@ 0x28
 8000258:	2100      	movs	r1, #0
 800025a:	4618      	mov	r0, r3
 800025c:	f003 fcec 	bl	8003c38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000260:	1d3b      	adds	r3, r7, #4
 8000262:	2200      	movs	r2, #0
 8000264:	601a      	str	r2, [r3, #0]
 8000266:	605a      	str	r2, [r3, #4]
 8000268:	609a      	str	r2, [r3, #8]
 800026a:	60da      	str	r2, [r3, #12]
 800026c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800026e:	2302      	movs	r3, #2
 8000270:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000272:	2301      	movs	r3, #1
 8000274:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000276:	2310      	movs	r3, #16
 8000278:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800027a:	2302      	movs	r3, #2
 800027c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800027e:	2300      	movs	r3, #0
 8000280:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000282:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8000286:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000288:	f107 0318 	add.w	r3, r7, #24
 800028c:	4618      	mov	r0, r3
 800028e:	f000 fc69 	bl	8000b64 <HAL_RCC_OscConfig>
 8000292:	4603      	mov	r3, r0
 8000294:	2b00      	cmp	r3, #0
 8000296:	d001      	beq.n	800029c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000298:	f000 f8ba 	bl	8000410 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800029c:	230f      	movs	r3, #15
 800029e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002a0:	2302      	movs	r3, #2
 80002a2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002a4:	2300      	movs	r3, #0
 80002a6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002a8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80002ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002ae:	2300      	movs	r3, #0
 80002b0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002b2:	1d3b      	adds	r3, r7, #4
 80002b4:	2102      	movs	r1, #2
 80002b6:	4618      	mov	r0, r3
 80002b8:	f001 fc92 	bl	8001be0 <HAL_RCC_ClockConfig>
 80002bc:	4603      	mov	r3, r0
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d001      	beq.n	80002c6 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80002c2:	f000 f8a5 	bl	8000410 <Error_Handler>
  }
}
 80002c6:	bf00      	nop
 80002c8:	3740      	adds	r7, #64	@ 0x40
 80002ca:	46bd      	mov	sp, r7
 80002cc:	bd80      	pop	{r7, pc}
	...

080002d0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80002d4:	4b14      	ldr	r3, [pc, #80]	@ (8000328 <MX_USART2_UART_Init+0x58>)
 80002d6:	4a15      	ldr	r2, [pc, #84]	@ (800032c <MX_USART2_UART_Init+0x5c>)
 80002d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80002da:	4b13      	ldr	r3, [pc, #76]	@ (8000328 <MX_USART2_UART_Init+0x58>)
 80002dc:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 80002e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80002e2:	4b11      	ldr	r3, [pc, #68]	@ (8000328 <MX_USART2_UART_Init+0x58>)
 80002e4:	2200      	movs	r2, #0
 80002e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80002e8:	4b0f      	ldr	r3, [pc, #60]	@ (8000328 <MX_USART2_UART_Init+0x58>)
 80002ea:	2200      	movs	r2, #0
 80002ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80002ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000328 <MX_USART2_UART_Init+0x58>)
 80002f0:	2200      	movs	r2, #0
 80002f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80002f4:	4b0c      	ldr	r3, [pc, #48]	@ (8000328 <MX_USART2_UART_Init+0x58>)
 80002f6:	220c      	movs	r2, #12
 80002f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002fa:	4b0b      	ldr	r3, [pc, #44]	@ (8000328 <MX_USART2_UART_Init+0x58>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000300:	4b09      	ldr	r3, [pc, #36]	@ (8000328 <MX_USART2_UART_Init+0x58>)
 8000302:	2200      	movs	r2, #0
 8000304:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000306:	4b08      	ldr	r3, [pc, #32]	@ (8000328 <MX_USART2_UART_Init+0x58>)
 8000308:	2200      	movs	r2, #0
 800030a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800030c:	4b06      	ldr	r3, [pc, #24]	@ (8000328 <MX_USART2_UART_Init+0x58>)
 800030e:	2200      	movs	r2, #0
 8000310:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000312:	4805      	ldr	r0, [pc, #20]	@ (8000328 <MX_USART2_UART_Init+0x58>)
 8000314:	f001 fe84 	bl	8002020 <HAL_UART_Init>
 8000318:	4603      	mov	r3, r0
 800031a:	2b00      	cmp	r3, #0
 800031c:	d001      	beq.n	8000322 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800031e:	f000 f877 	bl	8000410 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000322:	bf00      	nop
 8000324:	bd80      	pop	{r7, pc}
 8000326:	bf00      	nop
 8000328:	20000280 	.word	0x20000280
 800032c:	40004400 	.word	0x40004400

08000330 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	b08a      	sub	sp, #40	@ 0x28
 8000334:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000336:	f107 0314 	add.w	r3, r7, #20
 800033a:	2200      	movs	r2, #0
 800033c:	601a      	str	r2, [r3, #0]
 800033e:	605a      	str	r2, [r3, #4]
 8000340:	609a      	str	r2, [r3, #8]
 8000342:	60da      	str	r2, [r3, #12]
 8000344:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000346:	4b2b      	ldr	r3, [pc, #172]	@ (80003f4 <MX_GPIO_Init+0xc4>)
 8000348:	695b      	ldr	r3, [r3, #20]
 800034a:	4a2a      	ldr	r2, [pc, #168]	@ (80003f4 <MX_GPIO_Init+0xc4>)
 800034c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000350:	6153      	str	r3, [r2, #20]
 8000352:	4b28      	ldr	r3, [pc, #160]	@ (80003f4 <MX_GPIO_Init+0xc4>)
 8000354:	695b      	ldr	r3, [r3, #20]
 8000356:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800035a:	613b      	str	r3, [r7, #16]
 800035c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800035e:	4b25      	ldr	r3, [pc, #148]	@ (80003f4 <MX_GPIO_Init+0xc4>)
 8000360:	695b      	ldr	r3, [r3, #20]
 8000362:	4a24      	ldr	r2, [pc, #144]	@ (80003f4 <MX_GPIO_Init+0xc4>)
 8000364:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000368:	6153      	str	r3, [r2, #20]
 800036a:	4b22      	ldr	r3, [pc, #136]	@ (80003f4 <MX_GPIO_Init+0xc4>)
 800036c:	695b      	ldr	r3, [r3, #20]
 800036e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000372:	60fb      	str	r3, [r7, #12]
 8000374:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000376:	4b1f      	ldr	r3, [pc, #124]	@ (80003f4 <MX_GPIO_Init+0xc4>)
 8000378:	695b      	ldr	r3, [r3, #20]
 800037a:	4a1e      	ldr	r2, [pc, #120]	@ (80003f4 <MX_GPIO_Init+0xc4>)
 800037c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000380:	6153      	str	r3, [r2, #20]
 8000382:	4b1c      	ldr	r3, [pc, #112]	@ (80003f4 <MX_GPIO_Init+0xc4>)
 8000384:	695b      	ldr	r3, [r3, #20]
 8000386:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800038a:	60bb      	str	r3, [r7, #8]
 800038c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800038e:	4b19      	ldr	r3, [pc, #100]	@ (80003f4 <MX_GPIO_Init+0xc4>)
 8000390:	695b      	ldr	r3, [r3, #20]
 8000392:	4a18      	ldr	r2, [pc, #96]	@ (80003f4 <MX_GPIO_Init+0xc4>)
 8000394:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000398:	6153      	str	r3, [r2, #20]
 800039a:	4b16      	ldr	r3, [pc, #88]	@ (80003f4 <MX_GPIO_Init+0xc4>)
 800039c:	695b      	ldr	r3, [r3, #20]
 800039e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80003a2:	607b      	str	r3, [r7, #4]
 80003a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80003a6:	2200      	movs	r2, #0
 80003a8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80003ac:	4812      	ldr	r0, [pc, #72]	@ (80003f8 <MX_GPIO_Init+0xc8>)
 80003ae:	f000 fbc1 	bl	8000b34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80003b2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80003b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80003b8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80003bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003be:	2300      	movs	r3, #0
 80003c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80003c2:	f107 0314 	add.w	r3, r7, #20
 80003c6:	4619      	mov	r1, r3
 80003c8:	480c      	ldr	r0, [pc, #48]	@ (80003fc <MX_GPIO_Init+0xcc>)
 80003ca:	f000 fa41 	bl	8000850 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80003ce:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80003d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003d4:	2301      	movs	r3, #1
 80003d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003d8:	2300      	movs	r3, #0
 80003da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003dc:	2300      	movs	r3, #0
 80003de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80003e0:	f107 0314 	add.w	r3, r7, #20
 80003e4:	4619      	mov	r1, r3
 80003e6:	4804      	ldr	r0, [pc, #16]	@ (80003f8 <MX_GPIO_Init+0xc8>)
 80003e8:	f000 fa32 	bl	8000850 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003ec:	bf00      	nop
 80003ee:	3728      	adds	r7, #40	@ 0x28
 80003f0:	46bd      	mov	sp, r7
 80003f2:	bd80      	pop	{r7, pc}
 80003f4:	40021000 	.word	0x40021000
 80003f8:	48000400 	.word	0x48000400
 80003fc:	48000800 	.word	0x48000800

08000400 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b082      	sub	sp, #8
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000408:	2001      	movs	r0, #1
 800040a:	f002 fa13 	bl	8002834 <osDelay>
 800040e:	e7fb      	b.n	8000408 <StartDefaultTask+0x8>

08000410 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000410:	b480      	push	{r7}
 8000412:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000414:	b672      	cpsid	i
}
 8000416:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000418:	bf00      	nop
 800041a:	e7fd      	b.n	8000418 <Error_Handler+0x8>

0800041c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	b082      	sub	sp, #8
 8000420:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000422:	4b11      	ldr	r3, [pc, #68]	@ (8000468 <HAL_MspInit+0x4c>)
 8000424:	699b      	ldr	r3, [r3, #24]
 8000426:	4a10      	ldr	r2, [pc, #64]	@ (8000468 <HAL_MspInit+0x4c>)
 8000428:	f043 0301 	orr.w	r3, r3, #1
 800042c:	6193      	str	r3, [r2, #24]
 800042e:	4b0e      	ldr	r3, [pc, #56]	@ (8000468 <HAL_MspInit+0x4c>)
 8000430:	699b      	ldr	r3, [r3, #24]
 8000432:	f003 0301 	and.w	r3, r3, #1
 8000436:	607b      	str	r3, [r7, #4]
 8000438:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800043a:	4b0b      	ldr	r3, [pc, #44]	@ (8000468 <HAL_MspInit+0x4c>)
 800043c:	69db      	ldr	r3, [r3, #28]
 800043e:	4a0a      	ldr	r2, [pc, #40]	@ (8000468 <HAL_MspInit+0x4c>)
 8000440:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000444:	61d3      	str	r3, [r2, #28]
 8000446:	4b08      	ldr	r3, [pc, #32]	@ (8000468 <HAL_MspInit+0x4c>)
 8000448:	69db      	ldr	r3, [r3, #28]
 800044a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800044e:	603b      	str	r3, [r7, #0]
 8000450:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000452:	2200      	movs	r2, #0
 8000454:	210f      	movs	r1, #15
 8000456:	f06f 0001 	mvn.w	r0, #1
 800045a:	f000 f9d0 	bl	80007fe <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800045e:	bf00      	nop
 8000460:	3708      	adds	r7, #8
 8000462:	46bd      	mov	sp, r7
 8000464:	bd80      	pop	{r7, pc}
 8000466:	bf00      	nop
 8000468:	40021000 	.word	0x40021000

0800046c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b08a      	sub	sp, #40	@ 0x28
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000474:	f107 0314 	add.w	r3, r7, #20
 8000478:	2200      	movs	r2, #0
 800047a:	601a      	str	r2, [r3, #0]
 800047c:	605a      	str	r2, [r3, #4]
 800047e:	609a      	str	r2, [r3, #8]
 8000480:	60da      	str	r2, [r3, #12]
 8000482:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	4a17      	ldr	r2, [pc, #92]	@ (80004e8 <HAL_UART_MspInit+0x7c>)
 800048a:	4293      	cmp	r3, r2
 800048c:	d128      	bne.n	80004e0 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800048e:	4b17      	ldr	r3, [pc, #92]	@ (80004ec <HAL_UART_MspInit+0x80>)
 8000490:	69db      	ldr	r3, [r3, #28]
 8000492:	4a16      	ldr	r2, [pc, #88]	@ (80004ec <HAL_UART_MspInit+0x80>)
 8000494:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000498:	61d3      	str	r3, [r2, #28]
 800049a:	4b14      	ldr	r3, [pc, #80]	@ (80004ec <HAL_UART_MspInit+0x80>)
 800049c:	69db      	ldr	r3, [r3, #28]
 800049e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80004a2:	613b      	str	r3, [r7, #16]
 80004a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004a6:	4b11      	ldr	r3, [pc, #68]	@ (80004ec <HAL_UART_MspInit+0x80>)
 80004a8:	695b      	ldr	r3, [r3, #20]
 80004aa:	4a10      	ldr	r2, [pc, #64]	@ (80004ec <HAL_UART_MspInit+0x80>)
 80004ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80004b0:	6153      	str	r3, [r2, #20]
 80004b2:	4b0e      	ldr	r3, [pc, #56]	@ (80004ec <HAL_UART_MspInit+0x80>)
 80004b4:	695b      	ldr	r3, [r3, #20]
 80004b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80004ba:	60fb      	str	r3, [r7, #12]
 80004bc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80004be:	230c      	movs	r3, #12
 80004c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004c2:	2302      	movs	r3, #2
 80004c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004c6:	2300      	movs	r3, #0
 80004c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004ca:	2300      	movs	r3, #0
 80004cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80004ce:	2307      	movs	r3, #7
 80004d0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004d2:	f107 0314 	add.w	r3, r7, #20
 80004d6:	4619      	mov	r1, r3
 80004d8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004dc:	f000 f9b8 	bl	8000850 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80004e0:	bf00      	nop
 80004e2:	3728      	adds	r7, #40	@ 0x28
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bd80      	pop	{r7, pc}
 80004e8:	40004400 	.word	0x40004400
 80004ec:	40021000 	.word	0x40021000

080004f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004f0:	b480      	push	{r7}
 80004f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80004f4:	bf00      	nop
 80004f6:	e7fd      	b.n	80004f4 <NMI_Handler+0x4>

080004f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004f8:	b480      	push	{r7}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004fc:	bf00      	nop
 80004fe:	e7fd      	b.n	80004fc <HardFault_Handler+0x4>

08000500 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000504:	bf00      	nop
 8000506:	e7fd      	b.n	8000504 <MemManage_Handler+0x4>

08000508 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000508:	b480      	push	{r7}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800050c:	bf00      	nop
 800050e:	e7fd      	b.n	800050c <BusFault_Handler+0x4>

08000510 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000510:	b480      	push	{r7}
 8000512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000514:	bf00      	nop
 8000516:	e7fd      	b.n	8000514 <UsageFault_Handler+0x4>

08000518 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000518:	b480      	push	{r7}
 800051a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800051c:	bf00      	nop
 800051e:	46bd      	mov	sp, r7
 8000520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000524:	4770      	bx	lr

08000526 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000526:	b580      	push	{r7, lr}
 8000528:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800052a:	f000 f88b 	bl	8000644 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800052e:	f002 ff11 	bl	8003354 <xTaskGetSchedulerState>
 8000532:	4603      	mov	r3, r0
 8000534:	2b01      	cmp	r3, #1
 8000536:	d001      	beq.n	800053c <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000538:	f003 f94e 	bl	80037d8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800053c:	bf00      	nop
 800053e:	bd80      	pop	{r7, pc}

08000540 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000540:	b480      	push	{r7}
 8000542:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000544:	4b06      	ldr	r3, [pc, #24]	@ (8000560 <SystemInit+0x20>)
 8000546:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800054a:	4a05      	ldr	r2, [pc, #20]	@ (8000560 <SystemInit+0x20>)
 800054c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000550:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000554:	bf00      	nop
 8000556:	46bd      	mov	sp, r7
 8000558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop
 8000560:	e000ed00 	.word	0xe000ed00

08000564 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000564:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800059c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000568:	f7ff ffea 	bl	8000540 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800056c:	480c      	ldr	r0, [pc, #48]	@ (80005a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800056e:	490d      	ldr	r1, [pc, #52]	@ (80005a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000570:	4a0d      	ldr	r2, [pc, #52]	@ (80005a8 <LoopForever+0xe>)
  movs r3, #0
 8000572:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000574:	e002      	b.n	800057c <LoopCopyDataInit>

08000576 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000576:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000578:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800057a:	3304      	adds	r3, #4

0800057c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800057c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800057e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000580:	d3f9      	bcc.n	8000576 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000582:	4a0a      	ldr	r2, [pc, #40]	@ (80005ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8000584:	4c0a      	ldr	r4, [pc, #40]	@ (80005b0 <LoopForever+0x16>)
  movs r3, #0
 8000586:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000588:	e001      	b.n	800058e <LoopFillZerobss>

0800058a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800058a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800058c:	3204      	adds	r2, #4

0800058e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800058e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000590:	d3fb      	bcc.n	800058a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000592:	f003 fb59 	bl	8003c48 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000596:	f7ff fe35 	bl	8000204 <main>

0800059a <LoopForever>:

LoopForever:
    b LoopForever
 800059a:	e7fe      	b.n	800059a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800059c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80005a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005a4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80005a8:	08003d18 	.word	0x08003d18
  ldr r2, =_sbss
 80005ac:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80005b0:	2000105c 	.word	0x2000105c

080005b4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80005b4:	e7fe      	b.n	80005b4 <ADC1_IRQHandler>
	...

080005b8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005bc:	4b08      	ldr	r3, [pc, #32]	@ (80005e0 <HAL_Init+0x28>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4a07      	ldr	r2, [pc, #28]	@ (80005e0 <HAL_Init+0x28>)
 80005c2:	f043 0310 	orr.w	r3, r3, #16
 80005c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005c8:	2003      	movs	r0, #3
 80005ca:	f000 f90d 	bl	80007e8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005ce:	200f      	movs	r0, #15
 80005d0:	f000 f808 	bl	80005e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005d4:	f7ff ff22 	bl	800041c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005d8:	2300      	movs	r3, #0
}
 80005da:	4618      	mov	r0, r3
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	40022000 	.word	0x40022000

080005e4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005ec:	4b12      	ldr	r3, [pc, #72]	@ (8000638 <HAL_InitTick+0x54>)
 80005ee:	681a      	ldr	r2, [r3, #0]
 80005f0:	4b12      	ldr	r3, [pc, #72]	@ (800063c <HAL_InitTick+0x58>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	4619      	mov	r1, r3
 80005f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80005fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000602:	4618      	mov	r0, r3
 8000604:	f000 f917 	bl	8000836 <HAL_SYSTICK_Config>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800060e:	2301      	movs	r3, #1
 8000610:	e00e      	b.n	8000630 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	2b0f      	cmp	r3, #15
 8000616:	d80a      	bhi.n	800062e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000618:	2200      	movs	r2, #0
 800061a:	6879      	ldr	r1, [r7, #4]
 800061c:	f04f 30ff 	mov.w	r0, #4294967295
 8000620:	f000 f8ed 	bl	80007fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000624:	4a06      	ldr	r2, [pc, #24]	@ (8000640 <HAL_InitTick+0x5c>)
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800062a:	2300      	movs	r3, #0
 800062c:	e000      	b.n	8000630 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800062e:	2301      	movs	r3, #1
}
 8000630:	4618      	mov	r0, r3
 8000632:	3708      	adds	r7, #8
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	20000000 	.word	0x20000000
 800063c:	20000008 	.word	0x20000008
 8000640:	20000004 	.word	0x20000004

08000644 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000648:	4b06      	ldr	r3, [pc, #24]	@ (8000664 <HAL_IncTick+0x20>)
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	461a      	mov	r2, r3
 800064e:	4b06      	ldr	r3, [pc, #24]	@ (8000668 <HAL_IncTick+0x24>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	4413      	add	r3, r2
 8000654:	4a04      	ldr	r2, [pc, #16]	@ (8000668 <HAL_IncTick+0x24>)
 8000656:	6013      	str	r3, [r2, #0]
}
 8000658:	bf00      	nop
 800065a:	46bd      	mov	sp, r7
 800065c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop
 8000664:	20000008 	.word	0x20000008
 8000668:	2000030c 	.word	0x2000030c

0800066c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000670:	4b03      	ldr	r3, [pc, #12]	@ (8000680 <HAL_GetTick+0x14>)
 8000672:	681b      	ldr	r3, [r3, #0]
}
 8000674:	4618      	mov	r0, r3
 8000676:	46bd      	mov	sp, r7
 8000678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop
 8000680:	2000030c 	.word	0x2000030c

08000684 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000684:	b480      	push	{r7}
 8000686:	b085      	sub	sp, #20
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	f003 0307 	and.w	r3, r3, #7
 8000692:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000694:	4b0c      	ldr	r3, [pc, #48]	@ (80006c8 <__NVIC_SetPriorityGrouping+0x44>)
 8000696:	68db      	ldr	r3, [r3, #12]
 8000698:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800069a:	68ba      	ldr	r2, [r7, #8]
 800069c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80006a0:	4013      	ands	r3, r2
 80006a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006a8:	68bb      	ldr	r3, [r7, #8]
 80006aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006ac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80006b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006b6:	4a04      	ldr	r2, [pc, #16]	@ (80006c8 <__NVIC_SetPriorityGrouping+0x44>)
 80006b8:	68bb      	ldr	r3, [r7, #8]
 80006ba:	60d3      	str	r3, [r2, #12]
}
 80006bc:	bf00      	nop
 80006be:	3714      	adds	r7, #20
 80006c0:	46bd      	mov	sp, r7
 80006c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c6:	4770      	bx	lr
 80006c8:	e000ed00 	.word	0xe000ed00

080006cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006d0:	4b04      	ldr	r3, [pc, #16]	@ (80006e4 <__NVIC_GetPriorityGrouping+0x18>)
 80006d2:	68db      	ldr	r3, [r3, #12]
 80006d4:	0a1b      	lsrs	r3, r3, #8
 80006d6:	f003 0307 	and.w	r3, r3, #7
}
 80006da:	4618      	mov	r0, r3
 80006dc:	46bd      	mov	sp, r7
 80006de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e2:	4770      	bx	lr
 80006e4:	e000ed00 	.word	0xe000ed00

080006e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006e8:	b480      	push	{r7}
 80006ea:	b083      	sub	sp, #12
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	4603      	mov	r3, r0
 80006f0:	6039      	str	r1, [r7, #0]
 80006f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	db0a      	blt.n	8000712 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006fc:	683b      	ldr	r3, [r7, #0]
 80006fe:	b2da      	uxtb	r2, r3
 8000700:	490c      	ldr	r1, [pc, #48]	@ (8000734 <__NVIC_SetPriority+0x4c>)
 8000702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000706:	0112      	lsls	r2, r2, #4
 8000708:	b2d2      	uxtb	r2, r2
 800070a:	440b      	add	r3, r1
 800070c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000710:	e00a      	b.n	8000728 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000712:	683b      	ldr	r3, [r7, #0]
 8000714:	b2da      	uxtb	r2, r3
 8000716:	4908      	ldr	r1, [pc, #32]	@ (8000738 <__NVIC_SetPriority+0x50>)
 8000718:	79fb      	ldrb	r3, [r7, #7]
 800071a:	f003 030f 	and.w	r3, r3, #15
 800071e:	3b04      	subs	r3, #4
 8000720:	0112      	lsls	r2, r2, #4
 8000722:	b2d2      	uxtb	r2, r2
 8000724:	440b      	add	r3, r1
 8000726:	761a      	strb	r2, [r3, #24]
}
 8000728:	bf00      	nop
 800072a:	370c      	adds	r7, #12
 800072c:	46bd      	mov	sp, r7
 800072e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000732:	4770      	bx	lr
 8000734:	e000e100 	.word	0xe000e100
 8000738:	e000ed00 	.word	0xe000ed00

0800073c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800073c:	b480      	push	{r7}
 800073e:	b089      	sub	sp, #36	@ 0x24
 8000740:	af00      	add	r7, sp, #0
 8000742:	60f8      	str	r0, [r7, #12]
 8000744:	60b9      	str	r1, [r7, #8]
 8000746:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	f003 0307 	and.w	r3, r3, #7
 800074e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000750:	69fb      	ldr	r3, [r7, #28]
 8000752:	f1c3 0307 	rsb	r3, r3, #7
 8000756:	2b04      	cmp	r3, #4
 8000758:	bf28      	it	cs
 800075a:	2304      	movcs	r3, #4
 800075c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800075e:	69fb      	ldr	r3, [r7, #28]
 8000760:	3304      	adds	r3, #4
 8000762:	2b06      	cmp	r3, #6
 8000764:	d902      	bls.n	800076c <NVIC_EncodePriority+0x30>
 8000766:	69fb      	ldr	r3, [r7, #28]
 8000768:	3b03      	subs	r3, #3
 800076a:	e000      	b.n	800076e <NVIC_EncodePriority+0x32>
 800076c:	2300      	movs	r3, #0
 800076e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000770:	f04f 32ff 	mov.w	r2, #4294967295
 8000774:	69bb      	ldr	r3, [r7, #24]
 8000776:	fa02 f303 	lsl.w	r3, r2, r3
 800077a:	43da      	mvns	r2, r3
 800077c:	68bb      	ldr	r3, [r7, #8]
 800077e:	401a      	ands	r2, r3
 8000780:	697b      	ldr	r3, [r7, #20]
 8000782:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000784:	f04f 31ff 	mov.w	r1, #4294967295
 8000788:	697b      	ldr	r3, [r7, #20]
 800078a:	fa01 f303 	lsl.w	r3, r1, r3
 800078e:	43d9      	mvns	r1, r3
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000794:	4313      	orrs	r3, r2
         );
}
 8000796:	4618      	mov	r0, r3
 8000798:	3724      	adds	r7, #36	@ 0x24
 800079a:	46bd      	mov	sp, r7
 800079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a0:	4770      	bx	lr
	...

080007a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	3b01      	subs	r3, #1
 80007b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80007b4:	d301      	bcc.n	80007ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007b6:	2301      	movs	r3, #1
 80007b8:	e00f      	b.n	80007da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007ba:	4a0a      	ldr	r2, [pc, #40]	@ (80007e4 <SysTick_Config+0x40>)
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	3b01      	subs	r3, #1
 80007c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007c2:	210f      	movs	r1, #15
 80007c4:	f04f 30ff 	mov.w	r0, #4294967295
 80007c8:	f7ff ff8e 	bl	80006e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007cc:	4b05      	ldr	r3, [pc, #20]	@ (80007e4 <SysTick_Config+0x40>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007d2:	4b04      	ldr	r3, [pc, #16]	@ (80007e4 <SysTick_Config+0x40>)
 80007d4:	2207      	movs	r2, #7
 80007d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007d8:	2300      	movs	r3, #0
}
 80007da:	4618      	mov	r0, r3
 80007dc:	3708      	adds	r7, #8
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	e000e010 	.word	0xe000e010

080007e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007f0:	6878      	ldr	r0, [r7, #4]
 80007f2:	f7ff ff47 	bl	8000684 <__NVIC_SetPriorityGrouping>
}
 80007f6:	bf00      	nop
 80007f8:	3708      	adds	r7, #8
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}

080007fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007fe:	b580      	push	{r7, lr}
 8000800:	b086      	sub	sp, #24
 8000802:	af00      	add	r7, sp, #0
 8000804:	4603      	mov	r3, r0
 8000806:	60b9      	str	r1, [r7, #8]
 8000808:	607a      	str	r2, [r7, #4]
 800080a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800080c:	2300      	movs	r3, #0
 800080e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000810:	f7ff ff5c 	bl	80006cc <__NVIC_GetPriorityGrouping>
 8000814:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000816:	687a      	ldr	r2, [r7, #4]
 8000818:	68b9      	ldr	r1, [r7, #8]
 800081a:	6978      	ldr	r0, [r7, #20]
 800081c:	f7ff ff8e 	bl	800073c <NVIC_EncodePriority>
 8000820:	4602      	mov	r2, r0
 8000822:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000826:	4611      	mov	r1, r2
 8000828:	4618      	mov	r0, r3
 800082a:	f7ff ff5d 	bl	80006e8 <__NVIC_SetPriority>
}
 800082e:	bf00      	nop
 8000830:	3718      	adds	r7, #24
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}

08000836 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000836:	b580      	push	{r7, lr}
 8000838:	b082      	sub	sp, #8
 800083a:	af00      	add	r7, sp, #0
 800083c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800083e:	6878      	ldr	r0, [r7, #4]
 8000840:	f7ff ffb0 	bl	80007a4 <SysTick_Config>
 8000844:	4603      	mov	r3, r0
}
 8000846:	4618      	mov	r0, r3
 8000848:	3708      	adds	r7, #8
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
	...

08000850 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000850:	b480      	push	{r7}
 8000852:	b087      	sub	sp, #28
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
 8000858:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800085a:	2300      	movs	r3, #0
 800085c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800085e:	e14e      	b.n	8000afe <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000860:	683b      	ldr	r3, [r7, #0]
 8000862:	681a      	ldr	r2, [r3, #0]
 8000864:	2101      	movs	r1, #1
 8000866:	697b      	ldr	r3, [r7, #20]
 8000868:	fa01 f303 	lsl.w	r3, r1, r3
 800086c:	4013      	ands	r3, r2
 800086e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	2b00      	cmp	r3, #0
 8000874:	f000 8140 	beq.w	8000af8 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	685b      	ldr	r3, [r3, #4]
 800087c:	f003 0303 	and.w	r3, r3, #3
 8000880:	2b01      	cmp	r3, #1
 8000882:	d005      	beq.n	8000890 <HAL_GPIO_Init+0x40>
 8000884:	683b      	ldr	r3, [r7, #0]
 8000886:	685b      	ldr	r3, [r3, #4]
 8000888:	f003 0303 	and.w	r3, r3, #3
 800088c:	2b02      	cmp	r3, #2
 800088e:	d130      	bne.n	80008f2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	689b      	ldr	r3, [r3, #8]
 8000894:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000896:	697b      	ldr	r3, [r7, #20]
 8000898:	005b      	lsls	r3, r3, #1
 800089a:	2203      	movs	r2, #3
 800089c:	fa02 f303 	lsl.w	r3, r2, r3
 80008a0:	43db      	mvns	r3, r3
 80008a2:	693a      	ldr	r2, [r7, #16]
 80008a4:	4013      	ands	r3, r2
 80008a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80008a8:	683b      	ldr	r3, [r7, #0]
 80008aa:	68da      	ldr	r2, [r3, #12]
 80008ac:	697b      	ldr	r3, [r7, #20]
 80008ae:	005b      	lsls	r3, r3, #1
 80008b0:	fa02 f303 	lsl.w	r3, r2, r3
 80008b4:	693a      	ldr	r2, [r7, #16]
 80008b6:	4313      	orrs	r3, r2
 80008b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	693a      	ldr	r2, [r7, #16]
 80008be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	685b      	ldr	r3, [r3, #4]
 80008c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80008c6:	2201      	movs	r2, #1
 80008c8:	697b      	ldr	r3, [r7, #20]
 80008ca:	fa02 f303 	lsl.w	r3, r2, r3
 80008ce:	43db      	mvns	r3, r3
 80008d0:	693a      	ldr	r2, [r7, #16]
 80008d2:	4013      	ands	r3, r2
 80008d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	685b      	ldr	r3, [r3, #4]
 80008da:	091b      	lsrs	r3, r3, #4
 80008dc:	f003 0201 	and.w	r2, r3, #1
 80008e0:	697b      	ldr	r3, [r7, #20]
 80008e2:	fa02 f303 	lsl.w	r3, r2, r3
 80008e6:	693a      	ldr	r2, [r7, #16]
 80008e8:	4313      	orrs	r3, r2
 80008ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	693a      	ldr	r2, [r7, #16]
 80008f0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	685b      	ldr	r3, [r3, #4]
 80008f6:	f003 0303 	and.w	r3, r3, #3
 80008fa:	2b03      	cmp	r3, #3
 80008fc:	d017      	beq.n	800092e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	68db      	ldr	r3, [r3, #12]
 8000902:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000904:	697b      	ldr	r3, [r7, #20]
 8000906:	005b      	lsls	r3, r3, #1
 8000908:	2203      	movs	r2, #3
 800090a:	fa02 f303 	lsl.w	r3, r2, r3
 800090e:	43db      	mvns	r3, r3
 8000910:	693a      	ldr	r2, [r7, #16]
 8000912:	4013      	ands	r3, r2
 8000914:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	689a      	ldr	r2, [r3, #8]
 800091a:	697b      	ldr	r3, [r7, #20]
 800091c:	005b      	lsls	r3, r3, #1
 800091e:	fa02 f303 	lsl.w	r3, r2, r3
 8000922:	693a      	ldr	r2, [r7, #16]
 8000924:	4313      	orrs	r3, r2
 8000926:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	693a      	ldr	r2, [r7, #16]
 800092c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	685b      	ldr	r3, [r3, #4]
 8000932:	f003 0303 	and.w	r3, r3, #3
 8000936:	2b02      	cmp	r3, #2
 8000938:	d123      	bne.n	8000982 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800093a:	697b      	ldr	r3, [r7, #20]
 800093c:	08da      	lsrs	r2, r3, #3
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	3208      	adds	r2, #8
 8000942:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000946:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000948:	697b      	ldr	r3, [r7, #20]
 800094a:	f003 0307 	and.w	r3, r3, #7
 800094e:	009b      	lsls	r3, r3, #2
 8000950:	220f      	movs	r2, #15
 8000952:	fa02 f303 	lsl.w	r3, r2, r3
 8000956:	43db      	mvns	r3, r3
 8000958:	693a      	ldr	r2, [r7, #16]
 800095a:	4013      	ands	r3, r2
 800095c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	691a      	ldr	r2, [r3, #16]
 8000962:	697b      	ldr	r3, [r7, #20]
 8000964:	f003 0307 	and.w	r3, r3, #7
 8000968:	009b      	lsls	r3, r3, #2
 800096a:	fa02 f303 	lsl.w	r3, r2, r3
 800096e:	693a      	ldr	r2, [r7, #16]
 8000970:	4313      	orrs	r3, r2
 8000972:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000974:	697b      	ldr	r3, [r7, #20]
 8000976:	08da      	lsrs	r2, r3, #3
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	3208      	adds	r2, #8
 800097c:	6939      	ldr	r1, [r7, #16]
 800097e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000988:	697b      	ldr	r3, [r7, #20]
 800098a:	005b      	lsls	r3, r3, #1
 800098c:	2203      	movs	r2, #3
 800098e:	fa02 f303 	lsl.w	r3, r2, r3
 8000992:	43db      	mvns	r3, r3
 8000994:	693a      	ldr	r2, [r7, #16]
 8000996:	4013      	ands	r3, r2
 8000998:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800099a:	683b      	ldr	r3, [r7, #0]
 800099c:	685b      	ldr	r3, [r3, #4]
 800099e:	f003 0203 	and.w	r2, r3, #3
 80009a2:	697b      	ldr	r3, [r7, #20]
 80009a4:	005b      	lsls	r3, r3, #1
 80009a6:	fa02 f303 	lsl.w	r3, r2, r3
 80009aa:	693a      	ldr	r2, [r7, #16]
 80009ac:	4313      	orrs	r3, r2
 80009ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	693a      	ldr	r2, [r7, #16]
 80009b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	685b      	ldr	r3, [r3, #4]
 80009ba:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80009be:	2b00      	cmp	r3, #0
 80009c0:	f000 809a 	beq.w	8000af8 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009c4:	4b55      	ldr	r3, [pc, #340]	@ (8000b1c <HAL_GPIO_Init+0x2cc>)
 80009c6:	699b      	ldr	r3, [r3, #24]
 80009c8:	4a54      	ldr	r2, [pc, #336]	@ (8000b1c <HAL_GPIO_Init+0x2cc>)
 80009ca:	f043 0301 	orr.w	r3, r3, #1
 80009ce:	6193      	str	r3, [r2, #24]
 80009d0:	4b52      	ldr	r3, [pc, #328]	@ (8000b1c <HAL_GPIO_Init+0x2cc>)
 80009d2:	699b      	ldr	r3, [r3, #24]
 80009d4:	f003 0301 	and.w	r3, r3, #1
 80009d8:	60bb      	str	r3, [r7, #8]
 80009da:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80009dc:	4a50      	ldr	r2, [pc, #320]	@ (8000b20 <HAL_GPIO_Init+0x2d0>)
 80009de:	697b      	ldr	r3, [r7, #20]
 80009e0:	089b      	lsrs	r3, r3, #2
 80009e2:	3302      	adds	r3, #2
 80009e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80009ea:	697b      	ldr	r3, [r7, #20]
 80009ec:	f003 0303 	and.w	r3, r3, #3
 80009f0:	009b      	lsls	r3, r3, #2
 80009f2:	220f      	movs	r2, #15
 80009f4:	fa02 f303 	lsl.w	r3, r2, r3
 80009f8:	43db      	mvns	r3, r3
 80009fa:	693a      	ldr	r2, [r7, #16]
 80009fc:	4013      	ands	r3, r2
 80009fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000a06:	d013      	beq.n	8000a30 <HAL_GPIO_Init+0x1e0>
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	4a46      	ldr	r2, [pc, #280]	@ (8000b24 <HAL_GPIO_Init+0x2d4>)
 8000a0c:	4293      	cmp	r3, r2
 8000a0e:	d00d      	beq.n	8000a2c <HAL_GPIO_Init+0x1dc>
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	4a45      	ldr	r2, [pc, #276]	@ (8000b28 <HAL_GPIO_Init+0x2d8>)
 8000a14:	4293      	cmp	r3, r2
 8000a16:	d007      	beq.n	8000a28 <HAL_GPIO_Init+0x1d8>
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	4a44      	ldr	r2, [pc, #272]	@ (8000b2c <HAL_GPIO_Init+0x2dc>)
 8000a1c:	4293      	cmp	r3, r2
 8000a1e:	d101      	bne.n	8000a24 <HAL_GPIO_Init+0x1d4>
 8000a20:	2303      	movs	r3, #3
 8000a22:	e006      	b.n	8000a32 <HAL_GPIO_Init+0x1e2>
 8000a24:	2305      	movs	r3, #5
 8000a26:	e004      	b.n	8000a32 <HAL_GPIO_Init+0x1e2>
 8000a28:	2302      	movs	r3, #2
 8000a2a:	e002      	b.n	8000a32 <HAL_GPIO_Init+0x1e2>
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	e000      	b.n	8000a32 <HAL_GPIO_Init+0x1e2>
 8000a30:	2300      	movs	r3, #0
 8000a32:	697a      	ldr	r2, [r7, #20]
 8000a34:	f002 0203 	and.w	r2, r2, #3
 8000a38:	0092      	lsls	r2, r2, #2
 8000a3a:	4093      	lsls	r3, r2
 8000a3c:	693a      	ldr	r2, [r7, #16]
 8000a3e:	4313      	orrs	r3, r2
 8000a40:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000a42:	4937      	ldr	r1, [pc, #220]	@ (8000b20 <HAL_GPIO_Init+0x2d0>)
 8000a44:	697b      	ldr	r3, [r7, #20]
 8000a46:	089b      	lsrs	r3, r3, #2
 8000a48:	3302      	adds	r3, #2
 8000a4a:	693a      	ldr	r2, [r7, #16]
 8000a4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a50:	4b37      	ldr	r3, [pc, #220]	@ (8000b30 <HAL_GPIO_Init+0x2e0>)
 8000a52:	689b      	ldr	r3, [r3, #8]
 8000a54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	43db      	mvns	r3, r3
 8000a5a:	693a      	ldr	r2, [r7, #16]
 8000a5c:	4013      	ands	r3, r2
 8000a5e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	685b      	ldr	r3, [r3, #4]
 8000a64:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d003      	beq.n	8000a74 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000a6c:	693a      	ldr	r2, [r7, #16]
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	4313      	orrs	r3, r2
 8000a72:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000a74:	4a2e      	ldr	r2, [pc, #184]	@ (8000b30 <HAL_GPIO_Init+0x2e0>)
 8000a76:	693b      	ldr	r3, [r7, #16]
 8000a78:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000a7a:	4b2d      	ldr	r3, [pc, #180]	@ (8000b30 <HAL_GPIO_Init+0x2e0>)
 8000a7c:	68db      	ldr	r3, [r3, #12]
 8000a7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	43db      	mvns	r3, r3
 8000a84:	693a      	ldr	r2, [r7, #16]
 8000a86:	4013      	ands	r3, r2
 8000a88:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	685b      	ldr	r3, [r3, #4]
 8000a8e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d003      	beq.n	8000a9e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000a96:	693a      	ldr	r2, [r7, #16]
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	4313      	orrs	r3, r2
 8000a9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000a9e:	4a24      	ldr	r2, [pc, #144]	@ (8000b30 <HAL_GPIO_Init+0x2e0>)
 8000aa0:	693b      	ldr	r3, [r7, #16]
 8000aa2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000aa4:	4b22      	ldr	r3, [pc, #136]	@ (8000b30 <HAL_GPIO_Init+0x2e0>)
 8000aa6:	685b      	ldr	r3, [r3, #4]
 8000aa8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	43db      	mvns	r3, r3
 8000aae:	693a      	ldr	r2, [r7, #16]
 8000ab0:	4013      	ands	r3, r2
 8000ab2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	685b      	ldr	r3, [r3, #4]
 8000ab8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d003      	beq.n	8000ac8 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000ac0:	693a      	ldr	r2, [r7, #16]
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	4313      	orrs	r3, r2
 8000ac6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000ac8:	4a19      	ldr	r2, [pc, #100]	@ (8000b30 <HAL_GPIO_Init+0x2e0>)
 8000aca:	693b      	ldr	r3, [r7, #16]
 8000acc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ace:	4b18      	ldr	r3, [pc, #96]	@ (8000b30 <HAL_GPIO_Init+0x2e0>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	43db      	mvns	r3, r3
 8000ad8:	693a      	ldr	r2, [r7, #16]
 8000ada:	4013      	ands	r3, r2
 8000adc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	685b      	ldr	r3, [r3, #4]
 8000ae2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d003      	beq.n	8000af2 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000aea:	693a      	ldr	r2, [r7, #16]
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	4313      	orrs	r3, r2
 8000af0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000af2:	4a0f      	ldr	r2, [pc, #60]	@ (8000b30 <HAL_GPIO_Init+0x2e0>)
 8000af4:	693b      	ldr	r3, [r7, #16]
 8000af6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	3301      	adds	r3, #1
 8000afc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	681a      	ldr	r2, [r3, #0]
 8000b02:	697b      	ldr	r3, [r7, #20]
 8000b04:	fa22 f303 	lsr.w	r3, r2, r3
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	f47f aea9 	bne.w	8000860 <HAL_GPIO_Init+0x10>
  }
}
 8000b0e:	bf00      	nop
 8000b10:	bf00      	nop
 8000b12:	371c      	adds	r7, #28
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr
 8000b1c:	40021000 	.word	0x40021000
 8000b20:	40010000 	.word	0x40010000
 8000b24:	48000400 	.word	0x48000400
 8000b28:	48000800 	.word	0x48000800
 8000b2c:	48000c00 	.word	0x48000c00
 8000b30:	40010400 	.word	0x40010400

08000b34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
 8000b3c:	460b      	mov	r3, r1
 8000b3e:	807b      	strh	r3, [r7, #2]
 8000b40:	4613      	mov	r3, r2
 8000b42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b44:	787b      	ldrb	r3, [r7, #1]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d003      	beq.n	8000b52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000b4a:	887a      	ldrh	r2, [r7, #2]
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000b50:	e002      	b.n	8000b58 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000b52:	887a      	ldrh	r2, [r7, #2]
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000b58:	bf00      	nop
 8000b5a:	370c      	adds	r7, #12
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr

08000b64 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8000b6a:	af00      	add	r7, sp, #0
 8000b6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000b70:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000b74:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000b76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000b7a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d102      	bne.n	8000b8a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000b84:	2301      	movs	r3, #1
 8000b86:	f001 b823 	b.w	8001bd0 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b8a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000b8e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	f003 0301 	and.w	r3, r3, #1
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	f000 817d 	beq.w	8000e9a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000ba0:	4bbc      	ldr	r3, [pc, #752]	@ (8000e94 <HAL_RCC_OscConfig+0x330>)
 8000ba2:	685b      	ldr	r3, [r3, #4]
 8000ba4:	f003 030c 	and.w	r3, r3, #12
 8000ba8:	2b04      	cmp	r3, #4
 8000baa:	d00c      	beq.n	8000bc6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000bac:	4bb9      	ldr	r3, [pc, #740]	@ (8000e94 <HAL_RCC_OscConfig+0x330>)
 8000bae:	685b      	ldr	r3, [r3, #4]
 8000bb0:	f003 030c 	and.w	r3, r3, #12
 8000bb4:	2b08      	cmp	r3, #8
 8000bb6:	d15c      	bne.n	8000c72 <HAL_RCC_OscConfig+0x10e>
 8000bb8:	4bb6      	ldr	r3, [pc, #728]	@ (8000e94 <HAL_RCC_OscConfig+0x330>)
 8000bba:	685b      	ldr	r3, [r3, #4]
 8000bbc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000bc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000bc4:	d155      	bne.n	8000c72 <HAL_RCC_OscConfig+0x10e>
 8000bc6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000bca:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bce:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8000bd2:	fa93 f3a3 	rbit	r3, r3
 8000bd6:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000bda:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bde:	fab3 f383 	clz	r3, r3
 8000be2:	b2db      	uxtb	r3, r3
 8000be4:	095b      	lsrs	r3, r3, #5
 8000be6:	b2db      	uxtb	r3, r3
 8000be8:	f043 0301 	orr.w	r3, r3, #1
 8000bec:	b2db      	uxtb	r3, r3
 8000bee:	2b01      	cmp	r3, #1
 8000bf0:	d102      	bne.n	8000bf8 <HAL_RCC_OscConfig+0x94>
 8000bf2:	4ba8      	ldr	r3, [pc, #672]	@ (8000e94 <HAL_RCC_OscConfig+0x330>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	e015      	b.n	8000c24 <HAL_RCC_OscConfig+0xc0>
 8000bf8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000bfc:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c00:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8000c04:	fa93 f3a3 	rbit	r3, r3
 8000c08:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8000c0c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000c10:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8000c14:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8000c18:	fa93 f3a3 	rbit	r3, r3
 8000c1c:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8000c20:	4b9c      	ldr	r3, [pc, #624]	@ (8000e94 <HAL_RCC_OscConfig+0x330>)
 8000c22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c24:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000c28:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8000c2c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8000c30:	fa92 f2a2 	rbit	r2, r2
 8000c34:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8000c38:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8000c3c:	fab2 f282 	clz	r2, r2
 8000c40:	b2d2      	uxtb	r2, r2
 8000c42:	f042 0220 	orr.w	r2, r2, #32
 8000c46:	b2d2      	uxtb	r2, r2
 8000c48:	f002 021f 	and.w	r2, r2, #31
 8000c4c:	2101      	movs	r1, #1
 8000c4e:	fa01 f202 	lsl.w	r2, r1, r2
 8000c52:	4013      	ands	r3, r2
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	f000 811f 	beq.w	8000e98 <HAL_RCC_OscConfig+0x334>
 8000c5a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000c5e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	685b      	ldr	r3, [r3, #4]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	f040 8116 	bne.w	8000e98 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	f000 bfaf 	b.w	8001bd0 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c72:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000c76:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	685b      	ldr	r3, [r3, #4]
 8000c7e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000c82:	d106      	bne.n	8000c92 <HAL_RCC_OscConfig+0x12e>
 8000c84:	4b83      	ldr	r3, [pc, #524]	@ (8000e94 <HAL_RCC_OscConfig+0x330>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a82      	ldr	r2, [pc, #520]	@ (8000e94 <HAL_RCC_OscConfig+0x330>)
 8000c8a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000c8e:	6013      	str	r3, [r2, #0]
 8000c90:	e036      	b.n	8000d00 <HAL_RCC_OscConfig+0x19c>
 8000c92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000c96:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d10c      	bne.n	8000cbc <HAL_RCC_OscConfig+0x158>
 8000ca2:	4b7c      	ldr	r3, [pc, #496]	@ (8000e94 <HAL_RCC_OscConfig+0x330>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	4a7b      	ldr	r2, [pc, #492]	@ (8000e94 <HAL_RCC_OscConfig+0x330>)
 8000ca8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000cac:	6013      	str	r3, [r2, #0]
 8000cae:	4b79      	ldr	r3, [pc, #484]	@ (8000e94 <HAL_RCC_OscConfig+0x330>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	4a78      	ldr	r2, [pc, #480]	@ (8000e94 <HAL_RCC_OscConfig+0x330>)
 8000cb4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000cb8:	6013      	str	r3, [r2, #0]
 8000cba:	e021      	b.n	8000d00 <HAL_RCC_OscConfig+0x19c>
 8000cbc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000cc0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	685b      	ldr	r3, [r3, #4]
 8000cc8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000ccc:	d10c      	bne.n	8000ce8 <HAL_RCC_OscConfig+0x184>
 8000cce:	4b71      	ldr	r3, [pc, #452]	@ (8000e94 <HAL_RCC_OscConfig+0x330>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	4a70      	ldr	r2, [pc, #448]	@ (8000e94 <HAL_RCC_OscConfig+0x330>)
 8000cd4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000cd8:	6013      	str	r3, [r2, #0]
 8000cda:	4b6e      	ldr	r3, [pc, #440]	@ (8000e94 <HAL_RCC_OscConfig+0x330>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	4a6d      	ldr	r2, [pc, #436]	@ (8000e94 <HAL_RCC_OscConfig+0x330>)
 8000ce0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ce4:	6013      	str	r3, [r2, #0]
 8000ce6:	e00b      	b.n	8000d00 <HAL_RCC_OscConfig+0x19c>
 8000ce8:	4b6a      	ldr	r3, [pc, #424]	@ (8000e94 <HAL_RCC_OscConfig+0x330>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a69      	ldr	r2, [pc, #420]	@ (8000e94 <HAL_RCC_OscConfig+0x330>)
 8000cee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000cf2:	6013      	str	r3, [r2, #0]
 8000cf4:	4b67      	ldr	r3, [pc, #412]	@ (8000e94 <HAL_RCC_OscConfig+0x330>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a66      	ldr	r2, [pc, #408]	@ (8000e94 <HAL_RCC_OscConfig+0x330>)
 8000cfa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000cfe:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000d00:	4b64      	ldr	r3, [pc, #400]	@ (8000e94 <HAL_RCC_OscConfig+0x330>)
 8000d02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d04:	f023 020f 	bic.w	r2, r3, #15
 8000d08:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000d0c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	689b      	ldr	r3, [r3, #8]
 8000d14:	495f      	ldr	r1, [pc, #380]	@ (8000e94 <HAL_RCC_OscConfig+0x330>)
 8000d16:	4313      	orrs	r3, r2
 8000d18:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000d1e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d059      	beq.n	8000dde <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d2a:	f7ff fc9f 	bl	800066c <HAL_GetTick>
 8000d2e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d32:	e00a      	b.n	8000d4a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d34:	f7ff fc9a 	bl	800066c <HAL_GetTick>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8000d3e:	1ad3      	subs	r3, r2, r3
 8000d40:	2b64      	cmp	r3, #100	@ 0x64
 8000d42:	d902      	bls.n	8000d4a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8000d44:	2303      	movs	r3, #3
 8000d46:	f000 bf43 	b.w	8001bd0 <HAL_RCC_OscConfig+0x106c>
 8000d4a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000d4e:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d52:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8000d56:	fa93 f3a3 	rbit	r3, r3
 8000d5a:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8000d5e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d62:	fab3 f383 	clz	r3, r3
 8000d66:	b2db      	uxtb	r3, r3
 8000d68:	095b      	lsrs	r3, r3, #5
 8000d6a:	b2db      	uxtb	r3, r3
 8000d6c:	f043 0301 	orr.w	r3, r3, #1
 8000d70:	b2db      	uxtb	r3, r3
 8000d72:	2b01      	cmp	r3, #1
 8000d74:	d102      	bne.n	8000d7c <HAL_RCC_OscConfig+0x218>
 8000d76:	4b47      	ldr	r3, [pc, #284]	@ (8000e94 <HAL_RCC_OscConfig+0x330>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	e015      	b.n	8000da8 <HAL_RCC_OscConfig+0x244>
 8000d7c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000d80:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d84:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8000d88:	fa93 f3a3 	rbit	r3, r3
 8000d8c:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8000d90:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000d94:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8000d98:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8000d9c:	fa93 f3a3 	rbit	r3, r3
 8000da0:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8000da4:	4b3b      	ldr	r3, [pc, #236]	@ (8000e94 <HAL_RCC_OscConfig+0x330>)
 8000da6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000da8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000dac:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8000db0:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8000db4:	fa92 f2a2 	rbit	r2, r2
 8000db8:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8000dbc:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8000dc0:	fab2 f282 	clz	r2, r2
 8000dc4:	b2d2      	uxtb	r2, r2
 8000dc6:	f042 0220 	orr.w	r2, r2, #32
 8000dca:	b2d2      	uxtb	r2, r2
 8000dcc:	f002 021f 	and.w	r2, r2, #31
 8000dd0:	2101      	movs	r1, #1
 8000dd2:	fa01 f202 	lsl.w	r2, r1, r2
 8000dd6:	4013      	ands	r3, r2
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d0ab      	beq.n	8000d34 <HAL_RCC_OscConfig+0x1d0>
 8000ddc:	e05d      	b.n	8000e9a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dde:	f7ff fc45 	bl	800066c <HAL_GetTick>
 8000de2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000de6:	e00a      	b.n	8000dfe <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000de8:	f7ff fc40 	bl	800066c <HAL_GetTick>
 8000dec:	4602      	mov	r2, r0
 8000dee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8000df2:	1ad3      	subs	r3, r2, r3
 8000df4:	2b64      	cmp	r3, #100	@ 0x64
 8000df6:	d902      	bls.n	8000dfe <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8000df8:	2303      	movs	r3, #3
 8000dfa:	f000 bee9 	b.w	8001bd0 <HAL_RCC_OscConfig+0x106c>
 8000dfe:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000e02:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e06:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8000e0a:	fa93 f3a3 	rbit	r3, r3
 8000e0e:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8000e12:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e16:	fab3 f383 	clz	r3, r3
 8000e1a:	b2db      	uxtb	r3, r3
 8000e1c:	095b      	lsrs	r3, r3, #5
 8000e1e:	b2db      	uxtb	r3, r3
 8000e20:	f043 0301 	orr.w	r3, r3, #1
 8000e24:	b2db      	uxtb	r3, r3
 8000e26:	2b01      	cmp	r3, #1
 8000e28:	d102      	bne.n	8000e30 <HAL_RCC_OscConfig+0x2cc>
 8000e2a:	4b1a      	ldr	r3, [pc, #104]	@ (8000e94 <HAL_RCC_OscConfig+0x330>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	e015      	b.n	8000e5c <HAL_RCC_OscConfig+0x2f8>
 8000e30:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000e34:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e38:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8000e3c:	fa93 f3a3 	rbit	r3, r3
 8000e40:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8000e44:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000e48:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8000e4c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8000e50:	fa93 f3a3 	rbit	r3, r3
 8000e54:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8000e58:	4b0e      	ldr	r3, [pc, #56]	@ (8000e94 <HAL_RCC_OscConfig+0x330>)
 8000e5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e5c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000e60:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8000e64:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8000e68:	fa92 f2a2 	rbit	r2, r2
 8000e6c:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8000e70:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8000e74:	fab2 f282 	clz	r2, r2
 8000e78:	b2d2      	uxtb	r2, r2
 8000e7a:	f042 0220 	orr.w	r2, r2, #32
 8000e7e:	b2d2      	uxtb	r2, r2
 8000e80:	f002 021f 	and.w	r2, r2, #31
 8000e84:	2101      	movs	r1, #1
 8000e86:	fa01 f202 	lsl.w	r2, r1, r2
 8000e8a:	4013      	ands	r3, r2
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d1ab      	bne.n	8000de8 <HAL_RCC_OscConfig+0x284>
 8000e90:	e003      	b.n	8000e9a <HAL_RCC_OscConfig+0x336>
 8000e92:	bf00      	nop
 8000e94:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000e9e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f003 0302 	and.w	r3, r3, #2
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	f000 817d 	beq.w	80011aa <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000eb0:	4ba6      	ldr	r3, [pc, #664]	@ (800114c <HAL_RCC_OscConfig+0x5e8>)
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	f003 030c 	and.w	r3, r3, #12
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d00b      	beq.n	8000ed4 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000ebc:	4ba3      	ldr	r3, [pc, #652]	@ (800114c <HAL_RCC_OscConfig+0x5e8>)
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	f003 030c 	and.w	r3, r3, #12
 8000ec4:	2b08      	cmp	r3, #8
 8000ec6:	d172      	bne.n	8000fae <HAL_RCC_OscConfig+0x44a>
 8000ec8:	4ba0      	ldr	r3, [pc, #640]	@ (800114c <HAL_RCC_OscConfig+0x5e8>)
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d16c      	bne.n	8000fae <HAL_RCC_OscConfig+0x44a>
 8000ed4:	2302      	movs	r3, #2
 8000ed6:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000eda:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8000ede:	fa93 f3a3 	rbit	r3, r3
 8000ee2:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8000ee6:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000eea:	fab3 f383 	clz	r3, r3
 8000eee:	b2db      	uxtb	r3, r3
 8000ef0:	095b      	lsrs	r3, r3, #5
 8000ef2:	b2db      	uxtb	r3, r3
 8000ef4:	f043 0301 	orr.w	r3, r3, #1
 8000ef8:	b2db      	uxtb	r3, r3
 8000efa:	2b01      	cmp	r3, #1
 8000efc:	d102      	bne.n	8000f04 <HAL_RCC_OscConfig+0x3a0>
 8000efe:	4b93      	ldr	r3, [pc, #588]	@ (800114c <HAL_RCC_OscConfig+0x5e8>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	e013      	b.n	8000f2c <HAL_RCC_OscConfig+0x3c8>
 8000f04:	2302      	movs	r3, #2
 8000f06:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f0a:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8000f0e:	fa93 f3a3 	rbit	r3, r3
 8000f12:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8000f16:	2302      	movs	r3, #2
 8000f18:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8000f1c:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8000f20:	fa93 f3a3 	rbit	r3, r3
 8000f24:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8000f28:	4b88      	ldr	r3, [pc, #544]	@ (800114c <HAL_RCC_OscConfig+0x5e8>)
 8000f2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f2c:	2202      	movs	r2, #2
 8000f2e:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8000f32:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8000f36:	fa92 f2a2 	rbit	r2, r2
 8000f3a:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8000f3e:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8000f42:	fab2 f282 	clz	r2, r2
 8000f46:	b2d2      	uxtb	r2, r2
 8000f48:	f042 0220 	orr.w	r2, r2, #32
 8000f4c:	b2d2      	uxtb	r2, r2
 8000f4e:	f002 021f 	and.w	r2, r2, #31
 8000f52:	2101      	movs	r1, #1
 8000f54:	fa01 f202 	lsl.w	r2, r1, r2
 8000f58:	4013      	ands	r3, r2
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d00a      	beq.n	8000f74 <HAL_RCC_OscConfig+0x410>
 8000f5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000f62:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	691b      	ldr	r3, [r3, #16]
 8000f6a:	2b01      	cmp	r3, #1
 8000f6c:	d002      	beq.n	8000f74 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	f000 be2e 	b.w	8001bd0 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f74:	4b75      	ldr	r3, [pc, #468]	@ (800114c <HAL_RCC_OscConfig+0x5e8>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000f7c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000f80:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	695b      	ldr	r3, [r3, #20]
 8000f88:	21f8      	movs	r1, #248	@ 0xf8
 8000f8a:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f8e:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8000f92:	fa91 f1a1 	rbit	r1, r1
 8000f96:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8000f9a:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8000f9e:	fab1 f181 	clz	r1, r1
 8000fa2:	b2c9      	uxtb	r1, r1
 8000fa4:	408b      	lsls	r3, r1
 8000fa6:	4969      	ldr	r1, [pc, #420]	@ (800114c <HAL_RCC_OscConfig+0x5e8>)
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fac:	e0fd      	b.n	80011aa <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000fae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000fb2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	691b      	ldr	r3, [r3, #16]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	f000 8088 	beq.w	80010d0 <HAL_RCC_OscConfig+0x56c>
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fc6:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8000fca:	fa93 f3a3 	rbit	r3, r3
 8000fce:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8000fd2:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000fd6:	fab3 f383 	clz	r3, r3
 8000fda:	b2db      	uxtb	r3, r3
 8000fdc:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8000fe0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8000fe4:	009b      	lsls	r3, r3, #2
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	2301      	movs	r3, #1
 8000fea:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fec:	f7ff fb3e 	bl	800066c <HAL_GetTick>
 8000ff0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ff4:	e00a      	b.n	800100c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ff6:	f7ff fb39 	bl	800066c <HAL_GetTick>
 8000ffa:	4602      	mov	r2, r0
 8000ffc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001000:	1ad3      	subs	r3, r2, r3
 8001002:	2b02      	cmp	r3, #2
 8001004:	d902      	bls.n	800100c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001006:	2303      	movs	r3, #3
 8001008:	f000 bde2 	b.w	8001bd0 <HAL_RCC_OscConfig+0x106c>
 800100c:	2302      	movs	r3, #2
 800100e:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001012:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8001016:	fa93 f3a3 	rbit	r3, r3
 800101a:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 800101e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001022:	fab3 f383 	clz	r3, r3
 8001026:	b2db      	uxtb	r3, r3
 8001028:	095b      	lsrs	r3, r3, #5
 800102a:	b2db      	uxtb	r3, r3
 800102c:	f043 0301 	orr.w	r3, r3, #1
 8001030:	b2db      	uxtb	r3, r3
 8001032:	2b01      	cmp	r3, #1
 8001034:	d102      	bne.n	800103c <HAL_RCC_OscConfig+0x4d8>
 8001036:	4b45      	ldr	r3, [pc, #276]	@ (800114c <HAL_RCC_OscConfig+0x5e8>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	e013      	b.n	8001064 <HAL_RCC_OscConfig+0x500>
 800103c:	2302      	movs	r3, #2
 800103e:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001042:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8001046:	fa93 f3a3 	rbit	r3, r3
 800104a:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 800104e:	2302      	movs	r3, #2
 8001050:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001054:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8001058:	fa93 f3a3 	rbit	r3, r3
 800105c:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8001060:	4b3a      	ldr	r3, [pc, #232]	@ (800114c <HAL_RCC_OscConfig+0x5e8>)
 8001062:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001064:	2202      	movs	r2, #2
 8001066:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 800106a:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800106e:	fa92 f2a2 	rbit	r2, r2
 8001072:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8001076:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 800107a:	fab2 f282 	clz	r2, r2
 800107e:	b2d2      	uxtb	r2, r2
 8001080:	f042 0220 	orr.w	r2, r2, #32
 8001084:	b2d2      	uxtb	r2, r2
 8001086:	f002 021f 	and.w	r2, r2, #31
 800108a:	2101      	movs	r1, #1
 800108c:	fa01 f202 	lsl.w	r2, r1, r2
 8001090:	4013      	ands	r3, r2
 8001092:	2b00      	cmp	r3, #0
 8001094:	d0af      	beq.n	8000ff6 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001096:	4b2d      	ldr	r3, [pc, #180]	@ (800114c <HAL_RCC_OscConfig+0x5e8>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800109e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80010a2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	695b      	ldr	r3, [r3, #20]
 80010aa:	21f8      	movs	r1, #248	@ 0xf8
 80010ac:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010b0:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80010b4:	fa91 f1a1 	rbit	r1, r1
 80010b8:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 80010bc:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 80010c0:	fab1 f181 	clz	r1, r1
 80010c4:	b2c9      	uxtb	r1, r1
 80010c6:	408b      	lsls	r3, r1
 80010c8:	4920      	ldr	r1, [pc, #128]	@ (800114c <HAL_RCC_OscConfig+0x5e8>)
 80010ca:	4313      	orrs	r3, r2
 80010cc:	600b      	str	r3, [r1, #0]
 80010ce:	e06c      	b.n	80011aa <HAL_RCC_OscConfig+0x646>
 80010d0:	2301      	movs	r3, #1
 80010d2:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010d6:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80010da:	fa93 f3a3 	rbit	r3, r3
 80010de:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 80010e2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010e6:	fab3 f383 	clz	r3, r3
 80010ea:	b2db      	uxtb	r3, r3
 80010ec:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80010f0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80010f4:	009b      	lsls	r3, r3, #2
 80010f6:	461a      	mov	r2, r3
 80010f8:	2300      	movs	r3, #0
 80010fa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010fc:	f7ff fab6 	bl	800066c <HAL_GetTick>
 8001100:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001104:	e00a      	b.n	800111c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001106:	f7ff fab1 	bl	800066c <HAL_GetTick>
 800110a:	4602      	mov	r2, r0
 800110c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001110:	1ad3      	subs	r3, r2, r3
 8001112:	2b02      	cmp	r3, #2
 8001114:	d902      	bls.n	800111c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001116:	2303      	movs	r3, #3
 8001118:	f000 bd5a 	b.w	8001bd0 <HAL_RCC_OscConfig+0x106c>
 800111c:	2302      	movs	r3, #2
 800111e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001122:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001126:	fa93 f3a3 	rbit	r3, r3
 800112a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 800112e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001132:	fab3 f383 	clz	r3, r3
 8001136:	b2db      	uxtb	r3, r3
 8001138:	095b      	lsrs	r3, r3, #5
 800113a:	b2db      	uxtb	r3, r3
 800113c:	f043 0301 	orr.w	r3, r3, #1
 8001140:	b2db      	uxtb	r3, r3
 8001142:	2b01      	cmp	r3, #1
 8001144:	d104      	bne.n	8001150 <HAL_RCC_OscConfig+0x5ec>
 8001146:	4b01      	ldr	r3, [pc, #4]	@ (800114c <HAL_RCC_OscConfig+0x5e8>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	e015      	b.n	8001178 <HAL_RCC_OscConfig+0x614>
 800114c:	40021000 	.word	0x40021000
 8001150:	2302      	movs	r3, #2
 8001152:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001156:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800115a:	fa93 f3a3 	rbit	r3, r3
 800115e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001162:	2302      	movs	r3, #2
 8001164:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001168:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800116c:	fa93 f3a3 	rbit	r3, r3
 8001170:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8001174:	4bc8      	ldr	r3, [pc, #800]	@ (8001498 <HAL_RCC_OscConfig+0x934>)
 8001176:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001178:	2202      	movs	r2, #2
 800117a:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 800117e:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001182:	fa92 f2a2 	rbit	r2, r2
 8001186:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 800118a:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 800118e:	fab2 f282 	clz	r2, r2
 8001192:	b2d2      	uxtb	r2, r2
 8001194:	f042 0220 	orr.w	r2, r2, #32
 8001198:	b2d2      	uxtb	r2, r2
 800119a:	f002 021f 	and.w	r2, r2, #31
 800119e:	2101      	movs	r1, #1
 80011a0:	fa01 f202 	lsl.w	r2, r1, r2
 80011a4:	4013      	ands	r3, r2
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d1ad      	bne.n	8001106 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80011ae:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f003 0308 	and.w	r3, r3, #8
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	f000 8110 	beq.w	80013e0 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80011c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80011c4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	699b      	ldr	r3, [r3, #24]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d079      	beq.n	80012c4 <HAL_RCC_OscConfig+0x760>
 80011d0:	2301      	movs	r3, #1
 80011d2:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011d6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80011da:	fa93 f3a3 	rbit	r3, r3
 80011de:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 80011e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011e6:	fab3 f383 	clz	r3, r3
 80011ea:	b2db      	uxtb	r3, r3
 80011ec:	461a      	mov	r2, r3
 80011ee:	4bab      	ldr	r3, [pc, #684]	@ (800149c <HAL_RCC_OscConfig+0x938>)
 80011f0:	4413      	add	r3, r2
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	461a      	mov	r2, r3
 80011f6:	2301      	movs	r3, #1
 80011f8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011fa:	f7ff fa37 	bl	800066c <HAL_GetTick>
 80011fe:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001202:	e00a      	b.n	800121a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001204:	f7ff fa32 	bl	800066c <HAL_GetTick>
 8001208:	4602      	mov	r2, r0
 800120a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800120e:	1ad3      	subs	r3, r2, r3
 8001210:	2b02      	cmp	r3, #2
 8001212:	d902      	bls.n	800121a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001214:	2303      	movs	r3, #3
 8001216:	f000 bcdb 	b.w	8001bd0 <HAL_RCC_OscConfig+0x106c>
 800121a:	2302      	movs	r3, #2
 800121c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001220:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001224:	fa93 f3a3 	rbit	r3, r3
 8001228:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800122c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001230:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001234:	2202      	movs	r2, #2
 8001236:	601a      	str	r2, [r3, #0]
 8001238:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800123c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	fa93 f2a3 	rbit	r2, r3
 8001246:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800124a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800124e:	601a      	str	r2, [r3, #0]
 8001250:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001254:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001258:	2202      	movs	r2, #2
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001260:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	fa93 f2a3 	rbit	r2, r3
 800126a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800126e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001272:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001274:	4b88      	ldr	r3, [pc, #544]	@ (8001498 <HAL_RCC_OscConfig+0x934>)
 8001276:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001278:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800127c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001280:	2102      	movs	r1, #2
 8001282:	6019      	str	r1, [r3, #0]
 8001284:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001288:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	fa93 f1a3 	rbit	r1, r3
 8001292:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001296:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800129a:	6019      	str	r1, [r3, #0]
  return result;
 800129c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80012a0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	fab3 f383 	clz	r3, r3
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	f003 031f 	and.w	r3, r3, #31
 80012b6:	2101      	movs	r1, #1
 80012b8:	fa01 f303 	lsl.w	r3, r1, r3
 80012bc:	4013      	ands	r3, r2
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d0a0      	beq.n	8001204 <HAL_RCC_OscConfig+0x6a0>
 80012c2:	e08d      	b.n	80013e0 <HAL_RCC_OscConfig+0x87c>
 80012c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80012c8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80012cc:	2201      	movs	r2, #1
 80012ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80012d4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	fa93 f2a3 	rbit	r2, r3
 80012de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80012e2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80012e6:	601a      	str	r2, [r3, #0]
  return result;
 80012e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80012ec:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80012f0:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012f2:	fab3 f383 	clz	r3, r3
 80012f6:	b2db      	uxtb	r3, r3
 80012f8:	461a      	mov	r2, r3
 80012fa:	4b68      	ldr	r3, [pc, #416]	@ (800149c <HAL_RCC_OscConfig+0x938>)
 80012fc:	4413      	add	r3, r2
 80012fe:	009b      	lsls	r3, r3, #2
 8001300:	461a      	mov	r2, r3
 8001302:	2300      	movs	r3, #0
 8001304:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001306:	f7ff f9b1 	bl	800066c <HAL_GetTick>
 800130a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800130e:	e00a      	b.n	8001326 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001310:	f7ff f9ac 	bl	800066c <HAL_GetTick>
 8001314:	4602      	mov	r2, r0
 8001316:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800131a:	1ad3      	subs	r3, r2, r3
 800131c:	2b02      	cmp	r3, #2
 800131e:	d902      	bls.n	8001326 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001320:	2303      	movs	r3, #3
 8001322:	f000 bc55 	b.w	8001bd0 <HAL_RCC_OscConfig+0x106c>
 8001326:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800132a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800132e:	2202      	movs	r2, #2
 8001330:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001332:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001336:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	fa93 f2a3 	rbit	r2, r3
 8001340:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001344:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001348:	601a      	str	r2, [r3, #0]
 800134a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800134e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001352:	2202      	movs	r2, #2
 8001354:	601a      	str	r2, [r3, #0]
 8001356:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800135a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	fa93 f2a3 	rbit	r2, r3
 8001364:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001368:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800136c:	601a      	str	r2, [r3, #0]
 800136e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001372:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001376:	2202      	movs	r2, #2
 8001378:	601a      	str	r2, [r3, #0]
 800137a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800137e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	fa93 f2a3 	rbit	r2, r3
 8001388:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800138c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001390:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001392:	4b41      	ldr	r3, [pc, #260]	@ (8001498 <HAL_RCC_OscConfig+0x934>)
 8001394:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001396:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800139a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800139e:	2102      	movs	r1, #2
 80013a0:	6019      	str	r1, [r3, #0]
 80013a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013a6:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	fa93 f1a3 	rbit	r1, r3
 80013b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013b4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80013b8:	6019      	str	r1, [r3, #0]
  return result;
 80013ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013be:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	fab3 f383 	clz	r3, r3
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80013ce:	b2db      	uxtb	r3, r3
 80013d0:	f003 031f 	and.w	r3, r3, #31
 80013d4:	2101      	movs	r1, #1
 80013d6:	fa01 f303 	lsl.w	r3, r1, r3
 80013da:	4013      	ands	r3, r2
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d197      	bne.n	8001310 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013e4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f003 0304 	and.w	r3, r3, #4
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	f000 81a1 	beq.w	8001738 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013f6:	2300      	movs	r3, #0
 80013f8:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013fc:	4b26      	ldr	r3, [pc, #152]	@ (8001498 <HAL_RCC_OscConfig+0x934>)
 80013fe:	69db      	ldr	r3, [r3, #28]
 8001400:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001404:	2b00      	cmp	r3, #0
 8001406:	d116      	bne.n	8001436 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001408:	4b23      	ldr	r3, [pc, #140]	@ (8001498 <HAL_RCC_OscConfig+0x934>)
 800140a:	69db      	ldr	r3, [r3, #28]
 800140c:	4a22      	ldr	r2, [pc, #136]	@ (8001498 <HAL_RCC_OscConfig+0x934>)
 800140e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001412:	61d3      	str	r3, [r2, #28]
 8001414:	4b20      	ldr	r3, [pc, #128]	@ (8001498 <HAL_RCC_OscConfig+0x934>)
 8001416:	69db      	ldr	r3, [r3, #28]
 8001418:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 800141c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001420:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8001424:	601a      	str	r2, [r3, #0]
 8001426:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800142a:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 800142e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001430:	2301      	movs	r3, #1
 8001432:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001436:	4b1a      	ldr	r3, [pc, #104]	@ (80014a0 <HAL_RCC_OscConfig+0x93c>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800143e:	2b00      	cmp	r3, #0
 8001440:	d11a      	bne.n	8001478 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001442:	4b17      	ldr	r3, [pc, #92]	@ (80014a0 <HAL_RCC_OscConfig+0x93c>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4a16      	ldr	r2, [pc, #88]	@ (80014a0 <HAL_RCC_OscConfig+0x93c>)
 8001448:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800144c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800144e:	f7ff f90d 	bl	800066c <HAL_GetTick>
 8001452:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001456:	e009      	b.n	800146c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001458:	f7ff f908 	bl	800066c <HAL_GetTick>
 800145c:	4602      	mov	r2, r0
 800145e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001462:	1ad3      	subs	r3, r2, r3
 8001464:	2b64      	cmp	r3, #100	@ 0x64
 8001466:	d901      	bls.n	800146c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001468:	2303      	movs	r3, #3
 800146a:	e3b1      	b.n	8001bd0 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800146c:	4b0c      	ldr	r3, [pc, #48]	@ (80014a0 <HAL_RCC_OscConfig+0x93c>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001474:	2b00      	cmp	r3, #0
 8001476:	d0ef      	beq.n	8001458 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001478:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800147c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	68db      	ldr	r3, [r3, #12]
 8001484:	2b01      	cmp	r3, #1
 8001486:	d10d      	bne.n	80014a4 <HAL_RCC_OscConfig+0x940>
 8001488:	4b03      	ldr	r3, [pc, #12]	@ (8001498 <HAL_RCC_OscConfig+0x934>)
 800148a:	6a1b      	ldr	r3, [r3, #32]
 800148c:	4a02      	ldr	r2, [pc, #8]	@ (8001498 <HAL_RCC_OscConfig+0x934>)
 800148e:	f043 0301 	orr.w	r3, r3, #1
 8001492:	6213      	str	r3, [r2, #32]
 8001494:	e03c      	b.n	8001510 <HAL_RCC_OscConfig+0x9ac>
 8001496:	bf00      	nop
 8001498:	40021000 	.word	0x40021000
 800149c:	10908120 	.word	0x10908120
 80014a0:	40007000 	.word	0x40007000
 80014a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014a8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	68db      	ldr	r3, [r3, #12]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d10c      	bne.n	80014ce <HAL_RCC_OscConfig+0x96a>
 80014b4:	4bc1      	ldr	r3, [pc, #772]	@ (80017bc <HAL_RCC_OscConfig+0xc58>)
 80014b6:	6a1b      	ldr	r3, [r3, #32]
 80014b8:	4ac0      	ldr	r2, [pc, #768]	@ (80017bc <HAL_RCC_OscConfig+0xc58>)
 80014ba:	f023 0301 	bic.w	r3, r3, #1
 80014be:	6213      	str	r3, [r2, #32]
 80014c0:	4bbe      	ldr	r3, [pc, #760]	@ (80017bc <HAL_RCC_OscConfig+0xc58>)
 80014c2:	6a1b      	ldr	r3, [r3, #32]
 80014c4:	4abd      	ldr	r2, [pc, #756]	@ (80017bc <HAL_RCC_OscConfig+0xc58>)
 80014c6:	f023 0304 	bic.w	r3, r3, #4
 80014ca:	6213      	str	r3, [r2, #32]
 80014cc:	e020      	b.n	8001510 <HAL_RCC_OscConfig+0x9ac>
 80014ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014d2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	68db      	ldr	r3, [r3, #12]
 80014da:	2b05      	cmp	r3, #5
 80014dc:	d10c      	bne.n	80014f8 <HAL_RCC_OscConfig+0x994>
 80014de:	4bb7      	ldr	r3, [pc, #732]	@ (80017bc <HAL_RCC_OscConfig+0xc58>)
 80014e0:	6a1b      	ldr	r3, [r3, #32]
 80014e2:	4ab6      	ldr	r2, [pc, #728]	@ (80017bc <HAL_RCC_OscConfig+0xc58>)
 80014e4:	f043 0304 	orr.w	r3, r3, #4
 80014e8:	6213      	str	r3, [r2, #32]
 80014ea:	4bb4      	ldr	r3, [pc, #720]	@ (80017bc <HAL_RCC_OscConfig+0xc58>)
 80014ec:	6a1b      	ldr	r3, [r3, #32]
 80014ee:	4ab3      	ldr	r2, [pc, #716]	@ (80017bc <HAL_RCC_OscConfig+0xc58>)
 80014f0:	f043 0301 	orr.w	r3, r3, #1
 80014f4:	6213      	str	r3, [r2, #32]
 80014f6:	e00b      	b.n	8001510 <HAL_RCC_OscConfig+0x9ac>
 80014f8:	4bb0      	ldr	r3, [pc, #704]	@ (80017bc <HAL_RCC_OscConfig+0xc58>)
 80014fa:	6a1b      	ldr	r3, [r3, #32]
 80014fc:	4aaf      	ldr	r2, [pc, #700]	@ (80017bc <HAL_RCC_OscConfig+0xc58>)
 80014fe:	f023 0301 	bic.w	r3, r3, #1
 8001502:	6213      	str	r3, [r2, #32]
 8001504:	4bad      	ldr	r3, [pc, #692]	@ (80017bc <HAL_RCC_OscConfig+0xc58>)
 8001506:	6a1b      	ldr	r3, [r3, #32]
 8001508:	4aac      	ldr	r2, [pc, #688]	@ (80017bc <HAL_RCC_OscConfig+0xc58>)
 800150a:	f023 0304 	bic.w	r3, r3, #4
 800150e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001510:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001514:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	68db      	ldr	r3, [r3, #12]
 800151c:	2b00      	cmp	r3, #0
 800151e:	f000 8081 	beq.w	8001624 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001522:	f7ff f8a3 	bl	800066c <HAL_GetTick>
 8001526:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800152a:	e00b      	b.n	8001544 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800152c:	f7ff f89e 	bl	800066c <HAL_GetTick>
 8001530:	4602      	mov	r2, r0
 8001532:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001536:	1ad3      	subs	r3, r2, r3
 8001538:	f241 3288 	movw	r2, #5000	@ 0x1388
 800153c:	4293      	cmp	r3, r2
 800153e:	d901      	bls.n	8001544 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8001540:	2303      	movs	r3, #3
 8001542:	e345      	b.n	8001bd0 <HAL_RCC_OscConfig+0x106c>
 8001544:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001548:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800154c:	2202      	movs	r2, #2
 800154e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001550:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001554:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	fa93 f2a3 	rbit	r2, r3
 800155e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001562:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001566:	601a      	str	r2, [r3, #0]
 8001568:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800156c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001570:	2202      	movs	r2, #2
 8001572:	601a      	str	r2, [r3, #0]
 8001574:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001578:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	fa93 f2a3 	rbit	r2, r3
 8001582:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001586:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800158a:	601a      	str	r2, [r3, #0]
  return result;
 800158c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001590:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001594:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001596:	fab3 f383 	clz	r3, r3
 800159a:	b2db      	uxtb	r3, r3
 800159c:	095b      	lsrs	r3, r3, #5
 800159e:	b2db      	uxtb	r3, r3
 80015a0:	f043 0302 	orr.w	r3, r3, #2
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	2b02      	cmp	r3, #2
 80015a8:	d102      	bne.n	80015b0 <HAL_RCC_OscConfig+0xa4c>
 80015aa:	4b84      	ldr	r3, [pc, #528]	@ (80017bc <HAL_RCC_OscConfig+0xc58>)
 80015ac:	6a1b      	ldr	r3, [r3, #32]
 80015ae:	e013      	b.n	80015d8 <HAL_RCC_OscConfig+0xa74>
 80015b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015b4:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80015b8:	2202      	movs	r2, #2
 80015ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015c0:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	fa93 f2a3 	rbit	r2, r3
 80015ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015ce:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80015d2:	601a      	str	r2, [r3, #0]
 80015d4:	4b79      	ldr	r3, [pc, #484]	@ (80017bc <HAL_RCC_OscConfig+0xc58>)
 80015d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015d8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80015dc:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80015e0:	2102      	movs	r1, #2
 80015e2:	6011      	str	r1, [r2, #0]
 80015e4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80015e8:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80015ec:	6812      	ldr	r2, [r2, #0]
 80015ee:	fa92 f1a2 	rbit	r1, r2
 80015f2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80015f6:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80015fa:	6011      	str	r1, [r2, #0]
  return result;
 80015fc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001600:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001604:	6812      	ldr	r2, [r2, #0]
 8001606:	fab2 f282 	clz	r2, r2
 800160a:	b2d2      	uxtb	r2, r2
 800160c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001610:	b2d2      	uxtb	r2, r2
 8001612:	f002 021f 	and.w	r2, r2, #31
 8001616:	2101      	movs	r1, #1
 8001618:	fa01 f202 	lsl.w	r2, r1, r2
 800161c:	4013      	ands	r3, r2
 800161e:	2b00      	cmp	r3, #0
 8001620:	d084      	beq.n	800152c <HAL_RCC_OscConfig+0x9c8>
 8001622:	e07f      	b.n	8001724 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001624:	f7ff f822 	bl	800066c <HAL_GetTick>
 8001628:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800162c:	e00b      	b.n	8001646 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800162e:	f7ff f81d 	bl	800066c <HAL_GetTick>
 8001632:	4602      	mov	r2, r0
 8001634:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800163e:	4293      	cmp	r3, r2
 8001640:	d901      	bls.n	8001646 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8001642:	2303      	movs	r3, #3
 8001644:	e2c4      	b.n	8001bd0 <HAL_RCC_OscConfig+0x106c>
 8001646:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800164a:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800164e:	2202      	movs	r2, #2
 8001650:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001652:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001656:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	fa93 f2a3 	rbit	r2, r3
 8001660:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001664:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001668:	601a      	str	r2, [r3, #0]
 800166a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800166e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001672:	2202      	movs	r2, #2
 8001674:	601a      	str	r2, [r3, #0]
 8001676:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800167a:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	fa93 f2a3 	rbit	r2, r3
 8001684:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001688:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800168c:	601a      	str	r2, [r3, #0]
  return result;
 800168e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001692:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001696:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001698:	fab3 f383 	clz	r3, r3
 800169c:	b2db      	uxtb	r3, r3
 800169e:	095b      	lsrs	r3, r3, #5
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	f043 0302 	orr.w	r3, r3, #2
 80016a6:	b2db      	uxtb	r3, r3
 80016a8:	2b02      	cmp	r3, #2
 80016aa:	d102      	bne.n	80016b2 <HAL_RCC_OscConfig+0xb4e>
 80016ac:	4b43      	ldr	r3, [pc, #268]	@ (80017bc <HAL_RCC_OscConfig+0xc58>)
 80016ae:	6a1b      	ldr	r3, [r3, #32]
 80016b0:	e013      	b.n	80016da <HAL_RCC_OscConfig+0xb76>
 80016b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016b6:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80016ba:	2202      	movs	r2, #2
 80016bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016c2:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	fa93 f2a3 	rbit	r2, r3
 80016cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016d0:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80016d4:	601a      	str	r2, [r3, #0]
 80016d6:	4b39      	ldr	r3, [pc, #228]	@ (80017bc <HAL_RCC_OscConfig+0xc58>)
 80016d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016da:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80016de:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80016e2:	2102      	movs	r1, #2
 80016e4:	6011      	str	r1, [r2, #0]
 80016e6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80016ea:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80016ee:	6812      	ldr	r2, [r2, #0]
 80016f0:	fa92 f1a2 	rbit	r1, r2
 80016f4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80016f8:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80016fc:	6011      	str	r1, [r2, #0]
  return result;
 80016fe:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001702:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001706:	6812      	ldr	r2, [r2, #0]
 8001708:	fab2 f282 	clz	r2, r2
 800170c:	b2d2      	uxtb	r2, r2
 800170e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001712:	b2d2      	uxtb	r2, r2
 8001714:	f002 021f 	and.w	r2, r2, #31
 8001718:	2101      	movs	r1, #1
 800171a:	fa01 f202 	lsl.w	r2, r1, r2
 800171e:	4013      	ands	r3, r2
 8001720:	2b00      	cmp	r3, #0
 8001722:	d184      	bne.n	800162e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001724:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8001728:	2b01      	cmp	r3, #1
 800172a:	d105      	bne.n	8001738 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800172c:	4b23      	ldr	r3, [pc, #140]	@ (80017bc <HAL_RCC_OscConfig+0xc58>)
 800172e:	69db      	ldr	r3, [r3, #28]
 8001730:	4a22      	ldr	r2, [pc, #136]	@ (80017bc <HAL_RCC_OscConfig+0xc58>)
 8001732:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001736:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001738:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800173c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	69db      	ldr	r3, [r3, #28]
 8001744:	2b00      	cmp	r3, #0
 8001746:	f000 8242 	beq.w	8001bce <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800174a:	4b1c      	ldr	r3, [pc, #112]	@ (80017bc <HAL_RCC_OscConfig+0xc58>)
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	f003 030c 	and.w	r3, r3, #12
 8001752:	2b08      	cmp	r3, #8
 8001754:	f000 8213 	beq.w	8001b7e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001758:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800175c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	69db      	ldr	r3, [r3, #28]
 8001764:	2b02      	cmp	r3, #2
 8001766:	f040 8162 	bne.w	8001a2e <HAL_RCC_OscConfig+0xeca>
 800176a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800176e:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8001772:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001776:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001778:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800177c:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	fa93 f2a3 	rbit	r2, r3
 8001786:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800178a:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800178e:	601a      	str	r2, [r3, #0]
  return result;
 8001790:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001794:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001798:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800179a:	fab3 f383 	clz	r3, r3
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80017a4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	461a      	mov	r2, r3
 80017ac:	2300      	movs	r3, #0
 80017ae:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017b0:	f7fe ff5c 	bl	800066c <HAL_GetTick>
 80017b4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017b8:	e00c      	b.n	80017d4 <HAL_RCC_OscConfig+0xc70>
 80017ba:	bf00      	nop
 80017bc:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017c0:	f7fe ff54 	bl	800066c <HAL_GetTick>
 80017c4:	4602      	mov	r2, r0
 80017c6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80017ca:	1ad3      	subs	r3, r2, r3
 80017cc:	2b02      	cmp	r3, #2
 80017ce:	d901      	bls.n	80017d4 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80017d0:	2303      	movs	r3, #3
 80017d2:	e1fd      	b.n	8001bd0 <HAL_RCC_OscConfig+0x106c>
 80017d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017d8:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80017dc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80017e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017e6:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	fa93 f2a3 	rbit	r2, r3
 80017f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017f4:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80017f8:	601a      	str	r2, [r3, #0]
  return result;
 80017fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017fe:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001802:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001804:	fab3 f383 	clz	r3, r3
 8001808:	b2db      	uxtb	r3, r3
 800180a:	095b      	lsrs	r3, r3, #5
 800180c:	b2db      	uxtb	r3, r3
 800180e:	f043 0301 	orr.w	r3, r3, #1
 8001812:	b2db      	uxtb	r3, r3
 8001814:	2b01      	cmp	r3, #1
 8001816:	d102      	bne.n	800181e <HAL_RCC_OscConfig+0xcba>
 8001818:	4bb0      	ldr	r3, [pc, #704]	@ (8001adc <HAL_RCC_OscConfig+0xf78>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	e027      	b.n	800186e <HAL_RCC_OscConfig+0xd0a>
 800181e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001822:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001826:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800182a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800182c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001830:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	fa93 f2a3 	rbit	r2, r3
 800183a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800183e:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8001842:	601a      	str	r2, [r3, #0]
 8001844:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001848:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800184c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001850:	601a      	str	r2, [r3, #0]
 8001852:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001856:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	fa93 f2a3 	rbit	r2, r3
 8001860:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001864:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001868:	601a      	str	r2, [r3, #0]
 800186a:	4b9c      	ldr	r3, [pc, #624]	@ (8001adc <HAL_RCC_OscConfig+0xf78>)
 800186c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800186e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001872:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8001876:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800187a:	6011      	str	r1, [r2, #0]
 800187c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001880:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8001884:	6812      	ldr	r2, [r2, #0]
 8001886:	fa92 f1a2 	rbit	r1, r2
 800188a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800188e:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001892:	6011      	str	r1, [r2, #0]
  return result;
 8001894:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001898:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800189c:	6812      	ldr	r2, [r2, #0]
 800189e:	fab2 f282 	clz	r2, r2
 80018a2:	b2d2      	uxtb	r2, r2
 80018a4:	f042 0220 	orr.w	r2, r2, #32
 80018a8:	b2d2      	uxtb	r2, r2
 80018aa:	f002 021f 	and.w	r2, r2, #31
 80018ae:	2101      	movs	r1, #1
 80018b0:	fa01 f202 	lsl.w	r2, r1, r2
 80018b4:	4013      	ands	r3, r2
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d182      	bne.n	80017c0 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018ba:	4b88      	ldr	r3, [pc, #544]	@ (8001adc <HAL_RCC_OscConfig+0xf78>)
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80018c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018c6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80018ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018d2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	6a1b      	ldr	r3, [r3, #32]
 80018da:	430b      	orrs	r3, r1
 80018dc:	497f      	ldr	r1, [pc, #508]	@ (8001adc <HAL_RCC_OscConfig+0xf78>)
 80018de:	4313      	orrs	r3, r2
 80018e0:	604b      	str	r3, [r1, #4]
 80018e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018e6:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80018ea:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80018ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018f4:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	fa93 f2a3 	rbit	r2, r3
 80018fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001902:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001906:	601a      	str	r2, [r3, #0]
  return result;
 8001908:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800190c:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001910:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001912:	fab3 f383 	clz	r3, r3
 8001916:	b2db      	uxtb	r3, r3
 8001918:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800191c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	461a      	mov	r2, r3
 8001924:	2301      	movs	r3, #1
 8001926:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001928:	f7fe fea0 	bl	800066c <HAL_GetTick>
 800192c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001930:	e009      	b.n	8001946 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001932:	f7fe fe9b 	bl	800066c <HAL_GetTick>
 8001936:	4602      	mov	r2, r0
 8001938:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	2b02      	cmp	r3, #2
 8001940:	d901      	bls.n	8001946 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001942:	2303      	movs	r3, #3
 8001944:	e144      	b.n	8001bd0 <HAL_RCC_OscConfig+0x106c>
 8001946:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800194a:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800194e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001952:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001954:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001958:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	fa93 f2a3 	rbit	r2, r3
 8001962:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001966:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800196a:	601a      	str	r2, [r3, #0]
  return result;
 800196c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001970:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001974:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001976:	fab3 f383 	clz	r3, r3
 800197a:	b2db      	uxtb	r3, r3
 800197c:	095b      	lsrs	r3, r3, #5
 800197e:	b2db      	uxtb	r3, r3
 8001980:	f043 0301 	orr.w	r3, r3, #1
 8001984:	b2db      	uxtb	r3, r3
 8001986:	2b01      	cmp	r3, #1
 8001988:	d102      	bne.n	8001990 <HAL_RCC_OscConfig+0xe2c>
 800198a:	4b54      	ldr	r3, [pc, #336]	@ (8001adc <HAL_RCC_OscConfig+0xf78>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	e027      	b.n	80019e0 <HAL_RCC_OscConfig+0xe7c>
 8001990:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001994:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001998:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800199c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800199e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019a2:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	fa93 f2a3 	rbit	r2, r3
 80019ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019b0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80019b4:	601a      	str	r2, [r3, #0]
 80019b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019ba:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80019be:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80019c2:	601a      	str	r2, [r3, #0]
 80019c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019c8:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	fa93 f2a3 	rbit	r2, r3
 80019d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019d6:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80019da:	601a      	str	r2, [r3, #0]
 80019dc:	4b3f      	ldr	r3, [pc, #252]	@ (8001adc <HAL_RCC_OscConfig+0xf78>)
 80019de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019e0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80019e4:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80019e8:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80019ec:	6011      	str	r1, [r2, #0]
 80019ee:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80019f2:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80019f6:	6812      	ldr	r2, [r2, #0]
 80019f8:	fa92 f1a2 	rbit	r1, r2
 80019fc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001a00:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001a04:	6011      	str	r1, [r2, #0]
  return result;
 8001a06:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001a0a:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001a0e:	6812      	ldr	r2, [r2, #0]
 8001a10:	fab2 f282 	clz	r2, r2
 8001a14:	b2d2      	uxtb	r2, r2
 8001a16:	f042 0220 	orr.w	r2, r2, #32
 8001a1a:	b2d2      	uxtb	r2, r2
 8001a1c:	f002 021f 	and.w	r2, r2, #31
 8001a20:	2101      	movs	r1, #1
 8001a22:	fa01 f202 	lsl.w	r2, r1, r2
 8001a26:	4013      	ands	r3, r2
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d082      	beq.n	8001932 <HAL_RCC_OscConfig+0xdce>
 8001a2c:	e0cf      	b.n	8001bce <HAL_RCC_OscConfig+0x106a>
 8001a2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a32:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8001a36:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001a3a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a40:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	fa93 f2a3 	rbit	r2, r3
 8001a4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a4e:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001a52:	601a      	str	r2, [r3, #0]
  return result;
 8001a54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a58:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001a5c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a5e:	fab3 f383 	clz	r3, r3
 8001a62:	b2db      	uxtb	r3, r3
 8001a64:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001a68:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001a6c:	009b      	lsls	r3, r3, #2
 8001a6e:	461a      	mov	r2, r3
 8001a70:	2300      	movs	r3, #0
 8001a72:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a74:	f7fe fdfa 	bl	800066c <HAL_GetTick>
 8001a78:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a7c:	e009      	b.n	8001a92 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a7e:	f7fe fdf5 	bl	800066c <HAL_GetTick>
 8001a82:	4602      	mov	r2, r0
 8001a84:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	2b02      	cmp	r3, #2
 8001a8c:	d901      	bls.n	8001a92 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	e09e      	b.n	8001bd0 <HAL_RCC_OscConfig+0x106c>
 8001a92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a96:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001a9a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001a9e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001aa4:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	fa93 f2a3 	rbit	r2, r3
 8001aae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ab2:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001ab6:	601a      	str	r2, [r3, #0]
  return result;
 8001ab8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001abc:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001ac0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ac2:	fab3 f383 	clz	r3, r3
 8001ac6:	b2db      	uxtb	r3, r3
 8001ac8:	095b      	lsrs	r3, r3, #5
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	f043 0301 	orr.w	r3, r3, #1
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d104      	bne.n	8001ae0 <HAL_RCC_OscConfig+0xf7c>
 8001ad6:	4b01      	ldr	r3, [pc, #4]	@ (8001adc <HAL_RCC_OscConfig+0xf78>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	e029      	b.n	8001b30 <HAL_RCC_OscConfig+0xfcc>
 8001adc:	40021000 	.word	0x40021000
 8001ae0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ae4:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001ae8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001aec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001af2:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	fa93 f2a3 	rbit	r2, r3
 8001afc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b00:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8001b04:	601a      	str	r2, [r3, #0]
 8001b06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b0a:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8001b0e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001b12:	601a      	str	r2, [r3, #0]
 8001b14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b18:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	fa93 f2a3 	rbit	r2, r3
 8001b22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b26:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8001b2a:	601a      	str	r2, [r3, #0]
 8001b2c:	4b2b      	ldr	r3, [pc, #172]	@ (8001bdc <HAL_RCC_OscConfig+0x1078>)
 8001b2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b30:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001b34:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8001b38:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001b3c:	6011      	str	r1, [r2, #0]
 8001b3e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001b42:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8001b46:	6812      	ldr	r2, [r2, #0]
 8001b48:	fa92 f1a2 	rbit	r1, r2
 8001b4c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001b50:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001b54:	6011      	str	r1, [r2, #0]
  return result;
 8001b56:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001b5a:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001b5e:	6812      	ldr	r2, [r2, #0]
 8001b60:	fab2 f282 	clz	r2, r2
 8001b64:	b2d2      	uxtb	r2, r2
 8001b66:	f042 0220 	orr.w	r2, r2, #32
 8001b6a:	b2d2      	uxtb	r2, r2
 8001b6c:	f002 021f 	and.w	r2, r2, #31
 8001b70:	2101      	movs	r1, #1
 8001b72:	fa01 f202 	lsl.w	r2, r1, r2
 8001b76:	4013      	ands	r3, r2
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d180      	bne.n	8001a7e <HAL_RCC_OscConfig+0xf1a>
 8001b7c:	e027      	b.n	8001bce <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b7e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b82:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	69db      	ldr	r3, [r3, #28]
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d101      	bne.n	8001b92 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e01e      	b.n	8001bd0 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b92:	4b12      	ldr	r3, [pc, #72]	@ (8001bdc <HAL_RCC_OscConfig+0x1078>)
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001b9a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8001b9e:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001ba2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ba6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	6a1b      	ldr	r3, [r3, #32]
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	d10b      	bne.n	8001bca <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001bb2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8001bb6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001bba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bbe:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	d001      	beq.n	8001bce <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e000      	b.n	8001bd0 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8001bce:	2300      	movs	r3, #0
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	40021000 	.word	0x40021000

08001be0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b09e      	sub	sp, #120	@ 0x78
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001bea:	2300      	movs	r3, #0
 8001bec:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d101      	bne.n	8001bf8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e162      	b.n	8001ebe <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bf8:	4b90      	ldr	r3, [pc, #576]	@ (8001e3c <HAL_RCC_ClockConfig+0x25c>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 0307 	and.w	r3, r3, #7
 8001c00:	683a      	ldr	r2, [r7, #0]
 8001c02:	429a      	cmp	r2, r3
 8001c04:	d910      	bls.n	8001c28 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c06:	4b8d      	ldr	r3, [pc, #564]	@ (8001e3c <HAL_RCC_ClockConfig+0x25c>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f023 0207 	bic.w	r2, r3, #7
 8001c0e:	498b      	ldr	r1, [pc, #556]	@ (8001e3c <HAL_RCC_ClockConfig+0x25c>)
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	4313      	orrs	r3, r2
 8001c14:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c16:	4b89      	ldr	r3, [pc, #548]	@ (8001e3c <HAL_RCC_ClockConfig+0x25c>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 0307 	and.w	r3, r3, #7
 8001c1e:	683a      	ldr	r2, [r7, #0]
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d001      	beq.n	8001c28 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	e14a      	b.n	8001ebe <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f003 0302 	and.w	r3, r3, #2
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d008      	beq.n	8001c46 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c34:	4b82      	ldr	r3, [pc, #520]	@ (8001e40 <HAL_RCC_ClockConfig+0x260>)
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	497f      	ldr	r1, [pc, #508]	@ (8001e40 <HAL_RCC_ClockConfig+0x260>)
 8001c42:	4313      	orrs	r3, r2
 8001c44:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 0301 	and.w	r3, r3, #1
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	f000 80dc 	beq.w	8001e0c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d13c      	bne.n	8001cd6 <HAL_RCC_ClockConfig+0xf6>
 8001c5c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001c60:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c62:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001c64:	fa93 f3a3 	rbit	r3, r3
 8001c68:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8001c6a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c6c:	fab3 f383 	clz	r3, r3
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	095b      	lsrs	r3, r3, #5
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	f043 0301 	orr.w	r3, r3, #1
 8001c7a:	b2db      	uxtb	r3, r3
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d102      	bne.n	8001c86 <HAL_RCC_ClockConfig+0xa6>
 8001c80:	4b6f      	ldr	r3, [pc, #444]	@ (8001e40 <HAL_RCC_ClockConfig+0x260>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	e00f      	b.n	8001ca6 <HAL_RCC_ClockConfig+0xc6>
 8001c86:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001c8a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c8c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001c8e:	fa93 f3a3 	rbit	r3, r3
 8001c92:	667b      	str	r3, [r7, #100]	@ 0x64
 8001c94:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001c98:	663b      	str	r3, [r7, #96]	@ 0x60
 8001c9a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001c9c:	fa93 f3a3 	rbit	r3, r3
 8001ca0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001ca2:	4b67      	ldr	r3, [pc, #412]	@ (8001e40 <HAL_RCC_ClockConfig+0x260>)
 8001ca4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ca6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001caa:	65ba      	str	r2, [r7, #88]	@ 0x58
 8001cac:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001cae:	fa92 f2a2 	rbit	r2, r2
 8001cb2:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8001cb4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001cb6:	fab2 f282 	clz	r2, r2
 8001cba:	b2d2      	uxtb	r2, r2
 8001cbc:	f042 0220 	orr.w	r2, r2, #32
 8001cc0:	b2d2      	uxtb	r2, r2
 8001cc2:	f002 021f 	and.w	r2, r2, #31
 8001cc6:	2101      	movs	r1, #1
 8001cc8:	fa01 f202 	lsl.w	r2, r1, r2
 8001ccc:	4013      	ands	r3, r2
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d17b      	bne.n	8001dca <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e0f3      	b.n	8001ebe <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	2b02      	cmp	r3, #2
 8001cdc:	d13c      	bne.n	8001d58 <HAL_RCC_ClockConfig+0x178>
 8001cde:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001ce2:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ce4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001ce6:	fa93 f3a3 	rbit	r3, r3
 8001cea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8001cec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cee:	fab3 f383 	clz	r3, r3
 8001cf2:	b2db      	uxtb	r3, r3
 8001cf4:	095b      	lsrs	r3, r3, #5
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	f043 0301 	orr.w	r3, r3, #1
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d102      	bne.n	8001d08 <HAL_RCC_ClockConfig+0x128>
 8001d02:	4b4f      	ldr	r3, [pc, #316]	@ (8001e40 <HAL_RCC_ClockConfig+0x260>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	e00f      	b.n	8001d28 <HAL_RCC_ClockConfig+0x148>
 8001d08:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001d0c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d0e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001d10:	fa93 f3a3 	rbit	r3, r3
 8001d14:	647b      	str	r3, [r7, #68]	@ 0x44
 8001d16:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001d1a:	643b      	str	r3, [r7, #64]	@ 0x40
 8001d1c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001d1e:	fa93 f3a3 	rbit	r3, r3
 8001d22:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001d24:	4b46      	ldr	r3, [pc, #280]	@ (8001e40 <HAL_RCC_ClockConfig+0x260>)
 8001d26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d28:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001d2c:	63ba      	str	r2, [r7, #56]	@ 0x38
 8001d2e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001d30:	fa92 f2a2 	rbit	r2, r2
 8001d34:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8001d36:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001d38:	fab2 f282 	clz	r2, r2
 8001d3c:	b2d2      	uxtb	r2, r2
 8001d3e:	f042 0220 	orr.w	r2, r2, #32
 8001d42:	b2d2      	uxtb	r2, r2
 8001d44:	f002 021f 	and.w	r2, r2, #31
 8001d48:	2101      	movs	r1, #1
 8001d4a:	fa01 f202 	lsl.w	r2, r1, r2
 8001d4e:	4013      	ands	r3, r2
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d13a      	bne.n	8001dca <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	e0b2      	b.n	8001ebe <HAL_RCC_ClockConfig+0x2de>
 8001d58:	2302      	movs	r3, #2
 8001d5a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d5e:	fa93 f3a3 	rbit	r3, r3
 8001d62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8001d64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d66:	fab3 f383 	clz	r3, r3
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	095b      	lsrs	r3, r3, #5
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	f043 0301 	orr.w	r3, r3, #1
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d102      	bne.n	8001d80 <HAL_RCC_ClockConfig+0x1a0>
 8001d7a:	4b31      	ldr	r3, [pc, #196]	@ (8001e40 <HAL_RCC_ClockConfig+0x260>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	e00d      	b.n	8001d9c <HAL_RCC_ClockConfig+0x1bc>
 8001d80:	2302      	movs	r3, #2
 8001d82:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d86:	fa93 f3a3 	rbit	r3, r3
 8001d8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d8c:	2302      	movs	r3, #2
 8001d8e:	623b      	str	r3, [r7, #32]
 8001d90:	6a3b      	ldr	r3, [r7, #32]
 8001d92:	fa93 f3a3 	rbit	r3, r3
 8001d96:	61fb      	str	r3, [r7, #28]
 8001d98:	4b29      	ldr	r3, [pc, #164]	@ (8001e40 <HAL_RCC_ClockConfig+0x260>)
 8001d9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d9c:	2202      	movs	r2, #2
 8001d9e:	61ba      	str	r2, [r7, #24]
 8001da0:	69ba      	ldr	r2, [r7, #24]
 8001da2:	fa92 f2a2 	rbit	r2, r2
 8001da6:	617a      	str	r2, [r7, #20]
  return result;
 8001da8:	697a      	ldr	r2, [r7, #20]
 8001daa:	fab2 f282 	clz	r2, r2
 8001dae:	b2d2      	uxtb	r2, r2
 8001db0:	f042 0220 	orr.w	r2, r2, #32
 8001db4:	b2d2      	uxtb	r2, r2
 8001db6:	f002 021f 	and.w	r2, r2, #31
 8001dba:	2101      	movs	r1, #1
 8001dbc:	fa01 f202 	lsl.w	r2, r1, r2
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d101      	bne.n	8001dca <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e079      	b.n	8001ebe <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001dca:	4b1d      	ldr	r3, [pc, #116]	@ (8001e40 <HAL_RCC_ClockConfig+0x260>)
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	f023 0203 	bic.w	r2, r3, #3
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	491a      	ldr	r1, [pc, #104]	@ (8001e40 <HAL_RCC_ClockConfig+0x260>)
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ddc:	f7fe fc46 	bl	800066c <HAL_GetTick>
 8001de0:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001de2:	e00a      	b.n	8001dfa <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001de4:	f7fe fc42 	bl	800066c <HAL_GetTick>
 8001de8:	4602      	mov	r2, r0
 8001dea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d901      	bls.n	8001dfa <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001df6:	2303      	movs	r3, #3
 8001df8:	e061      	b.n	8001ebe <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dfa:	4b11      	ldr	r3, [pc, #68]	@ (8001e40 <HAL_RCC_ClockConfig+0x260>)
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	f003 020c 	and.w	r2, r3, #12
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d1eb      	bne.n	8001de4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e0c:	4b0b      	ldr	r3, [pc, #44]	@ (8001e3c <HAL_RCC_ClockConfig+0x25c>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f003 0307 	and.w	r3, r3, #7
 8001e14:	683a      	ldr	r2, [r7, #0]
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d214      	bcs.n	8001e44 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e1a:	4b08      	ldr	r3, [pc, #32]	@ (8001e3c <HAL_RCC_ClockConfig+0x25c>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f023 0207 	bic.w	r2, r3, #7
 8001e22:	4906      	ldr	r1, [pc, #24]	@ (8001e3c <HAL_RCC_ClockConfig+0x25c>)
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	4313      	orrs	r3, r2
 8001e28:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e2a:	4b04      	ldr	r3, [pc, #16]	@ (8001e3c <HAL_RCC_ClockConfig+0x25c>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 0307 	and.w	r3, r3, #7
 8001e32:	683a      	ldr	r2, [r7, #0]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d005      	beq.n	8001e44 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e040      	b.n	8001ebe <HAL_RCC_ClockConfig+0x2de>
 8001e3c:	40022000 	.word	0x40022000
 8001e40:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f003 0304 	and.w	r3, r3, #4
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d008      	beq.n	8001e62 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e50:	4b1d      	ldr	r3, [pc, #116]	@ (8001ec8 <HAL_RCC_ClockConfig+0x2e8>)
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	491a      	ldr	r1, [pc, #104]	@ (8001ec8 <HAL_RCC_ClockConfig+0x2e8>)
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 0308 	and.w	r3, r3, #8
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d009      	beq.n	8001e82 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e6e:	4b16      	ldr	r3, [pc, #88]	@ (8001ec8 <HAL_RCC_ClockConfig+0x2e8>)
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	691b      	ldr	r3, [r3, #16]
 8001e7a:	00db      	lsls	r3, r3, #3
 8001e7c:	4912      	ldr	r1, [pc, #72]	@ (8001ec8 <HAL_RCC_ClockConfig+0x2e8>)
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001e82:	f000 f829 	bl	8001ed8 <HAL_RCC_GetSysClockFreq>
 8001e86:	4601      	mov	r1, r0
 8001e88:	4b0f      	ldr	r3, [pc, #60]	@ (8001ec8 <HAL_RCC_ClockConfig+0x2e8>)
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001e90:	22f0      	movs	r2, #240	@ 0xf0
 8001e92:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e94:	693a      	ldr	r2, [r7, #16]
 8001e96:	fa92 f2a2 	rbit	r2, r2
 8001e9a:	60fa      	str	r2, [r7, #12]
  return result;
 8001e9c:	68fa      	ldr	r2, [r7, #12]
 8001e9e:	fab2 f282 	clz	r2, r2
 8001ea2:	b2d2      	uxtb	r2, r2
 8001ea4:	40d3      	lsrs	r3, r2
 8001ea6:	4a09      	ldr	r2, [pc, #36]	@ (8001ecc <HAL_RCC_ClockConfig+0x2ec>)
 8001ea8:	5cd3      	ldrb	r3, [r2, r3]
 8001eaa:	fa21 f303 	lsr.w	r3, r1, r3
 8001eae:	4a08      	ldr	r2, [pc, #32]	@ (8001ed0 <HAL_RCC_ClockConfig+0x2f0>)
 8001eb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001eb2:	4b08      	ldr	r3, [pc, #32]	@ (8001ed4 <HAL_RCC_ClockConfig+0x2f4>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f7fe fb94 	bl	80005e4 <HAL_InitTick>
  
  return HAL_OK;
 8001ebc:	2300      	movs	r3, #0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3778      	adds	r7, #120	@ 0x78
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	40021000 	.word	0x40021000
 8001ecc:	08003cd8 	.word	0x08003cd8
 8001ed0:	20000000 	.word	0x20000000
 8001ed4:	20000004 	.word	0x20000004

08001ed8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b087      	sub	sp, #28
 8001edc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	60fb      	str	r3, [r7, #12]
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	60bb      	str	r3, [r7, #8]
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	617b      	str	r3, [r7, #20]
 8001eea:	2300      	movs	r3, #0
 8001eec:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001ef2:	4b1e      	ldr	r3, [pc, #120]	@ (8001f6c <HAL_RCC_GetSysClockFreq+0x94>)
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	f003 030c 	and.w	r3, r3, #12
 8001efe:	2b04      	cmp	r3, #4
 8001f00:	d002      	beq.n	8001f08 <HAL_RCC_GetSysClockFreq+0x30>
 8001f02:	2b08      	cmp	r3, #8
 8001f04:	d003      	beq.n	8001f0e <HAL_RCC_GetSysClockFreq+0x36>
 8001f06:	e026      	b.n	8001f56 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f08:	4b19      	ldr	r3, [pc, #100]	@ (8001f70 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f0a:	613b      	str	r3, [r7, #16]
      break;
 8001f0c:	e026      	b.n	8001f5c <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	0c9b      	lsrs	r3, r3, #18
 8001f12:	f003 030f 	and.w	r3, r3, #15
 8001f16:	4a17      	ldr	r2, [pc, #92]	@ (8001f74 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001f18:	5cd3      	ldrb	r3, [r2, r3]
 8001f1a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8001f1c:	4b13      	ldr	r3, [pc, #76]	@ (8001f6c <HAL_RCC_GetSysClockFreq+0x94>)
 8001f1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f20:	f003 030f 	and.w	r3, r3, #15
 8001f24:	4a14      	ldr	r2, [pc, #80]	@ (8001f78 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001f26:	5cd3      	ldrb	r3, [r2, r3]
 8001f28:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d008      	beq.n	8001f46 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001f34:	4a0e      	ldr	r2, [pc, #56]	@ (8001f70 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	fb02 f303 	mul.w	r3, r2, r3
 8001f42:	617b      	str	r3, [r7, #20]
 8001f44:	e004      	b.n	8001f50 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4a0c      	ldr	r2, [pc, #48]	@ (8001f7c <HAL_RCC_GetSysClockFreq+0xa4>)
 8001f4a:	fb02 f303 	mul.w	r3, r2, r3
 8001f4e:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	613b      	str	r3, [r7, #16]
      break;
 8001f54:	e002      	b.n	8001f5c <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f56:	4b06      	ldr	r3, [pc, #24]	@ (8001f70 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f58:	613b      	str	r3, [r7, #16]
      break;
 8001f5a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f5c:	693b      	ldr	r3, [r7, #16]
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	371c      	adds	r7, #28
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop
 8001f6c:	40021000 	.word	0x40021000
 8001f70:	007a1200 	.word	0x007a1200
 8001f74:	08003cf0 	.word	0x08003cf0
 8001f78:	08003d00 	.word	0x08003d00
 8001f7c:	003d0900 	.word	0x003d0900

08001f80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f84:	4b03      	ldr	r3, [pc, #12]	@ (8001f94 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f86:	681b      	ldr	r3, [r3, #0]
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr
 8001f92:	bf00      	nop
 8001f94:	20000000 	.word	0x20000000

08001f98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8001f9e:	f7ff ffef 	bl	8001f80 <HAL_RCC_GetHCLKFreq>
 8001fa2:	4601      	mov	r1, r0
 8001fa4:	4b0b      	ldr	r3, [pc, #44]	@ (8001fd4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001fac:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001fb0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb2:	687a      	ldr	r2, [r7, #4]
 8001fb4:	fa92 f2a2 	rbit	r2, r2
 8001fb8:	603a      	str	r2, [r7, #0]
  return result;
 8001fba:	683a      	ldr	r2, [r7, #0]
 8001fbc:	fab2 f282 	clz	r2, r2
 8001fc0:	b2d2      	uxtb	r2, r2
 8001fc2:	40d3      	lsrs	r3, r2
 8001fc4:	4a04      	ldr	r2, [pc, #16]	@ (8001fd8 <HAL_RCC_GetPCLK1Freq+0x40>)
 8001fc6:	5cd3      	ldrb	r3, [r2, r3]
 8001fc8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3708      	adds	r7, #8
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	40021000 	.word	0x40021000
 8001fd8:	08003ce8 	.word	0x08003ce8

08001fdc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8001fe2:	f7ff ffcd 	bl	8001f80 <HAL_RCC_GetHCLKFreq>
 8001fe6:	4601      	mov	r1, r0
 8001fe8:	4b0b      	ldr	r3, [pc, #44]	@ (8002018 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8001ff0:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8001ff4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff6:	687a      	ldr	r2, [r7, #4]
 8001ff8:	fa92 f2a2 	rbit	r2, r2
 8001ffc:	603a      	str	r2, [r7, #0]
  return result;
 8001ffe:	683a      	ldr	r2, [r7, #0]
 8002000:	fab2 f282 	clz	r2, r2
 8002004:	b2d2      	uxtb	r2, r2
 8002006:	40d3      	lsrs	r3, r2
 8002008:	4a04      	ldr	r2, [pc, #16]	@ (800201c <HAL_RCC_GetPCLK2Freq+0x40>)
 800200a:	5cd3      	ldrb	r3, [r2, r3]
 800200c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002010:	4618      	mov	r0, r3
 8002012:	3708      	adds	r7, #8
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	40021000 	.word	0x40021000
 800201c:	08003ce8 	.word	0x08003ce8

08002020 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d101      	bne.n	8002032 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e040      	b.n	80020b4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002036:	2b00      	cmp	r3, #0
 8002038:	d106      	bne.n	8002048 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2200      	movs	r2, #0
 800203e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f7fe fa12 	bl	800046c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2224      	movs	r2, #36	@ 0x24
 800204c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f022 0201 	bic.w	r2, r2, #1
 800205c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002062:	2b00      	cmp	r3, #0
 8002064:	d002      	beq.n	800206c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f000 f95e 	bl	8002328 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800206c:	6878      	ldr	r0, [r7, #4]
 800206e:	f000 f825 	bl	80020bc <UART_SetConfig>
 8002072:	4603      	mov	r3, r0
 8002074:	2b01      	cmp	r3, #1
 8002076:	d101      	bne.n	800207c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	e01b      	b.n	80020b4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	685a      	ldr	r2, [r3, #4]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800208a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	689a      	ldr	r2, [r3, #8]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800209a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f042 0201 	orr.w	r2, r2, #1
 80020aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	f000 f9dd 	bl	800246c <UART_CheckIdleState>
 80020b2:	4603      	mov	r3, r0
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3708      	adds	r7, #8
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}

080020bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b088      	sub	sp, #32
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80020c4:	2300      	movs	r3, #0
 80020c6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	689a      	ldr	r2, [r3, #8]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	691b      	ldr	r3, [r3, #16]
 80020d0:	431a      	orrs	r2, r3
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	695b      	ldr	r3, [r3, #20]
 80020d6:	431a      	orrs	r2, r3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	69db      	ldr	r3, [r3, #28]
 80020dc:	4313      	orrs	r3, r2
 80020de:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	4b8a      	ldr	r3, [pc, #552]	@ (8002310 <UART_SetConfig+0x254>)
 80020e8:	4013      	ands	r3, r2
 80020ea:	687a      	ldr	r2, [r7, #4]
 80020ec:	6812      	ldr	r2, [r2, #0]
 80020ee:	6979      	ldr	r1, [r7, #20]
 80020f0:	430b      	orrs	r3, r1
 80020f2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	68da      	ldr	r2, [r3, #12]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	430a      	orrs	r2, r1
 8002108:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	699b      	ldr	r3, [r3, #24]
 800210e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6a1b      	ldr	r3, [r3, #32]
 8002114:	697a      	ldr	r2, [r7, #20]
 8002116:	4313      	orrs	r3, r2
 8002118:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	697a      	ldr	r2, [r7, #20]
 800212a:	430a      	orrs	r2, r1
 800212c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a78      	ldr	r2, [pc, #480]	@ (8002314 <UART_SetConfig+0x258>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d120      	bne.n	800217a <UART_SetConfig+0xbe>
 8002138:	4b77      	ldr	r3, [pc, #476]	@ (8002318 <UART_SetConfig+0x25c>)
 800213a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800213c:	f003 0303 	and.w	r3, r3, #3
 8002140:	2b03      	cmp	r3, #3
 8002142:	d817      	bhi.n	8002174 <UART_SetConfig+0xb8>
 8002144:	a201      	add	r2, pc, #4	@ (adr r2, 800214c <UART_SetConfig+0x90>)
 8002146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800214a:	bf00      	nop
 800214c:	0800215d 	.word	0x0800215d
 8002150:	08002169 	.word	0x08002169
 8002154:	0800216f 	.word	0x0800216f
 8002158:	08002163 	.word	0x08002163
 800215c:	2300      	movs	r3, #0
 800215e:	77fb      	strb	r3, [r7, #31]
 8002160:	e01d      	b.n	800219e <UART_SetConfig+0xe2>
 8002162:	2302      	movs	r3, #2
 8002164:	77fb      	strb	r3, [r7, #31]
 8002166:	e01a      	b.n	800219e <UART_SetConfig+0xe2>
 8002168:	2304      	movs	r3, #4
 800216a:	77fb      	strb	r3, [r7, #31]
 800216c:	e017      	b.n	800219e <UART_SetConfig+0xe2>
 800216e:	2308      	movs	r3, #8
 8002170:	77fb      	strb	r3, [r7, #31]
 8002172:	e014      	b.n	800219e <UART_SetConfig+0xe2>
 8002174:	2310      	movs	r3, #16
 8002176:	77fb      	strb	r3, [r7, #31]
 8002178:	e011      	b.n	800219e <UART_SetConfig+0xe2>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a67      	ldr	r2, [pc, #412]	@ (800231c <UART_SetConfig+0x260>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d102      	bne.n	800218a <UART_SetConfig+0xce>
 8002184:	2300      	movs	r3, #0
 8002186:	77fb      	strb	r3, [r7, #31]
 8002188:	e009      	b.n	800219e <UART_SetConfig+0xe2>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a64      	ldr	r2, [pc, #400]	@ (8002320 <UART_SetConfig+0x264>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d102      	bne.n	800219a <UART_SetConfig+0xde>
 8002194:	2300      	movs	r3, #0
 8002196:	77fb      	strb	r3, [r7, #31]
 8002198:	e001      	b.n	800219e <UART_SetConfig+0xe2>
 800219a:	2310      	movs	r3, #16
 800219c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	69db      	ldr	r3, [r3, #28]
 80021a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80021a6:	d15a      	bne.n	800225e <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 80021a8:	7ffb      	ldrb	r3, [r7, #31]
 80021aa:	2b08      	cmp	r3, #8
 80021ac:	d827      	bhi.n	80021fe <UART_SetConfig+0x142>
 80021ae:	a201      	add	r2, pc, #4	@ (adr r2, 80021b4 <UART_SetConfig+0xf8>)
 80021b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021b4:	080021d9 	.word	0x080021d9
 80021b8:	080021e1 	.word	0x080021e1
 80021bc:	080021e9 	.word	0x080021e9
 80021c0:	080021ff 	.word	0x080021ff
 80021c4:	080021ef 	.word	0x080021ef
 80021c8:	080021ff 	.word	0x080021ff
 80021cc:	080021ff 	.word	0x080021ff
 80021d0:	080021ff 	.word	0x080021ff
 80021d4:	080021f7 	.word	0x080021f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80021d8:	f7ff fede 	bl	8001f98 <HAL_RCC_GetPCLK1Freq>
 80021dc:	61b8      	str	r0, [r7, #24]
        break;
 80021de:	e013      	b.n	8002208 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80021e0:	f7ff fefc 	bl	8001fdc <HAL_RCC_GetPCLK2Freq>
 80021e4:	61b8      	str	r0, [r7, #24]
        break;
 80021e6:	e00f      	b.n	8002208 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80021e8:	4b4e      	ldr	r3, [pc, #312]	@ (8002324 <UART_SetConfig+0x268>)
 80021ea:	61bb      	str	r3, [r7, #24]
        break;
 80021ec:	e00c      	b.n	8002208 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80021ee:	f7ff fe73 	bl	8001ed8 <HAL_RCC_GetSysClockFreq>
 80021f2:	61b8      	str	r0, [r7, #24]
        break;
 80021f4:	e008      	b.n	8002208 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80021f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80021fa:	61bb      	str	r3, [r7, #24]
        break;
 80021fc:	e004      	b.n	8002208 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 80021fe:	2300      	movs	r3, #0
 8002200:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	77bb      	strb	r3, [r7, #30]
        break;
 8002206:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002208:	69bb      	ldr	r3, [r7, #24]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d074      	beq.n	80022f8 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800220e:	69bb      	ldr	r3, [r7, #24]
 8002210:	005a      	lsls	r2, r3, #1
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	085b      	lsrs	r3, r3, #1
 8002218:	441a      	add	r2, r3
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002222:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	2b0f      	cmp	r3, #15
 8002228:	d916      	bls.n	8002258 <UART_SetConfig+0x19c>
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002230:	d212      	bcs.n	8002258 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	b29b      	uxth	r3, r3
 8002236:	f023 030f 	bic.w	r3, r3, #15
 800223a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	085b      	lsrs	r3, r3, #1
 8002240:	b29b      	uxth	r3, r3
 8002242:	f003 0307 	and.w	r3, r3, #7
 8002246:	b29a      	uxth	r2, r3
 8002248:	89fb      	ldrh	r3, [r7, #14]
 800224a:	4313      	orrs	r3, r2
 800224c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	89fa      	ldrh	r2, [r7, #14]
 8002254:	60da      	str	r2, [r3, #12]
 8002256:	e04f      	b.n	80022f8 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	77bb      	strb	r3, [r7, #30]
 800225c:	e04c      	b.n	80022f8 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800225e:	7ffb      	ldrb	r3, [r7, #31]
 8002260:	2b08      	cmp	r3, #8
 8002262:	d828      	bhi.n	80022b6 <UART_SetConfig+0x1fa>
 8002264:	a201      	add	r2, pc, #4	@ (adr r2, 800226c <UART_SetConfig+0x1b0>)
 8002266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800226a:	bf00      	nop
 800226c:	08002291 	.word	0x08002291
 8002270:	08002299 	.word	0x08002299
 8002274:	080022a1 	.word	0x080022a1
 8002278:	080022b7 	.word	0x080022b7
 800227c:	080022a7 	.word	0x080022a7
 8002280:	080022b7 	.word	0x080022b7
 8002284:	080022b7 	.word	0x080022b7
 8002288:	080022b7 	.word	0x080022b7
 800228c:	080022af 	.word	0x080022af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002290:	f7ff fe82 	bl	8001f98 <HAL_RCC_GetPCLK1Freq>
 8002294:	61b8      	str	r0, [r7, #24]
        break;
 8002296:	e013      	b.n	80022c0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002298:	f7ff fea0 	bl	8001fdc <HAL_RCC_GetPCLK2Freq>
 800229c:	61b8      	str	r0, [r7, #24]
        break;
 800229e:	e00f      	b.n	80022c0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80022a0:	4b20      	ldr	r3, [pc, #128]	@ (8002324 <UART_SetConfig+0x268>)
 80022a2:	61bb      	str	r3, [r7, #24]
        break;
 80022a4:	e00c      	b.n	80022c0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80022a6:	f7ff fe17 	bl	8001ed8 <HAL_RCC_GetSysClockFreq>
 80022aa:	61b8      	str	r0, [r7, #24]
        break;
 80022ac:	e008      	b.n	80022c0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80022ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80022b2:	61bb      	str	r3, [r7, #24]
        break;
 80022b4:	e004      	b.n	80022c0 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80022b6:	2300      	movs	r3, #0
 80022b8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	77bb      	strb	r3, [r7, #30]
        break;
 80022be:	bf00      	nop
    }

    if (pclk != 0U)
 80022c0:	69bb      	ldr	r3, [r7, #24]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d018      	beq.n	80022f8 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	085a      	lsrs	r2, r3, #1
 80022cc:	69bb      	ldr	r3, [r7, #24]
 80022ce:	441a      	add	r2, r3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80022d8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	2b0f      	cmp	r3, #15
 80022de:	d909      	bls.n	80022f4 <UART_SetConfig+0x238>
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022e6:	d205      	bcs.n	80022f4 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	b29a      	uxth	r2, r3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	60da      	str	r2, [r3, #12]
 80022f2:	e001      	b.n	80022f8 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2200      	movs	r2, #0
 80022fc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2200      	movs	r2, #0
 8002302:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8002304:	7fbb      	ldrb	r3, [r7, #30]
}
 8002306:	4618      	mov	r0, r3
 8002308:	3720      	adds	r7, #32
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	efff69f3 	.word	0xefff69f3
 8002314:	40013800 	.word	0x40013800
 8002318:	40021000 	.word	0x40021000
 800231c:	40004400 	.word	0x40004400
 8002320:	40004800 	.word	0x40004800
 8002324:	007a1200 	.word	0x007a1200

08002328 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002328:	b480      	push	{r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002334:	f003 0308 	and.w	r3, r3, #8
 8002338:	2b00      	cmp	r3, #0
 800233a:	d00a      	beq.n	8002352 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	430a      	orrs	r2, r1
 8002350:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002356:	f003 0301 	and.w	r3, r3, #1
 800235a:	2b00      	cmp	r3, #0
 800235c:	d00a      	beq.n	8002374 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	430a      	orrs	r2, r1
 8002372:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002378:	f003 0302 	and.w	r3, r3, #2
 800237c:	2b00      	cmp	r3, #0
 800237e:	d00a      	beq.n	8002396 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	430a      	orrs	r2, r1
 8002394:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800239a:	f003 0304 	and.w	r3, r3, #4
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d00a      	beq.n	80023b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	430a      	orrs	r2, r1
 80023b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023bc:	f003 0310 	and.w	r3, r3, #16
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d00a      	beq.n	80023da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	430a      	orrs	r2, r1
 80023d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023de:	f003 0320 	and.w	r3, r3, #32
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d00a      	beq.n	80023fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	430a      	orrs	r2, r1
 80023fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002400:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002404:	2b00      	cmp	r3, #0
 8002406:	d01a      	beq.n	800243e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	430a      	orrs	r2, r1
 800241c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002422:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002426:	d10a      	bne.n	800243e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	430a      	orrs	r2, r1
 800243c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002442:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002446:	2b00      	cmp	r3, #0
 8002448:	d00a      	beq.n	8002460 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	430a      	orrs	r2, r1
 800245e:	605a      	str	r2, [r3, #4]
  }
}
 8002460:	bf00      	nop
 8002462:	370c      	adds	r7, #12
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr

0800246c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b098      	sub	sp, #96	@ 0x60
 8002470:	af02      	add	r7, sp, #8
 8002472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2200      	movs	r2, #0
 8002478:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800247c:	f7fe f8f6 	bl	800066c <HAL_GetTick>
 8002480:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 0308 	and.w	r3, r3, #8
 800248c:	2b08      	cmp	r3, #8
 800248e:	d12e      	bne.n	80024ee <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002490:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002494:	9300      	str	r3, [sp, #0]
 8002496:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002498:	2200      	movs	r2, #0
 800249a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f000 f88c 	bl	80025bc <UART_WaitOnFlagUntilTimeout>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d021      	beq.n	80024ee <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024b2:	e853 3f00 	ldrex	r3, [r3]
 80024b6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80024b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80024be:	653b      	str	r3, [r7, #80]	@ 0x50
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	461a      	mov	r2, r3
 80024c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80024c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80024ca:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024cc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80024ce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80024d0:	e841 2300 	strex	r3, r2, [r1]
 80024d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80024d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d1e6      	bne.n	80024aa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2220      	movs	r2, #32
 80024e0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2200      	movs	r2, #0
 80024e6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80024ea:	2303      	movs	r3, #3
 80024ec:	e062      	b.n	80025b4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0304 	and.w	r3, r3, #4
 80024f8:	2b04      	cmp	r3, #4
 80024fa:	d149      	bne.n	8002590 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80024fc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002500:	9300      	str	r3, [sp, #0]
 8002502:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002504:	2200      	movs	r2, #0
 8002506:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f000 f856 	bl	80025bc <UART_WaitOnFlagUntilTimeout>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d03c      	beq.n	8002590 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800251c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800251e:	e853 3f00 	ldrex	r3, [r3]
 8002522:	623b      	str	r3, [r7, #32]
   return(result);
 8002524:	6a3b      	ldr	r3, [r7, #32]
 8002526:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800252a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	461a      	mov	r2, r3
 8002532:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002534:	633b      	str	r3, [r7, #48]	@ 0x30
 8002536:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002538:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800253a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800253c:	e841 2300 	strex	r3, r2, [r1]
 8002540:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002542:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002544:	2b00      	cmp	r3, #0
 8002546:	d1e6      	bne.n	8002516 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	3308      	adds	r3, #8
 800254e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	e853 3f00 	ldrex	r3, [r3]
 8002556:	60fb      	str	r3, [r7, #12]
   return(result);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	f023 0301 	bic.w	r3, r3, #1
 800255e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	3308      	adds	r3, #8
 8002566:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002568:	61fa      	str	r2, [r7, #28]
 800256a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800256c:	69b9      	ldr	r1, [r7, #24]
 800256e:	69fa      	ldr	r2, [r7, #28]
 8002570:	e841 2300 	strex	r3, r2, [r1]
 8002574:	617b      	str	r3, [r7, #20]
   return(result);
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d1e5      	bne.n	8002548 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2220      	movs	r2, #32
 8002580:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2200      	movs	r2, #0
 8002588:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800258c:	2303      	movs	r3, #3
 800258e:	e011      	b.n	80025b4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2220      	movs	r2, #32
 8002594:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2220      	movs	r2, #32
 800259a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2200      	movs	r2, #0
 80025a2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2200      	movs	r2, #0
 80025a8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2200      	movs	r2, #0
 80025ae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80025b2:	2300      	movs	r3, #0
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	3758      	adds	r7, #88	@ 0x58
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}

080025bc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b084      	sub	sp, #16
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	60f8      	str	r0, [r7, #12]
 80025c4:	60b9      	str	r1, [r7, #8]
 80025c6:	603b      	str	r3, [r7, #0]
 80025c8:	4613      	mov	r3, r2
 80025ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80025cc:	e04f      	b.n	800266e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025ce:	69bb      	ldr	r3, [r7, #24]
 80025d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025d4:	d04b      	beq.n	800266e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025d6:	f7fe f849 	bl	800066c <HAL_GetTick>
 80025da:	4602      	mov	r2, r0
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	1ad3      	subs	r3, r2, r3
 80025e0:	69ba      	ldr	r2, [r7, #24]
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d302      	bcc.n	80025ec <UART_WaitOnFlagUntilTimeout+0x30>
 80025e6:	69bb      	ldr	r3, [r7, #24]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d101      	bne.n	80025f0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80025ec:	2303      	movs	r3, #3
 80025ee:	e04e      	b.n	800268e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 0304 	and.w	r3, r3, #4
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d037      	beq.n	800266e <UART_WaitOnFlagUntilTimeout+0xb2>
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	2b80      	cmp	r3, #128	@ 0x80
 8002602:	d034      	beq.n	800266e <UART_WaitOnFlagUntilTimeout+0xb2>
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	2b40      	cmp	r3, #64	@ 0x40
 8002608:	d031      	beq.n	800266e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	69db      	ldr	r3, [r3, #28]
 8002610:	f003 0308 	and.w	r3, r3, #8
 8002614:	2b08      	cmp	r3, #8
 8002616:	d110      	bne.n	800263a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	2208      	movs	r2, #8
 800261e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002620:	68f8      	ldr	r0, [r7, #12]
 8002622:	f000 f838 	bl	8002696 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	2208      	movs	r2, #8
 800262a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2200      	movs	r2, #0
 8002632:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e029      	b.n	800268e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	69db      	ldr	r3, [r3, #28]
 8002640:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002644:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002648:	d111      	bne.n	800266e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002652:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002654:	68f8      	ldr	r0, [r7, #12]
 8002656:	f000 f81e 	bl	8002696 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	2220      	movs	r2, #32
 800265e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2200      	movs	r2, #0
 8002666:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800266a:	2303      	movs	r3, #3
 800266c:	e00f      	b.n	800268e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	69da      	ldr	r2, [r3, #28]
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	4013      	ands	r3, r2
 8002678:	68ba      	ldr	r2, [r7, #8]
 800267a:	429a      	cmp	r2, r3
 800267c:	bf0c      	ite	eq
 800267e:	2301      	moveq	r3, #1
 8002680:	2300      	movne	r3, #0
 8002682:	b2db      	uxtb	r3, r3
 8002684:	461a      	mov	r2, r3
 8002686:	79fb      	ldrb	r3, [r7, #7]
 8002688:	429a      	cmp	r2, r3
 800268a:	d0a0      	beq.n	80025ce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800268c:	2300      	movs	r3, #0
}
 800268e:	4618      	mov	r0, r3
 8002690:	3710      	adds	r7, #16
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}

08002696 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002696:	b480      	push	{r7}
 8002698:	b095      	sub	sp, #84	@ 0x54
 800269a:	af00      	add	r7, sp, #0
 800269c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026a6:	e853 3f00 	ldrex	r3, [r3]
 80026aa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80026ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026ae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80026b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	461a      	mov	r2, r3
 80026ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80026bc:	643b      	str	r3, [r7, #64]	@ 0x40
 80026be:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026c0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80026c2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80026c4:	e841 2300 	strex	r3, r2, [r1]
 80026c8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80026ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d1e6      	bne.n	800269e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	3308      	adds	r3, #8
 80026d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026d8:	6a3b      	ldr	r3, [r7, #32]
 80026da:	e853 3f00 	ldrex	r3, [r3]
 80026de:	61fb      	str	r3, [r7, #28]
   return(result);
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	f023 0301 	bic.w	r3, r3, #1
 80026e6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	3308      	adds	r3, #8
 80026ee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80026f0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80026f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80026f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80026f8:	e841 2300 	strex	r3, r2, [r1]
 80026fc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80026fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002700:	2b00      	cmp	r3, #0
 8002702:	d1e5      	bne.n	80026d0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002708:	2b01      	cmp	r3, #1
 800270a:	d118      	bne.n	800273e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	e853 3f00 	ldrex	r3, [r3]
 8002718:	60bb      	str	r3, [r7, #8]
   return(result);
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	f023 0310 	bic.w	r3, r3, #16
 8002720:	647b      	str	r3, [r7, #68]	@ 0x44
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	461a      	mov	r2, r3
 8002728:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800272a:	61bb      	str	r3, [r7, #24]
 800272c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800272e:	6979      	ldr	r1, [r7, #20]
 8002730:	69ba      	ldr	r2, [r7, #24]
 8002732:	e841 2300 	strex	r3, r2, [r1]
 8002736:	613b      	str	r3, [r7, #16]
   return(result);
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d1e6      	bne.n	800270c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2220      	movs	r2, #32
 8002742:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2200      	movs	r2, #0
 800274a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2200      	movs	r2, #0
 8002750:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8002752:	bf00      	nop
 8002754:	3754      	adds	r7, #84	@ 0x54
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr

0800275e <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800275e:	b480      	push	{r7}
 8002760:	b085      	sub	sp, #20
 8002762:	af00      	add	r7, sp, #0
 8002764:	4603      	mov	r3, r0
 8002766:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002768:	2300      	movs	r3, #0
 800276a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800276c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002770:	2b84      	cmp	r3, #132	@ 0x84
 8002772:	d005      	beq.n	8002780 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002774:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	4413      	add	r3, r2
 800277c:	3303      	adds	r3, #3
 800277e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002780:	68fb      	ldr	r3, [r7, #12]
}
 8002782:	4618      	mov	r0, r3
 8002784:	3714      	adds	r7, #20
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr

0800278e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800278e:	b580      	push	{r7, lr}
 8002790:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002792:	f000 fadb 	bl	8002d4c <vTaskStartScheduler>
  
  return osOK;
 8002796:	2300      	movs	r3, #0
}
 8002798:	4618      	mov	r0, r3
 800279a:	bd80      	pop	{r7, pc}

0800279c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800279c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800279e:	b089      	sub	sp, #36	@ 0x24
 80027a0:	af04      	add	r7, sp, #16
 80027a2:	6078      	str	r0, [r7, #4]
 80027a4:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	695b      	ldr	r3, [r3, #20]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d020      	beq.n	80027f0 <osThreadCreate+0x54>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	699b      	ldr	r3, [r3, #24]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d01c      	beq.n	80027f0 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	685c      	ldr	r4, [r3, #4]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	691e      	ldr	r6, [r3, #16]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80027c8:	4618      	mov	r0, r3
 80027ca:	f7ff ffc8 	bl	800275e <makeFreeRtosPriority>
 80027ce:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	695b      	ldr	r3, [r3, #20]
 80027d4:	687a      	ldr	r2, [r7, #4]
 80027d6:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80027d8:	9202      	str	r2, [sp, #8]
 80027da:	9301      	str	r3, [sp, #4]
 80027dc:	9100      	str	r1, [sp, #0]
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	4632      	mov	r2, r6
 80027e2:	4629      	mov	r1, r5
 80027e4:	4620      	mov	r0, r4
 80027e6:	f000 f8ed 	bl	80029c4 <xTaskCreateStatic>
 80027ea:	4603      	mov	r3, r0
 80027ec:	60fb      	str	r3, [r7, #12]
 80027ee:	e01c      	b.n	800282a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	685c      	ldr	r4, [r3, #4]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80027fc:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002804:	4618      	mov	r0, r3
 8002806:	f7ff ffaa 	bl	800275e <makeFreeRtosPriority>
 800280a:	4602      	mov	r2, r0
 800280c:	f107 030c 	add.w	r3, r7, #12
 8002810:	9301      	str	r3, [sp, #4]
 8002812:	9200      	str	r2, [sp, #0]
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	4632      	mov	r2, r6
 8002818:	4629      	mov	r1, r5
 800281a:	4620      	mov	r0, r4
 800281c:	f000 f931 	bl	8002a82 <xTaskCreate>
 8002820:	4603      	mov	r3, r0
 8002822:	2b01      	cmp	r3, #1
 8002824:	d001      	beq.n	800282a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002826:	2300      	movs	r3, #0
 8002828:	e000      	b.n	800282c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800282a:	68fb      	ldr	r3, [r7, #12]
}
 800282c:	4618      	mov	r0, r3
 800282e:	3714      	adds	r7, #20
 8002830:	46bd      	mov	sp, r7
 8002832:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002834 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b084      	sub	sp, #16
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d001      	beq.n	800284a <osDelay+0x16>
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	e000      	b.n	800284c <osDelay+0x18>
 800284a:	2301      	movs	r3, #1
 800284c:	4618      	mov	r0, r3
 800284e:	f000 fa47 	bl	8002ce0 <vTaskDelay>
  
  return osOK;
 8002852:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002854:	4618      	mov	r0, r3
 8002856:	3710      	adds	r7, #16
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}

0800285c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800285c:	b480      	push	{r7}
 800285e:	b083      	sub	sp, #12
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	f103 0208 	add.w	r2, r3, #8
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	f04f 32ff 	mov.w	r2, #4294967295
 8002874:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	f103 0208 	add.w	r2, r3, #8
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	f103 0208 	add.w	r2, r3, #8
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2200      	movs	r2, #0
 800288e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002890:	bf00      	nop
 8002892:	370c      	adds	r7, #12
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr

0800289c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800289c:	b480      	push	{r7}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2200      	movs	r2, #0
 80028a8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80028aa:	bf00      	nop
 80028ac:	370c      	adds	r7, #12
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr

080028b6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80028b6:	b480      	push	{r7}
 80028b8:	b085      	sub	sp, #20
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	6078      	str	r0, [r7, #4]
 80028be:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	68fa      	ldr	r2, [r7, #12]
 80028ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	689a      	ldr	r2, [r3, #8]
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	683a      	ldr	r2, [r7, #0]
 80028da:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	683a      	ldr	r2, [r7, #0]
 80028e0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	687a      	ldr	r2, [r7, #4]
 80028e6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	1c5a      	adds	r2, r3, #1
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	601a      	str	r2, [r3, #0]
}
 80028f2:	bf00      	nop
 80028f4:	3714      	adds	r7, #20
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr

080028fe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80028fe:	b480      	push	{r7}
 8002900:	b085      	sub	sp, #20
 8002902:	af00      	add	r7, sp, #0
 8002904:	6078      	str	r0, [r7, #4]
 8002906:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002914:	d103      	bne.n	800291e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	691b      	ldr	r3, [r3, #16]
 800291a:	60fb      	str	r3, [r7, #12]
 800291c:	e00c      	b.n	8002938 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	3308      	adds	r3, #8
 8002922:	60fb      	str	r3, [r7, #12]
 8002924:	e002      	b.n	800292c <vListInsert+0x2e>
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	60fb      	str	r3, [r7, #12]
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	68ba      	ldr	r2, [r7, #8]
 8002934:	429a      	cmp	r2, r3
 8002936:	d2f6      	bcs.n	8002926 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	685a      	ldr	r2, [r3, #4]
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	683a      	ldr	r2, [r7, #0]
 8002946:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	68fa      	ldr	r2, [r7, #12]
 800294c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	683a      	ldr	r2, [r7, #0]
 8002952:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	1c5a      	adds	r2, r3, #1
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	601a      	str	r2, [r3, #0]
}
 8002964:	bf00      	nop
 8002966:	3714      	adds	r7, #20
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr

08002970 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002970:	b480      	push	{r7}
 8002972:	b085      	sub	sp, #20
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	691b      	ldr	r3, [r3, #16]
 800297c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	6892      	ldr	r2, [r2, #8]
 8002986:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	687a      	ldr	r2, [r7, #4]
 800298e:	6852      	ldr	r2, [r2, #4]
 8002990:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	687a      	ldr	r2, [r7, #4]
 8002998:	429a      	cmp	r2, r3
 800299a:	d103      	bne.n	80029a4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	689a      	ldr	r2, [r3, #8]
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2200      	movs	r2, #0
 80029a8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	1e5a      	subs	r2, r3, #1
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3714      	adds	r7, #20
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr

080029c4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b08e      	sub	sp, #56	@ 0x38
 80029c8:	af04      	add	r7, sp, #16
 80029ca:	60f8      	str	r0, [r7, #12]
 80029cc:	60b9      	str	r1, [r7, #8]
 80029ce:	607a      	str	r2, [r7, #4]
 80029d0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80029d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d10b      	bne.n	80029f0 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80029d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029dc:	f383 8811 	msr	BASEPRI, r3
 80029e0:	f3bf 8f6f 	isb	sy
 80029e4:	f3bf 8f4f 	dsb	sy
 80029e8:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80029ea:	bf00      	nop
 80029ec:	bf00      	nop
 80029ee:	e7fd      	b.n	80029ec <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80029f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d10b      	bne.n	8002a0e <xTaskCreateStatic+0x4a>
	__asm volatile
 80029f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029fa:	f383 8811 	msr	BASEPRI, r3
 80029fe:	f3bf 8f6f 	isb	sy
 8002a02:	f3bf 8f4f 	dsb	sy
 8002a06:	61fb      	str	r3, [r7, #28]
}
 8002a08:	bf00      	nop
 8002a0a:	bf00      	nop
 8002a0c:	e7fd      	b.n	8002a0a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002a0e:	2354      	movs	r3, #84	@ 0x54
 8002a10:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	2b54      	cmp	r3, #84	@ 0x54
 8002a16:	d00b      	beq.n	8002a30 <xTaskCreateStatic+0x6c>
	__asm volatile
 8002a18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a1c:	f383 8811 	msr	BASEPRI, r3
 8002a20:	f3bf 8f6f 	isb	sy
 8002a24:	f3bf 8f4f 	dsb	sy
 8002a28:	61bb      	str	r3, [r7, #24]
}
 8002a2a:	bf00      	nop
 8002a2c:	bf00      	nop
 8002a2e:	e7fd      	b.n	8002a2c <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002a30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d01e      	beq.n	8002a74 <xTaskCreateStatic+0xb0>
 8002a36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d01b      	beq.n	8002a74 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002a3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a3e:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002a40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a42:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002a44:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a48:	2202      	movs	r2, #2
 8002a4a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002a4e:	2300      	movs	r3, #0
 8002a50:	9303      	str	r3, [sp, #12]
 8002a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a54:	9302      	str	r3, [sp, #8]
 8002a56:	f107 0314 	add.w	r3, r7, #20
 8002a5a:	9301      	str	r3, [sp, #4]
 8002a5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a5e:	9300      	str	r3, [sp, #0]
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	68b9      	ldr	r1, [r7, #8]
 8002a66:	68f8      	ldr	r0, [r7, #12]
 8002a68:	f000 f850 	bl	8002b0c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002a6c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002a6e:	f000 f8cd 	bl	8002c0c <prvAddNewTaskToReadyList>
 8002a72:	e001      	b.n	8002a78 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 8002a74:	2300      	movs	r3, #0
 8002a76:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002a78:	697b      	ldr	r3, [r7, #20]
	}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3728      	adds	r7, #40	@ 0x28
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}

08002a82 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002a82:	b580      	push	{r7, lr}
 8002a84:	b08c      	sub	sp, #48	@ 0x30
 8002a86:	af04      	add	r7, sp, #16
 8002a88:	60f8      	str	r0, [r7, #12]
 8002a8a:	60b9      	str	r1, [r7, #8]
 8002a8c:	603b      	str	r3, [r7, #0]
 8002a8e:	4613      	mov	r3, r2
 8002a90:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002a92:	88fb      	ldrh	r3, [r7, #6]
 8002a94:	009b      	lsls	r3, r3, #2
 8002a96:	4618      	mov	r0, r3
 8002a98:	f000 feee 	bl	8003878 <pvPortMalloc>
 8002a9c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d00e      	beq.n	8002ac2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002aa4:	2054      	movs	r0, #84	@ 0x54
 8002aa6:	f000 fee7 	bl	8003878 <pvPortMalloc>
 8002aaa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002aac:	69fb      	ldr	r3, [r7, #28]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d003      	beq.n	8002aba <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	697a      	ldr	r2, [r7, #20]
 8002ab6:	631a      	str	r2, [r3, #48]	@ 0x30
 8002ab8:	e005      	b.n	8002ac6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002aba:	6978      	ldr	r0, [r7, #20]
 8002abc:	f000 ffa4 	bl	8003a08 <vPortFree>
 8002ac0:	e001      	b.n	8002ac6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d017      	beq.n	8002afc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002acc:	69fb      	ldr	r3, [r7, #28]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002ad4:	88fa      	ldrh	r2, [r7, #6]
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	9303      	str	r3, [sp, #12]
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	9302      	str	r3, [sp, #8]
 8002ade:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ae0:	9301      	str	r3, [sp, #4]
 8002ae2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ae4:	9300      	str	r3, [sp, #0]
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	68b9      	ldr	r1, [r7, #8]
 8002aea:	68f8      	ldr	r0, [r7, #12]
 8002aec:	f000 f80e 	bl	8002b0c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002af0:	69f8      	ldr	r0, [r7, #28]
 8002af2:	f000 f88b 	bl	8002c0c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002af6:	2301      	movs	r3, #1
 8002af8:	61bb      	str	r3, [r7, #24]
 8002afa:	e002      	b.n	8002b02 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002afc:	f04f 33ff 	mov.w	r3, #4294967295
 8002b00:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002b02:	69bb      	ldr	r3, [r7, #24]
	}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3720      	adds	r7, #32
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}

08002b0c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b088      	sub	sp, #32
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	60f8      	str	r0, [r7, #12]
 8002b14:	60b9      	str	r1, [r7, #8]
 8002b16:	607a      	str	r2, [r7, #4]
 8002b18:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002b1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b1c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002b24:	3b01      	subs	r3, #1
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	4413      	add	r3, r2
 8002b2a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002b2c:	69bb      	ldr	r3, [r7, #24]
 8002b2e:	f023 0307 	bic.w	r3, r3, #7
 8002b32:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002b34:	69bb      	ldr	r3, [r7, #24]
 8002b36:	f003 0307 	and.w	r3, r3, #7
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d00b      	beq.n	8002b56 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8002b3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b42:	f383 8811 	msr	BASEPRI, r3
 8002b46:	f3bf 8f6f 	isb	sy
 8002b4a:	f3bf 8f4f 	dsb	sy
 8002b4e:	617b      	str	r3, [r7, #20]
}
 8002b50:	bf00      	nop
 8002b52:	bf00      	nop
 8002b54:	e7fd      	b.n	8002b52 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002b56:	2300      	movs	r3, #0
 8002b58:	61fb      	str	r3, [r7, #28]
 8002b5a:	e012      	b.n	8002b82 <prvInitialiseNewTask+0x76>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002b5c:	68ba      	ldr	r2, [r7, #8]
 8002b5e:	69fb      	ldr	r3, [r7, #28]
 8002b60:	4413      	add	r3, r2
 8002b62:	7819      	ldrb	r1, [r3, #0]
 8002b64:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b66:	69fb      	ldr	r3, [r7, #28]
 8002b68:	4413      	add	r3, r2
 8002b6a:	3334      	adds	r3, #52	@ 0x34
 8002b6c:	460a      	mov	r2, r1
 8002b6e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002b70:	68ba      	ldr	r2, [r7, #8]
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	4413      	add	r3, r2
 8002b76:	781b      	ldrb	r3, [r3, #0]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d006      	beq.n	8002b8a <prvInitialiseNewTask+0x7e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002b7c:	69fb      	ldr	r3, [r7, #28]
 8002b7e:	3301      	adds	r3, #1
 8002b80:	61fb      	str	r3, [r7, #28]
 8002b82:	69fb      	ldr	r3, [r7, #28]
 8002b84:	2b0f      	cmp	r3, #15
 8002b86:	d9e9      	bls.n	8002b5c <prvInitialiseNewTask+0x50>
 8002b88:	e000      	b.n	8002b8c <prvInitialiseNewTask+0x80>
		{
			break;
 8002b8a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002b8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b8e:	2200      	movs	r2, #0
 8002b90:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002b94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b96:	2b06      	cmp	r3, #6
 8002b98:	d901      	bls.n	8002b9e <prvInitialiseNewTask+0x92>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002b9a:	2306      	movs	r3, #6
 8002b9c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002b9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ba0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002ba2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002ba4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ba6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002ba8:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002baa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bac:	2200      	movs	r2, #0
 8002bae:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002bb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bb2:	3304      	adds	r3, #4
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f7ff fe71 	bl	800289c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002bba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bbc:	3318      	adds	r3, #24
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f7ff fe6c 	bl	800289c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002bc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bc6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002bc8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002bca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bcc:	f1c3 0207 	rsb	r2, r3, #7
 8002bd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bd2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002bd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bd6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002bd8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002bda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bdc:	2200      	movs	r2, #0
 8002bde:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002be0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002be2:	2200      	movs	r2, #0
 8002be4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002be8:	683a      	ldr	r2, [r7, #0]
 8002bea:	68f9      	ldr	r1, [r7, #12]
 8002bec:	69b8      	ldr	r0, [r7, #24]
 8002bee:	f000 fc35 	bl	800345c <pxPortInitialiseStack>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bf6:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8002bf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d002      	beq.n	8002c04 <prvInitialiseNewTask+0xf8>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002bfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c00:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002c02:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002c04:	bf00      	nop
 8002c06:	3720      	adds	r7, #32
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}

08002c0c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b082      	sub	sp, #8
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002c14:	f000 fd50 	bl	80036b8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002c18:	4b2a      	ldr	r3, [pc, #168]	@ (8002cc4 <prvAddNewTaskToReadyList+0xb8>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	3301      	adds	r3, #1
 8002c1e:	4a29      	ldr	r2, [pc, #164]	@ (8002cc4 <prvAddNewTaskToReadyList+0xb8>)
 8002c20:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002c22:	4b29      	ldr	r3, [pc, #164]	@ (8002cc8 <prvAddNewTaskToReadyList+0xbc>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d109      	bne.n	8002c3e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002c2a:	4a27      	ldr	r2, [pc, #156]	@ (8002cc8 <prvAddNewTaskToReadyList+0xbc>)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002c30:	4b24      	ldr	r3, [pc, #144]	@ (8002cc4 <prvAddNewTaskToReadyList+0xb8>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d110      	bne.n	8002c5a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002c38:	f000 fac8 	bl	80031cc <prvInitialiseTaskLists>
 8002c3c:	e00d      	b.n	8002c5a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002c3e:	4b23      	ldr	r3, [pc, #140]	@ (8002ccc <prvAddNewTaskToReadyList+0xc0>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d109      	bne.n	8002c5a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002c46:	4b20      	ldr	r3, [pc, #128]	@ (8002cc8 <prvAddNewTaskToReadyList+0xbc>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d802      	bhi.n	8002c5a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002c54:	4a1c      	ldr	r2, [pc, #112]	@ (8002cc8 <prvAddNewTaskToReadyList+0xbc>)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002c5a:	4b1d      	ldr	r3, [pc, #116]	@ (8002cd0 <prvAddNewTaskToReadyList+0xc4>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	3301      	adds	r3, #1
 8002c60:	4a1b      	ldr	r2, [pc, #108]	@ (8002cd0 <prvAddNewTaskToReadyList+0xc4>)
 8002c62:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c68:	2201      	movs	r2, #1
 8002c6a:	409a      	lsls	r2, r3
 8002c6c:	4b19      	ldr	r3, [pc, #100]	@ (8002cd4 <prvAddNewTaskToReadyList+0xc8>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4313      	orrs	r3, r2
 8002c72:	4a18      	ldr	r2, [pc, #96]	@ (8002cd4 <prvAddNewTaskToReadyList+0xc8>)
 8002c74:	6013      	str	r3, [r2, #0]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c7a:	4613      	mov	r3, r2
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	4413      	add	r3, r2
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	4a15      	ldr	r2, [pc, #84]	@ (8002cd8 <prvAddNewTaskToReadyList+0xcc>)
 8002c84:	441a      	add	r2, r3
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	3304      	adds	r3, #4
 8002c8a:	4619      	mov	r1, r3
 8002c8c:	4610      	mov	r0, r2
 8002c8e:	f7ff fe12 	bl	80028b6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002c92:	f000 fd43 	bl	800371c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002c96:	4b0d      	ldr	r3, [pc, #52]	@ (8002ccc <prvAddNewTaskToReadyList+0xc0>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d00e      	beq.n	8002cbc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002c9e:	4b0a      	ldr	r3, [pc, #40]	@ (8002cc8 <prvAddNewTaskToReadyList+0xbc>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d207      	bcs.n	8002cbc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002cac:	4b0b      	ldr	r3, [pc, #44]	@ (8002cdc <prvAddNewTaskToReadyList+0xd0>)
 8002cae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002cb2:	601a      	str	r2, [r3, #0]
 8002cb4:	f3bf 8f4f 	dsb	sy
 8002cb8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002cbc:	bf00      	nop
 8002cbe:	3708      	adds	r7, #8
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}
 8002cc4:	20000410 	.word	0x20000410
 8002cc8:	20000310 	.word	0x20000310
 8002ccc:	2000041c 	.word	0x2000041c
 8002cd0:	2000042c 	.word	0x2000042c
 8002cd4:	20000418 	.word	0x20000418
 8002cd8:	20000314 	.word	0x20000314
 8002cdc:	e000ed04 	.word	0xe000ed04

08002ce0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b084      	sub	sp, #16
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d018      	beq.n	8002d24 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002cf2:	4b14      	ldr	r3, [pc, #80]	@ (8002d44 <vTaskDelay+0x64>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d00b      	beq.n	8002d12 <vTaskDelay+0x32>
	__asm volatile
 8002cfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cfe:	f383 8811 	msr	BASEPRI, r3
 8002d02:	f3bf 8f6f 	isb	sy
 8002d06:	f3bf 8f4f 	dsb	sy
 8002d0a:	60bb      	str	r3, [r7, #8]
}
 8002d0c:	bf00      	nop
 8002d0e:	bf00      	nop
 8002d10:	e7fd      	b.n	8002d0e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002d12:	f000 f87d 	bl	8002e10 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002d16:	2100      	movs	r1, #0
 8002d18:	6878      	ldr	r0, [r7, #4]
 8002d1a:	f000 fb39 	bl	8003390 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002d1e:	f000 f885 	bl	8002e2c <xTaskResumeAll>
 8002d22:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d107      	bne.n	8002d3a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8002d2a:	4b07      	ldr	r3, [pc, #28]	@ (8002d48 <vTaskDelay+0x68>)
 8002d2c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002d30:	601a      	str	r2, [r3, #0]
 8002d32:	f3bf 8f4f 	dsb	sy
 8002d36:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002d3a:	bf00      	nop
 8002d3c:	3710      	adds	r7, #16
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	20000438 	.word	0x20000438
 8002d48:	e000ed04 	.word	0xe000ed04

08002d4c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b08a      	sub	sp, #40	@ 0x28
 8002d50:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002d52:	2300      	movs	r3, #0
 8002d54:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002d56:	2300      	movs	r3, #0
 8002d58:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002d5a:	463a      	mov	r2, r7
 8002d5c:	1d39      	adds	r1, r7, #4
 8002d5e:	f107 0308 	add.w	r3, r7, #8
 8002d62:	4618      	mov	r0, r3
 8002d64:	f7fd fa34 	bl	80001d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002d68:	6839      	ldr	r1, [r7, #0]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	68ba      	ldr	r2, [r7, #8]
 8002d6e:	9202      	str	r2, [sp, #8]
 8002d70:	9301      	str	r3, [sp, #4]
 8002d72:	2300      	movs	r3, #0
 8002d74:	9300      	str	r3, [sp, #0]
 8002d76:	2300      	movs	r3, #0
 8002d78:	460a      	mov	r2, r1
 8002d7a:	491f      	ldr	r1, [pc, #124]	@ (8002df8 <vTaskStartScheduler+0xac>)
 8002d7c:	481f      	ldr	r0, [pc, #124]	@ (8002dfc <vTaskStartScheduler+0xb0>)
 8002d7e:	f7ff fe21 	bl	80029c4 <xTaskCreateStatic>
 8002d82:	4603      	mov	r3, r0
 8002d84:	4a1e      	ldr	r2, [pc, #120]	@ (8002e00 <vTaskStartScheduler+0xb4>)
 8002d86:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002d88:	4b1d      	ldr	r3, [pc, #116]	@ (8002e00 <vTaskStartScheduler+0xb4>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d002      	beq.n	8002d96 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002d90:	2301      	movs	r3, #1
 8002d92:	617b      	str	r3, [r7, #20]
 8002d94:	e001      	b.n	8002d9a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002d96:	2300      	movs	r3, #0
 8002d98:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d116      	bne.n	8002dce <vTaskStartScheduler+0x82>
	__asm volatile
 8002da0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002da4:	f383 8811 	msr	BASEPRI, r3
 8002da8:	f3bf 8f6f 	isb	sy
 8002dac:	f3bf 8f4f 	dsb	sy
 8002db0:	613b      	str	r3, [r7, #16]
}
 8002db2:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002db4:	4b13      	ldr	r3, [pc, #76]	@ (8002e04 <vTaskStartScheduler+0xb8>)
 8002db6:	f04f 32ff 	mov.w	r2, #4294967295
 8002dba:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002dbc:	4b12      	ldr	r3, [pc, #72]	@ (8002e08 <vTaskStartScheduler+0xbc>)
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8002dc2:	4b12      	ldr	r3, [pc, #72]	@ (8002e0c <vTaskStartScheduler+0xc0>)
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002dc8:	f000 fbd2 	bl	8003570 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002dcc:	e00f      	b.n	8002dee <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dd4:	d10b      	bne.n	8002dee <vTaskStartScheduler+0xa2>
	__asm volatile
 8002dd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002dda:	f383 8811 	msr	BASEPRI, r3
 8002dde:	f3bf 8f6f 	isb	sy
 8002de2:	f3bf 8f4f 	dsb	sy
 8002de6:	60fb      	str	r3, [r7, #12]
}
 8002de8:	bf00      	nop
 8002dea:	bf00      	nop
 8002dec:	e7fd      	b.n	8002dea <vTaskStartScheduler+0x9e>
}
 8002dee:	bf00      	nop
 8002df0:	3718      	adds	r7, #24
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	08003cd0 	.word	0x08003cd0
 8002dfc:	0800319d 	.word	0x0800319d
 8002e00:	20000434 	.word	0x20000434
 8002e04:	20000430 	.word	0x20000430
 8002e08:	2000041c 	.word	0x2000041c
 8002e0c:	20000414 	.word	0x20000414

08002e10 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002e10:	b480      	push	{r7}
 8002e12:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002e14:	4b04      	ldr	r3, [pc, #16]	@ (8002e28 <vTaskSuspendAll+0x18>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	3301      	adds	r3, #1
 8002e1a:	4a03      	ldr	r2, [pc, #12]	@ (8002e28 <vTaskSuspendAll+0x18>)
 8002e1c:	6013      	str	r3, [r2, #0]
}
 8002e1e:	bf00      	nop
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr
 8002e28:	20000438 	.word	0x20000438

08002e2c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b084      	sub	sp, #16
 8002e30:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002e32:	2300      	movs	r3, #0
 8002e34:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002e36:	2300      	movs	r3, #0
 8002e38:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002e3a:	4b42      	ldr	r3, [pc, #264]	@ (8002f44 <xTaskResumeAll+0x118>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d10b      	bne.n	8002e5a <xTaskResumeAll+0x2e>
	__asm volatile
 8002e42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e46:	f383 8811 	msr	BASEPRI, r3
 8002e4a:	f3bf 8f6f 	isb	sy
 8002e4e:	f3bf 8f4f 	dsb	sy
 8002e52:	603b      	str	r3, [r7, #0]
}
 8002e54:	bf00      	nop
 8002e56:	bf00      	nop
 8002e58:	e7fd      	b.n	8002e56 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002e5a:	f000 fc2d 	bl	80036b8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002e5e:	4b39      	ldr	r3, [pc, #228]	@ (8002f44 <xTaskResumeAll+0x118>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	3b01      	subs	r3, #1
 8002e64:	4a37      	ldr	r2, [pc, #220]	@ (8002f44 <xTaskResumeAll+0x118>)
 8002e66:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002e68:	4b36      	ldr	r3, [pc, #216]	@ (8002f44 <xTaskResumeAll+0x118>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d161      	bne.n	8002f34 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002e70:	4b35      	ldr	r3, [pc, #212]	@ (8002f48 <xTaskResumeAll+0x11c>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d05d      	beq.n	8002f34 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002e78:	e02e      	b.n	8002ed8 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002e7a:	4b34      	ldr	r3, [pc, #208]	@ (8002f4c <xTaskResumeAll+0x120>)
 8002e7c:	68db      	ldr	r3, [r3, #12]
 8002e7e:	68db      	ldr	r3, [r3, #12]
 8002e80:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	3318      	adds	r3, #24
 8002e86:	4618      	mov	r0, r3
 8002e88:	f7ff fd72 	bl	8002970 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	3304      	adds	r3, #4
 8002e90:	4618      	mov	r0, r3
 8002e92:	f7ff fd6d 	bl	8002970 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	409a      	lsls	r2, r3
 8002e9e:	4b2c      	ldr	r3, [pc, #176]	@ (8002f50 <xTaskResumeAll+0x124>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	4a2a      	ldr	r2, [pc, #168]	@ (8002f50 <xTaskResumeAll+0x124>)
 8002ea6:	6013      	str	r3, [r2, #0]
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002eac:	4613      	mov	r3, r2
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	4413      	add	r3, r2
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	4a27      	ldr	r2, [pc, #156]	@ (8002f54 <xTaskResumeAll+0x128>)
 8002eb6:	441a      	add	r2, r3
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	3304      	adds	r3, #4
 8002ebc:	4619      	mov	r1, r3
 8002ebe:	4610      	mov	r0, r2
 8002ec0:	f7ff fcf9 	bl	80028b6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ec8:	4b23      	ldr	r3, [pc, #140]	@ (8002f58 <xTaskResumeAll+0x12c>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	d302      	bcc.n	8002ed8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8002ed2:	4b22      	ldr	r3, [pc, #136]	@ (8002f5c <xTaskResumeAll+0x130>)
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002ed8:	4b1c      	ldr	r3, [pc, #112]	@ (8002f4c <xTaskResumeAll+0x120>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d1cc      	bne.n	8002e7a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d001      	beq.n	8002eea <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002ee6:	f000 fa0f 	bl	8003308 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002eea:	4b1d      	ldr	r3, [pc, #116]	@ (8002f60 <xTaskResumeAll+0x134>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d010      	beq.n	8002f18 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002ef6:	f000 f837 	bl	8002f68 <xTaskIncrementTick>
 8002efa:	4603      	mov	r3, r0
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d002      	beq.n	8002f06 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8002f00:	4b16      	ldr	r3, [pc, #88]	@ (8002f5c <xTaskResumeAll+0x130>)
 8002f02:	2201      	movs	r2, #1
 8002f04:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	3b01      	subs	r3, #1
 8002f0a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d1f1      	bne.n	8002ef6 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8002f12:	4b13      	ldr	r3, [pc, #76]	@ (8002f60 <xTaskResumeAll+0x134>)
 8002f14:	2200      	movs	r2, #0
 8002f16:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002f18:	4b10      	ldr	r3, [pc, #64]	@ (8002f5c <xTaskResumeAll+0x130>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d009      	beq.n	8002f34 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002f20:	2301      	movs	r3, #1
 8002f22:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002f24:	4b0f      	ldr	r3, [pc, #60]	@ (8002f64 <xTaskResumeAll+0x138>)
 8002f26:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002f2a:	601a      	str	r2, [r3, #0]
 8002f2c:	f3bf 8f4f 	dsb	sy
 8002f30:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002f34:	f000 fbf2 	bl	800371c <vPortExitCritical>

	return xAlreadyYielded;
 8002f38:	68bb      	ldr	r3, [r7, #8]
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3710      	adds	r7, #16
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	20000438 	.word	0x20000438
 8002f48:	20000410 	.word	0x20000410
 8002f4c:	200003d0 	.word	0x200003d0
 8002f50:	20000418 	.word	0x20000418
 8002f54:	20000314 	.word	0x20000314
 8002f58:	20000310 	.word	0x20000310
 8002f5c:	20000424 	.word	0x20000424
 8002f60:	20000420 	.word	0x20000420
 8002f64:	e000ed04 	.word	0xe000ed04

08002f68 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b086      	sub	sp, #24
 8002f6c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002f72:	4b51      	ldr	r3, [pc, #324]	@ (80030b8 <xTaskIncrementTick+0x150>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	f040 808e 	bne.w	8003098 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002f7c:	4b4f      	ldr	r3, [pc, #316]	@ (80030bc <xTaskIncrementTick+0x154>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	3301      	adds	r3, #1
 8002f82:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002f84:	4a4d      	ldr	r2, [pc, #308]	@ (80030bc <xTaskIncrementTick+0x154>)
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d121      	bne.n	8002fd4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8002f90:	4b4b      	ldr	r3, [pc, #300]	@ (80030c0 <xTaskIncrementTick+0x158>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d00b      	beq.n	8002fb2 <xTaskIncrementTick+0x4a>
	__asm volatile
 8002f9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f9e:	f383 8811 	msr	BASEPRI, r3
 8002fa2:	f3bf 8f6f 	isb	sy
 8002fa6:	f3bf 8f4f 	dsb	sy
 8002faa:	603b      	str	r3, [r7, #0]
}
 8002fac:	bf00      	nop
 8002fae:	bf00      	nop
 8002fb0:	e7fd      	b.n	8002fae <xTaskIncrementTick+0x46>
 8002fb2:	4b43      	ldr	r3, [pc, #268]	@ (80030c0 <xTaskIncrementTick+0x158>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	60fb      	str	r3, [r7, #12]
 8002fb8:	4b42      	ldr	r3, [pc, #264]	@ (80030c4 <xTaskIncrementTick+0x15c>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a40      	ldr	r2, [pc, #256]	@ (80030c0 <xTaskIncrementTick+0x158>)
 8002fbe:	6013      	str	r3, [r2, #0]
 8002fc0:	4a40      	ldr	r2, [pc, #256]	@ (80030c4 <xTaskIncrementTick+0x15c>)
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	6013      	str	r3, [r2, #0]
 8002fc6:	4b40      	ldr	r3, [pc, #256]	@ (80030c8 <xTaskIncrementTick+0x160>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	3301      	adds	r3, #1
 8002fcc:	4a3e      	ldr	r2, [pc, #248]	@ (80030c8 <xTaskIncrementTick+0x160>)
 8002fce:	6013      	str	r3, [r2, #0]
 8002fd0:	f000 f99a 	bl	8003308 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002fd4:	4b3d      	ldr	r3, [pc, #244]	@ (80030cc <xTaskIncrementTick+0x164>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	693a      	ldr	r2, [r7, #16]
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	d34d      	bcc.n	800307a <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002fde:	4b38      	ldr	r3, [pc, #224]	@ (80030c0 <xTaskIncrementTick+0x158>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d101      	bne.n	8002fec <xTaskIncrementTick+0x84>
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e000      	b.n	8002fee <xTaskIncrementTick+0x86>
 8002fec:	2300      	movs	r3, #0
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d004      	beq.n	8002ffc <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ff2:	4b36      	ldr	r3, [pc, #216]	@ (80030cc <xTaskIncrementTick+0x164>)
 8002ff4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ff8:	601a      	str	r2, [r3, #0]
					break;
 8002ffa:	e03e      	b.n	800307a <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002ffc:	4b30      	ldr	r3, [pc, #192]	@ (80030c0 <xTaskIncrementTick+0x158>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	68db      	ldr	r3, [r3, #12]
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800300c:	693a      	ldr	r2, [r7, #16]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	429a      	cmp	r2, r3
 8003012:	d203      	bcs.n	800301c <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003014:	4a2d      	ldr	r2, [pc, #180]	@ (80030cc <xTaskIncrementTick+0x164>)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6013      	str	r3, [r2, #0]
						break;
 800301a:	e02e      	b.n	800307a <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	3304      	adds	r3, #4
 8003020:	4618      	mov	r0, r3
 8003022:	f7ff fca5 	bl	8002970 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800302a:	2b00      	cmp	r3, #0
 800302c:	d004      	beq.n	8003038 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	3318      	adds	r3, #24
 8003032:	4618      	mov	r0, r3
 8003034:	f7ff fc9c 	bl	8002970 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800303c:	2201      	movs	r2, #1
 800303e:	409a      	lsls	r2, r3
 8003040:	4b23      	ldr	r3, [pc, #140]	@ (80030d0 <xTaskIncrementTick+0x168>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4313      	orrs	r3, r2
 8003046:	4a22      	ldr	r2, [pc, #136]	@ (80030d0 <xTaskIncrementTick+0x168>)
 8003048:	6013      	str	r3, [r2, #0]
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800304e:	4613      	mov	r3, r2
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	4413      	add	r3, r2
 8003054:	009b      	lsls	r3, r3, #2
 8003056:	4a1f      	ldr	r2, [pc, #124]	@ (80030d4 <xTaskIncrementTick+0x16c>)
 8003058:	441a      	add	r2, r3
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	3304      	adds	r3, #4
 800305e:	4619      	mov	r1, r3
 8003060:	4610      	mov	r0, r2
 8003062:	f7ff fc28 	bl	80028b6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800306a:	4b1b      	ldr	r3, [pc, #108]	@ (80030d8 <xTaskIncrementTick+0x170>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003070:	429a      	cmp	r2, r3
 8003072:	d3b4      	bcc.n	8002fde <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003074:	2301      	movs	r3, #1
 8003076:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003078:	e7b1      	b.n	8002fde <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800307a:	4b17      	ldr	r3, [pc, #92]	@ (80030d8 <xTaskIncrementTick+0x170>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003080:	4914      	ldr	r1, [pc, #80]	@ (80030d4 <xTaskIncrementTick+0x16c>)
 8003082:	4613      	mov	r3, r2
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	4413      	add	r3, r2
 8003088:	009b      	lsls	r3, r3, #2
 800308a:	440b      	add	r3, r1
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	2b01      	cmp	r3, #1
 8003090:	d907      	bls.n	80030a2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8003092:	2301      	movs	r3, #1
 8003094:	617b      	str	r3, [r7, #20]
 8003096:	e004      	b.n	80030a2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003098:	4b10      	ldr	r3, [pc, #64]	@ (80030dc <xTaskIncrementTick+0x174>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	3301      	adds	r3, #1
 800309e:	4a0f      	ldr	r2, [pc, #60]	@ (80030dc <xTaskIncrementTick+0x174>)
 80030a0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80030a2:	4b0f      	ldr	r3, [pc, #60]	@ (80030e0 <xTaskIncrementTick+0x178>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d001      	beq.n	80030ae <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 80030aa:	2301      	movs	r3, #1
 80030ac:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80030ae:	697b      	ldr	r3, [r7, #20]
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	3718      	adds	r7, #24
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}
 80030b8:	20000438 	.word	0x20000438
 80030bc:	20000414 	.word	0x20000414
 80030c0:	200003c8 	.word	0x200003c8
 80030c4:	200003cc 	.word	0x200003cc
 80030c8:	20000428 	.word	0x20000428
 80030cc:	20000430 	.word	0x20000430
 80030d0:	20000418 	.word	0x20000418
 80030d4:	20000314 	.word	0x20000314
 80030d8:	20000310 	.word	0x20000310
 80030dc:	20000420 	.word	0x20000420
 80030e0:	20000424 	.word	0x20000424

080030e4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80030e4:	b480      	push	{r7}
 80030e6:	b087      	sub	sp, #28
 80030e8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80030ea:	4b27      	ldr	r3, [pc, #156]	@ (8003188 <vTaskSwitchContext+0xa4>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d003      	beq.n	80030fa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80030f2:	4b26      	ldr	r3, [pc, #152]	@ (800318c <vTaskSwitchContext+0xa8>)
 80030f4:	2201      	movs	r2, #1
 80030f6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80030f8:	e040      	b.n	800317c <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80030fa:	4b24      	ldr	r3, [pc, #144]	@ (800318c <vTaskSwitchContext+0xa8>)
 80030fc:	2200      	movs	r2, #0
 80030fe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003100:	4b23      	ldr	r3, [pc, #140]	@ (8003190 <vTaskSwitchContext+0xac>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	fab3 f383 	clz	r3, r3
 800310c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800310e:	7afb      	ldrb	r3, [r7, #11]
 8003110:	f1c3 031f 	rsb	r3, r3, #31
 8003114:	617b      	str	r3, [r7, #20]
 8003116:	491f      	ldr	r1, [pc, #124]	@ (8003194 <vTaskSwitchContext+0xb0>)
 8003118:	697a      	ldr	r2, [r7, #20]
 800311a:	4613      	mov	r3, r2
 800311c:	009b      	lsls	r3, r3, #2
 800311e:	4413      	add	r3, r2
 8003120:	009b      	lsls	r3, r3, #2
 8003122:	440b      	add	r3, r1
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d10b      	bne.n	8003142 <vTaskSwitchContext+0x5e>
	__asm volatile
 800312a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800312e:	f383 8811 	msr	BASEPRI, r3
 8003132:	f3bf 8f6f 	isb	sy
 8003136:	f3bf 8f4f 	dsb	sy
 800313a:	607b      	str	r3, [r7, #4]
}
 800313c:	bf00      	nop
 800313e:	bf00      	nop
 8003140:	e7fd      	b.n	800313e <vTaskSwitchContext+0x5a>
 8003142:	697a      	ldr	r2, [r7, #20]
 8003144:	4613      	mov	r3, r2
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	4413      	add	r3, r2
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	4a11      	ldr	r2, [pc, #68]	@ (8003194 <vTaskSwitchContext+0xb0>)
 800314e:	4413      	add	r3, r2
 8003150:	613b      	str	r3, [r7, #16]
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	685a      	ldr	r2, [r3, #4]
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	605a      	str	r2, [r3, #4]
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	685a      	ldr	r2, [r3, #4]
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	3308      	adds	r3, #8
 8003164:	429a      	cmp	r2, r3
 8003166:	d104      	bne.n	8003172 <vTaskSwitchContext+0x8e>
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	685a      	ldr	r2, [r3, #4]
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	605a      	str	r2, [r3, #4]
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	4a07      	ldr	r2, [pc, #28]	@ (8003198 <vTaskSwitchContext+0xb4>)
 800317a:	6013      	str	r3, [r2, #0]
}
 800317c:	bf00      	nop
 800317e:	371c      	adds	r7, #28
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr
 8003188:	20000438 	.word	0x20000438
 800318c:	20000424 	.word	0x20000424
 8003190:	20000418 	.word	0x20000418
 8003194:	20000314 	.word	0x20000314
 8003198:	20000310 	.word	0x20000310

0800319c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b082      	sub	sp, #8
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80031a4:	f000 f852 	bl	800324c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80031a8:	4b06      	ldr	r3, [pc, #24]	@ (80031c4 <prvIdleTask+0x28>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d9f9      	bls.n	80031a4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80031b0:	4b05      	ldr	r3, [pc, #20]	@ (80031c8 <prvIdleTask+0x2c>)
 80031b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80031b6:	601a      	str	r2, [r3, #0]
 80031b8:	f3bf 8f4f 	dsb	sy
 80031bc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80031c0:	e7f0      	b.n	80031a4 <prvIdleTask+0x8>
 80031c2:	bf00      	nop
 80031c4:	20000314 	.word	0x20000314
 80031c8:	e000ed04 	.word	0xe000ed04

080031cc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b082      	sub	sp, #8
 80031d0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80031d2:	2300      	movs	r3, #0
 80031d4:	607b      	str	r3, [r7, #4]
 80031d6:	e00c      	b.n	80031f2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80031d8:	687a      	ldr	r2, [r7, #4]
 80031da:	4613      	mov	r3, r2
 80031dc:	009b      	lsls	r3, r3, #2
 80031de:	4413      	add	r3, r2
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	4a12      	ldr	r2, [pc, #72]	@ (800322c <prvInitialiseTaskLists+0x60>)
 80031e4:	4413      	add	r3, r2
 80031e6:	4618      	mov	r0, r3
 80031e8:	f7ff fb38 	bl	800285c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	3301      	adds	r3, #1
 80031f0:	607b      	str	r3, [r7, #4]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2b06      	cmp	r3, #6
 80031f6:	d9ef      	bls.n	80031d8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80031f8:	480d      	ldr	r0, [pc, #52]	@ (8003230 <prvInitialiseTaskLists+0x64>)
 80031fa:	f7ff fb2f 	bl	800285c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80031fe:	480d      	ldr	r0, [pc, #52]	@ (8003234 <prvInitialiseTaskLists+0x68>)
 8003200:	f7ff fb2c 	bl	800285c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003204:	480c      	ldr	r0, [pc, #48]	@ (8003238 <prvInitialiseTaskLists+0x6c>)
 8003206:	f7ff fb29 	bl	800285c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800320a:	480c      	ldr	r0, [pc, #48]	@ (800323c <prvInitialiseTaskLists+0x70>)
 800320c:	f7ff fb26 	bl	800285c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003210:	480b      	ldr	r0, [pc, #44]	@ (8003240 <prvInitialiseTaskLists+0x74>)
 8003212:	f7ff fb23 	bl	800285c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003216:	4b0b      	ldr	r3, [pc, #44]	@ (8003244 <prvInitialiseTaskLists+0x78>)
 8003218:	4a05      	ldr	r2, [pc, #20]	@ (8003230 <prvInitialiseTaskLists+0x64>)
 800321a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800321c:	4b0a      	ldr	r3, [pc, #40]	@ (8003248 <prvInitialiseTaskLists+0x7c>)
 800321e:	4a05      	ldr	r2, [pc, #20]	@ (8003234 <prvInitialiseTaskLists+0x68>)
 8003220:	601a      	str	r2, [r3, #0]
}
 8003222:	bf00      	nop
 8003224:	3708      	adds	r7, #8
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}
 800322a:	bf00      	nop
 800322c:	20000314 	.word	0x20000314
 8003230:	200003a0 	.word	0x200003a0
 8003234:	200003b4 	.word	0x200003b4
 8003238:	200003d0 	.word	0x200003d0
 800323c:	200003e4 	.word	0x200003e4
 8003240:	200003fc 	.word	0x200003fc
 8003244:	200003c8 	.word	0x200003c8
 8003248:	200003cc 	.word	0x200003cc

0800324c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b082      	sub	sp, #8
 8003250:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003252:	e019      	b.n	8003288 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003254:	f000 fa30 	bl	80036b8 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003258:	4b10      	ldr	r3, [pc, #64]	@ (800329c <prvCheckTasksWaitingTermination+0x50>)
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	68db      	ldr	r3, [r3, #12]
 800325e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	3304      	adds	r3, #4
 8003264:	4618      	mov	r0, r3
 8003266:	f7ff fb83 	bl	8002970 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800326a:	4b0d      	ldr	r3, [pc, #52]	@ (80032a0 <prvCheckTasksWaitingTermination+0x54>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	3b01      	subs	r3, #1
 8003270:	4a0b      	ldr	r2, [pc, #44]	@ (80032a0 <prvCheckTasksWaitingTermination+0x54>)
 8003272:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003274:	4b0b      	ldr	r3, [pc, #44]	@ (80032a4 <prvCheckTasksWaitingTermination+0x58>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	3b01      	subs	r3, #1
 800327a:	4a0a      	ldr	r2, [pc, #40]	@ (80032a4 <prvCheckTasksWaitingTermination+0x58>)
 800327c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800327e:	f000 fa4d 	bl	800371c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f000 f810 	bl	80032a8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003288:	4b06      	ldr	r3, [pc, #24]	@ (80032a4 <prvCheckTasksWaitingTermination+0x58>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d1e1      	bne.n	8003254 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003290:	bf00      	nop
 8003292:	bf00      	nop
 8003294:	3708      	adds	r7, #8
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}
 800329a:	bf00      	nop
 800329c:	200003e4 	.word	0x200003e4
 80032a0:	20000410 	.word	0x20000410
 80032a4:	200003f8 	.word	0x200003f8

080032a8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b084      	sub	sp, #16
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d108      	bne.n	80032cc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032be:	4618      	mov	r0, r3
 80032c0:	f000 fba2 	bl	8003a08 <vPortFree>
				vPortFree( pxTCB );
 80032c4:	6878      	ldr	r0, [r7, #4]
 80032c6:	f000 fb9f 	bl	8003a08 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80032ca:	e019      	b.n	8003300 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d103      	bne.n	80032de <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f000 fb96 	bl	8003a08 <vPortFree>
	}
 80032dc:	e010      	b.n	8003300 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80032e4:	2b02      	cmp	r3, #2
 80032e6:	d00b      	beq.n	8003300 <prvDeleteTCB+0x58>
	__asm volatile
 80032e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032ec:	f383 8811 	msr	BASEPRI, r3
 80032f0:	f3bf 8f6f 	isb	sy
 80032f4:	f3bf 8f4f 	dsb	sy
 80032f8:	60fb      	str	r3, [r7, #12]
}
 80032fa:	bf00      	nop
 80032fc:	bf00      	nop
 80032fe:	e7fd      	b.n	80032fc <prvDeleteTCB+0x54>
	}
 8003300:	bf00      	nop
 8003302:	3710      	adds	r7, #16
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}

08003308 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003308:	b480      	push	{r7}
 800330a:	b083      	sub	sp, #12
 800330c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800330e:	4b0f      	ldr	r3, [pc, #60]	@ (800334c <prvResetNextTaskUnblockTime+0x44>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d101      	bne.n	800331c <prvResetNextTaskUnblockTime+0x14>
 8003318:	2301      	movs	r3, #1
 800331a:	e000      	b.n	800331e <prvResetNextTaskUnblockTime+0x16>
 800331c:	2300      	movs	r3, #0
 800331e:	2b00      	cmp	r3, #0
 8003320:	d004      	beq.n	800332c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003322:	4b0b      	ldr	r3, [pc, #44]	@ (8003350 <prvResetNextTaskUnblockTime+0x48>)
 8003324:	f04f 32ff 	mov.w	r2, #4294967295
 8003328:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800332a:	e008      	b.n	800333e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800332c:	4b07      	ldr	r3, [pc, #28]	@ (800334c <prvResetNextTaskUnblockTime+0x44>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	68db      	ldr	r3, [r3, #12]
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	4a05      	ldr	r2, [pc, #20]	@ (8003350 <prvResetNextTaskUnblockTime+0x48>)
 800333c:	6013      	str	r3, [r2, #0]
}
 800333e:	bf00      	nop
 8003340:	370c      	adds	r7, #12
 8003342:	46bd      	mov	sp, r7
 8003344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003348:	4770      	bx	lr
 800334a:	bf00      	nop
 800334c:	200003c8 	.word	0x200003c8
 8003350:	20000430 	.word	0x20000430

08003354 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003354:	b480      	push	{r7}
 8003356:	b083      	sub	sp, #12
 8003358:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800335a:	4b0b      	ldr	r3, [pc, #44]	@ (8003388 <xTaskGetSchedulerState+0x34>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d102      	bne.n	8003368 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003362:	2301      	movs	r3, #1
 8003364:	607b      	str	r3, [r7, #4]
 8003366:	e008      	b.n	800337a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003368:	4b08      	ldr	r3, [pc, #32]	@ (800338c <xTaskGetSchedulerState+0x38>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d102      	bne.n	8003376 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003370:	2302      	movs	r3, #2
 8003372:	607b      	str	r3, [r7, #4]
 8003374:	e001      	b.n	800337a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003376:	2300      	movs	r3, #0
 8003378:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800337a:	687b      	ldr	r3, [r7, #4]
	}
 800337c:	4618      	mov	r0, r3
 800337e:	370c      	adds	r7, #12
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr
 8003388:	2000041c 	.word	0x2000041c
 800338c:	20000438 	.word	0x20000438

08003390 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b084      	sub	sp, #16
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800339a:	4b29      	ldr	r3, [pc, #164]	@ (8003440 <prvAddCurrentTaskToDelayedList+0xb0>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80033a0:	4b28      	ldr	r3, [pc, #160]	@ (8003444 <prvAddCurrentTaskToDelayedList+0xb4>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	3304      	adds	r3, #4
 80033a6:	4618      	mov	r0, r3
 80033a8:	f7ff fae2 	bl	8002970 <uxListRemove>
 80033ac:	4603      	mov	r3, r0
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d10b      	bne.n	80033ca <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80033b2:	4b24      	ldr	r3, [pc, #144]	@ (8003444 <prvAddCurrentTaskToDelayedList+0xb4>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033b8:	2201      	movs	r2, #1
 80033ba:	fa02 f303 	lsl.w	r3, r2, r3
 80033be:	43da      	mvns	r2, r3
 80033c0:	4b21      	ldr	r3, [pc, #132]	@ (8003448 <prvAddCurrentTaskToDelayedList+0xb8>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4013      	ands	r3, r2
 80033c6:	4a20      	ldr	r2, [pc, #128]	@ (8003448 <prvAddCurrentTaskToDelayedList+0xb8>)
 80033c8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033d0:	d10a      	bne.n	80033e8 <prvAddCurrentTaskToDelayedList+0x58>
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d007      	beq.n	80033e8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80033d8:	4b1a      	ldr	r3, [pc, #104]	@ (8003444 <prvAddCurrentTaskToDelayedList+0xb4>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	3304      	adds	r3, #4
 80033de:	4619      	mov	r1, r3
 80033e0:	481a      	ldr	r0, [pc, #104]	@ (800344c <prvAddCurrentTaskToDelayedList+0xbc>)
 80033e2:	f7ff fa68 	bl	80028b6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80033e6:	e026      	b.n	8003436 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80033e8:	68fa      	ldr	r2, [r7, #12]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	4413      	add	r3, r2
 80033ee:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80033f0:	4b14      	ldr	r3, [pc, #80]	@ (8003444 <prvAddCurrentTaskToDelayedList+0xb4>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	68ba      	ldr	r2, [r7, #8]
 80033f6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80033f8:	68ba      	ldr	r2, [r7, #8]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	429a      	cmp	r2, r3
 80033fe:	d209      	bcs.n	8003414 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003400:	4b13      	ldr	r3, [pc, #76]	@ (8003450 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	4b0f      	ldr	r3, [pc, #60]	@ (8003444 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	3304      	adds	r3, #4
 800340a:	4619      	mov	r1, r3
 800340c:	4610      	mov	r0, r2
 800340e:	f7ff fa76 	bl	80028fe <vListInsert>
}
 8003412:	e010      	b.n	8003436 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003414:	4b0f      	ldr	r3, [pc, #60]	@ (8003454 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	4b0a      	ldr	r3, [pc, #40]	@ (8003444 <prvAddCurrentTaskToDelayedList+0xb4>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	3304      	adds	r3, #4
 800341e:	4619      	mov	r1, r3
 8003420:	4610      	mov	r0, r2
 8003422:	f7ff fa6c 	bl	80028fe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003426:	4b0c      	ldr	r3, [pc, #48]	@ (8003458 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	68ba      	ldr	r2, [r7, #8]
 800342c:	429a      	cmp	r2, r3
 800342e:	d202      	bcs.n	8003436 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003430:	4a09      	ldr	r2, [pc, #36]	@ (8003458 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	6013      	str	r3, [r2, #0]
}
 8003436:	bf00      	nop
 8003438:	3710      	adds	r7, #16
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
 800343e:	bf00      	nop
 8003440:	20000414 	.word	0x20000414
 8003444:	20000310 	.word	0x20000310
 8003448:	20000418 	.word	0x20000418
 800344c:	200003fc 	.word	0x200003fc
 8003450:	200003cc 	.word	0x200003cc
 8003454:	200003c8 	.word	0x200003c8
 8003458:	20000430 	.word	0x20000430

0800345c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800345c:	b480      	push	{r7}
 800345e:	b085      	sub	sp, #20
 8003460:	af00      	add	r7, sp, #0
 8003462:	60f8      	str	r0, [r7, #12]
 8003464:	60b9      	str	r1, [r7, #8]
 8003466:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	3b04      	subs	r3, #4
 800346c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003474:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	3b04      	subs	r3, #4
 800347a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	f023 0201 	bic.w	r2, r3, #1
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	3b04      	subs	r3, #4
 800348a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800348c:	4a0c      	ldr	r2, [pc, #48]	@ (80034c0 <pxPortInitialiseStack+0x64>)
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	3b14      	subs	r3, #20
 8003496:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003498:	687a      	ldr	r2, [r7, #4]
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	3b04      	subs	r3, #4
 80034a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f06f 0202 	mvn.w	r2, #2
 80034aa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	3b20      	subs	r3, #32
 80034b0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80034b2:	68fb      	ldr	r3, [r7, #12]
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	3714      	adds	r7, #20
 80034b8:	46bd      	mov	sp, r7
 80034ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034be:	4770      	bx	lr
 80034c0:	080034c5 	.word	0x080034c5

080034c4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80034c4:	b480      	push	{r7}
 80034c6:	b085      	sub	sp, #20
 80034c8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80034ca:	2300      	movs	r3, #0
 80034cc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80034ce:	4b13      	ldr	r3, [pc, #76]	@ (800351c <prvTaskExitError+0x58>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034d6:	d00b      	beq.n	80034f0 <prvTaskExitError+0x2c>
	__asm volatile
 80034d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034dc:	f383 8811 	msr	BASEPRI, r3
 80034e0:	f3bf 8f6f 	isb	sy
 80034e4:	f3bf 8f4f 	dsb	sy
 80034e8:	60fb      	str	r3, [r7, #12]
}
 80034ea:	bf00      	nop
 80034ec:	bf00      	nop
 80034ee:	e7fd      	b.n	80034ec <prvTaskExitError+0x28>
	__asm volatile
 80034f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034f4:	f383 8811 	msr	BASEPRI, r3
 80034f8:	f3bf 8f6f 	isb	sy
 80034fc:	f3bf 8f4f 	dsb	sy
 8003500:	60bb      	str	r3, [r7, #8]
}
 8003502:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003504:	bf00      	nop
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d0fc      	beq.n	8003506 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800350c:	bf00      	nop
 800350e:	bf00      	nop
 8003510:	3714      	adds	r7, #20
 8003512:	46bd      	mov	sp, r7
 8003514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003518:	4770      	bx	lr
 800351a:	bf00      	nop
 800351c:	2000000c 	.word	0x2000000c

08003520 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003520:	4b07      	ldr	r3, [pc, #28]	@ (8003540 <pxCurrentTCBConst2>)
 8003522:	6819      	ldr	r1, [r3, #0]
 8003524:	6808      	ldr	r0, [r1, #0]
 8003526:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800352a:	f380 8809 	msr	PSP, r0
 800352e:	f3bf 8f6f 	isb	sy
 8003532:	f04f 0000 	mov.w	r0, #0
 8003536:	f380 8811 	msr	BASEPRI, r0
 800353a:	4770      	bx	lr
 800353c:	f3af 8000 	nop.w

08003540 <pxCurrentTCBConst2>:
 8003540:	20000310 	.word	0x20000310
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003544:	bf00      	nop
 8003546:	bf00      	nop

08003548 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003548:	4808      	ldr	r0, [pc, #32]	@ (800356c <prvPortStartFirstTask+0x24>)
 800354a:	6800      	ldr	r0, [r0, #0]
 800354c:	6800      	ldr	r0, [r0, #0]
 800354e:	f380 8808 	msr	MSP, r0
 8003552:	f04f 0000 	mov.w	r0, #0
 8003556:	f380 8814 	msr	CONTROL, r0
 800355a:	b662      	cpsie	i
 800355c:	b661      	cpsie	f
 800355e:	f3bf 8f4f 	dsb	sy
 8003562:	f3bf 8f6f 	isb	sy
 8003566:	df00      	svc	0
 8003568:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800356a:	bf00      	nop
 800356c:	e000ed08 	.word	0xe000ed08

08003570 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b086      	sub	sp, #24
 8003574:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003576:	4b47      	ldr	r3, [pc, #284]	@ (8003694 <xPortStartScheduler+0x124>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a47      	ldr	r2, [pc, #284]	@ (8003698 <xPortStartScheduler+0x128>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d10b      	bne.n	8003598 <xPortStartScheduler+0x28>
	__asm volatile
 8003580:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003584:	f383 8811 	msr	BASEPRI, r3
 8003588:	f3bf 8f6f 	isb	sy
 800358c:	f3bf 8f4f 	dsb	sy
 8003590:	613b      	str	r3, [r7, #16]
}
 8003592:	bf00      	nop
 8003594:	bf00      	nop
 8003596:	e7fd      	b.n	8003594 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003598:	4b3e      	ldr	r3, [pc, #248]	@ (8003694 <xPortStartScheduler+0x124>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a3f      	ldr	r2, [pc, #252]	@ (800369c <xPortStartScheduler+0x12c>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d10b      	bne.n	80035ba <xPortStartScheduler+0x4a>
	__asm volatile
 80035a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035a6:	f383 8811 	msr	BASEPRI, r3
 80035aa:	f3bf 8f6f 	isb	sy
 80035ae:	f3bf 8f4f 	dsb	sy
 80035b2:	60fb      	str	r3, [r7, #12]
}
 80035b4:	bf00      	nop
 80035b6:	bf00      	nop
 80035b8:	e7fd      	b.n	80035b6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80035ba:	4b39      	ldr	r3, [pc, #228]	@ (80036a0 <xPortStartScheduler+0x130>)
 80035bc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	781b      	ldrb	r3, [r3, #0]
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	22ff      	movs	r2, #255	@ 0xff
 80035ca:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	781b      	ldrb	r3, [r3, #0]
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80035d4:	78fb      	ldrb	r3, [r7, #3]
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80035dc:	b2da      	uxtb	r2, r3
 80035de:	4b31      	ldr	r3, [pc, #196]	@ (80036a4 <xPortStartScheduler+0x134>)
 80035e0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80035e2:	4b31      	ldr	r3, [pc, #196]	@ (80036a8 <xPortStartScheduler+0x138>)
 80035e4:	2207      	movs	r2, #7
 80035e6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80035e8:	e009      	b.n	80035fe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80035ea:	4b2f      	ldr	r3, [pc, #188]	@ (80036a8 <xPortStartScheduler+0x138>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	3b01      	subs	r3, #1
 80035f0:	4a2d      	ldr	r2, [pc, #180]	@ (80036a8 <xPortStartScheduler+0x138>)
 80035f2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80035f4:	78fb      	ldrb	r3, [r7, #3]
 80035f6:	b2db      	uxtb	r3, r3
 80035f8:	005b      	lsls	r3, r3, #1
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80035fe:	78fb      	ldrb	r3, [r7, #3]
 8003600:	b2db      	uxtb	r3, r3
 8003602:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003606:	2b80      	cmp	r3, #128	@ 0x80
 8003608:	d0ef      	beq.n	80035ea <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800360a:	4b27      	ldr	r3, [pc, #156]	@ (80036a8 <xPortStartScheduler+0x138>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f1c3 0307 	rsb	r3, r3, #7
 8003612:	2b04      	cmp	r3, #4
 8003614:	d00b      	beq.n	800362e <xPortStartScheduler+0xbe>
	__asm volatile
 8003616:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800361a:	f383 8811 	msr	BASEPRI, r3
 800361e:	f3bf 8f6f 	isb	sy
 8003622:	f3bf 8f4f 	dsb	sy
 8003626:	60bb      	str	r3, [r7, #8]
}
 8003628:	bf00      	nop
 800362a:	bf00      	nop
 800362c:	e7fd      	b.n	800362a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800362e:	4b1e      	ldr	r3, [pc, #120]	@ (80036a8 <xPortStartScheduler+0x138>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	021b      	lsls	r3, r3, #8
 8003634:	4a1c      	ldr	r2, [pc, #112]	@ (80036a8 <xPortStartScheduler+0x138>)
 8003636:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003638:	4b1b      	ldr	r3, [pc, #108]	@ (80036a8 <xPortStartScheduler+0x138>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003640:	4a19      	ldr	r2, [pc, #100]	@ (80036a8 <xPortStartScheduler+0x138>)
 8003642:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	b2da      	uxtb	r2, r3
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800364c:	4b17      	ldr	r3, [pc, #92]	@ (80036ac <xPortStartScheduler+0x13c>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a16      	ldr	r2, [pc, #88]	@ (80036ac <xPortStartScheduler+0x13c>)
 8003652:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003656:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003658:	4b14      	ldr	r3, [pc, #80]	@ (80036ac <xPortStartScheduler+0x13c>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a13      	ldr	r2, [pc, #76]	@ (80036ac <xPortStartScheduler+0x13c>)
 800365e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8003662:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003664:	f000 f8da 	bl	800381c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003668:	4b11      	ldr	r3, [pc, #68]	@ (80036b0 <xPortStartScheduler+0x140>)
 800366a:	2200      	movs	r2, #0
 800366c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800366e:	f000 f8f9 	bl	8003864 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003672:	4b10      	ldr	r3, [pc, #64]	@ (80036b4 <xPortStartScheduler+0x144>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a0f      	ldr	r2, [pc, #60]	@ (80036b4 <xPortStartScheduler+0x144>)
 8003678:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800367c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800367e:	f7ff ff63 	bl	8003548 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003682:	f7ff fd2f 	bl	80030e4 <vTaskSwitchContext>
	prvTaskExitError();
 8003686:	f7ff ff1d 	bl	80034c4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800368a:	2300      	movs	r3, #0
}
 800368c:	4618      	mov	r0, r3
 800368e:	3718      	adds	r7, #24
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}
 8003694:	e000ed00 	.word	0xe000ed00
 8003698:	410fc271 	.word	0x410fc271
 800369c:	410fc270 	.word	0x410fc270
 80036a0:	e000e400 	.word	0xe000e400
 80036a4:	2000043c 	.word	0x2000043c
 80036a8:	20000440 	.word	0x20000440
 80036ac:	e000ed20 	.word	0xe000ed20
 80036b0:	2000000c 	.word	0x2000000c
 80036b4:	e000ef34 	.word	0xe000ef34

080036b8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80036b8:	b480      	push	{r7}
 80036ba:	b083      	sub	sp, #12
 80036bc:	af00      	add	r7, sp, #0
	__asm volatile
 80036be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036c2:	f383 8811 	msr	BASEPRI, r3
 80036c6:	f3bf 8f6f 	isb	sy
 80036ca:	f3bf 8f4f 	dsb	sy
 80036ce:	607b      	str	r3, [r7, #4]
}
 80036d0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80036d2:	4b10      	ldr	r3, [pc, #64]	@ (8003714 <vPortEnterCritical+0x5c>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	3301      	adds	r3, #1
 80036d8:	4a0e      	ldr	r2, [pc, #56]	@ (8003714 <vPortEnterCritical+0x5c>)
 80036da:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80036dc:	4b0d      	ldr	r3, [pc, #52]	@ (8003714 <vPortEnterCritical+0x5c>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d110      	bne.n	8003706 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80036e4:	4b0c      	ldr	r3, [pc, #48]	@ (8003718 <vPortEnterCritical+0x60>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d00b      	beq.n	8003706 <vPortEnterCritical+0x4e>
	__asm volatile
 80036ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036f2:	f383 8811 	msr	BASEPRI, r3
 80036f6:	f3bf 8f6f 	isb	sy
 80036fa:	f3bf 8f4f 	dsb	sy
 80036fe:	603b      	str	r3, [r7, #0]
}
 8003700:	bf00      	nop
 8003702:	bf00      	nop
 8003704:	e7fd      	b.n	8003702 <vPortEnterCritical+0x4a>
	}
}
 8003706:	bf00      	nop
 8003708:	370c      	adds	r7, #12
 800370a:	46bd      	mov	sp, r7
 800370c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003710:	4770      	bx	lr
 8003712:	bf00      	nop
 8003714:	2000000c 	.word	0x2000000c
 8003718:	e000ed04 	.word	0xe000ed04

0800371c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800371c:	b480      	push	{r7}
 800371e:	b083      	sub	sp, #12
 8003720:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003722:	4b12      	ldr	r3, [pc, #72]	@ (800376c <vPortExitCritical+0x50>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d10b      	bne.n	8003742 <vPortExitCritical+0x26>
	__asm volatile
 800372a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800372e:	f383 8811 	msr	BASEPRI, r3
 8003732:	f3bf 8f6f 	isb	sy
 8003736:	f3bf 8f4f 	dsb	sy
 800373a:	607b      	str	r3, [r7, #4]
}
 800373c:	bf00      	nop
 800373e:	bf00      	nop
 8003740:	e7fd      	b.n	800373e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003742:	4b0a      	ldr	r3, [pc, #40]	@ (800376c <vPortExitCritical+0x50>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	3b01      	subs	r3, #1
 8003748:	4a08      	ldr	r2, [pc, #32]	@ (800376c <vPortExitCritical+0x50>)
 800374a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800374c:	4b07      	ldr	r3, [pc, #28]	@ (800376c <vPortExitCritical+0x50>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d105      	bne.n	8003760 <vPortExitCritical+0x44>
 8003754:	2300      	movs	r3, #0
 8003756:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800375e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003760:	bf00      	nop
 8003762:	370c      	adds	r7, #12
 8003764:	46bd      	mov	sp, r7
 8003766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376a:	4770      	bx	lr
 800376c:	2000000c 	.word	0x2000000c

08003770 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003770:	f3ef 8009 	mrs	r0, PSP
 8003774:	f3bf 8f6f 	isb	sy
 8003778:	4b15      	ldr	r3, [pc, #84]	@ (80037d0 <pxCurrentTCBConst>)
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	f01e 0f10 	tst.w	lr, #16
 8003780:	bf08      	it	eq
 8003782:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003786:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800378a:	6010      	str	r0, [r2, #0]
 800378c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003790:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8003794:	f380 8811 	msr	BASEPRI, r0
 8003798:	f3bf 8f4f 	dsb	sy
 800379c:	f3bf 8f6f 	isb	sy
 80037a0:	f7ff fca0 	bl	80030e4 <vTaskSwitchContext>
 80037a4:	f04f 0000 	mov.w	r0, #0
 80037a8:	f380 8811 	msr	BASEPRI, r0
 80037ac:	bc09      	pop	{r0, r3}
 80037ae:	6819      	ldr	r1, [r3, #0]
 80037b0:	6808      	ldr	r0, [r1, #0]
 80037b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037b6:	f01e 0f10 	tst.w	lr, #16
 80037ba:	bf08      	it	eq
 80037bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80037c0:	f380 8809 	msr	PSP, r0
 80037c4:	f3bf 8f6f 	isb	sy
 80037c8:	4770      	bx	lr
 80037ca:	bf00      	nop
 80037cc:	f3af 8000 	nop.w

080037d0 <pxCurrentTCBConst>:
 80037d0:	20000310 	.word	0x20000310
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80037d4:	bf00      	nop
 80037d6:	bf00      	nop

080037d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b082      	sub	sp, #8
 80037dc:	af00      	add	r7, sp, #0
	__asm volatile
 80037de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037e2:	f383 8811 	msr	BASEPRI, r3
 80037e6:	f3bf 8f6f 	isb	sy
 80037ea:	f3bf 8f4f 	dsb	sy
 80037ee:	607b      	str	r3, [r7, #4]
}
 80037f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80037f2:	f7ff fbb9 	bl	8002f68 <xTaskIncrementTick>
 80037f6:	4603      	mov	r3, r0
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d003      	beq.n	8003804 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80037fc:	4b06      	ldr	r3, [pc, #24]	@ (8003818 <xPortSysTickHandler+0x40>)
 80037fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003802:	601a      	str	r2, [r3, #0]
 8003804:	2300      	movs	r3, #0
 8003806:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	f383 8811 	msr	BASEPRI, r3
}
 800380e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003810:	bf00      	nop
 8003812:	3708      	adds	r7, #8
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}
 8003818:	e000ed04 	.word	0xe000ed04

0800381c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800381c:	b480      	push	{r7}
 800381e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003820:	4b0b      	ldr	r3, [pc, #44]	@ (8003850 <vPortSetupTimerInterrupt+0x34>)
 8003822:	2200      	movs	r2, #0
 8003824:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003826:	4b0b      	ldr	r3, [pc, #44]	@ (8003854 <vPortSetupTimerInterrupt+0x38>)
 8003828:	2200      	movs	r2, #0
 800382a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800382c:	4b0a      	ldr	r3, [pc, #40]	@ (8003858 <vPortSetupTimerInterrupt+0x3c>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a0a      	ldr	r2, [pc, #40]	@ (800385c <vPortSetupTimerInterrupt+0x40>)
 8003832:	fba2 2303 	umull	r2, r3, r2, r3
 8003836:	099b      	lsrs	r3, r3, #6
 8003838:	4a09      	ldr	r2, [pc, #36]	@ (8003860 <vPortSetupTimerInterrupt+0x44>)
 800383a:	3b01      	subs	r3, #1
 800383c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800383e:	4b04      	ldr	r3, [pc, #16]	@ (8003850 <vPortSetupTimerInterrupt+0x34>)
 8003840:	2207      	movs	r2, #7
 8003842:	601a      	str	r2, [r3, #0]
}
 8003844:	bf00      	nop
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr
 800384e:	bf00      	nop
 8003850:	e000e010 	.word	0xe000e010
 8003854:	e000e018 	.word	0xe000e018
 8003858:	20000000 	.word	0x20000000
 800385c:	10624dd3 	.word	0x10624dd3
 8003860:	e000e014 	.word	0xe000e014

08003864 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003864:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8003874 <vPortEnableVFP+0x10>
 8003868:	6801      	ldr	r1, [r0, #0]
 800386a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800386e:	6001      	str	r1, [r0, #0]
 8003870:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003872:	bf00      	nop
 8003874:	e000ed88 	.word	0xe000ed88

08003878 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b08a      	sub	sp, #40	@ 0x28
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003880:	2300      	movs	r3, #0
 8003882:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003884:	f7ff fac4 	bl	8002e10 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003888:	4b5a      	ldr	r3, [pc, #360]	@ (80039f4 <pvPortMalloc+0x17c>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d101      	bne.n	8003894 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003890:	f000 f916 	bl	8003ac0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003894:	4b58      	ldr	r3, [pc, #352]	@ (80039f8 <pvPortMalloc+0x180>)
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	4013      	ands	r3, r2
 800389c:	2b00      	cmp	r3, #0
 800389e:	f040 8090 	bne.w	80039c2 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d01e      	beq.n	80038e6 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80038a8:	2208      	movs	r2, #8
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	4413      	add	r3, r2
 80038ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	f003 0307 	and.w	r3, r3, #7
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d015      	beq.n	80038e6 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	f023 0307 	bic.w	r3, r3, #7
 80038c0:	3308      	adds	r3, #8
 80038c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	f003 0307 	and.w	r3, r3, #7
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d00b      	beq.n	80038e6 <pvPortMalloc+0x6e>
	__asm volatile
 80038ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038d2:	f383 8811 	msr	BASEPRI, r3
 80038d6:	f3bf 8f6f 	isb	sy
 80038da:	f3bf 8f4f 	dsb	sy
 80038de:	617b      	str	r3, [r7, #20]
}
 80038e0:	bf00      	nop
 80038e2:	bf00      	nop
 80038e4:	e7fd      	b.n	80038e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d06a      	beq.n	80039c2 <pvPortMalloc+0x14a>
 80038ec:	4b43      	ldr	r3, [pc, #268]	@ (80039fc <pvPortMalloc+0x184>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	687a      	ldr	r2, [r7, #4]
 80038f2:	429a      	cmp	r2, r3
 80038f4:	d865      	bhi.n	80039c2 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80038f6:	4b42      	ldr	r3, [pc, #264]	@ (8003a00 <pvPortMalloc+0x188>)
 80038f8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80038fa:	4b41      	ldr	r3, [pc, #260]	@ (8003a00 <pvPortMalloc+0x188>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003900:	e004      	b.n	800390c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8003902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003904:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800390c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	687a      	ldr	r2, [r7, #4]
 8003912:	429a      	cmp	r2, r3
 8003914:	d903      	bls.n	800391e <pvPortMalloc+0xa6>
 8003916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d1f1      	bne.n	8003902 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800391e:	4b35      	ldr	r3, [pc, #212]	@ (80039f4 <pvPortMalloc+0x17c>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003924:	429a      	cmp	r2, r3
 8003926:	d04c      	beq.n	80039c2 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003928:	6a3b      	ldr	r3, [r7, #32]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	2208      	movs	r2, #8
 800392e:	4413      	add	r3, r2
 8003930:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	6a3b      	ldr	r3, [r7, #32]
 8003938:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800393a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800393c:	685a      	ldr	r2, [r3, #4]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	1ad2      	subs	r2, r2, r3
 8003942:	2308      	movs	r3, #8
 8003944:	005b      	lsls	r3, r3, #1
 8003946:	429a      	cmp	r2, r3
 8003948:	d920      	bls.n	800398c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800394a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	4413      	add	r3, r2
 8003950:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003952:	69bb      	ldr	r3, [r7, #24]
 8003954:	f003 0307 	and.w	r3, r3, #7
 8003958:	2b00      	cmp	r3, #0
 800395a:	d00b      	beq.n	8003974 <pvPortMalloc+0xfc>
	__asm volatile
 800395c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003960:	f383 8811 	msr	BASEPRI, r3
 8003964:	f3bf 8f6f 	isb	sy
 8003968:	f3bf 8f4f 	dsb	sy
 800396c:	613b      	str	r3, [r7, #16]
}
 800396e:	bf00      	nop
 8003970:	bf00      	nop
 8003972:	e7fd      	b.n	8003970 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003976:	685a      	ldr	r2, [r3, #4]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	1ad2      	subs	r2, r2, r3
 800397c:	69bb      	ldr	r3, [r7, #24]
 800397e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003986:	69b8      	ldr	r0, [r7, #24]
 8003988:	f000 f8fc 	bl	8003b84 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800398c:	4b1b      	ldr	r3, [pc, #108]	@ (80039fc <pvPortMalloc+0x184>)
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	1ad3      	subs	r3, r2, r3
 8003996:	4a19      	ldr	r2, [pc, #100]	@ (80039fc <pvPortMalloc+0x184>)
 8003998:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800399a:	4b18      	ldr	r3, [pc, #96]	@ (80039fc <pvPortMalloc+0x184>)
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	4b19      	ldr	r3, [pc, #100]	@ (8003a04 <pvPortMalloc+0x18c>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	429a      	cmp	r2, r3
 80039a4:	d203      	bcs.n	80039ae <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80039a6:	4b15      	ldr	r3, [pc, #84]	@ (80039fc <pvPortMalloc+0x184>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a16      	ldr	r2, [pc, #88]	@ (8003a04 <pvPortMalloc+0x18c>)
 80039ac:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80039ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039b0:	685a      	ldr	r2, [r3, #4]
 80039b2:	4b11      	ldr	r3, [pc, #68]	@ (80039f8 <pvPortMalloc+0x180>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	431a      	orrs	r2, r3
 80039b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ba:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80039bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039be:	2200      	movs	r2, #0
 80039c0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80039c2:	f7ff fa33 	bl	8002e2c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80039c6:	69fb      	ldr	r3, [r7, #28]
 80039c8:	f003 0307 	and.w	r3, r3, #7
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d00b      	beq.n	80039e8 <pvPortMalloc+0x170>
	__asm volatile
 80039d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039d4:	f383 8811 	msr	BASEPRI, r3
 80039d8:	f3bf 8f6f 	isb	sy
 80039dc:	f3bf 8f4f 	dsb	sy
 80039e0:	60fb      	str	r3, [r7, #12]
}
 80039e2:	bf00      	nop
 80039e4:	bf00      	nop
 80039e6:	e7fd      	b.n	80039e4 <pvPortMalloc+0x16c>
	return pvReturn;
 80039e8:	69fb      	ldr	r3, [r7, #28]
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3728      	adds	r7, #40	@ 0x28
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}
 80039f2:	bf00      	nop
 80039f4:	2000104c 	.word	0x2000104c
 80039f8:	20001058 	.word	0x20001058
 80039fc:	20001050 	.word	0x20001050
 8003a00:	20001044 	.word	0x20001044
 8003a04:	20001054 	.word	0x20001054

08003a08 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b086      	sub	sp, #24
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d04a      	beq.n	8003ab0 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003a1a:	2308      	movs	r3, #8
 8003a1c:	425b      	negs	r3, r3
 8003a1e:	697a      	ldr	r2, [r7, #20]
 8003a20:	4413      	add	r3, r2
 8003a22:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	685a      	ldr	r2, [r3, #4]
 8003a2c:	4b22      	ldr	r3, [pc, #136]	@ (8003ab8 <vPortFree+0xb0>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4013      	ands	r3, r2
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d10b      	bne.n	8003a4e <vPortFree+0x46>
	__asm volatile
 8003a36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a3a:	f383 8811 	msr	BASEPRI, r3
 8003a3e:	f3bf 8f6f 	isb	sy
 8003a42:	f3bf 8f4f 	dsb	sy
 8003a46:	60fb      	str	r3, [r7, #12]
}
 8003a48:	bf00      	nop
 8003a4a:	bf00      	nop
 8003a4c:	e7fd      	b.n	8003a4a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d00b      	beq.n	8003a6e <vPortFree+0x66>
	__asm volatile
 8003a56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a5a:	f383 8811 	msr	BASEPRI, r3
 8003a5e:	f3bf 8f6f 	isb	sy
 8003a62:	f3bf 8f4f 	dsb	sy
 8003a66:	60bb      	str	r3, [r7, #8]
}
 8003a68:	bf00      	nop
 8003a6a:	bf00      	nop
 8003a6c:	e7fd      	b.n	8003a6a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	685a      	ldr	r2, [r3, #4]
 8003a72:	4b11      	ldr	r3, [pc, #68]	@ (8003ab8 <vPortFree+0xb0>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4013      	ands	r3, r2
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d019      	beq.n	8003ab0 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d115      	bne.n	8003ab0 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	685a      	ldr	r2, [r3, #4]
 8003a88:	4b0b      	ldr	r3, [pc, #44]	@ (8003ab8 <vPortFree+0xb0>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	43db      	mvns	r3, r3
 8003a8e:	401a      	ands	r2, r3
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003a94:	f7ff f9bc 	bl	8002e10 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	685a      	ldr	r2, [r3, #4]
 8003a9c:	4b07      	ldr	r3, [pc, #28]	@ (8003abc <vPortFree+0xb4>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4413      	add	r3, r2
 8003aa2:	4a06      	ldr	r2, [pc, #24]	@ (8003abc <vPortFree+0xb4>)
 8003aa4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003aa6:	6938      	ldr	r0, [r7, #16]
 8003aa8:	f000 f86c 	bl	8003b84 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8003aac:	f7ff f9be 	bl	8002e2c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003ab0:	bf00      	nop
 8003ab2:	3718      	adds	r7, #24
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}
 8003ab8:	20001058 	.word	0x20001058
 8003abc:	20001050 	.word	0x20001050

08003ac0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b085      	sub	sp, #20
 8003ac4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003ac6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003aca:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003acc:	4b27      	ldr	r3, [pc, #156]	@ (8003b6c <prvHeapInit+0xac>)
 8003ace:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	f003 0307 	and.w	r3, r3, #7
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d00c      	beq.n	8003af4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	3307      	adds	r3, #7
 8003ade:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	f023 0307 	bic.w	r3, r3, #7
 8003ae6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003ae8:	68ba      	ldr	r2, [r7, #8]
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	1ad3      	subs	r3, r2, r3
 8003aee:	4a1f      	ldr	r2, [pc, #124]	@ (8003b6c <prvHeapInit+0xac>)
 8003af0:	4413      	add	r3, r2
 8003af2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003af8:	4a1d      	ldr	r2, [pc, #116]	@ (8003b70 <prvHeapInit+0xb0>)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003afe:	4b1c      	ldr	r3, [pc, #112]	@ (8003b70 <prvHeapInit+0xb0>)
 8003b00:	2200      	movs	r2, #0
 8003b02:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	68ba      	ldr	r2, [r7, #8]
 8003b08:	4413      	add	r3, r2
 8003b0a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003b0c:	2208      	movs	r2, #8
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	1a9b      	subs	r3, r3, r2
 8003b12:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	f023 0307 	bic.w	r3, r3, #7
 8003b1a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	4a15      	ldr	r2, [pc, #84]	@ (8003b74 <prvHeapInit+0xb4>)
 8003b20:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003b22:	4b14      	ldr	r3, [pc, #80]	@ (8003b74 <prvHeapInit+0xb4>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	2200      	movs	r2, #0
 8003b28:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003b2a:	4b12      	ldr	r3, [pc, #72]	@ (8003b74 <prvHeapInit+0xb4>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	68fa      	ldr	r2, [r7, #12]
 8003b3a:	1ad2      	subs	r2, r2, r3
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003b40:	4b0c      	ldr	r3, [pc, #48]	@ (8003b74 <prvHeapInit+0xb4>)
 8003b42:	681a      	ldr	r2, [r3, #0]
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	4a0a      	ldr	r2, [pc, #40]	@ (8003b78 <prvHeapInit+0xb8>)
 8003b4e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	4a09      	ldr	r2, [pc, #36]	@ (8003b7c <prvHeapInit+0xbc>)
 8003b56:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003b58:	4b09      	ldr	r3, [pc, #36]	@ (8003b80 <prvHeapInit+0xc0>)
 8003b5a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8003b5e:	601a      	str	r2, [r3, #0]
}
 8003b60:	bf00      	nop
 8003b62:	3714      	adds	r7, #20
 8003b64:	46bd      	mov	sp, r7
 8003b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6a:	4770      	bx	lr
 8003b6c:	20000444 	.word	0x20000444
 8003b70:	20001044 	.word	0x20001044
 8003b74:	2000104c 	.word	0x2000104c
 8003b78:	20001054 	.word	0x20001054
 8003b7c:	20001050 	.word	0x20001050
 8003b80:	20001058 	.word	0x20001058

08003b84 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003b84:	b480      	push	{r7}
 8003b86:	b085      	sub	sp, #20
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003b8c:	4b28      	ldr	r3, [pc, #160]	@ (8003c30 <prvInsertBlockIntoFreeList+0xac>)
 8003b8e:	60fb      	str	r3, [r7, #12]
 8003b90:	e002      	b.n	8003b98 <prvInsertBlockIntoFreeList+0x14>
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	60fb      	str	r3, [r7, #12]
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	687a      	ldr	r2, [r7, #4]
 8003b9e:	429a      	cmp	r2, r3
 8003ba0:	d8f7      	bhi.n	8003b92 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	68ba      	ldr	r2, [r7, #8]
 8003bac:	4413      	add	r3, r2
 8003bae:	687a      	ldr	r2, [r7, #4]
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	d108      	bne.n	8003bc6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	685a      	ldr	r2, [r3, #4]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	441a      	add	r2, r3
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	68ba      	ldr	r2, [r7, #8]
 8003bd0:	441a      	add	r2, r3
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	d118      	bne.n	8003c0c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	4b15      	ldr	r3, [pc, #84]	@ (8003c34 <prvInsertBlockIntoFreeList+0xb0>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	429a      	cmp	r2, r3
 8003be4:	d00d      	beq.n	8003c02 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	685a      	ldr	r2, [r3, #4]
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	441a      	add	r2, r3
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	601a      	str	r2, [r3, #0]
 8003c00:	e008      	b.n	8003c14 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003c02:	4b0c      	ldr	r3, [pc, #48]	@ (8003c34 <prvInsertBlockIntoFreeList+0xb0>)
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	601a      	str	r2, [r3, #0]
 8003c0a:	e003      	b.n	8003c14 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681a      	ldr	r2, [r3, #0]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003c14:	68fa      	ldr	r2, [r7, #12]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	d002      	beq.n	8003c22 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003c22:	bf00      	nop
 8003c24:	3714      	adds	r7, #20
 8003c26:	46bd      	mov	sp, r7
 8003c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2c:	4770      	bx	lr
 8003c2e:	bf00      	nop
 8003c30:	20001044 	.word	0x20001044
 8003c34:	2000104c 	.word	0x2000104c

08003c38 <memset>:
 8003c38:	4402      	add	r2, r0
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d100      	bne.n	8003c42 <memset+0xa>
 8003c40:	4770      	bx	lr
 8003c42:	f803 1b01 	strb.w	r1, [r3], #1
 8003c46:	e7f9      	b.n	8003c3c <memset+0x4>

08003c48 <__libc_init_array>:
 8003c48:	b570      	push	{r4, r5, r6, lr}
 8003c4a:	4d0d      	ldr	r5, [pc, #52]	@ (8003c80 <__libc_init_array+0x38>)
 8003c4c:	4c0d      	ldr	r4, [pc, #52]	@ (8003c84 <__libc_init_array+0x3c>)
 8003c4e:	1b64      	subs	r4, r4, r5
 8003c50:	10a4      	asrs	r4, r4, #2
 8003c52:	2600      	movs	r6, #0
 8003c54:	42a6      	cmp	r6, r4
 8003c56:	d109      	bne.n	8003c6c <__libc_init_array+0x24>
 8003c58:	4d0b      	ldr	r5, [pc, #44]	@ (8003c88 <__libc_init_array+0x40>)
 8003c5a:	4c0c      	ldr	r4, [pc, #48]	@ (8003c8c <__libc_init_array+0x44>)
 8003c5c:	f000 f818 	bl	8003c90 <_init>
 8003c60:	1b64      	subs	r4, r4, r5
 8003c62:	10a4      	asrs	r4, r4, #2
 8003c64:	2600      	movs	r6, #0
 8003c66:	42a6      	cmp	r6, r4
 8003c68:	d105      	bne.n	8003c76 <__libc_init_array+0x2e>
 8003c6a:	bd70      	pop	{r4, r5, r6, pc}
 8003c6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c70:	4798      	blx	r3
 8003c72:	3601      	adds	r6, #1
 8003c74:	e7ee      	b.n	8003c54 <__libc_init_array+0xc>
 8003c76:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c7a:	4798      	blx	r3
 8003c7c:	3601      	adds	r6, #1
 8003c7e:	e7f2      	b.n	8003c66 <__libc_init_array+0x1e>
 8003c80:	08003d10 	.word	0x08003d10
 8003c84:	08003d10 	.word	0x08003d10
 8003c88:	08003d10 	.word	0x08003d10
 8003c8c:	08003d14 	.word	0x08003d14

08003c90 <_init>:
 8003c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c92:	bf00      	nop
 8003c94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c96:	bc08      	pop	{r3}
 8003c98:	469e      	mov	lr, r3
 8003c9a:	4770      	bx	lr

08003c9c <_fini>:
 8003c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c9e:	bf00      	nop
 8003ca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ca2:	bc08      	pop	{r3}
 8003ca4:	469e      	mov	lr, r3
 8003ca6:	4770      	bx	lr
