
VCU_2025.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005958  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08005ae8  08005ae8  00006ae8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ba8  08005ba8  00007010  2**0
                  CONTENTS
  4 .ARM          00000000  08005ba8  08005ba8  00007010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005ba8  08005ba8  00007010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ba8  08005ba8  00006ba8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005bac  08005bac  00006bac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08005bb0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000254c  20000010  08005bc0  00007010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000255c  08005bc0  0000755c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015fd4  00000000  00000000  00007040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003276  00000000  00000000  0001d014  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012f0  00000000  00000000  00020290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000eb5  00000000  00000000  00021580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001df21  00000000  00000000  00022435  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000170b0  00000000  00000000  00040356  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b0eb5  00000000  00000000  00057406  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001082bb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f08  00000000  00000000  00108300  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  0010d208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005ad0 	.word	0x08005ad0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08005ad0 	.word	0x08005ad0

080001d0 <makeFrame>:
char msg[64];
uint32_t val;
struct CANframe temp;
struct CANframe receivedFrame;

struct CANframe makeFrame(CAN_RxHeaderTypeDef header, uint8_t data[8]) {
 80001d0:	b084      	sub	sp, #16
 80001d2:	b490      	push	{r4, r7}
 80001d4:	b086      	sub	sp, #24
 80001d6:	af00      	add	r7, sp, #0
 80001d8:	6078      	str	r0, [r7, #4]
 80001da:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80001de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	struct CANframe temp;

	temp.ID = header.StdId;
 80001e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80001e4:	60fb      	str	r3, [r7, #12]
	temp.rxData[0] = data[0];
 80001e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80001e8:	781b      	ldrb	r3, [r3, #0]
 80001ea:	743b      	strb	r3, [r7, #16]
	temp.rxData[1] = data[1];
 80001ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80001ee:	785b      	ldrb	r3, [r3, #1]
 80001f0:	747b      	strb	r3, [r7, #17]
	temp.rxData[2] = data[2];
 80001f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80001f4:	789b      	ldrb	r3, [r3, #2]
 80001f6:	74bb      	strb	r3, [r7, #18]
	temp.rxData[3] = data[3];
 80001f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80001fa:	78db      	ldrb	r3, [r3, #3]
 80001fc:	74fb      	strb	r3, [r7, #19]
	temp.rxData[4] = data[4];
 80001fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000200:	791b      	ldrb	r3, [r3, #4]
 8000202:	753b      	strb	r3, [r7, #20]
	temp.rxData[5] = data[5];
 8000204:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000206:	795b      	ldrb	r3, [r3, #5]
 8000208:	757b      	strb	r3, [r7, #21]
	temp.rxData[6] = data[6];
 800020a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800020c:	799b      	ldrb	r3, [r3, #6]
 800020e:	75bb      	strb	r3, [r7, #22]
	temp.rxData[7] = data[7];
 8000210:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000212:	79db      	ldrb	r3, [r3, #7]
 8000214:	75fb      	strb	r3, [r7, #23]

	return temp;
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	461c      	mov	r4, r3
 800021a:	f107 030c 	add.w	r3, r7, #12
 800021e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000222:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8000226:	6878      	ldr	r0, [r7, #4]
 8000228:	3718      	adds	r7, #24
 800022a:	46bd      	mov	sp, r7
 800022c:	bc90      	pop	{r4, r7}
 800022e:	b004      	add	sp, #16
 8000230:	4770      	bx	lr
	...

08000234 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000234:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000236:	b08f      	sub	sp, #60	@ 0x3c
 8000238:	af06      	add	r7, sp, #24
 800023a:	61f8      	str	r0, [r7, #28]

	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK) {
 800023c:	4b18      	ldr	r3, [pc, #96]	@ (80002a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 800023e:	4a19      	ldr	r2, [pc, #100]	@ (80002a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8000240:	2100      	movs	r1, #0
 8000242:	69f8      	ldr	r0, [r7, #28]
 8000244:	f000 ff25 	bl	8001092 <HAL_CAN_GetRxMessage>
 8000248:	4603      	mov	r3, r0
 800024a:	2b00      	cmp	r3, #0
 800024c:	d001      	beq.n	8000252 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
		Error_Handler();
 800024e:	f000 fa67 	bl	8000720 <Error_Handler>
	}
//	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
	temp = makeFrame(RxHeader, RxData);
 8000252:	4b15      	ldr	r3, [pc, #84]	@ (80002a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 8000254:	607b      	str	r3, [r7, #4]
 8000256:	f107 0608 	add.w	r6, r7, #8
 800025a:	4c12      	ldr	r4, [pc, #72]	@ (80002a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 800025c:	4b10      	ldr	r3, [pc, #64]	@ (80002a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 800025e:	9304      	str	r3, [sp, #16]
 8000260:	466d      	mov	r5, sp
 8000262:	f104 030c 	add.w	r3, r4, #12
 8000266:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000268:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800026c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8000270:	4630      	mov	r0, r6
 8000272:	f7ff ffad 	bl	80001d0 <makeFrame>
 8000276:	687c      	ldr	r4, [r7, #4]
 8000278:	f107 0308 	add.w	r3, r7, #8
 800027c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000280:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	xQueueSendToBackFromISR(CANq, &temp, 1);
 8000284:	4b09      	ldr	r3, [pc, #36]	@ (80002ac <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 8000286:	6818      	ldr	r0, [r3, #0]
 8000288:	2300      	movs	r3, #0
 800028a:	2201      	movs	r2, #1
 800028c:	4906      	ldr	r1, [pc, #24]	@ (80002a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 800028e:	f003 ff9f 	bl	80041d0 <xQueueGenericSendFromISR>

	datacheck = 1; // signal to your RTOS task
 8000292:	4b07      	ldr	r3, [pc, #28]	@ (80002b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 8000294:	2201      	movs	r2, #1
 8000296:	701a      	strb	r2, [r3, #0]
}
 8000298:	bf00      	nop
 800029a:	3724      	adds	r7, #36	@ 0x24
 800029c:	46bd      	mov	sp, r7
 800029e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002a0:	20000048 	.word	0x20000048
 80002a4:	2000002c 	.word	0x2000002c
 80002a8:	20000050 	.word	0x20000050
 80002ac:	20000378 	.word	0x20000378
 80002b0:	2000037c 	.word	0x2000037c

080002b4 <StartCanRxTask>:

void StartCanRxTask(void const *argument) {
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b084      	sub	sp, #16
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	6078      	str	r0, [r7, #4]
	int count;
	CANq = xQueueCreate(100, sizeof(struct CANframe));
 80002bc:	2200      	movs	r2, #0
 80002be:	210c      	movs	r1, #12
 80002c0:	2064      	movs	r0, #100	@ 0x64
 80002c2:	f003 ff27 	bl	8004114 <xQueueGenericCreate>
 80002c6:	4603      	mov	r3, r0
 80002c8:	4a11      	ldr	r2, [pc, #68]	@ (8000310 <StartCanRxTask+0x5c>)
 80002ca:	6013      	str	r3, [r2, #0]
	vQueueAddToRegistry(CANq, "CAN queue");
 80002cc:	4b10      	ldr	r3, [pc, #64]	@ (8000310 <StartCanRxTask+0x5c>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	4910      	ldr	r1, [pc, #64]	@ (8000314 <StartCanRxTask+0x60>)
 80002d2:	4618      	mov	r0, r3
 80002d4:	f004 f948 	bl	8004568 <vQueueAddToRegistry>

	while (1) {

		if (xQueueReceiveFromISR(CANq, &receivedFrame, pdMS_TO_TICKS(100)) == pdPASS) {
 80002d8:	4b0d      	ldr	r3, [pc, #52]	@ (8000310 <StartCanRxTask+0x5c>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	2264      	movs	r2, #100	@ 0x64
 80002de:	490e      	ldr	r1, [pc, #56]	@ (8000318 <StartCanRxTask+0x64>)
 80002e0:	4618      	mov	r0, r3
 80002e2:	f004 f810 	bl	8004306 <xQueueReceiveFromISR>
 80002e6:	4603      	mov	r3, r0
 80002e8:	2b01      	cmp	r3, #1
 80002ea:	d108      	bne.n	80002fe <StartCanRxTask+0x4a>

			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 80002ec:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80002f0:	480a      	ldr	r0, [pc, #40]	@ (800031c <StartCanRxTask+0x68>)
 80002f2:	f001 fcb1 	bl	8001c58 <HAL_GPIO_TogglePin>
			osDelay(1000);
 80002f6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80002fa:	f003 fdd9 	bl	8003eb0 <osDelay>
		}

		count = uxQueueMessagesWaiting(CANq);
 80002fe:	4b04      	ldr	r3, [pc, #16]	@ (8000310 <StartCanRxTask+0x5c>)
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	4618      	mov	r0, r3
 8000304:	f004 f881 	bl	800440a <uxQueueMessagesWaiting>
 8000308:	4603      	mov	r3, r0
 800030a:	60fb      	str	r3, [r7, #12]
		if (xQueueReceiveFromISR(CANq, &receivedFrame, pdMS_TO_TICKS(100)) == pdPASS) {
 800030c:	e7e4      	b.n	80002d8 <StartCanRxTask+0x24>
 800030e:	bf00      	nop
 8000310:	20000378 	.word	0x20000378
 8000314:	08005ae8 	.word	0x08005ae8
 8000318:	2000005c 	.word	0x2000005c
 800031c:	48000400 	.word	0x48000400

08000320 <StartCanTxTask>:
#include "CAN_Transmit.h"  // your own header

extern CAN_HandleTypeDef hcan;

void StartCanTxTask(void const *argument) {
 8000320:	b580      	push	{r7, lr}
 8000322:	b08c      	sub	sp, #48	@ 0x30
 8000324:	af00      	add	r7, sp, #0
 8000326:	6078      	str	r0, [r7, #4]
	CAN_TxHeaderTypeDef txHeader;
	uint8_t txData[8];
	uint32_t txMailbox;

	// Set up header
	txHeader.IDE = CAN_ID_STD;
 8000328:	2300      	movs	r3, #0
 800032a:	623b      	str	r3, [r7, #32]
	txHeader.StdId = 0x501;
 800032c:	f240 5301 	movw	r3, #1281	@ 0x501
 8000330:	61bb      	str	r3, [r7, #24]
	txHeader.RTR = CAN_RTR_DATA;
 8000332:	2300      	movs	r3, #0
 8000334:	627b      	str	r3, [r7, #36]	@ 0x24
	txHeader.DLC = 8;
 8000336:	2308      	movs	r3, #8
 8000338:	62bb      	str	r3, [r7, #40]	@ 0x28

	while (1) {
		//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
		txData[0] = 0x0; // your payload
 800033a:	2300      	movs	r3, #0
 800033c:	743b      	strb	r3, [r7, #16]
		txData[1] = 0x0;
 800033e:	2300      	movs	r3, #0
 8000340:	747b      	strb	r3, [r7, #17]
		txData[2] = 0xB4;
 8000342:	23b4      	movs	r3, #180	@ 0xb4
 8000344:	74bb      	strb	r3, [r7, #18]
		txData[3] = 0x43;
 8000346:	2343      	movs	r3, #67	@ 0x43
 8000348:	74fb      	strb	r3, [r7, #19]
		txData[4] = 0xCD;
 800034a:	23cd      	movs	r3, #205	@ 0xcd
 800034c:	753b      	strb	r3, [r7, #20]
		txData[5] = 0xCC;
 800034e:	23cc      	movs	r3, #204	@ 0xcc
 8000350:	757b      	strb	r3, [r7, #21]
		txData[6] = 0x4C;
 8000352:	234c      	movs	r3, #76	@ 0x4c
 8000354:	75bb      	strb	r3, [r7, #22]
		txData[7] = 0x3D;
 8000356:	233d      	movs	r3, #61	@ 0x3d
 8000358:	75fb      	strb	r3, [r7, #23]

		//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);

		if (HAL_CAN_AddTxMessage(&hcan, &txHeader, txData, &txMailbox)
 800035a:	f107 030c 	add.w	r3, r7, #12
 800035e:	f107 0210 	add.w	r2, r7, #16
 8000362:	f107 0118 	add.w	r1, r7, #24
 8000366:	4806      	ldr	r0, [pc, #24]	@ (8000380 <StartCanTxTask+0x60>)
 8000368:	f000 fdc3 	bl	8000ef2 <HAL_CAN_AddTxMessage>
 800036c:	4603      	mov	r3, r0
 800036e:	2b00      	cmp	r3, #0
 8000370:	d001      	beq.n	8000376 <StartCanTxTask+0x56>
				!= HAL_OK) {
			Error_Handler();
 8000372:	f000 f9d5 	bl	8000720 <Error_Handler>
		}

		osDelay(500); // send every 1 second
 8000376:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800037a:	f003 fd99 	bl	8003eb0 <osDelay>
	while (1) {
 800037e:	e7dc      	b.n	800033a <StartCanTxTask+0x1a>
 8000380:	200002bc 	.word	0x200002bc

08000384 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000384:	b480      	push	{r7}
 8000386:	b085      	sub	sp, #20
 8000388:	af00      	add	r7, sp, #0
 800038a:	60f8      	str	r0, [r7, #12]
 800038c:	60b9      	str	r1, [r7, #8]
 800038e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000390:	68fb      	ldr	r3, [r7, #12]
 8000392:	4a07      	ldr	r2, [pc, #28]	@ (80003b0 <vApplicationGetIdleTaskMemory+0x2c>)
 8000394:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000396:	68bb      	ldr	r3, [r7, #8]
 8000398:	4a06      	ldr	r2, [pc, #24]	@ (80003b4 <vApplicationGetIdleTaskMemory+0x30>)
 800039a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	2280      	movs	r2, #128	@ 0x80
 80003a0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80003a2:	bf00      	nop
 80003a4:	3714      	adds	r7, #20
 80003a6:	46bd      	mov	sp, r7
 80003a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop
 80003b0:	20000068 	.word	0x20000068
 80003b4:	200000bc 	.word	0x200000bc

080003b8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80003b8:	b5b0      	push	{r4, r5, r7, lr}
 80003ba:	b096      	sub	sp, #88	@ 0x58
 80003bc:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80003be:	f000 fb59 	bl	8000a74 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80003c2:	f000 f865 	bl	8000490 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80003c6:	f000 f929 	bl	800061c <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80003ca:	f000 f8f7 	bl	80005bc <MX_USART2_UART_Init>
	MX_CAN_Init();
 80003ce:	f000 f8a1 	bl	8000514 <MX_CAN_Init>
	/* USER CODE BEGIN 2 */
	HAL_CAN_Start(&hcan);
 80003d2:	4827      	ldr	r0, [pc, #156]	@ (8000470 <main+0xb8>)
 80003d4:	f000 fd49 	bl	8000e6a <HAL_CAN_Start>

	if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING)
 80003d8:	2102      	movs	r1, #2
 80003da:	4825      	ldr	r0, [pc, #148]	@ (8000470 <main+0xb8>)
 80003dc:	f000 ff7b 	bl	80012d6 <HAL_CAN_ActivateNotification>
 80003e0:	4603      	mov	r3, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d001      	beq.n	80003ea <main+0x32>
			!= HAL_OK) {
		Error_Handler();
 80003e6:	f000 f99b 	bl	8000720 <Error_Handler>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */

	CANq = xQueueCreate(100, sizeof(struct CANframe));
 80003ea:	2200      	movs	r2, #0
 80003ec:	210c      	movs	r1, #12
 80003ee:	2064      	movs	r0, #100	@ 0x64
 80003f0:	f003 fe90 	bl	8004114 <xQueueGenericCreate>
 80003f4:	4603      	mov	r3, r0
 80003f6:	4a1f      	ldr	r2, [pc, #124]	@ (8000474 <main+0xbc>)
 80003f8:	6013      	str	r3, [r2, #0]

	osThreadDef(parked, parked_init, osPriorityNormal, 0, 128);
 80003fa:	4b1f      	ldr	r3, [pc, #124]	@ (8000478 <main+0xc0>)
 80003fc:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8000400:	461d      	mov	r5, r3
 8000402:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000404:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000406:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800040a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	parkedHandle = osThreadCreate(osThread(parked), NULL);
 800040e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000412:	2100      	movs	r1, #0
 8000414:	4618      	mov	r0, r3
 8000416:	f003 fcff 	bl	8003e18 <osThreadCreate>
 800041a:	4603      	mov	r3, r0
 800041c:	4a17      	ldr	r2, [pc, #92]	@ (800047c <main+0xc4>)
 800041e:	6013      	str	r3, [r2, #0]

	osThreadDef(canTxTask, StartCanTxTask, osPriorityHigh, 0, 128);
 8000420:	4b17      	ldr	r3, [pc, #92]	@ (8000480 <main+0xc8>)
 8000422:	f107 0420 	add.w	r4, r7, #32
 8000426:	461d      	mov	r5, r3
 8000428:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800042a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800042c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000430:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	canTxTaskHandle = osThreadCreate(osThread(canTxTask), NULL);
 8000434:	f107 0320 	add.w	r3, r7, #32
 8000438:	2100      	movs	r1, #0
 800043a:	4618      	mov	r0, r3
 800043c:	f003 fcec 	bl	8003e18 <osThreadCreate>
 8000440:	4603      	mov	r3, r0
 8000442:	4a10      	ldr	r2, [pc, #64]	@ (8000484 <main+0xcc>)
 8000444:	6013      	str	r3, [r2, #0]

	osThreadDef(canRxTask, StartCanRxTask, osPriorityNormal, 0, 128);
 8000446:	4b10      	ldr	r3, [pc, #64]	@ (8000488 <main+0xd0>)
 8000448:	1d3c      	adds	r4, r7, #4
 800044a:	461d      	mov	r5, r3
 800044c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800044e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000450:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000454:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	canRxTaskHandle = osThreadCreate(osThread(canRxTask), NULL);
 8000458:	1d3b      	adds	r3, r7, #4
 800045a:	2100      	movs	r1, #0
 800045c:	4618      	mov	r0, r3
 800045e:	f003 fcdb 	bl	8003e18 <osThreadCreate>
 8000462:	4603      	mov	r3, r0
 8000464:	4a09      	ldr	r2, [pc, #36]	@ (800048c <main+0xd4>)
 8000466:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 8000468:	f003 fccf 	bl	8003e0a <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 800046c:	bf00      	nop
 800046e:	e7fd      	b.n	800046c <main+0xb4>
 8000470:	200002bc 	.word	0x200002bc
 8000474:	20000378 	.word	0x20000378
 8000478:	08005afc 	.word	0x08005afc
 800047c:	2000036c 	.word	0x2000036c
 8000480:	08005b24 	.word	0x08005b24
 8000484:	20000370 	.word	0x20000370
 8000488:	08005b4c 	.word	0x08005b4c
 800048c:	20000374 	.word	0x20000374

08000490 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000490:	b580      	push	{r7, lr}
 8000492:	b090      	sub	sp, #64	@ 0x40
 8000494:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000496:	f107 0318 	add.w	r3, r7, #24
 800049a:	2228      	movs	r2, #40	@ 0x28
 800049c:	2100      	movs	r1, #0
 800049e:	4618      	mov	r0, r3
 80004a0:	f005 fadc 	bl	8005a5c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80004a4:	1d3b      	adds	r3, r7, #4
 80004a6:	2200      	movs	r2, #0
 80004a8:	601a      	str	r2, [r3, #0]
 80004aa:	605a      	str	r2, [r3, #4]
 80004ac:	609a      	str	r2, [r3, #8]
 80004ae:	60da      	str	r2, [r3, #12]
 80004b0:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004b2:	2302      	movs	r3, #2
 80004b4:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004b6:	2301      	movs	r3, #1
 80004b8:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004ba:	2310      	movs	r3, #16
 80004bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004be:	2302      	movs	r3, #2
 80004c0:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80004c2:	2300      	movs	r3, #0
 80004c4:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80004c6:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 80004ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80004cc:	f107 0318 	add.w	r3, r7, #24
 80004d0:	4618      	mov	r0, r3
 80004d2:	f001 fbdb 	bl	8001c8c <HAL_RCC_OscConfig>
 80004d6:	4603      	mov	r3, r0
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d001      	beq.n	80004e0 <SystemClock_Config+0x50>
		Error_Handler();
 80004dc:	f000 f920 	bl	8000720 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80004e0:	230f      	movs	r3, #15
 80004e2:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004e4:	2302      	movs	r3, #2
 80004e6:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004e8:	2300      	movs	r3, #0
 80004ea:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004ec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80004f0:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004f2:	2300      	movs	r3, #0
 80004f4:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80004f6:	1d3b      	adds	r3, r7, #4
 80004f8:	2102      	movs	r1, #2
 80004fa:	4618      	mov	r0, r3
 80004fc:	f002 fc04 	bl	8002d08 <HAL_RCC_ClockConfig>
 8000500:	4603      	mov	r3, r0
 8000502:	2b00      	cmp	r3, #0
 8000504:	d001      	beq.n	800050a <SystemClock_Config+0x7a>
		Error_Handler();
 8000506:	f000 f90b 	bl	8000720 <Error_Handler>
	}
}
 800050a:	bf00      	nop
 800050c:	3740      	adds	r7, #64	@ 0x40
 800050e:	46bd      	mov	sp, r7
 8000510:	bd80      	pop	{r7, pc}
	...

08000514 <MX_CAN_Init>:
/**
 * @brief CAN Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN_Init(void) {
 8000514:	b580      	push	{r7, lr}
 8000516:	b08a      	sub	sp, #40	@ 0x28
 8000518:	af00      	add	r7, sp, #0
	/* USER CODE END CAN_Init 0 */

	/* USER CODE BEGIN CAN_Init 1 */

	/* USER CODE END CAN_Init 1 */
	hcan.Instance = CAN;
 800051a:	4b26      	ldr	r3, [pc, #152]	@ (80005b4 <MX_CAN_Init+0xa0>)
 800051c:	4a26      	ldr	r2, [pc, #152]	@ (80005b8 <MX_CAN_Init+0xa4>)
 800051e:	601a      	str	r2, [r3, #0]
	hcan.Init.Prescaler = 8;
 8000520:	4b24      	ldr	r3, [pc, #144]	@ (80005b4 <MX_CAN_Init+0xa0>)
 8000522:	2208      	movs	r2, #8
 8000524:	605a      	str	r2, [r3, #4]
	hcan.Init.Mode = CAN_MODE_LOOPBACK;
 8000526:	4b23      	ldr	r3, [pc, #140]	@ (80005b4 <MX_CAN_Init+0xa0>)
 8000528:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800052c:	609a      	str	r2, [r3, #8]
	hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800052e:	4b21      	ldr	r3, [pc, #132]	@ (80005b4 <MX_CAN_Init+0xa0>)
 8000530:	2200      	movs	r2, #0
 8000532:	60da      	str	r2, [r3, #12]
	hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000534:	4b1f      	ldr	r3, [pc, #124]	@ (80005b4 <MX_CAN_Init+0xa0>)
 8000536:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800053a:	611a      	str	r2, [r3, #16]
	hcan.Init.TimeSeg2 = CAN_BS2_5TQ;
 800053c:	4b1d      	ldr	r3, [pc, #116]	@ (80005b4 <MX_CAN_Init+0xa0>)
 800053e:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000542:	615a      	str	r2, [r3, #20]
	hcan.Init.TimeTriggeredMode = DISABLE;
 8000544:	4b1b      	ldr	r3, [pc, #108]	@ (80005b4 <MX_CAN_Init+0xa0>)
 8000546:	2200      	movs	r2, #0
 8000548:	761a      	strb	r2, [r3, #24]
	hcan.Init.AutoBusOff = DISABLE;
 800054a:	4b1a      	ldr	r3, [pc, #104]	@ (80005b4 <MX_CAN_Init+0xa0>)
 800054c:	2200      	movs	r2, #0
 800054e:	765a      	strb	r2, [r3, #25]
	hcan.Init.AutoWakeUp = DISABLE;
 8000550:	4b18      	ldr	r3, [pc, #96]	@ (80005b4 <MX_CAN_Init+0xa0>)
 8000552:	2200      	movs	r2, #0
 8000554:	769a      	strb	r2, [r3, #26]
	hcan.Init.AutoRetransmission = DISABLE;
 8000556:	4b17      	ldr	r3, [pc, #92]	@ (80005b4 <MX_CAN_Init+0xa0>)
 8000558:	2200      	movs	r2, #0
 800055a:	76da      	strb	r2, [r3, #27]
	hcan.Init.ReceiveFifoLocked = DISABLE;
 800055c:	4b15      	ldr	r3, [pc, #84]	@ (80005b4 <MX_CAN_Init+0xa0>)
 800055e:	2200      	movs	r2, #0
 8000560:	771a      	strb	r2, [r3, #28]
	hcan.Init.TransmitFifoPriority = DISABLE;
 8000562:	4b14      	ldr	r3, [pc, #80]	@ (80005b4 <MX_CAN_Init+0xa0>)
 8000564:	2200      	movs	r2, #0
 8000566:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan) != HAL_OK) {
 8000568:	4812      	ldr	r0, [pc, #72]	@ (80005b4 <MX_CAN_Init+0xa0>)
 800056a:	f000 fab9 	bl	8000ae0 <HAL_CAN_Init>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d001      	beq.n	8000578 <MX_CAN_Init+0x64>
		Error_Handler();
 8000574:	f000 f8d4 	bl	8000720 <Error_Handler>
	//Set a up a filter
	//Allow all messages to pass through from any ID

	CAN_FilterTypeDef canfilterconfig;

	canfilterconfig.FilterActivation = ENABLE;
 8000578:	2301      	movs	r3, #1
 800057a:	623b      	str	r3, [r7, #32]
	canfilterconfig.FilterBank = 0;
 800057c:	2300      	movs	r3, #0
 800057e:	617b      	str	r3, [r7, #20]
	canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000580:	2300      	movs	r3, #0
 8000582:	613b      	str	r3, [r7, #16]
	canfilterconfig.FilterIdHigh = 0x0000;
 8000584:	2300      	movs	r3, #0
 8000586:	603b      	str	r3, [r7, #0]
	canfilterconfig.FilterIdLow = 0x0000;
 8000588:	2300      	movs	r3, #0
 800058a:	607b      	str	r3, [r7, #4]
	canfilterconfig.FilterMaskIdHigh = 0x0000;
 800058c:	2300      	movs	r3, #0
 800058e:	60bb      	str	r3, [r7, #8]
	canfilterconfig.FilterMaskIdLow = 0x0000;
 8000590:	2300      	movs	r3, #0
 8000592:	60fb      	str	r3, [r7, #12]
	canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000594:	2300      	movs	r3, #0
 8000596:	61bb      	str	r3, [r7, #24]
	canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000598:	2301      	movs	r3, #1
 800059a:	61fb      	str	r3, [r7, #28]
	canfilterconfig.SlaveStartFilterBank = 14;
 800059c:	230e      	movs	r3, #14
 800059e:	627b      	str	r3, [r7, #36]	@ 0x24

	HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 80005a0:	463b      	mov	r3, r7
 80005a2:	4619      	mov	r1, r3
 80005a4:	4803      	ldr	r0, [pc, #12]	@ (80005b4 <MX_CAN_Init+0xa0>)
 80005a6:	f000 fb96 	bl	8000cd6 <HAL_CAN_ConfigFilter>

	/* USER CODE END CAN_Init 2 */

}
 80005aa:	bf00      	nop
 80005ac:	3728      	adds	r7, #40	@ 0x28
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	200002bc 	.word	0x200002bc
 80005b8:	40006400 	.word	0x40006400

080005bc <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80005c0:	4b14      	ldr	r3, [pc, #80]	@ (8000614 <MX_USART2_UART_Init+0x58>)
 80005c2:	4a15      	ldr	r2, [pc, #84]	@ (8000618 <MX_USART2_UART_Init+0x5c>)
 80005c4:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 57600;
 80005c6:	4b13      	ldr	r3, [pc, #76]	@ (8000614 <MX_USART2_UART_Init+0x58>)
 80005c8:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 80005cc:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005ce:	4b11      	ldr	r3, [pc, #68]	@ (8000614 <MX_USART2_UART_Init+0x58>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80005d4:	4b0f      	ldr	r3, [pc, #60]	@ (8000614 <MX_USART2_UART_Init+0x58>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80005da:	4b0e      	ldr	r3, [pc, #56]	@ (8000614 <MX_USART2_UART_Init+0x58>)
 80005dc:	2200      	movs	r2, #0
 80005de:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80005e0:	4b0c      	ldr	r3, [pc, #48]	@ (8000614 <MX_USART2_UART_Init+0x58>)
 80005e2:	220c      	movs	r2, #12
 80005e4:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005e6:	4b0b      	ldr	r3, [pc, #44]	@ (8000614 <MX_USART2_UART_Init+0x58>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005ec:	4b09      	ldr	r3, [pc, #36]	@ (8000614 <MX_USART2_UART_Init+0x58>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005f2:	4b08      	ldr	r3, [pc, #32]	@ (8000614 <MX_USART2_UART_Init+0x58>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005f8:	4b06      	ldr	r3, [pc, #24]	@ (8000614 <MX_USART2_UART_Init+0x58>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	625a      	str	r2, [r3, #36]	@ 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80005fe:	4805      	ldr	r0, [pc, #20]	@ (8000614 <MX_USART2_UART_Init+0x58>)
 8000600:	f003 f84c 	bl	800369c <HAL_UART_Init>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <MX_USART2_UART_Init+0x52>
		Error_Handler();
 800060a:	f000 f889 	bl	8000720 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 800060e:	bf00      	nop
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	200002e4 	.word	0x200002e4
 8000618:	40004400 	.word	0x40004400

0800061c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800061c:	b580      	push	{r7, lr}
 800061e:	b08a      	sub	sp, #40	@ 0x28
 8000620:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000622:	f107 0314 	add.w	r3, r7, #20
 8000626:	2200      	movs	r2, #0
 8000628:	601a      	str	r2, [r3, #0]
 800062a:	605a      	str	r2, [r3, #4]
 800062c:	609a      	str	r2, [r3, #8]
 800062e:	60da      	str	r2, [r3, #12]
 8000630:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000632:	4b2b      	ldr	r3, [pc, #172]	@ (80006e0 <MX_GPIO_Init+0xc4>)
 8000634:	695b      	ldr	r3, [r3, #20]
 8000636:	4a2a      	ldr	r2, [pc, #168]	@ (80006e0 <MX_GPIO_Init+0xc4>)
 8000638:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800063c:	6153      	str	r3, [r2, #20]
 800063e:	4b28      	ldr	r3, [pc, #160]	@ (80006e0 <MX_GPIO_Init+0xc4>)
 8000640:	695b      	ldr	r3, [r3, #20]
 8000642:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000646:	613b      	str	r3, [r7, #16]
 8000648:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 800064a:	4b25      	ldr	r3, [pc, #148]	@ (80006e0 <MX_GPIO_Init+0xc4>)
 800064c:	695b      	ldr	r3, [r3, #20]
 800064e:	4a24      	ldr	r2, [pc, #144]	@ (80006e0 <MX_GPIO_Init+0xc4>)
 8000650:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000654:	6153      	str	r3, [r2, #20]
 8000656:	4b22      	ldr	r3, [pc, #136]	@ (80006e0 <MX_GPIO_Init+0xc4>)
 8000658:	695b      	ldr	r3, [r3, #20]
 800065a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800065e:	60fb      	str	r3, [r7, #12]
 8000660:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000662:	4b1f      	ldr	r3, [pc, #124]	@ (80006e0 <MX_GPIO_Init+0xc4>)
 8000664:	695b      	ldr	r3, [r3, #20]
 8000666:	4a1e      	ldr	r2, [pc, #120]	@ (80006e0 <MX_GPIO_Init+0xc4>)
 8000668:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800066c:	6153      	str	r3, [r2, #20]
 800066e:	4b1c      	ldr	r3, [pc, #112]	@ (80006e0 <MX_GPIO_Init+0xc4>)
 8000670:	695b      	ldr	r3, [r3, #20]
 8000672:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000676:	60bb      	str	r3, [r7, #8]
 8000678:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800067a:	4b19      	ldr	r3, [pc, #100]	@ (80006e0 <MX_GPIO_Init+0xc4>)
 800067c:	695b      	ldr	r3, [r3, #20]
 800067e:	4a18      	ldr	r2, [pc, #96]	@ (80006e0 <MX_GPIO_Init+0xc4>)
 8000680:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000684:	6153      	str	r3, [r2, #20]
 8000686:	4b16      	ldr	r3, [pc, #88]	@ (80006e0 <MX_GPIO_Init+0xc4>)
 8000688:	695b      	ldr	r3, [r3, #20]
 800068a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800068e:	607b      	str	r3, [r7, #4]
 8000690:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000692:	2200      	movs	r2, #0
 8000694:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000698:	4812      	ldr	r0, [pc, #72]	@ (80006e4 <MX_GPIO_Init+0xc8>)
 800069a:	f001 fac5 	bl	8001c28 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 800069e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006a2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006a4:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80006a8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006aa:	2300      	movs	r3, #0
 80006ac:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006ae:	f107 0314 	add.w	r3, r7, #20
 80006b2:	4619      	mov	r1, r3
 80006b4:	480c      	ldr	r0, [pc, #48]	@ (80006e8 <MX_GPIO_Init+0xcc>)
 80006b6:	f001 f945 	bl	8001944 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 80006ba:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006be:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006c0:	2301      	movs	r3, #1
 80006c2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c4:	2300      	movs	r3, #0
 80006c6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c8:	2300      	movs	r3, #0
 80006ca:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80006cc:	f107 0314 	add.w	r3, r7, #20
 80006d0:	4619      	mov	r1, r3
 80006d2:	4804      	ldr	r0, [pc, #16]	@ (80006e4 <MX_GPIO_Init+0xc8>)
 80006d4:	f001 f936 	bl	8001944 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80006d8:	bf00      	nop
 80006da:	3728      	adds	r7, #40	@ 0x28
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	40021000 	.word	0x40021000
 80006e4:	48000400 	.word	0x48000400
 80006e8:	48000800 	.word	0x48000800

080006ec <parked_init>:
 * @brief  Function implementing the parked thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_parked_init */
void parked_init(void const *argument) {
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 80006f4:	2001      	movs	r0, #1
 80006f6:	f003 fbdb 	bl	8003eb0 <osDelay>
 80006fa:	e7fb      	b.n	80006f4 <parked_init+0x8>

080006fc <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1) {
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	4a04      	ldr	r2, [pc, #16]	@ (800071c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800070a:	4293      	cmp	r3, r2
 800070c:	d101      	bne.n	8000712 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 800070e:	f000 f9c7 	bl	8000aa0 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000712:	bf00      	nop
 8000714:	3708      	adds	r7, #8
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	40012c00 	.word	0x40012c00

08000720 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000724:	b672      	cpsid	i
}
 8000726:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000728:	bf00      	nop
 800072a:	e7fd      	b.n	8000728 <Error_Handler+0x8>

0800072c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000732:	4b11      	ldr	r3, [pc, #68]	@ (8000778 <HAL_MspInit+0x4c>)
 8000734:	699b      	ldr	r3, [r3, #24]
 8000736:	4a10      	ldr	r2, [pc, #64]	@ (8000778 <HAL_MspInit+0x4c>)
 8000738:	f043 0301 	orr.w	r3, r3, #1
 800073c:	6193      	str	r3, [r2, #24]
 800073e:	4b0e      	ldr	r3, [pc, #56]	@ (8000778 <HAL_MspInit+0x4c>)
 8000740:	699b      	ldr	r3, [r3, #24]
 8000742:	f003 0301 	and.w	r3, r3, #1
 8000746:	607b      	str	r3, [r7, #4]
 8000748:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800074a:	4b0b      	ldr	r3, [pc, #44]	@ (8000778 <HAL_MspInit+0x4c>)
 800074c:	69db      	ldr	r3, [r3, #28]
 800074e:	4a0a      	ldr	r2, [pc, #40]	@ (8000778 <HAL_MspInit+0x4c>)
 8000750:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000754:	61d3      	str	r3, [r2, #28]
 8000756:	4b08      	ldr	r3, [pc, #32]	@ (8000778 <HAL_MspInit+0x4c>)
 8000758:	69db      	ldr	r3, [r3, #28]
 800075a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800075e:	603b      	str	r3, [r7, #0]
 8000760:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000762:	2200      	movs	r2, #0
 8000764:	210f      	movs	r1, #15
 8000766:	f06f 0001 	mvn.w	r0, #1
 800076a:	f001 f8c1 	bl	80018f0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800076e:	bf00      	nop
 8000770:	3708      	adds	r7, #8
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	40021000 	.word	0x40021000

0800077c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b08a      	sub	sp, #40	@ 0x28
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000784:	f107 0314 	add.w	r3, r7, #20
 8000788:	2200      	movs	r2, #0
 800078a:	601a      	str	r2, [r3, #0]
 800078c:	605a      	str	r2, [r3, #4]
 800078e:	609a      	str	r2, [r3, #8]
 8000790:	60da      	str	r2, [r3, #12]
 8000792:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	4a25      	ldr	r2, [pc, #148]	@ (8000830 <HAL_CAN_MspInit+0xb4>)
 800079a:	4293      	cmp	r3, r2
 800079c:	d143      	bne.n	8000826 <HAL_CAN_MspInit+0xaa>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800079e:	4b25      	ldr	r3, [pc, #148]	@ (8000834 <HAL_CAN_MspInit+0xb8>)
 80007a0:	69db      	ldr	r3, [r3, #28]
 80007a2:	4a24      	ldr	r2, [pc, #144]	@ (8000834 <HAL_CAN_MspInit+0xb8>)
 80007a4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80007a8:	61d3      	str	r3, [r2, #28]
 80007aa:	4b22      	ldr	r3, [pc, #136]	@ (8000834 <HAL_CAN_MspInit+0xb8>)
 80007ac:	69db      	ldr	r3, [r3, #28]
 80007ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80007b2:	613b      	str	r3, [r7, #16]
 80007b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b6:	4b1f      	ldr	r3, [pc, #124]	@ (8000834 <HAL_CAN_MspInit+0xb8>)
 80007b8:	695b      	ldr	r3, [r3, #20]
 80007ba:	4a1e      	ldr	r2, [pc, #120]	@ (8000834 <HAL_CAN_MspInit+0xb8>)
 80007bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007c0:	6153      	str	r3, [r2, #20]
 80007c2:	4b1c      	ldr	r3, [pc, #112]	@ (8000834 <HAL_CAN_MspInit+0xb8>)
 80007c4:	695b      	ldr	r3, [r3, #20]
 80007c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80007ca:	60fb      	str	r3, [r7, #12]
 80007cc:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80007ce:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80007d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007d4:	2302      	movs	r3, #2
 80007d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007d8:	2301      	movs	r3, #1
 80007da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007dc:	2303      	movs	r3, #3
 80007de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM1;
 80007e0:	2309      	movs	r3, #9
 80007e2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e4:	f107 0314 	add.w	r3, r7, #20
 80007e8:	4619      	mov	r1, r3
 80007ea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007ee:	f001 f8a9 	bl	8001944 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80007f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007f8:	2302      	movs	r3, #2
 80007fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fc:	2300      	movs	r3, #0
 80007fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000800:	2303      	movs	r3, #3
 8000802:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM1;
 8000804:	2309      	movs	r3, #9
 8000806:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000808:	f107 0314 	add.w	r3, r7, #20
 800080c:	4619      	mov	r1, r3
 800080e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000812:	f001 f897 	bl	8001944 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 5, 0);
 8000816:	2200      	movs	r2, #0
 8000818:	2105      	movs	r1, #5
 800081a:	2014      	movs	r0, #20
 800081c:	f001 f868 	bl	80018f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 8000820:	2014      	movs	r0, #20
 8000822:	f001 f881 	bl	8001928 <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN_MspInit 1 */

  }

}
 8000826:	bf00      	nop
 8000828:	3728      	adds	r7, #40	@ 0x28
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	40006400 	.word	0x40006400
 8000834:	40021000 	.word	0x40021000

08000838 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b08a      	sub	sp, #40	@ 0x28
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000840:	f107 0314 	add.w	r3, r7, #20
 8000844:	2200      	movs	r2, #0
 8000846:	601a      	str	r2, [r3, #0]
 8000848:	605a      	str	r2, [r3, #4]
 800084a:	609a      	str	r2, [r3, #8]
 800084c:	60da      	str	r2, [r3, #12]
 800084e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4a17      	ldr	r2, [pc, #92]	@ (80008b4 <HAL_UART_MspInit+0x7c>)
 8000856:	4293      	cmp	r3, r2
 8000858:	d128      	bne.n	80008ac <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800085a:	4b17      	ldr	r3, [pc, #92]	@ (80008b8 <HAL_UART_MspInit+0x80>)
 800085c:	69db      	ldr	r3, [r3, #28]
 800085e:	4a16      	ldr	r2, [pc, #88]	@ (80008b8 <HAL_UART_MspInit+0x80>)
 8000860:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000864:	61d3      	str	r3, [r2, #28]
 8000866:	4b14      	ldr	r3, [pc, #80]	@ (80008b8 <HAL_UART_MspInit+0x80>)
 8000868:	69db      	ldr	r3, [r3, #28]
 800086a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800086e:	613b      	str	r3, [r7, #16]
 8000870:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000872:	4b11      	ldr	r3, [pc, #68]	@ (80008b8 <HAL_UART_MspInit+0x80>)
 8000874:	695b      	ldr	r3, [r3, #20]
 8000876:	4a10      	ldr	r2, [pc, #64]	@ (80008b8 <HAL_UART_MspInit+0x80>)
 8000878:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800087c:	6153      	str	r3, [r2, #20]
 800087e:	4b0e      	ldr	r3, [pc, #56]	@ (80008b8 <HAL_UART_MspInit+0x80>)
 8000880:	695b      	ldr	r3, [r3, #20]
 8000882:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000886:	60fb      	str	r3, [r7, #12]
 8000888:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800088a:	230c      	movs	r3, #12
 800088c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800088e:	2302      	movs	r3, #2
 8000890:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000892:	2300      	movs	r3, #0
 8000894:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000896:	2300      	movs	r3, #0
 8000898:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800089a:	2307      	movs	r3, #7
 800089c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800089e:	f107 0314 	add.w	r3, r7, #20
 80008a2:	4619      	mov	r1, r3
 80008a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008a8:	f001 f84c 	bl	8001944 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80008ac:	bf00      	nop
 80008ae:	3728      	adds	r7, #40	@ 0x28
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	40004400 	.word	0x40004400
 80008b8:	40021000 	.word	0x40021000

080008bc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b08c      	sub	sp, #48	@ 0x30
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80008c4:	2300      	movs	r3, #0
 80008c6:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 80008c8:	2300      	movs	r3, #0
 80008ca:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80008cc:	4b2e      	ldr	r3, [pc, #184]	@ (8000988 <HAL_InitTick+0xcc>)
 80008ce:	699b      	ldr	r3, [r3, #24]
 80008d0:	4a2d      	ldr	r2, [pc, #180]	@ (8000988 <HAL_InitTick+0xcc>)
 80008d2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80008d6:	6193      	str	r3, [r2, #24]
 80008d8:	4b2b      	ldr	r3, [pc, #172]	@ (8000988 <HAL_InitTick+0xcc>)
 80008da:	699b      	ldr	r3, [r3, #24]
 80008dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80008e0:	60bb      	str	r3, [r7, #8]
 80008e2:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008e4:	f107 020c 	add.w	r2, r7, #12
 80008e8:	f107 0310 	add.w	r3, r7, #16
 80008ec:	4611      	mov	r1, r2
 80008ee:	4618      	mov	r0, r3
 80008f0:	f002 fc2a 	bl	8003148 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80008f4:	f002 fc06 	bl	8003104 <HAL_RCC_GetPCLK2Freq>
 80008f8:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80008fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80008fc:	4a23      	ldr	r2, [pc, #140]	@ (800098c <HAL_InitTick+0xd0>)
 80008fe:	fba2 2303 	umull	r2, r3, r2, r3
 8000902:	0c9b      	lsrs	r3, r3, #18
 8000904:	3b01      	subs	r3, #1
 8000906:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000908:	4b21      	ldr	r3, [pc, #132]	@ (8000990 <HAL_InitTick+0xd4>)
 800090a:	4a22      	ldr	r2, [pc, #136]	@ (8000994 <HAL_InitTick+0xd8>)
 800090c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800090e:	4b20      	ldr	r3, [pc, #128]	@ (8000990 <HAL_InitTick+0xd4>)
 8000910:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000914:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000916:	4a1e      	ldr	r2, [pc, #120]	@ (8000990 <HAL_InitTick+0xd4>)
 8000918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800091a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800091c:	4b1c      	ldr	r3, [pc, #112]	@ (8000990 <HAL_InitTick+0xd4>)
 800091e:	2200      	movs	r2, #0
 8000920:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000922:	4b1b      	ldr	r3, [pc, #108]	@ (8000990 <HAL_InitTick+0xd4>)
 8000924:	2200      	movs	r2, #0
 8000926:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000928:	4b19      	ldr	r3, [pc, #100]	@ (8000990 <HAL_InitTick+0xd4>)
 800092a:	2200      	movs	r2, #0
 800092c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800092e:	4818      	ldr	r0, [pc, #96]	@ (8000990 <HAL_InitTick+0xd4>)
 8000930:	f002 fc3c 	bl	80031ac <HAL_TIM_Base_Init>
 8000934:	4603      	mov	r3, r0
 8000936:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800093a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800093e:	2b00      	cmp	r3, #0
 8000940:	d11b      	bne.n	800097a <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000942:	4813      	ldr	r0, [pc, #76]	@ (8000990 <HAL_InitTick+0xd4>)
 8000944:	f002 fc94 	bl	8003270 <HAL_TIM_Base_Start_IT>
 8000948:	4603      	mov	r3, r0
 800094a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 800094e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000952:	2b00      	cmp	r3, #0
 8000954:	d111      	bne.n	800097a <HAL_InitTick+0xbe>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000956:	2019      	movs	r0, #25
 8000958:	f000 ffe6 	bl	8001928 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	2b0f      	cmp	r3, #15
 8000960:	d808      	bhi.n	8000974 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8000962:	2200      	movs	r2, #0
 8000964:	6879      	ldr	r1, [r7, #4]
 8000966:	2019      	movs	r0, #25
 8000968:	f000 ffc2 	bl	80018f0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800096c:	4a0a      	ldr	r2, [pc, #40]	@ (8000998 <HAL_InitTick+0xdc>)
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	6013      	str	r3, [r2, #0]
 8000972:	e002      	b.n	800097a <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 8000974:	2301      	movs	r3, #1
 8000976:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800097a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800097e:	4618      	mov	r0, r3
 8000980:	3730      	adds	r7, #48	@ 0x30
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	40021000 	.word	0x40021000
 800098c:	431bde83 	.word	0x431bde83
 8000990:	20000380 	.word	0x20000380
 8000994:	40012c00 	.word	0x40012c00
 8000998:	20000004 	.word	0x20000004

0800099c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009a0:	bf00      	nop
 80009a2:	e7fd      	b.n	80009a0 <NMI_Handler+0x4>

080009a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009a8:	bf00      	nop
 80009aa:	e7fd      	b.n	80009a8 <HardFault_Handler+0x4>

080009ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009b0:	bf00      	nop
 80009b2:	e7fd      	b.n	80009b0 <MemManage_Handler+0x4>

080009b4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009b8:	bf00      	nop
 80009ba:	e7fd      	b.n	80009b8 <BusFault_Handler+0x4>

080009bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009c0:	bf00      	nop
 80009c2:	e7fd      	b.n	80009c0 <UsageFault_Handler+0x4>

080009c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009c8:	bf00      	nop
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr
	...

080009d4 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles CAN RX0 and USB low priority interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80009d8:	4802      	ldr	r0, [pc, #8]	@ (80009e4 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 80009da:	f000 fca2 	bl	8001322 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 80009de:	bf00      	nop
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	200002bc 	.word	0x200002bc

080009e8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80009ec:	4802      	ldr	r0, [pc, #8]	@ (80009f8 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80009ee:	f002 fc93 	bl	8003318 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80009f2:	bf00      	nop
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	20000380 	.word	0x20000380

080009fc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a00:	4b06      	ldr	r3, [pc, #24]	@ (8000a1c <SystemInit+0x20>)
 8000a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a06:	4a05      	ldr	r2, [pc, #20]	@ (8000a1c <SystemInit+0x20>)
 8000a08:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a0c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a10:	bf00      	nop
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop
 8000a1c:	e000ed00 	.word	0xe000ed00

08000a20 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a20:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a58 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a24:	f7ff ffea 	bl	80009fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a28:	480c      	ldr	r0, [pc, #48]	@ (8000a5c <LoopForever+0x6>)
  ldr r1, =_edata
 8000a2a:	490d      	ldr	r1, [pc, #52]	@ (8000a60 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a2c:	4a0d      	ldr	r2, [pc, #52]	@ (8000a64 <LoopForever+0xe>)
  movs r3, #0
 8000a2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a30:	e002      	b.n	8000a38 <LoopCopyDataInit>

08000a32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a36:	3304      	adds	r3, #4

08000a38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a3c:	d3f9      	bcc.n	8000a32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a3e:	4a0a      	ldr	r2, [pc, #40]	@ (8000a68 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a40:	4c0a      	ldr	r4, [pc, #40]	@ (8000a6c <LoopForever+0x16>)
  movs r3, #0
 8000a42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a44:	e001      	b.n	8000a4a <LoopFillZerobss>

08000a46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a48:	3204      	adds	r2, #4

08000a4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a4c:	d3fb      	bcc.n	8000a46 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a4e:	f005 f80d 	bl	8005a6c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a52:	f7ff fcb1 	bl	80003b8 <main>

08000a56 <LoopForever>:

LoopForever:
    b LoopForever
 8000a56:	e7fe      	b.n	8000a56 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a58:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000a5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a60:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000a64:	08005bb0 	.word	0x08005bb0
  ldr r2, =_sbss
 8000a68:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000a6c:	2000255c 	.word	0x2000255c

08000a70 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a70:	e7fe      	b.n	8000a70 <ADC1_IRQHandler>
	...

08000a74 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a78:	4b08      	ldr	r3, [pc, #32]	@ (8000a9c <HAL_Init+0x28>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a07      	ldr	r2, [pc, #28]	@ (8000a9c <HAL_Init+0x28>)
 8000a7e:	f043 0310 	orr.w	r3, r3, #16
 8000a82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a84:	2003      	movs	r0, #3
 8000a86:	f000 ff28 	bl	80018da <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a8a:	200f      	movs	r0, #15
 8000a8c:	f7ff ff16 	bl	80008bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a90:	f7ff fe4c 	bl	800072c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a94:	2300      	movs	r3, #0
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	40022000 	.word	0x40022000

08000aa0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000aa4:	4b06      	ldr	r3, [pc, #24]	@ (8000ac0 <HAL_IncTick+0x20>)
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	461a      	mov	r2, r3
 8000aaa:	4b06      	ldr	r3, [pc, #24]	@ (8000ac4 <HAL_IncTick+0x24>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	4413      	add	r3, r2
 8000ab0:	4a04      	ldr	r2, [pc, #16]	@ (8000ac4 <HAL_IncTick+0x24>)
 8000ab2:	6013      	str	r3, [r2, #0]
}
 8000ab4:	bf00      	nop
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop
 8000ac0:	20000008 	.word	0x20000008
 8000ac4:	200003cc 	.word	0x200003cc

08000ac8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  return uwTick;  
 8000acc:	4b03      	ldr	r3, [pc, #12]	@ (8000adc <HAL_GetTick+0x14>)
 8000ace:	681b      	ldr	r3, [r3, #0]
}
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop
 8000adc:	200003cc 	.word	0x200003cc

08000ae0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b084      	sub	sp, #16
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d101      	bne.n	8000af2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000aee:	2301      	movs	r3, #1
 8000af0:	e0ed      	b.n	8000cce <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000af8:	b2db      	uxtb	r3, r3
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d102      	bne.n	8000b04 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000afe:	6878      	ldr	r0, [r7, #4]
 8000b00:	f7ff fe3c 	bl	800077c <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	681a      	ldr	r2, [r3, #0]
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	f042 0201 	orr.w	r2, r2, #1
 8000b12:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000b14:	f7ff ffd8 	bl	8000ac8 <HAL_GetTick>
 8000b18:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000b1a:	e012      	b.n	8000b42 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000b1c:	f7ff ffd4 	bl	8000ac8 <HAL_GetTick>
 8000b20:	4602      	mov	r2, r0
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	1ad3      	subs	r3, r2, r3
 8000b26:	2b0a      	cmp	r3, #10
 8000b28:	d90b      	bls.n	8000b42 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b2e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	2205      	movs	r2, #5
 8000b3a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	e0c5      	b.n	8000cce <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	685b      	ldr	r3, [r3, #4]
 8000b48:	f003 0301 	and.w	r3, r3, #1
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d0e5      	beq.n	8000b1c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	681a      	ldr	r2, [r3, #0]
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	f022 0202 	bic.w	r2, r2, #2
 8000b5e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000b60:	f7ff ffb2 	bl	8000ac8 <HAL_GetTick>
 8000b64:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000b66:	e012      	b.n	8000b8e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000b68:	f7ff ffae 	bl	8000ac8 <HAL_GetTick>
 8000b6c:	4602      	mov	r2, r0
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	1ad3      	subs	r3, r2, r3
 8000b72:	2b0a      	cmp	r3, #10
 8000b74:	d90b      	bls.n	8000b8e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b7a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	2205      	movs	r2, #5
 8000b86:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	e09f      	b.n	8000cce <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	685b      	ldr	r3, [r3, #4]
 8000b94:	f003 0302 	and.w	r3, r3, #2
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d1e5      	bne.n	8000b68 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	7e1b      	ldrb	r3, [r3, #24]
 8000ba0:	2b01      	cmp	r3, #1
 8000ba2:	d108      	bne.n	8000bb6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	681a      	ldr	r2, [r3, #0]
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000bb2:	601a      	str	r2, [r3, #0]
 8000bb4:	e007      	b.n	8000bc6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	681a      	ldr	r2, [r3, #0]
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000bc4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	7e5b      	ldrb	r3, [r3, #25]
 8000bca:	2b01      	cmp	r3, #1
 8000bcc:	d108      	bne.n	8000be0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	681a      	ldr	r2, [r3, #0]
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000bdc:	601a      	str	r2, [r3, #0]
 8000bde:	e007      	b.n	8000bf0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	681a      	ldr	r2, [r3, #0]
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000bee:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	7e9b      	ldrb	r3, [r3, #26]
 8000bf4:	2b01      	cmp	r3, #1
 8000bf6:	d108      	bne.n	8000c0a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	681a      	ldr	r2, [r3, #0]
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	f042 0220 	orr.w	r2, r2, #32
 8000c06:	601a      	str	r2, [r3, #0]
 8000c08:	e007      	b.n	8000c1a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	681a      	ldr	r2, [r3, #0]
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	f022 0220 	bic.w	r2, r2, #32
 8000c18:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	7edb      	ldrb	r3, [r3, #27]
 8000c1e:	2b01      	cmp	r3, #1
 8000c20:	d108      	bne.n	8000c34 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	681a      	ldr	r2, [r3, #0]
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	f022 0210 	bic.w	r2, r2, #16
 8000c30:	601a      	str	r2, [r3, #0]
 8000c32:	e007      	b.n	8000c44 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	681a      	ldr	r2, [r3, #0]
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	f042 0210 	orr.w	r2, r2, #16
 8000c42:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	7f1b      	ldrb	r3, [r3, #28]
 8000c48:	2b01      	cmp	r3, #1
 8000c4a:	d108      	bne.n	8000c5e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	681a      	ldr	r2, [r3, #0]
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	f042 0208 	orr.w	r2, r2, #8
 8000c5a:	601a      	str	r2, [r3, #0]
 8000c5c:	e007      	b.n	8000c6e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	681a      	ldr	r2, [r3, #0]
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	f022 0208 	bic.w	r2, r2, #8
 8000c6c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	7f5b      	ldrb	r3, [r3, #29]
 8000c72:	2b01      	cmp	r3, #1
 8000c74:	d108      	bne.n	8000c88 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	681a      	ldr	r2, [r3, #0]
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	f042 0204 	orr.w	r2, r2, #4
 8000c84:	601a      	str	r2, [r3, #0]
 8000c86:	e007      	b.n	8000c98 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	681a      	ldr	r2, [r3, #0]
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	f022 0204 	bic.w	r2, r2, #4
 8000c96:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	689a      	ldr	r2, [r3, #8]
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	68db      	ldr	r3, [r3, #12]
 8000ca0:	431a      	orrs	r2, r3
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	691b      	ldr	r3, [r3, #16]
 8000ca6:	431a      	orrs	r2, r3
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	695b      	ldr	r3, [r3, #20]
 8000cac:	ea42 0103 	orr.w	r1, r2, r3
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	1e5a      	subs	r2, r3, #1
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	430a      	orrs	r2, r1
 8000cbc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000ccc:	2300      	movs	r3, #0
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3710      	adds	r7, #16
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}

08000cd6 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000cd6:	b480      	push	{r7}
 8000cd8:	b087      	sub	sp, #28
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	6078      	str	r0, [r7, #4]
 8000cde:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000cec:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000cee:	7cfb      	ldrb	r3, [r7, #19]
 8000cf0:	2b01      	cmp	r3, #1
 8000cf2:	d003      	beq.n	8000cfc <HAL_CAN_ConfigFilter+0x26>
 8000cf4:	7cfb      	ldrb	r3, [r7, #19]
 8000cf6:	2b02      	cmp	r3, #2
 8000cf8:	f040 80aa 	bne.w	8000e50 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000d02:	f043 0201 	orr.w	r2, r3, #1
 8000d06:	697b      	ldr	r3, [r7, #20]
 8000d08:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	695b      	ldr	r3, [r3, #20]
 8000d10:	f003 031f 	and.w	r3, r3, #31
 8000d14:	2201      	movs	r2, #1
 8000d16:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	43db      	mvns	r3, r3
 8000d26:	401a      	ands	r2, r3
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	69db      	ldr	r3, [r3, #28]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d123      	bne.n	8000d7e <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000d36:	697b      	ldr	r3, [r7, #20]
 8000d38:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	43db      	mvns	r3, r3
 8000d40:	401a      	ands	r2, r3
 8000d42:	697b      	ldr	r3, [r7, #20]
 8000d44:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	68db      	ldr	r3, [r3, #12]
 8000d4c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000d54:	683a      	ldr	r2, [r7, #0]
 8000d56:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000d58:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000d5a:	697b      	ldr	r3, [r7, #20]
 8000d5c:	3248      	adds	r2, #72	@ 0x48
 8000d5e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	689b      	ldr	r3, [r3, #8]
 8000d66:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000d72:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d74:	6979      	ldr	r1, [r7, #20]
 8000d76:	3348      	adds	r3, #72	@ 0x48
 8000d78:	00db      	lsls	r3, r3, #3
 8000d7a:	440b      	add	r3, r1
 8000d7c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	69db      	ldr	r3, [r3, #28]
 8000d82:	2b01      	cmp	r3, #1
 8000d84:	d122      	bne.n	8000dcc <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000d86:	697b      	ldr	r3, [r7, #20]
 8000d88:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	431a      	orrs	r2, r3
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000da2:	683a      	ldr	r2, [r7, #0]
 8000da4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000da6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	3248      	adds	r2, #72	@ 0x48
 8000dac:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	689b      	ldr	r3, [r3, #8]
 8000db4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	68db      	ldr	r3, [r3, #12]
 8000dba:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000dc0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000dc2:	6979      	ldr	r1, [r7, #20]
 8000dc4:	3348      	adds	r3, #72	@ 0x48
 8000dc6:	00db      	lsls	r3, r3, #3
 8000dc8:	440b      	add	r3, r1
 8000dca:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	699b      	ldr	r3, [r3, #24]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d109      	bne.n	8000de8 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	43db      	mvns	r3, r3
 8000dde:	401a      	ands	r2, r3
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8000de6:	e007      	b.n	8000df8 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	431a      	orrs	r2, r3
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	691b      	ldr	r3, [r3, #16]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d109      	bne.n	8000e14 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	43db      	mvns	r3, r3
 8000e0a:	401a      	ands	r2, r3
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8000e12:	e007      	b.n	8000e24 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	431a      	orrs	r2, r3
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	6a1b      	ldr	r3, [r3, #32]
 8000e28:	2b01      	cmp	r3, #1
 8000e2a:	d107      	bne.n	8000e3c <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	431a      	orrs	r2, r3
 8000e36:	697b      	ldr	r3, [r7, #20]
 8000e38:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000e42:	f023 0201 	bic.w	r2, r3, #1
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	e006      	b.n	8000e5e <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e54:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000e5c:	2301      	movs	r3, #1
  }
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	371c      	adds	r7, #28
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr

08000e6a <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000e6a:	b580      	push	{r7, lr}
 8000e6c:	b084      	sub	sp, #16
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	2b01      	cmp	r3, #1
 8000e7c:	d12e      	bne.n	8000edc <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	2202      	movs	r2, #2
 8000e82:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	681a      	ldr	r2, [r3, #0]
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f022 0201 	bic.w	r2, r2, #1
 8000e94:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000e96:	f7ff fe17 	bl	8000ac8 <HAL_GetTick>
 8000e9a:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000e9c:	e012      	b.n	8000ec4 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e9e:	f7ff fe13 	bl	8000ac8 <HAL_GetTick>
 8000ea2:	4602      	mov	r2, r0
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	1ad3      	subs	r3, r2, r3
 8000ea8:	2b0a      	cmp	r3, #10
 8000eaa:	d90b      	bls.n	8000ec4 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000eb0:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2205      	movs	r2, #5
 8000ebc:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	e012      	b.n	8000eea <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	f003 0301 	and.w	r3, r3, #1
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d1e5      	bne.n	8000e9e <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	e006      	b.n	8000eea <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ee0:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000ee8:	2301      	movs	r3, #1
  }
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	3710      	adds	r7, #16
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}

08000ef2 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8000ef2:	b480      	push	{r7}
 8000ef4:	b089      	sub	sp, #36	@ 0x24
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	60f8      	str	r0, [r7, #12]
 8000efa:	60b9      	str	r1, [r7, #8]
 8000efc:	607a      	str	r2, [r7, #4]
 8000efe:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f06:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	689b      	ldr	r3, [r3, #8]
 8000f0e:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000f10:	7ffb      	ldrb	r3, [r7, #31]
 8000f12:	2b01      	cmp	r3, #1
 8000f14:	d003      	beq.n	8000f1e <HAL_CAN_AddTxMessage+0x2c>
 8000f16:	7ffb      	ldrb	r3, [r7, #31]
 8000f18:	2b02      	cmp	r3, #2
 8000f1a:	f040 80ad 	bne.w	8001078 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000f1e:	69bb      	ldr	r3, [r7, #24]
 8000f20:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d10a      	bne.n	8000f3e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000f28:	69bb      	ldr	r3, [r7, #24]
 8000f2a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d105      	bne.n	8000f3e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000f32:	69bb      	ldr	r3, [r7, #24]
 8000f34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	f000 8095 	beq.w	8001068 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000f3e:	69bb      	ldr	r3, [r7, #24]
 8000f40:	0e1b      	lsrs	r3, r3, #24
 8000f42:	f003 0303 	and.w	r3, r3, #3
 8000f46:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000f48:	2201      	movs	r2, #1
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	409a      	lsls	r2, r3
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000f52:	68bb      	ldr	r3, [r7, #8]
 8000f54:	689b      	ldr	r3, [r3, #8]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d10d      	bne.n	8000f76 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000f5a:	68bb      	ldr	r3, [r7, #8]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000f64:	68f9      	ldr	r1, [r7, #12]
 8000f66:	6809      	ldr	r1, [r1, #0]
 8000f68:	431a      	orrs	r2, r3
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	3318      	adds	r3, #24
 8000f6e:	011b      	lsls	r3, r3, #4
 8000f70:	440b      	add	r3, r1
 8000f72:	601a      	str	r2, [r3, #0]
 8000f74:	e00f      	b.n	8000f96 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000f76:	68bb      	ldr	r3, [r7, #8]
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000f80:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000f82:	68bb      	ldr	r3, [r7, #8]
 8000f84:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000f86:	68f9      	ldr	r1, [r7, #12]
 8000f88:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000f8a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	3318      	adds	r3, #24
 8000f90:	011b      	lsls	r3, r3, #4
 8000f92:	440b      	add	r3, r1
 8000f94:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	6819      	ldr	r1, [r3, #0]
 8000f9a:	68bb      	ldr	r3, [r7, #8]
 8000f9c:	691a      	ldr	r2, [r3, #16]
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	3318      	adds	r3, #24
 8000fa2:	011b      	lsls	r3, r3, #4
 8000fa4:	440b      	add	r3, r1
 8000fa6:	3304      	adds	r3, #4
 8000fa8:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000faa:	68bb      	ldr	r3, [r7, #8]
 8000fac:	7d1b      	ldrb	r3, [r3, #20]
 8000fae:	2b01      	cmp	r3, #1
 8000fb0:	d111      	bne.n	8000fd6 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	681a      	ldr	r2, [r3, #0]
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	3318      	adds	r3, #24
 8000fba:	011b      	lsls	r3, r3, #4
 8000fbc:	4413      	add	r3, r2
 8000fbe:	3304      	adds	r3, #4
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	68fa      	ldr	r2, [r7, #12]
 8000fc4:	6811      	ldr	r1, [r2, #0]
 8000fc6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	3318      	adds	r3, #24
 8000fce:	011b      	lsls	r3, r3, #4
 8000fd0:	440b      	add	r3, r1
 8000fd2:	3304      	adds	r3, #4
 8000fd4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	3307      	adds	r3, #7
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	061a      	lsls	r2, r3, #24
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	3306      	adds	r3, #6
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	041b      	lsls	r3, r3, #16
 8000fe6:	431a      	orrs	r2, r3
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	3305      	adds	r3, #5
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	021b      	lsls	r3, r3, #8
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	687a      	ldr	r2, [r7, #4]
 8000ff4:	3204      	adds	r2, #4
 8000ff6:	7812      	ldrb	r2, [r2, #0]
 8000ff8:	4610      	mov	r0, r2
 8000ffa:	68fa      	ldr	r2, [r7, #12]
 8000ffc:	6811      	ldr	r1, [r2, #0]
 8000ffe:	ea43 0200 	orr.w	r2, r3, r0
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	011b      	lsls	r3, r3, #4
 8001006:	440b      	add	r3, r1
 8001008:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 800100c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	3303      	adds	r3, #3
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	061a      	lsls	r2, r3, #24
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	3302      	adds	r3, #2
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	041b      	lsls	r3, r3, #16
 800101e:	431a      	orrs	r2, r3
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	3301      	adds	r3, #1
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	021b      	lsls	r3, r3, #8
 8001028:	4313      	orrs	r3, r2
 800102a:	687a      	ldr	r2, [r7, #4]
 800102c:	7812      	ldrb	r2, [r2, #0]
 800102e:	4610      	mov	r0, r2
 8001030:	68fa      	ldr	r2, [r7, #12]
 8001032:	6811      	ldr	r1, [r2, #0]
 8001034:	ea43 0200 	orr.w	r2, r3, r0
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	011b      	lsls	r3, r3, #4
 800103c:	440b      	add	r3, r1
 800103e:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001042:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	681a      	ldr	r2, [r3, #0]
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	3318      	adds	r3, #24
 800104c:	011b      	lsls	r3, r3, #4
 800104e:	4413      	add	r3, r2
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	68fa      	ldr	r2, [r7, #12]
 8001054:	6811      	ldr	r1, [r2, #0]
 8001056:	f043 0201 	orr.w	r2, r3, #1
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	3318      	adds	r3, #24
 800105e:	011b      	lsls	r3, r3, #4
 8001060:	440b      	add	r3, r1
 8001062:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001064:	2300      	movs	r3, #0
 8001066:	e00e      	b.n	8001086 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800106c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001074:	2301      	movs	r3, #1
 8001076:	e006      	b.n	8001086 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800107c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001084:	2301      	movs	r3, #1
  }
}
 8001086:	4618      	mov	r0, r3
 8001088:	3724      	adds	r7, #36	@ 0x24
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr

08001092 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001092:	b480      	push	{r7}
 8001094:	b087      	sub	sp, #28
 8001096:	af00      	add	r7, sp, #0
 8001098:	60f8      	str	r0, [r7, #12]
 800109a:	60b9      	str	r1, [r7, #8]
 800109c:	607a      	str	r2, [r7, #4]
 800109e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010a6:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80010a8:	7dfb      	ldrb	r3, [r7, #23]
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	d003      	beq.n	80010b6 <HAL_CAN_GetRxMessage+0x24>
 80010ae:	7dfb      	ldrb	r3, [r7, #23]
 80010b0:	2b02      	cmp	r3, #2
 80010b2:	f040 8103 	bne.w	80012bc <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80010b6:	68bb      	ldr	r3, [r7, #8]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d10e      	bne.n	80010da <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	68db      	ldr	r3, [r3, #12]
 80010c2:	f003 0303 	and.w	r3, r3, #3
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d116      	bne.n	80010f8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010ce:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
 80010d8:	e0f7      	b.n	80012ca <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	691b      	ldr	r3, [r3, #16]
 80010e0:	f003 0303 	and.w	r3, r3, #3
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d107      	bne.n	80010f8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010ec:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80010f4:	2301      	movs	r3, #1
 80010f6:	e0e8      	b.n	80012ca <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	681a      	ldr	r2, [r3, #0]
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	331b      	adds	r3, #27
 8001100:	011b      	lsls	r3, r3, #4
 8001102:	4413      	add	r3, r2
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f003 0204 	and.w	r2, r3, #4
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	689b      	ldr	r3, [r3, #8]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d10c      	bne.n	8001130 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	68bb      	ldr	r3, [r7, #8]
 800111c:	331b      	adds	r3, #27
 800111e:	011b      	lsls	r3, r3, #4
 8001120:	4413      	add	r3, r2
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	0d5b      	lsrs	r3, r3, #21
 8001126:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	601a      	str	r2, [r3, #0]
 800112e:	e00b      	b.n	8001148 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	681a      	ldr	r2, [r3, #0]
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	331b      	adds	r3, #27
 8001138:	011b      	lsls	r3, r3, #4
 800113a:	4413      	add	r3, r2
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	08db      	lsrs	r3, r3, #3
 8001140:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	331b      	adds	r3, #27
 8001150:	011b      	lsls	r3, r3, #4
 8001152:	4413      	add	r3, r2
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f003 0202 	and.w	r2, r3, #2
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	68bb      	ldr	r3, [r7, #8]
 8001164:	331b      	adds	r3, #27
 8001166:	011b      	lsls	r3, r3, #4
 8001168:	4413      	add	r3, r2
 800116a:	3304      	adds	r3, #4
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f003 0308 	and.w	r3, r3, #8
 8001172:	2b00      	cmp	r3, #0
 8001174:	d003      	beq.n	800117e <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2208      	movs	r2, #8
 800117a:	611a      	str	r2, [r3, #16]
 800117c:	e00b      	b.n	8001196 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	68bb      	ldr	r3, [r7, #8]
 8001184:	331b      	adds	r3, #27
 8001186:	011b      	lsls	r3, r3, #4
 8001188:	4413      	add	r3, r2
 800118a:	3304      	adds	r3, #4
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f003 020f 	and.w	r2, r3, #15
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	681a      	ldr	r2, [r3, #0]
 800119a:	68bb      	ldr	r3, [r7, #8]
 800119c:	331b      	adds	r3, #27
 800119e:	011b      	lsls	r3, r3, #4
 80011a0:	4413      	add	r3, r2
 80011a2:	3304      	adds	r3, #4
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	0a1b      	lsrs	r3, r3, #8
 80011a8:	b2da      	uxtb	r2, r3
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	681a      	ldr	r2, [r3, #0]
 80011b2:	68bb      	ldr	r3, [r7, #8]
 80011b4:	331b      	adds	r3, #27
 80011b6:	011b      	lsls	r3, r3, #4
 80011b8:	4413      	add	r3, r2
 80011ba:	3304      	adds	r3, #4
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	0c1b      	lsrs	r3, r3, #16
 80011c0:	b29a      	uxth	r2, r3
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	68bb      	ldr	r3, [r7, #8]
 80011cc:	011b      	lsls	r3, r3, #4
 80011ce:	4413      	add	r3, r2
 80011d0:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	b2da      	uxtb	r2, r3
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	68bb      	ldr	r3, [r7, #8]
 80011e2:	011b      	lsls	r3, r3, #4
 80011e4:	4413      	add	r3, r2
 80011e6:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	0a1a      	lsrs	r2, r3, #8
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	3301      	adds	r3, #1
 80011f2:	b2d2      	uxtb	r2, r2
 80011f4:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	68bb      	ldr	r3, [r7, #8]
 80011fc:	011b      	lsls	r3, r3, #4
 80011fe:	4413      	add	r3, r2
 8001200:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	0c1a      	lsrs	r2, r3, #16
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	3302      	adds	r3, #2
 800120c:	b2d2      	uxtb	r2, r2
 800120e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	681a      	ldr	r2, [r3, #0]
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	011b      	lsls	r3, r3, #4
 8001218:	4413      	add	r3, r2
 800121a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	0e1a      	lsrs	r2, r3, #24
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	3303      	adds	r3, #3
 8001226:	b2d2      	uxtb	r2, r2
 8001228:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	68bb      	ldr	r3, [r7, #8]
 8001230:	011b      	lsls	r3, r3, #4
 8001232:	4413      	add	r3, r2
 8001234:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	3304      	adds	r3, #4
 800123e:	b2d2      	uxtb	r2, r2
 8001240:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	68bb      	ldr	r3, [r7, #8]
 8001248:	011b      	lsls	r3, r3, #4
 800124a:	4413      	add	r3, r2
 800124c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	0a1a      	lsrs	r2, r3, #8
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	3305      	adds	r3, #5
 8001258:	b2d2      	uxtb	r2, r2
 800125a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	68bb      	ldr	r3, [r7, #8]
 8001262:	011b      	lsls	r3, r3, #4
 8001264:	4413      	add	r3, r2
 8001266:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	0c1a      	lsrs	r2, r3, #16
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	3306      	adds	r3, #6
 8001272:	b2d2      	uxtb	r2, r2
 8001274:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	681a      	ldr	r2, [r3, #0]
 800127a:	68bb      	ldr	r3, [r7, #8]
 800127c:	011b      	lsls	r3, r3, #4
 800127e:	4413      	add	r3, r2
 8001280:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	0e1a      	lsrs	r2, r3, #24
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	3307      	adds	r3, #7
 800128c:	b2d2      	uxtb	r2, r2
 800128e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d108      	bne.n	80012a8 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	68da      	ldr	r2, [r3, #12]
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f042 0220 	orr.w	r2, r2, #32
 80012a4:	60da      	str	r2, [r3, #12]
 80012a6:	e007      	b.n	80012b8 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	691a      	ldr	r2, [r3, #16]
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f042 0220 	orr.w	r2, r2, #32
 80012b6:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80012b8:	2300      	movs	r3, #0
 80012ba:	e006      	b.n	80012ca <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012c0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80012c8:	2301      	movs	r3, #1
  }
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	371c      	adds	r7, #28
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr

080012d6 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80012d6:	b480      	push	{r7}
 80012d8:	b085      	sub	sp, #20
 80012da:	af00      	add	r7, sp, #0
 80012dc:	6078      	str	r0, [r7, #4]
 80012de:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012e6:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80012e8:	7bfb      	ldrb	r3, [r7, #15]
 80012ea:	2b01      	cmp	r3, #1
 80012ec:	d002      	beq.n	80012f4 <HAL_CAN_ActivateNotification+0x1e>
 80012ee:	7bfb      	ldrb	r3, [r7, #15]
 80012f0:	2b02      	cmp	r3, #2
 80012f2:	d109      	bne.n	8001308 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	6959      	ldr	r1, [r3, #20]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	683a      	ldr	r2, [r7, #0]
 8001300:	430a      	orrs	r2, r1
 8001302:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001304:	2300      	movs	r3, #0
 8001306:	e006      	b.n	8001316 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800130c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001314:	2301      	movs	r3, #1
  }
}
 8001316:	4618      	mov	r0, r3
 8001318:	3714      	adds	r7, #20
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr

08001322 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001322:	b580      	push	{r7, lr}
 8001324:	b08a      	sub	sp, #40	@ 0x28
 8001326:	af00      	add	r7, sp, #0
 8001328:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800132a:	2300      	movs	r3, #0
 800132c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	695b      	ldr	r3, [r3, #20]
 8001334:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	689b      	ldr	r3, [r3, #8]
 8001344:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	68db      	ldr	r3, [r3, #12]
 800134c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	691b      	ldr	r3, [r3, #16]
 8001354:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	699b      	ldr	r3, [r3, #24]
 800135c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800135e:	6a3b      	ldr	r3, [r7, #32]
 8001360:	f003 0301 	and.w	r3, r3, #1
 8001364:	2b00      	cmp	r3, #0
 8001366:	d07c      	beq.n	8001462 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001368:	69bb      	ldr	r3, [r7, #24]
 800136a:	f003 0301 	and.w	r3, r3, #1
 800136e:	2b00      	cmp	r3, #0
 8001370:	d023      	beq.n	80013ba <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	2201      	movs	r2, #1
 8001378:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800137a:	69bb      	ldr	r3, [r7, #24]
 800137c:	f003 0302 	and.w	r3, r3, #2
 8001380:	2b00      	cmp	r3, #0
 8001382:	d003      	beq.n	800138c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001384:	6878      	ldr	r0, [r7, #4]
 8001386:	f000 f983 	bl	8001690 <HAL_CAN_TxMailbox0CompleteCallback>
 800138a:	e016      	b.n	80013ba <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800138c:	69bb      	ldr	r3, [r7, #24]
 800138e:	f003 0304 	and.w	r3, r3, #4
 8001392:	2b00      	cmp	r3, #0
 8001394:	d004      	beq.n	80013a0 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001398:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800139c:	627b      	str	r3, [r7, #36]	@ 0x24
 800139e:	e00c      	b.n	80013ba <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80013a0:	69bb      	ldr	r3, [r7, #24]
 80013a2:	f003 0308 	and.w	r3, r3, #8
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d004      	beq.n	80013b4 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80013aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013ac:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80013b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80013b2:	e002      	b.n	80013ba <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80013b4:	6878      	ldr	r0, [r7, #4]
 80013b6:	f000 f989 	bl	80016cc <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80013ba:	69bb      	ldr	r3, [r7, #24]
 80013bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d024      	beq.n	800140e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80013cc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80013ce:	69bb      	ldr	r3, [r7, #24]
 80013d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d003      	beq.n	80013e0 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80013d8:	6878      	ldr	r0, [r7, #4]
 80013da:	f000 f963 	bl	80016a4 <HAL_CAN_TxMailbox1CompleteCallback>
 80013de:	e016      	b.n	800140e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80013e0:	69bb      	ldr	r3, [r7, #24]
 80013e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d004      	beq.n	80013f4 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80013ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013ec:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80013f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80013f2:	e00c      	b.n	800140e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80013f4:	69bb      	ldr	r3, [r7, #24]
 80013f6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d004      	beq.n	8001408 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80013fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001400:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001404:	627b      	str	r3, [r7, #36]	@ 0x24
 8001406:	e002      	b.n	800140e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001408:	6878      	ldr	r0, [r7, #4]
 800140a:	f000 f969 	bl	80016e0 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800140e:	69bb      	ldr	r3, [r7, #24]
 8001410:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001414:	2b00      	cmp	r3, #0
 8001416:	d024      	beq.n	8001462 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001420:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001422:	69bb      	ldr	r3, [r7, #24]
 8001424:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001428:	2b00      	cmp	r3, #0
 800142a:	d003      	beq.n	8001434 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800142c:	6878      	ldr	r0, [r7, #4]
 800142e:	f000 f943 	bl	80016b8 <HAL_CAN_TxMailbox2CompleteCallback>
 8001432:	e016      	b.n	8001462 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001434:	69bb      	ldr	r3, [r7, #24]
 8001436:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800143a:	2b00      	cmp	r3, #0
 800143c:	d004      	beq.n	8001448 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800143e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001440:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001444:	627b      	str	r3, [r7, #36]	@ 0x24
 8001446:	e00c      	b.n	8001462 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001448:	69bb      	ldr	r3, [r7, #24]
 800144a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800144e:	2b00      	cmp	r3, #0
 8001450:	d004      	beq.n	800145c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001454:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001458:	627b      	str	r3, [r7, #36]	@ 0x24
 800145a:	e002      	b.n	8001462 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800145c:	6878      	ldr	r0, [r7, #4]
 800145e:	f000 f949 	bl	80016f4 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001462:	6a3b      	ldr	r3, [r7, #32]
 8001464:	f003 0308 	and.w	r3, r3, #8
 8001468:	2b00      	cmp	r3, #0
 800146a:	d00c      	beq.n	8001486 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	f003 0310 	and.w	r3, r3, #16
 8001472:	2b00      	cmp	r3, #0
 8001474:	d007      	beq.n	8001486 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001478:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800147c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	2210      	movs	r2, #16
 8001484:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001486:	6a3b      	ldr	r3, [r7, #32]
 8001488:	f003 0304 	and.w	r3, r3, #4
 800148c:	2b00      	cmp	r3, #0
 800148e:	d00b      	beq.n	80014a8 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	f003 0308 	and.w	r3, r3, #8
 8001496:	2b00      	cmp	r3, #0
 8001498:	d006      	beq.n	80014a8 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	2208      	movs	r2, #8
 80014a0:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80014a2:	6878      	ldr	r0, [r7, #4]
 80014a4:	f000 f930 	bl	8001708 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80014a8:	6a3b      	ldr	r3, [r7, #32]
 80014aa:	f003 0302 	and.w	r3, r3, #2
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d009      	beq.n	80014c6 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	68db      	ldr	r3, [r3, #12]
 80014b8:	f003 0303 	and.w	r3, r3, #3
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d002      	beq.n	80014c6 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80014c0:	6878      	ldr	r0, [r7, #4]
 80014c2:	f7fe feb7 	bl	8000234 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80014c6:	6a3b      	ldr	r3, [r7, #32]
 80014c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d00c      	beq.n	80014ea <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	f003 0310 	and.w	r3, r3, #16
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d007      	beq.n	80014ea <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80014da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014dc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80014e0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	2210      	movs	r2, #16
 80014e8:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80014ea:	6a3b      	ldr	r3, [r7, #32]
 80014ec:	f003 0320 	and.w	r3, r3, #32
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d00b      	beq.n	800150c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	f003 0308 	and.w	r3, r3, #8
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d006      	beq.n	800150c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	2208      	movs	r2, #8
 8001504:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001506:	6878      	ldr	r0, [r7, #4]
 8001508:	f000 f912 	bl	8001730 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800150c:	6a3b      	ldr	r3, [r7, #32]
 800150e:	f003 0310 	and.w	r3, r3, #16
 8001512:	2b00      	cmp	r3, #0
 8001514:	d009      	beq.n	800152a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	691b      	ldr	r3, [r3, #16]
 800151c:	f003 0303 	and.w	r3, r3, #3
 8001520:	2b00      	cmp	r3, #0
 8001522:	d002      	beq.n	800152a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001524:	6878      	ldr	r0, [r7, #4]
 8001526:	f000 f8f9 	bl	800171c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800152a:	6a3b      	ldr	r3, [r7, #32]
 800152c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001530:	2b00      	cmp	r3, #0
 8001532:	d00b      	beq.n	800154c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001534:	69fb      	ldr	r3, [r7, #28]
 8001536:	f003 0310 	and.w	r3, r3, #16
 800153a:	2b00      	cmp	r3, #0
 800153c:	d006      	beq.n	800154c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	2210      	movs	r2, #16
 8001544:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001546:	6878      	ldr	r0, [r7, #4]
 8001548:	f000 f8fc 	bl	8001744 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800154c:	6a3b      	ldr	r3, [r7, #32]
 800154e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001552:	2b00      	cmp	r3, #0
 8001554:	d00b      	beq.n	800156e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001556:	69fb      	ldr	r3, [r7, #28]
 8001558:	f003 0308 	and.w	r3, r3, #8
 800155c:	2b00      	cmp	r3, #0
 800155e:	d006      	beq.n	800156e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	2208      	movs	r2, #8
 8001566:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001568:	6878      	ldr	r0, [r7, #4]
 800156a:	f000 f8f5 	bl	8001758 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800156e:	6a3b      	ldr	r3, [r7, #32]
 8001570:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001574:	2b00      	cmp	r3, #0
 8001576:	d07b      	beq.n	8001670 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001578:	69fb      	ldr	r3, [r7, #28]
 800157a:	f003 0304 	and.w	r3, r3, #4
 800157e:	2b00      	cmp	r3, #0
 8001580:	d072      	beq.n	8001668 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001582:	6a3b      	ldr	r3, [r7, #32]
 8001584:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001588:	2b00      	cmp	r3, #0
 800158a:	d008      	beq.n	800159e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001592:	2b00      	cmp	r3, #0
 8001594:	d003      	beq.n	800159e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001598:	f043 0301 	orr.w	r3, r3, #1
 800159c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800159e:	6a3b      	ldr	r3, [r7, #32]
 80015a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d008      	beq.n	80015ba <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d003      	beq.n	80015ba <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80015b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015b4:	f043 0302 	orr.w	r3, r3, #2
 80015b8:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80015ba:	6a3b      	ldr	r3, [r7, #32]
 80015bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d008      	beq.n	80015d6 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d003      	beq.n	80015d6 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80015ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015d0:	f043 0304 	orr.w	r3, r3, #4
 80015d4:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80015d6:	6a3b      	ldr	r3, [r7, #32]
 80015d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d043      	beq.n	8001668 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d03e      	beq.n	8001668 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80015f0:	2b60      	cmp	r3, #96	@ 0x60
 80015f2:	d02b      	beq.n	800164c <HAL_CAN_IRQHandler+0x32a>
 80015f4:	2b60      	cmp	r3, #96	@ 0x60
 80015f6:	d82e      	bhi.n	8001656 <HAL_CAN_IRQHandler+0x334>
 80015f8:	2b50      	cmp	r3, #80	@ 0x50
 80015fa:	d022      	beq.n	8001642 <HAL_CAN_IRQHandler+0x320>
 80015fc:	2b50      	cmp	r3, #80	@ 0x50
 80015fe:	d82a      	bhi.n	8001656 <HAL_CAN_IRQHandler+0x334>
 8001600:	2b40      	cmp	r3, #64	@ 0x40
 8001602:	d019      	beq.n	8001638 <HAL_CAN_IRQHandler+0x316>
 8001604:	2b40      	cmp	r3, #64	@ 0x40
 8001606:	d826      	bhi.n	8001656 <HAL_CAN_IRQHandler+0x334>
 8001608:	2b30      	cmp	r3, #48	@ 0x30
 800160a:	d010      	beq.n	800162e <HAL_CAN_IRQHandler+0x30c>
 800160c:	2b30      	cmp	r3, #48	@ 0x30
 800160e:	d822      	bhi.n	8001656 <HAL_CAN_IRQHandler+0x334>
 8001610:	2b10      	cmp	r3, #16
 8001612:	d002      	beq.n	800161a <HAL_CAN_IRQHandler+0x2f8>
 8001614:	2b20      	cmp	r3, #32
 8001616:	d005      	beq.n	8001624 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001618:	e01d      	b.n	8001656 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800161a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800161c:	f043 0308 	orr.w	r3, r3, #8
 8001620:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001622:	e019      	b.n	8001658 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001626:	f043 0310 	orr.w	r3, r3, #16
 800162a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800162c:	e014      	b.n	8001658 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800162e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001630:	f043 0320 	orr.w	r3, r3, #32
 8001634:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001636:	e00f      	b.n	8001658 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800163a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800163e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001640:	e00a      	b.n	8001658 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001644:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001648:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800164a:	e005      	b.n	8001658 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800164c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800164e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001652:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001654:	e000      	b.n	8001658 <HAL_CAN_IRQHandler+0x336>
            break;
 8001656:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	699a      	ldr	r2, [r3, #24]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001666:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	2204      	movs	r2, #4
 800166e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001672:	2b00      	cmp	r3, #0
 8001674:	d008      	beq.n	8001688 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800167a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800167c:	431a      	orrs	r2, r3
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001682:	6878      	ldr	r0, [r7, #4]
 8001684:	f000 f872 	bl	800176c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001688:	bf00      	nop
 800168a:	3728      	adds	r7, #40	@ 0x28
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}

08001690 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001698:	bf00      	nop
 800169a:	370c      	adds	r7, #12
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr

080016a4 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b083      	sub	sp, #12
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80016ac:	bf00      	nop
 80016ae:	370c      	adds	r7, #12
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr

080016b8 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80016c0:	bf00      	nop
 80016c2:	370c      	adds	r7, #12
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr

080016cc <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80016d4:	bf00      	nop
 80016d6:	370c      	adds	r7, #12
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr

080016e0 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80016e8:	bf00      	nop
 80016ea:	370c      	adds	r7, #12
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr

080016f4 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80016fc:	bf00      	nop
 80016fe:	370c      	adds	r7, #12
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr

08001708 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001710:	bf00      	nop
 8001712:	370c      	adds	r7, #12
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr

0800171c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001724:	bf00      	nop
 8001726:	370c      	adds	r7, #12
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr

08001730 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001738:	bf00      	nop
 800173a:	370c      	adds	r7, #12
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr

08001744 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800174c:	bf00      	nop
 800174e:	370c      	adds	r7, #12
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr

08001758 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001760:	bf00      	nop
 8001762:	370c      	adds	r7, #12
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr

0800176c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001774:	bf00      	nop
 8001776:	370c      	adds	r7, #12
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr

08001780 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001780:	b480      	push	{r7}
 8001782:	b085      	sub	sp, #20
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	f003 0307 	and.w	r3, r3, #7
 800178e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001790:	4b0c      	ldr	r3, [pc, #48]	@ (80017c4 <__NVIC_SetPriorityGrouping+0x44>)
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001796:	68ba      	ldr	r2, [r7, #8]
 8001798:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800179c:	4013      	ands	r3, r2
 800179e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017a8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80017ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017b2:	4a04      	ldr	r2, [pc, #16]	@ (80017c4 <__NVIC_SetPriorityGrouping+0x44>)
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	60d3      	str	r3, [r2, #12]
}
 80017b8:	bf00      	nop
 80017ba:	3714      	adds	r7, #20
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr
 80017c4:	e000ed00 	.word	0xe000ed00

080017c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017cc:	4b04      	ldr	r3, [pc, #16]	@ (80017e0 <__NVIC_GetPriorityGrouping+0x18>)
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	0a1b      	lsrs	r3, r3, #8
 80017d2:	f003 0307 	and.w	r3, r3, #7
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr
 80017e0:	e000ed00 	.word	0xe000ed00

080017e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	4603      	mov	r3, r0
 80017ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	db0b      	blt.n	800180e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017f6:	79fb      	ldrb	r3, [r7, #7]
 80017f8:	f003 021f 	and.w	r2, r3, #31
 80017fc:	4907      	ldr	r1, [pc, #28]	@ (800181c <__NVIC_EnableIRQ+0x38>)
 80017fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001802:	095b      	lsrs	r3, r3, #5
 8001804:	2001      	movs	r0, #1
 8001806:	fa00 f202 	lsl.w	r2, r0, r2
 800180a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800180e:	bf00      	nop
 8001810:	370c      	adds	r7, #12
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	e000e100 	.word	0xe000e100

08001820 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	4603      	mov	r3, r0
 8001828:	6039      	str	r1, [r7, #0]
 800182a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800182c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001830:	2b00      	cmp	r3, #0
 8001832:	db0a      	blt.n	800184a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	b2da      	uxtb	r2, r3
 8001838:	490c      	ldr	r1, [pc, #48]	@ (800186c <__NVIC_SetPriority+0x4c>)
 800183a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800183e:	0112      	lsls	r2, r2, #4
 8001840:	b2d2      	uxtb	r2, r2
 8001842:	440b      	add	r3, r1
 8001844:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001848:	e00a      	b.n	8001860 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	b2da      	uxtb	r2, r3
 800184e:	4908      	ldr	r1, [pc, #32]	@ (8001870 <__NVIC_SetPriority+0x50>)
 8001850:	79fb      	ldrb	r3, [r7, #7]
 8001852:	f003 030f 	and.w	r3, r3, #15
 8001856:	3b04      	subs	r3, #4
 8001858:	0112      	lsls	r2, r2, #4
 800185a:	b2d2      	uxtb	r2, r2
 800185c:	440b      	add	r3, r1
 800185e:	761a      	strb	r2, [r3, #24]
}
 8001860:	bf00      	nop
 8001862:	370c      	adds	r7, #12
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr
 800186c:	e000e100 	.word	0xe000e100
 8001870:	e000ed00 	.word	0xe000ed00

08001874 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001874:	b480      	push	{r7}
 8001876:	b089      	sub	sp, #36	@ 0x24
 8001878:	af00      	add	r7, sp, #0
 800187a:	60f8      	str	r0, [r7, #12]
 800187c:	60b9      	str	r1, [r7, #8]
 800187e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	f003 0307 	and.w	r3, r3, #7
 8001886:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001888:	69fb      	ldr	r3, [r7, #28]
 800188a:	f1c3 0307 	rsb	r3, r3, #7
 800188e:	2b04      	cmp	r3, #4
 8001890:	bf28      	it	cs
 8001892:	2304      	movcs	r3, #4
 8001894:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	3304      	adds	r3, #4
 800189a:	2b06      	cmp	r3, #6
 800189c:	d902      	bls.n	80018a4 <NVIC_EncodePriority+0x30>
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	3b03      	subs	r3, #3
 80018a2:	e000      	b.n	80018a6 <NVIC_EncodePriority+0x32>
 80018a4:	2300      	movs	r3, #0
 80018a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018a8:	f04f 32ff 	mov.w	r2, #4294967295
 80018ac:	69bb      	ldr	r3, [r7, #24]
 80018ae:	fa02 f303 	lsl.w	r3, r2, r3
 80018b2:	43da      	mvns	r2, r3
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	401a      	ands	r2, r3
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018bc:	f04f 31ff 	mov.w	r1, #4294967295
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	fa01 f303 	lsl.w	r3, r1, r3
 80018c6:	43d9      	mvns	r1, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018cc:	4313      	orrs	r3, r2
         );
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3724      	adds	r7, #36	@ 0x24
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr

080018da <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018da:	b580      	push	{r7, lr}
 80018dc:	b082      	sub	sp, #8
 80018de:	af00      	add	r7, sp, #0
 80018e0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018e2:	6878      	ldr	r0, [r7, #4]
 80018e4:	f7ff ff4c 	bl	8001780 <__NVIC_SetPriorityGrouping>
}
 80018e8:	bf00      	nop
 80018ea:	3708      	adds	r7, #8
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}

080018f0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b086      	sub	sp, #24
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	4603      	mov	r3, r0
 80018f8:	60b9      	str	r1, [r7, #8]
 80018fa:	607a      	str	r2, [r7, #4]
 80018fc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018fe:	2300      	movs	r3, #0
 8001900:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001902:	f7ff ff61 	bl	80017c8 <__NVIC_GetPriorityGrouping>
 8001906:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001908:	687a      	ldr	r2, [r7, #4]
 800190a:	68b9      	ldr	r1, [r7, #8]
 800190c:	6978      	ldr	r0, [r7, #20]
 800190e:	f7ff ffb1 	bl	8001874 <NVIC_EncodePriority>
 8001912:	4602      	mov	r2, r0
 8001914:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001918:	4611      	mov	r1, r2
 800191a:	4618      	mov	r0, r3
 800191c:	f7ff ff80 	bl	8001820 <__NVIC_SetPriority>
}
 8001920:	bf00      	nop
 8001922:	3718      	adds	r7, #24
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}

08001928 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	4603      	mov	r3, r0
 8001930:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001936:	4618      	mov	r0, r3
 8001938:	f7ff ff54 	bl	80017e4 <__NVIC_EnableIRQ>
}
 800193c:	bf00      	nop
 800193e:	3708      	adds	r7, #8
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}

08001944 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001944:	b480      	push	{r7}
 8001946:	b087      	sub	sp, #28
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
 800194c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800194e:	2300      	movs	r3, #0
 8001950:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001952:	e14e      	b.n	8001bf2 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	2101      	movs	r1, #1
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	fa01 f303 	lsl.w	r3, r1, r3
 8001960:	4013      	ands	r3, r2
 8001962:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	2b00      	cmp	r3, #0
 8001968:	f000 8140 	beq.w	8001bec <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f003 0303 	and.w	r3, r3, #3
 8001974:	2b01      	cmp	r3, #1
 8001976:	d005      	beq.n	8001984 <HAL_GPIO_Init+0x40>
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f003 0303 	and.w	r3, r3, #3
 8001980:	2b02      	cmp	r3, #2
 8001982:	d130      	bne.n	80019e6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	005b      	lsls	r3, r3, #1
 800198e:	2203      	movs	r2, #3
 8001990:	fa02 f303 	lsl.w	r3, r2, r3
 8001994:	43db      	mvns	r3, r3
 8001996:	693a      	ldr	r2, [r7, #16]
 8001998:	4013      	ands	r3, r2
 800199a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	68da      	ldr	r2, [r3, #12]
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	005b      	lsls	r3, r3, #1
 80019a4:	fa02 f303 	lsl.w	r3, r2, r3
 80019a8:	693a      	ldr	r2, [r7, #16]
 80019aa:	4313      	orrs	r3, r2
 80019ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	693a      	ldr	r2, [r7, #16]
 80019b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019ba:	2201      	movs	r2, #1
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	fa02 f303 	lsl.w	r3, r2, r3
 80019c2:	43db      	mvns	r3, r3
 80019c4:	693a      	ldr	r2, [r7, #16]
 80019c6:	4013      	ands	r3, r2
 80019c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	091b      	lsrs	r3, r3, #4
 80019d0:	f003 0201 	and.w	r2, r3, #1
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	fa02 f303 	lsl.w	r3, r2, r3
 80019da:	693a      	ldr	r2, [r7, #16]
 80019dc:	4313      	orrs	r3, r2
 80019de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	693a      	ldr	r2, [r7, #16]
 80019e4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	f003 0303 	and.w	r3, r3, #3
 80019ee:	2b03      	cmp	r3, #3
 80019f0:	d017      	beq.n	8001a22 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	68db      	ldr	r3, [r3, #12]
 80019f6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	005b      	lsls	r3, r3, #1
 80019fc:	2203      	movs	r2, #3
 80019fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001a02:	43db      	mvns	r3, r3
 8001a04:	693a      	ldr	r2, [r7, #16]
 8001a06:	4013      	ands	r3, r2
 8001a08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	689a      	ldr	r2, [r3, #8]
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	005b      	lsls	r3, r3, #1
 8001a12:	fa02 f303 	lsl.w	r3, r2, r3
 8001a16:	693a      	ldr	r2, [r7, #16]
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	693a      	ldr	r2, [r7, #16]
 8001a20:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	f003 0303 	and.w	r3, r3, #3
 8001a2a:	2b02      	cmp	r3, #2
 8001a2c:	d123      	bne.n	8001a76 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	08da      	lsrs	r2, r3, #3
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	3208      	adds	r2, #8
 8001a36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a3a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	f003 0307 	and.w	r3, r3, #7
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	220f      	movs	r2, #15
 8001a46:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4a:	43db      	mvns	r3, r3
 8001a4c:	693a      	ldr	r2, [r7, #16]
 8001a4e:	4013      	ands	r3, r2
 8001a50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	691a      	ldr	r2, [r3, #16]
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	f003 0307 	and.w	r3, r3, #7
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a62:	693a      	ldr	r2, [r7, #16]
 8001a64:	4313      	orrs	r3, r2
 8001a66:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	08da      	lsrs	r2, r3, #3
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	3208      	adds	r2, #8
 8001a70:	6939      	ldr	r1, [r7, #16]
 8001a72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	005b      	lsls	r3, r3, #1
 8001a80:	2203      	movs	r2, #3
 8001a82:	fa02 f303 	lsl.w	r3, r2, r3
 8001a86:	43db      	mvns	r3, r3
 8001a88:	693a      	ldr	r2, [r7, #16]
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	f003 0203 	and.w	r2, r3, #3
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	005b      	lsls	r3, r3, #1
 8001a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9e:	693a      	ldr	r2, [r7, #16]
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	693a      	ldr	r2, [r7, #16]
 8001aa8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	f000 809a 	beq.w	8001bec <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ab8:	4b55      	ldr	r3, [pc, #340]	@ (8001c10 <HAL_GPIO_Init+0x2cc>)
 8001aba:	699b      	ldr	r3, [r3, #24]
 8001abc:	4a54      	ldr	r2, [pc, #336]	@ (8001c10 <HAL_GPIO_Init+0x2cc>)
 8001abe:	f043 0301 	orr.w	r3, r3, #1
 8001ac2:	6193      	str	r3, [r2, #24]
 8001ac4:	4b52      	ldr	r3, [pc, #328]	@ (8001c10 <HAL_GPIO_Init+0x2cc>)
 8001ac6:	699b      	ldr	r3, [r3, #24]
 8001ac8:	f003 0301 	and.w	r3, r3, #1
 8001acc:	60bb      	str	r3, [r7, #8]
 8001ace:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001ad0:	4a50      	ldr	r2, [pc, #320]	@ (8001c14 <HAL_GPIO_Init+0x2d0>)
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	089b      	lsrs	r3, r3, #2
 8001ad6:	3302      	adds	r3, #2
 8001ad8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001adc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	f003 0303 	and.w	r3, r3, #3
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	220f      	movs	r2, #15
 8001ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aec:	43db      	mvns	r3, r3
 8001aee:	693a      	ldr	r2, [r7, #16]
 8001af0:	4013      	ands	r3, r2
 8001af2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001afa:	d013      	beq.n	8001b24 <HAL_GPIO_Init+0x1e0>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	4a46      	ldr	r2, [pc, #280]	@ (8001c18 <HAL_GPIO_Init+0x2d4>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d00d      	beq.n	8001b20 <HAL_GPIO_Init+0x1dc>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	4a45      	ldr	r2, [pc, #276]	@ (8001c1c <HAL_GPIO_Init+0x2d8>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d007      	beq.n	8001b1c <HAL_GPIO_Init+0x1d8>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	4a44      	ldr	r2, [pc, #272]	@ (8001c20 <HAL_GPIO_Init+0x2dc>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d101      	bne.n	8001b18 <HAL_GPIO_Init+0x1d4>
 8001b14:	2303      	movs	r3, #3
 8001b16:	e006      	b.n	8001b26 <HAL_GPIO_Init+0x1e2>
 8001b18:	2305      	movs	r3, #5
 8001b1a:	e004      	b.n	8001b26 <HAL_GPIO_Init+0x1e2>
 8001b1c:	2302      	movs	r3, #2
 8001b1e:	e002      	b.n	8001b26 <HAL_GPIO_Init+0x1e2>
 8001b20:	2301      	movs	r3, #1
 8001b22:	e000      	b.n	8001b26 <HAL_GPIO_Init+0x1e2>
 8001b24:	2300      	movs	r3, #0
 8001b26:	697a      	ldr	r2, [r7, #20]
 8001b28:	f002 0203 	and.w	r2, r2, #3
 8001b2c:	0092      	lsls	r2, r2, #2
 8001b2e:	4093      	lsls	r3, r2
 8001b30:	693a      	ldr	r2, [r7, #16]
 8001b32:	4313      	orrs	r3, r2
 8001b34:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b36:	4937      	ldr	r1, [pc, #220]	@ (8001c14 <HAL_GPIO_Init+0x2d0>)
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	089b      	lsrs	r3, r3, #2
 8001b3c:	3302      	adds	r3, #2
 8001b3e:	693a      	ldr	r2, [r7, #16]
 8001b40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b44:	4b37      	ldr	r3, [pc, #220]	@ (8001c24 <HAL_GPIO_Init+0x2e0>)
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	43db      	mvns	r3, r3
 8001b4e:	693a      	ldr	r2, [r7, #16]
 8001b50:	4013      	ands	r3, r2
 8001b52:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d003      	beq.n	8001b68 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001b60:	693a      	ldr	r2, [r7, #16]
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	4313      	orrs	r3, r2
 8001b66:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001b68:	4a2e      	ldr	r2, [pc, #184]	@ (8001c24 <HAL_GPIO_Init+0x2e0>)
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b6e:	4b2d      	ldr	r3, [pc, #180]	@ (8001c24 <HAL_GPIO_Init+0x2e0>)
 8001b70:	68db      	ldr	r3, [r3, #12]
 8001b72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	43db      	mvns	r3, r3
 8001b78:	693a      	ldr	r2, [r7, #16]
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d003      	beq.n	8001b92 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001b8a:	693a      	ldr	r2, [r7, #16]
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001b92:	4a24      	ldr	r2, [pc, #144]	@ (8001c24 <HAL_GPIO_Init+0x2e0>)
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b98:	4b22      	ldr	r3, [pc, #136]	@ (8001c24 <HAL_GPIO_Init+0x2e0>)
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	43db      	mvns	r3, r3
 8001ba2:	693a      	ldr	r2, [r7, #16]
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d003      	beq.n	8001bbc <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001bb4:	693a      	ldr	r2, [r7, #16]
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001bbc:	4a19      	ldr	r2, [pc, #100]	@ (8001c24 <HAL_GPIO_Init+0x2e0>)
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bc2:	4b18      	ldr	r3, [pc, #96]	@ (8001c24 <HAL_GPIO_Init+0x2e0>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	43db      	mvns	r3, r3
 8001bcc:	693a      	ldr	r2, [r7, #16]
 8001bce:	4013      	ands	r3, r2
 8001bd0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d003      	beq.n	8001be6 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001bde:	693a      	ldr	r2, [r7, #16]
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	4313      	orrs	r3, r2
 8001be4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001be6:	4a0f      	ldr	r2, [pc, #60]	@ (8001c24 <HAL_GPIO_Init+0x2e0>)
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	3301      	adds	r3, #1
 8001bf0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	fa22 f303 	lsr.w	r3, r2, r3
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	f47f aea9 	bne.w	8001954 <HAL_GPIO_Init+0x10>
  }
}
 8001c02:	bf00      	nop
 8001c04:	bf00      	nop
 8001c06:	371c      	adds	r7, #28
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr
 8001c10:	40021000 	.word	0x40021000
 8001c14:	40010000 	.word	0x40010000
 8001c18:	48000400 	.word	0x48000400
 8001c1c:	48000800 	.word	0x48000800
 8001c20:	48000c00 	.word	0x48000c00
 8001c24:	40010400 	.word	0x40010400

08001c28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	460b      	mov	r3, r1
 8001c32:	807b      	strh	r3, [r7, #2]
 8001c34:	4613      	mov	r3, r2
 8001c36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c38:	787b      	ldrb	r3, [r7, #1]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d003      	beq.n	8001c46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c3e:	887a      	ldrh	r2, [r7, #2]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c44:	e002      	b.n	8001c4c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c46:	887a      	ldrh	r2, [r7, #2]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001c4c:	bf00      	nop
 8001c4e:	370c      	adds	r7, #12
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr

08001c58 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b085      	sub	sp, #20
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
 8001c60:	460b      	mov	r3, r1
 8001c62:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	695b      	ldr	r3, [r3, #20]
 8001c68:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c6a:	887a      	ldrh	r2, [r7, #2]
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	4013      	ands	r3, r2
 8001c70:	041a      	lsls	r2, r3, #16
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	43d9      	mvns	r1, r3
 8001c76:	887b      	ldrh	r3, [r7, #2]
 8001c78:	400b      	ands	r3, r1
 8001c7a:	431a      	orrs	r2, r3
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	619a      	str	r2, [r3, #24]
}
 8001c80:	bf00      	nop
 8001c82:	3714      	adds	r7, #20
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr

08001c8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c98:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c9c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ca2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d102      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001cac:	2301      	movs	r3, #1
 8001cae:	f001 b823 	b.w	8002cf8 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cb2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cb6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 0301 	and.w	r3, r3, #1
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	f000 817d 	beq.w	8001fc2 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001cc8:	4bbc      	ldr	r3, [pc, #752]	@ (8001fbc <HAL_RCC_OscConfig+0x330>)
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f003 030c 	and.w	r3, r3, #12
 8001cd0:	2b04      	cmp	r3, #4
 8001cd2:	d00c      	beq.n	8001cee <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001cd4:	4bb9      	ldr	r3, [pc, #740]	@ (8001fbc <HAL_RCC_OscConfig+0x330>)
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f003 030c 	and.w	r3, r3, #12
 8001cdc:	2b08      	cmp	r3, #8
 8001cde:	d15c      	bne.n	8001d9a <HAL_RCC_OscConfig+0x10e>
 8001ce0:	4bb6      	ldr	r3, [pc, #728]	@ (8001fbc <HAL_RCC_OscConfig+0x330>)
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ce8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001cec:	d155      	bne.n	8001d9a <HAL_RCC_OscConfig+0x10e>
 8001cee:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001cf2:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cf6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8001cfa:	fa93 f3a3 	rbit	r3, r3
 8001cfe:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001d02:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d06:	fab3 f383 	clz	r3, r3
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	095b      	lsrs	r3, r3, #5
 8001d0e:	b2db      	uxtb	r3, r3
 8001d10:	f043 0301 	orr.w	r3, r3, #1
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d102      	bne.n	8001d20 <HAL_RCC_OscConfig+0x94>
 8001d1a:	4ba8      	ldr	r3, [pc, #672]	@ (8001fbc <HAL_RCC_OscConfig+0x330>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	e015      	b.n	8001d4c <HAL_RCC_OscConfig+0xc0>
 8001d20:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001d24:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d28:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8001d2c:	fa93 f3a3 	rbit	r3, r3
 8001d30:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8001d34:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001d38:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001d3c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8001d40:	fa93 f3a3 	rbit	r3, r3
 8001d44:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8001d48:	4b9c      	ldr	r3, [pc, #624]	@ (8001fbc <HAL_RCC_OscConfig+0x330>)
 8001d4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d4c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001d50:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8001d54:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8001d58:	fa92 f2a2 	rbit	r2, r2
 8001d5c:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8001d60:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8001d64:	fab2 f282 	clz	r2, r2
 8001d68:	b2d2      	uxtb	r2, r2
 8001d6a:	f042 0220 	orr.w	r2, r2, #32
 8001d6e:	b2d2      	uxtb	r2, r2
 8001d70:	f002 021f 	and.w	r2, r2, #31
 8001d74:	2101      	movs	r1, #1
 8001d76:	fa01 f202 	lsl.w	r2, r1, r2
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	f000 811f 	beq.w	8001fc0 <HAL_RCC_OscConfig+0x334>
 8001d82:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d86:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	f040 8116 	bne.w	8001fc0 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	f000 bfaf 	b.w	8002cf8 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d9e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001daa:	d106      	bne.n	8001dba <HAL_RCC_OscConfig+0x12e>
 8001dac:	4b83      	ldr	r3, [pc, #524]	@ (8001fbc <HAL_RCC_OscConfig+0x330>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a82      	ldr	r2, [pc, #520]	@ (8001fbc <HAL_RCC_OscConfig+0x330>)
 8001db2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001db6:	6013      	str	r3, [r2, #0]
 8001db8:	e036      	b.n	8001e28 <HAL_RCC_OscConfig+0x19c>
 8001dba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dbe:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d10c      	bne.n	8001de4 <HAL_RCC_OscConfig+0x158>
 8001dca:	4b7c      	ldr	r3, [pc, #496]	@ (8001fbc <HAL_RCC_OscConfig+0x330>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a7b      	ldr	r2, [pc, #492]	@ (8001fbc <HAL_RCC_OscConfig+0x330>)
 8001dd0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001dd4:	6013      	str	r3, [r2, #0]
 8001dd6:	4b79      	ldr	r3, [pc, #484]	@ (8001fbc <HAL_RCC_OscConfig+0x330>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a78      	ldr	r2, [pc, #480]	@ (8001fbc <HAL_RCC_OscConfig+0x330>)
 8001ddc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001de0:	6013      	str	r3, [r2, #0]
 8001de2:	e021      	b.n	8001e28 <HAL_RCC_OscConfig+0x19c>
 8001de4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001de8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001df4:	d10c      	bne.n	8001e10 <HAL_RCC_OscConfig+0x184>
 8001df6:	4b71      	ldr	r3, [pc, #452]	@ (8001fbc <HAL_RCC_OscConfig+0x330>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a70      	ldr	r2, [pc, #448]	@ (8001fbc <HAL_RCC_OscConfig+0x330>)
 8001dfc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e00:	6013      	str	r3, [r2, #0]
 8001e02:	4b6e      	ldr	r3, [pc, #440]	@ (8001fbc <HAL_RCC_OscConfig+0x330>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a6d      	ldr	r2, [pc, #436]	@ (8001fbc <HAL_RCC_OscConfig+0x330>)
 8001e08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e0c:	6013      	str	r3, [r2, #0]
 8001e0e:	e00b      	b.n	8001e28 <HAL_RCC_OscConfig+0x19c>
 8001e10:	4b6a      	ldr	r3, [pc, #424]	@ (8001fbc <HAL_RCC_OscConfig+0x330>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a69      	ldr	r2, [pc, #420]	@ (8001fbc <HAL_RCC_OscConfig+0x330>)
 8001e16:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e1a:	6013      	str	r3, [r2, #0]
 8001e1c:	4b67      	ldr	r3, [pc, #412]	@ (8001fbc <HAL_RCC_OscConfig+0x330>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a66      	ldr	r2, [pc, #408]	@ (8001fbc <HAL_RCC_OscConfig+0x330>)
 8001e22:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e26:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e28:	4b64      	ldr	r3, [pc, #400]	@ (8001fbc <HAL_RCC_OscConfig+0x330>)
 8001e2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e2c:	f023 020f 	bic.w	r2, r3, #15
 8001e30:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e34:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	495f      	ldr	r1, [pc, #380]	@ (8001fbc <HAL_RCC_OscConfig+0x330>)
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e42:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e46:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d059      	beq.n	8001f06 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e52:	f7fe fe39 	bl	8000ac8 <HAL_GetTick>
 8001e56:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e5a:	e00a      	b.n	8001e72 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e5c:	f7fe fe34 	bl	8000ac8 <HAL_GetTick>
 8001e60:	4602      	mov	r2, r0
 8001e62:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001e66:	1ad3      	subs	r3, r2, r3
 8001e68:	2b64      	cmp	r3, #100	@ 0x64
 8001e6a:	d902      	bls.n	8001e72 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001e6c:	2303      	movs	r3, #3
 8001e6e:	f000 bf43 	b.w	8002cf8 <HAL_RCC_OscConfig+0x106c>
 8001e72:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001e76:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e7a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001e7e:	fa93 f3a3 	rbit	r3, r3
 8001e82:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8001e86:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e8a:	fab3 f383 	clz	r3, r3
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	095b      	lsrs	r3, r3, #5
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	f043 0301 	orr.w	r3, r3, #1
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d102      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x218>
 8001e9e:	4b47      	ldr	r3, [pc, #284]	@ (8001fbc <HAL_RCC_OscConfig+0x330>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	e015      	b.n	8001ed0 <HAL_RCC_OscConfig+0x244>
 8001ea4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001ea8:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eac:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8001eb0:	fa93 f3a3 	rbit	r3, r3
 8001eb4:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001eb8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001ebc:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001ec0:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8001ec4:	fa93 f3a3 	rbit	r3, r3
 8001ec8:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8001ecc:	4b3b      	ldr	r3, [pc, #236]	@ (8001fbc <HAL_RCC_OscConfig+0x330>)
 8001ece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ed0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001ed4:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8001ed8:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8001edc:	fa92 f2a2 	rbit	r2, r2
 8001ee0:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8001ee4:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8001ee8:	fab2 f282 	clz	r2, r2
 8001eec:	b2d2      	uxtb	r2, r2
 8001eee:	f042 0220 	orr.w	r2, r2, #32
 8001ef2:	b2d2      	uxtb	r2, r2
 8001ef4:	f002 021f 	and.w	r2, r2, #31
 8001ef8:	2101      	movs	r1, #1
 8001efa:	fa01 f202 	lsl.w	r2, r1, r2
 8001efe:	4013      	ands	r3, r2
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d0ab      	beq.n	8001e5c <HAL_RCC_OscConfig+0x1d0>
 8001f04:	e05d      	b.n	8001fc2 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f06:	f7fe fddf 	bl	8000ac8 <HAL_GetTick>
 8001f0a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f0e:	e00a      	b.n	8001f26 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f10:	f7fe fdda 	bl	8000ac8 <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001f1a:	1ad3      	subs	r3, r2, r3
 8001f1c:	2b64      	cmp	r3, #100	@ 0x64
 8001f1e:	d902      	bls.n	8001f26 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001f20:	2303      	movs	r3, #3
 8001f22:	f000 bee9 	b.w	8002cf8 <HAL_RCC_OscConfig+0x106c>
 8001f26:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001f2a:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f2e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8001f32:	fa93 f3a3 	rbit	r3, r3
 8001f36:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8001f3a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f3e:	fab3 f383 	clz	r3, r3
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	095b      	lsrs	r3, r3, #5
 8001f46:	b2db      	uxtb	r3, r3
 8001f48:	f043 0301 	orr.w	r3, r3, #1
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d102      	bne.n	8001f58 <HAL_RCC_OscConfig+0x2cc>
 8001f52:	4b1a      	ldr	r3, [pc, #104]	@ (8001fbc <HAL_RCC_OscConfig+0x330>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	e015      	b.n	8001f84 <HAL_RCC_OscConfig+0x2f8>
 8001f58:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001f5c:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f60:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8001f64:	fa93 f3a3 	rbit	r3, r3
 8001f68:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001f6c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001f70:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001f74:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8001f78:	fa93 f3a3 	rbit	r3, r3
 8001f7c:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8001f80:	4b0e      	ldr	r3, [pc, #56]	@ (8001fbc <HAL_RCC_OscConfig+0x330>)
 8001f82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f84:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001f88:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8001f8c:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001f90:	fa92 f2a2 	rbit	r2, r2
 8001f94:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8001f98:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001f9c:	fab2 f282 	clz	r2, r2
 8001fa0:	b2d2      	uxtb	r2, r2
 8001fa2:	f042 0220 	orr.w	r2, r2, #32
 8001fa6:	b2d2      	uxtb	r2, r2
 8001fa8:	f002 021f 	and.w	r2, r2, #31
 8001fac:	2101      	movs	r1, #1
 8001fae:	fa01 f202 	lsl.w	r2, r1, r2
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d1ab      	bne.n	8001f10 <HAL_RCC_OscConfig+0x284>
 8001fb8:	e003      	b.n	8001fc2 <HAL_RCC_OscConfig+0x336>
 8001fba:	bf00      	nop
 8001fbc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fc2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fc6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 0302 	and.w	r3, r3, #2
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	f000 817d 	beq.w	80022d2 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001fd8:	4ba6      	ldr	r3, [pc, #664]	@ (8002274 <HAL_RCC_OscConfig+0x5e8>)
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f003 030c 	and.w	r3, r3, #12
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d00b      	beq.n	8001ffc <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001fe4:	4ba3      	ldr	r3, [pc, #652]	@ (8002274 <HAL_RCC_OscConfig+0x5e8>)
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f003 030c 	and.w	r3, r3, #12
 8001fec:	2b08      	cmp	r3, #8
 8001fee:	d172      	bne.n	80020d6 <HAL_RCC_OscConfig+0x44a>
 8001ff0:	4ba0      	ldr	r3, [pc, #640]	@ (8002274 <HAL_RCC_OscConfig+0x5e8>)
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d16c      	bne.n	80020d6 <HAL_RCC_OscConfig+0x44a>
 8001ffc:	2302      	movs	r3, #2
 8001ffe:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002002:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8002006:	fa93 f3a3 	rbit	r3, r3
 800200a:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 800200e:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002012:	fab3 f383 	clz	r3, r3
 8002016:	b2db      	uxtb	r3, r3
 8002018:	095b      	lsrs	r3, r3, #5
 800201a:	b2db      	uxtb	r3, r3
 800201c:	f043 0301 	orr.w	r3, r3, #1
 8002020:	b2db      	uxtb	r3, r3
 8002022:	2b01      	cmp	r3, #1
 8002024:	d102      	bne.n	800202c <HAL_RCC_OscConfig+0x3a0>
 8002026:	4b93      	ldr	r3, [pc, #588]	@ (8002274 <HAL_RCC_OscConfig+0x5e8>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	e013      	b.n	8002054 <HAL_RCC_OscConfig+0x3c8>
 800202c:	2302      	movs	r3, #2
 800202e:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002032:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8002036:	fa93 f3a3 	rbit	r3, r3
 800203a:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 800203e:	2302      	movs	r3, #2
 8002040:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8002044:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8002048:	fa93 f3a3 	rbit	r3, r3
 800204c:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8002050:	4b88      	ldr	r3, [pc, #544]	@ (8002274 <HAL_RCC_OscConfig+0x5e8>)
 8002052:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002054:	2202      	movs	r2, #2
 8002056:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 800205a:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 800205e:	fa92 f2a2 	rbit	r2, r2
 8002062:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8002066:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 800206a:	fab2 f282 	clz	r2, r2
 800206e:	b2d2      	uxtb	r2, r2
 8002070:	f042 0220 	orr.w	r2, r2, #32
 8002074:	b2d2      	uxtb	r2, r2
 8002076:	f002 021f 	and.w	r2, r2, #31
 800207a:	2101      	movs	r1, #1
 800207c:	fa01 f202 	lsl.w	r2, r1, r2
 8002080:	4013      	ands	r3, r2
 8002082:	2b00      	cmp	r3, #0
 8002084:	d00a      	beq.n	800209c <HAL_RCC_OscConfig+0x410>
 8002086:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800208a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	691b      	ldr	r3, [r3, #16]
 8002092:	2b01      	cmp	r3, #1
 8002094:	d002      	beq.n	800209c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	f000 be2e 	b.w	8002cf8 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800209c:	4b75      	ldr	r3, [pc, #468]	@ (8002274 <HAL_RCC_OscConfig+0x5e8>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80020a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020a8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	695b      	ldr	r3, [r3, #20]
 80020b0:	21f8      	movs	r1, #248	@ 0xf8
 80020b2:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b6:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80020ba:	fa91 f1a1 	rbit	r1, r1
 80020be:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 80020c2:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 80020c6:	fab1 f181 	clz	r1, r1
 80020ca:	b2c9      	uxtb	r1, r1
 80020cc:	408b      	lsls	r3, r1
 80020ce:	4969      	ldr	r1, [pc, #420]	@ (8002274 <HAL_RCC_OscConfig+0x5e8>)
 80020d0:	4313      	orrs	r3, r2
 80020d2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020d4:	e0fd      	b.n	80022d2 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020da:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	691b      	ldr	r3, [r3, #16]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	f000 8088 	beq.w	80021f8 <HAL_RCC_OscConfig+0x56c>
 80020e8:	2301      	movs	r3, #1
 80020ea:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ee:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 80020f2:	fa93 f3a3 	rbit	r3, r3
 80020f6:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 80020fa:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020fe:	fab3 f383 	clz	r3, r3
 8002102:	b2db      	uxtb	r3, r3
 8002104:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002108:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	461a      	mov	r2, r3
 8002110:	2301      	movs	r3, #1
 8002112:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002114:	f7fe fcd8 	bl	8000ac8 <HAL_GetTick>
 8002118:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800211c:	e00a      	b.n	8002134 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800211e:	f7fe fcd3 	bl	8000ac8 <HAL_GetTick>
 8002122:	4602      	mov	r2, r0
 8002124:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	2b02      	cmp	r3, #2
 800212c:	d902      	bls.n	8002134 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800212e:	2303      	movs	r3, #3
 8002130:	f000 bde2 	b.w	8002cf8 <HAL_RCC_OscConfig+0x106c>
 8002134:	2302      	movs	r3, #2
 8002136:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800213a:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 800213e:	fa93 f3a3 	rbit	r3, r3
 8002142:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8002146:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800214a:	fab3 f383 	clz	r3, r3
 800214e:	b2db      	uxtb	r3, r3
 8002150:	095b      	lsrs	r3, r3, #5
 8002152:	b2db      	uxtb	r3, r3
 8002154:	f043 0301 	orr.w	r3, r3, #1
 8002158:	b2db      	uxtb	r3, r3
 800215a:	2b01      	cmp	r3, #1
 800215c:	d102      	bne.n	8002164 <HAL_RCC_OscConfig+0x4d8>
 800215e:	4b45      	ldr	r3, [pc, #276]	@ (8002274 <HAL_RCC_OscConfig+0x5e8>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	e013      	b.n	800218c <HAL_RCC_OscConfig+0x500>
 8002164:	2302      	movs	r3, #2
 8002166:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800216a:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800216e:	fa93 f3a3 	rbit	r3, r3
 8002172:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8002176:	2302      	movs	r3, #2
 8002178:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 800217c:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8002180:	fa93 f3a3 	rbit	r3, r3
 8002184:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8002188:	4b3a      	ldr	r3, [pc, #232]	@ (8002274 <HAL_RCC_OscConfig+0x5e8>)
 800218a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800218c:	2202      	movs	r2, #2
 800218e:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8002192:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8002196:	fa92 f2a2 	rbit	r2, r2
 800219a:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 800219e:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 80021a2:	fab2 f282 	clz	r2, r2
 80021a6:	b2d2      	uxtb	r2, r2
 80021a8:	f042 0220 	orr.w	r2, r2, #32
 80021ac:	b2d2      	uxtb	r2, r2
 80021ae:	f002 021f 	and.w	r2, r2, #31
 80021b2:	2101      	movs	r1, #1
 80021b4:	fa01 f202 	lsl.w	r2, r1, r2
 80021b8:	4013      	ands	r3, r2
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d0af      	beq.n	800211e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021be:	4b2d      	ldr	r3, [pc, #180]	@ (8002274 <HAL_RCC_OscConfig+0x5e8>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80021c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021ca:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	695b      	ldr	r3, [r3, #20]
 80021d2:	21f8      	movs	r1, #248	@ 0xf8
 80021d4:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d8:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80021dc:	fa91 f1a1 	rbit	r1, r1
 80021e0:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 80021e4:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 80021e8:	fab1 f181 	clz	r1, r1
 80021ec:	b2c9      	uxtb	r1, r1
 80021ee:	408b      	lsls	r3, r1
 80021f0:	4920      	ldr	r1, [pc, #128]	@ (8002274 <HAL_RCC_OscConfig+0x5e8>)
 80021f2:	4313      	orrs	r3, r2
 80021f4:	600b      	str	r3, [r1, #0]
 80021f6:	e06c      	b.n	80022d2 <HAL_RCC_OscConfig+0x646>
 80021f8:	2301      	movs	r3, #1
 80021fa:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021fe:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002202:	fa93 f3a3 	rbit	r3, r3
 8002206:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 800220a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800220e:	fab3 f383 	clz	r3, r3
 8002212:	b2db      	uxtb	r3, r3
 8002214:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002218:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800221c:	009b      	lsls	r3, r3, #2
 800221e:	461a      	mov	r2, r3
 8002220:	2300      	movs	r3, #0
 8002222:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002224:	f7fe fc50 	bl	8000ac8 <HAL_GetTick>
 8002228:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800222c:	e00a      	b.n	8002244 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800222e:	f7fe fc4b 	bl	8000ac8 <HAL_GetTick>
 8002232:	4602      	mov	r2, r0
 8002234:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	2b02      	cmp	r3, #2
 800223c:	d902      	bls.n	8002244 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800223e:	2303      	movs	r3, #3
 8002240:	f000 bd5a 	b.w	8002cf8 <HAL_RCC_OscConfig+0x106c>
 8002244:	2302      	movs	r3, #2
 8002246:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800224a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800224e:	fa93 f3a3 	rbit	r3, r3
 8002252:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8002256:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800225a:	fab3 f383 	clz	r3, r3
 800225e:	b2db      	uxtb	r3, r3
 8002260:	095b      	lsrs	r3, r3, #5
 8002262:	b2db      	uxtb	r3, r3
 8002264:	f043 0301 	orr.w	r3, r3, #1
 8002268:	b2db      	uxtb	r3, r3
 800226a:	2b01      	cmp	r3, #1
 800226c:	d104      	bne.n	8002278 <HAL_RCC_OscConfig+0x5ec>
 800226e:	4b01      	ldr	r3, [pc, #4]	@ (8002274 <HAL_RCC_OscConfig+0x5e8>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	e015      	b.n	80022a0 <HAL_RCC_OscConfig+0x614>
 8002274:	40021000 	.word	0x40021000
 8002278:	2302      	movs	r3, #2
 800227a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800227e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002282:	fa93 f3a3 	rbit	r3, r3
 8002286:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800228a:	2302      	movs	r3, #2
 800228c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002290:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002294:	fa93 f3a3 	rbit	r3, r3
 8002298:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800229c:	4bc8      	ldr	r3, [pc, #800]	@ (80025c0 <HAL_RCC_OscConfig+0x934>)
 800229e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022a0:	2202      	movs	r2, #2
 80022a2:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 80022a6:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80022aa:	fa92 f2a2 	rbit	r2, r2
 80022ae:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 80022b2:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80022b6:	fab2 f282 	clz	r2, r2
 80022ba:	b2d2      	uxtb	r2, r2
 80022bc:	f042 0220 	orr.w	r2, r2, #32
 80022c0:	b2d2      	uxtb	r2, r2
 80022c2:	f002 021f 	and.w	r2, r2, #31
 80022c6:	2101      	movs	r1, #1
 80022c8:	fa01 f202 	lsl.w	r2, r1, r2
 80022cc:	4013      	ands	r3, r2
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d1ad      	bne.n	800222e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022d6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0308 	and.w	r3, r3, #8
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	f000 8110 	beq.w	8002508 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022ec:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	699b      	ldr	r3, [r3, #24]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d079      	beq.n	80023ec <HAL_RCC_OscConfig+0x760>
 80022f8:	2301      	movs	r3, #1
 80022fa:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022fe:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002302:	fa93 f3a3 	rbit	r3, r3
 8002306:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 800230a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800230e:	fab3 f383 	clz	r3, r3
 8002312:	b2db      	uxtb	r3, r3
 8002314:	461a      	mov	r2, r3
 8002316:	4bab      	ldr	r3, [pc, #684]	@ (80025c4 <HAL_RCC_OscConfig+0x938>)
 8002318:	4413      	add	r3, r2
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	461a      	mov	r2, r3
 800231e:	2301      	movs	r3, #1
 8002320:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002322:	f7fe fbd1 	bl	8000ac8 <HAL_GetTick>
 8002326:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800232a:	e00a      	b.n	8002342 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800232c:	f7fe fbcc 	bl	8000ac8 <HAL_GetTick>
 8002330:	4602      	mov	r2, r0
 8002332:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002336:	1ad3      	subs	r3, r2, r3
 8002338:	2b02      	cmp	r3, #2
 800233a:	d902      	bls.n	8002342 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 800233c:	2303      	movs	r3, #3
 800233e:	f000 bcdb 	b.w	8002cf8 <HAL_RCC_OscConfig+0x106c>
 8002342:	2302      	movs	r3, #2
 8002344:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002348:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800234c:	fa93 f3a3 	rbit	r3, r3
 8002350:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002354:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002358:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800235c:	2202      	movs	r2, #2
 800235e:	601a      	str	r2, [r3, #0]
 8002360:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002364:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	fa93 f2a3 	rbit	r2, r3
 800236e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002372:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002376:	601a      	str	r2, [r3, #0]
 8002378:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800237c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002380:	2202      	movs	r2, #2
 8002382:	601a      	str	r2, [r3, #0]
 8002384:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002388:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	fa93 f2a3 	rbit	r2, r3
 8002392:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002396:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800239a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800239c:	4b88      	ldr	r3, [pc, #544]	@ (80025c0 <HAL_RCC_OscConfig+0x934>)
 800239e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80023a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023a4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80023a8:	2102      	movs	r1, #2
 80023aa:	6019      	str	r1, [r3, #0]
 80023ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023b0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	fa93 f1a3 	rbit	r1, r3
 80023ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023be:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80023c2:	6019      	str	r1, [r3, #0]
  return result;
 80023c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023c8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	fab3 f383 	clz	r3, r3
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	f003 031f 	and.w	r3, r3, #31
 80023de:	2101      	movs	r1, #1
 80023e0:	fa01 f303 	lsl.w	r3, r1, r3
 80023e4:	4013      	ands	r3, r2
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d0a0      	beq.n	800232c <HAL_RCC_OscConfig+0x6a0>
 80023ea:	e08d      	b.n	8002508 <HAL_RCC_OscConfig+0x87c>
 80023ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023f0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80023f4:	2201      	movs	r2, #1
 80023f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023fc:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	fa93 f2a3 	rbit	r2, r3
 8002406:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800240a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800240e:	601a      	str	r2, [r3, #0]
  return result;
 8002410:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002414:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002418:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800241a:	fab3 f383 	clz	r3, r3
 800241e:	b2db      	uxtb	r3, r3
 8002420:	461a      	mov	r2, r3
 8002422:	4b68      	ldr	r3, [pc, #416]	@ (80025c4 <HAL_RCC_OscConfig+0x938>)
 8002424:	4413      	add	r3, r2
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	461a      	mov	r2, r3
 800242a:	2300      	movs	r3, #0
 800242c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800242e:	f7fe fb4b 	bl	8000ac8 <HAL_GetTick>
 8002432:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002436:	e00a      	b.n	800244e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002438:	f7fe fb46 	bl	8000ac8 <HAL_GetTick>
 800243c:	4602      	mov	r2, r0
 800243e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	2b02      	cmp	r3, #2
 8002446:	d902      	bls.n	800244e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002448:	2303      	movs	r3, #3
 800244a:	f000 bc55 	b.w	8002cf8 <HAL_RCC_OscConfig+0x106c>
 800244e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002452:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002456:	2202      	movs	r2, #2
 8002458:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800245a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800245e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	fa93 f2a3 	rbit	r2, r3
 8002468:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800246c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002470:	601a      	str	r2, [r3, #0]
 8002472:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002476:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800247a:	2202      	movs	r2, #2
 800247c:	601a      	str	r2, [r3, #0]
 800247e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002482:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	fa93 f2a3 	rbit	r2, r3
 800248c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002490:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002494:	601a      	str	r2, [r3, #0]
 8002496:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800249a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800249e:	2202      	movs	r2, #2
 80024a0:	601a      	str	r2, [r3, #0]
 80024a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024a6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	fa93 f2a3 	rbit	r2, r3
 80024b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024b4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80024b8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024ba:	4b41      	ldr	r3, [pc, #260]	@ (80025c0 <HAL_RCC_OscConfig+0x934>)
 80024bc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80024be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024c2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80024c6:	2102      	movs	r1, #2
 80024c8:	6019      	str	r1, [r3, #0]
 80024ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024ce:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	fa93 f1a3 	rbit	r1, r3
 80024d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024dc:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80024e0:	6019      	str	r1, [r3, #0]
  return result;
 80024e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024e6:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	fab3 f383 	clz	r3, r3
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	f003 031f 	and.w	r3, r3, #31
 80024fc:	2101      	movs	r1, #1
 80024fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002502:	4013      	ands	r3, r2
 8002504:	2b00      	cmp	r3, #0
 8002506:	d197      	bne.n	8002438 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002508:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800250c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 0304 	and.w	r3, r3, #4
 8002518:	2b00      	cmp	r3, #0
 800251a:	f000 81a1 	beq.w	8002860 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800251e:	2300      	movs	r3, #0
 8002520:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002524:	4b26      	ldr	r3, [pc, #152]	@ (80025c0 <HAL_RCC_OscConfig+0x934>)
 8002526:	69db      	ldr	r3, [r3, #28]
 8002528:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800252c:	2b00      	cmp	r3, #0
 800252e:	d116      	bne.n	800255e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002530:	4b23      	ldr	r3, [pc, #140]	@ (80025c0 <HAL_RCC_OscConfig+0x934>)
 8002532:	69db      	ldr	r3, [r3, #28]
 8002534:	4a22      	ldr	r2, [pc, #136]	@ (80025c0 <HAL_RCC_OscConfig+0x934>)
 8002536:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800253a:	61d3      	str	r3, [r2, #28]
 800253c:	4b20      	ldr	r3, [pc, #128]	@ (80025c0 <HAL_RCC_OscConfig+0x934>)
 800253e:	69db      	ldr	r3, [r3, #28]
 8002540:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8002544:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002548:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 800254c:	601a      	str	r2, [r3, #0]
 800254e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002552:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002556:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002558:	2301      	movs	r3, #1
 800255a:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800255e:	4b1a      	ldr	r3, [pc, #104]	@ (80025c8 <HAL_RCC_OscConfig+0x93c>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002566:	2b00      	cmp	r3, #0
 8002568:	d11a      	bne.n	80025a0 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800256a:	4b17      	ldr	r3, [pc, #92]	@ (80025c8 <HAL_RCC_OscConfig+0x93c>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a16      	ldr	r2, [pc, #88]	@ (80025c8 <HAL_RCC_OscConfig+0x93c>)
 8002570:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002574:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002576:	f7fe faa7 	bl	8000ac8 <HAL_GetTick>
 800257a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800257e:	e009      	b.n	8002594 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002580:	f7fe faa2 	bl	8000ac8 <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800258a:	1ad3      	subs	r3, r2, r3
 800258c:	2b64      	cmp	r3, #100	@ 0x64
 800258e:	d901      	bls.n	8002594 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002590:	2303      	movs	r3, #3
 8002592:	e3b1      	b.n	8002cf8 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002594:	4b0c      	ldr	r3, [pc, #48]	@ (80025c8 <HAL_RCC_OscConfig+0x93c>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800259c:	2b00      	cmp	r3, #0
 800259e:	d0ef      	beq.n	8002580 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025a4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d10d      	bne.n	80025cc <HAL_RCC_OscConfig+0x940>
 80025b0:	4b03      	ldr	r3, [pc, #12]	@ (80025c0 <HAL_RCC_OscConfig+0x934>)
 80025b2:	6a1b      	ldr	r3, [r3, #32]
 80025b4:	4a02      	ldr	r2, [pc, #8]	@ (80025c0 <HAL_RCC_OscConfig+0x934>)
 80025b6:	f043 0301 	orr.w	r3, r3, #1
 80025ba:	6213      	str	r3, [r2, #32]
 80025bc:	e03c      	b.n	8002638 <HAL_RCC_OscConfig+0x9ac>
 80025be:	bf00      	nop
 80025c0:	40021000 	.word	0x40021000
 80025c4:	10908120 	.word	0x10908120
 80025c8:	40007000 	.word	0x40007000
 80025cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025d0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d10c      	bne.n	80025f6 <HAL_RCC_OscConfig+0x96a>
 80025dc:	4bc1      	ldr	r3, [pc, #772]	@ (80028e4 <HAL_RCC_OscConfig+0xc58>)
 80025de:	6a1b      	ldr	r3, [r3, #32]
 80025e0:	4ac0      	ldr	r2, [pc, #768]	@ (80028e4 <HAL_RCC_OscConfig+0xc58>)
 80025e2:	f023 0301 	bic.w	r3, r3, #1
 80025e6:	6213      	str	r3, [r2, #32]
 80025e8:	4bbe      	ldr	r3, [pc, #760]	@ (80028e4 <HAL_RCC_OscConfig+0xc58>)
 80025ea:	6a1b      	ldr	r3, [r3, #32]
 80025ec:	4abd      	ldr	r2, [pc, #756]	@ (80028e4 <HAL_RCC_OscConfig+0xc58>)
 80025ee:	f023 0304 	bic.w	r3, r3, #4
 80025f2:	6213      	str	r3, [r2, #32]
 80025f4:	e020      	b.n	8002638 <HAL_RCC_OscConfig+0x9ac>
 80025f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025fa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	68db      	ldr	r3, [r3, #12]
 8002602:	2b05      	cmp	r3, #5
 8002604:	d10c      	bne.n	8002620 <HAL_RCC_OscConfig+0x994>
 8002606:	4bb7      	ldr	r3, [pc, #732]	@ (80028e4 <HAL_RCC_OscConfig+0xc58>)
 8002608:	6a1b      	ldr	r3, [r3, #32]
 800260a:	4ab6      	ldr	r2, [pc, #728]	@ (80028e4 <HAL_RCC_OscConfig+0xc58>)
 800260c:	f043 0304 	orr.w	r3, r3, #4
 8002610:	6213      	str	r3, [r2, #32]
 8002612:	4bb4      	ldr	r3, [pc, #720]	@ (80028e4 <HAL_RCC_OscConfig+0xc58>)
 8002614:	6a1b      	ldr	r3, [r3, #32]
 8002616:	4ab3      	ldr	r2, [pc, #716]	@ (80028e4 <HAL_RCC_OscConfig+0xc58>)
 8002618:	f043 0301 	orr.w	r3, r3, #1
 800261c:	6213      	str	r3, [r2, #32]
 800261e:	e00b      	b.n	8002638 <HAL_RCC_OscConfig+0x9ac>
 8002620:	4bb0      	ldr	r3, [pc, #704]	@ (80028e4 <HAL_RCC_OscConfig+0xc58>)
 8002622:	6a1b      	ldr	r3, [r3, #32]
 8002624:	4aaf      	ldr	r2, [pc, #700]	@ (80028e4 <HAL_RCC_OscConfig+0xc58>)
 8002626:	f023 0301 	bic.w	r3, r3, #1
 800262a:	6213      	str	r3, [r2, #32]
 800262c:	4bad      	ldr	r3, [pc, #692]	@ (80028e4 <HAL_RCC_OscConfig+0xc58>)
 800262e:	6a1b      	ldr	r3, [r3, #32]
 8002630:	4aac      	ldr	r2, [pc, #688]	@ (80028e4 <HAL_RCC_OscConfig+0xc58>)
 8002632:	f023 0304 	bic.w	r3, r3, #4
 8002636:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002638:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800263c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	2b00      	cmp	r3, #0
 8002646:	f000 8081 	beq.w	800274c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800264a:	f7fe fa3d 	bl	8000ac8 <HAL_GetTick>
 800264e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002652:	e00b      	b.n	800266c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002654:	f7fe fa38 	bl	8000ac8 <HAL_GetTick>
 8002658:	4602      	mov	r2, r0
 800265a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800265e:	1ad3      	subs	r3, r2, r3
 8002660:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002664:	4293      	cmp	r3, r2
 8002666:	d901      	bls.n	800266c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002668:	2303      	movs	r3, #3
 800266a:	e345      	b.n	8002cf8 <HAL_RCC_OscConfig+0x106c>
 800266c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002670:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002674:	2202      	movs	r2, #2
 8002676:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002678:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800267c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	fa93 f2a3 	rbit	r2, r3
 8002686:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800268a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800268e:	601a      	str	r2, [r3, #0]
 8002690:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002694:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002698:	2202      	movs	r2, #2
 800269a:	601a      	str	r2, [r3, #0]
 800269c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026a0:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	fa93 f2a3 	rbit	r2, r3
 80026aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026ae:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80026b2:	601a      	str	r2, [r3, #0]
  return result;
 80026b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026b8:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80026bc:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026be:	fab3 f383 	clz	r3, r3
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	095b      	lsrs	r3, r3, #5
 80026c6:	b2db      	uxtb	r3, r3
 80026c8:	f043 0302 	orr.w	r3, r3, #2
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	2b02      	cmp	r3, #2
 80026d0:	d102      	bne.n	80026d8 <HAL_RCC_OscConfig+0xa4c>
 80026d2:	4b84      	ldr	r3, [pc, #528]	@ (80028e4 <HAL_RCC_OscConfig+0xc58>)
 80026d4:	6a1b      	ldr	r3, [r3, #32]
 80026d6:	e013      	b.n	8002700 <HAL_RCC_OscConfig+0xa74>
 80026d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026dc:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80026e0:	2202      	movs	r2, #2
 80026e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026e8:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	fa93 f2a3 	rbit	r2, r3
 80026f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026f6:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80026fa:	601a      	str	r2, [r3, #0]
 80026fc:	4b79      	ldr	r3, [pc, #484]	@ (80028e4 <HAL_RCC_OscConfig+0xc58>)
 80026fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002700:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002704:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002708:	2102      	movs	r1, #2
 800270a:	6011      	str	r1, [r2, #0]
 800270c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002710:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002714:	6812      	ldr	r2, [r2, #0]
 8002716:	fa92 f1a2 	rbit	r1, r2
 800271a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800271e:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002722:	6011      	str	r1, [r2, #0]
  return result;
 8002724:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002728:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800272c:	6812      	ldr	r2, [r2, #0]
 800272e:	fab2 f282 	clz	r2, r2
 8002732:	b2d2      	uxtb	r2, r2
 8002734:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002738:	b2d2      	uxtb	r2, r2
 800273a:	f002 021f 	and.w	r2, r2, #31
 800273e:	2101      	movs	r1, #1
 8002740:	fa01 f202 	lsl.w	r2, r1, r2
 8002744:	4013      	ands	r3, r2
 8002746:	2b00      	cmp	r3, #0
 8002748:	d084      	beq.n	8002654 <HAL_RCC_OscConfig+0x9c8>
 800274a:	e07f      	b.n	800284c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800274c:	f7fe f9bc 	bl	8000ac8 <HAL_GetTick>
 8002750:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002754:	e00b      	b.n	800276e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002756:	f7fe f9b7 	bl	8000ac8 <HAL_GetTick>
 800275a:	4602      	mov	r2, r0
 800275c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002766:	4293      	cmp	r3, r2
 8002768:	d901      	bls.n	800276e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800276a:	2303      	movs	r3, #3
 800276c:	e2c4      	b.n	8002cf8 <HAL_RCC_OscConfig+0x106c>
 800276e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002772:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002776:	2202      	movs	r2, #2
 8002778:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800277a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800277e:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	fa93 f2a3 	rbit	r2, r3
 8002788:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800278c:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002790:	601a      	str	r2, [r3, #0]
 8002792:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002796:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800279a:	2202      	movs	r2, #2
 800279c:	601a      	str	r2, [r3, #0]
 800279e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027a2:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	fa93 f2a3 	rbit	r2, r3
 80027ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027b0:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80027b4:	601a      	str	r2, [r3, #0]
  return result;
 80027b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027ba:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80027be:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027c0:	fab3 f383 	clz	r3, r3
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	095b      	lsrs	r3, r3, #5
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	f043 0302 	orr.w	r3, r3, #2
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d102      	bne.n	80027da <HAL_RCC_OscConfig+0xb4e>
 80027d4:	4b43      	ldr	r3, [pc, #268]	@ (80028e4 <HAL_RCC_OscConfig+0xc58>)
 80027d6:	6a1b      	ldr	r3, [r3, #32]
 80027d8:	e013      	b.n	8002802 <HAL_RCC_OscConfig+0xb76>
 80027da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027de:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80027e2:	2202      	movs	r2, #2
 80027e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027ea:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	fa93 f2a3 	rbit	r2, r3
 80027f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027f8:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80027fc:	601a      	str	r2, [r3, #0]
 80027fe:	4b39      	ldr	r3, [pc, #228]	@ (80028e4 <HAL_RCC_OscConfig+0xc58>)
 8002800:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002802:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002806:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800280a:	2102      	movs	r1, #2
 800280c:	6011      	str	r1, [r2, #0]
 800280e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002812:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002816:	6812      	ldr	r2, [r2, #0]
 8002818:	fa92 f1a2 	rbit	r1, r2
 800281c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002820:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002824:	6011      	str	r1, [r2, #0]
  return result;
 8002826:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800282a:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800282e:	6812      	ldr	r2, [r2, #0]
 8002830:	fab2 f282 	clz	r2, r2
 8002834:	b2d2      	uxtb	r2, r2
 8002836:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800283a:	b2d2      	uxtb	r2, r2
 800283c:	f002 021f 	and.w	r2, r2, #31
 8002840:	2101      	movs	r1, #1
 8002842:	fa01 f202 	lsl.w	r2, r1, r2
 8002846:	4013      	ands	r3, r2
 8002848:	2b00      	cmp	r3, #0
 800284a:	d184      	bne.n	8002756 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800284c:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8002850:	2b01      	cmp	r3, #1
 8002852:	d105      	bne.n	8002860 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002854:	4b23      	ldr	r3, [pc, #140]	@ (80028e4 <HAL_RCC_OscConfig+0xc58>)
 8002856:	69db      	ldr	r3, [r3, #28]
 8002858:	4a22      	ldr	r2, [pc, #136]	@ (80028e4 <HAL_RCC_OscConfig+0xc58>)
 800285a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800285e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002860:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002864:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	69db      	ldr	r3, [r3, #28]
 800286c:	2b00      	cmp	r3, #0
 800286e:	f000 8242 	beq.w	8002cf6 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002872:	4b1c      	ldr	r3, [pc, #112]	@ (80028e4 <HAL_RCC_OscConfig+0xc58>)
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	f003 030c 	and.w	r3, r3, #12
 800287a:	2b08      	cmp	r3, #8
 800287c:	f000 8213 	beq.w	8002ca6 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002880:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002884:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	69db      	ldr	r3, [r3, #28]
 800288c:	2b02      	cmp	r3, #2
 800288e:	f040 8162 	bne.w	8002b56 <HAL_RCC_OscConfig+0xeca>
 8002892:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002896:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800289a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800289e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028a4:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	fa93 f2a3 	rbit	r2, r3
 80028ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028b2:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80028b6:	601a      	str	r2, [r3, #0]
  return result;
 80028b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028bc:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80028c0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028c2:	fab3 f383 	clz	r3, r3
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80028cc:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80028d0:	009b      	lsls	r3, r3, #2
 80028d2:	461a      	mov	r2, r3
 80028d4:	2300      	movs	r3, #0
 80028d6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028d8:	f7fe f8f6 	bl	8000ac8 <HAL_GetTick>
 80028dc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028e0:	e00c      	b.n	80028fc <HAL_RCC_OscConfig+0xc70>
 80028e2:	bf00      	nop
 80028e4:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028e8:	f7fe f8ee 	bl	8000ac8 <HAL_GetTick>
 80028ec:	4602      	mov	r2, r0
 80028ee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80028f2:	1ad3      	subs	r3, r2, r3
 80028f4:	2b02      	cmp	r3, #2
 80028f6:	d901      	bls.n	80028fc <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80028f8:	2303      	movs	r3, #3
 80028fa:	e1fd      	b.n	8002cf8 <HAL_RCC_OscConfig+0x106c>
 80028fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002900:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002904:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002908:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800290a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800290e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	fa93 f2a3 	rbit	r2, r3
 8002918:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800291c:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002920:	601a      	str	r2, [r3, #0]
  return result;
 8002922:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002926:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800292a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800292c:	fab3 f383 	clz	r3, r3
 8002930:	b2db      	uxtb	r3, r3
 8002932:	095b      	lsrs	r3, r3, #5
 8002934:	b2db      	uxtb	r3, r3
 8002936:	f043 0301 	orr.w	r3, r3, #1
 800293a:	b2db      	uxtb	r3, r3
 800293c:	2b01      	cmp	r3, #1
 800293e:	d102      	bne.n	8002946 <HAL_RCC_OscConfig+0xcba>
 8002940:	4bb0      	ldr	r3, [pc, #704]	@ (8002c04 <HAL_RCC_OscConfig+0xf78>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	e027      	b.n	8002996 <HAL_RCC_OscConfig+0xd0a>
 8002946:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800294a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800294e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002952:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002954:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002958:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	fa93 f2a3 	rbit	r2, r3
 8002962:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002966:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800296a:	601a      	str	r2, [r3, #0]
 800296c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002970:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002974:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002978:	601a      	str	r2, [r3, #0]
 800297a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800297e:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	fa93 f2a3 	rbit	r2, r3
 8002988:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800298c:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002990:	601a      	str	r2, [r3, #0]
 8002992:	4b9c      	ldr	r3, [pc, #624]	@ (8002c04 <HAL_RCC_OscConfig+0xf78>)
 8002994:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002996:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800299a:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 800299e:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80029a2:	6011      	str	r1, [r2, #0]
 80029a4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80029a8:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80029ac:	6812      	ldr	r2, [r2, #0]
 80029ae:	fa92 f1a2 	rbit	r1, r2
 80029b2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80029b6:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80029ba:	6011      	str	r1, [r2, #0]
  return result;
 80029bc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80029c0:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80029c4:	6812      	ldr	r2, [r2, #0]
 80029c6:	fab2 f282 	clz	r2, r2
 80029ca:	b2d2      	uxtb	r2, r2
 80029cc:	f042 0220 	orr.w	r2, r2, #32
 80029d0:	b2d2      	uxtb	r2, r2
 80029d2:	f002 021f 	and.w	r2, r2, #31
 80029d6:	2101      	movs	r1, #1
 80029d8:	fa01 f202 	lsl.w	r2, r1, r2
 80029dc:	4013      	ands	r3, r2
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d182      	bne.n	80028e8 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029e2:	4b88      	ldr	r3, [pc, #544]	@ (8002c04 <HAL_RCC_OscConfig+0xf78>)
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80029ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029ee:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80029f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029fa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	6a1b      	ldr	r3, [r3, #32]
 8002a02:	430b      	orrs	r3, r1
 8002a04:	497f      	ldr	r1, [pc, #508]	@ (8002c04 <HAL_RCC_OscConfig+0xf78>)
 8002a06:	4313      	orrs	r3, r2
 8002a08:	604b      	str	r3, [r1, #4]
 8002a0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a0e:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002a12:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002a16:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a18:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a1c:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	fa93 f2a3 	rbit	r2, r3
 8002a26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a2a:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002a2e:	601a      	str	r2, [r3, #0]
  return result;
 8002a30:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a34:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002a38:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a3a:	fab3 f383 	clz	r3, r3
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002a44:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a50:	f7fe f83a 	bl	8000ac8 <HAL_GetTick>
 8002a54:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a58:	e009      	b.n	8002a6e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a5a:	f7fe f835 	bl	8000ac8 <HAL_GetTick>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	2b02      	cmp	r3, #2
 8002a68:	d901      	bls.n	8002a6e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	e144      	b.n	8002cf8 <HAL_RCC_OscConfig+0x106c>
 8002a6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a72:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002a76:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002a7a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a7c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a80:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	fa93 f2a3 	rbit	r2, r3
 8002a8a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a8e:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002a92:	601a      	str	r2, [r3, #0]
  return result;
 8002a94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a98:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002a9c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a9e:	fab3 f383 	clz	r3, r3
 8002aa2:	b2db      	uxtb	r3, r3
 8002aa4:	095b      	lsrs	r3, r3, #5
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	f043 0301 	orr.w	r3, r3, #1
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d102      	bne.n	8002ab8 <HAL_RCC_OscConfig+0xe2c>
 8002ab2:	4b54      	ldr	r3, [pc, #336]	@ (8002c04 <HAL_RCC_OscConfig+0xf78>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	e027      	b.n	8002b08 <HAL_RCC_OscConfig+0xe7c>
 8002ab8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002abc:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002ac0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002ac4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ac6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002aca:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	fa93 f2a3 	rbit	r2, r3
 8002ad4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ad8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002adc:	601a      	str	r2, [r3, #0]
 8002ade:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ae2:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002ae6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002aea:	601a      	str	r2, [r3, #0]
 8002aec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002af0:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	fa93 f2a3 	rbit	r2, r3
 8002afa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002afe:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002b02:	601a      	str	r2, [r3, #0]
 8002b04:	4b3f      	ldr	r3, [pc, #252]	@ (8002c04 <HAL_RCC_OscConfig+0xf78>)
 8002b06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b08:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002b0c:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002b10:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002b14:	6011      	str	r1, [r2, #0]
 8002b16:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002b1a:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002b1e:	6812      	ldr	r2, [r2, #0]
 8002b20:	fa92 f1a2 	rbit	r1, r2
 8002b24:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002b28:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002b2c:	6011      	str	r1, [r2, #0]
  return result;
 8002b2e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002b32:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002b36:	6812      	ldr	r2, [r2, #0]
 8002b38:	fab2 f282 	clz	r2, r2
 8002b3c:	b2d2      	uxtb	r2, r2
 8002b3e:	f042 0220 	orr.w	r2, r2, #32
 8002b42:	b2d2      	uxtb	r2, r2
 8002b44:	f002 021f 	and.w	r2, r2, #31
 8002b48:	2101      	movs	r1, #1
 8002b4a:	fa01 f202 	lsl.w	r2, r1, r2
 8002b4e:	4013      	ands	r3, r2
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d082      	beq.n	8002a5a <HAL_RCC_OscConfig+0xdce>
 8002b54:	e0cf      	b.n	8002cf6 <HAL_RCC_OscConfig+0x106a>
 8002b56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b5a:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002b5e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002b62:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b64:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b68:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	fa93 f2a3 	rbit	r2, r3
 8002b72:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b76:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002b7a:	601a      	str	r2, [r3, #0]
  return result;
 8002b7c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b80:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002b84:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b86:	fab3 f383 	clz	r3, r3
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002b90:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	461a      	mov	r2, r3
 8002b98:	2300      	movs	r3, #0
 8002b9a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b9c:	f7fd ff94 	bl	8000ac8 <HAL_GetTick>
 8002ba0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ba4:	e009      	b.n	8002bba <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ba6:	f7fd ff8f 	bl	8000ac8 <HAL_GetTick>
 8002baa:	4602      	mov	r2, r0
 8002bac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d901      	bls.n	8002bba <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e09e      	b.n	8002cf8 <HAL_RCC_OscConfig+0x106c>
 8002bba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bbe:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002bc2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002bc6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bcc:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	fa93 f2a3 	rbit	r2, r3
 8002bd6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bda:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002bde:	601a      	str	r2, [r3, #0]
  return result;
 8002be0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002be4:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002be8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bea:	fab3 f383 	clz	r3, r3
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	095b      	lsrs	r3, r3, #5
 8002bf2:	b2db      	uxtb	r3, r3
 8002bf4:	f043 0301 	orr.w	r3, r3, #1
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d104      	bne.n	8002c08 <HAL_RCC_OscConfig+0xf7c>
 8002bfe:	4b01      	ldr	r3, [pc, #4]	@ (8002c04 <HAL_RCC_OscConfig+0xf78>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	e029      	b.n	8002c58 <HAL_RCC_OscConfig+0xfcc>
 8002c04:	40021000 	.word	0x40021000
 8002c08:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c0c:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002c10:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002c14:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c1a:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	fa93 f2a3 	rbit	r2, r3
 8002c24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c28:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002c2c:	601a      	str	r2, [r3, #0]
 8002c2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c32:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002c36:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002c3a:	601a      	str	r2, [r3, #0]
 8002c3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c40:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	fa93 f2a3 	rbit	r2, r3
 8002c4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c4e:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002c52:	601a      	str	r2, [r3, #0]
 8002c54:	4b2b      	ldr	r3, [pc, #172]	@ (8002d04 <HAL_RCC_OscConfig+0x1078>)
 8002c56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c58:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002c5c:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002c60:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002c64:	6011      	str	r1, [r2, #0]
 8002c66:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002c6a:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002c6e:	6812      	ldr	r2, [r2, #0]
 8002c70:	fa92 f1a2 	rbit	r1, r2
 8002c74:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002c78:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002c7c:	6011      	str	r1, [r2, #0]
  return result;
 8002c7e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002c82:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002c86:	6812      	ldr	r2, [r2, #0]
 8002c88:	fab2 f282 	clz	r2, r2
 8002c8c:	b2d2      	uxtb	r2, r2
 8002c8e:	f042 0220 	orr.w	r2, r2, #32
 8002c92:	b2d2      	uxtb	r2, r2
 8002c94:	f002 021f 	and.w	r2, r2, #31
 8002c98:	2101      	movs	r1, #1
 8002c9a:	fa01 f202 	lsl.w	r2, r1, r2
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d180      	bne.n	8002ba6 <HAL_RCC_OscConfig+0xf1a>
 8002ca4:	e027      	b.n	8002cf6 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ca6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002caa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	69db      	ldr	r3, [r3, #28]
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d101      	bne.n	8002cba <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e01e      	b.n	8002cf8 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002cba:	4b12      	ldr	r3, [pc, #72]	@ (8002d04 <HAL_RCC_OscConfig+0x1078>)
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002cc2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002cc6:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002cca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cce:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	6a1b      	ldr	r3, [r3, #32]
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d10b      	bne.n	8002cf2 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002cda:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002cde:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002ce2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ce6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d001      	beq.n	8002cf6 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e000      	b.n	8002cf8 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002cf6:	2300      	movs	r3, #0
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	40021000 	.word	0x40021000

08002d08 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b09e      	sub	sp, #120	@ 0x78
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002d12:	2300      	movs	r3, #0
 8002d14:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d101      	bne.n	8002d20 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e162      	b.n	8002fe6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d20:	4b90      	ldr	r3, [pc, #576]	@ (8002f64 <HAL_RCC_ClockConfig+0x25c>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 0307 	and.w	r3, r3, #7
 8002d28:	683a      	ldr	r2, [r7, #0]
 8002d2a:	429a      	cmp	r2, r3
 8002d2c:	d910      	bls.n	8002d50 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d2e:	4b8d      	ldr	r3, [pc, #564]	@ (8002f64 <HAL_RCC_ClockConfig+0x25c>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f023 0207 	bic.w	r2, r3, #7
 8002d36:	498b      	ldr	r1, [pc, #556]	@ (8002f64 <HAL_RCC_ClockConfig+0x25c>)
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d3e:	4b89      	ldr	r3, [pc, #548]	@ (8002f64 <HAL_RCC_ClockConfig+0x25c>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 0307 	and.w	r3, r3, #7
 8002d46:	683a      	ldr	r2, [r7, #0]
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d001      	beq.n	8002d50 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e14a      	b.n	8002fe6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 0302 	and.w	r3, r3, #2
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d008      	beq.n	8002d6e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d5c:	4b82      	ldr	r3, [pc, #520]	@ (8002f68 <HAL_RCC_ClockConfig+0x260>)
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	497f      	ldr	r1, [pc, #508]	@ (8002f68 <HAL_RCC_ClockConfig+0x260>)
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 0301 	and.w	r3, r3, #1
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	f000 80dc 	beq.w	8002f34 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d13c      	bne.n	8002dfe <HAL_RCC_ClockConfig+0xf6>
 8002d84:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002d88:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d8a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002d8c:	fa93 f3a3 	rbit	r3, r3
 8002d90:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002d92:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d94:	fab3 f383 	clz	r3, r3
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	095b      	lsrs	r3, r3, #5
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	f043 0301 	orr.w	r3, r3, #1
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	d102      	bne.n	8002dae <HAL_RCC_ClockConfig+0xa6>
 8002da8:	4b6f      	ldr	r3, [pc, #444]	@ (8002f68 <HAL_RCC_ClockConfig+0x260>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	e00f      	b.n	8002dce <HAL_RCC_ClockConfig+0xc6>
 8002dae:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002db2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002db4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002db6:	fa93 f3a3 	rbit	r3, r3
 8002dba:	667b      	str	r3, [r7, #100]	@ 0x64
 8002dbc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002dc0:	663b      	str	r3, [r7, #96]	@ 0x60
 8002dc2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002dc4:	fa93 f3a3 	rbit	r3, r3
 8002dc8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002dca:	4b67      	ldr	r3, [pc, #412]	@ (8002f68 <HAL_RCC_ClockConfig+0x260>)
 8002dcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dce:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002dd2:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002dd4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002dd6:	fa92 f2a2 	rbit	r2, r2
 8002dda:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8002ddc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002dde:	fab2 f282 	clz	r2, r2
 8002de2:	b2d2      	uxtb	r2, r2
 8002de4:	f042 0220 	orr.w	r2, r2, #32
 8002de8:	b2d2      	uxtb	r2, r2
 8002dea:	f002 021f 	and.w	r2, r2, #31
 8002dee:	2101      	movs	r1, #1
 8002df0:	fa01 f202 	lsl.w	r2, r1, r2
 8002df4:	4013      	ands	r3, r2
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d17b      	bne.n	8002ef2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e0f3      	b.n	8002fe6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	2b02      	cmp	r3, #2
 8002e04:	d13c      	bne.n	8002e80 <HAL_RCC_ClockConfig+0x178>
 8002e06:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002e0a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e0c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002e0e:	fa93 f3a3 	rbit	r3, r3
 8002e12:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002e14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e16:	fab3 f383 	clz	r3, r3
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	095b      	lsrs	r3, r3, #5
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	f043 0301 	orr.w	r3, r3, #1
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d102      	bne.n	8002e30 <HAL_RCC_ClockConfig+0x128>
 8002e2a:	4b4f      	ldr	r3, [pc, #316]	@ (8002f68 <HAL_RCC_ClockConfig+0x260>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	e00f      	b.n	8002e50 <HAL_RCC_ClockConfig+0x148>
 8002e30:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002e34:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e36:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002e38:	fa93 f3a3 	rbit	r3, r3
 8002e3c:	647b      	str	r3, [r7, #68]	@ 0x44
 8002e3e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002e42:	643b      	str	r3, [r7, #64]	@ 0x40
 8002e44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e46:	fa93 f3a3 	rbit	r3, r3
 8002e4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002e4c:	4b46      	ldr	r3, [pc, #280]	@ (8002f68 <HAL_RCC_ClockConfig+0x260>)
 8002e4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e50:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002e54:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002e56:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002e58:	fa92 f2a2 	rbit	r2, r2
 8002e5c:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8002e5e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002e60:	fab2 f282 	clz	r2, r2
 8002e64:	b2d2      	uxtb	r2, r2
 8002e66:	f042 0220 	orr.w	r2, r2, #32
 8002e6a:	b2d2      	uxtb	r2, r2
 8002e6c:	f002 021f 	and.w	r2, r2, #31
 8002e70:	2101      	movs	r1, #1
 8002e72:	fa01 f202 	lsl.w	r2, r1, r2
 8002e76:	4013      	ands	r3, r2
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d13a      	bne.n	8002ef2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e0b2      	b.n	8002fe6 <HAL_RCC_ClockConfig+0x2de>
 8002e80:	2302      	movs	r3, #2
 8002e82:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e86:	fa93 f3a3 	rbit	r3, r3
 8002e8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002e8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e8e:	fab3 f383 	clz	r3, r3
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	095b      	lsrs	r3, r3, #5
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	f043 0301 	orr.w	r3, r3, #1
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d102      	bne.n	8002ea8 <HAL_RCC_ClockConfig+0x1a0>
 8002ea2:	4b31      	ldr	r3, [pc, #196]	@ (8002f68 <HAL_RCC_ClockConfig+0x260>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	e00d      	b.n	8002ec4 <HAL_RCC_ClockConfig+0x1bc>
 8002ea8:	2302      	movs	r3, #2
 8002eaa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002eae:	fa93 f3a3 	rbit	r3, r3
 8002eb2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002eb4:	2302      	movs	r3, #2
 8002eb6:	623b      	str	r3, [r7, #32]
 8002eb8:	6a3b      	ldr	r3, [r7, #32]
 8002eba:	fa93 f3a3 	rbit	r3, r3
 8002ebe:	61fb      	str	r3, [r7, #28]
 8002ec0:	4b29      	ldr	r3, [pc, #164]	@ (8002f68 <HAL_RCC_ClockConfig+0x260>)
 8002ec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ec4:	2202      	movs	r2, #2
 8002ec6:	61ba      	str	r2, [r7, #24]
 8002ec8:	69ba      	ldr	r2, [r7, #24]
 8002eca:	fa92 f2a2 	rbit	r2, r2
 8002ece:	617a      	str	r2, [r7, #20]
  return result;
 8002ed0:	697a      	ldr	r2, [r7, #20]
 8002ed2:	fab2 f282 	clz	r2, r2
 8002ed6:	b2d2      	uxtb	r2, r2
 8002ed8:	f042 0220 	orr.w	r2, r2, #32
 8002edc:	b2d2      	uxtb	r2, r2
 8002ede:	f002 021f 	and.w	r2, r2, #31
 8002ee2:	2101      	movs	r1, #1
 8002ee4:	fa01 f202 	lsl.w	r2, r1, r2
 8002ee8:	4013      	ands	r3, r2
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d101      	bne.n	8002ef2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e079      	b.n	8002fe6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ef2:	4b1d      	ldr	r3, [pc, #116]	@ (8002f68 <HAL_RCC_ClockConfig+0x260>)
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	f023 0203 	bic.w	r2, r3, #3
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	491a      	ldr	r1, [pc, #104]	@ (8002f68 <HAL_RCC_ClockConfig+0x260>)
 8002f00:	4313      	orrs	r3, r2
 8002f02:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f04:	f7fd fde0 	bl	8000ac8 <HAL_GetTick>
 8002f08:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f0a:	e00a      	b.n	8002f22 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f0c:	f7fd fddc 	bl	8000ac8 <HAL_GetTick>
 8002f10:	4602      	mov	r2, r0
 8002f12:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d901      	bls.n	8002f22 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002f1e:	2303      	movs	r3, #3
 8002f20:	e061      	b.n	8002fe6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f22:	4b11      	ldr	r3, [pc, #68]	@ (8002f68 <HAL_RCC_ClockConfig+0x260>)
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	f003 020c 	and.w	r2, r3, #12
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d1eb      	bne.n	8002f0c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f34:	4b0b      	ldr	r3, [pc, #44]	@ (8002f64 <HAL_RCC_ClockConfig+0x25c>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 0307 	and.w	r3, r3, #7
 8002f3c:	683a      	ldr	r2, [r7, #0]
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d214      	bcs.n	8002f6c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f42:	4b08      	ldr	r3, [pc, #32]	@ (8002f64 <HAL_RCC_ClockConfig+0x25c>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f023 0207 	bic.w	r2, r3, #7
 8002f4a:	4906      	ldr	r1, [pc, #24]	@ (8002f64 <HAL_RCC_ClockConfig+0x25c>)
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f52:	4b04      	ldr	r3, [pc, #16]	@ (8002f64 <HAL_RCC_ClockConfig+0x25c>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 0307 	and.w	r3, r3, #7
 8002f5a:	683a      	ldr	r2, [r7, #0]
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	d005      	beq.n	8002f6c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	e040      	b.n	8002fe6 <HAL_RCC_ClockConfig+0x2de>
 8002f64:	40022000 	.word	0x40022000
 8002f68:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 0304 	and.w	r3, r3, #4
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d008      	beq.n	8002f8a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f78:	4b1d      	ldr	r3, [pc, #116]	@ (8002ff0 <HAL_RCC_ClockConfig+0x2e8>)
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	68db      	ldr	r3, [r3, #12]
 8002f84:	491a      	ldr	r1, [pc, #104]	@ (8002ff0 <HAL_RCC_ClockConfig+0x2e8>)
 8002f86:	4313      	orrs	r3, r2
 8002f88:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 0308 	and.w	r3, r3, #8
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d009      	beq.n	8002faa <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f96:	4b16      	ldr	r3, [pc, #88]	@ (8002ff0 <HAL_RCC_ClockConfig+0x2e8>)
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	691b      	ldr	r3, [r3, #16]
 8002fa2:	00db      	lsls	r3, r3, #3
 8002fa4:	4912      	ldr	r1, [pc, #72]	@ (8002ff0 <HAL_RCC_ClockConfig+0x2e8>)
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002faa:	f000 f829 	bl	8003000 <HAL_RCC_GetSysClockFreq>
 8002fae:	4601      	mov	r1, r0
 8002fb0:	4b0f      	ldr	r3, [pc, #60]	@ (8002ff0 <HAL_RCC_ClockConfig+0x2e8>)
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002fb8:	22f0      	movs	r2, #240	@ 0xf0
 8002fba:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fbc:	693a      	ldr	r2, [r7, #16]
 8002fbe:	fa92 f2a2 	rbit	r2, r2
 8002fc2:	60fa      	str	r2, [r7, #12]
  return result;
 8002fc4:	68fa      	ldr	r2, [r7, #12]
 8002fc6:	fab2 f282 	clz	r2, r2
 8002fca:	b2d2      	uxtb	r2, r2
 8002fcc:	40d3      	lsrs	r3, r2
 8002fce:	4a09      	ldr	r2, [pc, #36]	@ (8002ff4 <HAL_RCC_ClockConfig+0x2ec>)
 8002fd0:	5cd3      	ldrb	r3, [r2, r3]
 8002fd2:	fa21 f303 	lsr.w	r3, r1, r3
 8002fd6:	4a08      	ldr	r2, [pc, #32]	@ (8002ff8 <HAL_RCC_ClockConfig+0x2f0>)
 8002fd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002fda:	4b08      	ldr	r3, [pc, #32]	@ (8002ffc <HAL_RCC_ClockConfig+0x2f4>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f7fd fc6c 	bl	80008bc <HAL_InitTick>
  
  return HAL_OK;
 8002fe4:	2300      	movs	r3, #0
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3778      	adds	r7, #120	@ 0x78
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	40021000 	.word	0x40021000
 8002ff4:	08005b70 	.word	0x08005b70
 8002ff8:	20000000 	.word	0x20000000
 8002ffc:	20000004 	.word	0x20000004

08003000 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003000:	b480      	push	{r7}
 8003002:	b087      	sub	sp, #28
 8003004:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003006:	2300      	movs	r3, #0
 8003008:	60fb      	str	r3, [r7, #12]
 800300a:	2300      	movs	r3, #0
 800300c:	60bb      	str	r3, [r7, #8]
 800300e:	2300      	movs	r3, #0
 8003010:	617b      	str	r3, [r7, #20]
 8003012:	2300      	movs	r3, #0
 8003014:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003016:	2300      	movs	r3, #0
 8003018:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800301a:	4b1e      	ldr	r3, [pc, #120]	@ (8003094 <HAL_RCC_GetSysClockFreq+0x94>)
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	f003 030c 	and.w	r3, r3, #12
 8003026:	2b04      	cmp	r3, #4
 8003028:	d002      	beq.n	8003030 <HAL_RCC_GetSysClockFreq+0x30>
 800302a:	2b08      	cmp	r3, #8
 800302c:	d003      	beq.n	8003036 <HAL_RCC_GetSysClockFreq+0x36>
 800302e:	e026      	b.n	800307e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003030:	4b19      	ldr	r3, [pc, #100]	@ (8003098 <HAL_RCC_GetSysClockFreq+0x98>)
 8003032:	613b      	str	r3, [r7, #16]
      break;
 8003034:	e026      	b.n	8003084 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	0c9b      	lsrs	r3, r3, #18
 800303a:	f003 030f 	and.w	r3, r3, #15
 800303e:	4a17      	ldr	r2, [pc, #92]	@ (800309c <HAL_RCC_GetSysClockFreq+0x9c>)
 8003040:	5cd3      	ldrb	r3, [r2, r3]
 8003042:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8003044:	4b13      	ldr	r3, [pc, #76]	@ (8003094 <HAL_RCC_GetSysClockFreq+0x94>)
 8003046:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003048:	f003 030f 	and.w	r3, r3, #15
 800304c:	4a14      	ldr	r2, [pc, #80]	@ (80030a0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800304e:	5cd3      	ldrb	r3, [r2, r3]
 8003050:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003058:	2b00      	cmp	r3, #0
 800305a:	d008      	beq.n	800306e <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800305c:	4a0e      	ldr	r2, [pc, #56]	@ (8003098 <HAL_RCC_GetSysClockFreq+0x98>)
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	fbb2 f2f3 	udiv	r2, r2, r3
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	fb02 f303 	mul.w	r3, r2, r3
 800306a:	617b      	str	r3, [r7, #20]
 800306c:	e004      	b.n	8003078 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	4a0c      	ldr	r2, [pc, #48]	@ (80030a4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003072:	fb02 f303 	mul.w	r3, r2, r3
 8003076:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	613b      	str	r3, [r7, #16]
      break;
 800307c:	e002      	b.n	8003084 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800307e:	4b06      	ldr	r3, [pc, #24]	@ (8003098 <HAL_RCC_GetSysClockFreq+0x98>)
 8003080:	613b      	str	r3, [r7, #16]
      break;
 8003082:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003084:	693b      	ldr	r3, [r7, #16]
}
 8003086:	4618      	mov	r0, r3
 8003088:	371c      	adds	r7, #28
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr
 8003092:	bf00      	nop
 8003094:	40021000 	.word	0x40021000
 8003098:	007a1200 	.word	0x007a1200
 800309c:	08005b88 	.word	0x08005b88
 80030a0:	08005b98 	.word	0x08005b98
 80030a4:	003d0900 	.word	0x003d0900

080030a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030a8:	b480      	push	{r7}
 80030aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030ac:	4b03      	ldr	r3, [pc, #12]	@ (80030bc <HAL_RCC_GetHCLKFreq+0x14>)
 80030ae:	681b      	ldr	r3, [r3, #0]
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr
 80030ba:	bf00      	nop
 80030bc:	20000000 	.word	0x20000000

080030c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b082      	sub	sp, #8
 80030c4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80030c6:	f7ff ffef 	bl	80030a8 <HAL_RCC_GetHCLKFreq>
 80030ca:	4601      	mov	r1, r0
 80030cc:	4b0b      	ldr	r3, [pc, #44]	@ (80030fc <HAL_RCC_GetPCLK1Freq+0x3c>)
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80030d4:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80030d8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	fa92 f2a2 	rbit	r2, r2
 80030e0:	603a      	str	r2, [r7, #0]
  return result;
 80030e2:	683a      	ldr	r2, [r7, #0]
 80030e4:	fab2 f282 	clz	r2, r2
 80030e8:	b2d2      	uxtb	r2, r2
 80030ea:	40d3      	lsrs	r3, r2
 80030ec:	4a04      	ldr	r2, [pc, #16]	@ (8003100 <HAL_RCC_GetPCLK1Freq+0x40>)
 80030ee:	5cd3      	ldrb	r3, [r2, r3]
 80030f0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80030f4:	4618      	mov	r0, r3
 80030f6:	3708      	adds	r7, #8
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}
 80030fc:	40021000 	.word	0x40021000
 8003100:	08005b80 	.word	0x08005b80

08003104 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b082      	sub	sp, #8
 8003108:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800310a:	f7ff ffcd 	bl	80030a8 <HAL_RCC_GetHCLKFreq>
 800310e:	4601      	mov	r1, r0
 8003110:	4b0b      	ldr	r3, [pc, #44]	@ (8003140 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8003118:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 800311c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800311e:	687a      	ldr	r2, [r7, #4]
 8003120:	fa92 f2a2 	rbit	r2, r2
 8003124:	603a      	str	r2, [r7, #0]
  return result;
 8003126:	683a      	ldr	r2, [r7, #0]
 8003128:	fab2 f282 	clz	r2, r2
 800312c:	b2d2      	uxtb	r2, r2
 800312e:	40d3      	lsrs	r3, r2
 8003130:	4a04      	ldr	r2, [pc, #16]	@ (8003144 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003132:	5cd3      	ldrb	r3, [r2, r3]
 8003134:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003138:	4618      	mov	r0, r3
 800313a:	3708      	adds	r7, #8
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}
 8003140:	40021000 	.word	0x40021000
 8003144:	08005b80 	.word	0x08005b80

08003148 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003148:	b480      	push	{r7}
 800314a:	b083      	sub	sp, #12
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	220f      	movs	r2, #15
 8003156:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003158:	4b12      	ldr	r3, [pc, #72]	@ (80031a4 <HAL_RCC_GetClockConfig+0x5c>)
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	f003 0203 	and.w	r2, r3, #3
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8003164:	4b0f      	ldr	r3, [pc, #60]	@ (80031a4 <HAL_RCC_GetClockConfig+0x5c>)
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8003170:	4b0c      	ldr	r3, [pc, #48]	@ (80031a4 <HAL_RCC_GetClockConfig+0x5c>)
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800317c:	4b09      	ldr	r3, [pc, #36]	@ (80031a4 <HAL_RCC_GetClockConfig+0x5c>)
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	08db      	lsrs	r3, r3, #3
 8003182:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 800318a:	4b07      	ldr	r3, [pc, #28]	@ (80031a8 <HAL_RCC_GetClockConfig+0x60>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 0207 	and.w	r2, r3, #7
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	601a      	str	r2, [r3, #0]
}
 8003196:	bf00      	nop
 8003198:	370c      	adds	r7, #12
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr
 80031a2:	bf00      	nop
 80031a4:	40021000 	.word	0x40021000
 80031a8:	40022000 	.word	0x40022000

080031ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b082      	sub	sp, #8
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d101      	bne.n	80031be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e049      	b.n	8003252 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d106      	bne.n	80031d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2200      	movs	r2, #0
 80031ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f000 f841 	bl	800325a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2202      	movs	r2, #2
 80031dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	3304      	adds	r3, #4
 80031e8:	4619      	mov	r1, r3
 80031ea:	4610      	mov	r0, r2
 80031ec:	f000 f9be 	bl	800356c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2201      	movs	r2, #1
 80031f4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2201      	movs	r2, #1
 80031fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2201      	movs	r2, #1
 8003204:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2201      	movs	r2, #1
 800320c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2201      	movs	r2, #1
 8003214:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2201      	movs	r2, #1
 800321c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2201      	movs	r2, #1
 8003224:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2201      	movs	r2, #1
 800322c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2201      	movs	r2, #1
 8003234:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2201      	movs	r2, #1
 800323c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2201      	movs	r2, #1
 8003244:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2201      	movs	r2, #1
 800324c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003250:	2300      	movs	r3, #0
}
 8003252:	4618      	mov	r0, r3
 8003254:	3708      	adds	r7, #8
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}

0800325a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800325a:	b480      	push	{r7}
 800325c:	b083      	sub	sp, #12
 800325e:	af00      	add	r7, sp, #0
 8003260:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003262:	bf00      	nop
 8003264:	370c      	adds	r7, #12
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr
	...

08003270 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003270:	b480      	push	{r7}
 8003272:	b085      	sub	sp, #20
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800327e:	b2db      	uxtb	r3, r3
 8003280:	2b01      	cmp	r3, #1
 8003282:	d001      	beq.n	8003288 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	e03b      	b.n	8003300 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2202      	movs	r2, #2
 800328c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	68da      	ldr	r2, [r3, #12]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f042 0201 	orr.w	r2, r2, #1
 800329e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a19      	ldr	r2, [pc, #100]	@ (800330c <HAL_TIM_Base_Start_IT+0x9c>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d009      	beq.n	80032be <HAL_TIM_Base_Start_IT+0x4e>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032b2:	d004      	beq.n	80032be <HAL_TIM_Base_Start_IT+0x4e>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a15      	ldr	r2, [pc, #84]	@ (8003310 <HAL_TIM_Base_Start_IT+0xa0>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d115      	bne.n	80032ea <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	689a      	ldr	r2, [r3, #8]
 80032c4:	4b13      	ldr	r3, [pc, #76]	@ (8003314 <HAL_TIM_Base_Start_IT+0xa4>)
 80032c6:	4013      	ands	r3, r2
 80032c8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2b06      	cmp	r3, #6
 80032ce:	d015      	beq.n	80032fc <HAL_TIM_Base_Start_IT+0x8c>
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032d6:	d011      	beq.n	80032fc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f042 0201 	orr.w	r2, r2, #1
 80032e6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032e8:	e008      	b.n	80032fc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f042 0201 	orr.w	r2, r2, #1
 80032f8:	601a      	str	r2, [r3, #0]
 80032fa:	e000      	b.n	80032fe <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032fc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80032fe:	2300      	movs	r3, #0
}
 8003300:	4618      	mov	r0, r3
 8003302:	3714      	adds	r7, #20
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr
 800330c:	40012c00 	.word	0x40012c00
 8003310:	40014000 	.word	0x40014000
 8003314:	00010007 	.word	0x00010007

08003318 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b084      	sub	sp, #16
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	68db      	ldr	r3, [r3, #12]
 8003326:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	691b      	ldr	r3, [r3, #16]
 800332e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	f003 0302 	and.w	r3, r3, #2
 8003336:	2b00      	cmp	r3, #0
 8003338:	d020      	beq.n	800337c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	f003 0302 	and.w	r3, r3, #2
 8003340:	2b00      	cmp	r3, #0
 8003342:	d01b      	beq.n	800337c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f06f 0202 	mvn.w	r2, #2
 800334c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2201      	movs	r2, #1
 8003352:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	699b      	ldr	r3, [r3, #24]
 800335a:	f003 0303 	and.w	r3, r3, #3
 800335e:	2b00      	cmp	r3, #0
 8003360:	d003      	beq.n	800336a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f000 f8e4 	bl	8003530 <HAL_TIM_IC_CaptureCallback>
 8003368:	e005      	b.n	8003376 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f000 f8d6 	bl	800351c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	f000 f8e7 	bl	8003544 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2200      	movs	r2, #0
 800337a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	f003 0304 	and.w	r3, r3, #4
 8003382:	2b00      	cmp	r3, #0
 8003384:	d020      	beq.n	80033c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	f003 0304 	and.w	r3, r3, #4
 800338c:	2b00      	cmp	r3, #0
 800338e:	d01b      	beq.n	80033c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f06f 0204 	mvn.w	r2, #4
 8003398:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2202      	movs	r2, #2
 800339e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	699b      	ldr	r3, [r3, #24]
 80033a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d003      	beq.n	80033b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f000 f8be 	bl	8003530 <HAL_TIM_IC_CaptureCallback>
 80033b4:	e005      	b.n	80033c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f000 f8b0 	bl	800351c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	f000 f8c1 	bl	8003544 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2200      	movs	r2, #0
 80033c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	f003 0308 	and.w	r3, r3, #8
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d020      	beq.n	8003414 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	f003 0308 	and.w	r3, r3, #8
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d01b      	beq.n	8003414 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f06f 0208 	mvn.w	r2, #8
 80033e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2204      	movs	r2, #4
 80033ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	69db      	ldr	r3, [r3, #28]
 80033f2:	f003 0303 	and.w	r3, r3, #3
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d003      	beq.n	8003402 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f000 f898 	bl	8003530 <HAL_TIM_IC_CaptureCallback>
 8003400:	e005      	b.n	800340e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f000 f88a 	bl	800351c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003408:	6878      	ldr	r0, [r7, #4]
 800340a:	f000 f89b 	bl	8003544 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	f003 0310 	and.w	r3, r3, #16
 800341a:	2b00      	cmp	r3, #0
 800341c:	d020      	beq.n	8003460 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	f003 0310 	and.w	r3, r3, #16
 8003424:	2b00      	cmp	r3, #0
 8003426:	d01b      	beq.n	8003460 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f06f 0210 	mvn.w	r2, #16
 8003430:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2208      	movs	r2, #8
 8003436:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	69db      	ldr	r3, [r3, #28]
 800343e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003442:	2b00      	cmp	r3, #0
 8003444:	d003      	beq.n	800344e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f000 f872 	bl	8003530 <HAL_TIM_IC_CaptureCallback>
 800344c:	e005      	b.n	800345a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f000 f864 	bl	800351c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f000 f875 	bl	8003544 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	f003 0301 	and.w	r3, r3, #1
 8003466:	2b00      	cmp	r3, #0
 8003468:	d00c      	beq.n	8003484 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	f003 0301 	and.w	r3, r3, #1
 8003470:	2b00      	cmp	r3, #0
 8003472:	d007      	beq.n	8003484 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f06f 0201 	mvn.w	r2, #1
 800347c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f7fd f93c 	bl	80006fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800348a:	2b00      	cmp	r3, #0
 800348c:	d00c      	beq.n	80034a8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003494:	2b00      	cmp	r3, #0
 8003496:	d007      	beq.n	80034a8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80034a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f000 f8e6 	bl	8003674 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d00c      	beq.n	80034cc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d007      	beq.n	80034cc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80034c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f000 f8de 	bl	8003688 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d00c      	beq.n	80034f0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d007      	beq.n	80034f0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80034e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f000 f834 	bl	8003558 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	f003 0320 	and.w	r3, r3, #32
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d00c      	beq.n	8003514 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	f003 0320 	and.w	r3, r3, #32
 8003500:	2b00      	cmp	r3, #0
 8003502:	d007      	beq.n	8003514 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f06f 0220 	mvn.w	r2, #32
 800350c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f000 f8a6 	bl	8003660 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003514:	bf00      	nop
 8003516:	3710      	adds	r7, #16
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}

0800351c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800351c:	b480      	push	{r7}
 800351e:	b083      	sub	sp, #12
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003524:	bf00      	nop
 8003526:	370c      	adds	r7, #12
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr

08003530 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003530:	b480      	push	{r7}
 8003532:	b083      	sub	sp, #12
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003538:	bf00      	nop
 800353a:	370c      	adds	r7, #12
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr

08003544 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003544:	b480      	push	{r7}
 8003546:	b083      	sub	sp, #12
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800354c:	bf00      	nop
 800354e:	370c      	adds	r7, #12
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr

08003558 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003558:	b480      	push	{r7}
 800355a:	b083      	sub	sp, #12
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003560:	bf00      	nop
 8003562:	370c      	adds	r7, #12
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr

0800356c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800356c:	b480      	push	{r7}
 800356e:	b085      	sub	sp, #20
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
 8003574:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	4a34      	ldr	r2, [pc, #208]	@ (8003650 <TIM_Base_SetConfig+0xe4>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d003      	beq.n	800358c <TIM_Base_SetConfig+0x20>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800358a:	d108      	bne.n	800359e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003592:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	68fa      	ldr	r2, [r7, #12]
 800359a:	4313      	orrs	r3, r2
 800359c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4a2b      	ldr	r2, [pc, #172]	@ (8003650 <TIM_Base_SetConfig+0xe4>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d00f      	beq.n	80035c6 <TIM_Base_SetConfig+0x5a>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035ac:	d00b      	beq.n	80035c6 <TIM_Base_SetConfig+0x5a>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	4a28      	ldr	r2, [pc, #160]	@ (8003654 <TIM_Base_SetConfig+0xe8>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d007      	beq.n	80035c6 <TIM_Base_SetConfig+0x5a>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4a27      	ldr	r2, [pc, #156]	@ (8003658 <TIM_Base_SetConfig+0xec>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d003      	beq.n	80035c6 <TIM_Base_SetConfig+0x5a>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	4a26      	ldr	r2, [pc, #152]	@ (800365c <TIM_Base_SetConfig+0xf0>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d108      	bne.n	80035d8 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80035cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	68db      	ldr	r3, [r3, #12]
 80035d2:	68fa      	ldr	r2, [r7, #12]
 80035d4:	4313      	orrs	r3, r2
 80035d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	695b      	ldr	r3, [r3, #20]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	68fa      	ldr	r2, [r7, #12]
 80035ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	689a      	ldr	r2, [r3, #8]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	4a14      	ldr	r2, [pc, #80]	@ (8003650 <TIM_Base_SetConfig+0xe4>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d00b      	beq.n	800361c <TIM_Base_SetConfig+0xb0>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	4a13      	ldr	r2, [pc, #76]	@ (8003654 <TIM_Base_SetConfig+0xe8>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d007      	beq.n	800361c <TIM_Base_SetConfig+0xb0>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	4a12      	ldr	r2, [pc, #72]	@ (8003658 <TIM_Base_SetConfig+0xec>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d003      	beq.n	800361c <TIM_Base_SetConfig+0xb0>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	4a11      	ldr	r2, [pc, #68]	@ (800365c <TIM_Base_SetConfig+0xf0>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d103      	bne.n	8003624 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	691a      	ldr	r2, [r3, #16]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2201      	movs	r2, #1
 8003628:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	691b      	ldr	r3, [r3, #16]
 800362e:	f003 0301 	and.w	r3, r3, #1
 8003632:	2b01      	cmp	r3, #1
 8003634:	d105      	bne.n	8003642 <TIM_Base_SetConfig+0xd6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	691b      	ldr	r3, [r3, #16]
 800363a:	f023 0201 	bic.w	r2, r3, #1
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	611a      	str	r2, [r3, #16]
  }
}
 8003642:	bf00      	nop
 8003644:	3714      	adds	r7, #20
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr
 800364e:	bf00      	nop
 8003650:	40012c00 	.word	0x40012c00
 8003654:	40014000 	.word	0x40014000
 8003658:	40014400 	.word	0x40014400
 800365c:	40014800 	.word	0x40014800

08003660 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003660:	b480      	push	{r7}
 8003662:	b083      	sub	sp, #12
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003668:	bf00      	nop
 800366a:	370c      	adds	r7, #12
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr

08003674 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003674:	b480      	push	{r7}
 8003676:	b083      	sub	sp, #12
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800367c:	bf00      	nop
 800367e:	370c      	adds	r7, #12
 8003680:	46bd      	mov	sp, r7
 8003682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003686:	4770      	bx	lr

08003688 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003688:	b480      	push	{r7}
 800368a:	b083      	sub	sp, #12
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003690:	bf00      	nop
 8003692:	370c      	adds	r7, #12
 8003694:	46bd      	mov	sp, r7
 8003696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369a:	4770      	bx	lr

0800369c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b082      	sub	sp, #8
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d101      	bne.n	80036ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e040      	b.n	8003730 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d106      	bne.n	80036c4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2200      	movs	r2, #0
 80036ba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f7fd f8ba 	bl	8000838 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2224      	movs	r2, #36	@ 0x24
 80036c8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f022 0201 	bic.w	r2, r2, #1
 80036d8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d002      	beq.n	80036e8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f000 f95e 	bl	80039a4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	f000 f825 	bl	8003738 <UART_SetConfig>
 80036ee:	4603      	mov	r3, r0
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d101      	bne.n	80036f8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	e01b      	b.n	8003730 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	685a      	ldr	r2, [r3, #4]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003706:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	689a      	ldr	r2, [r3, #8]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003716:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f042 0201 	orr.w	r2, r2, #1
 8003726:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003728:	6878      	ldr	r0, [r7, #4]
 800372a:	f000 f9dd 	bl	8003ae8 <UART_CheckIdleState>
 800372e:	4603      	mov	r3, r0
}
 8003730:	4618      	mov	r0, r3
 8003732:	3708      	adds	r7, #8
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}

08003738 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b088      	sub	sp, #32
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003740:	2300      	movs	r3, #0
 8003742:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	689a      	ldr	r2, [r3, #8]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	691b      	ldr	r3, [r3, #16]
 800374c:	431a      	orrs	r2, r3
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	695b      	ldr	r3, [r3, #20]
 8003752:	431a      	orrs	r2, r3
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	69db      	ldr	r3, [r3, #28]
 8003758:	4313      	orrs	r3, r2
 800375a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	4b8a      	ldr	r3, [pc, #552]	@ (800398c <UART_SetConfig+0x254>)
 8003764:	4013      	ands	r3, r2
 8003766:	687a      	ldr	r2, [r7, #4]
 8003768:	6812      	ldr	r2, [r2, #0]
 800376a:	6979      	ldr	r1, [r7, #20]
 800376c:	430b      	orrs	r3, r1
 800376e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	68da      	ldr	r2, [r3, #12]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	430a      	orrs	r2, r1
 8003784:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	699b      	ldr	r3, [r3, #24]
 800378a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6a1b      	ldr	r3, [r3, #32]
 8003790:	697a      	ldr	r2, [r7, #20]
 8003792:	4313      	orrs	r3, r2
 8003794:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	697a      	ldr	r2, [r7, #20]
 80037a6:	430a      	orrs	r2, r1
 80037a8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a78      	ldr	r2, [pc, #480]	@ (8003990 <UART_SetConfig+0x258>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d120      	bne.n	80037f6 <UART_SetConfig+0xbe>
 80037b4:	4b77      	ldr	r3, [pc, #476]	@ (8003994 <UART_SetConfig+0x25c>)
 80037b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037b8:	f003 0303 	and.w	r3, r3, #3
 80037bc:	2b03      	cmp	r3, #3
 80037be:	d817      	bhi.n	80037f0 <UART_SetConfig+0xb8>
 80037c0:	a201      	add	r2, pc, #4	@ (adr r2, 80037c8 <UART_SetConfig+0x90>)
 80037c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037c6:	bf00      	nop
 80037c8:	080037d9 	.word	0x080037d9
 80037cc:	080037e5 	.word	0x080037e5
 80037d0:	080037eb 	.word	0x080037eb
 80037d4:	080037df 	.word	0x080037df
 80037d8:	2300      	movs	r3, #0
 80037da:	77fb      	strb	r3, [r7, #31]
 80037dc:	e01d      	b.n	800381a <UART_SetConfig+0xe2>
 80037de:	2302      	movs	r3, #2
 80037e0:	77fb      	strb	r3, [r7, #31]
 80037e2:	e01a      	b.n	800381a <UART_SetConfig+0xe2>
 80037e4:	2304      	movs	r3, #4
 80037e6:	77fb      	strb	r3, [r7, #31]
 80037e8:	e017      	b.n	800381a <UART_SetConfig+0xe2>
 80037ea:	2308      	movs	r3, #8
 80037ec:	77fb      	strb	r3, [r7, #31]
 80037ee:	e014      	b.n	800381a <UART_SetConfig+0xe2>
 80037f0:	2310      	movs	r3, #16
 80037f2:	77fb      	strb	r3, [r7, #31]
 80037f4:	e011      	b.n	800381a <UART_SetConfig+0xe2>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a67      	ldr	r2, [pc, #412]	@ (8003998 <UART_SetConfig+0x260>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d102      	bne.n	8003806 <UART_SetConfig+0xce>
 8003800:	2300      	movs	r3, #0
 8003802:	77fb      	strb	r3, [r7, #31]
 8003804:	e009      	b.n	800381a <UART_SetConfig+0xe2>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a64      	ldr	r2, [pc, #400]	@ (800399c <UART_SetConfig+0x264>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d102      	bne.n	8003816 <UART_SetConfig+0xde>
 8003810:	2300      	movs	r3, #0
 8003812:	77fb      	strb	r3, [r7, #31]
 8003814:	e001      	b.n	800381a <UART_SetConfig+0xe2>
 8003816:	2310      	movs	r3, #16
 8003818:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	69db      	ldr	r3, [r3, #28]
 800381e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003822:	d15a      	bne.n	80038da <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8003824:	7ffb      	ldrb	r3, [r7, #31]
 8003826:	2b08      	cmp	r3, #8
 8003828:	d827      	bhi.n	800387a <UART_SetConfig+0x142>
 800382a:	a201      	add	r2, pc, #4	@ (adr r2, 8003830 <UART_SetConfig+0xf8>)
 800382c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003830:	08003855 	.word	0x08003855
 8003834:	0800385d 	.word	0x0800385d
 8003838:	08003865 	.word	0x08003865
 800383c:	0800387b 	.word	0x0800387b
 8003840:	0800386b 	.word	0x0800386b
 8003844:	0800387b 	.word	0x0800387b
 8003848:	0800387b 	.word	0x0800387b
 800384c:	0800387b 	.word	0x0800387b
 8003850:	08003873 	.word	0x08003873
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003854:	f7ff fc34 	bl	80030c0 <HAL_RCC_GetPCLK1Freq>
 8003858:	61b8      	str	r0, [r7, #24]
        break;
 800385a:	e013      	b.n	8003884 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800385c:	f7ff fc52 	bl	8003104 <HAL_RCC_GetPCLK2Freq>
 8003860:	61b8      	str	r0, [r7, #24]
        break;
 8003862:	e00f      	b.n	8003884 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003864:	4b4e      	ldr	r3, [pc, #312]	@ (80039a0 <UART_SetConfig+0x268>)
 8003866:	61bb      	str	r3, [r7, #24]
        break;
 8003868:	e00c      	b.n	8003884 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800386a:	f7ff fbc9 	bl	8003000 <HAL_RCC_GetSysClockFreq>
 800386e:	61b8      	str	r0, [r7, #24]
        break;
 8003870:	e008      	b.n	8003884 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003872:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003876:	61bb      	str	r3, [r7, #24]
        break;
 8003878:	e004      	b.n	8003884 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800387a:	2300      	movs	r3, #0
 800387c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	77bb      	strb	r3, [r7, #30]
        break;
 8003882:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003884:	69bb      	ldr	r3, [r7, #24]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d074      	beq.n	8003974 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800388a:	69bb      	ldr	r3, [r7, #24]
 800388c:	005a      	lsls	r2, r3, #1
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	085b      	lsrs	r3, r3, #1
 8003894:	441a      	add	r2, r3
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	fbb2 f3f3 	udiv	r3, r2, r3
 800389e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	2b0f      	cmp	r3, #15
 80038a4:	d916      	bls.n	80038d4 <UART_SetConfig+0x19c>
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038ac:	d212      	bcs.n	80038d4 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	b29b      	uxth	r3, r3
 80038b2:	f023 030f 	bic.w	r3, r3, #15
 80038b6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	085b      	lsrs	r3, r3, #1
 80038bc:	b29b      	uxth	r3, r3
 80038be:	f003 0307 	and.w	r3, r3, #7
 80038c2:	b29a      	uxth	r2, r3
 80038c4:	89fb      	ldrh	r3, [r7, #14]
 80038c6:	4313      	orrs	r3, r2
 80038c8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	89fa      	ldrh	r2, [r7, #14]
 80038d0:	60da      	str	r2, [r3, #12]
 80038d2:	e04f      	b.n	8003974 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	77bb      	strb	r3, [r7, #30]
 80038d8:	e04c      	b.n	8003974 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80038da:	7ffb      	ldrb	r3, [r7, #31]
 80038dc:	2b08      	cmp	r3, #8
 80038de:	d828      	bhi.n	8003932 <UART_SetConfig+0x1fa>
 80038e0:	a201      	add	r2, pc, #4	@ (adr r2, 80038e8 <UART_SetConfig+0x1b0>)
 80038e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038e6:	bf00      	nop
 80038e8:	0800390d 	.word	0x0800390d
 80038ec:	08003915 	.word	0x08003915
 80038f0:	0800391d 	.word	0x0800391d
 80038f4:	08003933 	.word	0x08003933
 80038f8:	08003923 	.word	0x08003923
 80038fc:	08003933 	.word	0x08003933
 8003900:	08003933 	.word	0x08003933
 8003904:	08003933 	.word	0x08003933
 8003908:	0800392b 	.word	0x0800392b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800390c:	f7ff fbd8 	bl	80030c0 <HAL_RCC_GetPCLK1Freq>
 8003910:	61b8      	str	r0, [r7, #24]
        break;
 8003912:	e013      	b.n	800393c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003914:	f7ff fbf6 	bl	8003104 <HAL_RCC_GetPCLK2Freq>
 8003918:	61b8      	str	r0, [r7, #24]
        break;
 800391a:	e00f      	b.n	800393c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800391c:	4b20      	ldr	r3, [pc, #128]	@ (80039a0 <UART_SetConfig+0x268>)
 800391e:	61bb      	str	r3, [r7, #24]
        break;
 8003920:	e00c      	b.n	800393c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003922:	f7ff fb6d 	bl	8003000 <HAL_RCC_GetSysClockFreq>
 8003926:	61b8      	str	r0, [r7, #24]
        break;
 8003928:	e008      	b.n	800393c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800392a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800392e:	61bb      	str	r3, [r7, #24]
        break;
 8003930:	e004      	b.n	800393c <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8003932:	2300      	movs	r3, #0
 8003934:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	77bb      	strb	r3, [r7, #30]
        break;
 800393a:	bf00      	nop
    }

    if (pclk != 0U)
 800393c:	69bb      	ldr	r3, [r7, #24]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d018      	beq.n	8003974 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	085a      	lsrs	r2, r3, #1
 8003948:	69bb      	ldr	r3, [r7, #24]
 800394a:	441a      	add	r2, r3
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	fbb2 f3f3 	udiv	r3, r2, r3
 8003954:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	2b0f      	cmp	r3, #15
 800395a:	d909      	bls.n	8003970 <UART_SetConfig+0x238>
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003962:	d205      	bcs.n	8003970 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	b29a      	uxth	r2, r3
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	60da      	str	r2, [r3, #12]
 800396e:	e001      	b.n	8003974 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2200      	movs	r2, #0
 8003978:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2200      	movs	r2, #0
 800397e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003980:	7fbb      	ldrb	r3, [r7, #30]
}
 8003982:	4618      	mov	r0, r3
 8003984:	3720      	adds	r7, #32
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}
 800398a:	bf00      	nop
 800398c:	efff69f3 	.word	0xefff69f3
 8003990:	40013800 	.word	0x40013800
 8003994:	40021000 	.word	0x40021000
 8003998:	40004400 	.word	0x40004400
 800399c:	40004800 	.word	0x40004800
 80039a0:	007a1200 	.word	0x007a1200

080039a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b083      	sub	sp, #12
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039b0:	f003 0308 	and.w	r3, r3, #8
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d00a      	beq.n	80039ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	430a      	orrs	r2, r1
 80039cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039d2:	f003 0301 	and.w	r3, r3, #1
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d00a      	beq.n	80039f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	430a      	orrs	r2, r1
 80039ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039f4:	f003 0302 	and.w	r3, r3, #2
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d00a      	beq.n	8003a12 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	430a      	orrs	r2, r1
 8003a10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a16:	f003 0304 	and.w	r3, r3, #4
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d00a      	beq.n	8003a34 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	430a      	orrs	r2, r1
 8003a32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a38:	f003 0310 	and.w	r3, r3, #16
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d00a      	beq.n	8003a56 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	430a      	orrs	r2, r1
 8003a54:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a5a:	f003 0320 	and.w	r3, r3, #32
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d00a      	beq.n	8003a78 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	430a      	orrs	r2, r1
 8003a76:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d01a      	beq.n	8003aba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	430a      	orrs	r2, r1
 8003a98:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a9e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003aa2:	d10a      	bne.n	8003aba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	430a      	orrs	r2, r1
 8003ab8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003abe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d00a      	beq.n	8003adc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	430a      	orrs	r2, r1
 8003ada:	605a      	str	r2, [r3, #4]
  }
}
 8003adc:	bf00      	nop
 8003ade:	370c      	adds	r7, #12
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr

08003ae8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b098      	sub	sp, #96	@ 0x60
 8003aec:	af02      	add	r7, sp, #8
 8003aee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2200      	movs	r2, #0
 8003af4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003af8:	f7fc ffe6 	bl	8000ac8 <HAL_GetTick>
 8003afc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 0308 	and.w	r3, r3, #8
 8003b08:	2b08      	cmp	r3, #8
 8003b0a:	d12e      	bne.n	8003b6a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b0c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003b10:	9300      	str	r3, [sp, #0]
 8003b12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b14:	2200      	movs	r2, #0
 8003b16:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f000 f88c 	bl	8003c38 <UART_WaitOnFlagUntilTimeout>
 8003b20:	4603      	mov	r3, r0
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d021      	beq.n	8003b6a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b2e:	e853 3f00 	ldrex	r3, [r3]
 8003b32:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003b34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b36:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003b3a:	653b      	str	r3, [r7, #80]	@ 0x50
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	461a      	mov	r2, r3
 8003b42:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003b44:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b46:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b48:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003b4a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003b4c:	e841 2300 	strex	r3, r2, [r1]
 8003b50:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003b52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d1e6      	bne.n	8003b26 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2220      	movs	r2, #32
 8003b5c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2200      	movs	r2, #0
 8003b62:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b66:	2303      	movs	r3, #3
 8003b68:	e062      	b.n	8003c30 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 0304 	and.w	r3, r3, #4
 8003b74:	2b04      	cmp	r3, #4
 8003b76:	d149      	bne.n	8003c0c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b78:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003b7c:	9300      	str	r3, [sp, #0]
 8003b7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b80:	2200      	movs	r2, #0
 8003b82:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f000 f856 	bl	8003c38 <UART_WaitOnFlagUntilTimeout>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d03c      	beq.n	8003c0c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b9a:	e853 3f00 	ldrex	r3, [r3]
 8003b9e:	623b      	str	r3, [r7, #32]
   return(result);
 8003ba0:	6a3b      	ldr	r3, [r7, #32]
 8003ba2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003ba6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	461a      	mov	r2, r3
 8003bae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003bb0:	633b      	str	r3, [r7, #48]	@ 0x30
 8003bb2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bb4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003bb6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003bb8:	e841 2300 	strex	r3, r2, [r1]
 8003bbc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003bbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d1e6      	bne.n	8003b92 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	3308      	adds	r3, #8
 8003bca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	e853 3f00 	ldrex	r3, [r3]
 8003bd2:	60fb      	str	r3, [r7, #12]
   return(result);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	f023 0301 	bic.w	r3, r3, #1
 8003bda:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	3308      	adds	r3, #8
 8003be2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003be4:	61fa      	str	r2, [r7, #28]
 8003be6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003be8:	69b9      	ldr	r1, [r7, #24]
 8003bea:	69fa      	ldr	r2, [r7, #28]
 8003bec:	e841 2300 	strex	r3, r2, [r1]
 8003bf0:	617b      	str	r3, [r7, #20]
   return(result);
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d1e5      	bne.n	8003bc4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2220      	movs	r2, #32
 8003bfc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2200      	movs	r2, #0
 8003c04:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c08:	2303      	movs	r3, #3
 8003c0a:	e011      	b.n	8003c30 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2220      	movs	r2, #32
 8003c10:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2220      	movs	r2, #32
 8003c16:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2200      	movs	r2, #0
 8003c24:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003c2e:	2300      	movs	r3, #0
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	3758      	adds	r7, #88	@ 0x58
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}

08003c38 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b084      	sub	sp, #16
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	60f8      	str	r0, [r7, #12]
 8003c40:	60b9      	str	r1, [r7, #8]
 8003c42:	603b      	str	r3, [r7, #0]
 8003c44:	4613      	mov	r3, r2
 8003c46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c48:	e04f      	b.n	8003cea <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c4a:	69bb      	ldr	r3, [r7, #24]
 8003c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c50:	d04b      	beq.n	8003cea <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c52:	f7fc ff39 	bl	8000ac8 <HAL_GetTick>
 8003c56:	4602      	mov	r2, r0
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	1ad3      	subs	r3, r2, r3
 8003c5c:	69ba      	ldr	r2, [r7, #24]
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	d302      	bcc.n	8003c68 <UART_WaitOnFlagUntilTimeout+0x30>
 8003c62:	69bb      	ldr	r3, [r7, #24]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d101      	bne.n	8003c6c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003c68:	2303      	movs	r3, #3
 8003c6a:	e04e      	b.n	8003d0a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f003 0304 	and.w	r3, r3, #4
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d037      	beq.n	8003cea <UART_WaitOnFlagUntilTimeout+0xb2>
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	2b80      	cmp	r3, #128	@ 0x80
 8003c7e:	d034      	beq.n	8003cea <UART_WaitOnFlagUntilTimeout+0xb2>
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	2b40      	cmp	r3, #64	@ 0x40
 8003c84:	d031      	beq.n	8003cea <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	69db      	ldr	r3, [r3, #28]
 8003c8c:	f003 0308 	and.w	r3, r3, #8
 8003c90:	2b08      	cmp	r3, #8
 8003c92:	d110      	bne.n	8003cb6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	2208      	movs	r2, #8
 8003c9a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003c9c:	68f8      	ldr	r0, [r7, #12]
 8003c9e:	f000 f838 	bl	8003d12 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2208      	movs	r2, #8
 8003ca6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2200      	movs	r2, #0
 8003cae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e029      	b.n	8003d0a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	69db      	ldr	r3, [r3, #28]
 8003cbc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003cc0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003cc4:	d111      	bne.n	8003cea <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003cce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003cd0:	68f8      	ldr	r0, [r7, #12]
 8003cd2:	f000 f81e 	bl	8003d12 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2220      	movs	r2, #32
 8003cda:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	e00f      	b.n	8003d0a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	69da      	ldr	r2, [r3, #28]
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	4013      	ands	r3, r2
 8003cf4:	68ba      	ldr	r2, [r7, #8]
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	bf0c      	ite	eq
 8003cfa:	2301      	moveq	r3, #1
 8003cfc:	2300      	movne	r3, #0
 8003cfe:	b2db      	uxtb	r3, r3
 8003d00:	461a      	mov	r2, r3
 8003d02:	79fb      	ldrb	r3, [r7, #7]
 8003d04:	429a      	cmp	r2, r3
 8003d06:	d0a0      	beq.n	8003c4a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d08:	2300      	movs	r3, #0
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3710      	adds	r7, #16
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}

08003d12 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d12:	b480      	push	{r7}
 8003d14:	b095      	sub	sp, #84	@ 0x54
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d22:	e853 3f00 	ldrex	r3, [r3]
 8003d26:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003d28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d2a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003d2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	461a      	mov	r2, r3
 8003d36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003d38:	643b      	str	r3, [r7, #64]	@ 0x40
 8003d3a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d3c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003d3e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003d40:	e841 2300 	strex	r3, r2, [r1]
 8003d44:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003d46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d1e6      	bne.n	8003d1a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	3308      	adds	r3, #8
 8003d52:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d54:	6a3b      	ldr	r3, [r7, #32]
 8003d56:	e853 3f00 	ldrex	r3, [r3]
 8003d5a:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d5c:	69fb      	ldr	r3, [r7, #28]
 8003d5e:	f023 0301 	bic.w	r3, r3, #1
 8003d62:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	3308      	adds	r3, #8
 8003d6a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003d6c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003d6e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d70:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003d72:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d74:	e841 2300 	strex	r3, r2, [r1]
 8003d78:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d1e5      	bne.n	8003d4c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d118      	bne.n	8003dba <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	e853 3f00 	ldrex	r3, [r3]
 8003d94:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	f023 0310 	bic.w	r3, r3, #16
 8003d9c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	461a      	mov	r2, r3
 8003da4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003da6:	61bb      	str	r3, [r7, #24]
 8003da8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003daa:	6979      	ldr	r1, [r7, #20]
 8003dac:	69ba      	ldr	r2, [r7, #24]
 8003dae:	e841 2300 	strex	r3, r2, [r1]
 8003db2:	613b      	str	r3, [r7, #16]
   return(result);
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d1e6      	bne.n	8003d88 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2220      	movs	r2, #32
 8003dbe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003dce:	bf00      	nop
 8003dd0:	3754      	adds	r7, #84	@ 0x54
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd8:	4770      	bx	lr

08003dda <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003dda:	b480      	push	{r7}
 8003ddc:	b085      	sub	sp, #20
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	4603      	mov	r3, r0
 8003de2:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003de4:	2300      	movs	r3, #0
 8003de6:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003de8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003dec:	2b84      	cmp	r3, #132	@ 0x84
 8003dee:	d005      	beq.n	8003dfc <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003df0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	4413      	add	r3, r2
 8003df8:	3303      	adds	r3, #3
 8003dfa:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3714      	adds	r7, #20
 8003e02:	46bd      	mov	sp, r7
 8003e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e08:	4770      	bx	lr

08003e0a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003e0a:	b580      	push	{r7, lr}
 8003e0c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003e0e:	f000 fd99 	bl	8004944 <vTaskStartScheduler>
  
  return osOK;
 8003e12:	2300      	movs	r3, #0
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	bd80      	pop	{r7, pc}

08003e18 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003e18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e1a:	b089      	sub	sp, #36	@ 0x24
 8003e1c:	af04      	add	r7, sp, #16
 8003e1e:	6078      	str	r0, [r7, #4]
 8003e20:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	695b      	ldr	r3, [r3, #20]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d020      	beq.n	8003e6c <osThreadCreate+0x54>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	699b      	ldr	r3, [r3, #24]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d01c      	beq.n	8003e6c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	685c      	ldr	r4, [r3, #4]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	691e      	ldr	r6, [r3, #16]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003e44:	4618      	mov	r0, r3
 8003e46:	f7ff ffc8 	bl	8003dda <makeFreeRtosPriority>
 8003e4a:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	695b      	ldr	r3, [r3, #20]
 8003e50:	687a      	ldr	r2, [r7, #4]
 8003e52:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003e54:	9202      	str	r2, [sp, #8]
 8003e56:	9301      	str	r3, [sp, #4]
 8003e58:	9100      	str	r1, [sp, #0]
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	4632      	mov	r2, r6
 8003e5e:	4629      	mov	r1, r5
 8003e60:	4620      	mov	r0, r4
 8003e62:	f000 fbab 	bl	80045bc <xTaskCreateStatic>
 8003e66:	4603      	mov	r3, r0
 8003e68:	60fb      	str	r3, [r7, #12]
 8003e6a:	e01c      	b.n	8003ea6 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	685c      	ldr	r4, [r3, #4]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003e78:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003e80:	4618      	mov	r0, r3
 8003e82:	f7ff ffaa 	bl	8003dda <makeFreeRtosPriority>
 8003e86:	4602      	mov	r2, r0
 8003e88:	f107 030c 	add.w	r3, r7, #12
 8003e8c:	9301      	str	r3, [sp, #4]
 8003e8e:	9200      	str	r2, [sp, #0]
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	4632      	mov	r2, r6
 8003e94:	4629      	mov	r1, r5
 8003e96:	4620      	mov	r0, r4
 8003e98:	f000 fbef 	bl	800467a <xTaskCreate>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	d001      	beq.n	8003ea6 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	e000      	b.n	8003ea8 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	3714      	adds	r7, #20
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003eb0 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b084      	sub	sp, #16
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d001      	beq.n	8003ec6 <osDelay+0x16>
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	e000      	b.n	8003ec8 <osDelay+0x18>
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f000 fd05 	bl	80048d8 <vTaskDelay>
  
  return osOK;
 8003ece:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	3710      	adds	r7, #16
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}

08003ed8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b083      	sub	sp, #12
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	f103 0208 	add.w	r2, r3, #8
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	f04f 32ff 	mov.w	r2, #4294967295
 8003ef0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	f103 0208 	add.w	r2, r3, #8
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	f103 0208 	add.w	r2, r3, #8
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003f0c:	bf00      	nop
 8003f0e:	370c      	adds	r7, #12
 8003f10:	46bd      	mov	sp, r7
 8003f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f16:	4770      	bx	lr

08003f18 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b083      	sub	sp, #12
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2200      	movs	r2, #0
 8003f24:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003f26:	bf00      	nop
 8003f28:	370c      	adds	r7, #12
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f30:	4770      	bx	lr

08003f32 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003f32:	b480      	push	{r7}
 8003f34:	b085      	sub	sp, #20
 8003f36:	af00      	add	r7, sp, #0
 8003f38:	6078      	str	r0, [r7, #4]
 8003f3a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	68fa      	ldr	r2, [r7, #12]
 8003f46:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	689a      	ldr	r2, [r3, #8]
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	683a      	ldr	r2, [r7, #0]
 8003f56:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	683a      	ldr	r2, [r7, #0]
 8003f5c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	687a      	ldr	r2, [r7, #4]
 8003f62:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	1c5a      	adds	r2, r3, #1
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	601a      	str	r2, [r3, #0]
}
 8003f6e:	bf00      	nop
 8003f70:	3714      	adds	r7, #20
 8003f72:	46bd      	mov	sp, r7
 8003f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f78:	4770      	bx	lr

08003f7a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003f7a:	b480      	push	{r7}
 8003f7c:	b085      	sub	sp, #20
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	6078      	str	r0, [r7, #4]
 8003f82:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f90:	d103      	bne.n	8003f9a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	691b      	ldr	r3, [r3, #16]
 8003f96:	60fb      	str	r3, [r7, #12]
 8003f98:	e00c      	b.n	8003fb4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	3308      	adds	r3, #8
 8003f9e:	60fb      	str	r3, [r7, #12]
 8003fa0:	e002      	b.n	8003fa8 <vListInsert+0x2e>
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	60fb      	str	r3, [r7, #12]
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	68ba      	ldr	r2, [r7, #8]
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d2f6      	bcs.n	8003fa2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	685a      	ldr	r2, [r3, #4]
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	683a      	ldr	r2, [r7, #0]
 8003fc2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	68fa      	ldr	r2, [r7, #12]
 8003fc8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	683a      	ldr	r2, [r7, #0]
 8003fce:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	687a      	ldr	r2, [r7, #4]
 8003fd4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	1c5a      	adds	r2, r3, #1
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	601a      	str	r2, [r3, #0]
}
 8003fe0:	bf00      	nop
 8003fe2:	3714      	adds	r7, #20
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr

08003fec <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003fec:	b480      	push	{r7}
 8003fee:	b085      	sub	sp, #20
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	691b      	ldr	r3, [r3, #16]
 8003ff8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	687a      	ldr	r2, [r7, #4]
 8004000:	6892      	ldr	r2, [r2, #8]
 8004002:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	687a      	ldr	r2, [r7, #4]
 800400a:	6852      	ldr	r2, [r2, #4]
 800400c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	429a      	cmp	r2, r3
 8004016:	d103      	bne.n	8004020 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	689a      	ldr	r2, [r3, #8]
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2200      	movs	r2, #0
 8004024:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	1e5a      	subs	r2, r3, #1
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
}
 8004034:	4618      	mov	r0, r3
 8004036:	3714      	adds	r7, #20
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr

08004040 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b084      	sub	sp, #16
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
 8004048:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d10b      	bne.n	800406c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004054:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004058:	f383 8811 	msr	BASEPRI, r3
 800405c:	f3bf 8f6f 	isb	sy
 8004060:	f3bf 8f4f 	dsb	sy
 8004064:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004066:	bf00      	nop
 8004068:	bf00      	nop
 800406a:	e7fd      	b.n	8004068 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800406c:	f001 f9f4 	bl	8005458 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004078:	68f9      	ldr	r1, [r7, #12]
 800407a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800407c:	fb01 f303 	mul.w	r3, r1, r3
 8004080:	441a      	add	r2, r3
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2200      	movs	r2, #0
 800408a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800409c:	3b01      	subs	r3, #1
 800409e:	68f9      	ldr	r1, [r7, #12]
 80040a0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80040a2:	fb01 f303 	mul.w	r3, r1, r3
 80040a6:	441a      	add	r2, r3
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	22ff      	movs	r2, #255	@ 0xff
 80040b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	22ff      	movs	r2, #255	@ 0xff
 80040b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d114      	bne.n	80040ec <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	691b      	ldr	r3, [r3, #16]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d01a      	beq.n	8004100 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	3310      	adds	r3, #16
 80040ce:	4618      	mov	r0, r3
 80040d0:	f000 fe60 	bl	8004d94 <xTaskRemoveFromEventList>
 80040d4:	4603      	mov	r3, r0
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d012      	beq.n	8004100 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80040da:	4b0d      	ldr	r3, [pc, #52]	@ (8004110 <xQueueGenericReset+0xd0>)
 80040dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80040e0:	601a      	str	r2, [r3, #0]
 80040e2:	f3bf 8f4f 	dsb	sy
 80040e6:	f3bf 8f6f 	isb	sy
 80040ea:	e009      	b.n	8004100 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	3310      	adds	r3, #16
 80040f0:	4618      	mov	r0, r3
 80040f2:	f7ff fef1 	bl	8003ed8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	3324      	adds	r3, #36	@ 0x24
 80040fa:	4618      	mov	r0, r3
 80040fc:	f7ff feec 	bl	8003ed8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004100:	f001 f9dc 	bl	80054bc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004104:	2301      	movs	r3, #1
}
 8004106:	4618      	mov	r0, r3
 8004108:	3710      	adds	r7, #16
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}
 800410e:	bf00      	nop
 8004110:	e000ed04 	.word	0xe000ed04

08004114 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004114:	b580      	push	{r7, lr}
 8004116:	b08a      	sub	sp, #40	@ 0x28
 8004118:	af02      	add	r7, sp, #8
 800411a:	60f8      	str	r0, [r7, #12]
 800411c:	60b9      	str	r1, [r7, #8]
 800411e:	4613      	mov	r3, r2
 8004120:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d10b      	bne.n	8004140 <xQueueGenericCreate+0x2c>
	__asm volatile
 8004128:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800412c:	f383 8811 	msr	BASEPRI, r3
 8004130:	f3bf 8f6f 	isb	sy
 8004134:	f3bf 8f4f 	dsb	sy
 8004138:	613b      	str	r3, [r7, #16]
}
 800413a:	bf00      	nop
 800413c:	bf00      	nop
 800413e:	e7fd      	b.n	800413c <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d102      	bne.n	800414c <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8004146:	2300      	movs	r3, #0
 8004148:	61fb      	str	r3, [r7, #28]
 800414a:	e004      	b.n	8004156 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	68ba      	ldr	r2, [r7, #8]
 8004150:	fb02 f303 	mul.w	r3, r2, r3
 8004154:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8004156:	69fb      	ldr	r3, [r7, #28]
 8004158:	3348      	adds	r3, #72	@ 0x48
 800415a:	4618      	mov	r0, r3
 800415c:	f001 fa9e 	bl	800569c <pvPortMalloc>
 8004160:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004162:	69bb      	ldr	r3, [r7, #24]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d00f      	beq.n	8004188 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8004168:	69bb      	ldr	r3, [r7, #24]
 800416a:	3348      	adds	r3, #72	@ 0x48
 800416c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800416e:	69bb      	ldr	r3, [r7, #24]
 8004170:	2200      	movs	r2, #0
 8004172:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004176:	79fa      	ldrb	r2, [r7, #7]
 8004178:	69bb      	ldr	r3, [r7, #24]
 800417a:	9300      	str	r3, [sp, #0]
 800417c:	4613      	mov	r3, r2
 800417e:	697a      	ldr	r2, [r7, #20]
 8004180:	68b9      	ldr	r1, [r7, #8]
 8004182:	68f8      	ldr	r0, [r7, #12]
 8004184:	f000 f805 	bl	8004192 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004188:	69bb      	ldr	r3, [r7, #24]
	}
 800418a:	4618      	mov	r0, r3
 800418c:	3720      	adds	r7, #32
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}

08004192 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004192:	b580      	push	{r7, lr}
 8004194:	b084      	sub	sp, #16
 8004196:	af00      	add	r7, sp, #0
 8004198:	60f8      	str	r0, [r7, #12]
 800419a:	60b9      	str	r1, [r7, #8]
 800419c:	607a      	str	r2, [r7, #4]
 800419e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d103      	bne.n	80041ae <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80041a6:	69bb      	ldr	r3, [r7, #24]
 80041a8:	69ba      	ldr	r2, [r7, #24]
 80041aa:	601a      	str	r2, [r3, #0]
 80041ac:	e002      	b.n	80041b4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80041ae:	69bb      	ldr	r3, [r7, #24]
 80041b0:	687a      	ldr	r2, [r7, #4]
 80041b2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80041b4:	69bb      	ldr	r3, [r7, #24]
 80041b6:	68fa      	ldr	r2, [r7, #12]
 80041b8:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80041ba:	69bb      	ldr	r3, [r7, #24]
 80041bc:	68ba      	ldr	r2, [r7, #8]
 80041be:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80041c0:	2101      	movs	r1, #1
 80041c2:	69b8      	ldr	r0, [r7, #24]
 80041c4:	f7ff ff3c 	bl	8004040 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80041c8:	bf00      	nop
 80041ca:	3710      	adds	r7, #16
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}

080041d0 <xQueueGenericSendFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b08e      	sub	sp, #56	@ 0x38
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	60f8      	str	r0, [r7, #12]
 80041d8:	60b9      	str	r1, [r7, #8]
 80041da:	607a      	str	r2, [r7, #4]
 80041dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80041e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d10b      	bne.n	8004200 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80041e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041ec:	f383 8811 	msr	BASEPRI, r3
 80041f0:	f3bf 8f6f 	isb	sy
 80041f4:	f3bf 8f4f 	dsb	sy
 80041f8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80041fa:	bf00      	nop
 80041fc:	bf00      	nop
 80041fe:	e7fd      	b.n	80041fc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d103      	bne.n	800420e <xQueueGenericSendFromISR+0x3e>
 8004206:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800420a:	2b00      	cmp	r3, #0
 800420c:	d101      	bne.n	8004212 <xQueueGenericSendFromISR+0x42>
 800420e:	2301      	movs	r3, #1
 8004210:	e000      	b.n	8004214 <xQueueGenericSendFromISR+0x44>
 8004212:	2300      	movs	r3, #0
 8004214:	2b00      	cmp	r3, #0
 8004216:	d10b      	bne.n	8004230 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8004218:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800421c:	f383 8811 	msr	BASEPRI, r3
 8004220:	f3bf 8f6f 	isb	sy
 8004224:	f3bf 8f4f 	dsb	sy
 8004228:	623b      	str	r3, [r7, #32]
}
 800422a:	bf00      	nop
 800422c:	bf00      	nop
 800422e:	e7fd      	b.n	800422c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	2b02      	cmp	r3, #2
 8004234:	d103      	bne.n	800423e <xQueueGenericSendFromISR+0x6e>
 8004236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004238:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800423a:	2b01      	cmp	r3, #1
 800423c:	d101      	bne.n	8004242 <xQueueGenericSendFromISR+0x72>
 800423e:	2301      	movs	r3, #1
 8004240:	e000      	b.n	8004244 <xQueueGenericSendFromISR+0x74>
 8004242:	2300      	movs	r3, #0
 8004244:	2b00      	cmp	r3, #0
 8004246:	d10b      	bne.n	8004260 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8004248:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800424c:	f383 8811 	msr	BASEPRI, r3
 8004250:	f3bf 8f6f 	isb	sy
 8004254:	f3bf 8f4f 	dsb	sy
 8004258:	61fb      	str	r3, [r7, #28]
}
 800425a:	bf00      	nop
 800425c:	bf00      	nop
 800425e:	e7fd      	b.n	800425c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004260:	f001 f9da 	bl	8005618 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004264:	f3ef 8211 	mrs	r2, BASEPRI
 8004268:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800426c:	f383 8811 	msr	BASEPRI, r3
 8004270:	f3bf 8f6f 	isb	sy
 8004274:	f3bf 8f4f 	dsb	sy
 8004278:	61ba      	str	r2, [r7, #24]
 800427a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800427c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800427e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004280:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004282:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004284:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004286:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004288:	429a      	cmp	r2, r3
 800428a:	d302      	bcc.n	8004292 <xQueueGenericSendFromISR+0xc2>
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	2b02      	cmp	r3, #2
 8004290:	d12c      	bne.n	80042ec <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004292:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004294:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004298:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800429c:	683a      	ldr	r2, [r7, #0]
 800429e:	68b9      	ldr	r1, [r7, #8]
 80042a0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80042a2:	f000 f8d1 	bl	8004448 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80042a6:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 80042aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042ae:	d112      	bne.n	80042d6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80042b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d016      	beq.n	80042e6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80042b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042ba:	3324      	adds	r3, #36	@ 0x24
 80042bc:	4618      	mov	r0, r3
 80042be:	f000 fd69 	bl	8004d94 <xTaskRemoveFromEventList>
 80042c2:	4603      	mov	r3, r0
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d00e      	beq.n	80042e6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d00b      	beq.n	80042e6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2201      	movs	r2, #1
 80042d2:	601a      	str	r2, [r3, #0]
 80042d4:	e007      	b.n	80042e6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80042d6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80042da:	3301      	adds	r3, #1
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	b25a      	sxtb	r2, r3
 80042e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042e2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80042e6:	2301      	movs	r3, #1
 80042e8:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 80042ea:	e001      	b.n	80042f0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80042ec:	2300      	movs	r3, #0
 80042ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80042f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042f2:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80042fa:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80042fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3738      	adds	r7, #56	@ 0x38
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}

08004306 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004306:	b580      	push	{r7, lr}
 8004308:	b08e      	sub	sp, #56	@ 0x38
 800430a:	af00      	add	r7, sp, #0
 800430c:	60f8      	str	r0, [r7, #12]
 800430e:	60b9      	str	r1, [r7, #8]
 8004310:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004316:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004318:	2b00      	cmp	r3, #0
 800431a:	d10b      	bne.n	8004334 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800431c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004320:	f383 8811 	msr	BASEPRI, r3
 8004324:	f3bf 8f6f 	isb	sy
 8004328:	f3bf 8f4f 	dsb	sy
 800432c:	623b      	str	r3, [r7, #32]
}
 800432e:	bf00      	nop
 8004330:	bf00      	nop
 8004332:	e7fd      	b.n	8004330 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d103      	bne.n	8004342 <xQueueReceiveFromISR+0x3c>
 800433a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800433c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800433e:	2b00      	cmp	r3, #0
 8004340:	d101      	bne.n	8004346 <xQueueReceiveFromISR+0x40>
 8004342:	2301      	movs	r3, #1
 8004344:	e000      	b.n	8004348 <xQueueReceiveFromISR+0x42>
 8004346:	2300      	movs	r3, #0
 8004348:	2b00      	cmp	r3, #0
 800434a:	d10b      	bne.n	8004364 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800434c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004350:	f383 8811 	msr	BASEPRI, r3
 8004354:	f3bf 8f6f 	isb	sy
 8004358:	f3bf 8f4f 	dsb	sy
 800435c:	61fb      	str	r3, [r7, #28]
}
 800435e:	bf00      	nop
 8004360:	bf00      	nop
 8004362:	e7fd      	b.n	8004360 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004364:	f001 f958 	bl	8005618 <vPortValidateInterruptPriority>
	__asm volatile
 8004368:	f3ef 8211 	mrs	r2, BASEPRI
 800436c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004370:	f383 8811 	msr	BASEPRI, r3
 8004374:	f3bf 8f6f 	isb	sy
 8004378:	f3bf 8f4f 	dsb	sy
 800437c:	61ba      	str	r2, [r7, #24]
 800437e:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8004380:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004382:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004384:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004386:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004388:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800438a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800438c:	2b00      	cmp	r3, #0
 800438e:	d02f      	beq.n	80043f0 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8004390:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004392:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004396:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800439a:	68b9      	ldr	r1, [r7, #8]
 800439c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800439e:	f000 f8bd 	bl	800451c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80043a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043a4:	1e5a      	subs	r2, r3, #1
 80043a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043a8:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80043aa:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80043ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043b2:	d112      	bne.n	80043da <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80043b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043b6:	691b      	ldr	r3, [r3, #16]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d016      	beq.n	80043ea <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80043bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043be:	3310      	adds	r3, #16
 80043c0:	4618      	mov	r0, r3
 80043c2:	f000 fce7 	bl	8004d94 <xTaskRemoveFromEventList>
 80043c6:	4603      	mov	r3, r0
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d00e      	beq.n	80043ea <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d00b      	beq.n	80043ea <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2201      	movs	r2, #1
 80043d6:	601a      	str	r2, [r3, #0]
 80043d8:	e007      	b.n	80043ea <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80043da:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80043de:	3301      	adds	r3, #1
 80043e0:	b2db      	uxtb	r3, r3
 80043e2:	b25a      	sxtb	r2, r3
 80043e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043e6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 80043ea:	2301      	movs	r3, #1
 80043ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80043ee:	e001      	b.n	80043f4 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 80043f0:	2300      	movs	r3, #0
 80043f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80043f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043f6:	613b      	str	r3, [r7, #16]
	__asm volatile
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	f383 8811 	msr	BASEPRI, r3
}
 80043fe:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004400:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8004402:	4618      	mov	r0, r3
 8004404:	3738      	adds	r7, #56	@ 0x38
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}

0800440a <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800440a:	b580      	push	{r7, lr}
 800440c:	b084      	sub	sp, #16
 800440e:	af00      	add	r7, sp, #0
 8004410:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d10b      	bne.n	8004430 <uxQueueMessagesWaiting+0x26>
	__asm volatile
 8004418:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800441c:	f383 8811 	msr	BASEPRI, r3
 8004420:	f3bf 8f6f 	isb	sy
 8004424:	f3bf 8f4f 	dsb	sy
 8004428:	60bb      	str	r3, [r7, #8]
}
 800442a:	bf00      	nop
 800442c:	bf00      	nop
 800442e:	e7fd      	b.n	800442c <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8004430:	f001 f812 	bl	8005458 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004438:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800443a:	f001 f83f 	bl	80054bc <vPortExitCritical>

	return uxReturn;
 800443e:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8004440:	4618      	mov	r0, r3
 8004442:	3710      	adds	r7, #16
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}

08004448 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b086      	sub	sp, #24
 800444c:	af00      	add	r7, sp, #0
 800444e:	60f8      	str	r0, [r7, #12]
 8004450:	60b9      	str	r1, [r7, #8]
 8004452:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004454:	2300      	movs	r3, #0
 8004456:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800445c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004462:	2b00      	cmp	r3, #0
 8004464:	d10d      	bne.n	8004482 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d14d      	bne.n	800450a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	4618      	mov	r0, r3
 8004474:	f000 fdce 	bl	8005014 <xTaskPriorityDisinherit>
 8004478:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2200      	movs	r2, #0
 800447e:	605a      	str	r2, [r3, #4]
 8004480:	e043      	b.n	800450a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d119      	bne.n	80044bc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	6898      	ldr	r0, [r3, #8]
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004490:	461a      	mov	r2, r3
 8004492:	68b9      	ldr	r1, [r7, #8]
 8004494:	f001 fb0e 	bl	8005ab4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	689a      	ldr	r2, [r3, #8]
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044a0:	441a      	add	r2, r3
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	689a      	ldr	r2, [r3, #8]
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	429a      	cmp	r2, r3
 80044b0:	d32b      	bcc.n	800450a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	609a      	str	r2, [r3, #8]
 80044ba:	e026      	b.n	800450a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	68d8      	ldr	r0, [r3, #12]
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044c4:	461a      	mov	r2, r3
 80044c6:	68b9      	ldr	r1, [r7, #8]
 80044c8:	f001 faf4 	bl	8005ab4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	68da      	ldr	r2, [r3, #12]
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044d4:	425b      	negs	r3, r3
 80044d6:	441a      	add	r2, r3
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	68da      	ldr	r2, [r3, #12]
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	429a      	cmp	r2, r3
 80044e6:	d207      	bcs.n	80044f8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	685a      	ldr	r2, [r3, #4]
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044f0:	425b      	negs	r3, r3
 80044f2:	441a      	add	r2, r3
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2b02      	cmp	r3, #2
 80044fc:	d105      	bne.n	800450a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d002      	beq.n	800450a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	3b01      	subs	r3, #1
 8004508:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	1c5a      	adds	r2, r3, #1
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004512:	697b      	ldr	r3, [r7, #20]
}
 8004514:	4618      	mov	r0, r3
 8004516:	3718      	adds	r7, #24
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}

0800451c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b082      	sub	sp, #8
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
 8004524:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800452a:	2b00      	cmp	r3, #0
 800452c:	d018      	beq.n	8004560 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	68da      	ldr	r2, [r3, #12]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004536:	441a      	add	r2, r3
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	68da      	ldr	r2, [r3, #12]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	429a      	cmp	r2, r3
 8004546:	d303      	bcc.n	8004550 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	68d9      	ldr	r1, [r3, #12]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004558:	461a      	mov	r2, r3
 800455a:	6838      	ldr	r0, [r7, #0]
 800455c:	f001 faaa 	bl	8005ab4 <memcpy>
	}
}
 8004560:	bf00      	nop
 8004562:	3708      	adds	r7, #8
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}

08004568 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004568:	b480      	push	{r7}
 800456a:	b085      	sub	sp, #20
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
 8004570:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004572:	2300      	movs	r3, #0
 8004574:	60fb      	str	r3, [r7, #12]
 8004576:	e014      	b.n	80045a2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004578:	4a0f      	ldr	r2, [pc, #60]	@ (80045b8 <vQueueAddToRegistry+0x50>)
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d10b      	bne.n	800459c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004584:	490c      	ldr	r1, [pc, #48]	@ (80045b8 <vQueueAddToRegistry+0x50>)
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	683a      	ldr	r2, [r7, #0]
 800458a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800458e:	4a0a      	ldr	r2, [pc, #40]	@ (80045b8 <vQueueAddToRegistry+0x50>)
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	00db      	lsls	r3, r3, #3
 8004594:	4413      	add	r3, r2
 8004596:	687a      	ldr	r2, [r7, #4]
 8004598:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800459a:	e006      	b.n	80045aa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	3301      	adds	r3, #1
 80045a0:	60fb      	str	r3, [r7, #12]
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2b07      	cmp	r3, #7
 80045a6:	d9e7      	bls.n	8004578 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80045a8:	bf00      	nop
 80045aa:	bf00      	nop
 80045ac:	3714      	adds	r7, #20
 80045ae:	46bd      	mov	sp, r7
 80045b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b4:	4770      	bx	lr
 80045b6:	bf00      	nop
 80045b8:	200003d0 	.word	0x200003d0

080045bc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b08e      	sub	sp, #56	@ 0x38
 80045c0:	af04      	add	r7, sp, #16
 80045c2:	60f8      	str	r0, [r7, #12]
 80045c4:	60b9      	str	r1, [r7, #8]
 80045c6:	607a      	str	r2, [r7, #4]
 80045c8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80045ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d10b      	bne.n	80045e8 <xTaskCreateStatic+0x2c>
	__asm volatile
 80045d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045d4:	f383 8811 	msr	BASEPRI, r3
 80045d8:	f3bf 8f6f 	isb	sy
 80045dc:	f3bf 8f4f 	dsb	sy
 80045e0:	623b      	str	r3, [r7, #32]
}
 80045e2:	bf00      	nop
 80045e4:	bf00      	nop
 80045e6:	e7fd      	b.n	80045e4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80045e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d10b      	bne.n	8004606 <xTaskCreateStatic+0x4a>
	__asm volatile
 80045ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045f2:	f383 8811 	msr	BASEPRI, r3
 80045f6:	f3bf 8f6f 	isb	sy
 80045fa:	f3bf 8f4f 	dsb	sy
 80045fe:	61fb      	str	r3, [r7, #28]
}
 8004600:	bf00      	nop
 8004602:	bf00      	nop
 8004604:	e7fd      	b.n	8004602 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004606:	2354      	movs	r3, #84	@ 0x54
 8004608:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	2b54      	cmp	r3, #84	@ 0x54
 800460e:	d00b      	beq.n	8004628 <xTaskCreateStatic+0x6c>
	__asm volatile
 8004610:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004614:	f383 8811 	msr	BASEPRI, r3
 8004618:	f3bf 8f6f 	isb	sy
 800461c:	f3bf 8f4f 	dsb	sy
 8004620:	61bb      	str	r3, [r7, #24]
}
 8004622:	bf00      	nop
 8004624:	bf00      	nop
 8004626:	e7fd      	b.n	8004624 <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004628:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800462a:	2b00      	cmp	r3, #0
 800462c:	d01e      	beq.n	800466c <xTaskCreateStatic+0xb0>
 800462e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004630:	2b00      	cmp	r3, #0
 8004632:	d01b      	beq.n	800466c <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004634:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004636:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800463a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800463c:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800463e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004640:	2202      	movs	r2, #2
 8004642:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004646:	2300      	movs	r3, #0
 8004648:	9303      	str	r3, [sp, #12]
 800464a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800464c:	9302      	str	r3, [sp, #8]
 800464e:	f107 0314 	add.w	r3, r7, #20
 8004652:	9301      	str	r3, [sp, #4]
 8004654:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004656:	9300      	str	r3, [sp, #0]
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	687a      	ldr	r2, [r7, #4]
 800465c:	68b9      	ldr	r1, [r7, #8]
 800465e:	68f8      	ldr	r0, [r7, #12]
 8004660:	f000 f850 	bl	8004704 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004664:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004666:	f000 f8cd 	bl	8004804 <prvAddNewTaskToReadyList>
 800466a:	e001      	b.n	8004670 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 800466c:	2300      	movs	r3, #0
 800466e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004670:	697b      	ldr	r3, [r7, #20]
	}
 8004672:	4618      	mov	r0, r3
 8004674:	3728      	adds	r7, #40	@ 0x28
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}

0800467a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800467a:	b580      	push	{r7, lr}
 800467c:	b08c      	sub	sp, #48	@ 0x30
 800467e:	af04      	add	r7, sp, #16
 8004680:	60f8      	str	r0, [r7, #12]
 8004682:	60b9      	str	r1, [r7, #8]
 8004684:	603b      	str	r3, [r7, #0]
 8004686:	4613      	mov	r3, r2
 8004688:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800468a:	88fb      	ldrh	r3, [r7, #6]
 800468c:	009b      	lsls	r3, r3, #2
 800468e:	4618      	mov	r0, r3
 8004690:	f001 f804 	bl	800569c <pvPortMalloc>
 8004694:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d00e      	beq.n	80046ba <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800469c:	2054      	movs	r0, #84	@ 0x54
 800469e:	f000 fffd 	bl	800569c <pvPortMalloc>
 80046a2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80046a4:	69fb      	ldr	r3, [r7, #28]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d003      	beq.n	80046b2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80046aa:	69fb      	ldr	r3, [r7, #28]
 80046ac:	697a      	ldr	r2, [r7, #20]
 80046ae:	631a      	str	r2, [r3, #48]	@ 0x30
 80046b0:	e005      	b.n	80046be <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80046b2:	6978      	ldr	r0, [r7, #20]
 80046b4:	f001 f8ba 	bl	800582c <vPortFree>
 80046b8:	e001      	b.n	80046be <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80046ba:	2300      	movs	r3, #0
 80046bc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80046be:	69fb      	ldr	r3, [r7, #28]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d017      	beq.n	80046f4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80046c4:	69fb      	ldr	r3, [r7, #28]
 80046c6:	2200      	movs	r2, #0
 80046c8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80046cc:	88fa      	ldrh	r2, [r7, #6]
 80046ce:	2300      	movs	r3, #0
 80046d0:	9303      	str	r3, [sp, #12]
 80046d2:	69fb      	ldr	r3, [r7, #28]
 80046d4:	9302      	str	r3, [sp, #8]
 80046d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046d8:	9301      	str	r3, [sp, #4]
 80046da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046dc:	9300      	str	r3, [sp, #0]
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	68b9      	ldr	r1, [r7, #8]
 80046e2:	68f8      	ldr	r0, [r7, #12]
 80046e4:	f000 f80e 	bl	8004704 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80046e8:	69f8      	ldr	r0, [r7, #28]
 80046ea:	f000 f88b 	bl	8004804 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80046ee:	2301      	movs	r3, #1
 80046f0:	61bb      	str	r3, [r7, #24]
 80046f2:	e002      	b.n	80046fa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80046f4:	f04f 33ff 	mov.w	r3, #4294967295
 80046f8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80046fa:	69bb      	ldr	r3, [r7, #24]
	}
 80046fc:	4618      	mov	r0, r3
 80046fe:	3720      	adds	r7, #32
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}

08004704 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b088      	sub	sp, #32
 8004708:	af00      	add	r7, sp, #0
 800470a:	60f8      	str	r0, [r7, #12]
 800470c:	60b9      	str	r1, [r7, #8]
 800470e:	607a      	str	r2, [r7, #4]
 8004710:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004712:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004714:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800471c:	3b01      	subs	r3, #1
 800471e:	009b      	lsls	r3, r3, #2
 8004720:	4413      	add	r3, r2
 8004722:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004724:	69bb      	ldr	r3, [r7, #24]
 8004726:	f023 0307 	bic.w	r3, r3, #7
 800472a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800472c:	69bb      	ldr	r3, [r7, #24]
 800472e:	f003 0307 	and.w	r3, r3, #7
 8004732:	2b00      	cmp	r3, #0
 8004734:	d00b      	beq.n	800474e <prvInitialiseNewTask+0x4a>
	__asm volatile
 8004736:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800473a:	f383 8811 	msr	BASEPRI, r3
 800473e:	f3bf 8f6f 	isb	sy
 8004742:	f3bf 8f4f 	dsb	sy
 8004746:	617b      	str	r3, [r7, #20]
}
 8004748:	bf00      	nop
 800474a:	bf00      	nop
 800474c:	e7fd      	b.n	800474a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800474e:	2300      	movs	r3, #0
 8004750:	61fb      	str	r3, [r7, #28]
 8004752:	e012      	b.n	800477a <prvInitialiseNewTask+0x76>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004754:	68ba      	ldr	r2, [r7, #8]
 8004756:	69fb      	ldr	r3, [r7, #28]
 8004758:	4413      	add	r3, r2
 800475a:	7819      	ldrb	r1, [r3, #0]
 800475c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800475e:	69fb      	ldr	r3, [r7, #28]
 8004760:	4413      	add	r3, r2
 8004762:	3334      	adds	r3, #52	@ 0x34
 8004764:	460a      	mov	r2, r1
 8004766:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004768:	68ba      	ldr	r2, [r7, #8]
 800476a:	69fb      	ldr	r3, [r7, #28]
 800476c:	4413      	add	r3, r2
 800476e:	781b      	ldrb	r3, [r3, #0]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d006      	beq.n	8004782 <prvInitialiseNewTask+0x7e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004774:	69fb      	ldr	r3, [r7, #28]
 8004776:	3301      	adds	r3, #1
 8004778:	61fb      	str	r3, [r7, #28]
 800477a:	69fb      	ldr	r3, [r7, #28]
 800477c:	2b0f      	cmp	r3, #15
 800477e:	d9e9      	bls.n	8004754 <prvInitialiseNewTask+0x50>
 8004780:	e000      	b.n	8004784 <prvInitialiseNewTask+0x80>
		{
			break;
 8004782:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004784:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004786:	2200      	movs	r2, #0
 8004788:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800478c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800478e:	2b06      	cmp	r3, #6
 8004790:	d901      	bls.n	8004796 <prvInitialiseNewTask+0x92>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004792:	2306      	movs	r3, #6
 8004794:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004796:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004798:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800479a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800479c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800479e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80047a0:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80047a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047a4:	2200      	movs	r2, #0
 80047a6:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80047a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047aa:	3304      	adds	r3, #4
 80047ac:	4618      	mov	r0, r3
 80047ae:	f7ff fbb3 	bl	8003f18 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80047b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047b4:	3318      	adds	r3, #24
 80047b6:	4618      	mov	r0, r3
 80047b8:	f7ff fbae 	bl	8003f18 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80047bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80047c0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80047c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047c4:	f1c3 0207 	rsb	r2, r3, #7
 80047c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047ca:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80047cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80047d0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80047d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047d4:	2200      	movs	r2, #0
 80047d6:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80047d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047da:	2200      	movs	r2, #0
 80047dc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80047e0:	683a      	ldr	r2, [r7, #0]
 80047e2:	68f9      	ldr	r1, [r7, #12]
 80047e4:	69b8      	ldr	r0, [r7, #24]
 80047e6:	f000 fd03 	bl	80051f0 <pxPortInitialiseStack>
 80047ea:	4602      	mov	r2, r0
 80047ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047ee:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80047f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d002      	beq.n	80047fc <prvInitialiseNewTask+0xf8>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80047f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80047fa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80047fc:	bf00      	nop
 80047fe:	3720      	adds	r7, #32
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}

08004804 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b082      	sub	sp, #8
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800480c:	f000 fe24 	bl	8005458 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004810:	4b2a      	ldr	r3, [pc, #168]	@ (80048bc <prvAddNewTaskToReadyList+0xb8>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	3301      	adds	r3, #1
 8004816:	4a29      	ldr	r2, [pc, #164]	@ (80048bc <prvAddNewTaskToReadyList+0xb8>)
 8004818:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800481a:	4b29      	ldr	r3, [pc, #164]	@ (80048c0 <prvAddNewTaskToReadyList+0xbc>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d109      	bne.n	8004836 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004822:	4a27      	ldr	r2, [pc, #156]	@ (80048c0 <prvAddNewTaskToReadyList+0xbc>)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004828:	4b24      	ldr	r3, [pc, #144]	@ (80048bc <prvAddNewTaskToReadyList+0xb8>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	2b01      	cmp	r3, #1
 800482e:	d110      	bne.n	8004852 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004830:	f000 fb2c 	bl	8004e8c <prvInitialiseTaskLists>
 8004834:	e00d      	b.n	8004852 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004836:	4b23      	ldr	r3, [pc, #140]	@ (80048c4 <prvAddNewTaskToReadyList+0xc0>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d109      	bne.n	8004852 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800483e:	4b20      	ldr	r3, [pc, #128]	@ (80048c0 <prvAddNewTaskToReadyList+0xbc>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004848:	429a      	cmp	r2, r3
 800484a:	d802      	bhi.n	8004852 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800484c:	4a1c      	ldr	r2, [pc, #112]	@ (80048c0 <prvAddNewTaskToReadyList+0xbc>)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004852:	4b1d      	ldr	r3, [pc, #116]	@ (80048c8 <prvAddNewTaskToReadyList+0xc4>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	3301      	adds	r3, #1
 8004858:	4a1b      	ldr	r2, [pc, #108]	@ (80048c8 <prvAddNewTaskToReadyList+0xc4>)
 800485a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004860:	2201      	movs	r2, #1
 8004862:	409a      	lsls	r2, r3
 8004864:	4b19      	ldr	r3, [pc, #100]	@ (80048cc <prvAddNewTaskToReadyList+0xc8>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4313      	orrs	r3, r2
 800486a:	4a18      	ldr	r2, [pc, #96]	@ (80048cc <prvAddNewTaskToReadyList+0xc8>)
 800486c:	6013      	str	r3, [r2, #0]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004872:	4613      	mov	r3, r2
 8004874:	009b      	lsls	r3, r3, #2
 8004876:	4413      	add	r3, r2
 8004878:	009b      	lsls	r3, r3, #2
 800487a:	4a15      	ldr	r2, [pc, #84]	@ (80048d0 <prvAddNewTaskToReadyList+0xcc>)
 800487c:	441a      	add	r2, r3
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	3304      	adds	r3, #4
 8004882:	4619      	mov	r1, r3
 8004884:	4610      	mov	r0, r2
 8004886:	f7ff fb54 	bl	8003f32 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800488a:	f000 fe17 	bl	80054bc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800488e:	4b0d      	ldr	r3, [pc, #52]	@ (80048c4 <prvAddNewTaskToReadyList+0xc0>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d00e      	beq.n	80048b4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004896:	4b0a      	ldr	r3, [pc, #40]	@ (80048c0 <prvAddNewTaskToReadyList+0xbc>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d207      	bcs.n	80048b4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80048a4:	4b0b      	ldr	r3, [pc, #44]	@ (80048d4 <prvAddNewTaskToReadyList+0xd0>)
 80048a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80048aa:	601a      	str	r2, [r3, #0]
 80048ac:	f3bf 8f4f 	dsb	sy
 80048b0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80048b4:	bf00      	nop
 80048b6:	3708      	adds	r7, #8
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd80      	pop	{r7, pc}
 80048bc:	20000510 	.word	0x20000510
 80048c0:	20000410 	.word	0x20000410
 80048c4:	2000051c 	.word	0x2000051c
 80048c8:	2000052c 	.word	0x2000052c
 80048cc:	20000518 	.word	0x20000518
 80048d0:	20000414 	.word	0x20000414
 80048d4:	e000ed04 	.word	0xe000ed04

080048d8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b084      	sub	sp, #16
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80048e0:	2300      	movs	r3, #0
 80048e2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d018      	beq.n	800491c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80048ea:	4b14      	ldr	r3, [pc, #80]	@ (800493c <vTaskDelay+0x64>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d00b      	beq.n	800490a <vTaskDelay+0x32>
	__asm volatile
 80048f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048f6:	f383 8811 	msr	BASEPRI, r3
 80048fa:	f3bf 8f6f 	isb	sy
 80048fe:	f3bf 8f4f 	dsb	sy
 8004902:	60bb      	str	r3, [r7, #8]
}
 8004904:	bf00      	nop
 8004906:	bf00      	nop
 8004908:	e7fd      	b.n	8004906 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800490a:	f000 f87d 	bl	8004a08 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800490e:	2100      	movs	r1, #0
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	f000 fc07 	bl	8005124 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004916:	f000 f885 	bl	8004a24 <xTaskResumeAll>
 800491a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d107      	bne.n	8004932 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004922:	4b07      	ldr	r3, [pc, #28]	@ (8004940 <vTaskDelay+0x68>)
 8004924:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004928:	601a      	str	r2, [r3, #0]
 800492a:	f3bf 8f4f 	dsb	sy
 800492e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004932:	bf00      	nop
 8004934:	3710      	adds	r7, #16
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}
 800493a:	bf00      	nop
 800493c:	20000538 	.word	0x20000538
 8004940:	e000ed04 	.word	0xe000ed04

08004944 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b08a      	sub	sp, #40	@ 0x28
 8004948:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800494a:	2300      	movs	r3, #0
 800494c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800494e:	2300      	movs	r3, #0
 8004950:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004952:	463a      	mov	r2, r7
 8004954:	1d39      	adds	r1, r7, #4
 8004956:	f107 0308 	add.w	r3, r7, #8
 800495a:	4618      	mov	r0, r3
 800495c:	f7fb fd12 	bl	8000384 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004960:	6839      	ldr	r1, [r7, #0]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	68ba      	ldr	r2, [r7, #8]
 8004966:	9202      	str	r2, [sp, #8]
 8004968:	9301      	str	r3, [sp, #4]
 800496a:	2300      	movs	r3, #0
 800496c:	9300      	str	r3, [sp, #0]
 800496e:	2300      	movs	r3, #0
 8004970:	460a      	mov	r2, r1
 8004972:	491f      	ldr	r1, [pc, #124]	@ (80049f0 <vTaskStartScheduler+0xac>)
 8004974:	481f      	ldr	r0, [pc, #124]	@ (80049f4 <vTaskStartScheduler+0xb0>)
 8004976:	f7ff fe21 	bl	80045bc <xTaskCreateStatic>
 800497a:	4603      	mov	r3, r0
 800497c:	4a1e      	ldr	r2, [pc, #120]	@ (80049f8 <vTaskStartScheduler+0xb4>)
 800497e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004980:	4b1d      	ldr	r3, [pc, #116]	@ (80049f8 <vTaskStartScheduler+0xb4>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d002      	beq.n	800498e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004988:	2301      	movs	r3, #1
 800498a:	617b      	str	r3, [r7, #20]
 800498c:	e001      	b.n	8004992 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800498e:	2300      	movs	r3, #0
 8004990:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	2b01      	cmp	r3, #1
 8004996:	d116      	bne.n	80049c6 <vTaskStartScheduler+0x82>
	__asm volatile
 8004998:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800499c:	f383 8811 	msr	BASEPRI, r3
 80049a0:	f3bf 8f6f 	isb	sy
 80049a4:	f3bf 8f4f 	dsb	sy
 80049a8:	613b      	str	r3, [r7, #16]
}
 80049aa:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80049ac:	4b13      	ldr	r3, [pc, #76]	@ (80049fc <vTaskStartScheduler+0xb8>)
 80049ae:	f04f 32ff 	mov.w	r2, #4294967295
 80049b2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80049b4:	4b12      	ldr	r3, [pc, #72]	@ (8004a00 <vTaskStartScheduler+0xbc>)
 80049b6:	2201      	movs	r2, #1
 80049b8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80049ba:	4b12      	ldr	r3, [pc, #72]	@ (8004a04 <vTaskStartScheduler+0xc0>)
 80049bc:	2200      	movs	r2, #0
 80049be:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80049c0:	f000 fca6 	bl	8005310 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80049c4:	e00f      	b.n	80049e6 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049cc:	d10b      	bne.n	80049e6 <vTaskStartScheduler+0xa2>
	__asm volatile
 80049ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049d2:	f383 8811 	msr	BASEPRI, r3
 80049d6:	f3bf 8f6f 	isb	sy
 80049da:	f3bf 8f4f 	dsb	sy
 80049de:	60fb      	str	r3, [r7, #12]
}
 80049e0:	bf00      	nop
 80049e2:	bf00      	nop
 80049e4:	e7fd      	b.n	80049e2 <vTaskStartScheduler+0x9e>
}
 80049e6:	bf00      	nop
 80049e8:	3718      	adds	r7, #24
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}
 80049ee:	bf00      	nop
 80049f0:	08005b68 	.word	0x08005b68
 80049f4:	08004e5d 	.word	0x08004e5d
 80049f8:	20000534 	.word	0x20000534
 80049fc:	20000530 	.word	0x20000530
 8004a00:	2000051c 	.word	0x2000051c
 8004a04:	20000514 	.word	0x20000514

08004a08 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004a08:	b480      	push	{r7}
 8004a0a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004a0c:	4b04      	ldr	r3, [pc, #16]	@ (8004a20 <vTaskSuspendAll+0x18>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	3301      	adds	r3, #1
 8004a12:	4a03      	ldr	r2, [pc, #12]	@ (8004a20 <vTaskSuspendAll+0x18>)
 8004a14:	6013      	str	r3, [r2, #0]
}
 8004a16:	bf00      	nop
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1e:	4770      	bx	lr
 8004a20:	20000538 	.word	0x20000538

08004a24 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b084      	sub	sp, #16
 8004a28:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004a32:	4b42      	ldr	r3, [pc, #264]	@ (8004b3c <xTaskResumeAll+0x118>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d10b      	bne.n	8004a52 <xTaskResumeAll+0x2e>
	__asm volatile
 8004a3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a3e:	f383 8811 	msr	BASEPRI, r3
 8004a42:	f3bf 8f6f 	isb	sy
 8004a46:	f3bf 8f4f 	dsb	sy
 8004a4a:	603b      	str	r3, [r7, #0]
}
 8004a4c:	bf00      	nop
 8004a4e:	bf00      	nop
 8004a50:	e7fd      	b.n	8004a4e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004a52:	f000 fd01 	bl	8005458 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004a56:	4b39      	ldr	r3, [pc, #228]	@ (8004b3c <xTaskResumeAll+0x118>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	3b01      	subs	r3, #1
 8004a5c:	4a37      	ldr	r2, [pc, #220]	@ (8004b3c <xTaskResumeAll+0x118>)
 8004a5e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a60:	4b36      	ldr	r3, [pc, #216]	@ (8004b3c <xTaskResumeAll+0x118>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d161      	bne.n	8004b2c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004a68:	4b35      	ldr	r3, [pc, #212]	@ (8004b40 <xTaskResumeAll+0x11c>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d05d      	beq.n	8004b2c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004a70:	e02e      	b.n	8004ad0 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004a72:	4b34      	ldr	r3, [pc, #208]	@ (8004b44 <xTaskResumeAll+0x120>)
 8004a74:	68db      	ldr	r3, [r3, #12]
 8004a76:	68db      	ldr	r3, [r3, #12]
 8004a78:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	3318      	adds	r3, #24
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f7ff fab4 	bl	8003fec <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	3304      	adds	r3, #4
 8004a88:	4618      	mov	r0, r3
 8004a8a:	f7ff faaf 	bl	8003fec <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a92:	2201      	movs	r2, #1
 8004a94:	409a      	lsls	r2, r3
 8004a96:	4b2c      	ldr	r3, [pc, #176]	@ (8004b48 <xTaskResumeAll+0x124>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	4a2a      	ldr	r2, [pc, #168]	@ (8004b48 <xTaskResumeAll+0x124>)
 8004a9e:	6013      	str	r3, [r2, #0]
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004aa4:	4613      	mov	r3, r2
 8004aa6:	009b      	lsls	r3, r3, #2
 8004aa8:	4413      	add	r3, r2
 8004aaa:	009b      	lsls	r3, r3, #2
 8004aac:	4a27      	ldr	r2, [pc, #156]	@ (8004b4c <xTaskResumeAll+0x128>)
 8004aae:	441a      	add	r2, r3
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	3304      	adds	r3, #4
 8004ab4:	4619      	mov	r1, r3
 8004ab6:	4610      	mov	r0, r2
 8004ab8:	f7ff fa3b 	bl	8003f32 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ac0:	4b23      	ldr	r3, [pc, #140]	@ (8004b50 <xTaskResumeAll+0x12c>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ac6:	429a      	cmp	r2, r3
 8004ac8:	d302      	bcc.n	8004ad0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004aca:	4b22      	ldr	r3, [pc, #136]	@ (8004b54 <xTaskResumeAll+0x130>)
 8004acc:	2201      	movs	r2, #1
 8004ace:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004ad0:	4b1c      	ldr	r3, [pc, #112]	@ (8004b44 <xTaskResumeAll+0x120>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d1cc      	bne.n	8004a72 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d001      	beq.n	8004ae2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004ade:	f000 fa73 	bl	8004fc8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004ae2:	4b1d      	ldr	r3, [pc, #116]	@ (8004b58 <xTaskResumeAll+0x134>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d010      	beq.n	8004b10 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004aee:	f000 f837 	bl	8004b60 <xTaskIncrementTick>
 8004af2:	4603      	mov	r3, r0
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d002      	beq.n	8004afe <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004af8:	4b16      	ldr	r3, [pc, #88]	@ (8004b54 <xTaskResumeAll+0x130>)
 8004afa:	2201      	movs	r2, #1
 8004afc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	3b01      	subs	r3, #1
 8004b02:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d1f1      	bne.n	8004aee <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8004b0a:	4b13      	ldr	r3, [pc, #76]	@ (8004b58 <xTaskResumeAll+0x134>)
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004b10:	4b10      	ldr	r3, [pc, #64]	@ (8004b54 <xTaskResumeAll+0x130>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d009      	beq.n	8004b2c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004b1c:	4b0f      	ldr	r3, [pc, #60]	@ (8004b5c <xTaskResumeAll+0x138>)
 8004b1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b22:	601a      	str	r2, [r3, #0]
 8004b24:	f3bf 8f4f 	dsb	sy
 8004b28:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004b2c:	f000 fcc6 	bl	80054bc <vPortExitCritical>

	return xAlreadyYielded;
 8004b30:	68bb      	ldr	r3, [r7, #8]
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3710      	adds	r7, #16
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}
 8004b3a:	bf00      	nop
 8004b3c:	20000538 	.word	0x20000538
 8004b40:	20000510 	.word	0x20000510
 8004b44:	200004d0 	.word	0x200004d0
 8004b48:	20000518 	.word	0x20000518
 8004b4c:	20000414 	.word	0x20000414
 8004b50:	20000410 	.word	0x20000410
 8004b54:	20000524 	.word	0x20000524
 8004b58:	20000520 	.word	0x20000520
 8004b5c:	e000ed04 	.word	0xe000ed04

08004b60 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b086      	sub	sp, #24
 8004b64:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004b66:	2300      	movs	r3, #0
 8004b68:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b6a:	4b51      	ldr	r3, [pc, #324]	@ (8004cb0 <xTaskIncrementTick+0x150>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	f040 808e 	bne.w	8004c90 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004b74:	4b4f      	ldr	r3, [pc, #316]	@ (8004cb4 <xTaskIncrementTick+0x154>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	3301      	adds	r3, #1
 8004b7a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004b7c:	4a4d      	ldr	r2, [pc, #308]	@ (8004cb4 <xTaskIncrementTick+0x154>)
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d121      	bne.n	8004bcc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004b88:	4b4b      	ldr	r3, [pc, #300]	@ (8004cb8 <xTaskIncrementTick+0x158>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d00b      	beq.n	8004baa <xTaskIncrementTick+0x4a>
	__asm volatile
 8004b92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b96:	f383 8811 	msr	BASEPRI, r3
 8004b9a:	f3bf 8f6f 	isb	sy
 8004b9e:	f3bf 8f4f 	dsb	sy
 8004ba2:	603b      	str	r3, [r7, #0]
}
 8004ba4:	bf00      	nop
 8004ba6:	bf00      	nop
 8004ba8:	e7fd      	b.n	8004ba6 <xTaskIncrementTick+0x46>
 8004baa:	4b43      	ldr	r3, [pc, #268]	@ (8004cb8 <xTaskIncrementTick+0x158>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	60fb      	str	r3, [r7, #12]
 8004bb0:	4b42      	ldr	r3, [pc, #264]	@ (8004cbc <xTaskIncrementTick+0x15c>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a40      	ldr	r2, [pc, #256]	@ (8004cb8 <xTaskIncrementTick+0x158>)
 8004bb6:	6013      	str	r3, [r2, #0]
 8004bb8:	4a40      	ldr	r2, [pc, #256]	@ (8004cbc <xTaskIncrementTick+0x15c>)
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	6013      	str	r3, [r2, #0]
 8004bbe:	4b40      	ldr	r3, [pc, #256]	@ (8004cc0 <xTaskIncrementTick+0x160>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	3301      	adds	r3, #1
 8004bc4:	4a3e      	ldr	r2, [pc, #248]	@ (8004cc0 <xTaskIncrementTick+0x160>)
 8004bc6:	6013      	str	r3, [r2, #0]
 8004bc8:	f000 f9fe 	bl	8004fc8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004bcc:	4b3d      	ldr	r3, [pc, #244]	@ (8004cc4 <xTaskIncrementTick+0x164>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	693a      	ldr	r2, [r7, #16]
 8004bd2:	429a      	cmp	r2, r3
 8004bd4:	d34d      	bcc.n	8004c72 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004bd6:	4b38      	ldr	r3, [pc, #224]	@ (8004cb8 <xTaskIncrementTick+0x158>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d101      	bne.n	8004be4 <xTaskIncrementTick+0x84>
 8004be0:	2301      	movs	r3, #1
 8004be2:	e000      	b.n	8004be6 <xTaskIncrementTick+0x86>
 8004be4:	2300      	movs	r3, #0
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d004      	beq.n	8004bf4 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004bea:	4b36      	ldr	r3, [pc, #216]	@ (8004cc4 <xTaskIncrementTick+0x164>)
 8004bec:	f04f 32ff 	mov.w	r2, #4294967295
 8004bf0:	601a      	str	r2, [r3, #0]
					break;
 8004bf2:	e03e      	b.n	8004c72 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004bf4:	4b30      	ldr	r3, [pc, #192]	@ (8004cb8 <xTaskIncrementTick+0x158>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	68db      	ldr	r3, [r3, #12]
 8004bfa:	68db      	ldr	r3, [r3, #12]
 8004bfc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004c04:	693a      	ldr	r2, [r7, #16]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	d203      	bcs.n	8004c14 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004c0c:	4a2d      	ldr	r2, [pc, #180]	@ (8004cc4 <xTaskIncrementTick+0x164>)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6013      	str	r3, [r2, #0]
						break;
 8004c12:	e02e      	b.n	8004c72 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	3304      	adds	r3, #4
 8004c18:	4618      	mov	r0, r3
 8004c1a:	f7ff f9e7 	bl	8003fec <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d004      	beq.n	8004c30 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	3318      	adds	r3, #24
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f7ff f9de 	bl	8003fec <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c34:	2201      	movs	r2, #1
 8004c36:	409a      	lsls	r2, r3
 8004c38:	4b23      	ldr	r3, [pc, #140]	@ (8004cc8 <xTaskIncrementTick+0x168>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	4a22      	ldr	r2, [pc, #136]	@ (8004cc8 <xTaskIncrementTick+0x168>)
 8004c40:	6013      	str	r3, [r2, #0]
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c46:	4613      	mov	r3, r2
 8004c48:	009b      	lsls	r3, r3, #2
 8004c4a:	4413      	add	r3, r2
 8004c4c:	009b      	lsls	r3, r3, #2
 8004c4e:	4a1f      	ldr	r2, [pc, #124]	@ (8004ccc <xTaskIncrementTick+0x16c>)
 8004c50:	441a      	add	r2, r3
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	3304      	adds	r3, #4
 8004c56:	4619      	mov	r1, r3
 8004c58:	4610      	mov	r0, r2
 8004c5a:	f7ff f96a 	bl	8003f32 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c62:	4b1b      	ldr	r3, [pc, #108]	@ (8004cd0 <xTaskIncrementTick+0x170>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c68:	429a      	cmp	r2, r3
 8004c6a:	d3b4      	bcc.n	8004bd6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004c70:	e7b1      	b.n	8004bd6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004c72:	4b17      	ldr	r3, [pc, #92]	@ (8004cd0 <xTaskIncrementTick+0x170>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c78:	4914      	ldr	r1, [pc, #80]	@ (8004ccc <xTaskIncrementTick+0x16c>)
 8004c7a:	4613      	mov	r3, r2
 8004c7c:	009b      	lsls	r3, r3, #2
 8004c7e:	4413      	add	r3, r2
 8004c80:	009b      	lsls	r3, r3, #2
 8004c82:	440b      	add	r3, r1
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	2b01      	cmp	r3, #1
 8004c88:	d907      	bls.n	8004c9a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	617b      	str	r3, [r7, #20]
 8004c8e:	e004      	b.n	8004c9a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004c90:	4b10      	ldr	r3, [pc, #64]	@ (8004cd4 <xTaskIncrementTick+0x174>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	3301      	adds	r3, #1
 8004c96:	4a0f      	ldr	r2, [pc, #60]	@ (8004cd4 <xTaskIncrementTick+0x174>)
 8004c98:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004c9a:	4b0f      	ldr	r3, [pc, #60]	@ (8004cd8 <xTaskIncrementTick+0x178>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d001      	beq.n	8004ca6 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004ca6:	697b      	ldr	r3, [r7, #20]
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	3718      	adds	r7, #24
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}
 8004cb0:	20000538 	.word	0x20000538
 8004cb4:	20000514 	.word	0x20000514
 8004cb8:	200004c8 	.word	0x200004c8
 8004cbc:	200004cc 	.word	0x200004cc
 8004cc0:	20000528 	.word	0x20000528
 8004cc4:	20000530 	.word	0x20000530
 8004cc8:	20000518 	.word	0x20000518
 8004ccc:	20000414 	.word	0x20000414
 8004cd0:	20000410 	.word	0x20000410
 8004cd4:	20000520 	.word	0x20000520
 8004cd8:	20000524 	.word	0x20000524

08004cdc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b087      	sub	sp, #28
 8004ce0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004ce2:	4b27      	ldr	r3, [pc, #156]	@ (8004d80 <vTaskSwitchContext+0xa4>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d003      	beq.n	8004cf2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004cea:	4b26      	ldr	r3, [pc, #152]	@ (8004d84 <vTaskSwitchContext+0xa8>)
 8004cec:	2201      	movs	r2, #1
 8004cee:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004cf0:	e040      	b.n	8004d74 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8004cf2:	4b24      	ldr	r3, [pc, #144]	@ (8004d84 <vTaskSwitchContext+0xa8>)
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004cf8:	4b23      	ldr	r3, [pc, #140]	@ (8004d88 <vTaskSwitchContext+0xac>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	fab3 f383 	clz	r3, r3
 8004d04:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004d06:	7afb      	ldrb	r3, [r7, #11]
 8004d08:	f1c3 031f 	rsb	r3, r3, #31
 8004d0c:	617b      	str	r3, [r7, #20]
 8004d0e:	491f      	ldr	r1, [pc, #124]	@ (8004d8c <vTaskSwitchContext+0xb0>)
 8004d10:	697a      	ldr	r2, [r7, #20]
 8004d12:	4613      	mov	r3, r2
 8004d14:	009b      	lsls	r3, r3, #2
 8004d16:	4413      	add	r3, r2
 8004d18:	009b      	lsls	r3, r3, #2
 8004d1a:	440b      	add	r3, r1
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d10b      	bne.n	8004d3a <vTaskSwitchContext+0x5e>
	__asm volatile
 8004d22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d26:	f383 8811 	msr	BASEPRI, r3
 8004d2a:	f3bf 8f6f 	isb	sy
 8004d2e:	f3bf 8f4f 	dsb	sy
 8004d32:	607b      	str	r3, [r7, #4]
}
 8004d34:	bf00      	nop
 8004d36:	bf00      	nop
 8004d38:	e7fd      	b.n	8004d36 <vTaskSwitchContext+0x5a>
 8004d3a:	697a      	ldr	r2, [r7, #20]
 8004d3c:	4613      	mov	r3, r2
 8004d3e:	009b      	lsls	r3, r3, #2
 8004d40:	4413      	add	r3, r2
 8004d42:	009b      	lsls	r3, r3, #2
 8004d44:	4a11      	ldr	r2, [pc, #68]	@ (8004d8c <vTaskSwitchContext+0xb0>)
 8004d46:	4413      	add	r3, r2
 8004d48:	613b      	str	r3, [r7, #16]
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	685a      	ldr	r2, [r3, #4]
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	605a      	str	r2, [r3, #4]
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	685a      	ldr	r2, [r3, #4]
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	3308      	adds	r3, #8
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	d104      	bne.n	8004d6a <vTaskSwitchContext+0x8e>
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	685a      	ldr	r2, [r3, #4]
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	605a      	str	r2, [r3, #4]
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	68db      	ldr	r3, [r3, #12]
 8004d70:	4a07      	ldr	r2, [pc, #28]	@ (8004d90 <vTaskSwitchContext+0xb4>)
 8004d72:	6013      	str	r3, [r2, #0]
}
 8004d74:	bf00      	nop
 8004d76:	371c      	adds	r7, #28
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7e:	4770      	bx	lr
 8004d80:	20000538 	.word	0x20000538
 8004d84:	20000524 	.word	0x20000524
 8004d88:	20000518 	.word	0x20000518
 8004d8c:	20000414 	.word	0x20000414
 8004d90:	20000410 	.word	0x20000410

08004d94 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b086      	sub	sp, #24
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	68db      	ldr	r3, [r3, #12]
 8004da0:	68db      	ldr	r3, [r3, #12]
 8004da2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d10b      	bne.n	8004dc2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8004daa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dae:	f383 8811 	msr	BASEPRI, r3
 8004db2:	f3bf 8f6f 	isb	sy
 8004db6:	f3bf 8f4f 	dsb	sy
 8004dba:	60fb      	str	r3, [r7, #12]
}
 8004dbc:	bf00      	nop
 8004dbe:	bf00      	nop
 8004dc0:	e7fd      	b.n	8004dbe <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	3318      	adds	r3, #24
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f7ff f910 	bl	8003fec <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004dcc:	4b1d      	ldr	r3, [pc, #116]	@ (8004e44 <xTaskRemoveFromEventList+0xb0>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d11c      	bne.n	8004e0e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	3304      	adds	r3, #4
 8004dd8:	4618      	mov	r0, r3
 8004dda:	f7ff f907 	bl	8003fec <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004de2:	2201      	movs	r2, #1
 8004de4:	409a      	lsls	r2, r3
 8004de6:	4b18      	ldr	r3, [pc, #96]	@ (8004e48 <xTaskRemoveFromEventList+0xb4>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4313      	orrs	r3, r2
 8004dec:	4a16      	ldr	r2, [pc, #88]	@ (8004e48 <xTaskRemoveFromEventList+0xb4>)
 8004dee:	6013      	str	r3, [r2, #0]
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004df4:	4613      	mov	r3, r2
 8004df6:	009b      	lsls	r3, r3, #2
 8004df8:	4413      	add	r3, r2
 8004dfa:	009b      	lsls	r3, r3, #2
 8004dfc:	4a13      	ldr	r2, [pc, #76]	@ (8004e4c <xTaskRemoveFromEventList+0xb8>)
 8004dfe:	441a      	add	r2, r3
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	3304      	adds	r3, #4
 8004e04:	4619      	mov	r1, r3
 8004e06:	4610      	mov	r0, r2
 8004e08:	f7ff f893 	bl	8003f32 <vListInsertEnd>
 8004e0c:	e005      	b.n	8004e1a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	3318      	adds	r3, #24
 8004e12:	4619      	mov	r1, r3
 8004e14:	480e      	ldr	r0, [pc, #56]	@ (8004e50 <xTaskRemoveFromEventList+0xbc>)
 8004e16:	f7ff f88c 	bl	8003f32 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e1e:	4b0d      	ldr	r3, [pc, #52]	@ (8004e54 <xTaskRemoveFromEventList+0xc0>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e24:	429a      	cmp	r2, r3
 8004e26:	d905      	bls.n	8004e34 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004e2c:	4b0a      	ldr	r3, [pc, #40]	@ (8004e58 <xTaskRemoveFromEventList+0xc4>)
 8004e2e:	2201      	movs	r2, #1
 8004e30:	601a      	str	r2, [r3, #0]
 8004e32:	e001      	b.n	8004e38 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004e34:	2300      	movs	r3, #0
 8004e36:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8004e38:	697b      	ldr	r3, [r7, #20]
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	3718      	adds	r7, #24
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd80      	pop	{r7, pc}
 8004e42:	bf00      	nop
 8004e44:	20000538 	.word	0x20000538
 8004e48:	20000518 	.word	0x20000518
 8004e4c:	20000414 	.word	0x20000414
 8004e50:	200004d0 	.word	0x200004d0
 8004e54:	20000410 	.word	0x20000410
 8004e58:	20000524 	.word	0x20000524

08004e5c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b082      	sub	sp, #8
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004e64:	f000 f852 	bl	8004f0c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004e68:	4b06      	ldr	r3, [pc, #24]	@ (8004e84 <prvIdleTask+0x28>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	2b01      	cmp	r3, #1
 8004e6e:	d9f9      	bls.n	8004e64 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004e70:	4b05      	ldr	r3, [pc, #20]	@ (8004e88 <prvIdleTask+0x2c>)
 8004e72:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e76:	601a      	str	r2, [r3, #0]
 8004e78:	f3bf 8f4f 	dsb	sy
 8004e7c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004e80:	e7f0      	b.n	8004e64 <prvIdleTask+0x8>
 8004e82:	bf00      	nop
 8004e84:	20000414 	.word	0x20000414
 8004e88:	e000ed04 	.word	0xe000ed04

08004e8c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b082      	sub	sp, #8
 8004e90:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004e92:	2300      	movs	r3, #0
 8004e94:	607b      	str	r3, [r7, #4]
 8004e96:	e00c      	b.n	8004eb2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004e98:	687a      	ldr	r2, [r7, #4]
 8004e9a:	4613      	mov	r3, r2
 8004e9c:	009b      	lsls	r3, r3, #2
 8004e9e:	4413      	add	r3, r2
 8004ea0:	009b      	lsls	r3, r3, #2
 8004ea2:	4a12      	ldr	r2, [pc, #72]	@ (8004eec <prvInitialiseTaskLists+0x60>)
 8004ea4:	4413      	add	r3, r2
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f7ff f816 	bl	8003ed8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	3301      	adds	r3, #1
 8004eb0:	607b      	str	r3, [r7, #4]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2b06      	cmp	r3, #6
 8004eb6:	d9ef      	bls.n	8004e98 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004eb8:	480d      	ldr	r0, [pc, #52]	@ (8004ef0 <prvInitialiseTaskLists+0x64>)
 8004eba:	f7ff f80d 	bl	8003ed8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004ebe:	480d      	ldr	r0, [pc, #52]	@ (8004ef4 <prvInitialiseTaskLists+0x68>)
 8004ec0:	f7ff f80a 	bl	8003ed8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004ec4:	480c      	ldr	r0, [pc, #48]	@ (8004ef8 <prvInitialiseTaskLists+0x6c>)
 8004ec6:	f7ff f807 	bl	8003ed8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004eca:	480c      	ldr	r0, [pc, #48]	@ (8004efc <prvInitialiseTaskLists+0x70>)
 8004ecc:	f7ff f804 	bl	8003ed8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004ed0:	480b      	ldr	r0, [pc, #44]	@ (8004f00 <prvInitialiseTaskLists+0x74>)
 8004ed2:	f7ff f801 	bl	8003ed8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004ed6:	4b0b      	ldr	r3, [pc, #44]	@ (8004f04 <prvInitialiseTaskLists+0x78>)
 8004ed8:	4a05      	ldr	r2, [pc, #20]	@ (8004ef0 <prvInitialiseTaskLists+0x64>)
 8004eda:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004edc:	4b0a      	ldr	r3, [pc, #40]	@ (8004f08 <prvInitialiseTaskLists+0x7c>)
 8004ede:	4a05      	ldr	r2, [pc, #20]	@ (8004ef4 <prvInitialiseTaskLists+0x68>)
 8004ee0:	601a      	str	r2, [r3, #0]
}
 8004ee2:	bf00      	nop
 8004ee4:	3708      	adds	r7, #8
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}
 8004eea:	bf00      	nop
 8004eec:	20000414 	.word	0x20000414
 8004ef0:	200004a0 	.word	0x200004a0
 8004ef4:	200004b4 	.word	0x200004b4
 8004ef8:	200004d0 	.word	0x200004d0
 8004efc:	200004e4 	.word	0x200004e4
 8004f00:	200004fc 	.word	0x200004fc
 8004f04:	200004c8 	.word	0x200004c8
 8004f08:	200004cc 	.word	0x200004cc

08004f0c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b082      	sub	sp, #8
 8004f10:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004f12:	e019      	b.n	8004f48 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004f14:	f000 faa0 	bl	8005458 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004f18:	4b10      	ldr	r3, [pc, #64]	@ (8004f5c <prvCheckTasksWaitingTermination+0x50>)
 8004f1a:	68db      	ldr	r3, [r3, #12]
 8004f1c:	68db      	ldr	r3, [r3, #12]
 8004f1e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	3304      	adds	r3, #4
 8004f24:	4618      	mov	r0, r3
 8004f26:	f7ff f861 	bl	8003fec <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004f2a:	4b0d      	ldr	r3, [pc, #52]	@ (8004f60 <prvCheckTasksWaitingTermination+0x54>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	3b01      	subs	r3, #1
 8004f30:	4a0b      	ldr	r2, [pc, #44]	@ (8004f60 <prvCheckTasksWaitingTermination+0x54>)
 8004f32:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004f34:	4b0b      	ldr	r3, [pc, #44]	@ (8004f64 <prvCheckTasksWaitingTermination+0x58>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	3b01      	subs	r3, #1
 8004f3a:	4a0a      	ldr	r2, [pc, #40]	@ (8004f64 <prvCheckTasksWaitingTermination+0x58>)
 8004f3c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004f3e:	f000 fabd 	bl	80054bc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	f000 f810 	bl	8004f68 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004f48:	4b06      	ldr	r3, [pc, #24]	@ (8004f64 <prvCheckTasksWaitingTermination+0x58>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d1e1      	bne.n	8004f14 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004f50:	bf00      	nop
 8004f52:	bf00      	nop
 8004f54:	3708      	adds	r7, #8
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}
 8004f5a:	bf00      	nop
 8004f5c:	200004e4 	.word	0x200004e4
 8004f60:	20000510 	.word	0x20000510
 8004f64:	200004f8 	.word	0x200004f8

08004f68 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b084      	sub	sp, #16
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d108      	bne.n	8004f8c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f000 fc54 	bl	800582c <vPortFree>
				vPortFree( pxTCB );
 8004f84:	6878      	ldr	r0, [r7, #4]
 8004f86:	f000 fc51 	bl	800582c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004f8a:	e019      	b.n	8004fc0 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004f92:	2b01      	cmp	r3, #1
 8004f94:	d103      	bne.n	8004f9e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	f000 fc48 	bl	800582c <vPortFree>
	}
 8004f9c:	e010      	b.n	8004fc0 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004fa4:	2b02      	cmp	r3, #2
 8004fa6:	d00b      	beq.n	8004fc0 <prvDeleteTCB+0x58>
	__asm volatile
 8004fa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fac:	f383 8811 	msr	BASEPRI, r3
 8004fb0:	f3bf 8f6f 	isb	sy
 8004fb4:	f3bf 8f4f 	dsb	sy
 8004fb8:	60fb      	str	r3, [r7, #12]
}
 8004fba:	bf00      	nop
 8004fbc:	bf00      	nop
 8004fbe:	e7fd      	b.n	8004fbc <prvDeleteTCB+0x54>
	}
 8004fc0:	bf00      	nop
 8004fc2:	3710      	adds	r7, #16
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}

08004fc8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b083      	sub	sp, #12
 8004fcc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004fce:	4b0f      	ldr	r3, [pc, #60]	@ (800500c <prvResetNextTaskUnblockTime+0x44>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d101      	bne.n	8004fdc <prvResetNextTaskUnblockTime+0x14>
 8004fd8:	2301      	movs	r3, #1
 8004fda:	e000      	b.n	8004fde <prvResetNextTaskUnblockTime+0x16>
 8004fdc:	2300      	movs	r3, #0
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d004      	beq.n	8004fec <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004fe2:	4b0b      	ldr	r3, [pc, #44]	@ (8005010 <prvResetNextTaskUnblockTime+0x48>)
 8004fe4:	f04f 32ff 	mov.w	r2, #4294967295
 8004fe8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004fea:	e008      	b.n	8004ffe <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004fec:	4b07      	ldr	r3, [pc, #28]	@ (800500c <prvResetNextTaskUnblockTime+0x44>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	68db      	ldr	r3, [r3, #12]
 8004ff2:	68db      	ldr	r3, [r3, #12]
 8004ff4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	4a05      	ldr	r2, [pc, #20]	@ (8005010 <prvResetNextTaskUnblockTime+0x48>)
 8004ffc:	6013      	str	r3, [r2, #0]
}
 8004ffe:	bf00      	nop
 8005000:	370c      	adds	r7, #12
 8005002:	46bd      	mov	sp, r7
 8005004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005008:	4770      	bx	lr
 800500a:	bf00      	nop
 800500c:	200004c8 	.word	0x200004c8
 8005010:	20000530 	.word	0x20000530

08005014 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005014:	b580      	push	{r7, lr}
 8005016:	b086      	sub	sp, #24
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005020:	2300      	movs	r3, #0
 8005022:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d070      	beq.n	800510c <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800502a:	4b3b      	ldr	r3, [pc, #236]	@ (8005118 <xTaskPriorityDisinherit+0x104>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	693a      	ldr	r2, [r7, #16]
 8005030:	429a      	cmp	r2, r3
 8005032:	d00b      	beq.n	800504c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005034:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005038:	f383 8811 	msr	BASEPRI, r3
 800503c:	f3bf 8f6f 	isb	sy
 8005040:	f3bf 8f4f 	dsb	sy
 8005044:	60fb      	str	r3, [r7, #12]
}
 8005046:	bf00      	nop
 8005048:	bf00      	nop
 800504a:	e7fd      	b.n	8005048 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800504c:	693b      	ldr	r3, [r7, #16]
 800504e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005050:	2b00      	cmp	r3, #0
 8005052:	d10b      	bne.n	800506c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005054:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005058:	f383 8811 	msr	BASEPRI, r3
 800505c:	f3bf 8f6f 	isb	sy
 8005060:	f3bf 8f4f 	dsb	sy
 8005064:	60bb      	str	r3, [r7, #8]
}
 8005066:	bf00      	nop
 8005068:	bf00      	nop
 800506a:	e7fd      	b.n	8005068 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800506c:	693b      	ldr	r3, [r7, #16]
 800506e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005070:	1e5a      	subs	r2, r3, #1
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800507e:	429a      	cmp	r2, r3
 8005080:	d044      	beq.n	800510c <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005086:	2b00      	cmp	r3, #0
 8005088:	d140      	bne.n	800510c <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800508a:	693b      	ldr	r3, [r7, #16]
 800508c:	3304      	adds	r3, #4
 800508e:	4618      	mov	r0, r3
 8005090:	f7fe ffac 	bl	8003fec <uxListRemove>
 8005094:	4603      	mov	r3, r0
 8005096:	2b00      	cmp	r3, #0
 8005098:	d115      	bne.n	80050c6 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800509e:	491f      	ldr	r1, [pc, #124]	@ (800511c <xTaskPriorityDisinherit+0x108>)
 80050a0:	4613      	mov	r3, r2
 80050a2:	009b      	lsls	r3, r3, #2
 80050a4:	4413      	add	r3, r2
 80050a6:	009b      	lsls	r3, r3, #2
 80050a8:	440b      	add	r3, r1
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d10a      	bne.n	80050c6 <xTaskPriorityDisinherit+0xb2>
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050b4:	2201      	movs	r2, #1
 80050b6:	fa02 f303 	lsl.w	r3, r2, r3
 80050ba:	43da      	mvns	r2, r3
 80050bc:	4b18      	ldr	r3, [pc, #96]	@ (8005120 <xTaskPriorityDisinherit+0x10c>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4013      	ands	r3, r2
 80050c2:	4a17      	ldr	r2, [pc, #92]	@ (8005120 <xTaskPriorityDisinherit+0x10c>)
 80050c4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80050c6:	693b      	ldr	r3, [r7, #16]
 80050c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050d2:	f1c3 0207 	rsb	r2, r3, #7
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050de:	2201      	movs	r2, #1
 80050e0:	409a      	lsls	r2, r3
 80050e2:	4b0f      	ldr	r3, [pc, #60]	@ (8005120 <xTaskPriorityDisinherit+0x10c>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4313      	orrs	r3, r2
 80050e8:	4a0d      	ldr	r2, [pc, #52]	@ (8005120 <xTaskPriorityDisinherit+0x10c>)
 80050ea:	6013      	str	r3, [r2, #0]
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050f0:	4613      	mov	r3, r2
 80050f2:	009b      	lsls	r3, r3, #2
 80050f4:	4413      	add	r3, r2
 80050f6:	009b      	lsls	r3, r3, #2
 80050f8:	4a08      	ldr	r2, [pc, #32]	@ (800511c <xTaskPriorityDisinherit+0x108>)
 80050fa:	441a      	add	r2, r3
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	3304      	adds	r3, #4
 8005100:	4619      	mov	r1, r3
 8005102:	4610      	mov	r0, r2
 8005104:	f7fe ff15 	bl	8003f32 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005108:	2301      	movs	r3, #1
 800510a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800510c:	697b      	ldr	r3, [r7, #20]
	}
 800510e:	4618      	mov	r0, r3
 8005110:	3718      	adds	r7, #24
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}
 8005116:	bf00      	nop
 8005118:	20000410 	.word	0x20000410
 800511c:	20000414 	.word	0x20000414
 8005120:	20000518 	.word	0x20000518

08005124 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b084      	sub	sp, #16
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
 800512c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800512e:	4b29      	ldr	r3, [pc, #164]	@ (80051d4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005134:	4b28      	ldr	r3, [pc, #160]	@ (80051d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	3304      	adds	r3, #4
 800513a:	4618      	mov	r0, r3
 800513c:	f7fe ff56 	bl	8003fec <uxListRemove>
 8005140:	4603      	mov	r3, r0
 8005142:	2b00      	cmp	r3, #0
 8005144:	d10b      	bne.n	800515e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8005146:	4b24      	ldr	r3, [pc, #144]	@ (80051d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800514c:	2201      	movs	r2, #1
 800514e:	fa02 f303 	lsl.w	r3, r2, r3
 8005152:	43da      	mvns	r2, r3
 8005154:	4b21      	ldr	r3, [pc, #132]	@ (80051dc <prvAddCurrentTaskToDelayedList+0xb8>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4013      	ands	r3, r2
 800515a:	4a20      	ldr	r2, [pc, #128]	@ (80051dc <prvAddCurrentTaskToDelayedList+0xb8>)
 800515c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005164:	d10a      	bne.n	800517c <prvAddCurrentTaskToDelayedList+0x58>
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d007      	beq.n	800517c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800516c:	4b1a      	ldr	r3, [pc, #104]	@ (80051d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	3304      	adds	r3, #4
 8005172:	4619      	mov	r1, r3
 8005174:	481a      	ldr	r0, [pc, #104]	@ (80051e0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005176:	f7fe fedc 	bl	8003f32 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800517a:	e026      	b.n	80051ca <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800517c:	68fa      	ldr	r2, [r7, #12]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	4413      	add	r3, r2
 8005182:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005184:	4b14      	ldr	r3, [pc, #80]	@ (80051d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	68ba      	ldr	r2, [r7, #8]
 800518a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800518c:	68ba      	ldr	r2, [r7, #8]
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	429a      	cmp	r2, r3
 8005192:	d209      	bcs.n	80051a8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005194:	4b13      	ldr	r3, [pc, #76]	@ (80051e4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005196:	681a      	ldr	r2, [r3, #0]
 8005198:	4b0f      	ldr	r3, [pc, #60]	@ (80051d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	3304      	adds	r3, #4
 800519e:	4619      	mov	r1, r3
 80051a0:	4610      	mov	r0, r2
 80051a2:	f7fe feea 	bl	8003f7a <vListInsert>
}
 80051a6:	e010      	b.n	80051ca <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80051a8:	4b0f      	ldr	r3, [pc, #60]	@ (80051e8 <prvAddCurrentTaskToDelayedList+0xc4>)
 80051aa:	681a      	ldr	r2, [r3, #0]
 80051ac:	4b0a      	ldr	r3, [pc, #40]	@ (80051d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	3304      	adds	r3, #4
 80051b2:	4619      	mov	r1, r3
 80051b4:	4610      	mov	r0, r2
 80051b6:	f7fe fee0 	bl	8003f7a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80051ba:	4b0c      	ldr	r3, [pc, #48]	@ (80051ec <prvAddCurrentTaskToDelayedList+0xc8>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	68ba      	ldr	r2, [r7, #8]
 80051c0:	429a      	cmp	r2, r3
 80051c2:	d202      	bcs.n	80051ca <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80051c4:	4a09      	ldr	r2, [pc, #36]	@ (80051ec <prvAddCurrentTaskToDelayedList+0xc8>)
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	6013      	str	r3, [r2, #0]
}
 80051ca:	bf00      	nop
 80051cc:	3710      	adds	r7, #16
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}
 80051d2:	bf00      	nop
 80051d4:	20000514 	.word	0x20000514
 80051d8:	20000410 	.word	0x20000410
 80051dc:	20000518 	.word	0x20000518
 80051e0:	200004fc 	.word	0x200004fc
 80051e4:	200004cc 	.word	0x200004cc
 80051e8:	200004c8 	.word	0x200004c8
 80051ec:	20000530 	.word	0x20000530

080051f0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80051f0:	b480      	push	{r7}
 80051f2:	b085      	sub	sp, #20
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	60f8      	str	r0, [r7, #12]
 80051f8:	60b9      	str	r1, [r7, #8]
 80051fa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	3b04      	subs	r3, #4
 8005200:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005208:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	3b04      	subs	r3, #4
 800520e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	f023 0201 	bic.w	r2, r3, #1
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	3b04      	subs	r3, #4
 800521e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005220:	4a0c      	ldr	r2, [pc, #48]	@ (8005254 <pxPortInitialiseStack+0x64>)
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	3b14      	subs	r3, #20
 800522a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800522c:	687a      	ldr	r2, [r7, #4]
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	3b04      	subs	r3, #4
 8005236:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	f06f 0202 	mvn.w	r2, #2
 800523e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	3b20      	subs	r3, #32
 8005244:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005246:	68fb      	ldr	r3, [r7, #12]
}
 8005248:	4618      	mov	r0, r3
 800524a:	3714      	adds	r7, #20
 800524c:	46bd      	mov	sp, r7
 800524e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005252:	4770      	bx	lr
 8005254:	08005259 	.word	0x08005259

08005258 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005258:	b480      	push	{r7}
 800525a:	b085      	sub	sp, #20
 800525c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800525e:	2300      	movs	r3, #0
 8005260:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005262:	4b13      	ldr	r3, [pc, #76]	@ (80052b0 <prvTaskExitError+0x58>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f1b3 3fff 	cmp.w	r3, #4294967295
 800526a:	d00b      	beq.n	8005284 <prvTaskExitError+0x2c>
	__asm volatile
 800526c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005270:	f383 8811 	msr	BASEPRI, r3
 8005274:	f3bf 8f6f 	isb	sy
 8005278:	f3bf 8f4f 	dsb	sy
 800527c:	60fb      	str	r3, [r7, #12]
}
 800527e:	bf00      	nop
 8005280:	bf00      	nop
 8005282:	e7fd      	b.n	8005280 <prvTaskExitError+0x28>
	__asm volatile
 8005284:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005288:	f383 8811 	msr	BASEPRI, r3
 800528c:	f3bf 8f6f 	isb	sy
 8005290:	f3bf 8f4f 	dsb	sy
 8005294:	60bb      	str	r3, [r7, #8]
}
 8005296:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005298:	bf00      	nop
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d0fc      	beq.n	800529a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80052a0:	bf00      	nop
 80052a2:	bf00      	nop
 80052a4:	3714      	adds	r7, #20
 80052a6:	46bd      	mov	sp, r7
 80052a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ac:	4770      	bx	lr
 80052ae:	bf00      	nop
 80052b0:	2000000c 	.word	0x2000000c
	...

080052c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80052c0:	4b07      	ldr	r3, [pc, #28]	@ (80052e0 <pxCurrentTCBConst2>)
 80052c2:	6819      	ldr	r1, [r3, #0]
 80052c4:	6808      	ldr	r0, [r1, #0]
 80052c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052ca:	f380 8809 	msr	PSP, r0
 80052ce:	f3bf 8f6f 	isb	sy
 80052d2:	f04f 0000 	mov.w	r0, #0
 80052d6:	f380 8811 	msr	BASEPRI, r0
 80052da:	4770      	bx	lr
 80052dc:	f3af 8000 	nop.w

080052e0 <pxCurrentTCBConst2>:
 80052e0:	20000410 	.word	0x20000410
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80052e4:	bf00      	nop
 80052e6:	bf00      	nop

080052e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80052e8:	4808      	ldr	r0, [pc, #32]	@ (800530c <prvPortStartFirstTask+0x24>)
 80052ea:	6800      	ldr	r0, [r0, #0]
 80052ec:	6800      	ldr	r0, [r0, #0]
 80052ee:	f380 8808 	msr	MSP, r0
 80052f2:	f04f 0000 	mov.w	r0, #0
 80052f6:	f380 8814 	msr	CONTROL, r0
 80052fa:	b662      	cpsie	i
 80052fc:	b661      	cpsie	f
 80052fe:	f3bf 8f4f 	dsb	sy
 8005302:	f3bf 8f6f 	isb	sy
 8005306:	df00      	svc	0
 8005308:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800530a:	bf00      	nop
 800530c:	e000ed08 	.word	0xe000ed08

08005310 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b086      	sub	sp, #24
 8005314:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005316:	4b47      	ldr	r3, [pc, #284]	@ (8005434 <xPortStartScheduler+0x124>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a47      	ldr	r2, [pc, #284]	@ (8005438 <xPortStartScheduler+0x128>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d10b      	bne.n	8005338 <xPortStartScheduler+0x28>
	__asm volatile
 8005320:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005324:	f383 8811 	msr	BASEPRI, r3
 8005328:	f3bf 8f6f 	isb	sy
 800532c:	f3bf 8f4f 	dsb	sy
 8005330:	613b      	str	r3, [r7, #16]
}
 8005332:	bf00      	nop
 8005334:	bf00      	nop
 8005336:	e7fd      	b.n	8005334 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005338:	4b3e      	ldr	r3, [pc, #248]	@ (8005434 <xPortStartScheduler+0x124>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a3f      	ldr	r2, [pc, #252]	@ (800543c <xPortStartScheduler+0x12c>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d10b      	bne.n	800535a <xPortStartScheduler+0x4a>
	__asm volatile
 8005342:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005346:	f383 8811 	msr	BASEPRI, r3
 800534a:	f3bf 8f6f 	isb	sy
 800534e:	f3bf 8f4f 	dsb	sy
 8005352:	60fb      	str	r3, [r7, #12]
}
 8005354:	bf00      	nop
 8005356:	bf00      	nop
 8005358:	e7fd      	b.n	8005356 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800535a:	4b39      	ldr	r3, [pc, #228]	@ (8005440 <xPortStartScheduler+0x130>)
 800535c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	781b      	ldrb	r3, [r3, #0]
 8005362:	b2db      	uxtb	r3, r3
 8005364:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	22ff      	movs	r2, #255	@ 0xff
 800536a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	781b      	ldrb	r3, [r3, #0]
 8005370:	b2db      	uxtb	r3, r3
 8005372:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005374:	78fb      	ldrb	r3, [r7, #3]
 8005376:	b2db      	uxtb	r3, r3
 8005378:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800537c:	b2da      	uxtb	r2, r3
 800537e:	4b31      	ldr	r3, [pc, #196]	@ (8005444 <xPortStartScheduler+0x134>)
 8005380:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005382:	4b31      	ldr	r3, [pc, #196]	@ (8005448 <xPortStartScheduler+0x138>)
 8005384:	2207      	movs	r2, #7
 8005386:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005388:	e009      	b.n	800539e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800538a:	4b2f      	ldr	r3, [pc, #188]	@ (8005448 <xPortStartScheduler+0x138>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	3b01      	subs	r3, #1
 8005390:	4a2d      	ldr	r2, [pc, #180]	@ (8005448 <xPortStartScheduler+0x138>)
 8005392:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005394:	78fb      	ldrb	r3, [r7, #3]
 8005396:	b2db      	uxtb	r3, r3
 8005398:	005b      	lsls	r3, r3, #1
 800539a:	b2db      	uxtb	r3, r3
 800539c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800539e:	78fb      	ldrb	r3, [r7, #3]
 80053a0:	b2db      	uxtb	r3, r3
 80053a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053a6:	2b80      	cmp	r3, #128	@ 0x80
 80053a8:	d0ef      	beq.n	800538a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80053aa:	4b27      	ldr	r3, [pc, #156]	@ (8005448 <xPortStartScheduler+0x138>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f1c3 0307 	rsb	r3, r3, #7
 80053b2:	2b04      	cmp	r3, #4
 80053b4:	d00b      	beq.n	80053ce <xPortStartScheduler+0xbe>
	__asm volatile
 80053b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053ba:	f383 8811 	msr	BASEPRI, r3
 80053be:	f3bf 8f6f 	isb	sy
 80053c2:	f3bf 8f4f 	dsb	sy
 80053c6:	60bb      	str	r3, [r7, #8]
}
 80053c8:	bf00      	nop
 80053ca:	bf00      	nop
 80053cc:	e7fd      	b.n	80053ca <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80053ce:	4b1e      	ldr	r3, [pc, #120]	@ (8005448 <xPortStartScheduler+0x138>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	021b      	lsls	r3, r3, #8
 80053d4:	4a1c      	ldr	r2, [pc, #112]	@ (8005448 <xPortStartScheduler+0x138>)
 80053d6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80053d8:	4b1b      	ldr	r3, [pc, #108]	@ (8005448 <xPortStartScheduler+0x138>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80053e0:	4a19      	ldr	r2, [pc, #100]	@ (8005448 <xPortStartScheduler+0x138>)
 80053e2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	b2da      	uxtb	r2, r3
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80053ec:	4b17      	ldr	r3, [pc, #92]	@ (800544c <xPortStartScheduler+0x13c>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a16      	ldr	r2, [pc, #88]	@ (800544c <xPortStartScheduler+0x13c>)
 80053f2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80053f6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80053f8:	4b14      	ldr	r3, [pc, #80]	@ (800544c <xPortStartScheduler+0x13c>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a13      	ldr	r2, [pc, #76]	@ (800544c <xPortStartScheduler+0x13c>)
 80053fe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005402:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005404:	f000 f8da 	bl	80055bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005408:	4b11      	ldr	r3, [pc, #68]	@ (8005450 <xPortStartScheduler+0x140>)
 800540a:	2200      	movs	r2, #0
 800540c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800540e:	f000 f8f9 	bl	8005604 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005412:	4b10      	ldr	r3, [pc, #64]	@ (8005454 <xPortStartScheduler+0x144>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a0f      	ldr	r2, [pc, #60]	@ (8005454 <xPortStartScheduler+0x144>)
 8005418:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800541c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800541e:	f7ff ff63 	bl	80052e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005422:	f7ff fc5b 	bl	8004cdc <vTaskSwitchContext>
	prvTaskExitError();
 8005426:	f7ff ff17 	bl	8005258 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800542a:	2300      	movs	r3, #0
}
 800542c:	4618      	mov	r0, r3
 800542e:	3718      	adds	r7, #24
 8005430:	46bd      	mov	sp, r7
 8005432:	bd80      	pop	{r7, pc}
 8005434:	e000ed00 	.word	0xe000ed00
 8005438:	410fc271 	.word	0x410fc271
 800543c:	410fc270 	.word	0x410fc270
 8005440:	e000e400 	.word	0xe000e400
 8005444:	2000053c 	.word	0x2000053c
 8005448:	20000540 	.word	0x20000540
 800544c:	e000ed20 	.word	0xe000ed20
 8005450:	2000000c 	.word	0x2000000c
 8005454:	e000ef34 	.word	0xe000ef34

08005458 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005458:	b480      	push	{r7}
 800545a:	b083      	sub	sp, #12
 800545c:	af00      	add	r7, sp, #0
	__asm volatile
 800545e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005462:	f383 8811 	msr	BASEPRI, r3
 8005466:	f3bf 8f6f 	isb	sy
 800546a:	f3bf 8f4f 	dsb	sy
 800546e:	607b      	str	r3, [r7, #4]
}
 8005470:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005472:	4b10      	ldr	r3, [pc, #64]	@ (80054b4 <vPortEnterCritical+0x5c>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	3301      	adds	r3, #1
 8005478:	4a0e      	ldr	r2, [pc, #56]	@ (80054b4 <vPortEnterCritical+0x5c>)
 800547a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800547c:	4b0d      	ldr	r3, [pc, #52]	@ (80054b4 <vPortEnterCritical+0x5c>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	2b01      	cmp	r3, #1
 8005482:	d110      	bne.n	80054a6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005484:	4b0c      	ldr	r3, [pc, #48]	@ (80054b8 <vPortEnterCritical+0x60>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	b2db      	uxtb	r3, r3
 800548a:	2b00      	cmp	r3, #0
 800548c:	d00b      	beq.n	80054a6 <vPortEnterCritical+0x4e>
	__asm volatile
 800548e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005492:	f383 8811 	msr	BASEPRI, r3
 8005496:	f3bf 8f6f 	isb	sy
 800549a:	f3bf 8f4f 	dsb	sy
 800549e:	603b      	str	r3, [r7, #0]
}
 80054a0:	bf00      	nop
 80054a2:	bf00      	nop
 80054a4:	e7fd      	b.n	80054a2 <vPortEnterCritical+0x4a>
	}
}
 80054a6:	bf00      	nop
 80054a8:	370c      	adds	r7, #12
 80054aa:	46bd      	mov	sp, r7
 80054ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b0:	4770      	bx	lr
 80054b2:	bf00      	nop
 80054b4:	2000000c 	.word	0x2000000c
 80054b8:	e000ed04 	.word	0xe000ed04

080054bc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80054bc:	b480      	push	{r7}
 80054be:	b083      	sub	sp, #12
 80054c0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80054c2:	4b12      	ldr	r3, [pc, #72]	@ (800550c <vPortExitCritical+0x50>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d10b      	bne.n	80054e2 <vPortExitCritical+0x26>
	__asm volatile
 80054ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054ce:	f383 8811 	msr	BASEPRI, r3
 80054d2:	f3bf 8f6f 	isb	sy
 80054d6:	f3bf 8f4f 	dsb	sy
 80054da:	607b      	str	r3, [r7, #4]
}
 80054dc:	bf00      	nop
 80054de:	bf00      	nop
 80054e0:	e7fd      	b.n	80054de <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80054e2:	4b0a      	ldr	r3, [pc, #40]	@ (800550c <vPortExitCritical+0x50>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	3b01      	subs	r3, #1
 80054e8:	4a08      	ldr	r2, [pc, #32]	@ (800550c <vPortExitCritical+0x50>)
 80054ea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80054ec:	4b07      	ldr	r3, [pc, #28]	@ (800550c <vPortExitCritical+0x50>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d105      	bne.n	8005500 <vPortExitCritical+0x44>
 80054f4:	2300      	movs	r3, #0
 80054f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	f383 8811 	msr	BASEPRI, r3
}
 80054fe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005500:	bf00      	nop
 8005502:	370c      	adds	r7, #12
 8005504:	46bd      	mov	sp, r7
 8005506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550a:	4770      	bx	lr
 800550c:	2000000c 	.word	0x2000000c

08005510 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005510:	f3ef 8009 	mrs	r0, PSP
 8005514:	f3bf 8f6f 	isb	sy
 8005518:	4b15      	ldr	r3, [pc, #84]	@ (8005570 <pxCurrentTCBConst>)
 800551a:	681a      	ldr	r2, [r3, #0]
 800551c:	f01e 0f10 	tst.w	lr, #16
 8005520:	bf08      	it	eq
 8005522:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005526:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800552a:	6010      	str	r0, [r2, #0]
 800552c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005530:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005534:	f380 8811 	msr	BASEPRI, r0
 8005538:	f3bf 8f4f 	dsb	sy
 800553c:	f3bf 8f6f 	isb	sy
 8005540:	f7ff fbcc 	bl	8004cdc <vTaskSwitchContext>
 8005544:	f04f 0000 	mov.w	r0, #0
 8005548:	f380 8811 	msr	BASEPRI, r0
 800554c:	bc09      	pop	{r0, r3}
 800554e:	6819      	ldr	r1, [r3, #0]
 8005550:	6808      	ldr	r0, [r1, #0]
 8005552:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005556:	f01e 0f10 	tst.w	lr, #16
 800555a:	bf08      	it	eq
 800555c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005560:	f380 8809 	msr	PSP, r0
 8005564:	f3bf 8f6f 	isb	sy
 8005568:	4770      	bx	lr
 800556a:	bf00      	nop
 800556c:	f3af 8000 	nop.w

08005570 <pxCurrentTCBConst>:
 8005570:	20000410 	.word	0x20000410
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005574:	bf00      	nop
 8005576:	bf00      	nop

08005578 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b082      	sub	sp, #8
 800557c:	af00      	add	r7, sp, #0
	__asm volatile
 800557e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005582:	f383 8811 	msr	BASEPRI, r3
 8005586:	f3bf 8f6f 	isb	sy
 800558a:	f3bf 8f4f 	dsb	sy
 800558e:	607b      	str	r3, [r7, #4]
}
 8005590:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005592:	f7ff fae5 	bl	8004b60 <xTaskIncrementTick>
 8005596:	4603      	mov	r3, r0
 8005598:	2b00      	cmp	r3, #0
 800559a:	d003      	beq.n	80055a4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800559c:	4b06      	ldr	r3, [pc, #24]	@ (80055b8 <SysTick_Handler+0x40>)
 800559e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80055a2:	601a      	str	r2, [r3, #0]
 80055a4:	2300      	movs	r3, #0
 80055a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	f383 8811 	msr	BASEPRI, r3
}
 80055ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80055b0:	bf00      	nop
 80055b2:	3708      	adds	r7, #8
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bd80      	pop	{r7, pc}
 80055b8:	e000ed04 	.word	0xe000ed04

080055bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80055bc:	b480      	push	{r7}
 80055be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80055c0:	4b0b      	ldr	r3, [pc, #44]	@ (80055f0 <vPortSetupTimerInterrupt+0x34>)
 80055c2:	2200      	movs	r2, #0
 80055c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80055c6:	4b0b      	ldr	r3, [pc, #44]	@ (80055f4 <vPortSetupTimerInterrupt+0x38>)
 80055c8:	2200      	movs	r2, #0
 80055ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80055cc:	4b0a      	ldr	r3, [pc, #40]	@ (80055f8 <vPortSetupTimerInterrupt+0x3c>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a0a      	ldr	r2, [pc, #40]	@ (80055fc <vPortSetupTimerInterrupt+0x40>)
 80055d2:	fba2 2303 	umull	r2, r3, r2, r3
 80055d6:	099b      	lsrs	r3, r3, #6
 80055d8:	4a09      	ldr	r2, [pc, #36]	@ (8005600 <vPortSetupTimerInterrupt+0x44>)
 80055da:	3b01      	subs	r3, #1
 80055dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80055de:	4b04      	ldr	r3, [pc, #16]	@ (80055f0 <vPortSetupTimerInterrupt+0x34>)
 80055e0:	2207      	movs	r2, #7
 80055e2:	601a      	str	r2, [r3, #0]
}
 80055e4:	bf00      	nop
 80055e6:	46bd      	mov	sp, r7
 80055e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ec:	4770      	bx	lr
 80055ee:	bf00      	nop
 80055f0:	e000e010 	.word	0xe000e010
 80055f4:	e000e018 	.word	0xe000e018
 80055f8:	20000000 	.word	0x20000000
 80055fc:	10624dd3 	.word	0x10624dd3
 8005600:	e000e014 	.word	0xe000e014

08005604 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005604:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005614 <vPortEnableVFP+0x10>
 8005608:	6801      	ldr	r1, [r0, #0]
 800560a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800560e:	6001      	str	r1, [r0, #0]
 8005610:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005612:	bf00      	nop
 8005614:	e000ed88 	.word	0xe000ed88

08005618 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005618:	b480      	push	{r7}
 800561a:	b085      	sub	sp, #20
 800561c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800561e:	f3ef 8305 	mrs	r3, IPSR
 8005622:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2b0f      	cmp	r3, #15
 8005628:	d915      	bls.n	8005656 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800562a:	4a18      	ldr	r2, [pc, #96]	@ (800568c <vPortValidateInterruptPriority+0x74>)
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	4413      	add	r3, r2
 8005630:	781b      	ldrb	r3, [r3, #0]
 8005632:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005634:	4b16      	ldr	r3, [pc, #88]	@ (8005690 <vPortValidateInterruptPriority+0x78>)
 8005636:	781b      	ldrb	r3, [r3, #0]
 8005638:	7afa      	ldrb	r2, [r7, #11]
 800563a:	429a      	cmp	r2, r3
 800563c:	d20b      	bcs.n	8005656 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800563e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005642:	f383 8811 	msr	BASEPRI, r3
 8005646:	f3bf 8f6f 	isb	sy
 800564a:	f3bf 8f4f 	dsb	sy
 800564e:	607b      	str	r3, [r7, #4]
}
 8005650:	bf00      	nop
 8005652:	bf00      	nop
 8005654:	e7fd      	b.n	8005652 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005656:	4b0f      	ldr	r3, [pc, #60]	@ (8005694 <vPortValidateInterruptPriority+0x7c>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800565e:	4b0e      	ldr	r3, [pc, #56]	@ (8005698 <vPortValidateInterruptPriority+0x80>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	429a      	cmp	r2, r3
 8005664:	d90b      	bls.n	800567e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8005666:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800566a:	f383 8811 	msr	BASEPRI, r3
 800566e:	f3bf 8f6f 	isb	sy
 8005672:	f3bf 8f4f 	dsb	sy
 8005676:	603b      	str	r3, [r7, #0]
}
 8005678:	bf00      	nop
 800567a:	bf00      	nop
 800567c:	e7fd      	b.n	800567a <vPortValidateInterruptPriority+0x62>
	}
 800567e:	bf00      	nop
 8005680:	3714      	adds	r7, #20
 8005682:	46bd      	mov	sp, r7
 8005684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005688:	4770      	bx	lr
 800568a:	bf00      	nop
 800568c:	e000e3f0 	.word	0xe000e3f0
 8005690:	2000053c 	.word	0x2000053c
 8005694:	e000ed0c 	.word	0xe000ed0c
 8005698:	20000540 	.word	0x20000540

0800569c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b08a      	sub	sp, #40	@ 0x28
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80056a4:	2300      	movs	r3, #0
 80056a6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80056a8:	f7ff f9ae 	bl	8004a08 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80056ac:	4b5a      	ldr	r3, [pc, #360]	@ (8005818 <pvPortMalloc+0x17c>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d101      	bne.n	80056b8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80056b4:	f000 f916 	bl	80058e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80056b8:	4b58      	ldr	r3, [pc, #352]	@ (800581c <pvPortMalloc+0x180>)
 80056ba:	681a      	ldr	r2, [r3, #0]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	4013      	ands	r3, r2
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	f040 8090 	bne.w	80057e6 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d01e      	beq.n	800570a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80056cc:	2208      	movs	r2, #8
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	4413      	add	r3, r2
 80056d2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	f003 0307 	and.w	r3, r3, #7
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d015      	beq.n	800570a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	f023 0307 	bic.w	r3, r3, #7
 80056e4:	3308      	adds	r3, #8
 80056e6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	f003 0307 	and.w	r3, r3, #7
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d00b      	beq.n	800570a <pvPortMalloc+0x6e>
	__asm volatile
 80056f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056f6:	f383 8811 	msr	BASEPRI, r3
 80056fa:	f3bf 8f6f 	isb	sy
 80056fe:	f3bf 8f4f 	dsb	sy
 8005702:	617b      	str	r3, [r7, #20]
}
 8005704:	bf00      	nop
 8005706:	bf00      	nop
 8005708:	e7fd      	b.n	8005706 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d06a      	beq.n	80057e6 <pvPortMalloc+0x14a>
 8005710:	4b43      	ldr	r3, [pc, #268]	@ (8005820 <pvPortMalloc+0x184>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	687a      	ldr	r2, [r7, #4]
 8005716:	429a      	cmp	r2, r3
 8005718:	d865      	bhi.n	80057e6 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800571a:	4b42      	ldr	r3, [pc, #264]	@ (8005824 <pvPortMalloc+0x188>)
 800571c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800571e:	4b41      	ldr	r3, [pc, #260]	@ (8005824 <pvPortMalloc+0x188>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005724:	e004      	b.n	8005730 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005728:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800572a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	687a      	ldr	r2, [r7, #4]
 8005736:	429a      	cmp	r2, r3
 8005738:	d903      	bls.n	8005742 <pvPortMalloc+0xa6>
 800573a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d1f1      	bne.n	8005726 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005742:	4b35      	ldr	r3, [pc, #212]	@ (8005818 <pvPortMalloc+0x17c>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005748:	429a      	cmp	r2, r3
 800574a:	d04c      	beq.n	80057e6 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800574c:	6a3b      	ldr	r3, [r7, #32]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	2208      	movs	r2, #8
 8005752:	4413      	add	r3, r2
 8005754:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005758:	681a      	ldr	r2, [r3, #0]
 800575a:	6a3b      	ldr	r3, [r7, #32]
 800575c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800575e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005760:	685a      	ldr	r2, [r3, #4]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	1ad2      	subs	r2, r2, r3
 8005766:	2308      	movs	r3, #8
 8005768:	005b      	lsls	r3, r3, #1
 800576a:	429a      	cmp	r2, r3
 800576c:	d920      	bls.n	80057b0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800576e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	4413      	add	r3, r2
 8005774:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005776:	69bb      	ldr	r3, [r7, #24]
 8005778:	f003 0307 	and.w	r3, r3, #7
 800577c:	2b00      	cmp	r3, #0
 800577e:	d00b      	beq.n	8005798 <pvPortMalloc+0xfc>
	__asm volatile
 8005780:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005784:	f383 8811 	msr	BASEPRI, r3
 8005788:	f3bf 8f6f 	isb	sy
 800578c:	f3bf 8f4f 	dsb	sy
 8005790:	613b      	str	r3, [r7, #16]
}
 8005792:	bf00      	nop
 8005794:	bf00      	nop
 8005796:	e7fd      	b.n	8005794 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800579a:	685a      	ldr	r2, [r3, #4]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	1ad2      	subs	r2, r2, r3
 80057a0:	69bb      	ldr	r3, [r7, #24]
 80057a2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80057a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057a6:	687a      	ldr	r2, [r7, #4]
 80057a8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80057aa:	69b8      	ldr	r0, [r7, #24]
 80057ac:	f000 f8fc 	bl	80059a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80057b0:	4b1b      	ldr	r3, [pc, #108]	@ (8005820 <pvPortMalloc+0x184>)
 80057b2:	681a      	ldr	r2, [r3, #0]
 80057b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	1ad3      	subs	r3, r2, r3
 80057ba:	4a19      	ldr	r2, [pc, #100]	@ (8005820 <pvPortMalloc+0x184>)
 80057bc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80057be:	4b18      	ldr	r3, [pc, #96]	@ (8005820 <pvPortMalloc+0x184>)
 80057c0:	681a      	ldr	r2, [r3, #0]
 80057c2:	4b19      	ldr	r3, [pc, #100]	@ (8005828 <pvPortMalloc+0x18c>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	429a      	cmp	r2, r3
 80057c8:	d203      	bcs.n	80057d2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80057ca:	4b15      	ldr	r3, [pc, #84]	@ (8005820 <pvPortMalloc+0x184>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a16      	ldr	r2, [pc, #88]	@ (8005828 <pvPortMalloc+0x18c>)
 80057d0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80057d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057d4:	685a      	ldr	r2, [r3, #4]
 80057d6:	4b11      	ldr	r3, [pc, #68]	@ (800581c <pvPortMalloc+0x180>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	431a      	orrs	r2, r3
 80057dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057de:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80057e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057e2:	2200      	movs	r2, #0
 80057e4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80057e6:	f7ff f91d 	bl	8004a24 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80057ea:	69fb      	ldr	r3, [r7, #28]
 80057ec:	f003 0307 	and.w	r3, r3, #7
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d00b      	beq.n	800580c <pvPortMalloc+0x170>
	__asm volatile
 80057f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057f8:	f383 8811 	msr	BASEPRI, r3
 80057fc:	f3bf 8f6f 	isb	sy
 8005800:	f3bf 8f4f 	dsb	sy
 8005804:	60fb      	str	r3, [r7, #12]
}
 8005806:	bf00      	nop
 8005808:	bf00      	nop
 800580a:	e7fd      	b.n	8005808 <pvPortMalloc+0x16c>
	return pvReturn;
 800580c:	69fb      	ldr	r3, [r7, #28]
}
 800580e:	4618      	mov	r0, r3
 8005810:	3728      	adds	r7, #40	@ 0x28
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}
 8005816:	bf00      	nop
 8005818:	2000254c 	.word	0x2000254c
 800581c:	20002558 	.word	0x20002558
 8005820:	20002550 	.word	0x20002550
 8005824:	20002544 	.word	0x20002544
 8005828:	20002554 	.word	0x20002554

0800582c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b086      	sub	sp, #24
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d04a      	beq.n	80058d4 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800583e:	2308      	movs	r3, #8
 8005840:	425b      	negs	r3, r3
 8005842:	697a      	ldr	r2, [r7, #20]
 8005844:	4413      	add	r3, r2
 8005846:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	685a      	ldr	r2, [r3, #4]
 8005850:	4b22      	ldr	r3, [pc, #136]	@ (80058dc <vPortFree+0xb0>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4013      	ands	r3, r2
 8005856:	2b00      	cmp	r3, #0
 8005858:	d10b      	bne.n	8005872 <vPortFree+0x46>
	__asm volatile
 800585a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800585e:	f383 8811 	msr	BASEPRI, r3
 8005862:	f3bf 8f6f 	isb	sy
 8005866:	f3bf 8f4f 	dsb	sy
 800586a:	60fb      	str	r3, [r7, #12]
}
 800586c:	bf00      	nop
 800586e:	bf00      	nop
 8005870:	e7fd      	b.n	800586e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005872:	693b      	ldr	r3, [r7, #16]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d00b      	beq.n	8005892 <vPortFree+0x66>
	__asm volatile
 800587a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800587e:	f383 8811 	msr	BASEPRI, r3
 8005882:	f3bf 8f6f 	isb	sy
 8005886:	f3bf 8f4f 	dsb	sy
 800588a:	60bb      	str	r3, [r7, #8]
}
 800588c:	bf00      	nop
 800588e:	bf00      	nop
 8005890:	e7fd      	b.n	800588e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	685a      	ldr	r2, [r3, #4]
 8005896:	4b11      	ldr	r3, [pc, #68]	@ (80058dc <vPortFree+0xb0>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4013      	ands	r3, r2
 800589c:	2b00      	cmp	r3, #0
 800589e:	d019      	beq.n	80058d4 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80058a0:	693b      	ldr	r3, [r7, #16]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d115      	bne.n	80058d4 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	685a      	ldr	r2, [r3, #4]
 80058ac:	4b0b      	ldr	r3, [pc, #44]	@ (80058dc <vPortFree+0xb0>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	43db      	mvns	r3, r3
 80058b2:	401a      	ands	r2, r3
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80058b8:	f7ff f8a6 	bl	8004a08 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	685a      	ldr	r2, [r3, #4]
 80058c0:	4b07      	ldr	r3, [pc, #28]	@ (80058e0 <vPortFree+0xb4>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4413      	add	r3, r2
 80058c6:	4a06      	ldr	r2, [pc, #24]	@ (80058e0 <vPortFree+0xb4>)
 80058c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80058ca:	6938      	ldr	r0, [r7, #16]
 80058cc:	f000 f86c 	bl	80059a8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80058d0:	f7ff f8a8 	bl	8004a24 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80058d4:	bf00      	nop
 80058d6:	3718      	adds	r7, #24
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd80      	pop	{r7, pc}
 80058dc:	20002558 	.word	0x20002558
 80058e0:	20002550 	.word	0x20002550

080058e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80058e4:	b480      	push	{r7}
 80058e6:	b085      	sub	sp, #20
 80058e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80058ea:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80058ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80058f0:	4b27      	ldr	r3, [pc, #156]	@ (8005990 <prvHeapInit+0xac>)
 80058f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	f003 0307 	and.w	r3, r3, #7
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d00c      	beq.n	8005918 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	3307      	adds	r3, #7
 8005902:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	f023 0307 	bic.w	r3, r3, #7
 800590a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800590c:	68ba      	ldr	r2, [r7, #8]
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	1ad3      	subs	r3, r2, r3
 8005912:	4a1f      	ldr	r2, [pc, #124]	@ (8005990 <prvHeapInit+0xac>)
 8005914:	4413      	add	r3, r2
 8005916:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800591c:	4a1d      	ldr	r2, [pc, #116]	@ (8005994 <prvHeapInit+0xb0>)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005922:	4b1c      	ldr	r3, [pc, #112]	@ (8005994 <prvHeapInit+0xb0>)
 8005924:	2200      	movs	r2, #0
 8005926:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	68ba      	ldr	r2, [r7, #8]
 800592c:	4413      	add	r3, r2
 800592e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005930:	2208      	movs	r2, #8
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	1a9b      	subs	r3, r3, r2
 8005936:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	f023 0307 	bic.w	r3, r3, #7
 800593e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	4a15      	ldr	r2, [pc, #84]	@ (8005998 <prvHeapInit+0xb4>)
 8005944:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005946:	4b14      	ldr	r3, [pc, #80]	@ (8005998 <prvHeapInit+0xb4>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	2200      	movs	r2, #0
 800594c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800594e:	4b12      	ldr	r3, [pc, #72]	@ (8005998 <prvHeapInit+0xb4>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	2200      	movs	r2, #0
 8005954:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	68fa      	ldr	r2, [r7, #12]
 800595e:	1ad2      	subs	r2, r2, r3
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005964:	4b0c      	ldr	r3, [pc, #48]	@ (8005998 <prvHeapInit+0xb4>)
 8005966:	681a      	ldr	r2, [r3, #0]
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	4a0a      	ldr	r2, [pc, #40]	@ (800599c <prvHeapInit+0xb8>)
 8005972:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	685b      	ldr	r3, [r3, #4]
 8005978:	4a09      	ldr	r2, [pc, #36]	@ (80059a0 <prvHeapInit+0xbc>)
 800597a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800597c:	4b09      	ldr	r3, [pc, #36]	@ (80059a4 <prvHeapInit+0xc0>)
 800597e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005982:	601a      	str	r2, [r3, #0]
}
 8005984:	bf00      	nop
 8005986:	3714      	adds	r7, #20
 8005988:	46bd      	mov	sp, r7
 800598a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598e:	4770      	bx	lr
 8005990:	20000544 	.word	0x20000544
 8005994:	20002544 	.word	0x20002544
 8005998:	2000254c 	.word	0x2000254c
 800599c:	20002554 	.word	0x20002554
 80059a0:	20002550 	.word	0x20002550
 80059a4:	20002558 	.word	0x20002558

080059a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80059a8:	b480      	push	{r7}
 80059aa:	b085      	sub	sp, #20
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80059b0:	4b28      	ldr	r3, [pc, #160]	@ (8005a54 <prvInsertBlockIntoFreeList+0xac>)
 80059b2:	60fb      	str	r3, [r7, #12]
 80059b4:	e002      	b.n	80059bc <prvInsertBlockIntoFreeList+0x14>
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	60fb      	str	r3, [r7, #12]
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	687a      	ldr	r2, [r7, #4]
 80059c2:	429a      	cmp	r2, r3
 80059c4:	d8f7      	bhi.n	80059b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	68ba      	ldr	r2, [r7, #8]
 80059d0:	4413      	add	r3, r2
 80059d2:	687a      	ldr	r2, [r7, #4]
 80059d4:	429a      	cmp	r2, r3
 80059d6:	d108      	bne.n	80059ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	685a      	ldr	r2, [r3, #4]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	441a      	add	r2, r3
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	68ba      	ldr	r2, [r7, #8]
 80059f4:	441a      	add	r2, r3
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	429a      	cmp	r2, r3
 80059fc:	d118      	bne.n	8005a30 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681a      	ldr	r2, [r3, #0]
 8005a02:	4b15      	ldr	r3, [pc, #84]	@ (8005a58 <prvInsertBlockIntoFreeList+0xb0>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	429a      	cmp	r2, r3
 8005a08:	d00d      	beq.n	8005a26 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	685a      	ldr	r2, [r3, #4]
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	441a      	add	r2, r3
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	681a      	ldr	r2, [r3, #0]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	601a      	str	r2, [r3, #0]
 8005a24:	e008      	b.n	8005a38 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005a26:	4b0c      	ldr	r3, [pc, #48]	@ (8005a58 <prvInsertBlockIntoFreeList+0xb0>)
 8005a28:	681a      	ldr	r2, [r3, #0]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	601a      	str	r2, [r3, #0]
 8005a2e:	e003      	b.n	8005a38 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681a      	ldr	r2, [r3, #0]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005a38:	68fa      	ldr	r2, [r7, #12]
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	429a      	cmp	r2, r3
 8005a3e:	d002      	beq.n	8005a46 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	687a      	ldr	r2, [r7, #4]
 8005a44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005a46:	bf00      	nop
 8005a48:	3714      	adds	r7, #20
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a50:	4770      	bx	lr
 8005a52:	bf00      	nop
 8005a54:	20002544 	.word	0x20002544
 8005a58:	2000254c 	.word	0x2000254c

08005a5c <memset>:
 8005a5c:	4402      	add	r2, r0
 8005a5e:	4603      	mov	r3, r0
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d100      	bne.n	8005a66 <memset+0xa>
 8005a64:	4770      	bx	lr
 8005a66:	f803 1b01 	strb.w	r1, [r3], #1
 8005a6a:	e7f9      	b.n	8005a60 <memset+0x4>

08005a6c <__libc_init_array>:
 8005a6c:	b570      	push	{r4, r5, r6, lr}
 8005a6e:	4d0d      	ldr	r5, [pc, #52]	@ (8005aa4 <__libc_init_array+0x38>)
 8005a70:	4c0d      	ldr	r4, [pc, #52]	@ (8005aa8 <__libc_init_array+0x3c>)
 8005a72:	1b64      	subs	r4, r4, r5
 8005a74:	10a4      	asrs	r4, r4, #2
 8005a76:	2600      	movs	r6, #0
 8005a78:	42a6      	cmp	r6, r4
 8005a7a:	d109      	bne.n	8005a90 <__libc_init_array+0x24>
 8005a7c:	4d0b      	ldr	r5, [pc, #44]	@ (8005aac <__libc_init_array+0x40>)
 8005a7e:	4c0c      	ldr	r4, [pc, #48]	@ (8005ab0 <__libc_init_array+0x44>)
 8005a80:	f000 f826 	bl	8005ad0 <_init>
 8005a84:	1b64      	subs	r4, r4, r5
 8005a86:	10a4      	asrs	r4, r4, #2
 8005a88:	2600      	movs	r6, #0
 8005a8a:	42a6      	cmp	r6, r4
 8005a8c:	d105      	bne.n	8005a9a <__libc_init_array+0x2e>
 8005a8e:	bd70      	pop	{r4, r5, r6, pc}
 8005a90:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a94:	4798      	blx	r3
 8005a96:	3601      	adds	r6, #1
 8005a98:	e7ee      	b.n	8005a78 <__libc_init_array+0xc>
 8005a9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a9e:	4798      	blx	r3
 8005aa0:	3601      	adds	r6, #1
 8005aa2:	e7f2      	b.n	8005a8a <__libc_init_array+0x1e>
 8005aa4:	08005ba8 	.word	0x08005ba8
 8005aa8:	08005ba8 	.word	0x08005ba8
 8005aac:	08005ba8 	.word	0x08005ba8
 8005ab0:	08005bac 	.word	0x08005bac

08005ab4 <memcpy>:
 8005ab4:	440a      	add	r2, r1
 8005ab6:	4291      	cmp	r1, r2
 8005ab8:	f100 33ff 	add.w	r3, r0, #4294967295
 8005abc:	d100      	bne.n	8005ac0 <memcpy+0xc>
 8005abe:	4770      	bx	lr
 8005ac0:	b510      	push	{r4, lr}
 8005ac2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ac6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005aca:	4291      	cmp	r1, r2
 8005acc:	d1f9      	bne.n	8005ac2 <memcpy+0xe>
 8005ace:	bd10      	pop	{r4, pc}

08005ad0 <_init>:
 8005ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ad2:	bf00      	nop
 8005ad4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ad6:	bc08      	pop	{r3}
 8005ad8:	469e      	mov	lr, r3
 8005ada:	4770      	bx	lr

08005adc <_fini>:
 8005adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ade:	bf00      	nop
 8005ae0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ae2:	bc08      	pop	{r3}
 8005ae4:	469e      	mov	lr, r3
 8005ae6:	4770      	bx	lr
