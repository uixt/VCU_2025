
VCU_2025.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ad3c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000548  0800aed0  0800aed0  0000bed0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b418  0800b418  0000d1e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800b418  0800b418  0000c418  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b420  0800b420  0000d1e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b420  0800b420  0000c420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b424  0800b424  0000c424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  0800b428  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000379c  200001e8  0800b610  0000d1e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003984  0800b610  0000d984  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d1e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ad6d  00000000  00000000  0000d218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000040a5  00000000  00000000  00027f85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001700  00000000  00000000  0002c030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011c8  00000000  00000000  0002d730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020f65  00000000  00000000  0002e8f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001de44  00000000  00000000  0004f85d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ba669  00000000  00000000  0006d6a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00127d0a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000070c8  00000000  00000000  00127d50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  0012ee18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800aeb4 	.word	0x0800aeb4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	0800aeb4 	.word	0x0800aeb4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <telem_to_console>:
extern union Data bms_low_cell_voltage;
extern union Data bms_pack_current;
extern union Data serial_number;
extern union Data prohelion_id;

void telem_to_console(void) {
 8000ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000bac:	b0db      	sub	sp, #364	@ 0x16c
 8000bae:	af0c      	add	r7, sp, #48	@ 0x30
					"TELEMETRY\r\n"
							" MC           | Avg velocity: %.2f m/s\r\n"
							" BMS Voltage  | Pack: %.1f V | Cell Max: %.2f V | Cell Min: %.2f V\r\n"
							" BMS Current  | %.2f A\r\n"
							" BMS Temp     | Max: %d C | Min: %d C\r\n\n",
					avg_velocity.f, bms_pack_voltage.f, bms_high_cell_voltage.f,
 8000bb0:	4b26      	ldr	r3, [pc, #152]	@ (8000c4c <telem_to_console+0xa4>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
	int len = snprintf(msg, sizeof(msg),
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f7ff fcc7 	bl	8000548 <__aeabi_f2d>
 8000bba:	4604      	mov	r4, r0
 8000bbc:	460d      	mov	r5, r1
					avg_velocity.f, bms_pack_voltage.f, bms_high_cell_voltage.f,
 8000bbe:	4b24      	ldr	r3, [pc, #144]	@ (8000c50 <telem_to_console+0xa8>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
	int len = snprintf(msg, sizeof(msg),
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f7ff fcc0 	bl	8000548 <__aeabi_f2d>
 8000bc8:	4680      	mov	r8, r0
 8000bca:	4689      	mov	r9, r1
					avg_velocity.f, bms_pack_voltage.f, bms_high_cell_voltage.f,
 8000bcc:	4b21      	ldr	r3, [pc, #132]	@ (8000c54 <telem_to_console+0xac>)
 8000bce:	681b      	ldr	r3, [r3, #0]
	int len = snprintf(msg, sizeof(msg),
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f7ff fcb9 	bl	8000548 <__aeabi_f2d>
 8000bd6:	4682      	mov	sl, r0
 8000bd8:	468b      	mov	fp, r1
					bms_low_cell_voltage.f, bms_pack_current.f, bms_high_temp.i,
 8000bda:	4b1f      	ldr	r3, [pc, #124]	@ (8000c58 <telem_to_console+0xb0>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
	int len = snprintf(msg, sizeof(msg),
 8000bde:	4618      	mov	r0, r3
 8000be0:	f7ff fcb2 	bl	8000548 <__aeabi_f2d>
 8000be4:	e9c7 0100 	strd	r0, r1, [r7]
					bms_low_cell_voltage.f, bms_pack_current.f, bms_high_temp.i,
 8000be8:	4b1c      	ldr	r3, [pc, #112]	@ (8000c5c <telem_to_console+0xb4>)
 8000bea:	681b      	ldr	r3, [r3, #0]
	int len = snprintf(msg, sizeof(msg),
 8000bec:	4618      	mov	r0, r3
 8000bee:	f7ff fcab 	bl	8000548 <__aeabi_f2d>
 8000bf2:	4602      	mov	r2, r0
 8000bf4:	460b      	mov	r3, r1
 8000bf6:	491a      	ldr	r1, [pc, #104]	@ (8000c60 <telem_to_console+0xb8>)
 8000bf8:	6809      	ldr	r1, [r1, #0]
 8000bfa:	481a      	ldr	r0, [pc, #104]	@ (8000c64 <telem_to_console+0xbc>)
 8000bfc:	6800      	ldr	r0, [r0, #0]
 8000bfe:	f107 0608 	add.w	r6, r7, #8
 8000c02:	900b      	str	r0, [sp, #44]	@ 0x2c
 8000c04:	910a      	str	r1, [sp, #40]	@ 0x28
 8000c06:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8000c0a:	ed97 7b00 	vldr	d7, [r7]
 8000c0e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8000c12:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8000c16:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8000c1a:	e9cd 4500 	strd	r4, r5, [sp]
 8000c1e:	4a12      	ldr	r2, [pc, #72]	@ (8000c68 <telem_to_console+0xc0>)
 8000c20:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8000c24:	4630      	mov	r0, r6
 8000c26:	f008 f803 	bl	8008c30 <sniprintf>
 8000c2a:	f8c7 0134 	str.w	r0, [r7, #308]	@ 0x134
					bms_low_temp.i);

	HAL_UART_Transmit(&huart2, (uint8_t*) msg, len, 100);
 8000c2e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8000c32:	b29a      	uxth	r2, r3
 8000c34:	f107 0108 	add.w	r1, r7, #8
 8000c38:	2364      	movs	r3, #100	@ 0x64
 8000c3a:	480c      	ldr	r0, [pc, #48]	@ (8000c6c <telem_to_console+0xc4>)
 8000c3c:	f005 f8e6 	bl	8005e0c <HAL_UART_Transmit>
}
 8000c40:	bf00      	nop
 8000c42:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 8000c46:	46bd      	mov	sp, r7
 8000c48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c4c:	20000250 	.word	0x20000250
 8000c50:	20000278 	.word	0x20000278
 8000c54:	20000280 	.word	0x20000280
 8000c58:	20000288 	.word	0x20000288
 8000c5c:	20000290 	.word	0x20000290
 8000c60:	20000268 	.word	0x20000268
 8000c64:	20000270 	.word	0x20000270
 8000c68:	0800aed0 	.word	0x0800aed0
 8000c6c:	200005a8 	.word	0x200005a8

08000c70 <brake_light>:

void brake_light(void) {
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
//			HAL_GPIO_WritePin(BrakeLight_out_GPIO_Port, BrakeLight_out_Pin,
//					GPIO_PIN_RESET);
//
//		}

	int state = HAL_GPIO_ReadPin(BrakePedal_in_GPIO_Port, BrakePedal_in_Pin);
 8000c76:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c7a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c7e:	f003 f993 	bl	8003fa8 <HAL_GPIO_ReadPin>
 8000c82:	4603      	mov	r3, r0
 8000c84:	607b      	str	r3, [r7, #4]
	if (!state) {
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d10c      	bne.n	8000ca6 <brake_light+0x36>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c92:	480d      	ldr	r0, [pc, #52]	@ (8000cc8 <brake_light+0x58>)
 8000c94:	f003 f9a0 	bl	8003fd8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BrakeLight_out_GPIO_Port, BrakeLight_out_Pin,
 8000c98:	2201      	movs	r2, #1
 8000c9a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c9e:	480b      	ldr	r0, [pc, #44]	@ (8000ccc <brake_light+0x5c>)
 8000ca0:	f003 f99a 	bl	8003fd8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(BrakeLight_out_GPIO_Port, BrakeLight_out_Pin,
				GPIO_PIN_RESET);
	}

}
 8000ca4:	e00b      	b.n	8000cbe <brake_light+0x4e>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000cac:	4806      	ldr	r0, [pc, #24]	@ (8000cc8 <brake_light+0x58>)
 8000cae:	f003 f993 	bl	8003fd8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BrakeLight_out_GPIO_Port, BrakeLight_out_Pin,
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000cb8:	4804      	ldr	r0, [pc, #16]	@ (8000ccc <brake_light+0x5c>)
 8000cba:	f003 f98d 	bl	8003fd8 <HAL_GPIO_WritePin>
}
 8000cbe:	bf00      	nop
 8000cc0:	3708      	adds	r7, #8
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	48000400 	.word	0x48000400
 8000ccc:	48000800 	.word	0x48000800

08000cd0 <r_signal_light>:

void r_signal_light(void) {
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(R_SignalLight_out_GPIO_Port,
 8000cd4:	2140      	movs	r1, #64	@ 0x40
 8000cd6:	4809      	ldr	r0, [pc, #36]	@ (8000cfc <r_signal_light+0x2c>)
 8000cd8:	f003 f966 	bl	8003fa8 <HAL_GPIO_ReadPin>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b01      	cmp	r3, #1
 8000ce0:	d104      	bne.n	8000cec <r_signal_light+0x1c>
	R_SignalLight_out_Pin) == GPIO_PIN_SET) {
		HAL_GPIO_TogglePin(R_SignalLight_out_GPIO_Port,
 8000ce2:	2140      	movs	r1, #64	@ 0x40
 8000ce4:	4805      	ldr	r0, [pc, #20]	@ (8000cfc <r_signal_light+0x2c>)
 8000ce6:	f003 f98f 	bl	8004008 <HAL_GPIO_TogglePin>
	else {
		HAL_GPIO_WritePin(R_SignalLight_out_GPIO_Port,
		R_SignalLight_out_Pin, GPIO_PIN_RESET);
	}

}
 8000cea:	e004      	b.n	8000cf6 <r_signal_light+0x26>
		HAL_GPIO_WritePin(R_SignalLight_out_GPIO_Port,
 8000cec:	2200      	movs	r2, #0
 8000cee:	2140      	movs	r1, #64	@ 0x40
 8000cf0:	4802      	ldr	r0, [pc, #8]	@ (8000cfc <r_signal_light+0x2c>)
 8000cf2:	f003 f971 	bl	8003fd8 <HAL_GPIO_WritePin>
}
 8000cf6:	bf00      	nop
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	48000800 	.word	0x48000800

08000d00 <l_signal_light>:

void l_signal_light(void) {
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0

	if (HAL_GPIO_ReadPin(L_SignalLight_out_GPIO_Port,
 8000d04:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000d08:	4809      	ldr	r0, [pc, #36]	@ (8000d30 <l_signal_light+0x30>)
 8000d0a:	f003 f94d 	bl	8003fa8 <HAL_GPIO_ReadPin>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b01      	cmp	r3, #1
 8000d12:	d105      	bne.n	8000d20 <l_signal_light+0x20>
	L_SignalLight_out_Pin) == GPIO_PIN_SET) {
		HAL_GPIO_TogglePin(L_SignalLight_out_GPIO_Port,
 8000d14:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000d18:	4805      	ldr	r0, [pc, #20]	@ (8000d30 <l_signal_light+0x30>)
 8000d1a:	f003 f975 	bl	8004008 <HAL_GPIO_TogglePin>
	else {
		HAL_GPIO_WritePin(L_SignalLight_out_GPIO_Port,
		L_SignalLight_out_Pin, GPIO_PIN_RESET);
	}

}
 8000d1e:	e005      	b.n	8000d2c <l_signal_light+0x2c>
		HAL_GPIO_WritePin(L_SignalLight_out_GPIO_Port,
 8000d20:	2200      	movs	r2, #0
 8000d22:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000d26:	4802      	ldr	r0, [pc, #8]	@ (8000d30 <l_signal_light+0x30>)
 8000d28:	f003 f956 	bl	8003fd8 <HAL_GPIO_WritePin>
}
 8000d2c:	bf00      	nop
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	48000400 	.word	0x48000400

08000d34 <hazard_light>:

void hazard_light(void) {
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0

	if (HAL_GPIO_ReadPin(Hazard_in_GPIO_Port, Hazard_in_Pin) == GPIO_PIN_SET) {
 8000d38:	2101      	movs	r1, #1
 8000d3a:	480e      	ldr	r0, [pc, #56]	@ (8000d74 <hazard_light+0x40>)
 8000d3c:	f003 f934 	bl	8003fa8 <HAL_GPIO_ReadPin>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b01      	cmp	r3, #1
 8000d44:	d109      	bne.n	8000d5a <hazard_light+0x26>
		HAL_GPIO_TogglePin(R_SignalLight_out_GPIO_Port,
 8000d46:	2140      	movs	r1, #64	@ 0x40
 8000d48:	480a      	ldr	r0, [pc, #40]	@ (8000d74 <hazard_light+0x40>)
 8000d4a:	f003 f95d 	bl	8004008 <HAL_GPIO_TogglePin>
		R_SignalLight_out_Pin);
		HAL_GPIO_TogglePin(L_SignalLight_out_GPIO_Port,
 8000d4e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000d52:	4809      	ldr	r0, [pc, #36]	@ (8000d78 <hazard_light+0x44>)
 8000d54:	f003 f958 	bl	8004008 <HAL_GPIO_TogglePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(L_SignalLight_out_GPIO_Port, L_SignalLight_out_Pin,
				GPIO_PIN_RESET);
	}

}
 8000d58:	e00a      	b.n	8000d70 <hazard_light+0x3c>
		HAL_GPIO_WritePin(R_SignalLight_out_GPIO_Port, R_SignalLight_out_Pin,
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	2140      	movs	r1, #64	@ 0x40
 8000d5e:	4805      	ldr	r0, [pc, #20]	@ (8000d74 <hazard_light+0x40>)
 8000d60:	f003 f93a 	bl	8003fd8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(L_SignalLight_out_GPIO_Port, L_SignalLight_out_Pin,
 8000d64:	2200      	movs	r2, #0
 8000d66:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000d6a:	4803      	ldr	r0, [pc, #12]	@ (8000d78 <hazard_light+0x44>)
 8000d6c:	f003 f934 	bl	8003fd8 <HAL_GPIO_WritePin>
}
 8000d70:	bf00      	nop
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	48000800 	.word	0x48000800
 8000d78:	48000400 	.word	0x48000400

08000d7c <buttons_100ms>:

void buttons_100ms(void) {
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
	while (1) {
		brake_light();
 8000d80:	f7ff ff76 	bl	8000c70 <brake_light>
		osDelay(100);
 8000d84:	2064      	movs	r0, #100	@ 0x64
 8000d86:	f005 fc87 	bl	8006698 <osDelay>
		brake_light();
 8000d8a:	bf00      	nop
 8000d8c:	e7f8      	b.n	8000d80 <buttons_100ms+0x4>

08000d8e <buttons_500ms>:
	}
}

void buttons_500ms(void) {
 8000d8e:	b580      	push	{r7, lr}
 8000d90:	af00      	add	r7, sp, #0
	while (1) {
		r_signal_light();
 8000d92:	f7ff ff9d 	bl	8000cd0 <r_signal_light>
		l_signal_light();
 8000d96:	f7ff ffb3 	bl	8000d00 <l_signal_light>
		hazard_light();
 8000d9a:	f7ff ffcb 	bl	8000d34 <hazard_light>
		telem_to_console();
 8000d9e:	f7ff ff03 	bl	8000ba8 <telem_to_console>
		osDelay(500);
 8000da2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000da6:	f005 fc77 	bl	8006698 <osDelay>
		r_signal_light();
 8000daa:	bf00      	nop
 8000dac:	e7f1      	b.n	8000d92 <buttons_500ms+0x4>

08000dae <makeCANFrame>:
#define HEATSINK_ID_MC2      0x60B
#define BMS_TEMP_ID          0x701
#define BMS_VOLTAGE_ID       0x702
#define BMS_CURRENT_ID       0x703

struct CANFrame makeCANFrame(CAN_RxHeaderTypeDef header, uint8_t data[8]) {
 8000dae:	b084      	sub	sp, #16
 8000db0:	b490      	push	{r4, r7}
 8000db2:	b086      	sub	sp, #24
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
 8000db8:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8000dbc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	struct CANFrame temp;

	temp.ID = header.StdId;
 8000dc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dc2:	60fb      	str	r3, [r7, #12]
	temp.rxData[0] = data[0];
 8000dc4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	743b      	strb	r3, [r7, #16]
	temp.rxData[1] = data[1];
 8000dca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000dcc:	785b      	ldrb	r3, [r3, #1]
 8000dce:	747b      	strb	r3, [r7, #17]
	temp.rxData[2] = data[2];
 8000dd0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000dd2:	789b      	ldrb	r3, [r3, #2]
 8000dd4:	74bb      	strb	r3, [r7, #18]
	temp.rxData[3] = data[3];
 8000dd6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000dd8:	78db      	ldrb	r3, [r3, #3]
 8000dda:	74fb      	strb	r3, [r7, #19]
	temp.rxData[4] = data[4];
 8000ddc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000dde:	791b      	ldrb	r3, [r3, #4]
 8000de0:	753b      	strb	r3, [r7, #20]
	temp.rxData[5] = data[5];
 8000de2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000de4:	795b      	ldrb	r3, [r3, #5]
 8000de6:	757b      	strb	r3, [r7, #21]
	temp.rxData[6] = data[6];
 8000de8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000dea:	799b      	ldrb	r3, [r3, #6]
 8000dec:	75bb      	strb	r3, [r7, #22]
	temp.rxData[7] = data[7];
 8000dee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000df0:	79db      	ldrb	r3, [r3, #7]
 8000df2:	75fb      	strb	r3, [r7, #23]

	return temp;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	461c      	mov	r4, r3
 8000df8:	f107 030c 	add.w	r3, r7, #12
 8000dfc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000e00:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8000e04:	6878      	ldr	r0, [r7, #4]
 8000e06:	3718      	adds	r7, #24
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bc90      	pop	{r4, r7}
 8000e0c:	b004      	add	sp, #16
 8000e0e:	4770      	bx	lr

08000e10 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000e10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e12:	b08f      	sub	sp, #60	@ 0x3c
 8000e14:	af06      	add	r7, sp, #24
 8000e16:	61f8      	str	r0, [r7, #28]

	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK) {
 8000e18:	4b18      	ldr	r3, [pc, #96]	@ (8000e7c <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 8000e1a:	4a19      	ldr	r2, [pc, #100]	@ (8000e80 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	69f8      	ldr	r0, [r7, #28]
 8000e20:	f002 f95f 	bl	80030e2 <HAL_CAN_GetRxMessage>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
		Error_Handler();
 8000e2a:	f000 fd51 	bl	80018d0 <Error_Handler>
	}
//	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
	temp = makeCANFrame(RxHeader, RxData);
 8000e2e:	4b15      	ldr	r3, [pc, #84]	@ (8000e84 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 8000e30:	607b      	str	r3, [r7, #4]
 8000e32:	f107 0608 	add.w	r6, r7, #8
 8000e36:	4c12      	ldr	r4, [pc, #72]	@ (8000e80 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8000e38:	4b10      	ldr	r3, [pc, #64]	@ (8000e7c <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 8000e3a:	9304      	str	r3, [sp, #16]
 8000e3c:	466d      	mov	r5, sp
 8000e3e:	f104 030c 	add.w	r3, r4, #12
 8000e42:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e44:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000e48:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8000e4c:	4630      	mov	r0, r6
 8000e4e:	f7ff ffae 	bl	8000dae <makeCANFrame>
 8000e52:	687c      	ldr	r4, [r7, #4]
 8000e54:	f107 0308 	add.w	r3, r7, #8
 8000e58:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000e5c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	xQueueSendToBackFromISR(CANq, &temp, 1);
 8000e60:	4b09      	ldr	r3, [pc, #36]	@ (8000e88 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 8000e62:	6818      	ldr	r0, [r3, #0]
 8000e64:	2300      	movs	r3, #0
 8000e66:	2201      	movs	r2, #1
 8000e68:	4906      	ldr	r1, [pc, #24]	@ (8000e84 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 8000e6a:	f005 fda5 	bl	80069b8 <xQueueGenericSendFromISR>

	datacheck = 1; // signal to your RTOS task
 8000e6e:	4b07      	ldr	r3, [pc, #28]	@ (8000e8c <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 8000e70:	2201      	movs	r2, #1
 8000e72:	701a      	strb	r2, [r3, #0]
}
 8000e74:	bf00      	nop
 8000e76:	3724      	adds	r7, #36	@ 0x24
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e7c:	20000220 	.word	0x20000220
 8000e80:	20000204 	.word	0x20000204
 8000e84:	20000228 	.word	0x20000228
 8000e88:	20000650 	.word	0x20000650
 8000e8c:	20000654 	.word	0x20000654

08000e90 <can_rx>:

void can_rx(void const *argument) {
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
//	int count;
//	CANq = xQueueCreate(100, sizeof(struct CANFrame)); // I didn't realize this was here ca..
	vQueueAddToRegistry(CANq, "CAN queue");
 8000e98:	4b4a      	ldr	r3, [pc, #296]	@ (8000fc4 <can_rx+0x134>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	494a      	ldr	r1, [pc, #296]	@ (8000fc8 <can_rx+0x138>)
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f005 ff38 	bl	8006d14 <vQueueAddToRegistry>

	while (1) {

		if (xQueueReceiveFromISR(CANq, &receivedFrame,
 8000ea4:	4b47      	ldr	r3, [pc, #284]	@ (8000fc4 <can_rx+0x134>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	2264      	movs	r2, #100	@ 0x64
 8000eaa:	4948      	ldr	r1, [pc, #288]	@ (8000fcc <can_rx+0x13c>)
 8000eac:	4618      	mov	r0, r3
 8000eae:	f005 fe1e 	bl	8006aee <xQueueReceiveFromISR>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b01      	cmp	r3, #1
 8000eb6:	d1f5      	bne.n	8000ea4 <can_rx+0x14>
				pdMS_TO_TICKS(100)) == pdPASS) {
			switch (receivedFrame.ID) {
 8000eb8:	4b44      	ldr	r3, [pc, #272]	@ (8000fcc <can_rx+0x13c>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f240 7203 	movw	r2, #1795	@ 0x703
 8000ec0:	4293      	cmp	r3, r2
 8000ec2:	d05f      	beq.n	8000f84 <can_rx+0xf4>
 8000ec4:	f240 7203 	movw	r2, #1795	@ 0x703
 8000ec8:	4293      	cmp	r3, r2
 8000eca:	d863      	bhi.n	8000f94 <can_rx+0x104>
 8000ecc:	f240 7202 	movw	r2, #1794	@ 0x702
 8000ed0:	4293      	cmp	r3, r2
 8000ed2:	d041      	beq.n	8000f58 <can_rx+0xc8>
 8000ed4:	f240 7202 	movw	r2, #1794	@ 0x702
 8000ed8:	4293      	cmp	r3, r2
 8000eda:	d85b      	bhi.n	8000f94 <can_rx+0x104>
 8000edc:	f240 7201 	movw	r2, #1793	@ 0x701
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d02a      	beq.n	8000f3a <can_rx+0xaa>
 8000ee4:	f240 7201 	movw	r2, #1793	@ 0x701
 8000ee8:	4293      	cmp	r3, r2
 8000eea:	d853      	bhi.n	8000f94 <can_rx+0x104>
 8000eec:	f240 5203 	movw	r2, #1283	@ 0x503
 8000ef0:	4293      	cmp	r3, r2
 8000ef2:	d004      	beq.n	8000efe <can_rx+0x6e>
 8000ef4:	f240 6203 	movw	r2, #1539	@ 0x603
 8000ef8:	4293      	cmp	r3, r2
 8000efa:	d00f      	beq.n	8000f1c <can_rx+0x8c>
 8000efc:	e04a      	b.n	8000f94 <can_rx+0x104>
//
//					// Motor Controllers
//					// Vehicle velocity
			case VELOCITY_ID_MC1:
				//type: float
				memcpy(telem_rpm_1.byte, RxData, mc_msg_size);
 8000efe:	4b34      	ldr	r3, [pc, #208]	@ (8000fd0 <can_rx+0x140>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	461a      	mov	r2, r3
 8000f04:	4933      	ldr	r1, [pc, #204]	@ (8000fd4 <can_rx+0x144>)
 8000f06:	4834      	ldr	r0, [pc, #208]	@ (8000fd8 <can_rx+0x148>)
 8000f08:	f007 ff89 	bl	8008e1e <memcpy>
				memcpy(telem_velocity_1.byte, RxData + 5, mc_msg_size); // m/s, convert to mph
 8000f0c:	4933      	ldr	r1, [pc, #204]	@ (8000fdc <can_rx+0x14c>)
 8000f0e:	4b30      	ldr	r3, [pc, #192]	@ (8000fd0 <can_rx+0x140>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	461a      	mov	r2, r3
 8000f14:	4832      	ldr	r0, [pc, #200]	@ (8000fe0 <can_rx+0x150>)
 8000f16:	f007 ff82 	bl	8008e1e <memcpy>
				break;
 8000f1a:	e03b      	b.n	8000f94 <can_rx+0x104>

			case VELOCITY_ID_MC2:
				//type: float
				memcpy(telem_rpm_2.byte, RxData, mc_msg_size);
 8000f1c:	4b2c      	ldr	r3, [pc, #176]	@ (8000fd0 <can_rx+0x140>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	461a      	mov	r2, r3
 8000f22:	492c      	ldr	r1, [pc, #176]	@ (8000fd4 <can_rx+0x144>)
 8000f24:	482f      	ldr	r0, [pc, #188]	@ (8000fe4 <can_rx+0x154>)
 8000f26:	f007 ff7a 	bl	8008e1e <memcpy>
				memcpy(telem_velocity_2.byte, RxData + 5, mc_msg_size); // m/s, convert to mph
 8000f2a:	492c      	ldr	r1, [pc, #176]	@ (8000fdc <can_rx+0x14c>)
 8000f2c:	4b28      	ldr	r3, [pc, #160]	@ (8000fd0 <can_rx+0x140>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	461a      	mov	r2, r3
 8000f32:	482d      	ldr	r0, [pc, #180]	@ (8000fe8 <can_rx+0x158>)
 8000f34:	f007 ff73 	bl	8008e1e <memcpy>
				break;
 8000f38:	e02c      	b.n	8000f94 <can_rx+0x104>

				// BMS
				// BMS Pack Temperature
			case BMS_TEMP_ID:
				//units: 1C
				memcpy(bms_high_temp.byte, RxData, bms_temp_size);
 8000f3a:	4b2c      	ldr	r3, [pc, #176]	@ (8000fec <can_rx+0x15c>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	461a      	mov	r2, r3
 8000f40:	4924      	ldr	r1, [pc, #144]	@ (8000fd4 <can_rx+0x144>)
 8000f42:	482b      	ldr	r0, [pc, #172]	@ (8000ff0 <can_rx+0x160>)
 8000f44:	f007 ff6b 	bl	8008e1e <memcpy>
				memcpy(bms_low_temp.byte, RxData + 2, bms_temp_size);
 8000f48:	492a      	ldr	r1, [pc, #168]	@ (8000ff4 <can_rx+0x164>)
 8000f4a:	4b28      	ldr	r3, [pc, #160]	@ (8000fec <can_rx+0x15c>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	461a      	mov	r2, r3
 8000f50:	4829      	ldr	r0, [pc, #164]	@ (8000ff8 <can_rx+0x168>)
 8000f52:	f007 ff64 	bl	8008e1e <memcpy>

				break;
 8000f56:	e01d      	b.n	8000f94 <can_rx+0x104>

				// BMS Pack Voltage
			case BMS_VOLTAGE_ID:
				// units: 0.0001V
				memcpy(bms_pack_voltage.byte, RxData, bms_pack_voltage_size);
 8000f58:	4b28      	ldr	r3, [pc, #160]	@ (8000ffc <can_rx+0x16c>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	461a      	mov	r2, r3
 8000f5e:	491d      	ldr	r1, [pc, #116]	@ (8000fd4 <can_rx+0x144>)
 8000f60:	4827      	ldr	r0, [pc, #156]	@ (8001000 <can_rx+0x170>)
 8000f62:	f007 ff5c 	bl	8008e1e <memcpy>
				memcpy(bms_high_cell_voltage.byte, RxData + 3, bms_pack_voltage_size);
 8000f66:	4927      	ldr	r1, [pc, #156]	@ (8001004 <can_rx+0x174>)
 8000f68:	4b24      	ldr	r3, [pc, #144]	@ (8000ffc <can_rx+0x16c>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	461a      	mov	r2, r3
 8000f6e:	4826      	ldr	r0, [pc, #152]	@ (8001008 <can_rx+0x178>)
 8000f70:	f007 ff55 	bl	8008e1e <memcpy>
				memcpy(bms_low_cell_voltage.byte, RxData + 5, bms_pack_voltage_size);
 8000f74:	4919      	ldr	r1, [pc, #100]	@ (8000fdc <can_rx+0x14c>)
 8000f76:	4b21      	ldr	r3, [pc, #132]	@ (8000ffc <can_rx+0x16c>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	461a      	mov	r2, r3
 8000f7c:	4823      	ldr	r0, [pc, #140]	@ (800100c <can_rx+0x17c>)
 8000f7e:	f007 ff4e 	bl	8008e1e <memcpy>
				break;
 8000f82:	e007      	b.n	8000f94 <can_rx+0x104>

				//Current Draw
			case BMS_CURRENT_ID:
				// units: 0.1A
				memcpy(bms_pack_current.byte, RxData, bms_pack_current_size);
 8000f84:	4b22      	ldr	r3, [pc, #136]	@ (8001010 <can_rx+0x180>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	461a      	mov	r2, r3
 8000f8a:	4912      	ldr	r1, [pc, #72]	@ (8000fd4 <can_rx+0x144>)
 8000f8c:	4821      	ldr	r0, [pc, #132]	@ (8001014 <can_rx+0x184>)
 8000f8e:	f007 ff46 	bl	8008e1e <memcpy>
				break;
 8000f92:	bf00      	nop
			}
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 8000f94:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f98:	481f      	ldr	r0, [pc, #124]	@ (8001018 <can_rx+0x188>)
 8000f9a:	f003 f835 	bl	8004008 <HAL_GPIO_TogglePin>
			avg_velocity.f = (telem_velocity_1.f + telem_velocity_2.f) / 2.0f;
 8000f9e:	4b10      	ldr	r3, [pc, #64]	@ (8000fe0 <can_rx+0x150>)
 8000fa0:	ed93 7a00 	vldr	s14, [r3]
 8000fa4:	4b10      	ldr	r3, [pc, #64]	@ (8000fe8 <can_rx+0x158>)
 8000fa6:	edd3 7a00 	vldr	s15, [r3]
 8000faa:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000fae:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8000fb2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fb6:	4b19      	ldr	r3, [pc, #100]	@ (800101c <can_rx+0x18c>)
 8000fb8:	edc3 7a00 	vstr	s15, [r3]



			osDelay(100);
 8000fbc:	2064      	movs	r0, #100	@ 0x64
 8000fbe:	f005 fb6b 	bl	8006698 <osDelay>
		if (xQueueReceiveFromISR(CANq, &receivedFrame,
 8000fc2:	e76f      	b.n	8000ea4 <can_rx+0x14>
 8000fc4:	20000650 	.word	0x20000650
 8000fc8:	0800af88 	.word	0x0800af88
 8000fcc:	20000234 	.word	0x20000234
 8000fd0:	20000000 	.word	0x20000000
 8000fd4:	20000220 	.word	0x20000220
 8000fd8:	20000258 	.word	0x20000258
 8000fdc:	20000225 	.word	0x20000225
 8000fe0:	20000240 	.word	0x20000240
 8000fe4:	20000260 	.word	0x20000260
 8000fe8:	20000248 	.word	0x20000248
 8000fec:	20000004 	.word	0x20000004
 8000ff0:	20000268 	.word	0x20000268
 8000ff4:	20000222 	.word	0x20000222
 8000ff8:	20000270 	.word	0x20000270
 8000ffc:	20000008 	.word	0x20000008
 8001000:	20000278 	.word	0x20000278
 8001004:	20000223 	.word	0x20000223
 8001008:	20000280 	.word	0x20000280
 800100c:	20000288 	.word	0x20000288
 8001010:	2000000c 	.word	0x2000000c
 8001014:	20000290 	.word	0x20000290
 8001018:	48000400 	.word	0x48000400
 800101c:	20000250 	.word	0x20000250

08001020 <can_tx>:
//	int i;
//	float f;
//	uint8_t byte[8];
//};

void can_tx(void const *argument) {
 8001020:	b580      	push	{r7, lr}
 8001022:	b09a      	sub	sp, #104	@ 0x68
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
	CAN_TxHeaderTypeDef txHeader;
	uint8_t txData[8];
	uint32_t txMailbox;
	union Data Current; //how best to control motors? Current, Velocity, mix of both?
	union Data Velocity;
	float sum = 0;
 8001028:	f04f 0300 	mov.w	r3, #0
 800102c:	667b      	str	r3, [r7, #100]	@ 0x64
	float avg = 0;
 800102e:	f04f 0300 	mov.w	r3, #0
 8001032:	65fb      	str	r3, [r7, #92]	@ 0x5c
	char msg[32]; // plenty of space for float + newline
	// Set up header
	txHeader.IDE = CAN_ID_STD;
 8001034:	2300      	movs	r3, #0
 8001036:	64fb      	str	r3, [r7, #76]	@ 0x4c
	txHeader.StdId = 0x401;
 8001038:	f240 4301 	movw	r3, #1025	@ 0x401
 800103c:	647b      	str	r3, [r7, #68]	@ 0x44
	txHeader.RTR = CAN_RTR_DATA;
 800103e:	2300      	movs	r3, #0
 8001040:	653b      	str	r3, [r7, #80]	@ 0x50
	txHeader.DLC = 8;
 8001042:	2308      	movs	r3, #8
 8001044:	657b      	str	r3, [r7, #84]	@ 0x54
	Velocity.f = 500.0f;
 8001046:	4b45      	ldr	r3, [pc, #276]	@ (800115c <can_tx+0x13c>)
 8001048:	62bb      	str	r3, [r7, #40]	@ 0x28

	while (1) {
		sum = 0;
 800104a:	f04f 0300 	mov.w	r3, #0
 800104e:	667b      	str	r3, [r7, #100]	@ 0x64

		for (int i = 0; i < ADC_BUF_LEN; i++) {
 8001050:	2300      	movs	r3, #0
 8001052:	663b      	str	r3, [r7, #96]	@ 0x60
 8001054:	e010      	b.n	8001078 <can_tx+0x58>
			sum += adc_buf[i];
 8001056:	4a42      	ldr	r2, [pc, #264]	@ (8001160 <can_tx+0x140>)
 8001058:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800105a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800105e:	ee07 3a90 	vmov	s15, r3
 8001062:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001066:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 800106a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800106e:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
		for (int i = 0; i < ADC_BUF_LEN; i++) {
 8001072:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001074:	3301      	adds	r3, #1
 8001076:	663b      	str	r3, [r7, #96]	@ 0x60
 8001078:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800107a:	2b0f      	cmp	r3, #15
 800107c:	ddeb      	ble.n	8001056 <can_tx+0x36>
		}

		avg = fabs(sum / ADC_BUF_LEN);
 800107e:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 8001082:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8001086:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800108a:	eef0 7ae7 	vabs.f32	s15, s15
 800108e:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
//		HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);

		// gear selection
		// have to write in conditions for braking later
		//drive
		if (!HAL_GPIO_ReadPin(GPIOA, Drive_Pin) && avg_velocity.f >= 0) {
 8001092:	2180      	movs	r1, #128	@ 0x80
 8001094:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001098:	f002 ff86 	bl	8003fa8 <HAL_GPIO_ReadPin>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d10a      	bne.n	80010b8 <can_tx+0x98>
 80010a2:	4b30      	ldr	r3, [pc, #192]	@ (8001164 <can_tx+0x144>)
 80010a4:	edd3 7a00 	vldr	s15, [r3]
 80010a8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010b0:	db02      	blt.n	80010b8 <can_tx+0x98>
			Velocity.f = 500.0f;
 80010b2:	4b2a      	ldr	r3, [pc, #168]	@ (800115c <can_tx+0x13c>)
 80010b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80010b6:	e018      	b.n	80010ea <can_tx+0xca>
			//reverse
		}
		else if (!HAL_GPIO_ReadPin(GPIOA, Reverse_Pin) && avg_velocity.f <= 0) {
 80010b8:	2120      	movs	r1, #32
 80010ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010be:	f002 ff73 	bl	8003fa8 <HAL_GPIO_ReadPin>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d10a      	bne.n	80010de <can_tx+0xbe>
 80010c8:	4b26      	ldr	r3, [pc, #152]	@ (8001164 <can_tx+0x144>)
 80010ca:	edd3 7a00 	vldr	s15, [r3]
 80010ce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010d6:	d802      	bhi.n	80010de <can_tx+0xbe>
			Velocity.f = -500.0f;
 80010d8:	4b23      	ldr	r3, [pc, #140]	@ (8001168 <can_tx+0x148>)
 80010da:	62bb      	str	r3, [r7, #40]	@ 0x28
 80010dc:	e005      	b.n	80010ea <can_tx+0xca>
			//neutral
		}
		else {
			Velocity.f = 0;
 80010de:	f04f 0300 	mov.w	r3, #0
 80010e2:	62bb      	str	r3, [r7, #40]	@ 0x28
			Current.f = 0;
 80010e4:	f04f 0300 	mov.w	r3, #0
 80010e8:	633b      	str	r3, [r7, #48]	@ 0x30
		}

//		Current.f = 0.00000006*(pow(avg*0.1, 2));
		txData[0] = Velocity.byte[0];
 80010ea:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80010ee:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
		txData[1] = Velocity.byte[1];
 80010f2:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80010f6:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
		txData[2] = Velocity.byte[2];
 80010fa:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80010fe:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
		txData[3] = Velocity.byte[3];
 8001102:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001106:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

		txData[4] = Current.byte[0];
 800110a:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800110e:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
		txData[5] = Current.byte[1];
 8001112:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8001116:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
		txData[6] = Current.byte[2];
 800111a:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800111e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
		txData[7] = Current.byte[3];
 8001122:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001126:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
//		txData[6] = 0x4C;
//		txData[7] = 0x3D;

		//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);

		if (HAL_CAN_AddTxMessage(&hcan, &txHeader, txData, &txMailbox)
 800112a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800112e:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8001132:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 8001136:	480d      	ldr	r0, [pc, #52]	@ (800116c <can_tx+0x14c>)
 8001138:	f001 ff03 	bl	8002f42 <HAL_CAN_AddTxMessage>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <can_tx+0x126>
				!= HAL_OK) {
			Error_Handler();
 8001142:	f000 fbc5 	bl	80018d0 <Error_Handler>
//				AvgVelocity.f);
//		HAL_UART_Transmit(&huart2, (uint8_t*) msg, len, HAL_MAX_DELAY);

//		  HAL_UART_Transmit(&huart2, "hello world\n", 20, HAL_MAX_DELAY);

		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 8001146:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800114a:	4809      	ldr	r0, [pc, #36]	@ (8001170 <can_tx+0x150>)
 800114c:	f002 ff5c 	bl	8004008 <HAL_GPIO_TogglePin>

		osDelay(500); // send every 1 second
 8001150:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001154:	f005 faa0 	bl	8006698 <osDelay>
		sum = 0;
 8001158:	e777      	b.n	800104a <can_tx+0x2a>
 800115a:	bf00      	nop
 800115c:	43fa0000 	.word	0x43fa0000
 8001160:	20000634 	.word	0x20000634
 8001164:	20000250 	.word	0x20000250
 8001168:	c3fa0000 	.word	0xc3fa0000
 800116c:	20000580 	.word	0x20000580
 8001170:	48000400 	.word	0x48000400

08001174 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001174:	b480      	push	{r7}
 8001176:	b085      	sub	sp, #20
 8001178:	af00      	add	r7, sp, #0
 800117a:	60f8      	str	r0, [r7, #12]
 800117c:	60b9      	str	r1, [r7, #8]
 800117e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	4a07      	ldr	r2, [pc, #28]	@ (80011a0 <vApplicationGetIdleTaskMemory+0x2c>)
 8001184:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001186:	68bb      	ldr	r3, [r7, #8]
 8001188:	4a06      	ldr	r2, [pc, #24]	@ (80011a4 <vApplicationGetIdleTaskMemory+0x30>)
 800118a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2280      	movs	r2, #128	@ 0x80
 8001190:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001192:	bf00      	nop
 8001194:	3714      	adds	r7, #20
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	20000298 	.word	0x20000298
 80011a4:	200002ec 	.word	0x200002ec

080011a8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80011a8:	b5b0      	push	{r4, r5, r7, lr}
 80011aa:	b0a4      	sub	sp, #144	@ 0x90
 80011ac:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80011ae:	f000 fe67 	bl	8001e80 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80011b2:	f000 f8a3 	bl	80012fc <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	CANq = xQueueCreate(50, sizeof(struct CANFrame));
 80011b6:	2200      	movs	r2, #0
 80011b8:	210c      	movs	r1, #12
 80011ba:	2032      	movs	r0, #50	@ 0x32
 80011bc:	f005 fb9e 	bl	80068fc <xQueueGenericCreate>
 80011c0:	4603      	mov	r3, r0
 80011c2:	4a40      	ldr	r2, [pc, #256]	@ (80012c4 <main+0x11c>)
 80011c4:	6013      	str	r3, [r2, #0]

	osThreadDef(parked, parked_init, osPriorityLow, 0, 32);
 80011c6:	4b40      	ldr	r3, [pc, #256]	@ (80012c8 <main+0x120>)
 80011c8:	f107 0474 	add.w	r4, r7, #116	@ 0x74
 80011cc:	461d      	mov	r5, r3
 80011ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011d2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011d6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	parkedHandle = osThreadCreate(osThread(parked), NULL);
 80011da:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80011de:	2100      	movs	r1, #0
 80011e0:	4618      	mov	r0, r3
 80011e2:	f005 fa0d 	bl	8006600 <osThreadCreate>
 80011e6:	4603      	mov	r3, r0
 80011e8:	4a38      	ldr	r2, [pc, #224]	@ (80012cc <main+0x124>)
 80011ea:	6013      	str	r3, [r2, #0]

	osThreadDef(canTxTask, can_tx, osPriorityHigh, 0, 128);
 80011ec:	4b38      	ldr	r3, [pc, #224]	@ (80012d0 <main+0x128>)
 80011ee:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 80011f2:	461d      	mov	r5, r3
 80011f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011f8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011fc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	canTxTaskHandle = osThreadCreate(osThread(canTxTask), NULL);
 8001200:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001204:	2100      	movs	r1, #0
 8001206:	4618      	mov	r0, r3
 8001208:	f005 f9fa 	bl	8006600 <osThreadCreate>
 800120c:	4603      	mov	r3, r0
 800120e:	4a31      	ldr	r2, [pc, #196]	@ (80012d4 <main+0x12c>)
 8001210:	6013      	str	r3, [r2, #0]

	osThreadDef(canRxTask, can_rx, osPriorityHigh, 0, 128);
 8001212:	4b31      	ldr	r3, [pc, #196]	@ (80012d8 <main+0x130>)
 8001214:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8001218:	461d      	mov	r5, r3
 800121a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800121c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800121e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001222:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	canRxTaskHandle = osThreadCreate(osThread(canRxTask), NULL);
 8001226:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800122a:	2100      	movs	r1, #0
 800122c:	4618      	mov	r0, r3
 800122e:	f005 f9e7 	bl	8006600 <osThreadCreate>
 8001232:	4603      	mov	r3, r0
 8001234:	4a29      	ldr	r2, [pc, #164]	@ (80012dc <main+0x134>)
 8001236:	6013      	str	r3, [r2, #0]

	osThreadDef(buttons_task_100ms, buttons_100ms, osPriorityNormal, 0, 64);
 8001238:	4b29      	ldr	r3, [pc, #164]	@ (80012e0 <main+0x138>)
 800123a:	f107 0420 	add.w	r4, r7, #32
 800123e:	461d      	mov	r5, r3
 8001240:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001242:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001244:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001248:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	buttons_100ms_TaskHandle = osThreadCreate(osThread(buttons_task_100ms), NULL);
 800124c:	f107 0320 	add.w	r3, r7, #32
 8001250:	2100      	movs	r1, #0
 8001252:	4618      	mov	r0, r3
 8001254:	f005 f9d4 	bl	8006600 <osThreadCreate>
 8001258:	4603      	mov	r3, r0
 800125a:	4a22      	ldr	r2, [pc, #136]	@ (80012e4 <main+0x13c>)
 800125c:	6013      	str	r3, [r2, #0]

	osThreadDef(buttons_task_500ms, buttons_500ms, osPriorityNormal, 0, 512);
 800125e:	4b22      	ldr	r3, [pc, #136]	@ (80012e8 <main+0x140>)
 8001260:	1d3c      	adds	r4, r7, #4
 8001262:	461d      	mov	r5, r3
 8001264:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001266:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001268:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800126c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		buttons_500ms_TaskHandle = osThreadCreate(osThread(buttons_task_500ms), NULL);
 8001270:	1d3b      	adds	r3, r7, #4
 8001272:	2100      	movs	r1, #0
 8001274:	4618      	mov	r0, r3
 8001276:	f005 f9c3 	bl	8006600 <osThreadCreate>
 800127a:	4603      	mov	r3, r0
 800127c:	4a1b      	ldr	r2, [pc, #108]	@ (80012ec <main+0x144>)
 800127e:	6013      	str	r3, [r2, #0]
//		osThreadId RightSignalTaskHandle;
//		osThreadId HazardTaskHandle;
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001280:	f000 f9c0 	bl	8001604 <MX_GPIO_Init>
	MX_ADC1_Init();
 8001284:	f000 f892 	bl	80013ac <MX_ADC1_Init>
	MX_DMA_Init();
 8001288:	f000 f978 	bl	800157c <MX_DMA_Init>
	MX_USART2_UART_Init();
 800128c:	f000 f946 	bl	800151c <MX_USART2_UART_Init>
	MX_CAN_Init();
 8001290:	f000 f8f0 	bl	8001474 <MX_CAN_Init>

	/* USER CODE BEGIN 2 */
	HAL_CAN_Start(&hcan);
 8001294:	4816      	ldr	r0, [pc, #88]	@ (80012f0 <main+0x148>)
 8001296:	f001 fe10 	bl	8002eba <HAL_CAN_Start>

	if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING)
 800129a:	2102      	movs	r1, #2
 800129c:	4814      	ldr	r0, [pc, #80]	@ (80012f0 <main+0x148>)
 800129e:	f002 f842 	bl	8003326 <HAL_CAN_ActivateNotification>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <main+0x104>
			!= HAL_OK) {
		Error_Handler();
 80012a8:	f000 fb12 	bl	80018d0 <Error_Handler>
	}

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc_buf, ADC_BUF_LEN);
 80012ac:	2204      	movs	r2, #4
 80012ae:	4911      	ldr	r1, [pc, #68]	@ (80012f4 <main+0x14c>)
 80012b0:	4811      	ldr	r0, [pc, #68]	@ (80012f8 <main+0x150>)
 80012b2:	f000 ffbf 	bl	8002234 <HAL_ADC_Start_DMA>
	/* add threads, ... */

	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 80012b6:	f005 f99c 	bl	80065f2 <osKernelStart>
	Enable_DMA_Interrupts();
 80012ba:	f000 fac1 	bl	8001840 <Enable_DMA_Interrupts>

	/* We should never get here as control is now taken by the scheduler */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 80012be:	bf00      	nop
 80012c0:	e7fd      	b.n	80012be <main+0x116>
 80012c2:	bf00      	nop
 80012c4:	20000650 	.word	0x20000650
 80012c8:	0800af9c 	.word	0x0800af9c
 80012cc:	2000063c 	.word	0x2000063c
 80012d0:	0800afc4 	.word	0x0800afc4
 80012d4:	20000640 	.word	0x20000640
 80012d8:	0800afec 	.word	0x0800afec
 80012dc:	20000644 	.word	0x20000644
 80012e0:	0800b01c 	.word	0x0800b01c
 80012e4:	20000648 	.word	0x20000648
 80012e8:	0800b04c 	.word	0x0800b04c
 80012ec:	2000064c 	.word	0x2000064c
 80012f0:	20000580 	.word	0x20000580
 80012f4:	20000634 	.word	0x20000634
 80012f8:	200004ec 	.word	0x200004ec

080012fc <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b09c      	sub	sp, #112	@ 0x70
 8001300:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001302:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001306:	2228      	movs	r2, #40	@ 0x28
 8001308:	2100      	movs	r1, #0
 800130a:	4618      	mov	r0, r3
 800130c:	f007 fd07 	bl	8008d1e <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001310:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	605a      	str	r2, [r3, #4]
 800131a:	609a      	str	r2, [r3, #8]
 800131c:	60da      	str	r2, [r3, #12]
 800131e:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8001320:	463b      	mov	r3, r7
 8001322:	2234      	movs	r2, #52	@ 0x34
 8001324:	2100      	movs	r1, #0
 8001326:	4618      	mov	r0, r3
 8001328:	f007 fcf9 	bl	8008d1e <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800132c:	2302      	movs	r3, #2
 800132e:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001330:	2301      	movs	r3, #1
 8001332:	65bb      	str	r3, [r7, #88]	@ 0x58
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001334:	2310      	movs	r3, #16
 8001336:	65fb      	str	r3, [r7, #92]	@ 0x5c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001338:	2302      	movs	r3, #2
 800133a:	667b      	str	r3, [r7, #100]	@ 0x64
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800133c:	2300      	movs	r3, #0
 800133e:	66bb      	str	r3, [r7, #104]	@ 0x68
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001340:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8001344:	66fb      	str	r3, [r7, #108]	@ 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001346:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800134a:	4618      	mov	r0, r3
 800134c:	f002 fe76 	bl	800403c <HAL_RCC_OscConfig>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <SystemClock_Config+0x5e>
		Error_Handler();
 8001356:	f000 fabb 	bl	80018d0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800135a:	230f      	movs	r3, #15
 800135c:	637b      	str	r3, [r7, #52]	@ 0x34
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800135e:	2302      	movs	r3, #2
 8001360:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001362:	2300      	movs	r3, #0
 8001364:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001366:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800136a:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800136c:	2300      	movs	r3, #0
 800136e:	647b      	str	r3, [r7, #68]	@ 0x44

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001370:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001374:	2102      	movs	r1, #2
 8001376:	4618      	mov	r0, r3
 8001378:	f003 fe9e 	bl	80050b8 <HAL_RCC_ClockConfig>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <SystemClock_Config+0x8a>
		Error_Handler();
 8001382:	f000 faa5 	bl	80018d0 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC1;
 8001386:	2380      	movs	r3, #128	@ 0x80
 8001388:	603b      	str	r3, [r7, #0]
	PeriphClkInit.Adc1ClockSelection = RCC_ADC1PLLCLK_DIV1;
 800138a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800138e:	61bb      	str	r3, [r7, #24]

	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8001390:	463b      	mov	r3, r7
 8001392:	4618      	mov	r0, r3
 8001394:	f004 f8e2 	bl	800555c <HAL_RCCEx_PeriphCLKConfig>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <SystemClock_Config+0xa6>
		Error_Handler();
 800139e:	f000 fa97 	bl	80018d0 <Error_Handler>
	}
}
 80013a2:	bf00      	nop
 80013a4:	3770      	adds	r7, #112	@ 0x70
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
	...

080013ac <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b086      	sub	sp, #24
 80013b0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 80013b2:	463b      	mov	r3, r7
 80013b4:	2200      	movs	r2, #0
 80013b6:	601a      	str	r2, [r3, #0]
 80013b8:	605a      	str	r2, [r3, #4]
 80013ba:	609a      	str	r2, [r3, #8]
 80013bc:	60da      	str	r2, [r3, #12]
 80013be:	611a      	str	r2, [r3, #16]
 80013c0:	615a      	str	r2, [r3, #20]
	__HAL_LINKDMA(&hadc1, DMA_Handle, hdma_adc1);
 80013c2:	4b2a      	ldr	r3, [pc, #168]	@ (800146c <MX_ADC1_Init+0xc0>)
 80013c4:	4a2a      	ldr	r2, [pc, #168]	@ (8001470 <MX_ADC1_Init+0xc4>)
 80013c6:	639a      	str	r2, [r3, #56]	@ 0x38
 80013c8:	4b29      	ldr	r3, [pc, #164]	@ (8001470 <MX_ADC1_Init+0xc4>)
 80013ca:	4a28      	ldr	r2, [pc, #160]	@ (800146c <MX_ADC1_Init+0xc0>)
 80013cc:	625a      	str	r2, [r3, #36]	@ 0x24

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 80013ce:	4b27      	ldr	r3, [pc, #156]	@ (800146c <MX_ADC1_Init+0xc0>)
 80013d0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80013d4:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80013d6:	4b25      	ldr	r3, [pc, #148]	@ (800146c <MX_ADC1_Init+0xc0>)
 80013d8:	2200      	movs	r2, #0
 80013da:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80013dc:	4b23      	ldr	r3, [pc, #140]	@ (800146c <MX_ADC1_Init+0xc0>)
 80013de:	2200      	movs	r2, #0
 80013e0:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80013e2:	4b22      	ldr	r3, [pc, #136]	@ (800146c <MX_ADC1_Init+0xc0>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 80013e8:	4b20      	ldr	r3, [pc, #128]	@ (800146c <MX_ADC1_Init+0xc0>)
 80013ea:	2201      	movs	r2, #1
 80013ec:	765a      	strb	r2, [r3, #25]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80013ee:	4b1f      	ldr	r3, [pc, #124]	@ (800146c <MX_ADC1_Init+0xc0>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013f6:	4b1d      	ldr	r3, [pc, #116]	@ (800146c <MX_ADC1_Init+0xc0>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	62da      	str	r2, [r3, #44]	@ 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013fc:	4b1b      	ldr	r3, [pc, #108]	@ (800146c <MX_ADC1_Init+0xc0>)
 80013fe:	2201      	movs	r2, #1
 8001400:	629a      	str	r2, [r3, #40]	@ 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001402:	4b1a      	ldr	r3, [pc, #104]	@ (800146c <MX_ADC1_Init+0xc0>)
 8001404:	2200      	movs	r2, #0
 8001406:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 8001408:	4b18      	ldr	r3, [pc, #96]	@ (800146c <MX_ADC1_Init+0xc0>)
 800140a:	2201      	movs	r2, #1
 800140c:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = ENABLE;
 800140e:	4b17      	ldr	r3, [pc, #92]	@ (800146c <MX_ADC1_Init+0xc0>)
 8001410:	2201      	movs	r2, #1
 8001412:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001416:	4b15      	ldr	r3, [pc, #84]	@ (800146c <MX_ADC1_Init+0xc0>)
 8001418:	2204      	movs	r2, #4
 800141a:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 800141c:	4b13      	ldr	r3, [pc, #76]	@ (800146c <MX_ADC1_Init+0xc0>)
 800141e:	2200      	movs	r2, #0
 8001420:	761a      	strb	r2, [r3, #24]
	hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001422:	4b12      	ldr	r3, [pc, #72]	@ (800146c <MX_ADC1_Init+0xc0>)
 8001424:	2200      	movs	r2, #0
 8001426:	635a      	str	r2, [r3, #52]	@ 0x34
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8001428:	4810      	ldr	r0, [pc, #64]	@ (800146c <MX_ADC1_Init+0xc0>)
 800142a:	f000 fd7d 	bl	8001f28 <HAL_ADC_Init>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <MX_ADC1_Init+0x8c>
		Error_Handler();
 8001434:	f000 fa4c 	bl	80018d0 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 8001438:	2301      	movs	r3, #1
 800143a:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800143c:	2301      	movs	r3, #1
 800143e:	607b      	str	r3, [r7, #4]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001440:	2300      	movs	r3, #0
 8001442:	60fb      	str	r3, [r7, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLE_5;
 8001444:	2301      	movs	r3, #1
 8001446:	60bb      	str	r3, [r7, #8]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001448:	2300      	movs	r3, #0
 800144a:	613b      	str	r3, [r7, #16]
	sConfig.Offset = 0;
 800144c:	2300      	movs	r3, #0
 800144e:	617b      	str	r3, [r7, #20]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001450:	463b      	mov	r3, r7
 8001452:	4619      	mov	r1, r3
 8001454:	4805      	ldr	r0, [pc, #20]	@ (800146c <MX_ADC1_Init+0xc0>)
 8001456:	f000 ff89 	bl	800236c <HAL_ADC_ConfigChannel>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <MX_ADC1_Init+0xb8>
		Error_Handler();
 8001460:	f000 fa36 	bl	80018d0 <Error_Handler>
//  }
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8001464:	bf00      	nop
 8001466:	3718      	adds	r7, #24
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	200004ec 	.word	0x200004ec
 8001470:	2000053c 	.word	0x2000053c

08001474 <MX_CAN_Init>:
/**
 * @brief CAN Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN_Init(void) {
 8001474:	b580      	push	{r7, lr}
 8001476:	b08a      	sub	sp, #40	@ 0x28
 8001478:	af00      	add	r7, sp, #0
	/* USER CODE END CAN_Init 0 */

	/* USER CODE BEGIN CAN_Init 1 */

	/* USER CODE END CAN_Init 1 */
	hcan.Instance = CAN;
 800147a:	4b26      	ldr	r3, [pc, #152]	@ (8001514 <MX_CAN_Init+0xa0>)
 800147c:	4a26      	ldr	r2, [pc, #152]	@ (8001518 <MX_CAN_Init+0xa4>)
 800147e:	601a      	str	r2, [r3, #0]
	hcan.Init.Prescaler = 8;
 8001480:	4b24      	ldr	r3, [pc, #144]	@ (8001514 <MX_CAN_Init+0xa0>)
 8001482:	2208      	movs	r2, #8
 8001484:	605a      	str	r2, [r3, #4]
	hcan.Init.Mode = CAN_MODE_LOOPBACK;
 8001486:	4b23      	ldr	r3, [pc, #140]	@ (8001514 <MX_CAN_Init+0xa0>)
 8001488:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800148c:	609a      	str	r2, [r3, #8]
	hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800148e:	4b21      	ldr	r3, [pc, #132]	@ (8001514 <MX_CAN_Init+0xa0>)
 8001490:	2200      	movs	r2, #0
 8001492:	60da      	str	r2, [r3, #12]
	hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 8001494:	4b1f      	ldr	r3, [pc, #124]	@ (8001514 <MX_CAN_Init+0xa0>)
 8001496:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800149a:	611a      	str	r2, [r3, #16]
	hcan.Init.TimeSeg2 = CAN_BS2_5TQ;
 800149c:	4b1d      	ldr	r3, [pc, #116]	@ (8001514 <MX_CAN_Init+0xa0>)
 800149e:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80014a2:	615a      	str	r2, [r3, #20]
	hcan.Init.TimeTriggeredMode = DISABLE;
 80014a4:	4b1b      	ldr	r3, [pc, #108]	@ (8001514 <MX_CAN_Init+0xa0>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	761a      	strb	r2, [r3, #24]
	hcan.Init.AutoBusOff = DISABLE;
 80014aa:	4b1a      	ldr	r3, [pc, #104]	@ (8001514 <MX_CAN_Init+0xa0>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	765a      	strb	r2, [r3, #25]
	hcan.Init.AutoWakeUp = DISABLE;
 80014b0:	4b18      	ldr	r3, [pc, #96]	@ (8001514 <MX_CAN_Init+0xa0>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	769a      	strb	r2, [r3, #26]
	hcan.Init.AutoRetransmission = DISABLE;
 80014b6:	4b17      	ldr	r3, [pc, #92]	@ (8001514 <MX_CAN_Init+0xa0>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	76da      	strb	r2, [r3, #27]
	hcan.Init.ReceiveFifoLocked = DISABLE;
 80014bc:	4b15      	ldr	r3, [pc, #84]	@ (8001514 <MX_CAN_Init+0xa0>)
 80014be:	2200      	movs	r2, #0
 80014c0:	771a      	strb	r2, [r3, #28]
	hcan.Init.TransmitFifoPriority = DISABLE;
 80014c2:	4b14      	ldr	r3, [pc, #80]	@ (8001514 <MX_CAN_Init+0xa0>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan) != HAL_OK) {
 80014c8:	4812      	ldr	r0, [pc, #72]	@ (8001514 <MX_CAN_Init+0xa0>)
 80014ca:	f001 fb31 	bl	8002b30 <HAL_CAN_Init>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <MX_CAN_Init+0x64>
		Error_Handler();
 80014d4:	f000 f9fc 	bl	80018d0 <Error_Handler>

	//Set a up a filter
	//Allow all messages to pass through from any ID
	CAN_FilterTypeDef canfilterconfig;

	canfilterconfig.FilterActivation = ENABLE;
 80014d8:	2301      	movs	r3, #1
 80014da:	623b      	str	r3, [r7, #32]
	canfilterconfig.FilterBank = 0;
 80014dc:	2300      	movs	r3, #0
 80014de:	617b      	str	r3, [r7, #20]
	canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80014e0:	2300      	movs	r3, #0
 80014e2:	613b      	str	r3, [r7, #16]
	canfilterconfig.FilterIdHigh = 0x0000;
 80014e4:	2300      	movs	r3, #0
 80014e6:	603b      	str	r3, [r7, #0]
	canfilterconfig.FilterIdLow = 0x0000;
 80014e8:	2300      	movs	r3, #0
 80014ea:	607b      	str	r3, [r7, #4]
	canfilterconfig.FilterMaskIdHigh = 0x0000;
 80014ec:	2300      	movs	r3, #0
 80014ee:	60bb      	str	r3, [r7, #8]
	canfilterconfig.FilterMaskIdLow = 0x0000;
 80014f0:	2300      	movs	r3, #0
 80014f2:	60fb      	str	r3, [r7, #12]
	canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80014f4:	2300      	movs	r3, #0
 80014f6:	61bb      	str	r3, [r7, #24]
	canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80014f8:	2301      	movs	r3, #1
 80014fa:	61fb      	str	r3, [r7, #28]
	canfilterconfig.SlaveStartFilterBank = 14;
 80014fc:	230e      	movs	r3, #14
 80014fe:	627b      	str	r3, [r7, #36]	@ 0x24

	HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 8001500:	463b      	mov	r3, r7
 8001502:	4619      	mov	r1, r3
 8001504:	4803      	ldr	r0, [pc, #12]	@ (8001514 <MX_CAN_Init+0xa0>)
 8001506:	f001 fc0e 	bl	8002d26 <HAL_CAN_ConfigFilter>

	/* USER CODE END CAN_Init 2 */

}
 800150a:	bf00      	nop
 800150c:	3728      	adds	r7, #40	@ 0x28
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	20000580 	.word	0x20000580
 8001518:	40006400 	.word	0x40006400

0800151c <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001520:	4b14      	ldr	r3, [pc, #80]	@ (8001574 <MX_USART2_UART_Init+0x58>)
 8001522:	4a15      	ldr	r2, [pc, #84]	@ (8001578 <MX_USART2_UART_Init+0x5c>)
 8001524:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 57600;
 8001526:	4b13      	ldr	r3, [pc, #76]	@ (8001574 <MX_USART2_UART_Init+0x58>)
 8001528:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 800152c:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800152e:	4b11      	ldr	r3, [pc, #68]	@ (8001574 <MX_USART2_UART_Init+0x58>)
 8001530:	2200      	movs	r2, #0
 8001532:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001534:	4b0f      	ldr	r3, [pc, #60]	@ (8001574 <MX_USART2_UART_Init+0x58>)
 8001536:	2200      	movs	r2, #0
 8001538:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800153a:	4b0e      	ldr	r3, [pc, #56]	@ (8001574 <MX_USART2_UART_Init+0x58>)
 800153c:	2200      	movs	r2, #0
 800153e:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001540:	4b0c      	ldr	r3, [pc, #48]	@ (8001574 <MX_USART2_UART_Init+0x58>)
 8001542:	220c      	movs	r2, #12
 8001544:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001546:	4b0b      	ldr	r3, [pc, #44]	@ (8001574 <MX_USART2_UART_Init+0x58>)
 8001548:	2200      	movs	r2, #0
 800154a:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800154c:	4b09      	ldr	r3, [pc, #36]	@ (8001574 <MX_USART2_UART_Init+0x58>)
 800154e:	2200      	movs	r2, #0
 8001550:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001552:	4b08      	ldr	r3, [pc, #32]	@ (8001574 <MX_USART2_UART_Init+0x58>)
 8001554:	2200      	movs	r2, #0
 8001556:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001558:	4b06      	ldr	r3, [pc, #24]	@ (8001574 <MX_USART2_UART_Init+0x58>)
 800155a:	2200      	movs	r2, #0
 800155c:	625a      	str	r2, [r3, #36]	@ 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 800155e:	4805      	ldr	r0, [pc, #20]	@ (8001574 <MX_USART2_UART_Init+0x58>)
 8001560:	f004 fc06 	bl	8005d70 <HAL_UART_Init>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <MX_USART2_UART_Init+0x52>
		Error_Handler();
 800156a:	f000 f9b1 	bl	80018d0 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 800156e:	bf00      	nop
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	200005a8 	.word	0x200005a8
 8001578:	40004400 	.word	0x40004400

0800157c <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
//	/* DMA interrupt init */
//	/* DMA1_Channel1_IRQn interrupt configuration */
//	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
//	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001582:	4b1c      	ldr	r3, [pc, #112]	@ (80015f4 <MX_DMA_Init+0x78>)
 8001584:	695b      	ldr	r3, [r3, #20]
 8001586:	4a1b      	ldr	r2, [pc, #108]	@ (80015f4 <MX_DMA_Init+0x78>)
 8001588:	f043 0301 	orr.w	r3, r3, #1
 800158c:	6153      	str	r3, [r2, #20]
 800158e:	4b19      	ldr	r3, [pc, #100]	@ (80015f4 <MX_DMA_Init+0x78>)
 8001590:	695b      	ldr	r3, [r3, #20]
 8001592:	f003 0301 	and.w	r3, r3, #1
 8001596:	607b      	str	r3, [r7, #4]
 8001598:	687b      	ldr	r3, [r7, #4]

	/* Configure DMA for ADC1 */
	hdma_adc1.Instance = DMA1_Channel1; // replace if using a different channel
 800159a:	4b17      	ldr	r3, [pc, #92]	@ (80015f8 <MX_DMA_Init+0x7c>)
 800159c:	4a17      	ldr	r2, [pc, #92]	@ (80015fc <MX_DMA_Init+0x80>)
 800159e:	601a      	str	r2, [r3, #0]
	hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015a0:	4b15      	ldr	r3, [pc, #84]	@ (80015f8 <MX_DMA_Init+0x7c>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	605a      	str	r2, [r3, #4]
	hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80015a6:	4b14      	ldr	r3, [pc, #80]	@ (80015f8 <MX_DMA_Init+0x7c>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	609a      	str	r2, [r3, #8]
	hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80015ac:	4b12      	ldr	r3, [pc, #72]	@ (80015f8 <MX_DMA_Init+0x7c>)
 80015ae:	2280      	movs	r2, #128	@ 0x80
 80015b0:	60da      	str	r2, [r3, #12]
	hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80015b2:	4b11      	ldr	r3, [pc, #68]	@ (80015f8 <MX_DMA_Init+0x7c>)
 80015b4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80015b8:	611a      	str	r2, [r3, #16]
	hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80015ba:	4b0f      	ldr	r3, [pc, #60]	@ (80015f8 <MX_DMA_Init+0x7c>)
 80015bc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80015c0:	615a      	str	r2, [r3, #20]
	hdma_adc1.Init.Mode = DMA_CIRCULAR; // 🔁 circular buffer
 80015c2:	4b0d      	ldr	r3, [pc, #52]	@ (80015f8 <MX_DMA_Init+0x7c>)
 80015c4:	2220      	movs	r2, #32
 80015c6:	619a      	str	r2, [r3, #24]
	hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80015c8:	4b0b      	ldr	r3, [pc, #44]	@ (80015f8 <MX_DMA_Init+0x7c>)
 80015ca:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80015ce:	61da      	str	r2, [r3, #28]

	if (HAL_DMA_Init(&hdma_adc1) != HAL_OK) {
 80015d0:	4809      	ldr	r0, [pc, #36]	@ (80015f8 <MX_DMA_Init+0x7c>)
 80015d2:	f002 f9df 	bl	8003994 <HAL_DMA_Init>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <MX_DMA_Init+0x64>
		Error_Handler();
 80015dc:	f000 f978 	bl	80018d0 <Error_Handler>
	}

	// Link DMA to ADC
	__HAL_LINKDMA(&hadc1, DMA_Handle, hdma_adc1);
 80015e0:	4b07      	ldr	r3, [pc, #28]	@ (8001600 <MX_DMA_Init+0x84>)
 80015e2:	4a05      	ldr	r2, [pc, #20]	@ (80015f8 <MX_DMA_Init+0x7c>)
 80015e4:	639a      	str	r2, [r3, #56]	@ 0x38
 80015e6:	4b04      	ldr	r3, [pc, #16]	@ (80015f8 <MX_DMA_Init+0x7c>)
 80015e8:	4a05      	ldr	r2, [pc, #20]	@ (8001600 <MX_DMA_Init+0x84>)
 80015ea:	625a      	str	r2, [r3, #36]	@ 0x24

	/* DMA interrupt init */
//    HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
//    HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
}
 80015ec:	bf00      	nop
 80015ee:	3708      	adds	r7, #8
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	40021000 	.word	0x40021000
 80015f8:	2000053c 	.word	0x2000053c
 80015fc:	40020008 	.word	0x40020008
 8001600:	200004ec 	.word	0x200004ec

08001604 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001604:	b580      	push	{r7, lr}
 8001606:	b08a      	sub	sp, #40	@ 0x28
 8001608:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800160a:	f107 0314 	add.w	r3, r7, #20
 800160e:	2200      	movs	r2, #0
 8001610:	601a      	str	r2, [r3, #0]
 8001612:	605a      	str	r2, [r3, #4]
 8001614:	609a      	str	r2, [r3, #8]
 8001616:	60da      	str	r2, [r3, #12]
 8001618:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800161a:	4b86      	ldr	r3, [pc, #536]	@ (8001834 <MX_GPIO_Init+0x230>)
 800161c:	695b      	ldr	r3, [r3, #20]
 800161e:	4a85      	ldr	r2, [pc, #532]	@ (8001834 <MX_GPIO_Init+0x230>)
 8001620:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001624:	6153      	str	r3, [r2, #20]
 8001626:	4b83      	ldr	r3, [pc, #524]	@ (8001834 <MX_GPIO_Init+0x230>)
 8001628:	695b      	ldr	r3, [r3, #20]
 800162a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800162e:	613b      	str	r3, [r7, #16]
 8001630:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8001632:	4b80      	ldr	r3, [pc, #512]	@ (8001834 <MX_GPIO_Init+0x230>)
 8001634:	695b      	ldr	r3, [r3, #20]
 8001636:	4a7f      	ldr	r2, [pc, #508]	@ (8001834 <MX_GPIO_Init+0x230>)
 8001638:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800163c:	6153      	str	r3, [r2, #20]
 800163e:	4b7d      	ldr	r3, [pc, #500]	@ (8001834 <MX_GPIO_Init+0x230>)
 8001640:	695b      	ldr	r3, [r3, #20]
 8001642:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001646:	60fb      	str	r3, [r7, #12]
 8001648:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800164a:	4b7a      	ldr	r3, [pc, #488]	@ (8001834 <MX_GPIO_Init+0x230>)
 800164c:	695b      	ldr	r3, [r3, #20]
 800164e:	4a79      	ldr	r2, [pc, #484]	@ (8001834 <MX_GPIO_Init+0x230>)
 8001650:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001654:	6153      	str	r3, [r2, #20]
 8001656:	4b77      	ldr	r3, [pc, #476]	@ (8001834 <MX_GPIO_Init+0x230>)
 8001658:	695b      	ldr	r3, [r3, #20]
 800165a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800165e:	60bb      	str	r3, [r7, #8]
 8001660:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001662:	4b74      	ldr	r3, [pc, #464]	@ (8001834 <MX_GPIO_Init+0x230>)
 8001664:	695b      	ldr	r3, [r3, #20]
 8001666:	4a73      	ldr	r2, [pc, #460]	@ (8001834 <MX_GPIO_Init+0x230>)
 8001668:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800166c:	6153      	str	r3, [r2, #20]
 800166e:	4b71      	ldr	r3, [pc, #452]	@ (8001834 <MX_GPIO_Init+0x230>)
 8001670:	695b      	ldr	r3, [r3, #20]
 8001672:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001676:	607b      	str	r3, [r7, #4]
 8001678:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800167a:	2200      	movs	r2, #0
 800167c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001680:	486d      	ldr	r0, [pc, #436]	@ (8001838 <MX_GPIO_Init+0x234>)
 8001682:	f002 fca9 	bl	8003fd8 <HAL_GPIO_WritePin>

	// default pins
	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8001686:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800168a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800168c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001690:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001692:	2300      	movs	r3, #0
 8001694:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001696:	f107 0314 	add.w	r3, r7, #20
 800169a:	4619      	mov	r1, r3
 800169c:	4867      	ldr	r0, [pc, #412]	@ (800183c <MX_GPIO_Init+0x238>)
 800169e:	f002 fb11 	bl	8003cc4 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 80016a2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80016a6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016a8:	2301      	movs	r3, #1
 80016aa:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ac:	2300      	movs	r3, #0
 80016ae:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b0:	2300      	movs	r3, #0
 80016b2:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80016b4:	f107 0314 	add.w	r3, r7, #20
 80016b8:	4619      	mov	r1, r3
 80016ba:	485f      	ldr	r0, [pc, #380]	@ (8001838 <MX_GPIO_Init+0x234>)
 80016bc:	f002 fb02 	bl	8003cc4 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	//////////////////////////////////////////
	// Gear selection pins
	/*Configure GPIO pin : Drive_Pin */
	GPIO_InitStruct.Pin = Drive_Pin;
 80016c0:	2380      	movs	r3, #128	@ 0x80
 80016c2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016c4:	2300      	movs	r3, #0
 80016c6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016c8:	2301      	movs	r3, #1
 80016ca:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016cc:	2300      	movs	r3, #0
 80016ce:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(Drive_GPIO_Port, &GPIO_InitStruct);
 80016d0:	f107 0314 	add.w	r3, r7, #20
 80016d4:	4619      	mov	r1, r3
 80016d6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016da:	f002 faf3 	bl	8003cc4 <HAL_GPIO_Init>

	/*Configure GPIO pin : Neutral_Pin */
	GPIO_InitStruct.Pin = Neutral_Pin;
 80016de:	2340      	movs	r3, #64	@ 0x40
 80016e0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016e2:	2300      	movs	r3, #0
 80016e4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016e6:	2301      	movs	r3, #1
 80016e8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ea:	2300      	movs	r3, #0
 80016ec:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ee:	f107 0314 	add.w	r3, r7, #20
 80016f2:	4619      	mov	r1, r3
 80016f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016f8:	f002 fae4 	bl	8003cc4 <HAL_GPIO_Init>

	/*Configure GPIO pin : Reverse_Pin */
	GPIO_InitStruct.Pin = Reverse_Pin;
 80016fc:	2320      	movs	r3, #32
 80016fe:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001700:	2300      	movs	r3, #0
 8001702:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001704:	2301      	movs	r3, #1
 8001706:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001708:	2300      	movs	r3, #0
 800170a:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800170c:	f107 0314 	add.w	r3, r7, #20
 8001710:	4619      	mov	r1, r3
 8001712:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001716:	f002 fad5 	bl	8003cc4 <HAL_GPIO_Init>

	//////////////////////////////////////////
	// Button input pins

	GPIO_InitStruct.Pin = BrakePedal_in_Pin;
 800171a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800171e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001720:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8001724:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001726:	2301      	movs	r3, #1
 8001728:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800172a:	2300      	movs	r3, #0
 800172c:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(BrakePedal_in_GPIO_Port, &GPIO_InitStruct);
 800172e:	f107 0314 	add.w	r3, r7, #20
 8001732:	4619      	mov	r1, r3
 8001734:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001738:	f002 fac4 	bl	8003cc4 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = L_SignalLight_in_Pin;
 800173c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001740:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001742:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8001746:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001748:	2301      	movs	r3, #1
 800174a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800174c:	2300      	movs	r3, #0
 800174e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(L_SignalLight_in_GPIO_Port, &GPIO_InitStruct);
 8001750:	f107 0314 	add.w	r3, r7, #20
 8001754:	4619      	mov	r1, r3
 8001756:	4838      	ldr	r0, [pc, #224]	@ (8001838 <MX_GPIO_Init+0x234>)
 8001758:	f002 fab4 	bl	8003cc4 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = R_SignalLight_in_Pin;
 800175c:	2302      	movs	r3, #2
 800175e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001760:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8001764:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001766:	2301      	movs	r3, #1
 8001768:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800176a:	2300      	movs	r3, #0
 800176c:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(R_SignalLight_in_GPIO_Port, &GPIO_InitStruct);
 800176e:	f107 0314 	add.w	r3, r7, #20
 8001772:	4619      	mov	r1, r3
 8001774:	4830      	ldr	r0, [pc, #192]	@ (8001838 <MX_GPIO_Init+0x234>)
 8001776:	f002 faa5 	bl	8003cc4 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = Hazard_in_Pin;
 800177a:	2301      	movs	r3, #1
 800177c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800177e:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8001782:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001784:	2301      	movs	r3, #1
 8001786:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001788:	2300      	movs	r3, #0
 800178a:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(Hazard_in_GPIO_Port, &GPIO_InitStruct);
 800178c:	f107 0314 	add.w	r3, r7, #20
 8001790:	4619      	mov	r1, r3
 8001792:	482a      	ldr	r0, [pc, #168]	@ (800183c <MX_GPIO_Init+0x238>)
 8001794:	f002 fa96 	bl	8003cc4 <HAL_GPIO_Init>

	//////////////////////////////////////////
	// pins providing output to lights
	GPIO_InitStruct.Pin = BrakeLight_out_Pin;
 8001798:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800179c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800179e:	2301      	movs	r3, #1
 80017a0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a2:	2300      	movs	r3, #0
 80017a4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a6:	2300      	movs	r3, #0
 80017a8:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(BrakeLight_out_GPIO_Port, &GPIO_InitStruct);
 80017aa:	f107 0314 	add.w	r3, r7, #20
 80017ae:	4619      	mov	r1, r3
 80017b0:	4822      	ldr	r0, [pc, #136]	@ (800183c <MX_GPIO_Init+0x238>)
 80017b2:	f002 fa87 	bl	8003cc4 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = L_SignalLight_out_Pin;
 80017b6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80017ba:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017bc:	2301      	movs	r3, #1
 80017be:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c0:	2300      	movs	r3, #0
 80017c2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c4:	2300      	movs	r3, #0
 80017c6:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(L_SignalLight_out_GPIO_Port, &GPIO_InitStruct);
 80017c8:	f107 0314 	add.w	r3, r7, #20
 80017cc:	4619      	mov	r1, r3
 80017ce:	481a      	ldr	r0, [pc, #104]	@ (8001838 <MX_GPIO_Init+0x234>)
 80017d0:	f002 fa78 	bl	8003cc4 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = R_SignalLight_out_Pin;
 80017d4:	2340      	movs	r3, #64	@ 0x40
 80017d6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017d8:	2301      	movs	r3, #1
 80017da:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017dc:	2300      	movs	r3, #0
 80017de:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e0:	2300      	movs	r3, #0
 80017e2:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(R_SignalLight_out_GPIO_Port, &GPIO_InitStruct);
 80017e4:	f107 0314 	add.w	r3, r7, #20
 80017e8:	4619      	mov	r1, r3
 80017ea:	4814      	ldr	r0, [pc, #80]	@ (800183c <MX_GPIO_Init+0x238>)
 80017ec:	f002 fa6a 	bl	8003cc4 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = DRLLeft_out_Pin;
 80017f0:	2320      	movs	r3, #32
 80017f2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017f4:	2301      	movs	r3, #1
 80017f6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f8:	2300      	movs	r3, #0
 80017fa:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017fc:	2300      	movs	r3, #0
 80017fe:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(DRLLeft_out_GPIO_Port, &GPIO_InitStruct);
 8001800:	f107 0314 	add.w	r3, r7, #20
 8001804:	4619      	mov	r1, r3
 8001806:	480d      	ldr	r0, [pc, #52]	@ (800183c <MX_GPIO_Init+0x238>)
 8001808:	f002 fa5c 	bl	8003cc4 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = DRLRight_out_Pin;
 800180c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001810:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001812:	2301      	movs	r3, #1
 8001814:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001816:	2300      	movs	r3, #0
 8001818:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800181a:	2300      	movs	r3, #0
 800181c:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(DRLLeft_out_GPIO_Port, &GPIO_InitStruct);
 800181e:	f107 0314 	add.w	r3, r7, #20
 8001822:	4619      	mov	r1, r3
 8001824:	4805      	ldr	r0, [pc, #20]	@ (800183c <MX_GPIO_Init+0x238>)
 8001826:	f002 fa4d 	bl	8003cc4 <HAL_GPIO_Init>

	////////////////////////////////////////

	/* USER CODE END MX_GPIO_Init_2 */
}
 800182a:	bf00      	nop
 800182c:	3728      	adds	r7, #40	@ 0x28
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	40021000 	.word	0x40021000
 8001838:	48000400 	.word	0x48000400
 800183c:	48000800 	.word	0x48000800

08001840 <Enable_DMA_Interrupts>:

/* USER CODE BEGIN 4 */

/* Enable DMA interrupts after RTOS is running */
void Enable_DMA_Interrupts(void) {
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
	/* Give time for RTOS to stabilize */
	osDelay(100);
 8001844:	2064      	movs	r0, #100	@ 0x64
 8001846:	f004 ff27 	bl	8006698 <osDelay>

	/* Configure at lowest priority */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 15, 0); // Lowest priority
 800184a:	2200      	movs	r2, #0
 800184c:	210f      	movs	r1, #15
 800184e:	200b      	movs	r0, #11
 8001850:	f002 f876 	bl	8003940 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001854:	200b      	movs	r0, #11
 8001856:	f002 f88f 	bl	8003978 <HAL_NVIC_EnableIRQ>

	/* Activate ADC DMA with interrupts */
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc_buf, ADC_BUF_LEN);
 800185a:	2204      	movs	r2, #4
 800185c:	4904      	ldr	r1, [pc, #16]	@ (8001870 <Enable_DMA_Interrupts+0x30>)
 800185e:	4805      	ldr	r0, [pc, #20]	@ (8001874 <Enable_DMA_Interrupts+0x34>)
 8001860:	f000 fce8 	bl	8002234 <HAL_ADC_Start_DMA>

	dma_interrupts_enabled = 1;
 8001864:	4b04      	ldr	r3, [pc, #16]	@ (8001878 <Enable_DMA_Interrupts+0x38>)
 8001866:	2201      	movs	r2, #1
 8001868:	701a      	strb	r2, [r3, #0]
}
 800186a:	bf00      	nop
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	20000634 	.word	0x20000634
 8001874:	200004ec 	.word	0x200004ec
 8001878:	20000630 	.word	0x20000630

0800187c <DMA1_Channel1_IRQHandler>:

/* Modified DMA IRQ Handler */
void DMA1_Channel1_IRQHandler(void) {
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
	if (dma_interrupts_enabled) {
 8001880:	4b04      	ldr	r3, [pc, #16]	@ (8001894 <DMA1_Channel1_IRQHandler+0x18>)
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	b2db      	uxtb	r3, r3
 8001886:	2b00      	cmp	r3, #0
 8001888:	d002      	beq.n	8001890 <DMA1_Channel1_IRQHandler+0x14>
		HAL_DMA_IRQHandler(&hdma_adc1);
 800188a:	4803      	ldr	r0, [pc, #12]	@ (8001898 <DMA1_Channel1_IRQHandler+0x1c>)
 800188c:	f002 f928 	bl	8003ae0 <HAL_DMA_IRQHandler>
	}
}
 8001890:	bf00      	nop
 8001892:	bd80      	pop	{r7, pc}
 8001894:	20000630 	.word	0x20000630
 8001898:	2000053c 	.word	0x2000053c

0800189c <parked_init>:
 * @brief  Function implementing the parked thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_parked_init */
void parked_init(void const *argument) {
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 80018a4:	2001      	movs	r0, #1
 80018a6:	f004 fef7 	bl	8006698 <osDelay>
 80018aa:	e7fb      	b.n	80018a4 <parked_init+0x8>

080018ac <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1) {
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a04      	ldr	r2, [pc, #16]	@ (80018cc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d101      	bne.n	80018c2 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 80018be:	f000 faf5 	bl	8001eac <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 80018c2:	bf00      	nop
 80018c4:	3708      	adds	r7, #8
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	40012c00 	.word	0x40012c00

080018d0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018d4:	b672      	cpsid	i
}
 80018d6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80018d8:	bf00      	nop
 80018da:	e7fd      	b.n	80018d8 <Error_Handler+0x8>

080018dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018e2:	4b11      	ldr	r3, [pc, #68]	@ (8001928 <HAL_MspInit+0x4c>)
 80018e4:	699b      	ldr	r3, [r3, #24]
 80018e6:	4a10      	ldr	r2, [pc, #64]	@ (8001928 <HAL_MspInit+0x4c>)
 80018e8:	f043 0301 	orr.w	r3, r3, #1
 80018ec:	6193      	str	r3, [r2, #24]
 80018ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001928 <HAL_MspInit+0x4c>)
 80018f0:	699b      	ldr	r3, [r3, #24]
 80018f2:	f003 0301 	and.w	r3, r3, #1
 80018f6:	607b      	str	r3, [r7, #4]
 80018f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001928 <HAL_MspInit+0x4c>)
 80018fc:	69db      	ldr	r3, [r3, #28]
 80018fe:	4a0a      	ldr	r2, [pc, #40]	@ (8001928 <HAL_MspInit+0x4c>)
 8001900:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001904:	61d3      	str	r3, [r2, #28]
 8001906:	4b08      	ldr	r3, [pc, #32]	@ (8001928 <HAL_MspInit+0x4c>)
 8001908:	69db      	ldr	r3, [r3, #28]
 800190a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800190e:	603b      	str	r3, [r7, #0]
 8001910:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001912:	2200      	movs	r2, #0
 8001914:	210f      	movs	r1, #15
 8001916:	f06f 0001 	mvn.w	r0, #1
 800191a:	f002 f811 	bl	8003940 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800191e:	bf00      	nop
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	40021000 	.word	0x40021000

0800192c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b08a      	sub	sp, #40	@ 0x28
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001934:	f107 0314 	add.w	r3, r7, #20
 8001938:	2200      	movs	r2, #0
 800193a:	601a      	str	r2, [r3, #0]
 800193c:	605a      	str	r2, [r3, #4]
 800193e:	609a      	str	r2, [r3, #8]
 8001940:	60da      	str	r2, [r3, #12]
 8001942:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800194c:	d14c      	bne.n	80019e8 <HAL_ADC_MspInit+0xbc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800194e:	4b28      	ldr	r3, [pc, #160]	@ (80019f0 <HAL_ADC_MspInit+0xc4>)
 8001950:	695b      	ldr	r3, [r3, #20]
 8001952:	4a27      	ldr	r2, [pc, #156]	@ (80019f0 <HAL_ADC_MspInit+0xc4>)
 8001954:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001958:	6153      	str	r3, [r2, #20]
 800195a:	4b25      	ldr	r3, [pc, #148]	@ (80019f0 <HAL_ADC_MspInit+0xc4>)
 800195c:	695b      	ldr	r3, [r3, #20]
 800195e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001962:	613b      	str	r3, [r7, #16]
 8001964:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001966:	4b22      	ldr	r3, [pc, #136]	@ (80019f0 <HAL_ADC_MspInit+0xc4>)
 8001968:	695b      	ldr	r3, [r3, #20]
 800196a:	4a21      	ldr	r2, [pc, #132]	@ (80019f0 <HAL_ADC_MspInit+0xc4>)
 800196c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001970:	6153      	str	r3, [r2, #20]
 8001972:	4b1f      	ldr	r3, [pc, #124]	@ (80019f0 <HAL_ADC_MspInit+0xc4>)
 8001974:	695b      	ldr	r3, [r3, #20]
 8001976:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800197a:	60fb      	str	r3, [r7, #12]
 800197c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800197e:	2301      	movs	r3, #1
 8001980:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001982:	2303      	movs	r3, #3
 8001984:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001986:	2300      	movs	r3, #0
 8001988:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800198a:	f107 0314 	add.w	r3, r7, #20
 800198e:	4619      	mov	r1, r3
 8001990:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001994:	f002 f996 	bl	8003cc4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001998:	4b16      	ldr	r3, [pc, #88]	@ (80019f4 <HAL_ADC_MspInit+0xc8>)
 800199a:	4a17      	ldr	r2, [pc, #92]	@ (80019f8 <HAL_ADC_MspInit+0xcc>)
 800199c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800199e:	4b15      	ldr	r3, [pc, #84]	@ (80019f4 <HAL_ADC_MspInit+0xc8>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80019a4:	4b13      	ldr	r3, [pc, #76]	@ (80019f4 <HAL_ADC_MspInit+0xc8>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80019aa:	4b12      	ldr	r3, [pc, #72]	@ (80019f4 <HAL_ADC_MspInit+0xc8>)
 80019ac:	2280      	movs	r2, #128	@ 0x80
 80019ae:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80019b0:	4b10      	ldr	r3, [pc, #64]	@ (80019f4 <HAL_ADC_MspInit+0xc8>)
 80019b2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80019b6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80019b8:	4b0e      	ldr	r3, [pc, #56]	@ (80019f4 <HAL_ADC_MspInit+0xc8>)
 80019ba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80019be:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80019c0:	4b0c      	ldr	r3, [pc, #48]	@ (80019f4 <HAL_ADC_MspInit+0xc8>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80019c6:	4b0b      	ldr	r3, [pc, #44]	@ (80019f4 <HAL_ADC_MspInit+0xc8>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80019cc:	4809      	ldr	r0, [pc, #36]	@ (80019f4 <HAL_ADC_MspInit+0xc8>)
 80019ce:	f001 ffe1 	bl	8003994 <HAL_DMA_Init>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d001      	beq.n	80019dc <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 80019d8:	f7ff ff7a 	bl	80018d0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	4a05      	ldr	r2, [pc, #20]	@ (80019f4 <HAL_ADC_MspInit+0xc8>)
 80019e0:	639a      	str	r2, [r3, #56]	@ 0x38
 80019e2:	4a04      	ldr	r2, [pc, #16]	@ (80019f4 <HAL_ADC_MspInit+0xc8>)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6253      	str	r3, [r2, #36]	@ 0x24

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80019e8:	bf00      	nop
 80019ea:	3728      	adds	r7, #40	@ 0x28
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	40021000 	.word	0x40021000
 80019f4:	2000053c 	.word	0x2000053c
 80019f8:	40020008 	.word	0x40020008

080019fc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b08a      	sub	sp, #40	@ 0x28
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a04:	f107 0314 	add.w	r3, r7, #20
 8001a08:	2200      	movs	r2, #0
 8001a0a:	601a      	str	r2, [r3, #0]
 8001a0c:	605a      	str	r2, [r3, #4]
 8001a0e:	609a      	str	r2, [r3, #8]
 8001a10:	60da      	str	r2, [r3, #12]
 8001a12:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a25      	ldr	r2, [pc, #148]	@ (8001ab0 <HAL_CAN_MspInit+0xb4>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d143      	bne.n	8001aa6 <HAL_CAN_MspInit+0xaa>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001a1e:	4b25      	ldr	r3, [pc, #148]	@ (8001ab4 <HAL_CAN_MspInit+0xb8>)
 8001a20:	69db      	ldr	r3, [r3, #28]
 8001a22:	4a24      	ldr	r2, [pc, #144]	@ (8001ab4 <HAL_CAN_MspInit+0xb8>)
 8001a24:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001a28:	61d3      	str	r3, [r2, #28]
 8001a2a:	4b22      	ldr	r3, [pc, #136]	@ (8001ab4 <HAL_CAN_MspInit+0xb8>)
 8001a2c:	69db      	ldr	r3, [r3, #28]
 8001a2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a32:	613b      	str	r3, [r7, #16]
 8001a34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a36:	4b1f      	ldr	r3, [pc, #124]	@ (8001ab4 <HAL_CAN_MspInit+0xb8>)
 8001a38:	695b      	ldr	r3, [r3, #20]
 8001a3a:	4a1e      	ldr	r2, [pc, #120]	@ (8001ab4 <HAL_CAN_MspInit+0xb8>)
 8001a3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a40:	6153      	str	r3, [r2, #20]
 8001a42:	4b1c      	ldr	r3, [pc, #112]	@ (8001ab4 <HAL_CAN_MspInit+0xb8>)
 8001a44:	695b      	ldr	r3, [r3, #20]
 8001a46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a4a:	60fb      	str	r3, [r7, #12]
 8001a4c:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001a4e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001a52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a54:	2302      	movs	r3, #2
 8001a56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a5c:	2303      	movs	r3, #3
 8001a5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM1;
 8001a60:	2309      	movs	r3, #9
 8001a62:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a64:	f107 0314 	add.w	r3, r7, #20
 8001a68:	4619      	mov	r1, r3
 8001a6a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a6e:	f002 f929 	bl	8003cc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001a72:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a78:	2302      	movs	r3, #2
 8001a7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a80:	2303      	movs	r3, #3
 8001a82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM1;
 8001a84:	2309      	movs	r3, #9
 8001a86:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a88:	f107 0314 	add.w	r3, r7, #20
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a92:	f002 f917 	bl	8003cc4 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 5, 0);
 8001a96:	2200      	movs	r2, #0
 8001a98:	2105      	movs	r1, #5
 8001a9a:	2014      	movs	r0, #20
 8001a9c:	f001 ff50 	bl	8003940 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 8001aa0:	2014      	movs	r0, #20
 8001aa2:	f001 ff69 	bl	8003978 <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN_MspInit 1 */

  }

}
 8001aa6:	bf00      	nop
 8001aa8:	3728      	adds	r7, #40	@ 0x28
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	40006400 	.word	0x40006400
 8001ab4:	40021000 	.word	0x40021000

08001ab8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b08a      	sub	sp, #40	@ 0x28
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac0:	f107 0314 	add.w	r3, r7, #20
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	601a      	str	r2, [r3, #0]
 8001ac8:	605a      	str	r2, [r3, #4]
 8001aca:	609a      	str	r2, [r3, #8]
 8001acc:	60da      	str	r2, [r3, #12]
 8001ace:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a17      	ldr	r2, [pc, #92]	@ (8001b34 <HAL_UART_MspInit+0x7c>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d128      	bne.n	8001b2c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ada:	4b17      	ldr	r3, [pc, #92]	@ (8001b38 <HAL_UART_MspInit+0x80>)
 8001adc:	69db      	ldr	r3, [r3, #28]
 8001ade:	4a16      	ldr	r2, [pc, #88]	@ (8001b38 <HAL_UART_MspInit+0x80>)
 8001ae0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ae4:	61d3      	str	r3, [r2, #28]
 8001ae6:	4b14      	ldr	r3, [pc, #80]	@ (8001b38 <HAL_UART_MspInit+0x80>)
 8001ae8:	69db      	ldr	r3, [r3, #28]
 8001aea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001aee:	613b      	str	r3, [r7, #16]
 8001af0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001af2:	4b11      	ldr	r3, [pc, #68]	@ (8001b38 <HAL_UART_MspInit+0x80>)
 8001af4:	695b      	ldr	r3, [r3, #20]
 8001af6:	4a10      	ldr	r2, [pc, #64]	@ (8001b38 <HAL_UART_MspInit+0x80>)
 8001af8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001afc:	6153      	str	r3, [r2, #20]
 8001afe:	4b0e      	ldr	r3, [pc, #56]	@ (8001b38 <HAL_UART_MspInit+0x80>)
 8001b00:	695b      	ldr	r3, [r3, #20]
 8001b02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b06:	60fb      	str	r3, [r7, #12]
 8001b08:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001b0a:	230c      	movs	r3, #12
 8001b0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b0e:	2302      	movs	r3, #2
 8001b10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b12:	2300      	movs	r3, #0
 8001b14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b16:	2300      	movs	r3, #0
 8001b18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b1a:	2307      	movs	r3, #7
 8001b1c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b1e:	f107 0314 	add.w	r3, r7, #20
 8001b22:	4619      	mov	r1, r3
 8001b24:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b28:	f002 f8cc 	bl	8003cc4 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001b2c:	bf00      	nop
 8001b2e:	3728      	adds	r7, #40	@ 0x28
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	40004400 	.word	0x40004400
 8001b38:	40021000 	.word	0x40021000

08001b3c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b08c      	sub	sp, #48	@ 0x30
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001b44:	2300      	movs	r3, #0
 8001b46:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001b4c:	4b2e      	ldr	r3, [pc, #184]	@ (8001c08 <HAL_InitTick+0xcc>)
 8001b4e:	699b      	ldr	r3, [r3, #24]
 8001b50:	4a2d      	ldr	r2, [pc, #180]	@ (8001c08 <HAL_InitTick+0xcc>)
 8001b52:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001b56:	6193      	str	r3, [r2, #24]
 8001b58:	4b2b      	ldr	r3, [pc, #172]	@ (8001c08 <HAL_InitTick+0xcc>)
 8001b5a:	699b      	ldr	r3, [r3, #24]
 8001b5c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001b60:	60bb      	str	r3, [r7, #8]
 8001b62:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001b64:	f107 020c 	add.w	r2, r7, #12
 8001b68:	f107 0310 	add.w	r3, r7, #16
 8001b6c:	4611      	mov	r1, r2
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f003 fcc2 	bl	80054f8 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001b74:	f003 fc9e 	bl	80054b4 <HAL_RCC_GetPCLK2Freq>
 8001b78:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001b7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b7c:	4a23      	ldr	r2, [pc, #140]	@ (8001c0c <HAL_InitTick+0xd0>)
 8001b7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b82:	0c9b      	lsrs	r3, r3, #18
 8001b84:	3b01      	subs	r3, #1
 8001b86:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001b88:	4b21      	ldr	r3, [pc, #132]	@ (8001c10 <HAL_InitTick+0xd4>)
 8001b8a:	4a22      	ldr	r2, [pc, #136]	@ (8001c14 <HAL_InitTick+0xd8>)
 8001b8c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001b8e:	4b20      	ldr	r3, [pc, #128]	@ (8001c10 <HAL_InitTick+0xd4>)
 8001b90:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001b94:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001b96:	4a1e      	ldr	r2, [pc, #120]	@ (8001c10 <HAL_InitTick+0xd4>)
 8001b98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b9a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001b9c:	4b1c      	ldr	r3, [pc, #112]	@ (8001c10 <HAL_InitTick+0xd4>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ba2:	4b1b      	ldr	r3, [pc, #108]	@ (8001c10 <HAL_InitTick+0xd4>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ba8:	4b19      	ldr	r3, [pc, #100]	@ (8001c10 <HAL_InitTick+0xd4>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001bae:	4818      	ldr	r0, [pc, #96]	@ (8001c10 <HAL_InitTick+0xd4>)
 8001bb0:	f003 fe66 	bl	8005880 <HAL_TIM_Base_Init>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001bba:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d11b      	bne.n	8001bfa <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001bc2:	4813      	ldr	r0, [pc, #76]	@ (8001c10 <HAL_InitTick+0xd4>)
 8001bc4:	f003 febe 	bl	8005944 <HAL_TIM_Base_Start_IT>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001bce:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d111      	bne.n	8001bfa <HAL_InitTick+0xbe>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001bd6:	2019      	movs	r0, #25
 8001bd8:	f001 fece 	bl	8003978 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2b0f      	cmp	r3, #15
 8001be0:	d808      	bhi.n	8001bf4 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8001be2:	2200      	movs	r2, #0
 8001be4:	6879      	ldr	r1, [r7, #4]
 8001be6:	2019      	movs	r0, #25
 8001be8:	f001 feaa 	bl	8003940 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001bec:	4a0a      	ldr	r2, [pc, #40]	@ (8001c18 <HAL_InitTick+0xdc>)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6013      	str	r3, [r2, #0]
 8001bf2:	e002      	b.n	8001bfa <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001bfa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3730      	adds	r7, #48	@ 0x30
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	40021000 	.word	0x40021000
 8001c0c:	431bde83 	.word	0x431bde83
 8001c10:	20000658 	.word	0x20000658
 8001c14:	40012c00 	.word	0x40012c00
 8001c18:	20000014 	.word	0x20000014

08001c1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c20:	bf00      	nop
 8001c22:	e7fd      	b.n	8001c20 <NMI_Handler+0x4>

08001c24 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c28:	bf00      	nop
 8001c2a:	e7fd      	b.n	8001c28 <HardFault_Handler+0x4>

08001c2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c30:	bf00      	nop
 8001c32:	e7fd      	b.n	8001c30 <MemManage_Handler+0x4>

08001c34 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c38:	bf00      	nop
 8001c3a:	e7fd      	b.n	8001c38 <BusFault_Handler+0x4>

08001c3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c40:	bf00      	nop
 8001c42:	e7fd      	b.n	8001c40 <UsageFault_Handler+0x4>

08001c44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c48:	bf00      	nop
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
	...

08001c54 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles CAN RX0 and USB low priority interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001c58:	4802      	ldr	r0, [pc, #8]	@ (8001c64 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 8001c5a:	f001 fb8a 	bl	8003372 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 8001c5e:	bf00      	nop
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	20000580 	.word	0x20000580

08001c68 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001c6c:	4802      	ldr	r0, [pc, #8]	@ (8001c78 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001c6e:	f003 febd 	bl	80059ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001c72:	bf00      	nop
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	20000658 	.word	0x20000658

08001c7c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  return 1;
 8001c80:	2301      	movs	r3, #1
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr

08001c8c <_kill>:

int _kill(int pid, int sig)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c96:	f007 f895 	bl	8008dc4 <__errno>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2216      	movs	r2, #22
 8001c9e:	601a      	str	r2, [r3, #0]
  return -1;
 8001ca0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3708      	adds	r7, #8
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}

08001cac <_exit>:

void _exit (int status)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001cb4:	f04f 31ff 	mov.w	r1, #4294967295
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f7ff ffe7 	bl	8001c8c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001cbe:	bf00      	nop
 8001cc0:	e7fd      	b.n	8001cbe <_exit+0x12>

08001cc2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001cc2:	b580      	push	{r7, lr}
 8001cc4:	b086      	sub	sp, #24
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	60f8      	str	r0, [r7, #12]
 8001cca:	60b9      	str	r1, [r7, #8]
 8001ccc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cce:	2300      	movs	r3, #0
 8001cd0:	617b      	str	r3, [r7, #20]
 8001cd2:	e00a      	b.n	8001cea <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001cd4:	f3af 8000 	nop.w
 8001cd8:	4601      	mov	r1, r0
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	1c5a      	adds	r2, r3, #1
 8001cde:	60ba      	str	r2, [r7, #8]
 8001ce0:	b2ca      	uxtb	r2, r1
 8001ce2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	617b      	str	r3, [r7, #20]
 8001cea:	697a      	ldr	r2, [r7, #20]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	429a      	cmp	r2, r3
 8001cf0:	dbf0      	blt.n	8001cd4 <_read+0x12>
  }

  return len;
 8001cf2:	687b      	ldr	r3, [r7, #4]
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3718      	adds	r7, #24
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}

08001cfc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b086      	sub	sp, #24
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	60f8      	str	r0, [r7, #12]
 8001d04:	60b9      	str	r1, [r7, #8]
 8001d06:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d08:	2300      	movs	r3, #0
 8001d0a:	617b      	str	r3, [r7, #20]
 8001d0c:	e009      	b.n	8001d22 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	1c5a      	adds	r2, r3, #1
 8001d12:	60ba      	str	r2, [r7, #8]
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	4618      	mov	r0, r3
 8001d18:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	3301      	adds	r3, #1
 8001d20:	617b      	str	r3, [r7, #20]
 8001d22:	697a      	ldr	r2, [r7, #20]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	429a      	cmp	r2, r3
 8001d28:	dbf1      	blt.n	8001d0e <_write+0x12>
  }
  return len;
 8001d2a:	687b      	ldr	r3, [r7, #4]
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3718      	adds	r7, #24
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}

08001d34 <_close>:

int _close(int file)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d3c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	370c      	adds	r7, #12
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr

08001d4c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d5c:	605a      	str	r2, [r3, #4]
  return 0;
 8001d5e:	2300      	movs	r3, #0
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	370c      	adds	r7, #12
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr

08001d6c <_isatty>:

int _isatty(int file)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d74:	2301      	movs	r3, #1
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	370c      	adds	r7, #12
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr

08001d82 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d82:	b480      	push	{r7}
 8001d84:	b085      	sub	sp, #20
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	60f8      	str	r0, [r7, #12]
 8001d8a:	60b9      	str	r1, [r7, #8]
 8001d8c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d8e:	2300      	movs	r3, #0
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	3714      	adds	r7, #20
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr

08001d9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b086      	sub	sp, #24
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001da4:	4a14      	ldr	r2, [pc, #80]	@ (8001df8 <_sbrk+0x5c>)
 8001da6:	4b15      	ldr	r3, [pc, #84]	@ (8001dfc <_sbrk+0x60>)
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001db0:	4b13      	ldr	r3, [pc, #76]	@ (8001e00 <_sbrk+0x64>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d102      	bne.n	8001dbe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001db8:	4b11      	ldr	r3, [pc, #68]	@ (8001e00 <_sbrk+0x64>)
 8001dba:	4a12      	ldr	r2, [pc, #72]	@ (8001e04 <_sbrk+0x68>)
 8001dbc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001dbe:	4b10      	ldr	r3, [pc, #64]	@ (8001e00 <_sbrk+0x64>)
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	4413      	add	r3, r2
 8001dc6:	693a      	ldr	r2, [r7, #16]
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d207      	bcs.n	8001ddc <_sbrk+0x40>
  {

	  errno = ENOMEM;
 8001dcc:	f006 fffa 	bl	8008dc4 <__errno>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	220c      	movs	r2, #12
 8001dd4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dd6:	f04f 33ff 	mov.w	r3, #4294967295
 8001dda:	e009      	b.n	8001df0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ddc:	4b08      	ldr	r3, [pc, #32]	@ (8001e00 <_sbrk+0x64>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001de2:	4b07      	ldr	r3, [pc, #28]	@ (8001e00 <_sbrk+0x64>)
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4413      	add	r3, r2
 8001dea:	4a05      	ldr	r2, [pc, #20]	@ (8001e00 <_sbrk+0x64>)
 8001dec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dee:	68fb      	ldr	r3, [r7, #12]
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3718      	adds	r7, #24
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	20004000 	.word	0x20004000
 8001dfc:	00000400 	.word	0x00000400
 8001e00:	200006a4 	.word	0x200006a4
 8001e04:	20003988 	.word	0x20003988

08001e08 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e0c:	4b06      	ldr	r3, [pc, #24]	@ (8001e28 <SystemInit+0x20>)
 8001e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e12:	4a05      	ldr	r2, [pc, #20]	@ (8001e28 <SystemInit+0x20>)
 8001e14:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001e18:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e1c:	bf00      	nop
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop
 8001e28:	e000ed00 	.word	0xe000ed00

08001e2c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001e2c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001e64 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e30:	f7ff ffea 	bl	8001e08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e34:	480c      	ldr	r0, [pc, #48]	@ (8001e68 <LoopForever+0x6>)
  ldr r1, =_edata
 8001e36:	490d      	ldr	r1, [pc, #52]	@ (8001e6c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e38:	4a0d      	ldr	r2, [pc, #52]	@ (8001e70 <LoopForever+0xe>)
  movs r3, #0
 8001e3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e3c:	e002      	b.n	8001e44 <LoopCopyDataInit>

08001e3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e42:	3304      	adds	r3, #4

08001e44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e48:	d3f9      	bcc.n	8001e3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e4a:	4a0a      	ldr	r2, [pc, #40]	@ (8001e74 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e4c:	4c0a      	ldr	r4, [pc, #40]	@ (8001e78 <LoopForever+0x16>)
  movs r3, #0
 8001e4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e50:	e001      	b.n	8001e56 <LoopFillZerobss>

08001e52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e54:	3204      	adds	r2, #4

08001e56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e58:	d3fb      	bcc.n	8001e52 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e5a:	f006 ffb9 	bl	8008dd0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e5e:	f7ff f9a3 	bl	80011a8 <main>

08001e62 <LoopForever>:

LoopForever:
    b LoopForever
 8001e62:	e7fe      	b.n	8001e62 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001e64:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001e68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e6c:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8001e70:	0800b428 	.word	0x0800b428
  ldr r2, =_sbss
 8001e74:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8001e78:	20003984 	.word	0x20003984

08001e7c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e7c:	e7fe      	b.n	8001e7c <ADC1_IRQHandler>
	...

08001e80 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e84:	4b08      	ldr	r3, [pc, #32]	@ (8001ea8 <HAL_Init+0x28>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a07      	ldr	r2, [pc, #28]	@ (8001ea8 <HAL_Init+0x28>)
 8001e8a:	f043 0310 	orr.w	r3, r3, #16
 8001e8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e90:	2003      	movs	r0, #3
 8001e92:	f001 fd4a 	bl	800392a <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e96:	200f      	movs	r0, #15
 8001e98:	f7ff fe50 	bl	8001b3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e9c:	f7ff fd1e 	bl	80018dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ea0:	2300      	movs	r3, #0
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	40022000 	.word	0x40022000

08001eac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001eb0:	4b06      	ldr	r3, [pc, #24]	@ (8001ecc <HAL_IncTick+0x20>)
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	4b06      	ldr	r3, [pc, #24]	@ (8001ed0 <HAL_IncTick+0x24>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4413      	add	r3, r2
 8001ebc:	4a04      	ldr	r2, [pc, #16]	@ (8001ed0 <HAL_IncTick+0x24>)
 8001ebe:	6013      	str	r3, [r2, #0]
}
 8001ec0:	bf00      	nop
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	20000018 	.word	0x20000018
 8001ed0:	200006a8 	.word	0x200006a8

08001ed4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
  return uwTick;  
 8001ed8:	4b03      	ldr	r3, [pc, #12]	@ (8001ee8 <HAL_GetTick+0x14>)
 8001eda:	681b      	ldr	r3, [r3, #0]
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	200006a8 	.word	0x200006a8

08001eec <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001ef4:	bf00      	nop
 8001ef6:	370c      	adds	r7, #12
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001f08:	bf00      	nop
 8001f0a:	370c      	adds	r7, #12
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr

08001f14 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001f1c:	bf00      	nop
 8001f1e:	370c      	adds	r7, #12
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr

08001f28 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b09a      	sub	sp, #104	@ 0x68
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f30:	2300      	movs	r3, #0
 8001f32:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001f36:	2300      	movs	r3, #0
 8001f38:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d101      	bne.n	8001f48 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	e169      	b.n	800221c <HAL_ADC_Init+0x2f4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	691b      	ldr	r3, [r3, #16]
 8001f4c:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f52:	f003 0310 	and.w	r3, r3, #16
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d176      	bne.n	8002048 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d152      	bne.n	8002008 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2200      	movs	r2, #0
 8001f66:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2200      	movs	r2, #0
 8001f72:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2200      	movs	r2, #0
 8001f78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f7ff fcd5 	bl	800192c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d13b      	bne.n	8002008 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001f90:	6878      	ldr	r0, [r7, #4]
 8001f92:	f000 fd67 	bl	8002a64 <ADC_Disable>
 8001f96:	4603      	mov	r3, r0
 8001f98:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fa0:	f003 0310 	and.w	r3, r3, #16
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d12f      	bne.n	8002008 <HAL_ADC_Init+0xe0>
 8001fa8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d12b      	bne.n	8002008 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fb4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001fb8:	f023 0302 	bic.w	r3, r3, #2
 8001fbc:	f043 0202 	orr.w	r2, r3, #2
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	689a      	ldr	r2, [r3, #8]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001fd2:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	689a      	ldr	r2, [r3, #8]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001fe2:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001fe4:	4b8f      	ldr	r3, [pc, #572]	@ (8002224 <HAL_ADC_Init+0x2fc>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a8f      	ldr	r2, [pc, #572]	@ (8002228 <HAL_ADC_Init+0x300>)
 8001fea:	fba2 2303 	umull	r2, r3, r2, r3
 8001fee:	0c9a      	lsrs	r2, r3, #18
 8001ff0:	4613      	mov	r3, r2
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	4413      	add	r3, r2
 8001ff6:	005b      	lsls	r3, r3, #1
 8001ff8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001ffa:	e002      	b.n	8002002 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	3b01      	subs	r3, #1
 8002000:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d1f9      	bne.n	8001ffc <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002012:	2b00      	cmp	r3, #0
 8002014:	d007      	beq.n	8002026 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002020:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002024:	d110      	bne.n	8002048 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800202a:	f023 0312 	bic.w	r3, r3, #18
 800202e:	f043 0210 	orr.w	r2, r3, #16
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800203a:	f043 0201 	orr.w	r2, r3, #1
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800204c:	f003 0310 	and.w	r3, r3, #16
 8002050:	2b00      	cmp	r3, #0
 8002052:	f040 80d6 	bne.w	8002202 <HAL_ADC_Init+0x2da>
 8002056:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800205a:	2b00      	cmp	r3, #0
 800205c:	f040 80d1 	bne.w	8002202 <HAL_ADC_Init+0x2da>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 800206a:	2b00      	cmp	r3, #0
 800206c:	f040 80c9 	bne.w	8002202 <HAL_ADC_Init+0x2da>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002074:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002078:	f043 0202 	orr.w	r2, r3, #2
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002080:	4b6a      	ldr	r3, [pc, #424]	@ (800222c <HAL_ADC_Init+0x304>)
 8002082:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002084:	2300      	movs	r3, #0
 8002086:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	f003 0303 	and.w	r3, r3, #3
 8002092:	2b01      	cmp	r3, #1
 8002094:	d108      	bne.n	80020a8 <HAL_ADC_Init+0x180>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 0301 	and.w	r3, r3, #1
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d101      	bne.n	80020a8 <HAL_ADC_Init+0x180>
 80020a4:	2301      	movs	r3, #1
 80020a6:	e000      	b.n	80020aa <HAL_ADC_Init+0x182>
 80020a8:	2300      	movs	r3, #0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d11c      	bne.n	80020e8 <HAL_ADC_Init+0x1c0>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80020ae:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d010      	beq.n	80020d6 <HAL_ADC_Init+0x1ae>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	f003 0303 	and.w	r3, r3, #3
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d107      	bne.n	80020d0 <HAL_ADC_Init+0x1a8>
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 0301 	and.w	r3, r3, #1
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d101      	bne.n	80020d0 <HAL_ADC_Init+0x1a8>
 80020cc:	2301      	movs	r3, #1
 80020ce:	e000      	b.n	80020d2 <HAL_ADC_Init+0x1aa>
 80020d0:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d108      	bne.n	80020e8 <HAL_ADC_Init+0x1c0>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80020d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	431a      	orrs	r2, r3
 80020e4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80020e6:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	7e5b      	ldrb	r3, [r3, #25]
 80020ec:	035b      	lsls	r3, r3, #13
 80020ee:	687a      	ldr	r2, [r7, #4]
 80020f0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80020f2:	2a01      	cmp	r2, #1
 80020f4:	d002      	beq.n	80020fc <HAL_ADC_Init+0x1d4>
 80020f6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80020fa:	e000      	b.n	80020fe <HAL_ADC_Init+0x1d6>
 80020fc:	2200      	movs	r2, #0
 80020fe:	431a      	orrs	r2, r3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	431a      	orrs	r2, r3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	4313      	orrs	r3, r2
 800210c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800210e:	4313      	orrs	r3, r2
 8002110:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002118:	2b01      	cmp	r3, #1
 800211a:	d11b      	bne.n	8002154 <HAL_ADC_Init+0x22c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	7e5b      	ldrb	r3, [r3, #25]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d109      	bne.n	8002138 <HAL_ADC_Init+0x210>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002128:	3b01      	subs	r3, #1
 800212a:	045a      	lsls	r2, r3, #17
 800212c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800212e:	4313      	orrs	r3, r2
 8002130:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002134:	663b      	str	r3, [r7, #96]	@ 0x60
 8002136:	e00d      	b.n	8002154 <HAL_ADC_Init+0x22c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800213c:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8002140:	f043 0220 	orr.w	r2, r3, #32
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800214c:	f043 0201 	orr.w	r2, r3, #1
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002158:	2b01      	cmp	r3, #1
 800215a:	d007      	beq.n	800216c <HAL_ADC_Init+0x244>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002164:	4313      	orrs	r3, r2
 8002166:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002168:	4313      	orrs	r3, r2
 800216a:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	f003 030c 	and.w	r3, r3, #12
 8002176:	2b00      	cmp	r3, #0
 8002178:	d114      	bne.n	80021a4 <HAL_ADC_Init+0x27c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	687a      	ldr	r2, [r7, #4]
 8002182:	6812      	ldr	r2, [r2, #0]
 8002184:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002188:	f023 0302 	bic.w	r3, r3, #2
 800218c:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	7e1b      	ldrb	r3, [r3, #24]
 8002192:	039a      	lsls	r2, r3, #14
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800219a:	005b      	lsls	r3, r3, #1
 800219c:	4313      	orrs	r3, r2
 800219e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80021a0:	4313      	orrs	r3, r2
 80021a2:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	68da      	ldr	r2, [r3, #12]
 80021aa:	4b21      	ldr	r3, [pc, #132]	@ (8002230 <HAL_ADC_Init+0x308>)
 80021ac:	4013      	ands	r3, r2
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	6812      	ldr	r2, [r2, #0]
 80021b2:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80021b4:	430b      	orrs	r3, r1
 80021b6:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	691b      	ldr	r3, [r3, #16]
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d10c      	bne.n	80021da <HAL_ADC_Init+0x2b2>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021c6:	f023 010f 	bic.w	r1, r3, #15
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	69db      	ldr	r3, [r3, #28]
 80021ce:	1e5a      	subs	r2, r3, #1
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	430a      	orrs	r2, r1
 80021d6:	631a      	str	r2, [r3, #48]	@ 0x30
 80021d8:	e007      	b.n	80021ea <HAL_ADC_Init+0x2c2>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f022 020f 	bic.w	r2, r2, #15
 80021e8:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2200      	movs	r2, #0
 80021ee:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021f4:	f023 0303 	bic.w	r3, r3, #3
 80021f8:	f043 0201 	orr.w	r2, r3, #1
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	641a      	str	r2, [r3, #64]	@ 0x40
 8002200:	e00a      	b.n	8002218 <HAL_ADC_Init+0x2f0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002206:	f023 0312 	bic.w	r3, r3, #18
 800220a:	f043 0210 	orr.w	r2, r3, #16
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8002212:	2301      	movs	r3, #1
 8002214:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8002218:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 800221c:	4618      	mov	r0, r3
 800221e:	3768      	adds	r7, #104	@ 0x68
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}
 8002224:	20000010 	.word	0x20000010
 8002228:	431bde83 	.word	0x431bde83
 800222c:	50000300 	.word	0x50000300
 8002230:	fff0c007 	.word	0xfff0c007

08002234 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b086      	sub	sp, #24
 8002238:	af00      	add	r7, sp, #0
 800223a:	60f8      	str	r0, [r7, #12]
 800223c:	60b9      	str	r1, [r7, #8]
 800223e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002240:	2300      	movs	r3, #0
 8002242:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	f003 0304 	and.w	r3, r3, #4
 800224e:	2b00      	cmp	r3, #0
 8002250:	d17e      	bne.n	8002350 <HAL_ADC_Start_DMA+0x11c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002258:	2b01      	cmp	r3, #1
 800225a:	d101      	bne.n	8002260 <HAL_ADC_Start_DMA+0x2c>
 800225c:	2302      	movs	r3, #2
 800225e:	e07a      	b.n	8002356 <HAL_ADC_Start_DMA+0x122>
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	2201      	movs	r2, #1
 8002264:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002268:	68f8      	ldr	r0, [r7, #12]
 800226a:	f000 fb97 	bl	800299c <ADC_Enable>
 800226e:	4603      	mov	r3, r0
 8002270:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002272:	7dfb      	ldrb	r3, [r7, #23]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d166      	bne.n	8002346 <HAL_ADC_Start_DMA+0x112>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800227c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002280:	f023 0301 	bic.w	r3, r3, #1
 8002284:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	641a      	str	r2, [r3, #64]	@ 0x40
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002290:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	68db      	ldr	r3, [r3, #12]
 800229e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d007      	beq.n	80022b6 <HAL_ADC_Start_DMA+0x82>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022aa:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80022ae:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	641a      	str	r2, [r3, #64]	@ 0x40
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80022be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80022c2:	d106      	bne.n	80022d2 <HAL_ADC_Start_DMA+0x9e>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022c8:	f023 0206 	bic.w	r2, r3, #6
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	645a      	str	r2, [r3, #68]	@ 0x44
 80022d0:	e002      	b.n	80022d8 <HAL_ADC_Start_DMA+0xa4>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	2200      	movs	r2, #0
 80022d6:	645a      	str	r2, [r3, #68]	@ 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	2200      	movs	r2, #0
 80022dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022e4:	4a1e      	ldr	r2, [pc, #120]	@ (8002360 <HAL_ADC_Start_DMA+0x12c>)
 80022e6:	629a      	str	r2, [r3, #40]	@ 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022ec:	4a1d      	ldr	r2, [pc, #116]	@ (8002364 <HAL_ADC_Start_DMA+0x130>)
 80022ee:	62da      	str	r2, [r3, #44]	@ 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022f4:	4a1c      	ldr	r2, [pc, #112]	@ (8002368 <HAL_ADC_Start_DMA+0x134>)
 80022f6:	631a      	str	r2, [r3, #48]	@ 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	221c      	movs	r2, #28
 80022fe:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	685a      	ldr	r2, [r3, #4]
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f042 0210 	orr.w	r2, r2, #16
 800230e:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	68da      	ldr	r2, [r3, #12]
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f042 0201 	orr.w	r2, r2, #1
 800231e:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	3340      	adds	r3, #64	@ 0x40
 800232a:	4619      	mov	r1, r3
 800232c:	68ba      	ldr	r2, [r7, #8]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	f001 fb77 	bl	8003a22 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	689a      	ldr	r2, [r3, #8]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f042 0204 	orr.w	r2, r2, #4
 8002342:	609a      	str	r2, [r3, #8]
 8002344:	e006      	b.n	8002354 <HAL_ADC_Start_DMA+0x120>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	2200      	movs	r2, #0
 800234a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800234e:	e001      	b.n	8002354 <HAL_ADC_Start_DMA+0x120>
      __HAL_UNLOCK(hadc);
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002350:	2302      	movs	r3, #2
 8002352:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002354:	7dfb      	ldrb	r3, [r7, #23]
}
 8002356:	4618      	mov	r0, r3
 8002358:	3718      	adds	r7, #24
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	080028d1 	.word	0x080028d1
 8002364:	0800294b 	.word	0x0800294b
 8002368:	08002967 	.word	0x08002967

0800236c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800236c:	b480      	push	{r7}
 800236e:	b09b      	sub	sp, #108	@ 0x6c
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
 8002374:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002376:	2300      	movs	r3, #0
 8002378:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 800237c:	2300      	movs	r3, #0
 800237e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002386:	2b01      	cmp	r3, #1
 8002388:	d101      	bne.n	800238e <HAL_ADC_ConfigChannel+0x22>
 800238a:	2302      	movs	r3, #2
 800238c:	e295      	b.n	80028ba <HAL_ADC_ConfigChannel+0x54e>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2201      	movs	r2, #1
 8002392:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	f003 0304 	and.w	r3, r3, #4
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	f040 8279 	bne.w	8002898 <HAL_ADC_ConfigChannel+0x52c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	2b04      	cmp	r3, #4
 80023ac:	d81c      	bhi.n	80023e8 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	685a      	ldr	r2, [r3, #4]
 80023b8:	4613      	mov	r3, r2
 80023ba:	005b      	lsls	r3, r3, #1
 80023bc:	4413      	add	r3, r2
 80023be:	005b      	lsls	r3, r3, #1
 80023c0:	461a      	mov	r2, r3
 80023c2:	231f      	movs	r3, #31
 80023c4:	4093      	lsls	r3, r2
 80023c6:	43db      	mvns	r3, r3
 80023c8:	4019      	ands	r1, r3
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	6818      	ldr	r0, [r3, #0]
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	685a      	ldr	r2, [r3, #4]
 80023d2:	4613      	mov	r3, r2
 80023d4:	005b      	lsls	r3, r3, #1
 80023d6:	4413      	add	r3, r2
 80023d8:	005b      	lsls	r3, r3, #1
 80023da:	fa00 f203 	lsl.w	r2, r0, r3
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	430a      	orrs	r2, r1
 80023e4:	631a      	str	r2, [r3, #48]	@ 0x30
 80023e6:	e063      	b.n	80024b0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	2b09      	cmp	r3, #9
 80023ee:	d81e      	bhi.n	800242e <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	685a      	ldr	r2, [r3, #4]
 80023fa:	4613      	mov	r3, r2
 80023fc:	005b      	lsls	r3, r3, #1
 80023fe:	4413      	add	r3, r2
 8002400:	005b      	lsls	r3, r3, #1
 8002402:	3b1e      	subs	r3, #30
 8002404:	221f      	movs	r2, #31
 8002406:	fa02 f303 	lsl.w	r3, r2, r3
 800240a:	43db      	mvns	r3, r3
 800240c:	4019      	ands	r1, r3
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	6818      	ldr	r0, [r3, #0]
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	685a      	ldr	r2, [r3, #4]
 8002416:	4613      	mov	r3, r2
 8002418:	005b      	lsls	r3, r3, #1
 800241a:	4413      	add	r3, r2
 800241c:	005b      	lsls	r3, r3, #1
 800241e:	3b1e      	subs	r3, #30
 8002420:	fa00 f203 	lsl.w	r2, r0, r3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	430a      	orrs	r2, r1
 800242a:	635a      	str	r2, [r3, #52]	@ 0x34
 800242c:	e040      	b.n	80024b0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	2b0e      	cmp	r3, #14
 8002434:	d81e      	bhi.n	8002474 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	685a      	ldr	r2, [r3, #4]
 8002440:	4613      	mov	r3, r2
 8002442:	005b      	lsls	r3, r3, #1
 8002444:	4413      	add	r3, r2
 8002446:	005b      	lsls	r3, r3, #1
 8002448:	3b3c      	subs	r3, #60	@ 0x3c
 800244a:	221f      	movs	r2, #31
 800244c:	fa02 f303 	lsl.w	r3, r2, r3
 8002450:	43db      	mvns	r3, r3
 8002452:	4019      	ands	r1, r3
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	6818      	ldr	r0, [r3, #0]
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	685a      	ldr	r2, [r3, #4]
 800245c:	4613      	mov	r3, r2
 800245e:	005b      	lsls	r3, r3, #1
 8002460:	4413      	add	r3, r2
 8002462:	005b      	lsls	r3, r3, #1
 8002464:	3b3c      	subs	r3, #60	@ 0x3c
 8002466:	fa00 f203 	lsl.w	r2, r0, r3
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	430a      	orrs	r2, r1
 8002470:	639a      	str	r2, [r3, #56]	@ 0x38
 8002472:	e01d      	b.n	80024b0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	685a      	ldr	r2, [r3, #4]
 800247e:	4613      	mov	r3, r2
 8002480:	005b      	lsls	r3, r3, #1
 8002482:	4413      	add	r3, r2
 8002484:	005b      	lsls	r3, r3, #1
 8002486:	3b5a      	subs	r3, #90	@ 0x5a
 8002488:	221f      	movs	r2, #31
 800248a:	fa02 f303 	lsl.w	r3, r2, r3
 800248e:	43db      	mvns	r3, r3
 8002490:	4019      	ands	r1, r3
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	6818      	ldr	r0, [r3, #0]
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	685a      	ldr	r2, [r3, #4]
 800249a:	4613      	mov	r3, r2
 800249c:	005b      	lsls	r3, r3, #1
 800249e:	4413      	add	r3, r2
 80024a0:	005b      	lsls	r3, r3, #1
 80024a2:	3b5a      	subs	r3, #90	@ 0x5a
 80024a4:	fa00 f203 	lsl.w	r2, r0, r3
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	430a      	orrs	r2, r1
 80024ae:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	f003 030c 	and.w	r3, r3, #12
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	f040 80e5 	bne.w	800268a <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	2b09      	cmp	r3, #9
 80024c6:	d91c      	bls.n	8002502 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	6999      	ldr	r1, [r3, #24]
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	4613      	mov	r3, r2
 80024d4:	005b      	lsls	r3, r3, #1
 80024d6:	4413      	add	r3, r2
 80024d8:	3b1e      	subs	r3, #30
 80024da:	2207      	movs	r2, #7
 80024dc:	fa02 f303 	lsl.w	r3, r2, r3
 80024e0:	43db      	mvns	r3, r3
 80024e2:	4019      	ands	r1, r3
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	6898      	ldr	r0, [r3, #8]
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	4613      	mov	r3, r2
 80024ee:	005b      	lsls	r3, r3, #1
 80024f0:	4413      	add	r3, r2
 80024f2:	3b1e      	subs	r3, #30
 80024f4:	fa00 f203 	lsl.w	r2, r0, r3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	430a      	orrs	r2, r1
 80024fe:	619a      	str	r2, [r3, #24]
 8002500:	e019      	b.n	8002536 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	6959      	ldr	r1, [r3, #20]
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	4613      	mov	r3, r2
 800250e:	005b      	lsls	r3, r3, #1
 8002510:	4413      	add	r3, r2
 8002512:	2207      	movs	r2, #7
 8002514:	fa02 f303 	lsl.w	r3, r2, r3
 8002518:	43db      	mvns	r3, r3
 800251a:	4019      	ands	r1, r3
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	6898      	ldr	r0, [r3, #8]
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	4613      	mov	r3, r2
 8002526:	005b      	lsls	r3, r3, #1
 8002528:	4413      	add	r3, r2
 800252a:	fa00 f203 	lsl.w	r2, r0, r3
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	430a      	orrs	r2, r1
 8002534:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	695a      	ldr	r2, [r3, #20]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	08db      	lsrs	r3, r3, #3
 8002542:	f003 0303 	and.w	r3, r3, #3
 8002546:	005b      	lsls	r3, r3, #1
 8002548:	fa02 f303 	lsl.w	r3, r2, r3
 800254c:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	691b      	ldr	r3, [r3, #16]
 8002552:	3b01      	subs	r3, #1
 8002554:	2b03      	cmp	r3, #3
 8002556:	d84f      	bhi.n	80025f8 <HAL_ADC_ConfigChannel+0x28c>
 8002558:	a201      	add	r2, pc, #4	@ (adr r2, 8002560 <HAL_ADC_ConfigChannel+0x1f4>)
 800255a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800255e:	bf00      	nop
 8002560:	08002571 	.word	0x08002571
 8002564:	08002593 	.word	0x08002593
 8002568:	080025b5 	.word	0x080025b5
 800256c:	080025d7 	.word	0x080025d7
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002576:	4b97      	ldr	r3, [pc, #604]	@ (80027d4 <HAL_ADC_ConfigChannel+0x468>)
 8002578:	4013      	ands	r3, r2
 800257a:	683a      	ldr	r2, [r7, #0]
 800257c:	6812      	ldr	r2, [r2, #0]
 800257e:	0691      	lsls	r1, r2, #26
 8002580:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002582:	430a      	orrs	r2, r1
 8002584:	431a      	orrs	r2, r3
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800258e:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002590:	e07b      	b.n	800268a <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002598:	4b8e      	ldr	r3, [pc, #568]	@ (80027d4 <HAL_ADC_ConfigChannel+0x468>)
 800259a:	4013      	ands	r3, r2
 800259c:	683a      	ldr	r2, [r7, #0]
 800259e:	6812      	ldr	r2, [r2, #0]
 80025a0:	0691      	lsls	r1, r2, #26
 80025a2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80025a4:	430a      	orrs	r2, r1
 80025a6:	431a      	orrs	r2, r3
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80025b0:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80025b2:	e06a      	b.n	800268a <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80025ba:	4b86      	ldr	r3, [pc, #536]	@ (80027d4 <HAL_ADC_ConfigChannel+0x468>)
 80025bc:	4013      	ands	r3, r2
 80025be:	683a      	ldr	r2, [r7, #0]
 80025c0:	6812      	ldr	r2, [r2, #0]
 80025c2:	0691      	lsls	r1, r2, #26
 80025c4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80025c6:	430a      	orrs	r2, r1
 80025c8:	431a      	orrs	r2, r3
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80025d2:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80025d4:	e059      	b.n	800268a <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80025dc:	4b7d      	ldr	r3, [pc, #500]	@ (80027d4 <HAL_ADC_ConfigChannel+0x468>)
 80025de:	4013      	ands	r3, r2
 80025e0:	683a      	ldr	r2, [r7, #0]
 80025e2:	6812      	ldr	r2, [r2, #0]
 80025e4:	0691      	lsls	r1, r2, #26
 80025e6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80025e8:	430a      	orrs	r2, r1
 80025ea:	431a      	orrs	r2, r3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80025f4:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80025f6:	e048      	b.n	800268a <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025fe:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	069b      	lsls	r3, r3, #26
 8002608:	429a      	cmp	r2, r3
 800260a:	d107      	bne.n	800261c <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800261a:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002622:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	069b      	lsls	r3, r3, #26
 800262c:	429a      	cmp	r2, r3
 800262e:	d107      	bne.n	8002640 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800263e:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002646:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	069b      	lsls	r3, r3, #26
 8002650:	429a      	cmp	r2, r3
 8002652:	d107      	bne.n	8002664 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002662:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800266a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	069b      	lsls	r3, r3, #26
 8002674:	429a      	cmp	r2, r3
 8002676:	d107      	bne.n	8002688 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002686:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 8002688:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	f003 0303 	and.w	r3, r3, #3
 8002694:	2b01      	cmp	r3, #1
 8002696:	d108      	bne.n	80026aa <HAL_ADC_ConfigChannel+0x33e>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0301 	and.w	r3, r3, #1
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d101      	bne.n	80026aa <HAL_ADC_ConfigChannel+0x33e>
 80026a6:	2301      	movs	r3, #1
 80026a8:	e000      	b.n	80026ac <HAL_ADC_ConfigChannel+0x340>
 80026aa:	2300      	movs	r3, #0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	f040 80fe 	bne.w	80028ae <HAL_ADC_ConfigChannel+0x542>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	68db      	ldr	r3, [r3, #12]
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d00f      	beq.n	80026da <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	2201      	movs	r2, #1
 80026c8:	fa02 f303 	lsl.w	r3, r2, r3
 80026cc:	43da      	mvns	r2, r3
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	400a      	ands	r2, r1
 80026d4:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 80026d8:	e049      	b.n	800276e <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	2201      	movs	r2, #1
 80026e8:	409a      	lsls	r2, r3
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	430a      	orrs	r2, r1
 80026f0:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	2b09      	cmp	r3, #9
 80026fa:	d91c      	bls.n	8002736 <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	6999      	ldr	r1, [r3, #24]
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	4613      	mov	r3, r2
 8002708:	005b      	lsls	r3, r3, #1
 800270a:	4413      	add	r3, r2
 800270c:	3b1b      	subs	r3, #27
 800270e:	2207      	movs	r2, #7
 8002710:	fa02 f303 	lsl.w	r3, r2, r3
 8002714:	43db      	mvns	r3, r3
 8002716:	4019      	ands	r1, r3
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	6898      	ldr	r0, [r3, #8]
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	4613      	mov	r3, r2
 8002722:	005b      	lsls	r3, r3, #1
 8002724:	4413      	add	r3, r2
 8002726:	3b1b      	subs	r3, #27
 8002728:	fa00 f203 	lsl.w	r2, r0, r3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	430a      	orrs	r2, r1
 8002732:	619a      	str	r2, [r3, #24]
 8002734:	e01b      	b.n	800276e <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	6959      	ldr	r1, [r3, #20]
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	1c5a      	adds	r2, r3, #1
 8002742:	4613      	mov	r3, r2
 8002744:	005b      	lsls	r3, r3, #1
 8002746:	4413      	add	r3, r2
 8002748:	2207      	movs	r2, #7
 800274a:	fa02 f303 	lsl.w	r3, r2, r3
 800274e:	43db      	mvns	r3, r3
 8002750:	4019      	ands	r1, r3
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	6898      	ldr	r0, [r3, #8]
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	1c5a      	adds	r2, r3, #1
 800275c:	4613      	mov	r3, r2
 800275e:	005b      	lsls	r3, r3, #1
 8002760:	4413      	add	r3, r2
 8002762:	fa00 f203 	lsl.w	r2, r0, r3
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	430a      	orrs	r2, r1
 800276c:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800276e:	4b1a      	ldr	r3, [pc, #104]	@ (80027d8 <HAL_ADC_ConfigChannel+0x46c>)
 8002770:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	2b10      	cmp	r3, #16
 8002778:	d105      	bne.n	8002786 <HAL_ADC_ConfigChannel+0x41a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800277a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002782:	2b00      	cmp	r3, #0
 8002784:	d014      	beq.n	80027b0 <HAL_ADC_ConfigChannel+0x444>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800278a:	2b11      	cmp	r3, #17
 800278c:	d105      	bne.n	800279a <HAL_ADC_ConfigChannel+0x42e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800278e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002796:	2b00      	cmp	r3, #0
 8002798:	d00a      	beq.n	80027b0 <HAL_ADC_ConfigChannel+0x444>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800279e:	2b12      	cmp	r3, #18
 80027a0:	f040 8085 	bne.w	80028ae <HAL_ADC_ConfigChannel+0x542>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80027a4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d17e      	bne.n	80028ae <HAL_ADC_ConfigChannel+0x542>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80027b0:	2300      	movs	r3, #0
 80027b2:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	f003 0303 	and.w	r3, r3, #3
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d10c      	bne.n	80027dc <HAL_ADC_ConfigChannel+0x470>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 0301 	and.w	r3, r3, #1
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d105      	bne.n	80027dc <HAL_ADC_ConfigChannel+0x470>
 80027d0:	2301      	movs	r3, #1
 80027d2:	e004      	b.n	80027de <HAL_ADC_ConfigChannel+0x472>
 80027d4:	83fff000 	.word	0x83fff000
 80027d8:	50000300 	.word	0x50000300
 80027dc:	2300      	movs	r3, #0
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d150      	bne.n	8002884 <HAL_ADC_ConfigChannel+0x518>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80027e2:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d010      	beq.n	800280a <HAL_ADC_ConfigChannel+0x49e>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	f003 0303 	and.w	r3, r3, #3
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d107      	bne.n	8002804 <HAL_ADC_ConfigChannel+0x498>
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 0301 	and.w	r3, r3, #1
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d101      	bne.n	8002804 <HAL_ADC_ConfigChannel+0x498>
 8002800:	2301      	movs	r3, #1
 8002802:	e000      	b.n	8002806 <HAL_ADC_ConfigChannel+0x49a>
 8002804:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002806:	2b00      	cmp	r3, #0
 8002808:	d13c      	bne.n	8002884 <HAL_ADC_ConfigChannel+0x518>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	2b10      	cmp	r3, #16
 8002810:	d11d      	bne.n	800284e <HAL_ADC_ConfigChannel+0x4e2>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800281a:	d118      	bne.n	800284e <HAL_ADC_ConfigChannel+0x4e2>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 800281c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002824:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002826:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002828:	4b27      	ldr	r3, [pc, #156]	@ (80028c8 <HAL_ADC_ConfigChannel+0x55c>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a27      	ldr	r2, [pc, #156]	@ (80028cc <HAL_ADC_ConfigChannel+0x560>)
 800282e:	fba2 2303 	umull	r2, r3, r2, r3
 8002832:	0c9a      	lsrs	r2, r3, #18
 8002834:	4613      	mov	r3, r2
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	4413      	add	r3, r2
 800283a:	005b      	lsls	r3, r3, #1
 800283c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800283e:	e002      	b.n	8002846 <HAL_ADC_ConfigChannel+0x4da>
          {
            wait_loop_index--;
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	3b01      	subs	r3, #1
 8002844:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d1f9      	bne.n	8002840 <HAL_ADC_ConfigChannel+0x4d4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800284c:	e02e      	b.n	80028ac <HAL_ADC_ConfigChannel+0x540>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	2b11      	cmp	r3, #17
 8002854:	d10b      	bne.n	800286e <HAL_ADC_ConfigChannel+0x502>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800285e:	d106      	bne.n	800286e <HAL_ADC_ConfigChannel+0x502>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002860:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8002868:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800286a:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800286c:	e01e      	b.n	80028ac <HAL_ADC_ConfigChannel+0x540>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	2b12      	cmp	r3, #18
 8002874:	d11a      	bne.n	80028ac <HAL_ADC_ConfigChannel+0x540>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002876:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800287e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002880:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002882:	e013      	b.n	80028ac <HAL_ADC_ConfigChannel+0x540>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002888:	f043 0220 	orr.w	r2, r3, #32
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8002896:	e00a      	b.n	80028ae <HAL_ADC_ConfigChannel+0x542>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800289c:	f043 0220 	orr.w	r2, r3, #32
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80028aa:	e000      	b.n	80028ae <HAL_ADC_ConfigChannel+0x542>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80028ac:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2200      	movs	r2, #0
 80028b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80028b6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	376c      	adds	r7, #108	@ 0x6c
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr
 80028c6:	bf00      	nop
 80028c8:	20000010 	.word	0x20000010
 80028cc:	431bde83 	.word	0x431bde83

080028d0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b084      	sub	sp, #16
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028dc:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028e2:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d126      	bne.n	8002938 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ee:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002900:	2b00      	cmp	r3, #0
 8002902:	d115      	bne.n	8002930 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002908:	2b00      	cmp	r3, #0
 800290a:	d111      	bne.n	8002930 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002910:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800291c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002920:	2b00      	cmp	r3, #0
 8002922:	d105      	bne.n	8002930 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002928:	f043 0201 	orr.w	r2, r3, #1
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002930:	68f8      	ldr	r0, [r7, #12]
 8002932:	f7ff fadb 	bl	8001eec <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002936:	e004      	b.n	8002942 <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800293c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	4798      	blx	r3
}
 8002942:	bf00      	nop
 8002944:	3710      	adds	r7, #16
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}

0800294a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800294a:	b580      	push	{r7, lr}
 800294c:	b084      	sub	sp, #16
 800294e:	af00      	add	r7, sp, #0
 8002950:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002956:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002958:	68f8      	ldr	r0, [r7, #12]
 800295a:	f7ff fad1 	bl	8001f00 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 800295e:	bf00      	nop
 8002960:	3710      	adds	r7, #16
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}

08002966 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002966:	b580      	push	{r7, lr}
 8002968:	b084      	sub	sp, #16
 800296a:	af00      	add	r7, sp, #0
 800296c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002972:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002978:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	641a      	str	r2, [r3, #64]	@ 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002984:	f043 0204 	orr.w	r2, r3, #4
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	645a      	str	r2, [r3, #68]	@ 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800298c:	68f8      	ldr	r0, [r7, #12]
 800298e:	f7ff fac1 	bl	8001f14 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002992:	bf00      	nop
 8002994:	3710      	adds	r7, #16
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
	...

0800299c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b084      	sub	sp, #16
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80029a4:	2300      	movs	r3, #0
 80029a6:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	f003 0303 	and.w	r3, r3, #3
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	d108      	bne.n	80029c8 <ADC_Enable+0x2c>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0301 	and.w	r3, r3, #1
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d101      	bne.n	80029c8 <ADC_Enable+0x2c>
 80029c4:	2301      	movs	r3, #1
 80029c6:	e000      	b.n	80029ca <ADC_Enable+0x2e>
 80029c8:	2300      	movs	r3, #0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d143      	bne.n	8002a56 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	689a      	ldr	r2, [r3, #8]
 80029d4:	4b22      	ldr	r3, [pc, #136]	@ (8002a60 <ADC_Enable+0xc4>)
 80029d6:	4013      	ands	r3, r2
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d00d      	beq.n	80029f8 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029e0:	f043 0210 	orr.w	r2, r3, #16
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029ec:	f043 0201 	orr.w	r2, r3, #1
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	645a      	str	r2, [r3, #68]	@ 0x44
      
      return HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	e02f      	b.n	8002a58 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	689a      	ldr	r2, [r3, #8]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f042 0201 	orr.w	r2, r2, #1
 8002a06:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002a08:	f7ff fa64 	bl	8001ed4 <HAL_GetTick>
 8002a0c:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002a0e:	e01b      	b.n	8002a48 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002a10:	f7ff fa60 	bl	8001ed4 <HAL_GetTick>
 8002a14:	4602      	mov	r2, r0
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	2b02      	cmp	r3, #2
 8002a1c:	d914      	bls.n	8002a48 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 0301 	and.w	r3, r3, #1
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	d00d      	beq.n	8002a48 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a30:	f043 0210 	orr.w	r2, r3, #16
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a3c:	f043 0201 	orr.w	r2, r3, #1
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	e007      	b.n	8002a58 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0301 	and.w	r3, r3, #1
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d1dc      	bne.n	8002a10 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002a56:	2300      	movs	r3, #0
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	3710      	adds	r7, #16
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	8000003f 	.word	0x8000003f

08002a64 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b084      	sub	sp, #16
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	f003 0303 	and.w	r3, r3, #3
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d108      	bne.n	8002a90 <ADC_Disable+0x2c>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 0301 	and.w	r3, r3, #1
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d101      	bne.n	8002a90 <ADC_Disable+0x2c>
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e000      	b.n	8002a92 <ADC_Disable+0x2e>
 8002a90:	2300      	movs	r3, #0
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d047      	beq.n	8002b26 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	f003 030d 	and.w	r3, r3, #13
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d10f      	bne.n	8002ac4 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	689a      	ldr	r2, [r3, #8]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f042 0202 	orr.w	r2, r2, #2
 8002ab2:	609a      	str	r2, [r3, #8]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	2203      	movs	r2, #3
 8002aba:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002abc:	f7ff fa0a 	bl	8001ed4 <HAL_GetTick>
 8002ac0:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002ac2:	e029      	b.n	8002b18 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ac8:	f043 0210 	orr.w	r2, r3, #16
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ad4:	f043 0201 	orr.w	r2, r3, #1
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	e023      	b.n	8002b28 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002ae0:	f7ff f9f8 	bl	8001ed4 <HAL_GetTick>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	1ad3      	subs	r3, r2, r3
 8002aea:	2b02      	cmp	r3, #2
 8002aec:	d914      	bls.n	8002b18 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	f003 0301 	and.w	r3, r3, #1
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d10d      	bne.n	8002b18 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b00:	f043 0210 	orr.w	r2, r3, #16
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b0c:	f043 0201 	orr.w	r2, r3, #1
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	e007      	b.n	8002b28 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	f003 0301 	and.w	r3, r3, #1
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d0dc      	beq.n	8002ae0 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002b26:	2300      	movs	r3, #0
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3710      	adds	r7, #16
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}

08002b30 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b084      	sub	sp, #16
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d101      	bne.n	8002b42 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e0ed      	b.n	8002d1e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d102      	bne.n	8002b54 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f7fe ff54 	bl	80019fc <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f042 0201 	orr.w	r2, r2, #1
 8002b62:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b64:	f7ff f9b6 	bl	8001ed4 <HAL_GetTick>
 8002b68:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002b6a:	e012      	b.n	8002b92 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002b6c:	f7ff f9b2 	bl	8001ed4 <HAL_GetTick>
 8002b70:	4602      	mov	r2, r0
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	2b0a      	cmp	r3, #10
 8002b78:	d90b      	bls.n	8002b92 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b7e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2205      	movs	r2, #5
 8002b8a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e0c5      	b.n	8002d1e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	f003 0301 	and.w	r3, r3, #1
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d0e5      	beq.n	8002b6c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f022 0202 	bic.w	r2, r2, #2
 8002bae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002bb0:	f7ff f990 	bl	8001ed4 <HAL_GetTick>
 8002bb4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002bb6:	e012      	b.n	8002bde <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002bb8:	f7ff f98c 	bl	8001ed4 <HAL_GetTick>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	2b0a      	cmp	r3, #10
 8002bc4:	d90b      	bls.n	8002bde <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bca:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2205      	movs	r2, #5
 8002bd6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e09f      	b.n	8002d1e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	f003 0302 	and.w	r3, r3, #2
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d1e5      	bne.n	8002bb8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	7e1b      	ldrb	r3, [r3, #24]
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d108      	bne.n	8002c06 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002c02:	601a      	str	r2, [r3, #0]
 8002c04:	e007      	b.n	8002c16 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002c14:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	7e5b      	ldrb	r3, [r3, #25]
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	d108      	bne.n	8002c30 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002c2c:	601a      	str	r2, [r3, #0]
 8002c2e:	e007      	b.n	8002c40 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002c3e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	7e9b      	ldrb	r3, [r3, #26]
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d108      	bne.n	8002c5a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f042 0220 	orr.w	r2, r2, #32
 8002c56:	601a      	str	r2, [r3, #0]
 8002c58:	e007      	b.n	8002c6a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f022 0220 	bic.w	r2, r2, #32
 8002c68:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	7edb      	ldrb	r3, [r3, #27]
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d108      	bne.n	8002c84 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f022 0210 	bic.w	r2, r2, #16
 8002c80:	601a      	str	r2, [r3, #0]
 8002c82:	e007      	b.n	8002c94 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f042 0210 	orr.w	r2, r2, #16
 8002c92:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	7f1b      	ldrb	r3, [r3, #28]
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d108      	bne.n	8002cae <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f042 0208 	orr.w	r2, r2, #8
 8002caa:	601a      	str	r2, [r3, #0]
 8002cac:	e007      	b.n	8002cbe <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f022 0208 	bic.w	r2, r2, #8
 8002cbc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	7f5b      	ldrb	r3, [r3, #29]
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d108      	bne.n	8002cd8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f042 0204 	orr.w	r2, r2, #4
 8002cd4:	601a      	str	r2, [r3, #0]
 8002cd6:	e007      	b.n	8002ce8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f022 0204 	bic.w	r2, r2, #4
 8002ce6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	689a      	ldr	r2, [r3, #8]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	68db      	ldr	r3, [r3, #12]
 8002cf0:	431a      	orrs	r2, r3
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	691b      	ldr	r3, [r3, #16]
 8002cf6:	431a      	orrs	r2, r3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	695b      	ldr	r3, [r3, #20]
 8002cfc:	ea42 0103 	orr.w	r1, r2, r3
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	1e5a      	subs	r2, r3, #1
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	430a      	orrs	r2, r1
 8002d0c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2200      	movs	r2, #0
 8002d12:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2201      	movs	r2, #1
 8002d18:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002d1c:	2300      	movs	r3, #0
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3710      	adds	r7, #16
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}

08002d26 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8002d26:	b480      	push	{r7}
 8002d28:	b087      	sub	sp, #28
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	6078      	str	r0, [r7, #4]
 8002d2e:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d3c:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002d3e:	7cfb      	ldrb	r3, [r7, #19]
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d003      	beq.n	8002d4c <HAL_CAN_ConfigFilter+0x26>
 8002d44:	7cfb      	ldrb	r3, [r7, #19]
 8002d46:	2b02      	cmp	r3, #2
 8002d48:	f040 80aa 	bne.w	8002ea0 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002d52:	f043 0201 	orr.w	r2, r3, #1
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	695b      	ldr	r3, [r3, #20]
 8002d60:	f003 031f 	and.w	r3, r3, #31
 8002d64:	2201      	movs	r2, #1
 8002d66:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	43db      	mvns	r3, r3
 8002d76:	401a      	ands	r2, r3
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	69db      	ldr	r3, [r3, #28]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d123      	bne.n	8002dce <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	43db      	mvns	r3, r3
 8002d90:	401a      	ands	r2, r3
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002da4:	683a      	ldr	r2, [r7, #0]
 8002da6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002da8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	3248      	adds	r2, #72	@ 0x48
 8002dae:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002dc2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002dc4:	6979      	ldr	r1, [r7, #20]
 8002dc6:	3348      	adds	r3, #72	@ 0x48
 8002dc8:	00db      	lsls	r3, r3, #3
 8002dca:	440b      	add	r3, r1
 8002dcc:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	69db      	ldr	r3, [r3, #28]
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d122      	bne.n	8002e1c <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	431a      	orrs	r2, r3
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002df2:	683a      	ldr	r2, [r7, #0]
 8002df4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002df6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	3248      	adds	r2, #72	@ 0x48
 8002dfc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	68db      	ldr	r3, [r3, #12]
 8002e0a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002e10:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002e12:	6979      	ldr	r1, [r7, #20]
 8002e14:	3348      	adds	r3, #72	@ 0x48
 8002e16:	00db      	lsls	r3, r3, #3
 8002e18:	440b      	add	r3, r1
 8002e1a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	699b      	ldr	r3, [r3, #24]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d109      	bne.n	8002e38 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	43db      	mvns	r3, r3
 8002e2e:	401a      	ands	r2, r3
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8002e36:	e007      	b.n	8002e48 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	431a      	orrs	r2, r3
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	691b      	ldr	r3, [r3, #16]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d109      	bne.n	8002e64 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	43db      	mvns	r3, r3
 8002e5a:	401a      	ands	r2, r3
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8002e62:	e007      	b.n	8002e74 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	431a      	orrs	r2, r3
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	6a1b      	ldr	r3, [r3, #32]
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d107      	bne.n	8002e8c <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	431a      	orrs	r2, r3
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002e92:	f023 0201 	bic.w	r2, r3, #1
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	e006      	b.n	8002eae <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ea4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
  }
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	371c      	adds	r7, #28
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr

08002eba <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002eba:	b580      	push	{r7, lr}
 8002ebc:	b084      	sub	sp, #16
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d12e      	bne.n	8002f2c <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2202      	movs	r2, #2
 8002ed2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f022 0201 	bic.w	r2, r2, #1
 8002ee4:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002ee6:	f7fe fff5 	bl	8001ed4 <HAL_GetTick>
 8002eea:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002eec:	e012      	b.n	8002f14 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002eee:	f7fe fff1 	bl	8001ed4 <HAL_GetTick>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	2b0a      	cmp	r3, #10
 8002efa:	d90b      	bls.n	8002f14 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f00:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2205      	movs	r2, #5
 8002f0c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e012      	b.n	8002f3a <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	f003 0301 	and.w	r3, r3, #1
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d1e5      	bne.n	8002eee <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2200      	movs	r2, #0
 8002f26:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	e006      	b.n	8002f3a <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f30:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
  }
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3710      	adds	r7, #16
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}

08002f42 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8002f42:	b480      	push	{r7}
 8002f44:	b089      	sub	sp, #36	@ 0x24
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	60f8      	str	r0, [r7, #12]
 8002f4a:	60b9      	str	r1, [r7, #8]
 8002f4c:	607a      	str	r2, [r7, #4]
 8002f4e:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f56:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002f60:	7ffb      	ldrb	r3, [r7, #31]
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d003      	beq.n	8002f6e <HAL_CAN_AddTxMessage+0x2c>
 8002f66:	7ffb      	ldrb	r3, [r7, #31]
 8002f68:	2b02      	cmp	r3, #2
 8002f6a:	f040 80ad 	bne.w	80030c8 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002f6e:	69bb      	ldr	r3, [r7, #24]
 8002f70:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d10a      	bne.n	8002f8e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002f78:	69bb      	ldr	r3, [r7, #24]
 8002f7a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d105      	bne.n	8002f8e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002f82:	69bb      	ldr	r3, [r7, #24]
 8002f84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	f000 8095 	beq.w	80030b8 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002f8e:	69bb      	ldr	r3, [r7, #24]
 8002f90:	0e1b      	lsrs	r3, r3, #24
 8002f92:	f003 0303 	and.w	r3, r3, #3
 8002f96:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002f98:	2201      	movs	r2, #1
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	409a      	lsls	r2, r3
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d10d      	bne.n	8002fc6 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002fb4:	68f9      	ldr	r1, [r7, #12]
 8002fb6:	6809      	ldr	r1, [r1, #0]
 8002fb8:	431a      	orrs	r2, r3
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	3318      	adds	r3, #24
 8002fbe:	011b      	lsls	r3, r3, #4
 8002fc0:	440b      	add	r3, r1
 8002fc2:	601a      	str	r2, [r3, #0]
 8002fc4:	e00f      	b.n	8002fe6 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002fd0:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002fd6:	68f9      	ldr	r1, [r7, #12]
 8002fd8:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002fda:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	3318      	adds	r3, #24
 8002fe0:	011b      	lsls	r3, r3, #4
 8002fe2:	440b      	add	r3, r1
 8002fe4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	6819      	ldr	r1, [r3, #0]
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	691a      	ldr	r2, [r3, #16]
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	3318      	adds	r3, #24
 8002ff2:	011b      	lsls	r3, r3, #4
 8002ff4:	440b      	add	r3, r1
 8002ff6:	3304      	adds	r3, #4
 8002ff8:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	7d1b      	ldrb	r3, [r3, #20]
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d111      	bne.n	8003026 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	3318      	adds	r3, #24
 800300a:	011b      	lsls	r3, r3, #4
 800300c:	4413      	add	r3, r2
 800300e:	3304      	adds	r3, #4
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	68fa      	ldr	r2, [r7, #12]
 8003014:	6811      	ldr	r1, [r2, #0]
 8003016:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	3318      	adds	r3, #24
 800301e:	011b      	lsls	r3, r3, #4
 8003020:	440b      	add	r3, r1
 8003022:	3304      	adds	r3, #4
 8003024:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	3307      	adds	r3, #7
 800302a:	781b      	ldrb	r3, [r3, #0]
 800302c:	061a      	lsls	r2, r3, #24
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	3306      	adds	r3, #6
 8003032:	781b      	ldrb	r3, [r3, #0]
 8003034:	041b      	lsls	r3, r3, #16
 8003036:	431a      	orrs	r2, r3
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	3305      	adds	r3, #5
 800303c:	781b      	ldrb	r3, [r3, #0]
 800303e:	021b      	lsls	r3, r3, #8
 8003040:	4313      	orrs	r3, r2
 8003042:	687a      	ldr	r2, [r7, #4]
 8003044:	3204      	adds	r2, #4
 8003046:	7812      	ldrb	r2, [r2, #0]
 8003048:	4610      	mov	r0, r2
 800304a:	68fa      	ldr	r2, [r7, #12]
 800304c:	6811      	ldr	r1, [r2, #0]
 800304e:	ea43 0200 	orr.w	r2, r3, r0
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	011b      	lsls	r3, r3, #4
 8003056:	440b      	add	r3, r1
 8003058:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 800305c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	3303      	adds	r3, #3
 8003062:	781b      	ldrb	r3, [r3, #0]
 8003064:	061a      	lsls	r2, r3, #24
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	3302      	adds	r3, #2
 800306a:	781b      	ldrb	r3, [r3, #0]
 800306c:	041b      	lsls	r3, r3, #16
 800306e:	431a      	orrs	r2, r3
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	3301      	adds	r3, #1
 8003074:	781b      	ldrb	r3, [r3, #0]
 8003076:	021b      	lsls	r3, r3, #8
 8003078:	4313      	orrs	r3, r2
 800307a:	687a      	ldr	r2, [r7, #4]
 800307c:	7812      	ldrb	r2, [r2, #0]
 800307e:	4610      	mov	r0, r2
 8003080:	68fa      	ldr	r2, [r7, #12]
 8003082:	6811      	ldr	r1, [r2, #0]
 8003084:	ea43 0200 	orr.w	r2, r3, r0
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	011b      	lsls	r3, r3, #4
 800308c:	440b      	add	r3, r1
 800308e:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8003092:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	3318      	adds	r3, #24
 800309c:	011b      	lsls	r3, r3, #4
 800309e:	4413      	add	r3, r2
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	68fa      	ldr	r2, [r7, #12]
 80030a4:	6811      	ldr	r1, [r2, #0]
 80030a6:	f043 0201 	orr.w	r2, r3, #1
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	3318      	adds	r3, #24
 80030ae:	011b      	lsls	r3, r3, #4
 80030b0:	440b      	add	r3, r1
 80030b2:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80030b4:	2300      	movs	r3, #0
 80030b6:	e00e      	b.n	80030d6 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030bc:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e006      	b.n	80030d6 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030cc:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
  }
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3724      	adds	r7, #36	@ 0x24
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr

080030e2 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80030e2:	b480      	push	{r7}
 80030e4:	b087      	sub	sp, #28
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	60f8      	str	r0, [r7, #12]
 80030ea:	60b9      	str	r1, [r7, #8]
 80030ec:	607a      	str	r2, [r7, #4]
 80030ee:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030f6:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80030f8:	7dfb      	ldrb	r3, [r7, #23]
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d003      	beq.n	8003106 <HAL_CAN_GetRxMessage+0x24>
 80030fe:	7dfb      	ldrb	r3, [r7, #23]
 8003100:	2b02      	cmp	r3, #2
 8003102:	f040 8103 	bne.w	800330c <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d10e      	bne.n	800312a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	68db      	ldr	r3, [r3, #12]
 8003112:	f003 0303 	and.w	r3, r3, #3
 8003116:	2b00      	cmp	r3, #0
 8003118:	d116      	bne.n	8003148 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800311e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e0f7      	b.n	800331a <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	691b      	ldr	r3, [r3, #16]
 8003130:	f003 0303 	and.w	r3, r3, #3
 8003134:	2b00      	cmp	r3, #0
 8003136:	d107      	bne.n	8003148 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800313c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e0e8      	b.n	800331a <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	331b      	adds	r3, #27
 8003150:	011b      	lsls	r3, r3, #4
 8003152:	4413      	add	r3, r2
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 0204 	and.w	r2, r3, #4
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d10c      	bne.n	8003180 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	331b      	adds	r3, #27
 800316e:	011b      	lsls	r3, r3, #4
 8003170:	4413      	add	r3, r2
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	0d5b      	lsrs	r3, r3, #21
 8003176:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	601a      	str	r2, [r3, #0]
 800317e:	e00b      	b.n	8003198 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	331b      	adds	r3, #27
 8003188:	011b      	lsls	r3, r3, #4
 800318a:	4413      	add	r3, r2
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	08db      	lsrs	r3, r3, #3
 8003190:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	331b      	adds	r3, #27
 80031a0:	011b      	lsls	r3, r3, #4
 80031a2:	4413      	add	r3, r2
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 0202 	and.w	r2, r3, #2
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	331b      	adds	r3, #27
 80031b6:	011b      	lsls	r3, r3, #4
 80031b8:	4413      	add	r3, r2
 80031ba:	3304      	adds	r3, #4
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 0308 	and.w	r3, r3, #8
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d003      	beq.n	80031ce <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2208      	movs	r2, #8
 80031ca:	611a      	str	r2, [r3, #16]
 80031cc:	e00b      	b.n	80031e6 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	331b      	adds	r3, #27
 80031d6:	011b      	lsls	r3, r3, #4
 80031d8:	4413      	add	r3, r2
 80031da:	3304      	adds	r3, #4
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 020f 	and.w	r2, r3, #15
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	331b      	adds	r3, #27
 80031ee:	011b      	lsls	r3, r3, #4
 80031f0:	4413      	add	r3, r2
 80031f2:	3304      	adds	r3, #4
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	0a1b      	lsrs	r3, r3, #8
 80031f8:	b2da      	uxtb	r2, r3
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	331b      	adds	r3, #27
 8003206:	011b      	lsls	r3, r3, #4
 8003208:	4413      	add	r3, r2
 800320a:	3304      	adds	r3, #4
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	0c1b      	lsrs	r3, r3, #16
 8003210:	b29a      	uxth	r2, r3
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	011b      	lsls	r3, r3, #4
 800321e:	4413      	add	r3, r2
 8003220:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	b2da      	uxtb	r2, r3
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	011b      	lsls	r3, r3, #4
 8003234:	4413      	add	r3, r2
 8003236:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	0a1a      	lsrs	r2, r3, #8
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	3301      	adds	r3, #1
 8003242:	b2d2      	uxtb	r2, r2
 8003244:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	011b      	lsls	r3, r3, #4
 800324e:	4413      	add	r3, r2
 8003250:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	0c1a      	lsrs	r2, r3, #16
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	3302      	adds	r3, #2
 800325c:	b2d2      	uxtb	r2, r2
 800325e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	011b      	lsls	r3, r3, #4
 8003268:	4413      	add	r3, r2
 800326a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	0e1a      	lsrs	r2, r3, #24
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	3303      	adds	r3, #3
 8003276:	b2d2      	uxtb	r2, r2
 8003278:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	011b      	lsls	r3, r3, #4
 8003282:	4413      	add	r3, r2
 8003284:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	3304      	adds	r3, #4
 800328e:	b2d2      	uxtb	r2, r2
 8003290:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	011b      	lsls	r3, r3, #4
 800329a:	4413      	add	r3, r2
 800329c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	0a1a      	lsrs	r2, r3, #8
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	3305      	adds	r3, #5
 80032a8:	b2d2      	uxtb	r2, r2
 80032aa:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	011b      	lsls	r3, r3, #4
 80032b4:	4413      	add	r3, r2
 80032b6:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	0c1a      	lsrs	r2, r3, #16
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	3306      	adds	r3, #6
 80032c2:	b2d2      	uxtb	r2, r2
 80032c4:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	011b      	lsls	r3, r3, #4
 80032ce:	4413      	add	r3, r2
 80032d0:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	0e1a      	lsrs	r2, r3, #24
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	3307      	adds	r3, #7
 80032dc:	b2d2      	uxtb	r2, r2
 80032de:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d108      	bne.n	80032f8 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	68da      	ldr	r2, [r3, #12]
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f042 0220 	orr.w	r2, r2, #32
 80032f4:	60da      	str	r2, [r3, #12]
 80032f6:	e007      	b.n	8003308 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	691a      	ldr	r2, [r3, #16]
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f042 0220 	orr.w	r2, r2, #32
 8003306:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003308:	2300      	movs	r3, #0
 800330a:	e006      	b.n	800331a <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003310:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003318:	2301      	movs	r3, #1
  }
}
 800331a:	4618      	mov	r0, r3
 800331c:	371c      	adds	r7, #28
 800331e:	46bd      	mov	sp, r7
 8003320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003324:	4770      	bx	lr

08003326 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003326:	b480      	push	{r7}
 8003328:	b085      	sub	sp, #20
 800332a:	af00      	add	r7, sp, #0
 800332c:	6078      	str	r0, [r7, #4]
 800332e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003336:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003338:	7bfb      	ldrb	r3, [r7, #15]
 800333a:	2b01      	cmp	r3, #1
 800333c:	d002      	beq.n	8003344 <HAL_CAN_ActivateNotification+0x1e>
 800333e:	7bfb      	ldrb	r3, [r7, #15]
 8003340:	2b02      	cmp	r3, #2
 8003342:	d109      	bne.n	8003358 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	6959      	ldr	r1, [r3, #20]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	683a      	ldr	r2, [r7, #0]
 8003350:	430a      	orrs	r2, r1
 8003352:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003354:	2300      	movs	r3, #0
 8003356:	e006      	b.n	8003366 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800335c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
  }
}
 8003366:	4618      	mov	r0, r3
 8003368:	3714      	adds	r7, #20
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr

08003372 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003372:	b580      	push	{r7, lr}
 8003374:	b08a      	sub	sp, #40	@ 0x28
 8003376:	af00      	add	r7, sp, #0
 8003378:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800337a:	2300      	movs	r3, #0
 800337c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	695b      	ldr	r3, [r3, #20]
 8003384:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	68db      	ldr	r3, [r3, #12]
 800339c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	691b      	ldr	r3, [r3, #16]
 80033a4:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	699b      	ldr	r3, [r3, #24]
 80033ac:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80033ae:	6a3b      	ldr	r3, [r7, #32]
 80033b0:	f003 0301 	and.w	r3, r3, #1
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d07c      	beq.n	80034b2 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80033b8:	69bb      	ldr	r3, [r7, #24]
 80033ba:	f003 0301 	and.w	r3, r3, #1
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d023      	beq.n	800340a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	2201      	movs	r2, #1
 80033c8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80033ca:	69bb      	ldr	r3, [r7, #24]
 80033cc:	f003 0302 	and.w	r3, r3, #2
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d003      	beq.n	80033dc <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80033d4:	6878      	ldr	r0, [r7, #4]
 80033d6:	f000 f983 	bl	80036e0 <HAL_CAN_TxMailbox0CompleteCallback>
 80033da:	e016      	b.n	800340a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80033dc:	69bb      	ldr	r3, [r7, #24]
 80033de:	f003 0304 	and.w	r3, r3, #4
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d004      	beq.n	80033f0 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80033e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033e8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80033ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80033ee:	e00c      	b.n	800340a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80033f0:	69bb      	ldr	r3, [r7, #24]
 80033f2:	f003 0308 	and.w	r3, r3, #8
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d004      	beq.n	8003404 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80033fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033fc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003400:	627b      	str	r3, [r7, #36]	@ 0x24
 8003402:	e002      	b.n	800340a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	f000 f989 	bl	800371c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800340a:	69bb      	ldr	r3, [r7, #24]
 800340c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003410:	2b00      	cmp	r3, #0
 8003412:	d024      	beq.n	800345e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800341c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800341e:	69bb      	ldr	r3, [r7, #24]
 8003420:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003424:	2b00      	cmp	r3, #0
 8003426:	d003      	beq.n	8003430 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	f000 f963 	bl	80036f4 <HAL_CAN_TxMailbox1CompleteCallback>
 800342e:	e016      	b.n	800345e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003430:	69bb      	ldr	r3, [r7, #24]
 8003432:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003436:	2b00      	cmp	r3, #0
 8003438:	d004      	beq.n	8003444 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800343a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800343c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003440:	627b      	str	r3, [r7, #36]	@ 0x24
 8003442:	e00c      	b.n	800345e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003444:	69bb      	ldr	r3, [r7, #24]
 8003446:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800344a:	2b00      	cmp	r3, #0
 800344c:	d004      	beq.n	8003458 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800344e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003450:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003454:	627b      	str	r3, [r7, #36]	@ 0x24
 8003456:	e002      	b.n	800345e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	f000 f969 	bl	8003730 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800345e:	69bb      	ldr	r3, [r7, #24]
 8003460:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003464:	2b00      	cmp	r3, #0
 8003466:	d024      	beq.n	80034b2 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003470:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003472:	69bb      	ldr	r3, [r7, #24]
 8003474:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003478:	2b00      	cmp	r3, #0
 800347a:	d003      	beq.n	8003484 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f000 f943 	bl	8003708 <HAL_CAN_TxMailbox2CompleteCallback>
 8003482:	e016      	b.n	80034b2 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003484:	69bb      	ldr	r3, [r7, #24]
 8003486:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800348a:	2b00      	cmp	r3, #0
 800348c:	d004      	beq.n	8003498 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800348e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003490:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003494:	627b      	str	r3, [r7, #36]	@ 0x24
 8003496:	e00c      	b.n	80034b2 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003498:	69bb      	ldr	r3, [r7, #24]
 800349a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d004      	beq.n	80034ac <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80034a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80034aa:	e002      	b.n	80034b2 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80034ac:	6878      	ldr	r0, [r7, #4]
 80034ae:	f000 f949 	bl	8003744 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80034b2:	6a3b      	ldr	r3, [r7, #32]
 80034b4:	f003 0308 	and.w	r3, r3, #8
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d00c      	beq.n	80034d6 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	f003 0310 	and.w	r3, r3, #16
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d007      	beq.n	80034d6 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80034c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034c8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80034cc:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	2210      	movs	r2, #16
 80034d4:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80034d6:	6a3b      	ldr	r3, [r7, #32]
 80034d8:	f003 0304 	and.w	r3, r3, #4
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d00b      	beq.n	80034f8 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	f003 0308 	and.w	r3, r3, #8
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d006      	beq.n	80034f8 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	2208      	movs	r2, #8
 80034f0:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f000 f930 	bl	8003758 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80034f8:	6a3b      	ldr	r3, [r7, #32]
 80034fa:	f003 0302 	and.w	r3, r3, #2
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d009      	beq.n	8003516 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	68db      	ldr	r3, [r3, #12]
 8003508:	f003 0303 	and.w	r3, r3, #3
 800350c:	2b00      	cmp	r3, #0
 800350e:	d002      	beq.n	8003516 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	f7fd fc7d 	bl	8000e10 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003516:	6a3b      	ldr	r3, [r7, #32]
 8003518:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800351c:	2b00      	cmp	r3, #0
 800351e:	d00c      	beq.n	800353a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	f003 0310 	and.w	r3, r3, #16
 8003526:	2b00      	cmp	r3, #0
 8003528:	d007      	beq.n	800353a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800352a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800352c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003530:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	2210      	movs	r2, #16
 8003538:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800353a:	6a3b      	ldr	r3, [r7, #32]
 800353c:	f003 0320 	and.w	r3, r3, #32
 8003540:	2b00      	cmp	r3, #0
 8003542:	d00b      	beq.n	800355c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	f003 0308 	and.w	r3, r3, #8
 800354a:	2b00      	cmp	r3, #0
 800354c:	d006      	beq.n	800355c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	2208      	movs	r2, #8
 8003554:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f000 f912 	bl	8003780 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800355c:	6a3b      	ldr	r3, [r7, #32]
 800355e:	f003 0310 	and.w	r3, r3, #16
 8003562:	2b00      	cmp	r3, #0
 8003564:	d009      	beq.n	800357a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	691b      	ldr	r3, [r3, #16]
 800356c:	f003 0303 	and.w	r3, r3, #3
 8003570:	2b00      	cmp	r3, #0
 8003572:	d002      	beq.n	800357a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	f000 f8f9 	bl	800376c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800357a:	6a3b      	ldr	r3, [r7, #32]
 800357c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003580:	2b00      	cmp	r3, #0
 8003582:	d00b      	beq.n	800359c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003584:	69fb      	ldr	r3, [r7, #28]
 8003586:	f003 0310 	and.w	r3, r3, #16
 800358a:	2b00      	cmp	r3, #0
 800358c:	d006      	beq.n	800359c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	2210      	movs	r2, #16
 8003594:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f000 f8fc 	bl	8003794 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800359c:	6a3b      	ldr	r3, [r7, #32]
 800359e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d00b      	beq.n	80035be <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80035a6:	69fb      	ldr	r3, [r7, #28]
 80035a8:	f003 0308 	and.w	r3, r3, #8
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d006      	beq.n	80035be <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	2208      	movs	r2, #8
 80035b6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80035b8:	6878      	ldr	r0, [r7, #4]
 80035ba:	f000 f8f5 	bl	80037a8 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80035be:	6a3b      	ldr	r3, [r7, #32]
 80035c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d07b      	beq.n	80036c0 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80035c8:	69fb      	ldr	r3, [r7, #28]
 80035ca:	f003 0304 	and.w	r3, r3, #4
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d072      	beq.n	80036b8 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80035d2:	6a3b      	ldr	r3, [r7, #32]
 80035d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d008      	beq.n	80035ee <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d003      	beq.n	80035ee <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80035e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035e8:	f043 0301 	orr.w	r3, r3, #1
 80035ec:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80035ee:	6a3b      	ldr	r3, [r7, #32]
 80035f0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d008      	beq.n	800360a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d003      	beq.n	800360a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003604:	f043 0302 	orr.w	r3, r3, #2
 8003608:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800360a:	6a3b      	ldr	r3, [r7, #32]
 800360c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003610:	2b00      	cmp	r3, #0
 8003612:	d008      	beq.n	8003626 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800361a:	2b00      	cmp	r3, #0
 800361c:	d003      	beq.n	8003626 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800361e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003620:	f043 0304 	orr.w	r3, r3, #4
 8003624:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003626:	6a3b      	ldr	r3, [r7, #32]
 8003628:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800362c:	2b00      	cmp	r3, #0
 800362e:	d043      	beq.n	80036b8 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003636:	2b00      	cmp	r3, #0
 8003638:	d03e      	beq.n	80036b8 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003640:	2b60      	cmp	r3, #96	@ 0x60
 8003642:	d02b      	beq.n	800369c <HAL_CAN_IRQHandler+0x32a>
 8003644:	2b60      	cmp	r3, #96	@ 0x60
 8003646:	d82e      	bhi.n	80036a6 <HAL_CAN_IRQHandler+0x334>
 8003648:	2b50      	cmp	r3, #80	@ 0x50
 800364a:	d022      	beq.n	8003692 <HAL_CAN_IRQHandler+0x320>
 800364c:	2b50      	cmp	r3, #80	@ 0x50
 800364e:	d82a      	bhi.n	80036a6 <HAL_CAN_IRQHandler+0x334>
 8003650:	2b40      	cmp	r3, #64	@ 0x40
 8003652:	d019      	beq.n	8003688 <HAL_CAN_IRQHandler+0x316>
 8003654:	2b40      	cmp	r3, #64	@ 0x40
 8003656:	d826      	bhi.n	80036a6 <HAL_CAN_IRQHandler+0x334>
 8003658:	2b30      	cmp	r3, #48	@ 0x30
 800365a:	d010      	beq.n	800367e <HAL_CAN_IRQHandler+0x30c>
 800365c:	2b30      	cmp	r3, #48	@ 0x30
 800365e:	d822      	bhi.n	80036a6 <HAL_CAN_IRQHandler+0x334>
 8003660:	2b10      	cmp	r3, #16
 8003662:	d002      	beq.n	800366a <HAL_CAN_IRQHandler+0x2f8>
 8003664:	2b20      	cmp	r3, #32
 8003666:	d005      	beq.n	8003674 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003668:	e01d      	b.n	80036a6 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800366a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800366c:	f043 0308 	orr.w	r3, r3, #8
 8003670:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003672:	e019      	b.n	80036a8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003676:	f043 0310 	orr.w	r3, r3, #16
 800367a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800367c:	e014      	b.n	80036a8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800367e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003680:	f043 0320 	orr.w	r3, r3, #32
 8003684:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003686:	e00f      	b.n	80036a8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800368a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800368e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003690:	e00a      	b.n	80036a8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003694:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003698:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800369a:	e005      	b.n	80036a8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800369c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800369e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036a2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80036a4:	e000      	b.n	80036a8 <HAL_CAN_IRQHandler+0x336>
            break;
 80036a6:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	699a      	ldr	r2, [r3, #24]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80036b6:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	2204      	movs	r2, #4
 80036be:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80036c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d008      	beq.n	80036d8 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80036ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036cc:	431a      	orrs	r2, r3
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f000 f872 	bl	80037bc <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80036d8:	bf00      	nop
 80036da:	3728      	adds	r7, #40	@ 0x28
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}

080036e0 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b083      	sub	sp, #12
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80036e8:	bf00      	nop
 80036ea:	370c      	adds	r7, #12
 80036ec:	46bd      	mov	sp, r7
 80036ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f2:	4770      	bx	lr

080036f4 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b083      	sub	sp, #12
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80036fc:	bf00      	nop
 80036fe:	370c      	adds	r7, #12
 8003700:	46bd      	mov	sp, r7
 8003702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003706:	4770      	bx	lr

08003708 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003708:	b480      	push	{r7}
 800370a:	b083      	sub	sp, #12
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003710:	bf00      	nop
 8003712:	370c      	adds	r7, #12
 8003714:	46bd      	mov	sp, r7
 8003716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371a:	4770      	bx	lr

0800371c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800371c:	b480      	push	{r7}
 800371e:	b083      	sub	sp, #12
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003724:	bf00      	nop
 8003726:	370c      	adds	r7, #12
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr

08003730 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003730:	b480      	push	{r7}
 8003732:	b083      	sub	sp, #12
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003738:	bf00      	nop
 800373a:	370c      	adds	r7, #12
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr

08003744 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003744:	b480      	push	{r7}
 8003746:	b083      	sub	sp, #12
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800374c:	bf00      	nop
 800374e:	370c      	adds	r7, #12
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr

08003758 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003758:	b480      	push	{r7}
 800375a:	b083      	sub	sp, #12
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003760:	bf00      	nop
 8003762:	370c      	adds	r7, #12
 8003764:	46bd      	mov	sp, r7
 8003766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376a:	4770      	bx	lr

0800376c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800376c:	b480      	push	{r7}
 800376e:	b083      	sub	sp, #12
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003774:	bf00      	nop
 8003776:	370c      	adds	r7, #12
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr

08003780 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003780:	b480      	push	{r7}
 8003782:	b083      	sub	sp, #12
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003788:	bf00      	nop
 800378a:	370c      	adds	r7, #12
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr

08003794 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003794:	b480      	push	{r7}
 8003796:	b083      	sub	sp, #12
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800379c:	bf00      	nop
 800379e:	370c      	adds	r7, #12
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr

080037a8 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b083      	sub	sp, #12
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80037b0:	bf00      	nop
 80037b2:	370c      	adds	r7, #12
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr

080037bc <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80037bc:	b480      	push	{r7}
 80037be:	b083      	sub	sp, #12
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80037c4:	bf00      	nop
 80037c6:	370c      	adds	r7, #12
 80037c8:	46bd      	mov	sp, r7
 80037ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ce:	4770      	bx	lr

080037d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b085      	sub	sp, #20
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	f003 0307 	and.w	r3, r3, #7
 80037de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037e0:	4b0c      	ldr	r3, [pc, #48]	@ (8003814 <__NVIC_SetPriorityGrouping+0x44>)
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037e6:	68ba      	ldr	r2, [r7, #8]
 80037e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80037ec:	4013      	ands	r3, r2
 80037ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80037f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80037fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003800:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003802:	4a04      	ldr	r2, [pc, #16]	@ (8003814 <__NVIC_SetPriorityGrouping+0x44>)
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	60d3      	str	r3, [r2, #12]
}
 8003808:	bf00      	nop
 800380a:	3714      	adds	r7, #20
 800380c:	46bd      	mov	sp, r7
 800380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003812:	4770      	bx	lr
 8003814:	e000ed00 	.word	0xe000ed00

08003818 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003818:	b480      	push	{r7}
 800381a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800381c:	4b04      	ldr	r3, [pc, #16]	@ (8003830 <__NVIC_GetPriorityGrouping+0x18>)
 800381e:	68db      	ldr	r3, [r3, #12]
 8003820:	0a1b      	lsrs	r3, r3, #8
 8003822:	f003 0307 	and.w	r3, r3, #7
}
 8003826:	4618      	mov	r0, r3
 8003828:	46bd      	mov	sp, r7
 800382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382e:	4770      	bx	lr
 8003830:	e000ed00 	.word	0xe000ed00

08003834 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003834:	b480      	push	{r7}
 8003836:	b083      	sub	sp, #12
 8003838:	af00      	add	r7, sp, #0
 800383a:	4603      	mov	r3, r0
 800383c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800383e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003842:	2b00      	cmp	r3, #0
 8003844:	db0b      	blt.n	800385e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003846:	79fb      	ldrb	r3, [r7, #7]
 8003848:	f003 021f 	and.w	r2, r3, #31
 800384c:	4907      	ldr	r1, [pc, #28]	@ (800386c <__NVIC_EnableIRQ+0x38>)
 800384e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003852:	095b      	lsrs	r3, r3, #5
 8003854:	2001      	movs	r0, #1
 8003856:	fa00 f202 	lsl.w	r2, r0, r2
 800385a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800385e:	bf00      	nop
 8003860:	370c      	adds	r7, #12
 8003862:	46bd      	mov	sp, r7
 8003864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003868:	4770      	bx	lr
 800386a:	bf00      	nop
 800386c:	e000e100 	.word	0xe000e100

08003870 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003870:	b480      	push	{r7}
 8003872:	b083      	sub	sp, #12
 8003874:	af00      	add	r7, sp, #0
 8003876:	4603      	mov	r3, r0
 8003878:	6039      	str	r1, [r7, #0]
 800387a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800387c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003880:	2b00      	cmp	r3, #0
 8003882:	db0a      	blt.n	800389a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	b2da      	uxtb	r2, r3
 8003888:	490c      	ldr	r1, [pc, #48]	@ (80038bc <__NVIC_SetPriority+0x4c>)
 800388a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800388e:	0112      	lsls	r2, r2, #4
 8003890:	b2d2      	uxtb	r2, r2
 8003892:	440b      	add	r3, r1
 8003894:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003898:	e00a      	b.n	80038b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	b2da      	uxtb	r2, r3
 800389e:	4908      	ldr	r1, [pc, #32]	@ (80038c0 <__NVIC_SetPriority+0x50>)
 80038a0:	79fb      	ldrb	r3, [r7, #7]
 80038a2:	f003 030f 	and.w	r3, r3, #15
 80038a6:	3b04      	subs	r3, #4
 80038a8:	0112      	lsls	r2, r2, #4
 80038aa:	b2d2      	uxtb	r2, r2
 80038ac:	440b      	add	r3, r1
 80038ae:	761a      	strb	r2, [r3, #24]
}
 80038b0:	bf00      	nop
 80038b2:	370c      	adds	r7, #12
 80038b4:	46bd      	mov	sp, r7
 80038b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ba:	4770      	bx	lr
 80038bc:	e000e100 	.word	0xe000e100
 80038c0:	e000ed00 	.word	0xe000ed00

080038c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b089      	sub	sp, #36	@ 0x24
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	60f8      	str	r0, [r7, #12]
 80038cc:	60b9      	str	r1, [r7, #8]
 80038ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	f003 0307 	and.w	r3, r3, #7
 80038d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038d8:	69fb      	ldr	r3, [r7, #28]
 80038da:	f1c3 0307 	rsb	r3, r3, #7
 80038de:	2b04      	cmp	r3, #4
 80038e0:	bf28      	it	cs
 80038e2:	2304      	movcs	r3, #4
 80038e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038e6:	69fb      	ldr	r3, [r7, #28]
 80038e8:	3304      	adds	r3, #4
 80038ea:	2b06      	cmp	r3, #6
 80038ec:	d902      	bls.n	80038f4 <NVIC_EncodePriority+0x30>
 80038ee:	69fb      	ldr	r3, [r7, #28]
 80038f0:	3b03      	subs	r3, #3
 80038f2:	e000      	b.n	80038f6 <NVIC_EncodePriority+0x32>
 80038f4:	2300      	movs	r3, #0
 80038f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038f8:	f04f 32ff 	mov.w	r2, #4294967295
 80038fc:	69bb      	ldr	r3, [r7, #24]
 80038fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003902:	43da      	mvns	r2, r3
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	401a      	ands	r2, r3
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800390c:	f04f 31ff 	mov.w	r1, #4294967295
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	fa01 f303 	lsl.w	r3, r1, r3
 8003916:	43d9      	mvns	r1, r3
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800391c:	4313      	orrs	r3, r2
         );
}
 800391e:	4618      	mov	r0, r3
 8003920:	3724      	adds	r7, #36	@ 0x24
 8003922:	46bd      	mov	sp, r7
 8003924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003928:	4770      	bx	lr

0800392a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800392a:	b580      	push	{r7, lr}
 800392c:	b082      	sub	sp, #8
 800392e:	af00      	add	r7, sp, #0
 8003930:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f7ff ff4c 	bl	80037d0 <__NVIC_SetPriorityGrouping>
}
 8003938:	bf00      	nop
 800393a:	3708      	adds	r7, #8
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}

08003940 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b086      	sub	sp, #24
 8003944:	af00      	add	r7, sp, #0
 8003946:	4603      	mov	r3, r0
 8003948:	60b9      	str	r1, [r7, #8]
 800394a:	607a      	str	r2, [r7, #4]
 800394c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800394e:	2300      	movs	r3, #0
 8003950:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003952:	f7ff ff61 	bl	8003818 <__NVIC_GetPriorityGrouping>
 8003956:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003958:	687a      	ldr	r2, [r7, #4]
 800395a:	68b9      	ldr	r1, [r7, #8]
 800395c:	6978      	ldr	r0, [r7, #20]
 800395e:	f7ff ffb1 	bl	80038c4 <NVIC_EncodePriority>
 8003962:	4602      	mov	r2, r0
 8003964:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003968:	4611      	mov	r1, r2
 800396a:	4618      	mov	r0, r3
 800396c:	f7ff ff80 	bl	8003870 <__NVIC_SetPriority>
}
 8003970:	bf00      	nop
 8003972:	3718      	adds	r7, #24
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}

08003978 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b082      	sub	sp, #8
 800397c:	af00      	add	r7, sp, #0
 800397e:	4603      	mov	r3, r0
 8003980:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003986:	4618      	mov	r0, r3
 8003988:	f7ff ff54 	bl	8003834 <__NVIC_EnableIRQ>
}
 800398c:	bf00      	nop
 800398e:	3708      	adds	r7, #8
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}

08003994 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b084      	sub	sp, #16
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800399c:	2300      	movs	r3, #0
 800399e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d101      	bne.n	80039aa <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e037      	b.n	8003a1a <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2202      	movs	r2, #2
 80039ae:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80039c0:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80039c4:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80039ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	695b      	ldr	r3, [r3, #20]
 80039e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	69db      	ldr	r3, [r3, #28]
 80039ec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80039ee:	68fa      	ldr	r2, [r7, #12]
 80039f0:	4313      	orrs	r3, r2
 80039f2:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	68fa      	ldr	r2, [r7, #12]
 80039fa:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f000 f941 	bl	8003c84 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2200      	movs	r2, #0
 8003a06:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2200      	movs	r2, #0
 8003a14:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003a18:	2300      	movs	r3, #0
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3710      	adds	r7, #16
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}

08003a22 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a22:	b580      	push	{r7, lr}
 8003a24:	b086      	sub	sp, #24
 8003a26:	af00      	add	r7, sp, #0
 8003a28:	60f8      	str	r0, [r7, #12]
 8003a2a:	60b9      	str	r1, [r7, #8]
 8003a2c:	607a      	str	r2, [r7, #4]
 8003a2e:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a30:	2300      	movs	r3, #0
 8003a32:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	d101      	bne.n	8003a42 <HAL_DMA_Start_IT+0x20>
 8003a3e:	2302      	movs	r3, #2
 8003a40:	e04a      	b.n	8003ad8 <HAL_DMA_Start_IT+0xb6>
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2201      	movs	r2, #1
 8003a46:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d13a      	bne.n	8003aca <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2202      	movs	r2, #2
 8003a58:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f022 0201 	bic.w	r2, r2, #1
 8003a70:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	687a      	ldr	r2, [r7, #4]
 8003a76:	68b9      	ldr	r1, [r7, #8]
 8003a78:	68f8      	ldr	r0, [r7, #12]
 8003a7a:	f000 f8d4 	bl	8003c26 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d008      	beq.n	8003a98 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f042 020e 	orr.w	r2, r2, #14
 8003a94:	601a      	str	r2, [r3, #0]
 8003a96:	e00f      	b.n	8003ab8 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f042 020a 	orr.w	r2, r2, #10
 8003aa6:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f022 0204 	bic.w	r2, r2, #4
 8003ab6:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f042 0201 	orr.w	r2, r2, #1
 8003ac6:	601a      	str	r2, [r3, #0]
 8003ac8:	e005      	b.n	8003ad6 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2200      	movs	r2, #0
 8003ace:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003ad2:	2302      	movs	r3, #2
 8003ad4:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003ad6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	3718      	adds	r7, #24
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}

08003ae0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b084      	sub	sp, #16
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003afc:	2204      	movs	r2, #4
 8003afe:	409a      	lsls	r2, r3
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	4013      	ands	r3, r2
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d024      	beq.n	8003b52 <HAL_DMA_IRQHandler+0x72>
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	f003 0304 	and.w	r3, r3, #4
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d01f      	beq.n	8003b52 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f003 0320 	and.w	r3, r3, #32
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d107      	bne.n	8003b30 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f022 0204 	bic.w	r2, r2, #4
 8003b2e:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b38:	2104      	movs	r1, #4
 8003b3a:	fa01 f202 	lsl.w	r2, r1, r2
 8003b3e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d06a      	beq.n	8003c1e <HAL_DMA_IRQHandler+0x13e>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b4c:	6878      	ldr	r0, [r7, #4]
 8003b4e:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003b50:	e065      	b.n	8003c1e <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b56:	2202      	movs	r2, #2
 8003b58:	409a      	lsls	r2, r3
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	4013      	ands	r3, r2
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d02c      	beq.n	8003bbc <HAL_DMA_IRQHandler+0xdc>
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	f003 0302 	and.w	r3, r3, #2
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d027      	beq.n	8003bbc <HAL_DMA_IRQHandler+0xdc>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 0320 	and.w	r3, r3, #32
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d10b      	bne.n	8003b92 <HAL_DMA_IRQHandler+0xb2>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f022 020a 	bic.w	r2, r2, #10
 8003b88:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b9a:	2102      	movs	r1, #2
 8003b9c:	fa01 f202 	lsl.w	r2, r1, r2
 8003ba0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d035      	beq.n	8003c1e <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003bba:	e030      	b.n	8003c1e <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bc0:	2208      	movs	r2, #8
 8003bc2:	409a      	lsls	r2, r3
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	4013      	ands	r3, r2
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d028      	beq.n	8003c1e <HAL_DMA_IRQHandler+0x13e>
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	f003 0308 	and.w	r3, r3, #8
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d023      	beq.n	8003c1e <HAL_DMA_IRQHandler+0x13e>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f022 020e 	bic.w	r2, r2, #14
 8003be4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bee:	2101      	movs	r1, #1
 8003bf0:	fa01 f202 	lsl.w	r2, r1, r2
 8003bf4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2200      	movs	r2, #0
 8003c08:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferErrorCallback != NULL)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d004      	beq.n	8003c1e <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c18:	6878      	ldr	r0, [r7, #4]
 8003c1a:	4798      	blx	r3
    }
  }
}
 8003c1c:	e7ff      	b.n	8003c1e <HAL_DMA_IRQHandler+0x13e>
 8003c1e:	bf00      	nop
 8003c20:	3710      	adds	r7, #16
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}

08003c26 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c26:	b480      	push	{r7}
 8003c28:	b085      	sub	sp, #20
 8003c2a:	af00      	add	r7, sp, #0
 8003c2c:	60f8      	str	r0, [r7, #12]
 8003c2e:	60b9      	str	r1, [r7, #8]
 8003c30:	607a      	str	r2, [r7, #4]
 8003c32:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c3c:	2101      	movs	r1, #1
 8003c3e:	fa01 f202 	lsl.w	r2, r1, r2
 8003c42:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	683a      	ldr	r2, [r7, #0]
 8003c4a:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	2b10      	cmp	r3, #16
 8003c52:	d108      	bne.n	8003c66 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	687a      	ldr	r2, [r7, #4]
 8003c5a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	68ba      	ldr	r2, [r7, #8]
 8003c62:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003c64:	e007      	b.n	8003c76 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	68ba      	ldr	r2, [r7, #8]
 8003c6c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	687a      	ldr	r2, [r7, #4]
 8003c74:	60da      	str	r2, [r3, #12]
}
 8003c76:	bf00      	nop
 8003c78:	3714      	adds	r7, #20
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c80:	4770      	bx	lr
	...

08003c84 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b083      	sub	sp, #12
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	461a      	mov	r2, r3
 8003c92:	4b09      	ldr	r3, [pc, #36]	@ (8003cb8 <DMA_CalcBaseAndBitshift+0x34>)
 8003c94:	4413      	add	r3, r2
 8003c96:	4a09      	ldr	r2, [pc, #36]	@ (8003cbc <DMA_CalcBaseAndBitshift+0x38>)
 8003c98:	fba2 2303 	umull	r2, r3, r2, r3
 8003c9c:	091b      	lsrs	r3, r3, #4
 8003c9e:	009a      	lsls	r2, r3, #2
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	4a06      	ldr	r2, [pc, #24]	@ (8003cc0 <DMA_CalcBaseAndBitshift+0x3c>)
 8003ca8:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 8003caa:	bf00      	nop
 8003cac:	370c      	adds	r7, #12
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb4:	4770      	bx	lr
 8003cb6:	bf00      	nop
 8003cb8:	bffdfff8 	.word	0xbffdfff8
 8003cbc:	cccccccd 	.word	0xcccccccd
 8003cc0:	40020000 	.word	0x40020000

08003cc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b087      	sub	sp, #28
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
 8003ccc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003cd2:	e14e      	b.n	8003f72 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	2101      	movs	r1, #1
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	fa01 f303 	lsl.w	r3, r1, r3
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	f000 8140 	beq.w	8003f6c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	f003 0303 	and.w	r3, r3, #3
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d005      	beq.n	8003d04 <HAL_GPIO_Init+0x40>
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	f003 0303 	and.w	r3, r3, #3
 8003d00:	2b02      	cmp	r3, #2
 8003d02:	d130      	bne.n	8003d66 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	005b      	lsls	r3, r3, #1
 8003d0e:	2203      	movs	r2, #3
 8003d10:	fa02 f303 	lsl.w	r3, r2, r3
 8003d14:	43db      	mvns	r3, r3
 8003d16:	693a      	ldr	r2, [r7, #16]
 8003d18:	4013      	ands	r3, r2
 8003d1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	68da      	ldr	r2, [r3, #12]
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	005b      	lsls	r3, r3, #1
 8003d24:	fa02 f303 	lsl.w	r3, r2, r3
 8003d28:	693a      	ldr	r2, [r7, #16]
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	693a      	ldr	r2, [r7, #16]
 8003d32:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d42:	43db      	mvns	r3, r3
 8003d44:	693a      	ldr	r2, [r7, #16]
 8003d46:	4013      	ands	r3, r2
 8003d48:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	091b      	lsrs	r3, r3, #4
 8003d50:	f003 0201 	and.w	r2, r3, #1
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	fa02 f303 	lsl.w	r3, r2, r3
 8003d5a:	693a      	ldr	r2, [r7, #16]
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	693a      	ldr	r2, [r7, #16]
 8003d64:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	f003 0303 	and.w	r3, r3, #3
 8003d6e:	2b03      	cmp	r3, #3
 8003d70:	d017      	beq.n	8003da2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	68db      	ldr	r3, [r3, #12]
 8003d76:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	005b      	lsls	r3, r3, #1
 8003d7c:	2203      	movs	r2, #3
 8003d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d82:	43db      	mvns	r3, r3
 8003d84:	693a      	ldr	r2, [r7, #16]
 8003d86:	4013      	ands	r3, r2
 8003d88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	689a      	ldr	r2, [r3, #8]
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	005b      	lsls	r3, r3, #1
 8003d92:	fa02 f303 	lsl.w	r3, r2, r3
 8003d96:	693a      	ldr	r2, [r7, #16]
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	693a      	ldr	r2, [r7, #16]
 8003da0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	f003 0303 	and.w	r3, r3, #3
 8003daa:	2b02      	cmp	r3, #2
 8003dac:	d123      	bne.n	8003df6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	08da      	lsrs	r2, r3, #3
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	3208      	adds	r2, #8
 8003db6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003dba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	f003 0307 	and.w	r3, r3, #7
 8003dc2:	009b      	lsls	r3, r3, #2
 8003dc4:	220f      	movs	r2, #15
 8003dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dca:	43db      	mvns	r3, r3
 8003dcc:	693a      	ldr	r2, [r7, #16]
 8003dce:	4013      	ands	r3, r2
 8003dd0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	691a      	ldr	r2, [r3, #16]
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	f003 0307 	and.w	r3, r3, #7
 8003ddc:	009b      	lsls	r3, r3, #2
 8003dde:	fa02 f303 	lsl.w	r3, r2, r3
 8003de2:	693a      	ldr	r2, [r7, #16]
 8003de4:	4313      	orrs	r3, r2
 8003de6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	08da      	lsrs	r2, r3, #3
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	3208      	adds	r2, #8
 8003df0:	6939      	ldr	r1, [r7, #16]
 8003df2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	005b      	lsls	r3, r3, #1
 8003e00:	2203      	movs	r2, #3
 8003e02:	fa02 f303 	lsl.w	r3, r2, r3
 8003e06:	43db      	mvns	r3, r3
 8003e08:	693a      	ldr	r2, [r7, #16]
 8003e0a:	4013      	ands	r3, r2
 8003e0c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	f003 0203 	and.w	r2, r3, #3
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	005b      	lsls	r3, r3, #1
 8003e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e1e:	693a      	ldr	r2, [r7, #16]
 8003e20:	4313      	orrs	r3, r2
 8003e22:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	693a      	ldr	r2, [r7, #16]
 8003e28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	f000 809a 	beq.w	8003f6c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e38:	4b55      	ldr	r3, [pc, #340]	@ (8003f90 <HAL_GPIO_Init+0x2cc>)
 8003e3a:	699b      	ldr	r3, [r3, #24]
 8003e3c:	4a54      	ldr	r2, [pc, #336]	@ (8003f90 <HAL_GPIO_Init+0x2cc>)
 8003e3e:	f043 0301 	orr.w	r3, r3, #1
 8003e42:	6193      	str	r3, [r2, #24]
 8003e44:	4b52      	ldr	r3, [pc, #328]	@ (8003f90 <HAL_GPIO_Init+0x2cc>)
 8003e46:	699b      	ldr	r3, [r3, #24]
 8003e48:	f003 0301 	and.w	r3, r3, #1
 8003e4c:	60bb      	str	r3, [r7, #8]
 8003e4e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003e50:	4a50      	ldr	r2, [pc, #320]	@ (8003f94 <HAL_GPIO_Init+0x2d0>)
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	089b      	lsrs	r3, r3, #2
 8003e56:	3302      	adds	r3, #2
 8003e58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e5c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	f003 0303 	and.w	r3, r3, #3
 8003e64:	009b      	lsls	r3, r3, #2
 8003e66:	220f      	movs	r2, #15
 8003e68:	fa02 f303 	lsl.w	r3, r2, r3
 8003e6c:	43db      	mvns	r3, r3
 8003e6e:	693a      	ldr	r2, [r7, #16]
 8003e70:	4013      	ands	r3, r2
 8003e72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003e7a:	d013      	beq.n	8003ea4 <HAL_GPIO_Init+0x1e0>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	4a46      	ldr	r2, [pc, #280]	@ (8003f98 <HAL_GPIO_Init+0x2d4>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d00d      	beq.n	8003ea0 <HAL_GPIO_Init+0x1dc>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	4a45      	ldr	r2, [pc, #276]	@ (8003f9c <HAL_GPIO_Init+0x2d8>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d007      	beq.n	8003e9c <HAL_GPIO_Init+0x1d8>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	4a44      	ldr	r2, [pc, #272]	@ (8003fa0 <HAL_GPIO_Init+0x2dc>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d101      	bne.n	8003e98 <HAL_GPIO_Init+0x1d4>
 8003e94:	2303      	movs	r3, #3
 8003e96:	e006      	b.n	8003ea6 <HAL_GPIO_Init+0x1e2>
 8003e98:	2305      	movs	r3, #5
 8003e9a:	e004      	b.n	8003ea6 <HAL_GPIO_Init+0x1e2>
 8003e9c:	2302      	movs	r3, #2
 8003e9e:	e002      	b.n	8003ea6 <HAL_GPIO_Init+0x1e2>
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	e000      	b.n	8003ea6 <HAL_GPIO_Init+0x1e2>
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	697a      	ldr	r2, [r7, #20]
 8003ea8:	f002 0203 	and.w	r2, r2, #3
 8003eac:	0092      	lsls	r2, r2, #2
 8003eae:	4093      	lsls	r3, r2
 8003eb0:	693a      	ldr	r2, [r7, #16]
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003eb6:	4937      	ldr	r1, [pc, #220]	@ (8003f94 <HAL_GPIO_Init+0x2d0>)
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	089b      	lsrs	r3, r3, #2
 8003ebc:	3302      	adds	r3, #2
 8003ebe:	693a      	ldr	r2, [r7, #16]
 8003ec0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003ec4:	4b37      	ldr	r3, [pc, #220]	@ (8003fa4 <HAL_GPIO_Init+0x2e0>)
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	43db      	mvns	r3, r3
 8003ece:	693a      	ldr	r2, [r7, #16]
 8003ed0:	4013      	ands	r3, r2
 8003ed2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d003      	beq.n	8003ee8 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8003ee0:	693a      	ldr	r2, [r7, #16]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003ee8:	4a2e      	ldr	r2, [pc, #184]	@ (8003fa4 <HAL_GPIO_Init+0x2e0>)
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003eee:	4b2d      	ldr	r3, [pc, #180]	@ (8003fa4 <HAL_GPIO_Init+0x2e0>)
 8003ef0:	68db      	ldr	r3, [r3, #12]
 8003ef2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	43db      	mvns	r3, r3
 8003ef8:	693a      	ldr	r2, [r7, #16]
 8003efa:	4013      	ands	r3, r2
 8003efc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d003      	beq.n	8003f12 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8003f0a:	693a      	ldr	r2, [r7, #16]
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003f12:	4a24      	ldr	r2, [pc, #144]	@ (8003fa4 <HAL_GPIO_Init+0x2e0>)
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003f18:	4b22      	ldr	r3, [pc, #136]	@ (8003fa4 <HAL_GPIO_Init+0x2e0>)
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	43db      	mvns	r3, r3
 8003f22:	693a      	ldr	r2, [r7, #16]
 8003f24:	4013      	ands	r3, r2
 8003f26:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d003      	beq.n	8003f3c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8003f34:	693a      	ldr	r2, [r7, #16]
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003f3c:	4a19      	ldr	r2, [pc, #100]	@ (8003fa4 <HAL_GPIO_Init+0x2e0>)
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003f42:	4b18      	ldr	r3, [pc, #96]	@ (8003fa4 <HAL_GPIO_Init+0x2e0>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	43db      	mvns	r3, r3
 8003f4c:	693a      	ldr	r2, [r7, #16]
 8003f4e:	4013      	ands	r3, r2
 8003f50:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d003      	beq.n	8003f66 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8003f5e:	693a      	ldr	r2, [r7, #16]
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	4313      	orrs	r3, r2
 8003f64:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003f66:	4a0f      	ldr	r2, [pc, #60]	@ (8003fa4 <HAL_GPIO_Init+0x2e0>)
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	3301      	adds	r3, #1
 8003f70:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	681a      	ldr	r2, [r3, #0]
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	fa22 f303 	lsr.w	r3, r2, r3
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	f47f aea9 	bne.w	8003cd4 <HAL_GPIO_Init+0x10>
  }
}
 8003f82:	bf00      	nop
 8003f84:	bf00      	nop
 8003f86:	371c      	adds	r7, #28
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8e:	4770      	bx	lr
 8003f90:	40021000 	.word	0x40021000
 8003f94:	40010000 	.word	0x40010000
 8003f98:	48000400 	.word	0x48000400
 8003f9c:	48000800 	.word	0x48000800
 8003fa0:	48000c00 	.word	0x48000c00
 8003fa4:	40010400 	.word	0x40010400

08003fa8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b085      	sub	sp, #20
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
 8003fb0:	460b      	mov	r3, r1
 8003fb2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	691a      	ldr	r2, [r3, #16]
 8003fb8:	887b      	ldrh	r3, [r7, #2]
 8003fba:	4013      	ands	r3, r2
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d002      	beq.n	8003fc6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	73fb      	strb	r3, [r7, #15]
 8003fc4:	e001      	b.n	8003fca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003fca:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	3714      	adds	r7, #20
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd6:	4770      	bx	lr

08003fd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b083      	sub	sp, #12
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
 8003fe0:	460b      	mov	r3, r1
 8003fe2:	807b      	strh	r3, [r7, #2]
 8003fe4:	4613      	mov	r3, r2
 8003fe6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003fe8:	787b      	ldrb	r3, [r7, #1]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d003      	beq.n	8003ff6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003fee:	887a      	ldrh	r2, [r7, #2]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003ff4:	e002      	b.n	8003ffc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003ff6:	887a      	ldrh	r2, [r7, #2]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003ffc:	bf00      	nop
 8003ffe:	370c      	adds	r7, #12
 8004000:	46bd      	mov	sp, r7
 8004002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004006:	4770      	bx	lr

08004008 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004008:	b480      	push	{r7}
 800400a:	b085      	sub	sp, #20
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
 8004010:	460b      	mov	r3, r1
 8004012:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	695b      	ldr	r3, [r3, #20]
 8004018:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800401a:	887a      	ldrh	r2, [r7, #2]
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	4013      	ands	r3, r2
 8004020:	041a      	lsls	r2, r3, #16
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	43d9      	mvns	r1, r3
 8004026:	887b      	ldrh	r3, [r7, #2]
 8004028:	400b      	ands	r3, r1
 800402a:	431a      	orrs	r2, r3
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	619a      	str	r2, [r3, #24]
}
 8004030:	bf00      	nop
 8004032:	3714      	adds	r7, #20
 8004034:	46bd      	mov	sp, r7
 8004036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403a:	4770      	bx	lr

0800403c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8004042:	af00      	add	r7, sp, #0
 8004044:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004048:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800404c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800404e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004052:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d102      	bne.n	8004062 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800405c:	2301      	movs	r3, #1
 800405e:	f001 b823 	b.w	80050a8 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004062:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004066:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f003 0301 	and.w	r3, r3, #1
 8004072:	2b00      	cmp	r3, #0
 8004074:	f000 817d 	beq.w	8004372 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004078:	4bbc      	ldr	r3, [pc, #752]	@ (800436c <HAL_RCC_OscConfig+0x330>)
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	f003 030c 	and.w	r3, r3, #12
 8004080:	2b04      	cmp	r3, #4
 8004082:	d00c      	beq.n	800409e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004084:	4bb9      	ldr	r3, [pc, #740]	@ (800436c <HAL_RCC_OscConfig+0x330>)
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	f003 030c 	and.w	r3, r3, #12
 800408c:	2b08      	cmp	r3, #8
 800408e:	d15c      	bne.n	800414a <HAL_RCC_OscConfig+0x10e>
 8004090:	4bb6      	ldr	r3, [pc, #728]	@ (800436c <HAL_RCC_OscConfig+0x330>)
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004098:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800409c:	d155      	bne.n	800414a <HAL_RCC_OscConfig+0x10e>
 800409e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80040a2:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040a6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 80040aa:	fa93 f3a3 	rbit	r3, r3
 80040ae:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80040b2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040b6:	fab3 f383 	clz	r3, r3
 80040ba:	b2db      	uxtb	r3, r3
 80040bc:	095b      	lsrs	r3, r3, #5
 80040be:	b2db      	uxtb	r3, r3
 80040c0:	f043 0301 	orr.w	r3, r3, #1
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d102      	bne.n	80040d0 <HAL_RCC_OscConfig+0x94>
 80040ca:	4ba8      	ldr	r3, [pc, #672]	@ (800436c <HAL_RCC_OscConfig+0x330>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	e015      	b.n	80040fc <HAL_RCC_OscConfig+0xc0>
 80040d0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80040d4:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040d8:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 80040dc:	fa93 f3a3 	rbit	r3, r3
 80040e0:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80040e4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80040e8:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80040ec:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 80040f0:	fa93 f3a3 	rbit	r3, r3
 80040f4:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 80040f8:	4b9c      	ldr	r3, [pc, #624]	@ (800436c <HAL_RCC_OscConfig+0x330>)
 80040fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040fc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004100:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8004104:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8004108:	fa92 f2a2 	rbit	r2, r2
 800410c:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8004110:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8004114:	fab2 f282 	clz	r2, r2
 8004118:	b2d2      	uxtb	r2, r2
 800411a:	f042 0220 	orr.w	r2, r2, #32
 800411e:	b2d2      	uxtb	r2, r2
 8004120:	f002 021f 	and.w	r2, r2, #31
 8004124:	2101      	movs	r1, #1
 8004126:	fa01 f202 	lsl.w	r2, r1, r2
 800412a:	4013      	ands	r3, r2
 800412c:	2b00      	cmp	r3, #0
 800412e:	f000 811f 	beq.w	8004370 <HAL_RCC_OscConfig+0x334>
 8004132:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004136:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	2b00      	cmp	r3, #0
 8004140:	f040 8116 	bne.w	8004370 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	f000 bfaf 	b.w	80050a8 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800414a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800414e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800415a:	d106      	bne.n	800416a <HAL_RCC_OscConfig+0x12e>
 800415c:	4b83      	ldr	r3, [pc, #524]	@ (800436c <HAL_RCC_OscConfig+0x330>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a82      	ldr	r2, [pc, #520]	@ (800436c <HAL_RCC_OscConfig+0x330>)
 8004162:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004166:	6013      	str	r3, [r2, #0]
 8004168:	e036      	b.n	80041d8 <HAL_RCC_OscConfig+0x19c>
 800416a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800416e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d10c      	bne.n	8004194 <HAL_RCC_OscConfig+0x158>
 800417a:	4b7c      	ldr	r3, [pc, #496]	@ (800436c <HAL_RCC_OscConfig+0x330>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a7b      	ldr	r2, [pc, #492]	@ (800436c <HAL_RCC_OscConfig+0x330>)
 8004180:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004184:	6013      	str	r3, [r2, #0]
 8004186:	4b79      	ldr	r3, [pc, #484]	@ (800436c <HAL_RCC_OscConfig+0x330>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a78      	ldr	r2, [pc, #480]	@ (800436c <HAL_RCC_OscConfig+0x330>)
 800418c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004190:	6013      	str	r3, [r2, #0]
 8004192:	e021      	b.n	80041d8 <HAL_RCC_OscConfig+0x19c>
 8004194:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004198:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80041a4:	d10c      	bne.n	80041c0 <HAL_RCC_OscConfig+0x184>
 80041a6:	4b71      	ldr	r3, [pc, #452]	@ (800436c <HAL_RCC_OscConfig+0x330>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a70      	ldr	r2, [pc, #448]	@ (800436c <HAL_RCC_OscConfig+0x330>)
 80041ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80041b0:	6013      	str	r3, [r2, #0]
 80041b2:	4b6e      	ldr	r3, [pc, #440]	@ (800436c <HAL_RCC_OscConfig+0x330>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a6d      	ldr	r2, [pc, #436]	@ (800436c <HAL_RCC_OscConfig+0x330>)
 80041b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041bc:	6013      	str	r3, [r2, #0]
 80041be:	e00b      	b.n	80041d8 <HAL_RCC_OscConfig+0x19c>
 80041c0:	4b6a      	ldr	r3, [pc, #424]	@ (800436c <HAL_RCC_OscConfig+0x330>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a69      	ldr	r2, [pc, #420]	@ (800436c <HAL_RCC_OscConfig+0x330>)
 80041c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80041ca:	6013      	str	r3, [r2, #0]
 80041cc:	4b67      	ldr	r3, [pc, #412]	@ (800436c <HAL_RCC_OscConfig+0x330>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a66      	ldr	r2, [pc, #408]	@ (800436c <HAL_RCC_OscConfig+0x330>)
 80041d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80041d6:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80041d8:	4b64      	ldr	r3, [pc, #400]	@ (800436c <HAL_RCC_OscConfig+0x330>)
 80041da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041dc:	f023 020f 	bic.w	r2, r3, #15
 80041e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041e4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	689b      	ldr	r3, [r3, #8]
 80041ec:	495f      	ldr	r1, [pc, #380]	@ (800436c <HAL_RCC_OscConfig+0x330>)
 80041ee:	4313      	orrs	r3, r2
 80041f0:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80041f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041f6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d059      	beq.n	80042b6 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004202:	f7fd fe67 	bl	8001ed4 <HAL_GetTick>
 8004206:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800420a:	e00a      	b.n	8004222 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800420c:	f7fd fe62 	bl	8001ed4 <HAL_GetTick>
 8004210:	4602      	mov	r2, r0
 8004212:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004216:	1ad3      	subs	r3, r2, r3
 8004218:	2b64      	cmp	r3, #100	@ 0x64
 800421a:	d902      	bls.n	8004222 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 800421c:	2303      	movs	r3, #3
 800421e:	f000 bf43 	b.w	80050a8 <HAL_RCC_OscConfig+0x106c>
 8004222:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004226:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800422a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 800422e:	fa93 f3a3 	rbit	r3, r3
 8004232:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8004236:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800423a:	fab3 f383 	clz	r3, r3
 800423e:	b2db      	uxtb	r3, r3
 8004240:	095b      	lsrs	r3, r3, #5
 8004242:	b2db      	uxtb	r3, r3
 8004244:	f043 0301 	orr.w	r3, r3, #1
 8004248:	b2db      	uxtb	r3, r3
 800424a:	2b01      	cmp	r3, #1
 800424c:	d102      	bne.n	8004254 <HAL_RCC_OscConfig+0x218>
 800424e:	4b47      	ldr	r3, [pc, #284]	@ (800436c <HAL_RCC_OscConfig+0x330>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	e015      	b.n	8004280 <HAL_RCC_OscConfig+0x244>
 8004254:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004258:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800425c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8004260:	fa93 f3a3 	rbit	r3, r3
 8004264:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8004268:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800426c:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8004270:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8004274:	fa93 f3a3 	rbit	r3, r3
 8004278:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 800427c:	4b3b      	ldr	r3, [pc, #236]	@ (800436c <HAL_RCC_OscConfig+0x330>)
 800427e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004280:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004284:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8004288:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 800428c:	fa92 f2a2 	rbit	r2, r2
 8004290:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8004294:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8004298:	fab2 f282 	clz	r2, r2
 800429c:	b2d2      	uxtb	r2, r2
 800429e:	f042 0220 	orr.w	r2, r2, #32
 80042a2:	b2d2      	uxtb	r2, r2
 80042a4:	f002 021f 	and.w	r2, r2, #31
 80042a8:	2101      	movs	r1, #1
 80042aa:	fa01 f202 	lsl.w	r2, r1, r2
 80042ae:	4013      	ands	r3, r2
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d0ab      	beq.n	800420c <HAL_RCC_OscConfig+0x1d0>
 80042b4:	e05d      	b.n	8004372 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042b6:	f7fd fe0d 	bl	8001ed4 <HAL_GetTick>
 80042ba:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042be:	e00a      	b.n	80042d6 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042c0:	f7fd fe08 	bl	8001ed4 <HAL_GetTick>
 80042c4:	4602      	mov	r2, r0
 80042c6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80042ca:	1ad3      	subs	r3, r2, r3
 80042cc:	2b64      	cmp	r3, #100	@ 0x64
 80042ce:	d902      	bls.n	80042d6 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80042d0:	2303      	movs	r3, #3
 80042d2:	f000 bee9 	b.w	80050a8 <HAL_RCC_OscConfig+0x106c>
 80042d6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80042da:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042de:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 80042e2:	fa93 f3a3 	rbit	r3, r3
 80042e6:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 80042ea:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042ee:	fab3 f383 	clz	r3, r3
 80042f2:	b2db      	uxtb	r3, r3
 80042f4:	095b      	lsrs	r3, r3, #5
 80042f6:	b2db      	uxtb	r3, r3
 80042f8:	f043 0301 	orr.w	r3, r3, #1
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	2b01      	cmp	r3, #1
 8004300:	d102      	bne.n	8004308 <HAL_RCC_OscConfig+0x2cc>
 8004302:	4b1a      	ldr	r3, [pc, #104]	@ (800436c <HAL_RCC_OscConfig+0x330>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	e015      	b.n	8004334 <HAL_RCC_OscConfig+0x2f8>
 8004308:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800430c:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004310:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8004314:	fa93 f3a3 	rbit	r3, r3
 8004318:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 800431c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004320:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8004324:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8004328:	fa93 f3a3 	rbit	r3, r3
 800432c:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8004330:	4b0e      	ldr	r3, [pc, #56]	@ (800436c <HAL_RCC_OscConfig+0x330>)
 8004332:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004334:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004338:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 800433c:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8004340:	fa92 f2a2 	rbit	r2, r2
 8004344:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8004348:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 800434c:	fab2 f282 	clz	r2, r2
 8004350:	b2d2      	uxtb	r2, r2
 8004352:	f042 0220 	orr.w	r2, r2, #32
 8004356:	b2d2      	uxtb	r2, r2
 8004358:	f002 021f 	and.w	r2, r2, #31
 800435c:	2101      	movs	r1, #1
 800435e:	fa01 f202 	lsl.w	r2, r1, r2
 8004362:	4013      	ands	r3, r2
 8004364:	2b00      	cmp	r3, #0
 8004366:	d1ab      	bne.n	80042c0 <HAL_RCC_OscConfig+0x284>
 8004368:	e003      	b.n	8004372 <HAL_RCC_OscConfig+0x336>
 800436a:	bf00      	nop
 800436c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004370:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004372:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004376:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 0302 	and.w	r3, r3, #2
 8004382:	2b00      	cmp	r3, #0
 8004384:	f000 817d 	beq.w	8004682 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004388:	4ba6      	ldr	r3, [pc, #664]	@ (8004624 <HAL_RCC_OscConfig+0x5e8>)
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	f003 030c 	and.w	r3, r3, #12
 8004390:	2b00      	cmp	r3, #0
 8004392:	d00b      	beq.n	80043ac <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004394:	4ba3      	ldr	r3, [pc, #652]	@ (8004624 <HAL_RCC_OscConfig+0x5e8>)
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	f003 030c 	and.w	r3, r3, #12
 800439c:	2b08      	cmp	r3, #8
 800439e:	d172      	bne.n	8004486 <HAL_RCC_OscConfig+0x44a>
 80043a0:	4ba0      	ldr	r3, [pc, #640]	@ (8004624 <HAL_RCC_OscConfig+0x5e8>)
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d16c      	bne.n	8004486 <HAL_RCC_OscConfig+0x44a>
 80043ac:	2302      	movs	r3, #2
 80043ae:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043b2:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80043b6:	fa93 f3a3 	rbit	r3, r3
 80043ba:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 80043be:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043c2:	fab3 f383 	clz	r3, r3
 80043c6:	b2db      	uxtb	r3, r3
 80043c8:	095b      	lsrs	r3, r3, #5
 80043ca:	b2db      	uxtb	r3, r3
 80043cc:	f043 0301 	orr.w	r3, r3, #1
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d102      	bne.n	80043dc <HAL_RCC_OscConfig+0x3a0>
 80043d6:	4b93      	ldr	r3, [pc, #588]	@ (8004624 <HAL_RCC_OscConfig+0x5e8>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	e013      	b.n	8004404 <HAL_RCC_OscConfig+0x3c8>
 80043dc:	2302      	movs	r3, #2
 80043de:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043e2:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 80043e6:	fa93 f3a3 	rbit	r3, r3
 80043ea:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80043ee:	2302      	movs	r3, #2
 80043f0:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80043f4:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80043f8:	fa93 f3a3 	rbit	r3, r3
 80043fc:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8004400:	4b88      	ldr	r3, [pc, #544]	@ (8004624 <HAL_RCC_OscConfig+0x5e8>)
 8004402:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004404:	2202      	movs	r2, #2
 8004406:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 800440a:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 800440e:	fa92 f2a2 	rbit	r2, r2
 8004412:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8004416:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 800441a:	fab2 f282 	clz	r2, r2
 800441e:	b2d2      	uxtb	r2, r2
 8004420:	f042 0220 	orr.w	r2, r2, #32
 8004424:	b2d2      	uxtb	r2, r2
 8004426:	f002 021f 	and.w	r2, r2, #31
 800442a:	2101      	movs	r1, #1
 800442c:	fa01 f202 	lsl.w	r2, r1, r2
 8004430:	4013      	ands	r3, r2
 8004432:	2b00      	cmp	r3, #0
 8004434:	d00a      	beq.n	800444c <HAL_RCC_OscConfig+0x410>
 8004436:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800443a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	691b      	ldr	r3, [r3, #16]
 8004442:	2b01      	cmp	r3, #1
 8004444:	d002      	beq.n	800444c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	f000 be2e 	b.w	80050a8 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800444c:	4b75      	ldr	r3, [pc, #468]	@ (8004624 <HAL_RCC_OscConfig+0x5e8>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004454:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004458:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	695b      	ldr	r3, [r3, #20]
 8004460:	21f8      	movs	r1, #248	@ 0xf8
 8004462:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004466:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 800446a:	fa91 f1a1 	rbit	r1, r1
 800446e:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8004472:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8004476:	fab1 f181 	clz	r1, r1
 800447a:	b2c9      	uxtb	r1, r1
 800447c:	408b      	lsls	r3, r1
 800447e:	4969      	ldr	r1, [pc, #420]	@ (8004624 <HAL_RCC_OscConfig+0x5e8>)
 8004480:	4313      	orrs	r3, r2
 8004482:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004484:	e0fd      	b.n	8004682 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004486:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800448a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	691b      	ldr	r3, [r3, #16]
 8004492:	2b00      	cmp	r3, #0
 8004494:	f000 8088 	beq.w	80045a8 <HAL_RCC_OscConfig+0x56c>
 8004498:	2301      	movs	r3, #1
 800449a:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800449e:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 80044a2:	fa93 f3a3 	rbit	r3, r3
 80044a6:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 80044aa:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044ae:	fab3 f383 	clz	r3, r3
 80044b2:	b2db      	uxtb	r3, r3
 80044b4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80044b8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80044bc:	009b      	lsls	r3, r3, #2
 80044be:	461a      	mov	r2, r3
 80044c0:	2301      	movs	r3, #1
 80044c2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044c4:	f7fd fd06 	bl	8001ed4 <HAL_GetTick>
 80044c8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044cc:	e00a      	b.n	80044e4 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044ce:	f7fd fd01 	bl	8001ed4 <HAL_GetTick>
 80044d2:	4602      	mov	r2, r0
 80044d4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80044d8:	1ad3      	subs	r3, r2, r3
 80044da:	2b02      	cmp	r3, #2
 80044dc:	d902      	bls.n	80044e4 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80044de:	2303      	movs	r3, #3
 80044e0:	f000 bde2 	b.w	80050a8 <HAL_RCC_OscConfig+0x106c>
 80044e4:	2302      	movs	r3, #2
 80044e6:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044ea:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80044ee:	fa93 f3a3 	rbit	r3, r3
 80044f2:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 80044f6:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044fa:	fab3 f383 	clz	r3, r3
 80044fe:	b2db      	uxtb	r3, r3
 8004500:	095b      	lsrs	r3, r3, #5
 8004502:	b2db      	uxtb	r3, r3
 8004504:	f043 0301 	orr.w	r3, r3, #1
 8004508:	b2db      	uxtb	r3, r3
 800450a:	2b01      	cmp	r3, #1
 800450c:	d102      	bne.n	8004514 <HAL_RCC_OscConfig+0x4d8>
 800450e:	4b45      	ldr	r3, [pc, #276]	@ (8004624 <HAL_RCC_OscConfig+0x5e8>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	e013      	b.n	800453c <HAL_RCC_OscConfig+0x500>
 8004514:	2302      	movs	r3, #2
 8004516:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800451a:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800451e:	fa93 f3a3 	rbit	r3, r3
 8004522:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8004526:	2302      	movs	r3, #2
 8004528:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 800452c:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8004530:	fa93 f3a3 	rbit	r3, r3
 8004534:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8004538:	4b3a      	ldr	r3, [pc, #232]	@ (8004624 <HAL_RCC_OscConfig+0x5e8>)
 800453a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800453c:	2202      	movs	r2, #2
 800453e:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8004542:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8004546:	fa92 f2a2 	rbit	r2, r2
 800454a:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 800454e:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8004552:	fab2 f282 	clz	r2, r2
 8004556:	b2d2      	uxtb	r2, r2
 8004558:	f042 0220 	orr.w	r2, r2, #32
 800455c:	b2d2      	uxtb	r2, r2
 800455e:	f002 021f 	and.w	r2, r2, #31
 8004562:	2101      	movs	r1, #1
 8004564:	fa01 f202 	lsl.w	r2, r1, r2
 8004568:	4013      	ands	r3, r2
 800456a:	2b00      	cmp	r3, #0
 800456c:	d0af      	beq.n	80044ce <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800456e:	4b2d      	ldr	r3, [pc, #180]	@ (8004624 <HAL_RCC_OscConfig+0x5e8>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004576:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800457a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	695b      	ldr	r3, [r3, #20]
 8004582:	21f8      	movs	r1, #248	@ 0xf8
 8004584:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004588:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800458c:	fa91 f1a1 	rbit	r1, r1
 8004590:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8004594:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8004598:	fab1 f181 	clz	r1, r1
 800459c:	b2c9      	uxtb	r1, r1
 800459e:	408b      	lsls	r3, r1
 80045a0:	4920      	ldr	r1, [pc, #128]	@ (8004624 <HAL_RCC_OscConfig+0x5e8>)
 80045a2:	4313      	orrs	r3, r2
 80045a4:	600b      	str	r3, [r1, #0]
 80045a6:	e06c      	b.n	8004682 <HAL_RCC_OscConfig+0x646>
 80045a8:	2301      	movs	r3, #1
 80045aa:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045ae:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80045b2:	fa93 f3a3 	rbit	r3, r3
 80045b6:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 80045ba:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045be:	fab3 f383 	clz	r3, r3
 80045c2:	b2db      	uxtb	r3, r3
 80045c4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80045c8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80045cc:	009b      	lsls	r3, r3, #2
 80045ce:	461a      	mov	r2, r3
 80045d0:	2300      	movs	r3, #0
 80045d2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045d4:	f7fd fc7e 	bl	8001ed4 <HAL_GetTick>
 80045d8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045dc:	e00a      	b.n	80045f4 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045de:	f7fd fc79 	bl	8001ed4 <HAL_GetTick>
 80045e2:	4602      	mov	r2, r0
 80045e4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80045e8:	1ad3      	subs	r3, r2, r3
 80045ea:	2b02      	cmp	r3, #2
 80045ec:	d902      	bls.n	80045f4 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80045ee:	2303      	movs	r3, #3
 80045f0:	f000 bd5a 	b.w	80050a8 <HAL_RCC_OscConfig+0x106c>
 80045f4:	2302      	movs	r3, #2
 80045f6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045fa:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80045fe:	fa93 f3a3 	rbit	r3, r3
 8004602:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8004606:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800460a:	fab3 f383 	clz	r3, r3
 800460e:	b2db      	uxtb	r3, r3
 8004610:	095b      	lsrs	r3, r3, #5
 8004612:	b2db      	uxtb	r3, r3
 8004614:	f043 0301 	orr.w	r3, r3, #1
 8004618:	b2db      	uxtb	r3, r3
 800461a:	2b01      	cmp	r3, #1
 800461c:	d104      	bne.n	8004628 <HAL_RCC_OscConfig+0x5ec>
 800461e:	4b01      	ldr	r3, [pc, #4]	@ (8004624 <HAL_RCC_OscConfig+0x5e8>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	e015      	b.n	8004650 <HAL_RCC_OscConfig+0x614>
 8004624:	40021000 	.word	0x40021000
 8004628:	2302      	movs	r3, #2
 800462a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800462e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8004632:	fa93 f3a3 	rbit	r3, r3
 8004636:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800463a:	2302      	movs	r3, #2
 800463c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8004640:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004644:	fa93 f3a3 	rbit	r3, r3
 8004648:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800464c:	4bc8      	ldr	r3, [pc, #800]	@ (8004970 <HAL_RCC_OscConfig+0x934>)
 800464e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004650:	2202      	movs	r2, #2
 8004652:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8004656:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800465a:	fa92 f2a2 	rbit	r2, r2
 800465e:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8004662:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8004666:	fab2 f282 	clz	r2, r2
 800466a:	b2d2      	uxtb	r2, r2
 800466c:	f042 0220 	orr.w	r2, r2, #32
 8004670:	b2d2      	uxtb	r2, r2
 8004672:	f002 021f 	and.w	r2, r2, #31
 8004676:	2101      	movs	r1, #1
 8004678:	fa01 f202 	lsl.w	r2, r1, r2
 800467c:	4013      	ands	r3, r2
 800467e:	2b00      	cmp	r3, #0
 8004680:	d1ad      	bne.n	80045de <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004682:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004686:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f003 0308 	and.w	r3, r3, #8
 8004692:	2b00      	cmp	r3, #0
 8004694:	f000 8110 	beq.w	80048b8 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004698:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800469c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	699b      	ldr	r3, [r3, #24]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d079      	beq.n	800479c <HAL_RCC_OscConfig+0x760>
 80046a8:	2301      	movs	r3, #1
 80046aa:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046ae:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80046b2:	fa93 f3a3 	rbit	r3, r3
 80046b6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 80046ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046be:	fab3 f383 	clz	r3, r3
 80046c2:	b2db      	uxtb	r3, r3
 80046c4:	461a      	mov	r2, r3
 80046c6:	4bab      	ldr	r3, [pc, #684]	@ (8004974 <HAL_RCC_OscConfig+0x938>)
 80046c8:	4413      	add	r3, r2
 80046ca:	009b      	lsls	r3, r3, #2
 80046cc:	461a      	mov	r2, r3
 80046ce:	2301      	movs	r3, #1
 80046d0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046d2:	f7fd fbff 	bl	8001ed4 <HAL_GetTick>
 80046d6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046da:	e00a      	b.n	80046f2 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80046dc:	f7fd fbfa 	bl	8001ed4 <HAL_GetTick>
 80046e0:	4602      	mov	r2, r0
 80046e2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80046e6:	1ad3      	subs	r3, r2, r3
 80046e8:	2b02      	cmp	r3, #2
 80046ea:	d902      	bls.n	80046f2 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80046ec:	2303      	movs	r3, #3
 80046ee:	f000 bcdb 	b.w	80050a8 <HAL_RCC_OscConfig+0x106c>
 80046f2:	2302      	movs	r3, #2
 80046f4:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046f8:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80046fc:	fa93 f3a3 	rbit	r3, r3
 8004700:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004704:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004708:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800470c:	2202      	movs	r2, #2
 800470e:	601a      	str	r2, [r3, #0]
 8004710:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004714:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	fa93 f2a3 	rbit	r2, r3
 800471e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004722:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004726:	601a      	str	r2, [r3, #0]
 8004728:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800472c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004730:	2202      	movs	r2, #2
 8004732:	601a      	str	r2, [r3, #0]
 8004734:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004738:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	fa93 f2a3 	rbit	r2, r3
 8004742:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004746:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800474a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800474c:	4b88      	ldr	r3, [pc, #544]	@ (8004970 <HAL_RCC_OscConfig+0x934>)
 800474e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004750:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004754:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8004758:	2102      	movs	r1, #2
 800475a:	6019      	str	r1, [r3, #0]
 800475c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004760:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	fa93 f1a3 	rbit	r1, r3
 800476a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800476e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8004772:	6019      	str	r1, [r3, #0]
  return result;
 8004774:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004778:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	fab3 f383 	clz	r3, r3
 8004782:	b2db      	uxtb	r3, r3
 8004784:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8004788:	b2db      	uxtb	r3, r3
 800478a:	f003 031f 	and.w	r3, r3, #31
 800478e:	2101      	movs	r1, #1
 8004790:	fa01 f303 	lsl.w	r3, r1, r3
 8004794:	4013      	ands	r3, r2
 8004796:	2b00      	cmp	r3, #0
 8004798:	d0a0      	beq.n	80046dc <HAL_RCC_OscConfig+0x6a0>
 800479a:	e08d      	b.n	80048b8 <HAL_RCC_OscConfig+0x87c>
 800479c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047a0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80047a4:	2201      	movs	r2, #1
 80047a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047ac:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	fa93 f2a3 	rbit	r2, r3
 80047b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047ba:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80047be:	601a      	str	r2, [r3, #0]
  return result;
 80047c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047c4:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80047c8:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80047ca:	fab3 f383 	clz	r3, r3
 80047ce:	b2db      	uxtb	r3, r3
 80047d0:	461a      	mov	r2, r3
 80047d2:	4b68      	ldr	r3, [pc, #416]	@ (8004974 <HAL_RCC_OscConfig+0x938>)
 80047d4:	4413      	add	r3, r2
 80047d6:	009b      	lsls	r3, r3, #2
 80047d8:	461a      	mov	r2, r3
 80047da:	2300      	movs	r3, #0
 80047dc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047de:	f7fd fb79 	bl	8001ed4 <HAL_GetTick>
 80047e2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047e6:	e00a      	b.n	80047fe <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80047e8:	f7fd fb74 	bl	8001ed4 <HAL_GetTick>
 80047ec:	4602      	mov	r2, r0
 80047ee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80047f2:	1ad3      	subs	r3, r2, r3
 80047f4:	2b02      	cmp	r3, #2
 80047f6:	d902      	bls.n	80047fe <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80047f8:	2303      	movs	r3, #3
 80047fa:	f000 bc55 	b.w	80050a8 <HAL_RCC_OscConfig+0x106c>
 80047fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004802:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8004806:	2202      	movs	r2, #2
 8004808:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800480a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800480e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	fa93 f2a3 	rbit	r2, r3
 8004818:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800481c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8004820:	601a      	str	r2, [r3, #0]
 8004822:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004826:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800482a:	2202      	movs	r2, #2
 800482c:	601a      	str	r2, [r3, #0]
 800482e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004832:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	fa93 f2a3 	rbit	r2, r3
 800483c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004840:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8004844:	601a      	str	r2, [r3, #0]
 8004846:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800484a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800484e:	2202      	movs	r2, #2
 8004850:	601a      	str	r2, [r3, #0]
 8004852:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004856:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	fa93 f2a3 	rbit	r2, r3
 8004860:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004864:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8004868:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800486a:	4b41      	ldr	r3, [pc, #260]	@ (8004970 <HAL_RCC_OscConfig+0x934>)
 800486c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800486e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004872:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8004876:	2102      	movs	r1, #2
 8004878:	6019      	str	r1, [r3, #0]
 800487a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800487e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	fa93 f1a3 	rbit	r1, r3
 8004888:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800488c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8004890:	6019      	str	r1, [r3, #0]
  return result;
 8004892:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004896:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	fab3 f383 	clz	r3, r3
 80048a0:	b2db      	uxtb	r3, r3
 80048a2:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80048a6:	b2db      	uxtb	r3, r3
 80048a8:	f003 031f 	and.w	r3, r3, #31
 80048ac:	2101      	movs	r1, #1
 80048ae:	fa01 f303 	lsl.w	r3, r1, r3
 80048b2:	4013      	ands	r3, r2
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d197      	bne.n	80047e8 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048bc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f003 0304 	and.w	r3, r3, #4
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	f000 81a1 	beq.w	8004c10 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048ce:	2300      	movs	r3, #0
 80048d0:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048d4:	4b26      	ldr	r3, [pc, #152]	@ (8004970 <HAL_RCC_OscConfig+0x934>)
 80048d6:	69db      	ldr	r3, [r3, #28]
 80048d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d116      	bne.n	800490e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048e0:	4b23      	ldr	r3, [pc, #140]	@ (8004970 <HAL_RCC_OscConfig+0x934>)
 80048e2:	69db      	ldr	r3, [r3, #28]
 80048e4:	4a22      	ldr	r2, [pc, #136]	@ (8004970 <HAL_RCC_OscConfig+0x934>)
 80048e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80048ea:	61d3      	str	r3, [r2, #28]
 80048ec:	4b20      	ldr	r3, [pc, #128]	@ (8004970 <HAL_RCC_OscConfig+0x934>)
 80048ee:	69db      	ldr	r3, [r3, #28]
 80048f0:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80048f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048f8:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80048fc:	601a      	str	r2, [r3, #0]
 80048fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004902:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8004906:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004908:	2301      	movs	r3, #1
 800490a:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800490e:	4b1a      	ldr	r3, [pc, #104]	@ (8004978 <HAL_RCC_OscConfig+0x93c>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004916:	2b00      	cmp	r3, #0
 8004918:	d11a      	bne.n	8004950 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800491a:	4b17      	ldr	r3, [pc, #92]	@ (8004978 <HAL_RCC_OscConfig+0x93c>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a16      	ldr	r2, [pc, #88]	@ (8004978 <HAL_RCC_OscConfig+0x93c>)
 8004920:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004924:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004926:	f7fd fad5 	bl	8001ed4 <HAL_GetTick>
 800492a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800492e:	e009      	b.n	8004944 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004930:	f7fd fad0 	bl	8001ed4 <HAL_GetTick>
 8004934:	4602      	mov	r2, r0
 8004936:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800493a:	1ad3      	subs	r3, r2, r3
 800493c:	2b64      	cmp	r3, #100	@ 0x64
 800493e:	d901      	bls.n	8004944 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8004940:	2303      	movs	r3, #3
 8004942:	e3b1      	b.n	80050a8 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004944:	4b0c      	ldr	r3, [pc, #48]	@ (8004978 <HAL_RCC_OscConfig+0x93c>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800494c:	2b00      	cmp	r3, #0
 800494e:	d0ef      	beq.n	8004930 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004950:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004954:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	68db      	ldr	r3, [r3, #12]
 800495c:	2b01      	cmp	r3, #1
 800495e:	d10d      	bne.n	800497c <HAL_RCC_OscConfig+0x940>
 8004960:	4b03      	ldr	r3, [pc, #12]	@ (8004970 <HAL_RCC_OscConfig+0x934>)
 8004962:	6a1b      	ldr	r3, [r3, #32]
 8004964:	4a02      	ldr	r2, [pc, #8]	@ (8004970 <HAL_RCC_OscConfig+0x934>)
 8004966:	f043 0301 	orr.w	r3, r3, #1
 800496a:	6213      	str	r3, [r2, #32]
 800496c:	e03c      	b.n	80049e8 <HAL_RCC_OscConfig+0x9ac>
 800496e:	bf00      	nop
 8004970:	40021000 	.word	0x40021000
 8004974:	10908120 	.word	0x10908120
 8004978:	40007000 	.word	0x40007000
 800497c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004980:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	68db      	ldr	r3, [r3, #12]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d10c      	bne.n	80049a6 <HAL_RCC_OscConfig+0x96a>
 800498c:	4bc1      	ldr	r3, [pc, #772]	@ (8004c94 <HAL_RCC_OscConfig+0xc58>)
 800498e:	6a1b      	ldr	r3, [r3, #32]
 8004990:	4ac0      	ldr	r2, [pc, #768]	@ (8004c94 <HAL_RCC_OscConfig+0xc58>)
 8004992:	f023 0301 	bic.w	r3, r3, #1
 8004996:	6213      	str	r3, [r2, #32]
 8004998:	4bbe      	ldr	r3, [pc, #760]	@ (8004c94 <HAL_RCC_OscConfig+0xc58>)
 800499a:	6a1b      	ldr	r3, [r3, #32]
 800499c:	4abd      	ldr	r2, [pc, #756]	@ (8004c94 <HAL_RCC_OscConfig+0xc58>)
 800499e:	f023 0304 	bic.w	r3, r3, #4
 80049a2:	6213      	str	r3, [r2, #32]
 80049a4:	e020      	b.n	80049e8 <HAL_RCC_OscConfig+0x9ac>
 80049a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049aa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	68db      	ldr	r3, [r3, #12]
 80049b2:	2b05      	cmp	r3, #5
 80049b4:	d10c      	bne.n	80049d0 <HAL_RCC_OscConfig+0x994>
 80049b6:	4bb7      	ldr	r3, [pc, #732]	@ (8004c94 <HAL_RCC_OscConfig+0xc58>)
 80049b8:	6a1b      	ldr	r3, [r3, #32]
 80049ba:	4ab6      	ldr	r2, [pc, #728]	@ (8004c94 <HAL_RCC_OscConfig+0xc58>)
 80049bc:	f043 0304 	orr.w	r3, r3, #4
 80049c0:	6213      	str	r3, [r2, #32]
 80049c2:	4bb4      	ldr	r3, [pc, #720]	@ (8004c94 <HAL_RCC_OscConfig+0xc58>)
 80049c4:	6a1b      	ldr	r3, [r3, #32]
 80049c6:	4ab3      	ldr	r2, [pc, #716]	@ (8004c94 <HAL_RCC_OscConfig+0xc58>)
 80049c8:	f043 0301 	orr.w	r3, r3, #1
 80049cc:	6213      	str	r3, [r2, #32]
 80049ce:	e00b      	b.n	80049e8 <HAL_RCC_OscConfig+0x9ac>
 80049d0:	4bb0      	ldr	r3, [pc, #704]	@ (8004c94 <HAL_RCC_OscConfig+0xc58>)
 80049d2:	6a1b      	ldr	r3, [r3, #32]
 80049d4:	4aaf      	ldr	r2, [pc, #700]	@ (8004c94 <HAL_RCC_OscConfig+0xc58>)
 80049d6:	f023 0301 	bic.w	r3, r3, #1
 80049da:	6213      	str	r3, [r2, #32]
 80049dc:	4bad      	ldr	r3, [pc, #692]	@ (8004c94 <HAL_RCC_OscConfig+0xc58>)
 80049de:	6a1b      	ldr	r3, [r3, #32]
 80049e0:	4aac      	ldr	r2, [pc, #688]	@ (8004c94 <HAL_RCC_OscConfig+0xc58>)
 80049e2:	f023 0304 	bic.w	r3, r3, #4
 80049e6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80049e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049ec:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	68db      	ldr	r3, [r3, #12]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	f000 8081 	beq.w	8004afc <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049fa:	f7fd fa6b 	bl	8001ed4 <HAL_GetTick>
 80049fe:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a02:	e00b      	b.n	8004a1c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a04:	f7fd fa66 	bl	8001ed4 <HAL_GetTick>
 8004a08:	4602      	mov	r2, r0
 8004a0a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004a0e:	1ad3      	subs	r3, r2, r3
 8004a10:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d901      	bls.n	8004a1c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8004a18:	2303      	movs	r3, #3
 8004a1a:	e345      	b.n	80050a8 <HAL_RCC_OscConfig+0x106c>
 8004a1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a20:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004a24:	2202      	movs	r2, #2
 8004a26:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a2c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	fa93 f2a3 	rbit	r2, r3
 8004a36:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a3a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8004a3e:	601a      	str	r2, [r3, #0]
 8004a40:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a44:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004a48:	2202      	movs	r2, #2
 8004a4a:	601a      	str	r2, [r3, #0]
 8004a4c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a50:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	fa93 f2a3 	rbit	r2, r3
 8004a5a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a5e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8004a62:	601a      	str	r2, [r3, #0]
  return result;
 8004a64:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a68:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8004a6c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a6e:	fab3 f383 	clz	r3, r3
 8004a72:	b2db      	uxtb	r3, r3
 8004a74:	095b      	lsrs	r3, r3, #5
 8004a76:	b2db      	uxtb	r3, r3
 8004a78:	f043 0302 	orr.w	r3, r3, #2
 8004a7c:	b2db      	uxtb	r3, r3
 8004a7e:	2b02      	cmp	r3, #2
 8004a80:	d102      	bne.n	8004a88 <HAL_RCC_OscConfig+0xa4c>
 8004a82:	4b84      	ldr	r3, [pc, #528]	@ (8004c94 <HAL_RCC_OscConfig+0xc58>)
 8004a84:	6a1b      	ldr	r3, [r3, #32]
 8004a86:	e013      	b.n	8004ab0 <HAL_RCC_OscConfig+0xa74>
 8004a88:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a8c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8004a90:	2202      	movs	r2, #2
 8004a92:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a98:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	fa93 f2a3 	rbit	r2, r3
 8004aa2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004aa6:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8004aaa:	601a      	str	r2, [r3, #0]
 8004aac:	4b79      	ldr	r3, [pc, #484]	@ (8004c94 <HAL_RCC_OscConfig+0xc58>)
 8004aae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ab0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004ab4:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8004ab8:	2102      	movs	r1, #2
 8004aba:	6011      	str	r1, [r2, #0]
 8004abc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004ac0:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8004ac4:	6812      	ldr	r2, [r2, #0]
 8004ac6:	fa92 f1a2 	rbit	r1, r2
 8004aca:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004ace:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8004ad2:	6011      	str	r1, [r2, #0]
  return result;
 8004ad4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004ad8:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8004adc:	6812      	ldr	r2, [r2, #0]
 8004ade:	fab2 f282 	clz	r2, r2
 8004ae2:	b2d2      	uxtb	r2, r2
 8004ae4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004ae8:	b2d2      	uxtb	r2, r2
 8004aea:	f002 021f 	and.w	r2, r2, #31
 8004aee:	2101      	movs	r1, #1
 8004af0:	fa01 f202 	lsl.w	r2, r1, r2
 8004af4:	4013      	ands	r3, r2
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d084      	beq.n	8004a04 <HAL_RCC_OscConfig+0x9c8>
 8004afa:	e07f      	b.n	8004bfc <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004afc:	f7fd f9ea 	bl	8001ed4 <HAL_GetTick>
 8004b00:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b04:	e00b      	b.n	8004b1e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b06:	f7fd f9e5 	bl	8001ed4 <HAL_GetTick>
 8004b0a:	4602      	mov	r2, r0
 8004b0c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004b10:	1ad3      	subs	r3, r2, r3
 8004b12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d901      	bls.n	8004b1e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8004b1a:	2303      	movs	r3, #3
 8004b1c:	e2c4      	b.n	80050a8 <HAL_RCC_OscConfig+0x106c>
 8004b1e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b22:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8004b26:	2202      	movs	r2, #2
 8004b28:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b2e:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	fa93 f2a3 	rbit	r2, r3
 8004b38:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b3c:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8004b40:	601a      	str	r2, [r3, #0]
 8004b42:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b46:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8004b4a:	2202      	movs	r2, #2
 8004b4c:	601a      	str	r2, [r3, #0]
 8004b4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b52:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	fa93 f2a3 	rbit	r2, r3
 8004b5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b60:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8004b64:	601a      	str	r2, [r3, #0]
  return result;
 8004b66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b6a:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8004b6e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b70:	fab3 f383 	clz	r3, r3
 8004b74:	b2db      	uxtb	r3, r3
 8004b76:	095b      	lsrs	r3, r3, #5
 8004b78:	b2db      	uxtb	r3, r3
 8004b7a:	f043 0302 	orr.w	r3, r3, #2
 8004b7e:	b2db      	uxtb	r3, r3
 8004b80:	2b02      	cmp	r3, #2
 8004b82:	d102      	bne.n	8004b8a <HAL_RCC_OscConfig+0xb4e>
 8004b84:	4b43      	ldr	r3, [pc, #268]	@ (8004c94 <HAL_RCC_OscConfig+0xc58>)
 8004b86:	6a1b      	ldr	r3, [r3, #32]
 8004b88:	e013      	b.n	8004bb2 <HAL_RCC_OscConfig+0xb76>
 8004b8a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b8e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8004b92:	2202      	movs	r2, #2
 8004b94:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b96:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b9a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	fa93 f2a3 	rbit	r2, r3
 8004ba4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ba8:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8004bac:	601a      	str	r2, [r3, #0]
 8004bae:	4b39      	ldr	r3, [pc, #228]	@ (8004c94 <HAL_RCC_OscConfig+0xc58>)
 8004bb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bb2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004bb6:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8004bba:	2102      	movs	r1, #2
 8004bbc:	6011      	str	r1, [r2, #0]
 8004bbe:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004bc2:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8004bc6:	6812      	ldr	r2, [r2, #0]
 8004bc8:	fa92 f1a2 	rbit	r1, r2
 8004bcc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004bd0:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8004bd4:	6011      	str	r1, [r2, #0]
  return result;
 8004bd6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004bda:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8004bde:	6812      	ldr	r2, [r2, #0]
 8004be0:	fab2 f282 	clz	r2, r2
 8004be4:	b2d2      	uxtb	r2, r2
 8004be6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004bea:	b2d2      	uxtb	r2, r2
 8004bec:	f002 021f 	and.w	r2, r2, #31
 8004bf0:	2101      	movs	r1, #1
 8004bf2:	fa01 f202 	lsl.w	r2, r1, r2
 8004bf6:	4013      	ands	r3, r2
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d184      	bne.n	8004b06 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004bfc:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8004c00:	2b01      	cmp	r3, #1
 8004c02:	d105      	bne.n	8004c10 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c04:	4b23      	ldr	r3, [pc, #140]	@ (8004c94 <HAL_RCC_OscConfig+0xc58>)
 8004c06:	69db      	ldr	r3, [r3, #28]
 8004c08:	4a22      	ldr	r2, [pc, #136]	@ (8004c94 <HAL_RCC_OscConfig+0xc58>)
 8004c0a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c0e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c14:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	69db      	ldr	r3, [r3, #28]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	f000 8242 	beq.w	80050a6 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004c22:	4b1c      	ldr	r3, [pc, #112]	@ (8004c94 <HAL_RCC_OscConfig+0xc58>)
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	f003 030c 	and.w	r3, r3, #12
 8004c2a:	2b08      	cmp	r3, #8
 8004c2c:	f000 8213 	beq.w	8005056 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c30:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c34:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	69db      	ldr	r3, [r3, #28]
 8004c3c:	2b02      	cmp	r3, #2
 8004c3e:	f040 8162 	bne.w	8004f06 <HAL_RCC_OscConfig+0xeca>
 8004c42:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c46:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8004c4a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004c4e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c50:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c54:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	fa93 f2a3 	rbit	r2, r3
 8004c5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c62:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8004c66:	601a      	str	r2, [r3, #0]
  return result;
 8004c68:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c6c:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8004c70:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c72:	fab3 f383 	clz	r3, r3
 8004c76:	b2db      	uxtb	r3, r3
 8004c78:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004c7c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004c80:	009b      	lsls	r3, r3, #2
 8004c82:	461a      	mov	r2, r3
 8004c84:	2300      	movs	r3, #0
 8004c86:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c88:	f7fd f924 	bl	8001ed4 <HAL_GetTick>
 8004c8c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c90:	e00c      	b.n	8004cac <HAL_RCC_OscConfig+0xc70>
 8004c92:	bf00      	nop
 8004c94:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c98:	f7fd f91c 	bl	8001ed4 <HAL_GetTick>
 8004c9c:	4602      	mov	r2, r0
 8004c9e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004ca2:	1ad3      	subs	r3, r2, r3
 8004ca4:	2b02      	cmp	r3, #2
 8004ca6:	d901      	bls.n	8004cac <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8004ca8:	2303      	movs	r3, #3
 8004caa:	e1fd      	b.n	80050a8 <HAL_RCC_OscConfig+0x106c>
 8004cac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004cb0:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8004cb4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004cb8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004cbe:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	fa93 f2a3 	rbit	r2, r3
 8004cc8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ccc:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8004cd0:	601a      	str	r2, [r3, #0]
  return result;
 8004cd2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004cd6:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8004cda:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004cdc:	fab3 f383 	clz	r3, r3
 8004ce0:	b2db      	uxtb	r3, r3
 8004ce2:	095b      	lsrs	r3, r3, #5
 8004ce4:	b2db      	uxtb	r3, r3
 8004ce6:	f043 0301 	orr.w	r3, r3, #1
 8004cea:	b2db      	uxtb	r3, r3
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	d102      	bne.n	8004cf6 <HAL_RCC_OscConfig+0xcba>
 8004cf0:	4bb0      	ldr	r3, [pc, #704]	@ (8004fb4 <HAL_RCC_OscConfig+0xf78>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	e027      	b.n	8004d46 <HAL_RCC_OscConfig+0xd0a>
 8004cf6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004cfa:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8004cfe:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004d02:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d04:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d08:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	fa93 f2a3 	rbit	r2, r3
 8004d12:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d16:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8004d1a:	601a      	str	r2, [r3, #0]
 8004d1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d20:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8004d24:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004d28:	601a      	str	r2, [r3, #0]
 8004d2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d2e:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	fa93 f2a3 	rbit	r2, r3
 8004d38:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d3c:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8004d40:	601a      	str	r2, [r3, #0]
 8004d42:	4b9c      	ldr	r3, [pc, #624]	@ (8004fb4 <HAL_RCC_OscConfig+0xf78>)
 8004d44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d46:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004d4a:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8004d4e:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004d52:	6011      	str	r1, [r2, #0]
 8004d54:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004d58:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8004d5c:	6812      	ldr	r2, [r2, #0]
 8004d5e:	fa92 f1a2 	rbit	r1, r2
 8004d62:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004d66:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8004d6a:	6011      	str	r1, [r2, #0]
  return result;
 8004d6c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004d70:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8004d74:	6812      	ldr	r2, [r2, #0]
 8004d76:	fab2 f282 	clz	r2, r2
 8004d7a:	b2d2      	uxtb	r2, r2
 8004d7c:	f042 0220 	orr.w	r2, r2, #32
 8004d80:	b2d2      	uxtb	r2, r2
 8004d82:	f002 021f 	and.w	r2, r2, #31
 8004d86:	2101      	movs	r1, #1
 8004d88:	fa01 f202 	lsl.w	r2, r1, r2
 8004d8c:	4013      	ands	r3, r2
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d182      	bne.n	8004c98 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004d92:	4b88      	ldr	r3, [pc, #544]	@ (8004fb4 <HAL_RCC_OscConfig+0xf78>)
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004d9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d9e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8004da6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004daa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	6a1b      	ldr	r3, [r3, #32]
 8004db2:	430b      	orrs	r3, r1
 8004db4:	497f      	ldr	r1, [pc, #508]	@ (8004fb4 <HAL_RCC_OscConfig+0xf78>)
 8004db6:	4313      	orrs	r3, r2
 8004db8:	604b      	str	r3, [r1, #4]
 8004dba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004dbe:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8004dc2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004dc6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dc8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004dcc:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	fa93 f2a3 	rbit	r2, r3
 8004dd6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004dda:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8004dde:	601a      	str	r2, [r3, #0]
  return result;
 8004de0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004de4:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8004de8:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004dea:	fab3 f383 	clz	r3, r3
 8004dee:	b2db      	uxtb	r3, r3
 8004df0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004df4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004df8:	009b      	lsls	r3, r3, #2
 8004dfa:	461a      	mov	r2, r3
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e00:	f7fd f868 	bl	8001ed4 <HAL_GetTick>
 8004e04:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004e08:	e009      	b.n	8004e1e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e0a:	f7fd f863 	bl	8001ed4 <HAL_GetTick>
 8004e0e:	4602      	mov	r2, r0
 8004e10:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004e14:	1ad3      	subs	r3, r2, r3
 8004e16:	2b02      	cmp	r3, #2
 8004e18:	d901      	bls.n	8004e1e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8004e1a:	2303      	movs	r3, #3
 8004e1c:	e144      	b.n	80050a8 <HAL_RCC_OscConfig+0x106c>
 8004e1e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e22:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8004e26:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004e2a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e2c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e30:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	fa93 f2a3 	rbit	r2, r3
 8004e3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e3e:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8004e42:	601a      	str	r2, [r3, #0]
  return result;
 8004e44:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e48:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8004e4c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004e4e:	fab3 f383 	clz	r3, r3
 8004e52:	b2db      	uxtb	r3, r3
 8004e54:	095b      	lsrs	r3, r3, #5
 8004e56:	b2db      	uxtb	r3, r3
 8004e58:	f043 0301 	orr.w	r3, r3, #1
 8004e5c:	b2db      	uxtb	r3, r3
 8004e5e:	2b01      	cmp	r3, #1
 8004e60:	d102      	bne.n	8004e68 <HAL_RCC_OscConfig+0xe2c>
 8004e62:	4b54      	ldr	r3, [pc, #336]	@ (8004fb4 <HAL_RCC_OscConfig+0xf78>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	e027      	b.n	8004eb8 <HAL_RCC_OscConfig+0xe7c>
 8004e68:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e6c:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8004e70:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004e74:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e7a:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	fa93 f2a3 	rbit	r2, r3
 8004e84:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e88:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8004e8c:	601a      	str	r2, [r3, #0]
 8004e8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e92:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8004e96:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004e9a:	601a      	str	r2, [r3, #0]
 8004e9c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ea0:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	fa93 f2a3 	rbit	r2, r3
 8004eaa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004eae:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8004eb2:	601a      	str	r2, [r3, #0]
 8004eb4:	4b3f      	ldr	r3, [pc, #252]	@ (8004fb4 <HAL_RCC_OscConfig+0xf78>)
 8004eb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eb8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004ebc:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8004ec0:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004ec4:	6011      	str	r1, [r2, #0]
 8004ec6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004eca:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8004ece:	6812      	ldr	r2, [r2, #0]
 8004ed0:	fa92 f1a2 	rbit	r1, r2
 8004ed4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004ed8:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8004edc:	6011      	str	r1, [r2, #0]
  return result;
 8004ede:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004ee2:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8004ee6:	6812      	ldr	r2, [r2, #0]
 8004ee8:	fab2 f282 	clz	r2, r2
 8004eec:	b2d2      	uxtb	r2, r2
 8004eee:	f042 0220 	orr.w	r2, r2, #32
 8004ef2:	b2d2      	uxtb	r2, r2
 8004ef4:	f002 021f 	and.w	r2, r2, #31
 8004ef8:	2101      	movs	r1, #1
 8004efa:	fa01 f202 	lsl.w	r2, r1, r2
 8004efe:	4013      	ands	r3, r2
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d082      	beq.n	8004e0a <HAL_RCC_OscConfig+0xdce>
 8004f04:	e0cf      	b.n	80050a6 <HAL_RCC_OscConfig+0x106a>
 8004f06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f0a:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8004f0e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004f12:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f18:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	fa93 f2a3 	rbit	r2, r3
 8004f22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f26:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8004f2a:	601a      	str	r2, [r3, #0]
  return result;
 8004f2c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f30:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8004f34:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f36:	fab3 f383 	clz	r3, r3
 8004f3a:	b2db      	uxtb	r3, r3
 8004f3c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004f40:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004f44:	009b      	lsls	r3, r3, #2
 8004f46:	461a      	mov	r2, r3
 8004f48:	2300      	movs	r3, #0
 8004f4a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f4c:	f7fc ffc2 	bl	8001ed4 <HAL_GetTick>
 8004f50:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f54:	e009      	b.n	8004f6a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f56:	f7fc ffbd 	bl	8001ed4 <HAL_GetTick>
 8004f5a:	4602      	mov	r2, r0
 8004f5c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004f60:	1ad3      	subs	r3, r2, r3
 8004f62:	2b02      	cmp	r3, #2
 8004f64:	d901      	bls.n	8004f6a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8004f66:	2303      	movs	r3, #3
 8004f68:	e09e      	b.n	80050a8 <HAL_RCC_OscConfig+0x106c>
 8004f6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f6e:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8004f72:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004f76:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f7c:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	fa93 f2a3 	rbit	r2, r3
 8004f86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f8a:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8004f8e:	601a      	str	r2, [r3, #0]
  return result;
 8004f90:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f94:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8004f98:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f9a:	fab3 f383 	clz	r3, r3
 8004f9e:	b2db      	uxtb	r3, r3
 8004fa0:	095b      	lsrs	r3, r3, #5
 8004fa2:	b2db      	uxtb	r3, r3
 8004fa4:	f043 0301 	orr.w	r3, r3, #1
 8004fa8:	b2db      	uxtb	r3, r3
 8004faa:	2b01      	cmp	r3, #1
 8004fac:	d104      	bne.n	8004fb8 <HAL_RCC_OscConfig+0xf7c>
 8004fae:	4b01      	ldr	r3, [pc, #4]	@ (8004fb4 <HAL_RCC_OscConfig+0xf78>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	e029      	b.n	8005008 <HAL_RCC_OscConfig+0xfcc>
 8004fb4:	40021000 	.word	0x40021000
 8004fb8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004fbc:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8004fc0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004fc4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fc6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004fca:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	fa93 f2a3 	rbit	r2, r3
 8004fd4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004fd8:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8004fdc:	601a      	str	r2, [r3, #0]
 8004fde:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004fe2:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8004fe6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004fea:	601a      	str	r2, [r3, #0]
 8004fec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ff0:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	fa93 f2a3 	rbit	r2, r3
 8004ffa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ffe:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8005002:	601a      	str	r2, [r3, #0]
 8005004:	4b2b      	ldr	r3, [pc, #172]	@ (80050b4 <HAL_RCC_OscConfig+0x1078>)
 8005006:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005008:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800500c:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8005010:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8005014:	6011      	str	r1, [r2, #0]
 8005016:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800501a:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 800501e:	6812      	ldr	r2, [r2, #0]
 8005020:	fa92 f1a2 	rbit	r1, r2
 8005024:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005028:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800502c:	6011      	str	r1, [r2, #0]
  return result;
 800502e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005032:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8005036:	6812      	ldr	r2, [r2, #0]
 8005038:	fab2 f282 	clz	r2, r2
 800503c:	b2d2      	uxtb	r2, r2
 800503e:	f042 0220 	orr.w	r2, r2, #32
 8005042:	b2d2      	uxtb	r2, r2
 8005044:	f002 021f 	and.w	r2, r2, #31
 8005048:	2101      	movs	r1, #1
 800504a:	fa01 f202 	lsl.w	r2, r1, r2
 800504e:	4013      	ands	r3, r2
 8005050:	2b00      	cmp	r3, #0
 8005052:	d180      	bne.n	8004f56 <HAL_RCC_OscConfig+0xf1a>
 8005054:	e027      	b.n	80050a6 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005056:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800505a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	69db      	ldr	r3, [r3, #28]
 8005062:	2b01      	cmp	r3, #1
 8005064:	d101      	bne.n	800506a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8005066:	2301      	movs	r3, #1
 8005068:	e01e      	b.n	80050a8 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800506a:	4b12      	ldr	r3, [pc, #72]	@ (80050b4 <HAL_RCC_OscConfig+0x1078>)
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005072:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8005076:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800507a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800507e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	6a1b      	ldr	r3, [r3, #32]
 8005086:	429a      	cmp	r2, r3
 8005088:	d10b      	bne.n	80050a2 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800508a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800508e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8005092:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005096:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800509e:	429a      	cmp	r2, r3
 80050a0:	d001      	beq.n	80050a6 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80050a2:	2301      	movs	r3, #1
 80050a4:	e000      	b.n	80050a8 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80050a6:	2300      	movs	r3, #0
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}
 80050b2:	bf00      	nop
 80050b4:	40021000 	.word	0x40021000

080050b8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b09e      	sub	sp, #120	@ 0x78
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
 80050c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80050c2:	2300      	movs	r3, #0
 80050c4:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d101      	bne.n	80050d0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80050cc:	2301      	movs	r3, #1
 80050ce:	e162      	b.n	8005396 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80050d0:	4b90      	ldr	r3, [pc, #576]	@ (8005314 <HAL_RCC_ClockConfig+0x25c>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f003 0307 	and.w	r3, r3, #7
 80050d8:	683a      	ldr	r2, [r7, #0]
 80050da:	429a      	cmp	r2, r3
 80050dc:	d910      	bls.n	8005100 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050de:	4b8d      	ldr	r3, [pc, #564]	@ (8005314 <HAL_RCC_ClockConfig+0x25c>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f023 0207 	bic.w	r2, r3, #7
 80050e6:	498b      	ldr	r1, [pc, #556]	@ (8005314 <HAL_RCC_ClockConfig+0x25c>)
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	4313      	orrs	r3, r2
 80050ec:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80050ee:	4b89      	ldr	r3, [pc, #548]	@ (8005314 <HAL_RCC_ClockConfig+0x25c>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f003 0307 	and.w	r3, r3, #7
 80050f6:	683a      	ldr	r2, [r7, #0]
 80050f8:	429a      	cmp	r2, r3
 80050fa:	d001      	beq.n	8005100 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80050fc:	2301      	movs	r3, #1
 80050fe:	e14a      	b.n	8005396 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f003 0302 	and.w	r3, r3, #2
 8005108:	2b00      	cmp	r3, #0
 800510a:	d008      	beq.n	800511e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800510c:	4b82      	ldr	r3, [pc, #520]	@ (8005318 <HAL_RCC_ClockConfig+0x260>)
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	689b      	ldr	r3, [r3, #8]
 8005118:	497f      	ldr	r1, [pc, #508]	@ (8005318 <HAL_RCC_ClockConfig+0x260>)
 800511a:	4313      	orrs	r3, r2
 800511c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f003 0301 	and.w	r3, r3, #1
 8005126:	2b00      	cmp	r3, #0
 8005128:	f000 80dc 	beq.w	80052e4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	2b01      	cmp	r3, #1
 8005132:	d13c      	bne.n	80051ae <HAL_RCC_ClockConfig+0xf6>
 8005134:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005138:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800513a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800513c:	fa93 f3a3 	rbit	r3, r3
 8005140:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8005142:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005144:	fab3 f383 	clz	r3, r3
 8005148:	b2db      	uxtb	r3, r3
 800514a:	095b      	lsrs	r3, r3, #5
 800514c:	b2db      	uxtb	r3, r3
 800514e:	f043 0301 	orr.w	r3, r3, #1
 8005152:	b2db      	uxtb	r3, r3
 8005154:	2b01      	cmp	r3, #1
 8005156:	d102      	bne.n	800515e <HAL_RCC_ClockConfig+0xa6>
 8005158:	4b6f      	ldr	r3, [pc, #444]	@ (8005318 <HAL_RCC_ClockConfig+0x260>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	e00f      	b.n	800517e <HAL_RCC_ClockConfig+0xc6>
 800515e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005162:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005164:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005166:	fa93 f3a3 	rbit	r3, r3
 800516a:	667b      	str	r3, [r7, #100]	@ 0x64
 800516c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005170:	663b      	str	r3, [r7, #96]	@ 0x60
 8005172:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005174:	fa93 f3a3 	rbit	r3, r3
 8005178:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800517a:	4b67      	ldr	r3, [pc, #412]	@ (8005318 <HAL_RCC_ClockConfig+0x260>)
 800517c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800517e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005182:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005184:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005186:	fa92 f2a2 	rbit	r2, r2
 800518a:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 800518c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800518e:	fab2 f282 	clz	r2, r2
 8005192:	b2d2      	uxtb	r2, r2
 8005194:	f042 0220 	orr.w	r2, r2, #32
 8005198:	b2d2      	uxtb	r2, r2
 800519a:	f002 021f 	and.w	r2, r2, #31
 800519e:	2101      	movs	r1, #1
 80051a0:	fa01 f202 	lsl.w	r2, r1, r2
 80051a4:	4013      	ands	r3, r2
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d17b      	bne.n	80052a2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80051aa:	2301      	movs	r3, #1
 80051ac:	e0f3      	b.n	8005396 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	2b02      	cmp	r3, #2
 80051b4:	d13c      	bne.n	8005230 <HAL_RCC_ClockConfig+0x178>
 80051b6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80051ba:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80051be:	fa93 f3a3 	rbit	r3, r3
 80051c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80051c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051c6:	fab3 f383 	clz	r3, r3
 80051ca:	b2db      	uxtb	r3, r3
 80051cc:	095b      	lsrs	r3, r3, #5
 80051ce:	b2db      	uxtb	r3, r3
 80051d0:	f043 0301 	orr.w	r3, r3, #1
 80051d4:	b2db      	uxtb	r3, r3
 80051d6:	2b01      	cmp	r3, #1
 80051d8:	d102      	bne.n	80051e0 <HAL_RCC_ClockConfig+0x128>
 80051da:	4b4f      	ldr	r3, [pc, #316]	@ (8005318 <HAL_RCC_ClockConfig+0x260>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	e00f      	b.n	8005200 <HAL_RCC_ClockConfig+0x148>
 80051e0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80051e4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80051e8:	fa93 f3a3 	rbit	r3, r3
 80051ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80051ee:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80051f2:	643b      	str	r3, [r7, #64]	@ 0x40
 80051f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80051f6:	fa93 f3a3 	rbit	r3, r3
 80051fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80051fc:	4b46      	ldr	r3, [pc, #280]	@ (8005318 <HAL_RCC_ClockConfig+0x260>)
 80051fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005200:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005204:	63ba      	str	r2, [r7, #56]	@ 0x38
 8005206:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005208:	fa92 f2a2 	rbit	r2, r2
 800520c:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 800520e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005210:	fab2 f282 	clz	r2, r2
 8005214:	b2d2      	uxtb	r2, r2
 8005216:	f042 0220 	orr.w	r2, r2, #32
 800521a:	b2d2      	uxtb	r2, r2
 800521c:	f002 021f 	and.w	r2, r2, #31
 8005220:	2101      	movs	r1, #1
 8005222:	fa01 f202 	lsl.w	r2, r1, r2
 8005226:	4013      	ands	r3, r2
 8005228:	2b00      	cmp	r3, #0
 800522a:	d13a      	bne.n	80052a2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800522c:	2301      	movs	r3, #1
 800522e:	e0b2      	b.n	8005396 <HAL_RCC_ClockConfig+0x2de>
 8005230:	2302      	movs	r3, #2
 8005232:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005234:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005236:	fa93 f3a3 	rbit	r3, r3
 800523a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 800523c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800523e:	fab3 f383 	clz	r3, r3
 8005242:	b2db      	uxtb	r3, r3
 8005244:	095b      	lsrs	r3, r3, #5
 8005246:	b2db      	uxtb	r3, r3
 8005248:	f043 0301 	orr.w	r3, r3, #1
 800524c:	b2db      	uxtb	r3, r3
 800524e:	2b01      	cmp	r3, #1
 8005250:	d102      	bne.n	8005258 <HAL_RCC_ClockConfig+0x1a0>
 8005252:	4b31      	ldr	r3, [pc, #196]	@ (8005318 <HAL_RCC_ClockConfig+0x260>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	e00d      	b.n	8005274 <HAL_RCC_ClockConfig+0x1bc>
 8005258:	2302      	movs	r3, #2
 800525a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800525c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800525e:	fa93 f3a3 	rbit	r3, r3
 8005262:	627b      	str	r3, [r7, #36]	@ 0x24
 8005264:	2302      	movs	r3, #2
 8005266:	623b      	str	r3, [r7, #32]
 8005268:	6a3b      	ldr	r3, [r7, #32]
 800526a:	fa93 f3a3 	rbit	r3, r3
 800526e:	61fb      	str	r3, [r7, #28]
 8005270:	4b29      	ldr	r3, [pc, #164]	@ (8005318 <HAL_RCC_ClockConfig+0x260>)
 8005272:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005274:	2202      	movs	r2, #2
 8005276:	61ba      	str	r2, [r7, #24]
 8005278:	69ba      	ldr	r2, [r7, #24]
 800527a:	fa92 f2a2 	rbit	r2, r2
 800527e:	617a      	str	r2, [r7, #20]
  return result;
 8005280:	697a      	ldr	r2, [r7, #20]
 8005282:	fab2 f282 	clz	r2, r2
 8005286:	b2d2      	uxtb	r2, r2
 8005288:	f042 0220 	orr.w	r2, r2, #32
 800528c:	b2d2      	uxtb	r2, r2
 800528e:	f002 021f 	and.w	r2, r2, #31
 8005292:	2101      	movs	r1, #1
 8005294:	fa01 f202 	lsl.w	r2, r1, r2
 8005298:	4013      	ands	r3, r2
 800529a:	2b00      	cmp	r3, #0
 800529c:	d101      	bne.n	80052a2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800529e:	2301      	movs	r3, #1
 80052a0:	e079      	b.n	8005396 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80052a2:	4b1d      	ldr	r3, [pc, #116]	@ (8005318 <HAL_RCC_ClockConfig+0x260>)
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	f023 0203 	bic.w	r2, r3, #3
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	491a      	ldr	r1, [pc, #104]	@ (8005318 <HAL_RCC_ClockConfig+0x260>)
 80052b0:	4313      	orrs	r3, r2
 80052b2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80052b4:	f7fc fe0e 	bl	8001ed4 <HAL_GetTick>
 80052b8:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052ba:	e00a      	b.n	80052d2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052bc:	f7fc fe0a 	bl	8001ed4 <HAL_GetTick>
 80052c0:	4602      	mov	r2, r0
 80052c2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80052c4:	1ad3      	subs	r3, r2, r3
 80052c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d901      	bls.n	80052d2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80052ce:	2303      	movs	r3, #3
 80052d0:	e061      	b.n	8005396 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052d2:	4b11      	ldr	r3, [pc, #68]	@ (8005318 <HAL_RCC_ClockConfig+0x260>)
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	f003 020c 	and.w	r2, r3, #12
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	009b      	lsls	r3, r3, #2
 80052e0:	429a      	cmp	r2, r3
 80052e2:	d1eb      	bne.n	80052bc <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80052e4:	4b0b      	ldr	r3, [pc, #44]	@ (8005314 <HAL_RCC_ClockConfig+0x25c>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f003 0307 	and.w	r3, r3, #7
 80052ec:	683a      	ldr	r2, [r7, #0]
 80052ee:	429a      	cmp	r2, r3
 80052f0:	d214      	bcs.n	800531c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052f2:	4b08      	ldr	r3, [pc, #32]	@ (8005314 <HAL_RCC_ClockConfig+0x25c>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f023 0207 	bic.w	r2, r3, #7
 80052fa:	4906      	ldr	r1, [pc, #24]	@ (8005314 <HAL_RCC_ClockConfig+0x25c>)
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	4313      	orrs	r3, r2
 8005300:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005302:	4b04      	ldr	r3, [pc, #16]	@ (8005314 <HAL_RCC_ClockConfig+0x25c>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f003 0307 	and.w	r3, r3, #7
 800530a:	683a      	ldr	r2, [r7, #0]
 800530c:	429a      	cmp	r2, r3
 800530e:	d005      	beq.n	800531c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8005310:	2301      	movs	r3, #1
 8005312:	e040      	b.n	8005396 <HAL_RCC_ClockConfig+0x2de>
 8005314:	40022000 	.word	0x40022000
 8005318:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f003 0304 	and.w	r3, r3, #4
 8005324:	2b00      	cmp	r3, #0
 8005326:	d008      	beq.n	800533a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005328:	4b1d      	ldr	r3, [pc, #116]	@ (80053a0 <HAL_RCC_ClockConfig+0x2e8>)
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	68db      	ldr	r3, [r3, #12]
 8005334:	491a      	ldr	r1, [pc, #104]	@ (80053a0 <HAL_RCC_ClockConfig+0x2e8>)
 8005336:	4313      	orrs	r3, r2
 8005338:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f003 0308 	and.w	r3, r3, #8
 8005342:	2b00      	cmp	r3, #0
 8005344:	d009      	beq.n	800535a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005346:	4b16      	ldr	r3, [pc, #88]	@ (80053a0 <HAL_RCC_ClockConfig+0x2e8>)
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	691b      	ldr	r3, [r3, #16]
 8005352:	00db      	lsls	r3, r3, #3
 8005354:	4912      	ldr	r1, [pc, #72]	@ (80053a0 <HAL_RCC_ClockConfig+0x2e8>)
 8005356:	4313      	orrs	r3, r2
 8005358:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800535a:	f000 f829 	bl	80053b0 <HAL_RCC_GetSysClockFreq>
 800535e:	4601      	mov	r1, r0
 8005360:	4b0f      	ldr	r3, [pc, #60]	@ (80053a0 <HAL_RCC_ClockConfig+0x2e8>)
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005368:	22f0      	movs	r2, #240	@ 0xf0
 800536a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800536c:	693a      	ldr	r2, [r7, #16]
 800536e:	fa92 f2a2 	rbit	r2, r2
 8005372:	60fa      	str	r2, [r7, #12]
  return result;
 8005374:	68fa      	ldr	r2, [r7, #12]
 8005376:	fab2 f282 	clz	r2, r2
 800537a:	b2d2      	uxtb	r2, r2
 800537c:	40d3      	lsrs	r3, r2
 800537e:	4a09      	ldr	r2, [pc, #36]	@ (80053a4 <HAL_RCC_ClockConfig+0x2ec>)
 8005380:	5cd3      	ldrb	r3, [r2, r3]
 8005382:	fa21 f303 	lsr.w	r3, r1, r3
 8005386:	4a08      	ldr	r2, [pc, #32]	@ (80053a8 <HAL_RCC_ClockConfig+0x2f0>)
 8005388:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800538a:	4b08      	ldr	r3, [pc, #32]	@ (80053ac <HAL_RCC_ClockConfig+0x2f4>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4618      	mov	r0, r3
 8005390:	f7fc fbd4 	bl	8001b3c <HAL_InitTick>
  
  return HAL_OK;
 8005394:	2300      	movs	r3, #0
}
 8005396:	4618      	mov	r0, r3
 8005398:	3778      	adds	r7, #120	@ 0x78
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}
 800539e:	bf00      	nop
 80053a0:	40021000 	.word	0x40021000
 80053a4:	0800b070 	.word	0x0800b070
 80053a8:	20000010 	.word	0x20000010
 80053ac:	20000014 	.word	0x20000014

080053b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b087      	sub	sp, #28
 80053b4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80053b6:	2300      	movs	r3, #0
 80053b8:	60fb      	str	r3, [r7, #12]
 80053ba:	2300      	movs	r3, #0
 80053bc:	60bb      	str	r3, [r7, #8]
 80053be:	2300      	movs	r3, #0
 80053c0:	617b      	str	r3, [r7, #20]
 80053c2:	2300      	movs	r3, #0
 80053c4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80053c6:	2300      	movs	r3, #0
 80053c8:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80053ca:	4b1e      	ldr	r3, [pc, #120]	@ (8005444 <HAL_RCC_GetSysClockFreq+0x94>)
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	f003 030c 	and.w	r3, r3, #12
 80053d6:	2b04      	cmp	r3, #4
 80053d8:	d002      	beq.n	80053e0 <HAL_RCC_GetSysClockFreq+0x30>
 80053da:	2b08      	cmp	r3, #8
 80053dc:	d003      	beq.n	80053e6 <HAL_RCC_GetSysClockFreq+0x36>
 80053de:	e026      	b.n	800542e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80053e0:	4b19      	ldr	r3, [pc, #100]	@ (8005448 <HAL_RCC_GetSysClockFreq+0x98>)
 80053e2:	613b      	str	r3, [r7, #16]
      break;
 80053e4:	e026      	b.n	8005434 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	0c9b      	lsrs	r3, r3, #18
 80053ea:	f003 030f 	and.w	r3, r3, #15
 80053ee:	4a17      	ldr	r2, [pc, #92]	@ (800544c <HAL_RCC_GetSysClockFreq+0x9c>)
 80053f0:	5cd3      	ldrb	r3, [r2, r3]
 80053f2:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 80053f4:	4b13      	ldr	r3, [pc, #76]	@ (8005444 <HAL_RCC_GetSysClockFreq+0x94>)
 80053f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053f8:	f003 030f 	and.w	r3, r3, #15
 80053fc:	4a14      	ldr	r2, [pc, #80]	@ (8005450 <HAL_RCC_GetSysClockFreq+0xa0>)
 80053fe:	5cd3      	ldrb	r3, [r2, r3]
 8005400:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005408:	2b00      	cmp	r3, #0
 800540a:	d008      	beq.n	800541e <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800540c:	4a0e      	ldr	r2, [pc, #56]	@ (8005448 <HAL_RCC_GetSysClockFreq+0x98>)
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	fbb2 f2f3 	udiv	r2, r2, r3
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	fb02 f303 	mul.w	r3, r2, r3
 800541a:	617b      	str	r3, [r7, #20]
 800541c:	e004      	b.n	8005428 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	4a0c      	ldr	r2, [pc, #48]	@ (8005454 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005422:	fb02 f303 	mul.w	r3, r2, r3
 8005426:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	613b      	str	r3, [r7, #16]
      break;
 800542c:	e002      	b.n	8005434 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800542e:	4b06      	ldr	r3, [pc, #24]	@ (8005448 <HAL_RCC_GetSysClockFreq+0x98>)
 8005430:	613b      	str	r3, [r7, #16]
      break;
 8005432:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005434:	693b      	ldr	r3, [r7, #16]
}
 8005436:	4618      	mov	r0, r3
 8005438:	371c      	adds	r7, #28
 800543a:	46bd      	mov	sp, r7
 800543c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005440:	4770      	bx	lr
 8005442:	bf00      	nop
 8005444:	40021000 	.word	0x40021000
 8005448:	007a1200 	.word	0x007a1200
 800544c:	0800b088 	.word	0x0800b088
 8005450:	0800b098 	.word	0x0800b098
 8005454:	003d0900 	.word	0x003d0900

08005458 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005458:	b480      	push	{r7}
 800545a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800545c:	4b03      	ldr	r3, [pc, #12]	@ (800546c <HAL_RCC_GetHCLKFreq+0x14>)
 800545e:	681b      	ldr	r3, [r3, #0]
}
 8005460:	4618      	mov	r0, r3
 8005462:	46bd      	mov	sp, r7
 8005464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005468:	4770      	bx	lr
 800546a:	bf00      	nop
 800546c:	20000010 	.word	0x20000010

08005470 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b082      	sub	sp, #8
 8005474:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8005476:	f7ff ffef 	bl	8005458 <HAL_RCC_GetHCLKFreq>
 800547a:	4601      	mov	r1, r0
 800547c:	4b0b      	ldr	r3, [pc, #44]	@ (80054ac <HAL_RCC_GetPCLK1Freq+0x3c>)
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005484:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8005488:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800548a:	687a      	ldr	r2, [r7, #4]
 800548c:	fa92 f2a2 	rbit	r2, r2
 8005490:	603a      	str	r2, [r7, #0]
  return result;
 8005492:	683a      	ldr	r2, [r7, #0]
 8005494:	fab2 f282 	clz	r2, r2
 8005498:	b2d2      	uxtb	r2, r2
 800549a:	40d3      	lsrs	r3, r2
 800549c:	4a04      	ldr	r2, [pc, #16]	@ (80054b0 <HAL_RCC_GetPCLK1Freq+0x40>)
 800549e:	5cd3      	ldrb	r3, [r2, r3]
 80054a0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80054a4:	4618      	mov	r0, r3
 80054a6:	3708      	adds	r7, #8
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bd80      	pop	{r7, pc}
 80054ac:	40021000 	.word	0x40021000
 80054b0:	0800b080 	.word	0x0800b080

080054b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b082      	sub	sp, #8
 80054b8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80054ba:	f7ff ffcd 	bl	8005458 <HAL_RCC_GetHCLKFreq>
 80054be:	4601      	mov	r1, r0
 80054c0:	4b0b      	ldr	r3, [pc, #44]	@ (80054f0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 80054c8:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 80054cc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054ce:	687a      	ldr	r2, [r7, #4]
 80054d0:	fa92 f2a2 	rbit	r2, r2
 80054d4:	603a      	str	r2, [r7, #0]
  return result;
 80054d6:	683a      	ldr	r2, [r7, #0]
 80054d8:	fab2 f282 	clz	r2, r2
 80054dc:	b2d2      	uxtb	r2, r2
 80054de:	40d3      	lsrs	r3, r2
 80054e0:	4a04      	ldr	r2, [pc, #16]	@ (80054f4 <HAL_RCC_GetPCLK2Freq+0x40>)
 80054e2:	5cd3      	ldrb	r3, [r2, r3]
 80054e4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80054e8:	4618      	mov	r0, r3
 80054ea:	3708      	adds	r7, #8
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bd80      	pop	{r7, pc}
 80054f0:	40021000 	.word	0x40021000
 80054f4:	0800b080 	.word	0x0800b080

080054f8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80054f8:	b480      	push	{r7}
 80054fa:	b083      	sub	sp, #12
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
 8005500:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	220f      	movs	r2, #15
 8005506:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005508:	4b12      	ldr	r3, [pc, #72]	@ (8005554 <HAL_RCC_GetClockConfig+0x5c>)
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	f003 0203 	and.w	r2, r3, #3
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8005514:	4b0f      	ldr	r3, [pc, #60]	@ (8005554 <HAL_RCC_GetClockConfig+0x5c>)
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8005520:	4b0c      	ldr	r3, [pc, #48]	@ (8005554 <HAL_RCC_GetClockConfig+0x5c>)
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800552c:	4b09      	ldr	r3, [pc, #36]	@ (8005554 <HAL_RCC_GetClockConfig+0x5c>)
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	08db      	lsrs	r3, r3, #3
 8005532:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 800553a:	4b07      	ldr	r3, [pc, #28]	@ (8005558 <HAL_RCC_GetClockConfig+0x60>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f003 0207 	and.w	r2, r3, #7
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	601a      	str	r2, [r3, #0]
}
 8005546:	bf00      	nop
 8005548:	370c      	adds	r7, #12
 800554a:	46bd      	mov	sp, r7
 800554c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005550:	4770      	bx	lr
 8005552:	bf00      	nop
 8005554:	40021000 	.word	0x40021000
 8005558:	40022000 	.word	0x40022000

0800555c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b092      	sub	sp, #72	@ 0x48
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005564:	2300      	movs	r3, #0
 8005566:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8005568:	2300      	movs	r3, #0
 800556a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800556c:	2300      	movs	r3, #0
 800556e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800557a:	2b00      	cmp	r3, #0
 800557c:	f000 80d4 	beq.w	8005728 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005580:	4b4e      	ldr	r3, [pc, #312]	@ (80056bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005582:	69db      	ldr	r3, [r3, #28]
 8005584:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005588:	2b00      	cmp	r3, #0
 800558a:	d10e      	bne.n	80055aa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800558c:	4b4b      	ldr	r3, [pc, #300]	@ (80056bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800558e:	69db      	ldr	r3, [r3, #28]
 8005590:	4a4a      	ldr	r2, [pc, #296]	@ (80056bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005592:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005596:	61d3      	str	r3, [r2, #28]
 8005598:	4b48      	ldr	r3, [pc, #288]	@ (80056bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800559a:	69db      	ldr	r3, [r3, #28]
 800559c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80055a0:	60bb      	str	r3, [r7, #8]
 80055a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80055a4:	2301      	movs	r3, #1
 80055a6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055aa:	4b45      	ldr	r3, [pc, #276]	@ (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d118      	bne.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80055b6:	4b42      	ldr	r3, [pc, #264]	@ (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a41      	ldr	r2, [pc, #260]	@ (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80055bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80055c0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80055c2:	f7fc fc87 	bl	8001ed4 <HAL_GetTick>
 80055c6:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055c8:	e008      	b.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055ca:	f7fc fc83 	bl	8001ed4 <HAL_GetTick>
 80055ce:	4602      	mov	r2, r0
 80055d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80055d2:	1ad3      	subs	r3, r2, r3
 80055d4:	2b64      	cmp	r3, #100	@ 0x64
 80055d6:	d901      	bls.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80055d8:	2303      	movs	r3, #3
 80055da:	e14b      	b.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055dc:	4b38      	ldr	r3, [pc, #224]	@ (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d0f0      	beq.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80055e8:	4b34      	ldr	r3, [pc, #208]	@ (80056bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055ea:	6a1b      	ldr	r3, [r3, #32]
 80055ec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80055f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80055f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	f000 8084 	beq.w	8005702 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005602:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005604:	429a      	cmp	r2, r3
 8005606:	d07c      	beq.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005608:	4b2c      	ldr	r3, [pc, #176]	@ (80056bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800560a:	6a1b      	ldr	r3, [r3, #32]
 800560c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005610:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005612:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005616:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005618:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800561a:	fa93 f3a3 	rbit	r3, r3
 800561e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8005620:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005622:	fab3 f383 	clz	r3, r3
 8005626:	b2db      	uxtb	r3, r3
 8005628:	461a      	mov	r2, r3
 800562a:	4b26      	ldr	r3, [pc, #152]	@ (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800562c:	4413      	add	r3, r2
 800562e:	009b      	lsls	r3, r3, #2
 8005630:	461a      	mov	r2, r3
 8005632:	2301      	movs	r3, #1
 8005634:	6013      	str	r3, [r2, #0]
 8005636:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800563a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800563c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800563e:	fa93 f3a3 	rbit	r3, r3
 8005642:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8005644:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005646:	fab3 f383 	clz	r3, r3
 800564a:	b2db      	uxtb	r3, r3
 800564c:	461a      	mov	r2, r3
 800564e:	4b1d      	ldr	r3, [pc, #116]	@ (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005650:	4413      	add	r3, r2
 8005652:	009b      	lsls	r3, r3, #2
 8005654:	461a      	mov	r2, r3
 8005656:	2300      	movs	r3, #0
 8005658:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800565a:	4a18      	ldr	r2, [pc, #96]	@ (80056bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800565c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800565e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005660:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005662:	f003 0301 	and.w	r3, r3, #1
 8005666:	2b00      	cmp	r3, #0
 8005668:	d04b      	beq.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800566a:	f7fc fc33 	bl	8001ed4 <HAL_GetTick>
 800566e:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005670:	e00a      	b.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005672:	f7fc fc2f 	bl	8001ed4 <HAL_GetTick>
 8005676:	4602      	mov	r2, r0
 8005678:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800567a:	1ad3      	subs	r3, r2, r3
 800567c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005680:	4293      	cmp	r3, r2
 8005682:	d901      	bls.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005684:	2303      	movs	r3, #3
 8005686:	e0f5      	b.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8005688:	2302      	movs	r3, #2
 800568a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800568c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800568e:	fa93 f3a3 	rbit	r3, r3
 8005692:	627b      	str	r3, [r7, #36]	@ 0x24
 8005694:	2302      	movs	r3, #2
 8005696:	623b      	str	r3, [r7, #32]
 8005698:	6a3b      	ldr	r3, [r7, #32]
 800569a:	fa93 f3a3 	rbit	r3, r3
 800569e:	61fb      	str	r3, [r7, #28]
  return result;
 80056a0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056a2:	fab3 f383 	clz	r3, r3
 80056a6:	b2db      	uxtb	r3, r3
 80056a8:	095b      	lsrs	r3, r3, #5
 80056aa:	b2db      	uxtb	r3, r3
 80056ac:	f043 0302 	orr.w	r3, r3, #2
 80056b0:	b2db      	uxtb	r3, r3
 80056b2:	2b02      	cmp	r3, #2
 80056b4:	d108      	bne.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80056b6:	4b01      	ldr	r3, [pc, #4]	@ (80056bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056b8:	6a1b      	ldr	r3, [r3, #32]
 80056ba:	e00d      	b.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80056bc:	40021000 	.word	0x40021000
 80056c0:	40007000 	.word	0x40007000
 80056c4:	10908100 	.word	0x10908100
 80056c8:	2302      	movs	r3, #2
 80056ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056cc:	69bb      	ldr	r3, [r7, #24]
 80056ce:	fa93 f3a3 	rbit	r3, r3
 80056d2:	617b      	str	r3, [r7, #20]
 80056d4:	4b69      	ldr	r3, [pc, #420]	@ (800587c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80056d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056d8:	2202      	movs	r2, #2
 80056da:	613a      	str	r2, [r7, #16]
 80056dc:	693a      	ldr	r2, [r7, #16]
 80056de:	fa92 f2a2 	rbit	r2, r2
 80056e2:	60fa      	str	r2, [r7, #12]
  return result;
 80056e4:	68fa      	ldr	r2, [r7, #12]
 80056e6:	fab2 f282 	clz	r2, r2
 80056ea:	b2d2      	uxtb	r2, r2
 80056ec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80056f0:	b2d2      	uxtb	r2, r2
 80056f2:	f002 021f 	and.w	r2, r2, #31
 80056f6:	2101      	movs	r1, #1
 80056f8:	fa01 f202 	lsl.w	r2, r1, r2
 80056fc:	4013      	ands	r3, r2
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d0b7      	beq.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005702:	4b5e      	ldr	r3, [pc, #376]	@ (800587c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005704:	6a1b      	ldr	r3, [r3, #32]
 8005706:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	495b      	ldr	r1, [pc, #364]	@ (800587c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005710:	4313      	orrs	r3, r2
 8005712:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005714:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8005718:	2b01      	cmp	r3, #1
 800571a:	d105      	bne.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800571c:	4b57      	ldr	r3, [pc, #348]	@ (800587c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800571e:	69db      	ldr	r3, [r3, #28]
 8005720:	4a56      	ldr	r2, [pc, #344]	@ (800587c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005722:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005726:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f003 0301 	and.w	r3, r3, #1
 8005730:	2b00      	cmp	r3, #0
 8005732:	d008      	beq.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005734:	4b51      	ldr	r3, [pc, #324]	@ (800587c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005736:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005738:	f023 0203 	bic.w	r2, r3, #3
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	689b      	ldr	r3, [r3, #8]
 8005740:	494e      	ldr	r1, [pc, #312]	@ (800587c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005742:	4313      	orrs	r3, r2
 8005744:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f003 0320 	and.w	r3, r3, #32
 800574e:	2b00      	cmp	r3, #0
 8005750:	d008      	beq.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005752:	4b4a      	ldr	r3, [pc, #296]	@ (800587c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005756:	f023 0210 	bic.w	r2, r3, #16
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	68db      	ldr	r3, [r3, #12]
 800575e:	4947      	ldr	r1, [pc, #284]	@ (800587c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005760:	4313      	orrs	r3, r2
 8005762:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800576c:	2b00      	cmp	r3, #0
 800576e:	d008      	beq.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8005770:	4b42      	ldr	r3, [pc, #264]	@ (800587c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800577c:	493f      	ldr	r1, [pc, #252]	@ (800587c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800577e:	4313      	orrs	r3, r2
 8005780:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800578a:	2b00      	cmp	r3, #0
 800578c:	d008      	beq.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800578e:	4b3b      	ldr	r3, [pc, #236]	@ (800587c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005792:	f023 0220 	bic.w	r2, r3, #32
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	691b      	ldr	r3, [r3, #16]
 800579a:	4938      	ldr	r1, [pc, #224]	@ (800587c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800579c:	4313      	orrs	r3, r2
 800579e:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d008      	beq.n	80057be <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80057ac:	4b33      	ldr	r3, [pc, #204]	@ (800587c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80057ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057b0:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	695b      	ldr	r3, [r3, #20]
 80057b8:	4930      	ldr	r1, [pc, #192]	@ (800587c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80057ba:	4313      	orrs	r3, r2
 80057bc:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d008      	beq.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80057ca:	4b2c      	ldr	r3, [pc, #176]	@ (800587c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	69db      	ldr	r3, [r3, #28]
 80057d6:	4929      	ldr	r1, [pc, #164]	@ (800587c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80057d8:	4313      	orrs	r3, r2
 80057da:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d008      	beq.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 80057e8:	4b24      	ldr	r3, [pc, #144]	@ (800587c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80057ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057ec:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	699b      	ldr	r3, [r3, #24]
 80057f4:	4921      	ldr	r1, [pc, #132]	@ (800587c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80057f6:	4313      	orrs	r3, r2
 80057f8:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005802:	2b00      	cmp	r3, #0
 8005804:	d008      	beq.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005806:	4b1d      	ldr	r3, [pc, #116]	@ (800587c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800580a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6a1b      	ldr	r3, [r3, #32]
 8005812:	491a      	ldr	r1, [pc, #104]	@ (800587c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005814:	4313      	orrs	r3, r2
 8005816:	630b      	str	r3, [r1, #48]	@ 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005820:	2b00      	cmp	r3, #0
 8005822:	d008      	beq.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8005824:	4b15      	ldr	r3, [pc, #84]	@ (800587c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005826:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005828:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005830:	4912      	ldr	r1, [pc, #72]	@ (800587c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005832:	4313      	orrs	r3, r2
 8005834:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800583e:	2b00      	cmp	r3, #0
 8005840:	d008      	beq.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8005842:	4b0e      	ldr	r3, [pc, #56]	@ (800587c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005846:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800584e:	490b      	ldr	r1, [pc, #44]	@ (800587c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005850:	4313      	orrs	r3, r2
 8005852:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800585c:	2b00      	cmp	r3, #0
 800585e:	d008      	beq.n	8005872 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8005860:	4b06      	ldr	r3, [pc, #24]	@ (800587c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005862:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005864:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800586c:	4903      	ldr	r1, [pc, #12]	@ (800587c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800586e:	4313      	orrs	r3, r2
 8005870:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005872:	2300      	movs	r3, #0
}
 8005874:	4618      	mov	r0, r3
 8005876:	3748      	adds	r7, #72	@ 0x48
 8005878:	46bd      	mov	sp, r7
 800587a:	bd80      	pop	{r7, pc}
 800587c:	40021000 	.word	0x40021000

08005880 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b082      	sub	sp, #8
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d101      	bne.n	8005892 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800588e:	2301      	movs	r3, #1
 8005890:	e049      	b.n	8005926 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005898:	b2db      	uxtb	r3, r3
 800589a:	2b00      	cmp	r3, #0
 800589c:	d106      	bne.n	80058ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2200      	movs	r2, #0
 80058a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f000 f841 	bl	800592e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2202      	movs	r2, #2
 80058b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681a      	ldr	r2, [r3, #0]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	3304      	adds	r3, #4
 80058bc:	4619      	mov	r1, r3
 80058be:	4610      	mov	r0, r2
 80058c0:	f000 f9be 	bl	8005c40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2201      	movs	r2, #1
 80058c8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2201      	movs	r2, #1
 80058d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2201      	movs	r2, #1
 80058d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2201      	movs	r2, #1
 80058e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2201      	movs	r2, #1
 80058e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2201      	movs	r2, #1
 80058f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2201      	movs	r2, #1
 80058f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2201      	movs	r2, #1
 8005900:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2201      	movs	r2, #1
 8005908:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2201      	movs	r2, #1
 8005910:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2201      	movs	r2, #1
 8005918:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2201      	movs	r2, #1
 8005920:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005924:	2300      	movs	r3, #0
}
 8005926:	4618      	mov	r0, r3
 8005928:	3708      	adds	r7, #8
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}

0800592e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800592e:	b480      	push	{r7}
 8005930:	b083      	sub	sp, #12
 8005932:	af00      	add	r7, sp, #0
 8005934:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005936:	bf00      	nop
 8005938:	370c      	adds	r7, #12
 800593a:	46bd      	mov	sp, r7
 800593c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005940:	4770      	bx	lr
	...

08005944 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005944:	b480      	push	{r7}
 8005946:	b085      	sub	sp, #20
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005952:	b2db      	uxtb	r3, r3
 8005954:	2b01      	cmp	r3, #1
 8005956:	d001      	beq.n	800595c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005958:	2301      	movs	r3, #1
 800595a:	e03b      	b.n	80059d4 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2202      	movs	r2, #2
 8005960:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	68da      	ldr	r2, [r3, #12]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f042 0201 	orr.w	r2, r2, #1
 8005972:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a19      	ldr	r2, [pc, #100]	@ (80059e0 <HAL_TIM_Base_Start_IT+0x9c>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d009      	beq.n	8005992 <HAL_TIM_Base_Start_IT+0x4e>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005986:	d004      	beq.n	8005992 <HAL_TIM_Base_Start_IT+0x4e>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a15      	ldr	r2, [pc, #84]	@ (80059e4 <HAL_TIM_Base_Start_IT+0xa0>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d115      	bne.n	80059be <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	689a      	ldr	r2, [r3, #8]
 8005998:	4b13      	ldr	r3, [pc, #76]	@ (80059e8 <HAL_TIM_Base_Start_IT+0xa4>)
 800599a:	4013      	ands	r3, r2
 800599c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	2b06      	cmp	r3, #6
 80059a2:	d015      	beq.n	80059d0 <HAL_TIM_Base_Start_IT+0x8c>
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80059aa:	d011      	beq.n	80059d0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	681a      	ldr	r2, [r3, #0]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f042 0201 	orr.w	r2, r2, #1
 80059ba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059bc:	e008      	b.n	80059d0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	681a      	ldr	r2, [r3, #0]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f042 0201 	orr.w	r2, r2, #1
 80059cc:	601a      	str	r2, [r3, #0]
 80059ce:	e000      	b.n	80059d2 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059d0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80059d2:	2300      	movs	r3, #0
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	3714      	adds	r7, #20
 80059d8:	46bd      	mov	sp, r7
 80059da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059de:	4770      	bx	lr
 80059e0:	40012c00 	.word	0x40012c00
 80059e4:	40014000 	.word	0x40014000
 80059e8:	00010007 	.word	0x00010007

080059ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b084      	sub	sp, #16
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	68db      	ldr	r3, [r3, #12]
 80059fa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	691b      	ldr	r3, [r3, #16]
 8005a02:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	f003 0302 	and.w	r3, r3, #2
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d020      	beq.n	8005a50 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	f003 0302 	and.w	r3, r3, #2
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d01b      	beq.n	8005a50 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f06f 0202 	mvn.w	r2, #2
 8005a20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2201      	movs	r2, #1
 8005a26:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	699b      	ldr	r3, [r3, #24]
 8005a2e:	f003 0303 	and.w	r3, r3, #3
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d003      	beq.n	8005a3e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f000 f8e4 	bl	8005c04 <HAL_TIM_IC_CaptureCallback>
 8005a3c:	e005      	b.n	8005a4a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f000 f8d6 	bl	8005bf0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a44:	6878      	ldr	r0, [r7, #4]
 8005a46:	f000 f8e7 	bl	8005c18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	f003 0304 	and.w	r3, r3, #4
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d020      	beq.n	8005a9c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	f003 0304 	and.w	r3, r3, #4
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d01b      	beq.n	8005a9c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f06f 0204 	mvn.w	r2, #4
 8005a6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2202      	movs	r2, #2
 8005a72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	699b      	ldr	r3, [r3, #24]
 8005a7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d003      	beq.n	8005a8a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f000 f8be 	bl	8005c04 <HAL_TIM_IC_CaptureCallback>
 8005a88:	e005      	b.n	8005a96 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f000 f8b0 	bl	8005bf0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a90:	6878      	ldr	r0, [r7, #4]
 8005a92:	f000 f8c1 	bl	8005c18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	f003 0308 	and.w	r3, r3, #8
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d020      	beq.n	8005ae8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	f003 0308 	and.w	r3, r3, #8
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d01b      	beq.n	8005ae8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f06f 0208 	mvn.w	r2, #8
 8005ab8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2204      	movs	r2, #4
 8005abe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	69db      	ldr	r3, [r3, #28]
 8005ac6:	f003 0303 	and.w	r3, r3, #3
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d003      	beq.n	8005ad6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	f000 f898 	bl	8005c04 <HAL_TIM_IC_CaptureCallback>
 8005ad4:	e005      	b.n	8005ae2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f000 f88a 	bl	8005bf0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005adc:	6878      	ldr	r0, [r7, #4]
 8005ade:	f000 f89b 	bl	8005c18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	f003 0310 	and.w	r3, r3, #16
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d020      	beq.n	8005b34 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	f003 0310 	and.w	r3, r3, #16
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d01b      	beq.n	8005b34 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f06f 0210 	mvn.w	r2, #16
 8005b04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2208      	movs	r2, #8
 8005b0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	69db      	ldr	r3, [r3, #28]
 8005b12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d003      	beq.n	8005b22 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f000 f872 	bl	8005c04 <HAL_TIM_IC_CaptureCallback>
 8005b20:	e005      	b.n	8005b2e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	f000 f864 	bl	8005bf0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	f000 f875 	bl	8005c18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2200      	movs	r2, #0
 8005b32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	f003 0301 	and.w	r3, r3, #1
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d00c      	beq.n	8005b58 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	f003 0301 	and.w	r3, r3, #1
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d007      	beq.n	8005b58 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f06f 0201 	mvn.w	r2, #1
 8005b50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f7fb feaa 	bl	80018ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d00c      	beq.n	8005b7c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d007      	beq.n	8005b7c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005b74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f000 f8e6 	bl	8005d48 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d00c      	beq.n	8005ba0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d007      	beq.n	8005ba0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005b98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f000 f8de 	bl	8005d5c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d00c      	beq.n	8005bc4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d007      	beq.n	8005bc4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005bbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f000 f834 	bl	8005c2c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	f003 0320 	and.w	r3, r3, #32
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d00c      	beq.n	8005be8 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	f003 0320 	and.w	r3, r3, #32
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d007      	beq.n	8005be8 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f06f 0220 	mvn.w	r2, #32
 8005be0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f000 f8a6 	bl	8005d34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005be8:	bf00      	nop
 8005bea:	3710      	adds	r7, #16
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bd80      	pop	{r7, pc}

08005bf0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b083      	sub	sp, #12
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005bf8:	bf00      	nop
 8005bfa:	370c      	adds	r7, #12
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c02:	4770      	bx	lr

08005c04 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005c04:	b480      	push	{r7}
 8005c06:	b083      	sub	sp, #12
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005c0c:	bf00      	nop
 8005c0e:	370c      	adds	r7, #12
 8005c10:	46bd      	mov	sp, r7
 8005c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c16:	4770      	bx	lr

08005c18 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b083      	sub	sp, #12
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005c20:	bf00      	nop
 8005c22:	370c      	adds	r7, #12
 8005c24:	46bd      	mov	sp, r7
 8005c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2a:	4770      	bx	lr

08005c2c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b083      	sub	sp, #12
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005c34:	bf00      	nop
 8005c36:	370c      	adds	r7, #12
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3e:	4770      	bx	lr

08005c40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005c40:	b480      	push	{r7}
 8005c42:	b085      	sub	sp, #20
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
 8005c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	4a34      	ldr	r2, [pc, #208]	@ (8005d24 <TIM_Base_SetConfig+0xe4>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d003      	beq.n	8005c60 <TIM_Base_SetConfig+0x20>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c5e:	d108      	bne.n	8005c72 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	685b      	ldr	r3, [r3, #4]
 8005c6c:	68fa      	ldr	r2, [r7, #12]
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	4a2b      	ldr	r2, [pc, #172]	@ (8005d24 <TIM_Base_SetConfig+0xe4>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d00f      	beq.n	8005c9a <TIM_Base_SetConfig+0x5a>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c80:	d00b      	beq.n	8005c9a <TIM_Base_SetConfig+0x5a>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	4a28      	ldr	r2, [pc, #160]	@ (8005d28 <TIM_Base_SetConfig+0xe8>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d007      	beq.n	8005c9a <TIM_Base_SetConfig+0x5a>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	4a27      	ldr	r2, [pc, #156]	@ (8005d2c <TIM_Base_SetConfig+0xec>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d003      	beq.n	8005c9a <TIM_Base_SetConfig+0x5a>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	4a26      	ldr	r2, [pc, #152]	@ (8005d30 <TIM_Base_SetConfig+0xf0>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d108      	bne.n	8005cac <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ca0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	68db      	ldr	r3, [r3, #12]
 8005ca6:	68fa      	ldr	r2, [r7, #12]
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	695b      	ldr	r3, [r3, #20]
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	68fa      	ldr	r2, [r7, #12]
 8005cbe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	689a      	ldr	r2, [r3, #8]
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	681a      	ldr	r2, [r3, #0]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	4a14      	ldr	r2, [pc, #80]	@ (8005d24 <TIM_Base_SetConfig+0xe4>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d00b      	beq.n	8005cf0 <TIM_Base_SetConfig+0xb0>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	4a13      	ldr	r2, [pc, #76]	@ (8005d28 <TIM_Base_SetConfig+0xe8>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d007      	beq.n	8005cf0 <TIM_Base_SetConfig+0xb0>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	4a12      	ldr	r2, [pc, #72]	@ (8005d2c <TIM_Base_SetConfig+0xec>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d003      	beq.n	8005cf0 <TIM_Base_SetConfig+0xb0>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	4a11      	ldr	r2, [pc, #68]	@ (8005d30 <TIM_Base_SetConfig+0xf0>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d103      	bne.n	8005cf8 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	691a      	ldr	r2, [r3, #16]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	691b      	ldr	r3, [r3, #16]
 8005d02:	f003 0301 	and.w	r3, r3, #1
 8005d06:	2b01      	cmp	r3, #1
 8005d08:	d105      	bne.n	8005d16 <TIM_Base_SetConfig+0xd6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	691b      	ldr	r3, [r3, #16]
 8005d0e:	f023 0201 	bic.w	r2, r3, #1
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	611a      	str	r2, [r3, #16]
  }
}
 8005d16:	bf00      	nop
 8005d18:	3714      	adds	r7, #20
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d20:	4770      	bx	lr
 8005d22:	bf00      	nop
 8005d24:	40012c00 	.word	0x40012c00
 8005d28:	40014000 	.word	0x40014000
 8005d2c:	40014400 	.word	0x40014400
 8005d30:	40014800 	.word	0x40014800

08005d34 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b083      	sub	sp, #12
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005d3c:	bf00      	nop
 8005d3e:	370c      	adds	r7, #12
 8005d40:	46bd      	mov	sp, r7
 8005d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d46:	4770      	bx	lr

08005d48 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b083      	sub	sp, #12
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005d50:	bf00      	nop
 8005d52:	370c      	adds	r7, #12
 8005d54:	46bd      	mov	sp, r7
 8005d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5a:	4770      	bx	lr

08005d5c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b083      	sub	sp, #12
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005d64:	bf00      	nop
 8005d66:	370c      	adds	r7, #12
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6e:	4770      	bx	lr

08005d70 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b082      	sub	sp, #8
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d101      	bne.n	8005d82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d7e:	2301      	movs	r3, #1
 8005d80:	e040      	b.n	8005e04 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d106      	bne.n	8005d98 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f7fb fe90 	bl	8001ab8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2224      	movs	r2, #36	@ 0x24
 8005d9c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	681a      	ldr	r2, [r3, #0]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f022 0201 	bic.w	r2, r2, #1
 8005dac:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d002      	beq.n	8005dbc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f000 f9e8 	bl	800618c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005dbc:	6878      	ldr	r0, [r7, #4]
 8005dbe:	f000 f8af 	bl	8005f20 <UART_SetConfig>
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	2b01      	cmp	r3, #1
 8005dc6:	d101      	bne.n	8005dcc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005dc8:	2301      	movs	r3, #1
 8005dca:	e01b      	b.n	8005e04 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	685a      	ldr	r2, [r3, #4]
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005dda:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	689a      	ldr	r2, [r3, #8]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005dea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	681a      	ldr	r2, [r3, #0]
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f042 0201 	orr.w	r2, r2, #1
 8005dfa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005dfc:	6878      	ldr	r0, [r7, #4]
 8005dfe:	f000 fa67 	bl	80062d0 <UART_CheckIdleState>
 8005e02:	4603      	mov	r3, r0
}
 8005e04:	4618      	mov	r0, r3
 8005e06:	3708      	adds	r7, #8
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bd80      	pop	{r7, pc}

08005e0c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b08a      	sub	sp, #40	@ 0x28
 8005e10:	af02      	add	r7, sp, #8
 8005e12:	60f8      	str	r0, [r7, #12]
 8005e14:	60b9      	str	r1, [r7, #8]
 8005e16:	603b      	str	r3, [r7, #0]
 8005e18:	4613      	mov	r3, r2
 8005e1a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005e20:	2b20      	cmp	r3, #32
 8005e22:	d177      	bne.n	8005f14 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d002      	beq.n	8005e30 <HAL_UART_Transmit+0x24>
 8005e2a:	88fb      	ldrh	r3, [r7, #6]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d101      	bne.n	8005e34 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005e30:	2301      	movs	r3, #1
 8005e32:	e070      	b.n	8005f16 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2200      	movs	r2, #0
 8005e38:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	2221      	movs	r2, #33	@ 0x21
 8005e40:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005e42:	f7fc f847 	bl	8001ed4 <HAL_GetTick>
 8005e46:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	88fa      	ldrh	r2, [r7, #6]
 8005e4c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	88fa      	ldrh	r2, [r7, #6]
 8005e54:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	689b      	ldr	r3, [r3, #8]
 8005e5c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e60:	d108      	bne.n	8005e74 <HAL_UART_Transmit+0x68>
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	691b      	ldr	r3, [r3, #16]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d104      	bne.n	8005e74 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	61bb      	str	r3, [r7, #24]
 8005e72:	e003      	b.n	8005e7c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005e78:	2300      	movs	r3, #0
 8005e7a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005e7c:	e02f      	b.n	8005ede <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	9300      	str	r3, [sp, #0]
 8005e82:	697b      	ldr	r3, [r7, #20]
 8005e84:	2200      	movs	r2, #0
 8005e86:	2180      	movs	r1, #128	@ 0x80
 8005e88:	68f8      	ldr	r0, [r7, #12]
 8005e8a:	f000 fac9 	bl	8006420 <UART_WaitOnFlagUntilTimeout>
 8005e8e:	4603      	mov	r3, r0
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d004      	beq.n	8005e9e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	2220      	movs	r2, #32
 8005e98:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8005e9a:	2303      	movs	r3, #3
 8005e9c:	e03b      	b.n	8005f16 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8005e9e:	69fb      	ldr	r3, [r7, #28]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d10b      	bne.n	8005ebc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005ea4:	69bb      	ldr	r3, [r7, #24]
 8005ea6:	881a      	ldrh	r2, [r3, #0]
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005eb0:	b292      	uxth	r2, r2
 8005eb2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005eb4:	69bb      	ldr	r3, [r7, #24]
 8005eb6:	3302      	adds	r3, #2
 8005eb8:	61bb      	str	r3, [r7, #24]
 8005eba:	e007      	b.n	8005ecc <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005ebc:	69fb      	ldr	r3, [r7, #28]
 8005ebe:	781a      	ldrb	r2, [r3, #0]
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005ec6:	69fb      	ldr	r3, [r7, #28]
 8005ec8:	3301      	adds	r3, #1
 8005eca:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005ed2:	b29b      	uxth	r3, r3
 8005ed4:	3b01      	subs	r3, #1
 8005ed6:	b29a      	uxth	r2, r3
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005ee4:	b29b      	uxth	r3, r3
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d1c9      	bne.n	8005e7e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	9300      	str	r3, [sp, #0]
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	2140      	movs	r1, #64	@ 0x40
 8005ef4:	68f8      	ldr	r0, [r7, #12]
 8005ef6:	f000 fa93 	bl	8006420 <UART_WaitOnFlagUntilTimeout>
 8005efa:	4603      	mov	r3, r0
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d004      	beq.n	8005f0a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	2220      	movs	r2, #32
 8005f04:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005f06:	2303      	movs	r3, #3
 8005f08:	e005      	b.n	8005f16 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	2220      	movs	r2, #32
 8005f0e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005f10:	2300      	movs	r3, #0
 8005f12:	e000      	b.n	8005f16 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005f14:	2302      	movs	r3, #2
  }
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	3720      	adds	r7, #32
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd80      	pop	{r7, pc}
	...

08005f20 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b088      	sub	sp, #32
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005f28:	2300      	movs	r3, #0
 8005f2a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	689a      	ldr	r2, [r3, #8]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	691b      	ldr	r3, [r3, #16]
 8005f34:	431a      	orrs	r2, r3
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	695b      	ldr	r3, [r3, #20]
 8005f3a:	431a      	orrs	r2, r3
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	69db      	ldr	r3, [r3, #28]
 8005f40:	4313      	orrs	r3, r2
 8005f42:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	681a      	ldr	r2, [r3, #0]
 8005f4a:	4b8a      	ldr	r3, [pc, #552]	@ (8006174 <UART_SetConfig+0x254>)
 8005f4c:	4013      	ands	r3, r2
 8005f4e:	687a      	ldr	r2, [r7, #4]
 8005f50:	6812      	ldr	r2, [r2, #0]
 8005f52:	6979      	ldr	r1, [r7, #20]
 8005f54:	430b      	orrs	r3, r1
 8005f56:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	68da      	ldr	r2, [r3, #12]
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	430a      	orrs	r2, r1
 8005f6c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	699b      	ldr	r3, [r3, #24]
 8005f72:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6a1b      	ldr	r3, [r3, #32]
 8005f78:	697a      	ldr	r2, [r7, #20]
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	689b      	ldr	r3, [r3, #8]
 8005f84:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	697a      	ldr	r2, [r7, #20]
 8005f8e:	430a      	orrs	r2, r1
 8005f90:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a78      	ldr	r2, [pc, #480]	@ (8006178 <UART_SetConfig+0x258>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d120      	bne.n	8005fde <UART_SetConfig+0xbe>
 8005f9c:	4b77      	ldr	r3, [pc, #476]	@ (800617c <UART_SetConfig+0x25c>)
 8005f9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fa0:	f003 0303 	and.w	r3, r3, #3
 8005fa4:	2b03      	cmp	r3, #3
 8005fa6:	d817      	bhi.n	8005fd8 <UART_SetConfig+0xb8>
 8005fa8:	a201      	add	r2, pc, #4	@ (adr r2, 8005fb0 <UART_SetConfig+0x90>)
 8005faa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fae:	bf00      	nop
 8005fb0:	08005fc1 	.word	0x08005fc1
 8005fb4:	08005fcd 	.word	0x08005fcd
 8005fb8:	08005fd3 	.word	0x08005fd3
 8005fbc:	08005fc7 	.word	0x08005fc7
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	77fb      	strb	r3, [r7, #31]
 8005fc4:	e01d      	b.n	8006002 <UART_SetConfig+0xe2>
 8005fc6:	2302      	movs	r3, #2
 8005fc8:	77fb      	strb	r3, [r7, #31]
 8005fca:	e01a      	b.n	8006002 <UART_SetConfig+0xe2>
 8005fcc:	2304      	movs	r3, #4
 8005fce:	77fb      	strb	r3, [r7, #31]
 8005fd0:	e017      	b.n	8006002 <UART_SetConfig+0xe2>
 8005fd2:	2308      	movs	r3, #8
 8005fd4:	77fb      	strb	r3, [r7, #31]
 8005fd6:	e014      	b.n	8006002 <UART_SetConfig+0xe2>
 8005fd8:	2310      	movs	r3, #16
 8005fda:	77fb      	strb	r3, [r7, #31]
 8005fdc:	e011      	b.n	8006002 <UART_SetConfig+0xe2>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a67      	ldr	r2, [pc, #412]	@ (8006180 <UART_SetConfig+0x260>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d102      	bne.n	8005fee <UART_SetConfig+0xce>
 8005fe8:	2300      	movs	r3, #0
 8005fea:	77fb      	strb	r3, [r7, #31]
 8005fec:	e009      	b.n	8006002 <UART_SetConfig+0xe2>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4a64      	ldr	r2, [pc, #400]	@ (8006184 <UART_SetConfig+0x264>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d102      	bne.n	8005ffe <UART_SetConfig+0xde>
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	77fb      	strb	r3, [r7, #31]
 8005ffc:	e001      	b.n	8006002 <UART_SetConfig+0xe2>
 8005ffe:	2310      	movs	r3, #16
 8006000:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	69db      	ldr	r3, [r3, #28]
 8006006:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800600a:	d15a      	bne.n	80060c2 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 800600c:	7ffb      	ldrb	r3, [r7, #31]
 800600e:	2b08      	cmp	r3, #8
 8006010:	d827      	bhi.n	8006062 <UART_SetConfig+0x142>
 8006012:	a201      	add	r2, pc, #4	@ (adr r2, 8006018 <UART_SetConfig+0xf8>)
 8006014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006018:	0800603d 	.word	0x0800603d
 800601c:	08006045 	.word	0x08006045
 8006020:	0800604d 	.word	0x0800604d
 8006024:	08006063 	.word	0x08006063
 8006028:	08006053 	.word	0x08006053
 800602c:	08006063 	.word	0x08006063
 8006030:	08006063 	.word	0x08006063
 8006034:	08006063 	.word	0x08006063
 8006038:	0800605b 	.word	0x0800605b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800603c:	f7ff fa18 	bl	8005470 <HAL_RCC_GetPCLK1Freq>
 8006040:	61b8      	str	r0, [r7, #24]
        break;
 8006042:	e013      	b.n	800606c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006044:	f7ff fa36 	bl	80054b4 <HAL_RCC_GetPCLK2Freq>
 8006048:	61b8      	str	r0, [r7, #24]
        break;
 800604a:	e00f      	b.n	800606c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800604c:	4b4e      	ldr	r3, [pc, #312]	@ (8006188 <UART_SetConfig+0x268>)
 800604e:	61bb      	str	r3, [r7, #24]
        break;
 8006050:	e00c      	b.n	800606c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006052:	f7ff f9ad 	bl	80053b0 <HAL_RCC_GetSysClockFreq>
 8006056:	61b8      	str	r0, [r7, #24]
        break;
 8006058:	e008      	b.n	800606c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800605a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800605e:	61bb      	str	r3, [r7, #24]
        break;
 8006060:	e004      	b.n	800606c <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8006062:	2300      	movs	r3, #0
 8006064:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006066:	2301      	movs	r3, #1
 8006068:	77bb      	strb	r3, [r7, #30]
        break;
 800606a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800606c:	69bb      	ldr	r3, [r7, #24]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d074      	beq.n	800615c <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006072:	69bb      	ldr	r3, [r7, #24]
 8006074:	005a      	lsls	r2, r3, #1
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	685b      	ldr	r3, [r3, #4]
 800607a:	085b      	lsrs	r3, r3, #1
 800607c:	441a      	add	r2, r3
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	685b      	ldr	r3, [r3, #4]
 8006082:	fbb2 f3f3 	udiv	r3, r2, r3
 8006086:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006088:	693b      	ldr	r3, [r7, #16]
 800608a:	2b0f      	cmp	r3, #15
 800608c:	d916      	bls.n	80060bc <UART_SetConfig+0x19c>
 800608e:	693b      	ldr	r3, [r7, #16]
 8006090:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006094:	d212      	bcs.n	80060bc <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	b29b      	uxth	r3, r3
 800609a:	f023 030f 	bic.w	r3, r3, #15
 800609e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	085b      	lsrs	r3, r3, #1
 80060a4:	b29b      	uxth	r3, r3
 80060a6:	f003 0307 	and.w	r3, r3, #7
 80060aa:	b29a      	uxth	r2, r3
 80060ac:	89fb      	ldrh	r3, [r7, #14]
 80060ae:	4313      	orrs	r3, r2
 80060b0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	89fa      	ldrh	r2, [r7, #14]
 80060b8:	60da      	str	r2, [r3, #12]
 80060ba:	e04f      	b.n	800615c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80060bc:	2301      	movs	r3, #1
 80060be:	77bb      	strb	r3, [r7, #30]
 80060c0:	e04c      	b.n	800615c <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80060c2:	7ffb      	ldrb	r3, [r7, #31]
 80060c4:	2b08      	cmp	r3, #8
 80060c6:	d828      	bhi.n	800611a <UART_SetConfig+0x1fa>
 80060c8:	a201      	add	r2, pc, #4	@ (adr r2, 80060d0 <UART_SetConfig+0x1b0>)
 80060ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060ce:	bf00      	nop
 80060d0:	080060f5 	.word	0x080060f5
 80060d4:	080060fd 	.word	0x080060fd
 80060d8:	08006105 	.word	0x08006105
 80060dc:	0800611b 	.word	0x0800611b
 80060e0:	0800610b 	.word	0x0800610b
 80060e4:	0800611b 	.word	0x0800611b
 80060e8:	0800611b 	.word	0x0800611b
 80060ec:	0800611b 	.word	0x0800611b
 80060f0:	08006113 	.word	0x08006113
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80060f4:	f7ff f9bc 	bl	8005470 <HAL_RCC_GetPCLK1Freq>
 80060f8:	61b8      	str	r0, [r7, #24]
        break;
 80060fa:	e013      	b.n	8006124 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80060fc:	f7ff f9da 	bl	80054b4 <HAL_RCC_GetPCLK2Freq>
 8006100:	61b8      	str	r0, [r7, #24]
        break;
 8006102:	e00f      	b.n	8006124 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006104:	4b20      	ldr	r3, [pc, #128]	@ (8006188 <UART_SetConfig+0x268>)
 8006106:	61bb      	str	r3, [r7, #24]
        break;
 8006108:	e00c      	b.n	8006124 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800610a:	f7ff f951 	bl	80053b0 <HAL_RCC_GetSysClockFreq>
 800610e:	61b8      	str	r0, [r7, #24]
        break;
 8006110:	e008      	b.n	8006124 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006112:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006116:	61bb      	str	r3, [r7, #24]
        break;
 8006118:	e004      	b.n	8006124 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800611a:	2300      	movs	r3, #0
 800611c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800611e:	2301      	movs	r3, #1
 8006120:	77bb      	strb	r3, [r7, #30]
        break;
 8006122:	bf00      	nop
    }

    if (pclk != 0U)
 8006124:	69bb      	ldr	r3, [r7, #24]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d018      	beq.n	800615c <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	085a      	lsrs	r2, r3, #1
 8006130:	69bb      	ldr	r3, [r7, #24]
 8006132:	441a      	add	r2, r3
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	fbb2 f3f3 	udiv	r3, r2, r3
 800613c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	2b0f      	cmp	r3, #15
 8006142:	d909      	bls.n	8006158 <UART_SetConfig+0x238>
 8006144:	693b      	ldr	r3, [r7, #16]
 8006146:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800614a:	d205      	bcs.n	8006158 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800614c:	693b      	ldr	r3, [r7, #16]
 800614e:	b29a      	uxth	r2, r3
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	60da      	str	r2, [r3, #12]
 8006156:	e001      	b.n	800615c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8006158:	2301      	movs	r3, #1
 800615a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2200      	movs	r2, #0
 8006160:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2200      	movs	r2, #0
 8006166:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006168:	7fbb      	ldrb	r3, [r7, #30]
}
 800616a:	4618      	mov	r0, r3
 800616c:	3720      	adds	r7, #32
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}
 8006172:	bf00      	nop
 8006174:	efff69f3 	.word	0xefff69f3
 8006178:	40013800 	.word	0x40013800
 800617c:	40021000 	.word	0x40021000
 8006180:	40004400 	.word	0x40004400
 8006184:	40004800 	.word	0x40004800
 8006188:	007a1200 	.word	0x007a1200

0800618c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800618c:	b480      	push	{r7}
 800618e:	b083      	sub	sp, #12
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006198:	f003 0308 	and.w	r3, r3, #8
 800619c:	2b00      	cmp	r3, #0
 800619e:	d00a      	beq.n	80061b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	685b      	ldr	r3, [r3, #4]
 80061a6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	430a      	orrs	r2, r1
 80061b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061ba:	f003 0301 	and.w	r3, r3, #1
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d00a      	beq.n	80061d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	685b      	ldr	r3, [r3, #4]
 80061c8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	430a      	orrs	r2, r1
 80061d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061dc:	f003 0302 	and.w	r3, r3, #2
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d00a      	beq.n	80061fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	685b      	ldr	r3, [r3, #4]
 80061ea:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	430a      	orrs	r2, r1
 80061f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061fe:	f003 0304 	and.w	r3, r3, #4
 8006202:	2b00      	cmp	r3, #0
 8006204:	d00a      	beq.n	800621c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	685b      	ldr	r3, [r3, #4]
 800620c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	430a      	orrs	r2, r1
 800621a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006220:	f003 0310 	and.w	r3, r3, #16
 8006224:	2b00      	cmp	r3, #0
 8006226:	d00a      	beq.n	800623e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	689b      	ldr	r3, [r3, #8]
 800622e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	430a      	orrs	r2, r1
 800623c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006242:	f003 0320 	and.w	r3, r3, #32
 8006246:	2b00      	cmp	r3, #0
 8006248:	d00a      	beq.n	8006260 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	689b      	ldr	r3, [r3, #8]
 8006250:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	430a      	orrs	r2, r1
 800625e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006264:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006268:	2b00      	cmp	r3, #0
 800626a:	d01a      	beq.n	80062a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	685b      	ldr	r3, [r3, #4]
 8006272:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	430a      	orrs	r2, r1
 8006280:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006286:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800628a:	d10a      	bne.n	80062a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	685b      	ldr	r3, [r3, #4]
 8006292:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	430a      	orrs	r2, r1
 80062a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d00a      	beq.n	80062c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	685b      	ldr	r3, [r3, #4]
 80062b4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	430a      	orrs	r2, r1
 80062c2:	605a      	str	r2, [r3, #4]
  }
}
 80062c4:	bf00      	nop
 80062c6:	370c      	adds	r7, #12
 80062c8:	46bd      	mov	sp, r7
 80062ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ce:	4770      	bx	lr

080062d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b098      	sub	sp, #96	@ 0x60
 80062d4:	af02      	add	r7, sp, #8
 80062d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2200      	movs	r2, #0
 80062dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80062e0:	f7fb fdf8 	bl	8001ed4 <HAL_GetTick>
 80062e4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f003 0308 	and.w	r3, r3, #8
 80062f0:	2b08      	cmp	r3, #8
 80062f2:	d12e      	bne.n	8006352 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80062f4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80062f8:	9300      	str	r3, [sp, #0]
 80062fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80062fc:	2200      	movs	r2, #0
 80062fe:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006302:	6878      	ldr	r0, [r7, #4]
 8006304:	f000 f88c 	bl	8006420 <UART_WaitOnFlagUntilTimeout>
 8006308:	4603      	mov	r3, r0
 800630a:	2b00      	cmp	r3, #0
 800630c:	d021      	beq.n	8006352 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006314:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006316:	e853 3f00 	ldrex	r3, [r3]
 800631a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800631c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800631e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006322:	653b      	str	r3, [r7, #80]	@ 0x50
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	461a      	mov	r2, r3
 800632a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800632c:	647b      	str	r3, [r7, #68]	@ 0x44
 800632e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006330:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006332:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006334:	e841 2300 	strex	r3, r2, [r1]
 8006338:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800633a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800633c:	2b00      	cmp	r3, #0
 800633e:	d1e6      	bne.n	800630e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2220      	movs	r2, #32
 8006344:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2200      	movs	r2, #0
 800634a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800634e:	2303      	movs	r3, #3
 8006350:	e062      	b.n	8006418 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f003 0304 	and.w	r3, r3, #4
 800635c:	2b04      	cmp	r3, #4
 800635e:	d149      	bne.n	80063f4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006360:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006364:	9300      	str	r3, [sp, #0]
 8006366:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006368:	2200      	movs	r2, #0
 800636a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f000 f856 	bl	8006420 <UART_WaitOnFlagUntilTimeout>
 8006374:	4603      	mov	r3, r0
 8006376:	2b00      	cmp	r3, #0
 8006378:	d03c      	beq.n	80063f4 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006382:	e853 3f00 	ldrex	r3, [r3]
 8006386:	623b      	str	r3, [r7, #32]
   return(result);
 8006388:	6a3b      	ldr	r3, [r7, #32]
 800638a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800638e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	461a      	mov	r2, r3
 8006396:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006398:	633b      	str	r3, [r7, #48]	@ 0x30
 800639a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800639c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800639e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80063a0:	e841 2300 	strex	r3, r2, [r1]
 80063a4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80063a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d1e6      	bne.n	800637a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	3308      	adds	r3, #8
 80063b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063b4:	693b      	ldr	r3, [r7, #16]
 80063b6:	e853 3f00 	ldrex	r3, [r3]
 80063ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	f023 0301 	bic.w	r3, r3, #1
 80063c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	3308      	adds	r3, #8
 80063ca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80063cc:	61fa      	str	r2, [r7, #28]
 80063ce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063d0:	69b9      	ldr	r1, [r7, #24]
 80063d2:	69fa      	ldr	r2, [r7, #28]
 80063d4:	e841 2300 	strex	r3, r2, [r1]
 80063d8:	617b      	str	r3, [r7, #20]
   return(result);
 80063da:	697b      	ldr	r3, [r7, #20]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d1e5      	bne.n	80063ac <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2220      	movs	r2, #32
 80063e4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2200      	movs	r2, #0
 80063ec:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80063f0:	2303      	movs	r3, #3
 80063f2:	e011      	b.n	8006418 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2220      	movs	r2, #32
 80063f8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2220      	movs	r2, #32
 80063fe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2200      	movs	r2, #0
 8006406:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2200      	movs	r2, #0
 800640c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2200      	movs	r2, #0
 8006412:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006416:	2300      	movs	r3, #0
}
 8006418:	4618      	mov	r0, r3
 800641a:	3758      	adds	r7, #88	@ 0x58
 800641c:	46bd      	mov	sp, r7
 800641e:	bd80      	pop	{r7, pc}

08006420 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b084      	sub	sp, #16
 8006424:	af00      	add	r7, sp, #0
 8006426:	60f8      	str	r0, [r7, #12]
 8006428:	60b9      	str	r1, [r7, #8]
 800642a:	603b      	str	r3, [r7, #0]
 800642c:	4613      	mov	r3, r2
 800642e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006430:	e04f      	b.n	80064d2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006432:	69bb      	ldr	r3, [r7, #24]
 8006434:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006438:	d04b      	beq.n	80064d2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800643a:	f7fb fd4b 	bl	8001ed4 <HAL_GetTick>
 800643e:	4602      	mov	r2, r0
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	1ad3      	subs	r3, r2, r3
 8006444:	69ba      	ldr	r2, [r7, #24]
 8006446:	429a      	cmp	r2, r3
 8006448:	d302      	bcc.n	8006450 <UART_WaitOnFlagUntilTimeout+0x30>
 800644a:	69bb      	ldr	r3, [r7, #24]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d101      	bne.n	8006454 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006450:	2303      	movs	r3, #3
 8006452:	e04e      	b.n	80064f2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f003 0304 	and.w	r3, r3, #4
 800645e:	2b00      	cmp	r3, #0
 8006460:	d037      	beq.n	80064d2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	2b80      	cmp	r3, #128	@ 0x80
 8006466:	d034      	beq.n	80064d2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	2b40      	cmp	r3, #64	@ 0x40
 800646c:	d031      	beq.n	80064d2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	69db      	ldr	r3, [r3, #28]
 8006474:	f003 0308 	and.w	r3, r3, #8
 8006478:	2b08      	cmp	r3, #8
 800647a:	d110      	bne.n	800649e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	2208      	movs	r2, #8
 8006482:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006484:	68f8      	ldr	r0, [r7, #12]
 8006486:	f000 f838 	bl	80064fa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	2208      	movs	r2, #8
 800648e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	2200      	movs	r2, #0
 8006496:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800649a:	2301      	movs	r3, #1
 800649c:	e029      	b.n	80064f2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	69db      	ldr	r3, [r3, #28]
 80064a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80064a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80064ac:	d111      	bne.n	80064d2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80064b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80064b8:	68f8      	ldr	r0, [r7, #12]
 80064ba:	f000 f81e 	bl	80064fa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	2220      	movs	r2, #32
 80064c2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	2200      	movs	r2, #0
 80064ca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80064ce:	2303      	movs	r3, #3
 80064d0:	e00f      	b.n	80064f2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	69da      	ldr	r2, [r3, #28]
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	4013      	ands	r3, r2
 80064dc:	68ba      	ldr	r2, [r7, #8]
 80064de:	429a      	cmp	r2, r3
 80064e0:	bf0c      	ite	eq
 80064e2:	2301      	moveq	r3, #1
 80064e4:	2300      	movne	r3, #0
 80064e6:	b2db      	uxtb	r3, r3
 80064e8:	461a      	mov	r2, r3
 80064ea:	79fb      	ldrb	r3, [r7, #7]
 80064ec:	429a      	cmp	r2, r3
 80064ee:	d0a0      	beq.n	8006432 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80064f0:	2300      	movs	r3, #0
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	3710      	adds	r7, #16
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}

080064fa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80064fa:	b480      	push	{r7}
 80064fc:	b095      	sub	sp, #84	@ 0x54
 80064fe:	af00      	add	r7, sp, #0
 8006500:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006508:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800650a:	e853 3f00 	ldrex	r3, [r3]
 800650e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006510:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006512:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006516:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	461a      	mov	r2, r3
 800651e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006520:	643b      	str	r3, [r7, #64]	@ 0x40
 8006522:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006524:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006526:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006528:	e841 2300 	strex	r3, r2, [r1]
 800652c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800652e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006530:	2b00      	cmp	r3, #0
 8006532:	d1e6      	bne.n	8006502 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	3308      	adds	r3, #8
 800653a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800653c:	6a3b      	ldr	r3, [r7, #32]
 800653e:	e853 3f00 	ldrex	r3, [r3]
 8006542:	61fb      	str	r3, [r7, #28]
   return(result);
 8006544:	69fb      	ldr	r3, [r7, #28]
 8006546:	f023 0301 	bic.w	r3, r3, #1
 800654a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	3308      	adds	r3, #8
 8006552:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006554:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006556:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006558:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800655a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800655c:	e841 2300 	strex	r3, r2, [r1]
 8006560:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006564:	2b00      	cmp	r3, #0
 8006566:	d1e5      	bne.n	8006534 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800656c:	2b01      	cmp	r3, #1
 800656e:	d118      	bne.n	80065a2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	e853 3f00 	ldrex	r3, [r3]
 800657c:	60bb      	str	r3, [r7, #8]
   return(result);
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	f023 0310 	bic.w	r3, r3, #16
 8006584:	647b      	str	r3, [r7, #68]	@ 0x44
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	461a      	mov	r2, r3
 800658c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800658e:	61bb      	str	r3, [r7, #24]
 8006590:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006592:	6979      	ldr	r1, [r7, #20]
 8006594:	69ba      	ldr	r2, [r7, #24]
 8006596:	e841 2300 	strex	r3, r2, [r1]
 800659a:	613b      	str	r3, [r7, #16]
   return(result);
 800659c:	693b      	ldr	r3, [r7, #16]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d1e6      	bne.n	8006570 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2220      	movs	r2, #32
 80065a6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2200      	movs	r2, #0
 80065ae:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2200      	movs	r2, #0
 80065b4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80065b6:	bf00      	nop
 80065b8:	3754      	adds	r7, #84	@ 0x54
 80065ba:	46bd      	mov	sp, r7
 80065bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c0:	4770      	bx	lr

080065c2 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80065c2:	b480      	push	{r7}
 80065c4:	b085      	sub	sp, #20
 80065c6:	af00      	add	r7, sp, #0
 80065c8:	4603      	mov	r3, r0
 80065ca:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80065cc:	2300      	movs	r3, #0
 80065ce:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80065d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80065d4:	2b84      	cmp	r3, #132	@ 0x84
 80065d6:	d005      	beq.n	80065e4 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80065d8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	4413      	add	r3, r2
 80065e0:	3303      	adds	r3, #3
 80065e2:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80065e4:	68fb      	ldr	r3, [r7, #12]
}
 80065e6:	4618      	mov	r0, r3
 80065e8:	3714      	adds	r7, #20
 80065ea:	46bd      	mov	sp, r7
 80065ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f0:	4770      	bx	lr

080065f2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80065f2:	b580      	push	{r7, lr}
 80065f4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80065f6:	f000 fd7b 	bl	80070f0 <vTaskStartScheduler>
  
  return osOK;
 80065fa:	2300      	movs	r3, #0
}
 80065fc:	4618      	mov	r0, r3
 80065fe:	bd80      	pop	{r7, pc}

08006600 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006600:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006602:	b089      	sub	sp, #36	@ 0x24
 8006604:	af04      	add	r7, sp, #16
 8006606:	6078      	str	r0, [r7, #4]
 8006608:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	695b      	ldr	r3, [r3, #20]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d020      	beq.n	8006654 <osThreadCreate+0x54>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	699b      	ldr	r3, [r3, #24]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d01c      	beq.n	8006654 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	685c      	ldr	r4, [r3, #4]
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	691e      	ldr	r6, [r3, #16]
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800662c:	4618      	mov	r0, r3
 800662e:	f7ff ffc8 	bl	80065c2 <makeFreeRtosPriority>
 8006632:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	695b      	ldr	r3, [r3, #20]
 8006638:	687a      	ldr	r2, [r7, #4]
 800663a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800663c:	9202      	str	r2, [sp, #8]
 800663e:	9301      	str	r3, [sp, #4]
 8006640:	9100      	str	r1, [sp, #0]
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	4632      	mov	r2, r6
 8006646:	4629      	mov	r1, r5
 8006648:	4620      	mov	r0, r4
 800664a:	f000 fb8d 	bl	8006d68 <xTaskCreateStatic>
 800664e:	4603      	mov	r3, r0
 8006650:	60fb      	str	r3, [r7, #12]
 8006652:	e01c      	b.n	800668e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	685c      	ldr	r4, [r3, #4]
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006660:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006668:	4618      	mov	r0, r3
 800666a:	f7ff ffaa 	bl	80065c2 <makeFreeRtosPriority>
 800666e:	4602      	mov	r2, r0
 8006670:	f107 030c 	add.w	r3, r7, #12
 8006674:	9301      	str	r3, [sp, #4]
 8006676:	9200      	str	r2, [sp, #0]
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	4632      	mov	r2, r6
 800667c:	4629      	mov	r1, r5
 800667e:	4620      	mov	r0, r4
 8006680:	f000 fbd1 	bl	8006e26 <xTaskCreate>
 8006684:	4603      	mov	r3, r0
 8006686:	2b01      	cmp	r3, #1
 8006688:	d001      	beq.n	800668e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800668a:	2300      	movs	r3, #0
 800668c:	e000      	b.n	8006690 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800668e:	68fb      	ldr	r3, [r7, #12]
}
 8006690:	4618      	mov	r0, r3
 8006692:	3714      	adds	r7, #20
 8006694:	46bd      	mov	sp, r7
 8006696:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006698 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b084      	sub	sp, #16
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d001      	beq.n	80066ae <osDelay+0x16>
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	e000      	b.n	80066b0 <osDelay+0x18>
 80066ae:	2301      	movs	r3, #1
 80066b0:	4618      	mov	r0, r3
 80066b2:	f000 fce7 	bl	8007084 <vTaskDelay>
  
  return osOK;
 80066b6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80066b8:	4618      	mov	r0, r3
 80066ba:	3710      	adds	r7, #16
 80066bc:	46bd      	mov	sp, r7
 80066be:	bd80      	pop	{r7, pc}

080066c0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80066c0:	b480      	push	{r7}
 80066c2:	b083      	sub	sp, #12
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	f103 0208 	add.w	r2, r3, #8
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	f04f 32ff 	mov.w	r2, #4294967295
 80066d8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	f103 0208 	add.w	r2, r3, #8
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	f103 0208 	add.w	r2, r3, #8
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2200      	movs	r2, #0
 80066f2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80066f4:	bf00      	nop
 80066f6:	370c      	adds	r7, #12
 80066f8:	46bd      	mov	sp, r7
 80066fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fe:	4770      	bx	lr

08006700 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006700:	b480      	push	{r7}
 8006702:	b083      	sub	sp, #12
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2200      	movs	r2, #0
 800670c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800670e:	bf00      	nop
 8006710:	370c      	adds	r7, #12
 8006712:	46bd      	mov	sp, r7
 8006714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006718:	4770      	bx	lr

0800671a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800671a:	b480      	push	{r7}
 800671c:	b085      	sub	sp, #20
 800671e:	af00      	add	r7, sp, #0
 8006720:	6078      	str	r0, [r7, #4]
 8006722:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	685b      	ldr	r3, [r3, #4]
 8006728:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	68fa      	ldr	r2, [r7, #12]
 800672e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	689a      	ldr	r2, [r3, #8]
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	689b      	ldr	r3, [r3, #8]
 800673c:	683a      	ldr	r2, [r7, #0]
 800673e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	683a      	ldr	r2, [r7, #0]
 8006744:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	687a      	ldr	r2, [r7, #4]
 800674a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	1c5a      	adds	r2, r3, #1
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	601a      	str	r2, [r3, #0]
}
 8006756:	bf00      	nop
 8006758:	3714      	adds	r7, #20
 800675a:	46bd      	mov	sp, r7
 800675c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006760:	4770      	bx	lr

08006762 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006762:	b480      	push	{r7}
 8006764:	b085      	sub	sp, #20
 8006766:	af00      	add	r7, sp, #0
 8006768:	6078      	str	r0, [r7, #4]
 800676a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006778:	d103      	bne.n	8006782 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	691b      	ldr	r3, [r3, #16]
 800677e:	60fb      	str	r3, [r7, #12]
 8006780:	e00c      	b.n	800679c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	3308      	adds	r3, #8
 8006786:	60fb      	str	r3, [r7, #12]
 8006788:	e002      	b.n	8006790 <vListInsert+0x2e>
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	60fb      	str	r3, [r7, #12]
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	685b      	ldr	r3, [r3, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	68ba      	ldr	r2, [r7, #8]
 8006798:	429a      	cmp	r2, r3
 800679a:	d2f6      	bcs.n	800678a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	685a      	ldr	r2, [r3, #4]
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	685b      	ldr	r3, [r3, #4]
 80067a8:	683a      	ldr	r2, [r7, #0]
 80067aa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	68fa      	ldr	r2, [r7, #12]
 80067b0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	683a      	ldr	r2, [r7, #0]
 80067b6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	687a      	ldr	r2, [r7, #4]
 80067bc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	1c5a      	adds	r2, r3, #1
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	601a      	str	r2, [r3, #0]
}
 80067c8:	bf00      	nop
 80067ca:	3714      	adds	r7, #20
 80067cc:	46bd      	mov	sp, r7
 80067ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d2:	4770      	bx	lr

080067d4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80067d4:	b480      	push	{r7}
 80067d6:	b085      	sub	sp, #20
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	691b      	ldr	r3, [r3, #16]
 80067e0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	685b      	ldr	r3, [r3, #4]
 80067e6:	687a      	ldr	r2, [r7, #4]
 80067e8:	6892      	ldr	r2, [r2, #8]
 80067ea:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	689b      	ldr	r3, [r3, #8]
 80067f0:	687a      	ldr	r2, [r7, #4]
 80067f2:	6852      	ldr	r2, [r2, #4]
 80067f4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	685b      	ldr	r3, [r3, #4]
 80067fa:	687a      	ldr	r2, [r7, #4]
 80067fc:	429a      	cmp	r2, r3
 80067fe:	d103      	bne.n	8006808 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	689a      	ldr	r2, [r3, #8]
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2200      	movs	r2, #0
 800680c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	1e5a      	subs	r2, r3, #1
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
}
 800681c:	4618      	mov	r0, r3
 800681e:	3714      	adds	r7, #20
 8006820:	46bd      	mov	sp, r7
 8006822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006826:	4770      	bx	lr

08006828 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b084      	sub	sp, #16
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
 8006830:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d10b      	bne.n	8006854 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800683c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006840:	f383 8811 	msr	BASEPRI, r3
 8006844:	f3bf 8f6f 	isb	sy
 8006848:	f3bf 8f4f 	dsb	sy
 800684c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800684e:	bf00      	nop
 8006850:	bf00      	nop
 8006852:	e7fd      	b.n	8006850 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006854:	f001 f9d0 	bl	8007bf8 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681a      	ldr	r2, [r3, #0]
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006860:	68f9      	ldr	r1, [r7, #12]
 8006862:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006864:	fb01 f303 	mul.w	r3, r1, r3
 8006868:	441a      	add	r2, r3
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	2200      	movs	r2, #0
 8006872:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681a      	ldr	r2, [r3, #0]
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681a      	ldr	r2, [r3, #0]
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006884:	3b01      	subs	r3, #1
 8006886:	68f9      	ldr	r1, [r7, #12]
 8006888:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800688a:	fb01 f303 	mul.w	r3, r1, r3
 800688e:	441a      	add	r2, r3
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	22ff      	movs	r2, #255	@ 0xff
 8006898:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	22ff      	movs	r2, #255	@ 0xff
 80068a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d114      	bne.n	80068d4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	691b      	ldr	r3, [r3, #16]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d01a      	beq.n	80068e8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	3310      	adds	r3, #16
 80068b6:	4618      	mov	r0, r3
 80068b8:	f000 fe42 	bl	8007540 <xTaskRemoveFromEventList>
 80068bc:	4603      	mov	r3, r0
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d012      	beq.n	80068e8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80068c2:	4b0d      	ldr	r3, [pc, #52]	@ (80068f8 <xQueueGenericReset+0xd0>)
 80068c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80068c8:	601a      	str	r2, [r3, #0]
 80068ca:	f3bf 8f4f 	dsb	sy
 80068ce:	f3bf 8f6f 	isb	sy
 80068d2:	e009      	b.n	80068e8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	3310      	adds	r3, #16
 80068d8:	4618      	mov	r0, r3
 80068da:	f7ff fef1 	bl	80066c0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	3324      	adds	r3, #36	@ 0x24
 80068e2:	4618      	mov	r0, r3
 80068e4:	f7ff feec 	bl	80066c0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80068e8:	f001 f9b8 	bl	8007c5c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80068ec:	2301      	movs	r3, #1
}
 80068ee:	4618      	mov	r0, r3
 80068f0:	3710      	adds	r7, #16
 80068f2:	46bd      	mov	sp, r7
 80068f4:	bd80      	pop	{r7, pc}
 80068f6:	bf00      	nop
 80068f8:	e000ed04 	.word	0xe000ed04

080068fc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b08a      	sub	sp, #40	@ 0x28
 8006900:	af02      	add	r7, sp, #8
 8006902:	60f8      	str	r0, [r7, #12]
 8006904:	60b9      	str	r1, [r7, #8]
 8006906:	4613      	mov	r3, r2
 8006908:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d10b      	bne.n	8006928 <xQueueGenericCreate+0x2c>
	__asm volatile
 8006910:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006914:	f383 8811 	msr	BASEPRI, r3
 8006918:	f3bf 8f6f 	isb	sy
 800691c:	f3bf 8f4f 	dsb	sy
 8006920:	613b      	str	r3, [r7, #16]
}
 8006922:	bf00      	nop
 8006924:	bf00      	nop
 8006926:	e7fd      	b.n	8006924 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d102      	bne.n	8006934 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800692e:	2300      	movs	r3, #0
 8006930:	61fb      	str	r3, [r7, #28]
 8006932:	e004      	b.n	800693e <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	68ba      	ldr	r2, [r7, #8]
 8006938:	fb02 f303 	mul.w	r3, r2, r3
 800693c:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800693e:	69fb      	ldr	r3, [r7, #28]
 8006940:	3348      	adds	r3, #72	@ 0x48
 8006942:	4618      	mov	r0, r3
 8006944:	f001 fa7a 	bl	8007e3c <pvPortMalloc>
 8006948:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800694a:	69bb      	ldr	r3, [r7, #24]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d00f      	beq.n	8006970 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8006950:	69bb      	ldr	r3, [r7, #24]
 8006952:	3348      	adds	r3, #72	@ 0x48
 8006954:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006956:	69bb      	ldr	r3, [r7, #24]
 8006958:	2200      	movs	r2, #0
 800695a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800695e:	79fa      	ldrb	r2, [r7, #7]
 8006960:	69bb      	ldr	r3, [r7, #24]
 8006962:	9300      	str	r3, [sp, #0]
 8006964:	4613      	mov	r3, r2
 8006966:	697a      	ldr	r2, [r7, #20]
 8006968:	68b9      	ldr	r1, [r7, #8]
 800696a:	68f8      	ldr	r0, [r7, #12]
 800696c:	f000 f805 	bl	800697a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8006970:	69bb      	ldr	r3, [r7, #24]
	}
 8006972:	4618      	mov	r0, r3
 8006974:	3720      	adds	r7, #32
 8006976:	46bd      	mov	sp, r7
 8006978:	bd80      	pop	{r7, pc}

0800697a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800697a:	b580      	push	{r7, lr}
 800697c:	b084      	sub	sp, #16
 800697e:	af00      	add	r7, sp, #0
 8006980:	60f8      	str	r0, [r7, #12]
 8006982:	60b9      	str	r1, [r7, #8]
 8006984:	607a      	str	r2, [r7, #4]
 8006986:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006988:	68bb      	ldr	r3, [r7, #8]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d103      	bne.n	8006996 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800698e:	69bb      	ldr	r3, [r7, #24]
 8006990:	69ba      	ldr	r2, [r7, #24]
 8006992:	601a      	str	r2, [r3, #0]
 8006994:	e002      	b.n	800699c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006996:	69bb      	ldr	r3, [r7, #24]
 8006998:	687a      	ldr	r2, [r7, #4]
 800699a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800699c:	69bb      	ldr	r3, [r7, #24]
 800699e:	68fa      	ldr	r2, [r7, #12]
 80069a0:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80069a2:	69bb      	ldr	r3, [r7, #24]
 80069a4:	68ba      	ldr	r2, [r7, #8]
 80069a6:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80069a8:	2101      	movs	r1, #1
 80069aa:	69b8      	ldr	r0, [r7, #24]
 80069ac:	f7ff ff3c 	bl	8006828 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80069b0:	bf00      	nop
 80069b2:	3710      	adds	r7, #16
 80069b4:	46bd      	mov	sp, r7
 80069b6:	bd80      	pop	{r7, pc}

080069b8 <xQueueGenericSendFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b08e      	sub	sp, #56	@ 0x38
 80069bc:	af00      	add	r7, sp, #0
 80069be:	60f8      	str	r0, [r7, #12]
 80069c0:	60b9      	str	r1, [r7, #8]
 80069c2:	607a      	str	r2, [r7, #4]
 80069c4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80069ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d10b      	bne.n	80069e8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80069d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069d4:	f383 8811 	msr	BASEPRI, r3
 80069d8:	f3bf 8f6f 	isb	sy
 80069dc:	f3bf 8f4f 	dsb	sy
 80069e0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80069e2:	bf00      	nop
 80069e4:	bf00      	nop
 80069e6:	e7fd      	b.n	80069e4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d103      	bne.n	80069f6 <xQueueGenericSendFromISR+0x3e>
 80069ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d101      	bne.n	80069fa <xQueueGenericSendFromISR+0x42>
 80069f6:	2301      	movs	r3, #1
 80069f8:	e000      	b.n	80069fc <xQueueGenericSendFromISR+0x44>
 80069fa:	2300      	movs	r3, #0
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d10b      	bne.n	8006a18 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8006a00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a04:	f383 8811 	msr	BASEPRI, r3
 8006a08:	f3bf 8f6f 	isb	sy
 8006a0c:	f3bf 8f4f 	dsb	sy
 8006a10:	623b      	str	r3, [r7, #32]
}
 8006a12:	bf00      	nop
 8006a14:	bf00      	nop
 8006a16:	e7fd      	b.n	8006a14 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	2b02      	cmp	r3, #2
 8006a1c:	d103      	bne.n	8006a26 <xQueueGenericSendFromISR+0x6e>
 8006a1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a22:	2b01      	cmp	r3, #1
 8006a24:	d101      	bne.n	8006a2a <xQueueGenericSendFromISR+0x72>
 8006a26:	2301      	movs	r3, #1
 8006a28:	e000      	b.n	8006a2c <xQueueGenericSendFromISR+0x74>
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d10b      	bne.n	8006a48 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8006a30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a34:	f383 8811 	msr	BASEPRI, r3
 8006a38:	f3bf 8f6f 	isb	sy
 8006a3c:	f3bf 8f4f 	dsb	sy
 8006a40:	61fb      	str	r3, [r7, #28]
}
 8006a42:	bf00      	nop
 8006a44:	bf00      	nop
 8006a46:	e7fd      	b.n	8006a44 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006a48:	f001 f9b6 	bl	8007db8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006a4c:	f3ef 8211 	mrs	r2, BASEPRI
 8006a50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a54:	f383 8811 	msr	BASEPRI, r3
 8006a58:	f3bf 8f6f 	isb	sy
 8006a5c:	f3bf 8f4f 	dsb	sy
 8006a60:	61ba      	str	r2, [r7, #24]
 8006a62:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006a64:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006a66:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006a68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a6a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006a6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a70:	429a      	cmp	r2, r3
 8006a72:	d302      	bcc.n	8006a7a <xQueueGenericSendFromISR+0xc2>
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	2b02      	cmp	r3, #2
 8006a78:	d12c      	bne.n	8006ad4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006a7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a7c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006a80:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006a84:	683a      	ldr	r2, [r7, #0]
 8006a86:	68b9      	ldr	r1, [r7, #8]
 8006a88:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006a8a:	f000 f8b2 	bl	8006bf2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006a8e:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8006a92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a96:	d112      	bne.n	8006abe <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006a98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d016      	beq.n	8006ace <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006aa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aa2:	3324      	adds	r3, #36	@ 0x24
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	f000 fd4b 	bl	8007540 <xTaskRemoveFromEventList>
 8006aaa:	4603      	mov	r3, r0
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d00e      	beq.n	8006ace <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d00b      	beq.n	8006ace <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2201      	movs	r2, #1
 8006aba:	601a      	str	r2, [r3, #0]
 8006abc:	e007      	b.n	8006ace <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006abe:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006ac2:	3301      	adds	r3, #1
 8006ac4:	b2db      	uxtb	r3, r3
 8006ac6:	b25a      	sxtb	r2, r3
 8006ac8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006ace:	2301      	movs	r3, #1
 8006ad0:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8006ad2:	e001      	b.n	8006ad8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ad8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ada:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006adc:	693b      	ldr	r3, [r7, #16]
 8006ade:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006ae2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006ae4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	3738      	adds	r7, #56	@ 0x38
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bd80      	pop	{r7, pc}

08006aee <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006aee:	b580      	push	{r7, lr}
 8006af0:	b08e      	sub	sp, #56	@ 0x38
 8006af2:	af00      	add	r7, sp, #0
 8006af4:	60f8      	str	r0, [r7, #12]
 8006af6:	60b9      	str	r1, [r7, #8]
 8006af8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006afe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d10b      	bne.n	8006b1c <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8006b04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b08:	f383 8811 	msr	BASEPRI, r3
 8006b0c:	f3bf 8f6f 	isb	sy
 8006b10:	f3bf 8f4f 	dsb	sy
 8006b14:	623b      	str	r3, [r7, #32]
}
 8006b16:	bf00      	nop
 8006b18:	bf00      	nop
 8006b1a:	e7fd      	b.n	8006b18 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d103      	bne.n	8006b2a <xQueueReceiveFromISR+0x3c>
 8006b22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d101      	bne.n	8006b2e <xQueueReceiveFromISR+0x40>
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	e000      	b.n	8006b30 <xQueueReceiveFromISR+0x42>
 8006b2e:	2300      	movs	r3, #0
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d10b      	bne.n	8006b4c <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8006b34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b38:	f383 8811 	msr	BASEPRI, r3
 8006b3c:	f3bf 8f6f 	isb	sy
 8006b40:	f3bf 8f4f 	dsb	sy
 8006b44:	61fb      	str	r3, [r7, #28]
}
 8006b46:	bf00      	nop
 8006b48:	bf00      	nop
 8006b4a:	e7fd      	b.n	8006b48 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006b4c:	f001 f934 	bl	8007db8 <vPortValidateInterruptPriority>
	__asm volatile
 8006b50:	f3ef 8211 	mrs	r2, BASEPRI
 8006b54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b58:	f383 8811 	msr	BASEPRI, r3
 8006b5c:	f3bf 8f6f 	isb	sy
 8006b60:	f3bf 8f4f 	dsb	sy
 8006b64:	61ba      	str	r2, [r7, #24]
 8006b66:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006b68:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006b6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006b6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b70:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006b72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d02f      	beq.n	8006bd8 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006b78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b7a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006b7e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006b82:	68b9      	ldr	r1, [r7, #8]
 8006b84:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006b86:	f000 f89e 	bl	8006cc6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006b8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b8c:	1e5a      	subs	r2, r3, #1
 8006b8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b90:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006b92:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006b96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b9a:	d112      	bne.n	8006bc2 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006b9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b9e:	691b      	ldr	r3, [r3, #16]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d016      	beq.n	8006bd2 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006ba4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ba6:	3310      	adds	r3, #16
 8006ba8:	4618      	mov	r0, r3
 8006baa:	f000 fcc9 	bl	8007540 <xTaskRemoveFromEventList>
 8006bae:	4603      	mov	r3, r0
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d00e      	beq.n	8006bd2 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d00b      	beq.n	8006bd2 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2201      	movs	r2, #1
 8006bbe:	601a      	str	r2, [r3, #0]
 8006bc0:	e007      	b.n	8006bd2 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006bc2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006bc6:	3301      	adds	r3, #1
 8006bc8:	b2db      	uxtb	r3, r3
 8006bca:	b25a      	sxtb	r2, r3
 8006bcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bce:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	637b      	str	r3, [r7, #52]	@ 0x34
 8006bd6:	e001      	b.n	8006bdc <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8006bd8:	2300      	movs	r3, #0
 8006bda:	637b      	str	r3, [r7, #52]	@ 0x34
 8006bdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bde:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006be0:	693b      	ldr	r3, [r7, #16]
 8006be2:	f383 8811 	msr	BASEPRI, r3
}
 8006be6:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006be8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006bea:	4618      	mov	r0, r3
 8006bec:	3738      	adds	r7, #56	@ 0x38
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bd80      	pop	{r7, pc}

08006bf2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006bf2:	b580      	push	{r7, lr}
 8006bf4:	b086      	sub	sp, #24
 8006bf6:	af00      	add	r7, sp, #0
 8006bf8:	60f8      	str	r0, [r7, #12]
 8006bfa:	60b9      	str	r1, [r7, #8]
 8006bfc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006bfe:	2300      	movs	r3, #0
 8006c00:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c06:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d10d      	bne.n	8006c2c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d14d      	bne.n	8006cb4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	685b      	ldr	r3, [r3, #4]
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	f000 fdcf 	bl	80077c0 <xTaskPriorityDisinherit>
 8006c22:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	2200      	movs	r2, #0
 8006c28:	605a      	str	r2, [r3, #4]
 8006c2a:	e043      	b.n	8006cb4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d119      	bne.n	8006c66 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	6898      	ldr	r0, [r3, #8]
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c3a:	461a      	mov	r2, r3
 8006c3c:	68b9      	ldr	r1, [r7, #8]
 8006c3e:	f002 f8ee 	bl	8008e1e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	689a      	ldr	r2, [r3, #8]
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c4a:	441a      	add	r2, r3
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	689a      	ldr	r2, [r3, #8]
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	685b      	ldr	r3, [r3, #4]
 8006c58:	429a      	cmp	r2, r3
 8006c5a:	d32b      	bcc.n	8006cb4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681a      	ldr	r2, [r3, #0]
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	609a      	str	r2, [r3, #8]
 8006c64:	e026      	b.n	8006cb4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	68d8      	ldr	r0, [r3, #12]
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c6e:	461a      	mov	r2, r3
 8006c70:	68b9      	ldr	r1, [r7, #8]
 8006c72:	f002 f8d4 	bl	8008e1e <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	68da      	ldr	r2, [r3, #12]
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c7e:	425b      	negs	r3, r3
 8006c80:	441a      	add	r2, r3
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	68da      	ldr	r2, [r3, #12]
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	429a      	cmp	r2, r3
 8006c90:	d207      	bcs.n	8006ca2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	685a      	ldr	r2, [r3, #4]
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c9a:	425b      	negs	r3, r3
 8006c9c:	441a      	add	r2, r3
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2b02      	cmp	r3, #2
 8006ca6:	d105      	bne.n	8006cb4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006ca8:	693b      	ldr	r3, [r7, #16]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d002      	beq.n	8006cb4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006cae:	693b      	ldr	r3, [r7, #16]
 8006cb0:	3b01      	subs	r3, #1
 8006cb2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006cb4:	693b      	ldr	r3, [r7, #16]
 8006cb6:	1c5a      	adds	r2, r3, #1
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8006cbc:	697b      	ldr	r3, [r7, #20]
}
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	3718      	adds	r7, #24
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bd80      	pop	{r7, pc}

08006cc6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006cc6:	b580      	push	{r7, lr}
 8006cc8:	b082      	sub	sp, #8
 8006cca:	af00      	add	r7, sp, #0
 8006ccc:	6078      	str	r0, [r7, #4]
 8006cce:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d018      	beq.n	8006d0a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	68da      	ldr	r2, [r3, #12]
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ce0:	441a      	add	r2, r3
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	68da      	ldr	r2, [r3, #12]
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	685b      	ldr	r3, [r3, #4]
 8006cee:	429a      	cmp	r2, r3
 8006cf0:	d303      	bcc.n	8006cfa <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681a      	ldr	r2, [r3, #0]
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	68d9      	ldr	r1, [r3, #12]
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d02:	461a      	mov	r2, r3
 8006d04:	6838      	ldr	r0, [r7, #0]
 8006d06:	f002 f88a 	bl	8008e1e <memcpy>
	}
}
 8006d0a:	bf00      	nop
 8006d0c:	3708      	adds	r7, #8
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bd80      	pop	{r7, pc}
	...

08006d14 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006d14:	b480      	push	{r7}
 8006d16:	b085      	sub	sp, #20
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
 8006d1c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006d1e:	2300      	movs	r3, #0
 8006d20:	60fb      	str	r3, [r7, #12]
 8006d22:	e014      	b.n	8006d4e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006d24:	4a0f      	ldr	r2, [pc, #60]	@ (8006d64 <vQueueAddToRegistry+0x50>)
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d10b      	bne.n	8006d48 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006d30:	490c      	ldr	r1, [pc, #48]	@ (8006d64 <vQueueAddToRegistry+0x50>)
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	683a      	ldr	r2, [r7, #0]
 8006d36:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006d3a:	4a0a      	ldr	r2, [pc, #40]	@ (8006d64 <vQueueAddToRegistry+0x50>)
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	00db      	lsls	r3, r3, #3
 8006d40:	4413      	add	r3, r2
 8006d42:	687a      	ldr	r2, [r7, #4]
 8006d44:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006d46:	e006      	b.n	8006d56 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	3301      	adds	r3, #1
 8006d4c:	60fb      	str	r3, [r7, #12]
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	2b07      	cmp	r3, #7
 8006d52:	d9e7      	bls.n	8006d24 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006d54:	bf00      	nop
 8006d56:	bf00      	nop
 8006d58:	3714      	adds	r7, #20
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d60:	4770      	bx	lr
 8006d62:	bf00      	nop
 8006d64:	200006ac 	.word	0x200006ac

08006d68 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b08e      	sub	sp, #56	@ 0x38
 8006d6c:	af04      	add	r7, sp, #16
 8006d6e:	60f8      	str	r0, [r7, #12]
 8006d70:	60b9      	str	r1, [r7, #8]
 8006d72:	607a      	str	r2, [r7, #4]
 8006d74:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006d76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d10b      	bne.n	8006d94 <xTaskCreateStatic+0x2c>
	__asm volatile
 8006d7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d80:	f383 8811 	msr	BASEPRI, r3
 8006d84:	f3bf 8f6f 	isb	sy
 8006d88:	f3bf 8f4f 	dsb	sy
 8006d8c:	623b      	str	r3, [r7, #32]
}
 8006d8e:	bf00      	nop
 8006d90:	bf00      	nop
 8006d92:	e7fd      	b.n	8006d90 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006d94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d10b      	bne.n	8006db2 <xTaskCreateStatic+0x4a>
	__asm volatile
 8006d9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d9e:	f383 8811 	msr	BASEPRI, r3
 8006da2:	f3bf 8f6f 	isb	sy
 8006da6:	f3bf 8f4f 	dsb	sy
 8006daa:	61fb      	str	r3, [r7, #28]
}
 8006dac:	bf00      	nop
 8006dae:	bf00      	nop
 8006db0:	e7fd      	b.n	8006dae <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006db2:	2354      	movs	r3, #84	@ 0x54
 8006db4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006db6:	693b      	ldr	r3, [r7, #16]
 8006db8:	2b54      	cmp	r3, #84	@ 0x54
 8006dba:	d00b      	beq.n	8006dd4 <xTaskCreateStatic+0x6c>
	__asm volatile
 8006dbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dc0:	f383 8811 	msr	BASEPRI, r3
 8006dc4:	f3bf 8f6f 	isb	sy
 8006dc8:	f3bf 8f4f 	dsb	sy
 8006dcc:	61bb      	str	r3, [r7, #24]
}
 8006dce:	bf00      	nop
 8006dd0:	bf00      	nop
 8006dd2:	e7fd      	b.n	8006dd0 <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006dd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d01e      	beq.n	8006e18 <xTaskCreateStatic+0xb0>
 8006dda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d01b      	beq.n	8006e18 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006de0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006de2:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006de6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006de8:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dec:	2202      	movs	r2, #2
 8006dee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006df2:	2300      	movs	r3, #0
 8006df4:	9303      	str	r3, [sp, #12]
 8006df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006df8:	9302      	str	r3, [sp, #8]
 8006dfa:	f107 0314 	add.w	r3, r7, #20
 8006dfe:	9301      	str	r3, [sp, #4]
 8006e00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e02:	9300      	str	r3, [sp, #0]
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	687a      	ldr	r2, [r7, #4]
 8006e08:	68b9      	ldr	r1, [r7, #8]
 8006e0a:	68f8      	ldr	r0, [r7, #12]
 8006e0c:	f000 f850 	bl	8006eb0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006e10:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006e12:	f000 f8cd 	bl	8006fb0 <prvAddNewTaskToReadyList>
 8006e16:	e001      	b.n	8006e1c <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 8006e18:	2300      	movs	r3, #0
 8006e1a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006e1c:	697b      	ldr	r3, [r7, #20]
	}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	3728      	adds	r7, #40	@ 0x28
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}

08006e26 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006e26:	b580      	push	{r7, lr}
 8006e28:	b08c      	sub	sp, #48	@ 0x30
 8006e2a:	af04      	add	r7, sp, #16
 8006e2c:	60f8      	str	r0, [r7, #12]
 8006e2e:	60b9      	str	r1, [r7, #8]
 8006e30:	603b      	str	r3, [r7, #0]
 8006e32:	4613      	mov	r3, r2
 8006e34:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e36:	88fb      	ldrh	r3, [r7, #6]
 8006e38:	009b      	lsls	r3, r3, #2
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	f000 fffe 	bl	8007e3c <pvPortMalloc>
 8006e40:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006e42:	697b      	ldr	r3, [r7, #20]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d00e      	beq.n	8006e66 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8006e48:	2054      	movs	r0, #84	@ 0x54
 8006e4a:	f000 fff7 	bl	8007e3c <pvPortMalloc>
 8006e4e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006e50:	69fb      	ldr	r3, [r7, #28]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d003      	beq.n	8006e5e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006e56:	69fb      	ldr	r3, [r7, #28]
 8006e58:	697a      	ldr	r2, [r7, #20]
 8006e5a:	631a      	str	r2, [r3, #48]	@ 0x30
 8006e5c:	e005      	b.n	8006e6a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006e5e:	6978      	ldr	r0, [r7, #20]
 8006e60:	f001 f8b4 	bl	8007fcc <vPortFree>
 8006e64:	e001      	b.n	8006e6a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006e66:	2300      	movs	r3, #0
 8006e68:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006e6a:	69fb      	ldr	r3, [r7, #28]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d017      	beq.n	8006ea0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006e70:	69fb      	ldr	r3, [r7, #28]
 8006e72:	2200      	movs	r2, #0
 8006e74:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006e78:	88fa      	ldrh	r2, [r7, #6]
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	9303      	str	r3, [sp, #12]
 8006e7e:	69fb      	ldr	r3, [r7, #28]
 8006e80:	9302      	str	r3, [sp, #8]
 8006e82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e84:	9301      	str	r3, [sp, #4]
 8006e86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e88:	9300      	str	r3, [sp, #0]
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	68b9      	ldr	r1, [r7, #8]
 8006e8e:	68f8      	ldr	r0, [r7, #12]
 8006e90:	f000 f80e 	bl	8006eb0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006e94:	69f8      	ldr	r0, [r7, #28]
 8006e96:	f000 f88b 	bl	8006fb0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006e9a:	2301      	movs	r3, #1
 8006e9c:	61bb      	str	r3, [r7, #24]
 8006e9e:	e002      	b.n	8006ea6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006ea0:	f04f 33ff 	mov.w	r3, #4294967295
 8006ea4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006ea6:	69bb      	ldr	r3, [r7, #24]
	}
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	3720      	adds	r7, #32
 8006eac:	46bd      	mov	sp, r7
 8006eae:	bd80      	pop	{r7, pc}

08006eb0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b088      	sub	sp, #32
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	60f8      	str	r0, [r7, #12]
 8006eb8:	60b9      	str	r1, [r7, #8]
 8006eba:	607a      	str	r2, [r7, #4]
 8006ebc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8006ebe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ec0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006ec8:	3b01      	subs	r3, #1
 8006eca:	009b      	lsls	r3, r3, #2
 8006ecc:	4413      	add	r3, r2
 8006ece:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8006ed0:	69bb      	ldr	r3, [r7, #24]
 8006ed2:	f023 0307 	bic.w	r3, r3, #7
 8006ed6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006ed8:	69bb      	ldr	r3, [r7, #24]
 8006eda:	f003 0307 	and.w	r3, r3, #7
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d00b      	beq.n	8006efa <prvInitialiseNewTask+0x4a>
	__asm volatile
 8006ee2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ee6:	f383 8811 	msr	BASEPRI, r3
 8006eea:	f3bf 8f6f 	isb	sy
 8006eee:	f3bf 8f4f 	dsb	sy
 8006ef2:	617b      	str	r3, [r7, #20]
}
 8006ef4:	bf00      	nop
 8006ef6:	bf00      	nop
 8006ef8:	e7fd      	b.n	8006ef6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006efa:	2300      	movs	r3, #0
 8006efc:	61fb      	str	r3, [r7, #28]
 8006efe:	e012      	b.n	8006f26 <prvInitialiseNewTask+0x76>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006f00:	68ba      	ldr	r2, [r7, #8]
 8006f02:	69fb      	ldr	r3, [r7, #28]
 8006f04:	4413      	add	r3, r2
 8006f06:	7819      	ldrb	r1, [r3, #0]
 8006f08:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f0a:	69fb      	ldr	r3, [r7, #28]
 8006f0c:	4413      	add	r3, r2
 8006f0e:	3334      	adds	r3, #52	@ 0x34
 8006f10:	460a      	mov	r2, r1
 8006f12:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8006f14:	68ba      	ldr	r2, [r7, #8]
 8006f16:	69fb      	ldr	r3, [r7, #28]
 8006f18:	4413      	add	r3, r2
 8006f1a:	781b      	ldrb	r3, [r3, #0]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d006      	beq.n	8006f2e <prvInitialiseNewTask+0x7e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006f20:	69fb      	ldr	r3, [r7, #28]
 8006f22:	3301      	adds	r3, #1
 8006f24:	61fb      	str	r3, [r7, #28]
 8006f26:	69fb      	ldr	r3, [r7, #28]
 8006f28:	2b0f      	cmp	r3, #15
 8006f2a:	d9e9      	bls.n	8006f00 <prvInitialiseNewTask+0x50>
 8006f2c:	e000      	b.n	8006f30 <prvInitialiseNewTask+0x80>
		{
			break;
 8006f2e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006f30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f32:	2200      	movs	r2, #0
 8006f34:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006f38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f3a:	2b06      	cmp	r3, #6
 8006f3c:	d901      	bls.n	8006f42 <prvInitialiseNewTask+0x92>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006f3e:	2306      	movs	r3, #6
 8006f40:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006f42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f44:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006f46:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006f48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f4a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006f4c:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006f4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f50:	2200      	movs	r2, #0
 8006f52:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006f54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f56:	3304      	adds	r3, #4
 8006f58:	4618      	mov	r0, r3
 8006f5a:	f7ff fbd1 	bl	8006700 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006f5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f60:	3318      	adds	r3, #24
 8006f62:	4618      	mov	r0, r3
 8006f64:	f7ff fbcc 	bl	8006700 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006f68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f6c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f70:	f1c3 0207 	rsb	r2, r3, #7
 8006f74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f76:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006f78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f7a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f7c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006f7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f80:	2200      	movs	r2, #0
 8006f82:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006f84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f86:	2200      	movs	r2, #0
 8006f88:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006f8c:	683a      	ldr	r2, [r7, #0]
 8006f8e:	68f9      	ldr	r1, [r7, #12]
 8006f90:	69b8      	ldr	r0, [r7, #24]
 8006f92:	f000 fd03 	bl	800799c <pxPortInitialiseStack>
 8006f96:	4602      	mov	r2, r0
 8006f98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f9a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8006f9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d002      	beq.n	8006fa8 <prvInitialiseNewTask+0xf8>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006fa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fa4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006fa6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006fa8:	bf00      	nop
 8006faa:	3720      	adds	r7, #32
 8006fac:	46bd      	mov	sp, r7
 8006fae:	bd80      	pop	{r7, pc}

08006fb0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b082      	sub	sp, #8
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006fb8:	f000 fe1e 	bl	8007bf8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006fbc:	4b2a      	ldr	r3, [pc, #168]	@ (8007068 <prvAddNewTaskToReadyList+0xb8>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	3301      	adds	r3, #1
 8006fc2:	4a29      	ldr	r2, [pc, #164]	@ (8007068 <prvAddNewTaskToReadyList+0xb8>)
 8006fc4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006fc6:	4b29      	ldr	r3, [pc, #164]	@ (800706c <prvAddNewTaskToReadyList+0xbc>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d109      	bne.n	8006fe2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006fce:	4a27      	ldr	r2, [pc, #156]	@ (800706c <prvAddNewTaskToReadyList+0xbc>)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006fd4:	4b24      	ldr	r3, [pc, #144]	@ (8007068 <prvAddNewTaskToReadyList+0xb8>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	2b01      	cmp	r3, #1
 8006fda:	d110      	bne.n	8006ffe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006fdc:	f000 fb2c 	bl	8007638 <prvInitialiseTaskLists>
 8006fe0:	e00d      	b.n	8006ffe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006fe2:	4b23      	ldr	r3, [pc, #140]	@ (8007070 <prvAddNewTaskToReadyList+0xc0>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d109      	bne.n	8006ffe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006fea:	4b20      	ldr	r3, [pc, #128]	@ (800706c <prvAddNewTaskToReadyList+0xbc>)
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ff4:	429a      	cmp	r2, r3
 8006ff6:	d802      	bhi.n	8006ffe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006ff8:	4a1c      	ldr	r2, [pc, #112]	@ (800706c <prvAddNewTaskToReadyList+0xbc>)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006ffe:	4b1d      	ldr	r3, [pc, #116]	@ (8007074 <prvAddNewTaskToReadyList+0xc4>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	3301      	adds	r3, #1
 8007004:	4a1b      	ldr	r2, [pc, #108]	@ (8007074 <prvAddNewTaskToReadyList+0xc4>)
 8007006:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800700c:	2201      	movs	r2, #1
 800700e:	409a      	lsls	r2, r3
 8007010:	4b19      	ldr	r3, [pc, #100]	@ (8007078 <prvAddNewTaskToReadyList+0xc8>)
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	4313      	orrs	r3, r2
 8007016:	4a18      	ldr	r2, [pc, #96]	@ (8007078 <prvAddNewTaskToReadyList+0xc8>)
 8007018:	6013      	str	r3, [r2, #0]
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800701e:	4613      	mov	r3, r2
 8007020:	009b      	lsls	r3, r3, #2
 8007022:	4413      	add	r3, r2
 8007024:	009b      	lsls	r3, r3, #2
 8007026:	4a15      	ldr	r2, [pc, #84]	@ (800707c <prvAddNewTaskToReadyList+0xcc>)
 8007028:	441a      	add	r2, r3
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	3304      	adds	r3, #4
 800702e:	4619      	mov	r1, r3
 8007030:	4610      	mov	r0, r2
 8007032:	f7ff fb72 	bl	800671a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007036:	f000 fe11 	bl	8007c5c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800703a:	4b0d      	ldr	r3, [pc, #52]	@ (8007070 <prvAddNewTaskToReadyList+0xc0>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d00e      	beq.n	8007060 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007042:	4b0a      	ldr	r3, [pc, #40]	@ (800706c <prvAddNewTaskToReadyList+0xbc>)
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800704c:	429a      	cmp	r2, r3
 800704e:	d207      	bcs.n	8007060 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007050:	4b0b      	ldr	r3, [pc, #44]	@ (8007080 <prvAddNewTaskToReadyList+0xd0>)
 8007052:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007056:	601a      	str	r2, [r3, #0]
 8007058:	f3bf 8f4f 	dsb	sy
 800705c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007060:	bf00      	nop
 8007062:	3708      	adds	r7, #8
 8007064:	46bd      	mov	sp, r7
 8007066:	bd80      	pop	{r7, pc}
 8007068:	200007ec 	.word	0x200007ec
 800706c:	200006ec 	.word	0x200006ec
 8007070:	200007f8 	.word	0x200007f8
 8007074:	20000808 	.word	0x20000808
 8007078:	200007f4 	.word	0x200007f4
 800707c:	200006f0 	.word	0x200006f0
 8007080:	e000ed04 	.word	0xe000ed04

08007084 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007084:	b580      	push	{r7, lr}
 8007086:	b084      	sub	sp, #16
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800708c:	2300      	movs	r3, #0
 800708e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d018      	beq.n	80070c8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007096:	4b14      	ldr	r3, [pc, #80]	@ (80070e8 <vTaskDelay+0x64>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d00b      	beq.n	80070b6 <vTaskDelay+0x32>
	__asm volatile
 800709e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070a2:	f383 8811 	msr	BASEPRI, r3
 80070a6:	f3bf 8f6f 	isb	sy
 80070aa:	f3bf 8f4f 	dsb	sy
 80070ae:	60bb      	str	r3, [r7, #8]
}
 80070b0:	bf00      	nop
 80070b2:	bf00      	nop
 80070b4:	e7fd      	b.n	80070b2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80070b6:	f000 f87d 	bl	80071b4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80070ba:	2100      	movs	r1, #0
 80070bc:	6878      	ldr	r0, [r7, #4]
 80070be:	f000 fc07 	bl	80078d0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80070c2:	f000 f885 	bl	80071d0 <xTaskResumeAll>
 80070c6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d107      	bne.n	80070de <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80070ce:	4b07      	ldr	r3, [pc, #28]	@ (80070ec <vTaskDelay+0x68>)
 80070d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80070d4:	601a      	str	r2, [r3, #0]
 80070d6:	f3bf 8f4f 	dsb	sy
 80070da:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80070de:	bf00      	nop
 80070e0:	3710      	adds	r7, #16
 80070e2:	46bd      	mov	sp, r7
 80070e4:	bd80      	pop	{r7, pc}
 80070e6:	bf00      	nop
 80070e8:	20000814 	.word	0x20000814
 80070ec:	e000ed04 	.word	0xe000ed04

080070f0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b08a      	sub	sp, #40	@ 0x28
 80070f4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80070f6:	2300      	movs	r3, #0
 80070f8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80070fa:	2300      	movs	r3, #0
 80070fc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80070fe:	463a      	mov	r2, r7
 8007100:	1d39      	adds	r1, r7, #4
 8007102:	f107 0308 	add.w	r3, r7, #8
 8007106:	4618      	mov	r0, r3
 8007108:	f7fa f834 	bl	8001174 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800710c:	6839      	ldr	r1, [r7, #0]
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	68ba      	ldr	r2, [r7, #8]
 8007112:	9202      	str	r2, [sp, #8]
 8007114:	9301      	str	r3, [sp, #4]
 8007116:	2300      	movs	r3, #0
 8007118:	9300      	str	r3, [sp, #0]
 800711a:	2300      	movs	r3, #0
 800711c:	460a      	mov	r2, r1
 800711e:	491f      	ldr	r1, [pc, #124]	@ (800719c <vTaskStartScheduler+0xac>)
 8007120:	481f      	ldr	r0, [pc, #124]	@ (80071a0 <vTaskStartScheduler+0xb0>)
 8007122:	f7ff fe21 	bl	8006d68 <xTaskCreateStatic>
 8007126:	4603      	mov	r3, r0
 8007128:	4a1e      	ldr	r2, [pc, #120]	@ (80071a4 <vTaskStartScheduler+0xb4>)
 800712a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800712c:	4b1d      	ldr	r3, [pc, #116]	@ (80071a4 <vTaskStartScheduler+0xb4>)
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d002      	beq.n	800713a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007134:	2301      	movs	r3, #1
 8007136:	617b      	str	r3, [r7, #20]
 8007138:	e001      	b.n	800713e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800713a:	2300      	movs	r3, #0
 800713c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800713e:	697b      	ldr	r3, [r7, #20]
 8007140:	2b01      	cmp	r3, #1
 8007142:	d116      	bne.n	8007172 <vTaskStartScheduler+0x82>
	__asm volatile
 8007144:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007148:	f383 8811 	msr	BASEPRI, r3
 800714c:	f3bf 8f6f 	isb	sy
 8007150:	f3bf 8f4f 	dsb	sy
 8007154:	613b      	str	r3, [r7, #16]
}
 8007156:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007158:	4b13      	ldr	r3, [pc, #76]	@ (80071a8 <vTaskStartScheduler+0xb8>)
 800715a:	f04f 32ff 	mov.w	r2, #4294967295
 800715e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007160:	4b12      	ldr	r3, [pc, #72]	@ (80071ac <vTaskStartScheduler+0xbc>)
 8007162:	2201      	movs	r2, #1
 8007164:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8007166:	4b12      	ldr	r3, [pc, #72]	@ (80071b0 <vTaskStartScheduler+0xc0>)
 8007168:	2200      	movs	r2, #0
 800716a:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800716c:	f000 fca0 	bl	8007ab0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007170:	e00f      	b.n	8007192 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007172:	697b      	ldr	r3, [r7, #20]
 8007174:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007178:	d10b      	bne.n	8007192 <vTaskStartScheduler+0xa2>
	__asm volatile
 800717a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800717e:	f383 8811 	msr	BASEPRI, r3
 8007182:	f3bf 8f6f 	isb	sy
 8007186:	f3bf 8f4f 	dsb	sy
 800718a:	60fb      	str	r3, [r7, #12]
}
 800718c:	bf00      	nop
 800718e:	bf00      	nop
 8007190:	e7fd      	b.n	800718e <vTaskStartScheduler+0x9e>
}
 8007192:	bf00      	nop
 8007194:	3718      	adds	r7, #24
 8007196:	46bd      	mov	sp, r7
 8007198:	bd80      	pop	{r7, pc}
 800719a:	bf00      	nop
 800719c:	0800b068 	.word	0x0800b068
 80071a0:	08007609 	.word	0x08007609
 80071a4:	20000810 	.word	0x20000810
 80071a8:	2000080c 	.word	0x2000080c
 80071ac:	200007f8 	.word	0x200007f8
 80071b0:	200007f0 	.word	0x200007f0

080071b4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80071b4:	b480      	push	{r7}
 80071b6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80071b8:	4b04      	ldr	r3, [pc, #16]	@ (80071cc <vTaskSuspendAll+0x18>)
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	3301      	adds	r3, #1
 80071be:	4a03      	ldr	r2, [pc, #12]	@ (80071cc <vTaskSuspendAll+0x18>)
 80071c0:	6013      	str	r3, [r2, #0]
}
 80071c2:	bf00      	nop
 80071c4:	46bd      	mov	sp, r7
 80071c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ca:	4770      	bx	lr
 80071cc:	20000814 	.word	0x20000814

080071d0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b084      	sub	sp, #16
 80071d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80071d6:	2300      	movs	r3, #0
 80071d8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80071da:	2300      	movs	r3, #0
 80071dc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80071de:	4b42      	ldr	r3, [pc, #264]	@ (80072e8 <xTaskResumeAll+0x118>)
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d10b      	bne.n	80071fe <xTaskResumeAll+0x2e>
	__asm volatile
 80071e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071ea:	f383 8811 	msr	BASEPRI, r3
 80071ee:	f3bf 8f6f 	isb	sy
 80071f2:	f3bf 8f4f 	dsb	sy
 80071f6:	603b      	str	r3, [r7, #0]
}
 80071f8:	bf00      	nop
 80071fa:	bf00      	nop
 80071fc:	e7fd      	b.n	80071fa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80071fe:	f000 fcfb 	bl	8007bf8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007202:	4b39      	ldr	r3, [pc, #228]	@ (80072e8 <xTaskResumeAll+0x118>)
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	3b01      	subs	r3, #1
 8007208:	4a37      	ldr	r2, [pc, #220]	@ (80072e8 <xTaskResumeAll+0x118>)
 800720a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800720c:	4b36      	ldr	r3, [pc, #216]	@ (80072e8 <xTaskResumeAll+0x118>)
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d161      	bne.n	80072d8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007214:	4b35      	ldr	r3, [pc, #212]	@ (80072ec <xTaskResumeAll+0x11c>)
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d05d      	beq.n	80072d8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800721c:	e02e      	b.n	800727c <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800721e:	4b34      	ldr	r3, [pc, #208]	@ (80072f0 <xTaskResumeAll+0x120>)
 8007220:	68db      	ldr	r3, [r3, #12]
 8007222:	68db      	ldr	r3, [r3, #12]
 8007224:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	3318      	adds	r3, #24
 800722a:	4618      	mov	r0, r3
 800722c:	f7ff fad2 	bl	80067d4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	3304      	adds	r3, #4
 8007234:	4618      	mov	r0, r3
 8007236:	f7ff facd 	bl	80067d4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800723e:	2201      	movs	r2, #1
 8007240:	409a      	lsls	r2, r3
 8007242:	4b2c      	ldr	r3, [pc, #176]	@ (80072f4 <xTaskResumeAll+0x124>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	4313      	orrs	r3, r2
 8007248:	4a2a      	ldr	r2, [pc, #168]	@ (80072f4 <xTaskResumeAll+0x124>)
 800724a:	6013      	str	r3, [r2, #0]
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007250:	4613      	mov	r3, r2
 8007252:	009b      	lsls	r3, r3, #2
 8007254:	4413      	add	r3, r2
 8007256:	009b      	lsls	r3, r3, #2
 8007258:	4a27      	ldr	r2, [pc, #156]	@ (80072f8 <xTaskResumeAll+0x128>)
 800725a:	441a      	add	r2, r3
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	3304      	adds	r3, #4
 8007260:	4619      	mov	r1, r3
 8007262:	4610      	mov	r0, r2
 8007264:	f7ff fa59 	bl	800671a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800726c:	4b23      	ldr	r3, [pc, #140]	@ (80072fc <xTaskResumeAll+0x12c>)
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007272:	429a      	cmp	r2, r3
 8007274:	d302      	bcc.n	800727c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007276:	4b22      	ldr	r3, [pc, #136]	@ (8007300 <xTaskResumeAll+0x130>)
 8007278:	2201      	movs	r2, #1
 800727a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800727c:	4b1c      	ldr	r3, [pc, #112]	@ (80072f0 <xTaskResumeAll+0x120>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d1cc      	bne.n	800721e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d001      	beq.n	800728e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800728a:	f000 fa73 	bl	8007774 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800728e:	4b1d      	ldr	r3, [pc, #116]	@ (8007304 <xTaskResumeAll+0x134>)
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d010      	beq.n	80072bc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800729a:	f000 f837 	bl	800730c <xTaskIncrementTick>
 800729e:	4603      	mov	r3, r0
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d002      	beq.n	80072aa <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80072a4:	4b16      	ldr	r3, [pc, #88]	@ (8007300 <xTaskResumeAll+0x130>)
 80072a6:	2201      	movs	r2, #1
 80072a8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	3b01      	subs	r3, #1
 80072ae:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d1f1      	bne.n	800729a <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 80072b6:	4b13      	ldr	r3, [pc, #76]	@ (8007304 <xTaskResumeAll+0x134>)
 80072b8:	2200      	movs	r2, #0
 80072ba:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80072bc:	4b10      	ldr	r3, [pc, #64]	@ (8007300 <xTaskResumeAll+0x130>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d009      	beq.n	80072d8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80072c4:	2301      	movs	r3, #1
 80072c6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80072c8:	4b0f      	ldr	r3, [pc, #60]	@ (8007308 <xTaskResumeAll+0x138>)
 80072ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80072ce:	601a      	str	r2, [r3, #0]
 80072d0:	f3bf 8f4f 	dsb	sy
 80072d4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80072d8:	f000 fcc0 	bl	8007c5c <vPortExitCritical>

	return xAlreadyYielded;
 80072dc:	68bb      	ldr	r3, [r7, #8]
}
 80072de:	4618      	mov	r0, r3
 80072e0:	3710      	adds	r7, #16
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bd80      	pop	{r7, pc}
 80072e6:	bf00      	nop
 80072e8:	20000814 	.word	0x20000814
 80072ec:	200007ec 	.word	0x200007ec
 80072f0:	200007ac 	.word	0x200007ac
 80072f4:	200007f4 	.word	0x200007f4
 80072f8:	200006f0 	.word	0x200006f0
 80072fc:	200006ec 	.word	0x200006ec
 8007300:	20000800 	.word	0x20000800
 8007304:	200007fc 	.word	0x200007fc
 8007308:	e000ed04 	.word	0xe000ed04

0800730c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b086      	sub	sp, #24
 8007310:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007312:	2300      	movs	r3, #0
 8007314:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007316:	4b51      	ldr	r3, [pc, #324]	@ (800745c <xTaskIncrementTick+0x150>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	2b00      	cmp	r3, #0
 800731c:	f040 808e 	bne.w	800743c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007320:	4b4f      	ldr	r3, [pc, #316]	@ (8007460 <xTaskIncrementTick+0x154>)
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	3301      	adds	r3, #1
 8007326:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007328:	4a4d      	ldr	r2, [pc, #308]	@ (8007460 <xTaskIncrementTick+0x154>)
 800732a:	693b      	ldr	r3, [r7, #16]
 800732c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800732e:	693b      	ldr	r3, [r7, #16]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d121      	bne.n	8007378 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007334:	4b4b      	ldr	r3, [pc, #300]	@ (8007464 <xTaskIncrementTick+0x158>)
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d00b      	beq.n	8007356 <xTaskIncrementTick+0x4a>
	__asm volatile
 800733e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007342:	f383 8811 	msr	BASEPRI, r3
 8007346:	f3bf 8f6f 	isb	sy
 800734a:	f3bf 8f4f 	dsb	sy
 800734e:	603b      	str	r3, [r7, #0]
}
 8007350:	bf00      	nop
 8007352:	bf00      	nop
 8007354:	e7fd      	b.n	8007352 <xTaskIncrementTick+0x46>
 8007356:	4b43      	ldr	r3, [pc, #268]	@ (8007464 <xTaskIncrementTick+0x158>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	60fb      	str	r3, [r7, #12]
 800735c:	4b42      	ldr	r3, [pc, #264]	@ (8007468 <xTaskIncrementTick+0x15c>)
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	4a40      	ldr	r2, [pc, #256]	@ (8007464 <xTaskIncrementTick+0x158>)
 8007362:	6013      	str	r3, [r2, #0]
 8007364:	4a40      	ldr	r2, [pc, #256]	@ (8007468 <xTaskIncrementTick+0x15c>)
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	6013      	str	r3, [r2, #0]
 800736a:	4b40      	ldr	r3, [pc, #256]	@ (800746c <xTaskIncrementTick+0x160>)
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	3301      	adds	r3, #1
 8007370:	4a3e      	ldr	r2, [pc, #248]	@ (800746c <xTaskIncrementTick+0x160>)
 8007372:	6013      	str	r3, [r2, #0]
 8007374:	f000 f9fe 	bl	8007774 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007378:	4b3d      	ldr	r3, [pc, #244]	@ (8007470 <xTaskIncrementTick+0x164>)
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	693a      	ldr	r2, [r7, #16]
 800737e:	429a      	cmp	r2, r3
 8007380:	d34d      	bcc.n	800741e <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007382:	4b38      	ldr	r3, [pc, #224]	@ (8007464 <xTaskIncrementTick+0x158>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d101      	bne.n	8007390 <xTaskIncrementTick+0x84>
 800738c:	2301      	movs	r3, #1
 800738e:	e000      	b.n	8007392 <xTaskIncrementTick+0x86>
 8007390:	2300      	movs	r3, #0
 8007392:	2b00      	cmp	r3, #0
 8007394:	d004      	beq.n	80073a0 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007396:	4b36      	ldr	r3, [pc, #216]	@ (8007470 <xTaskIncrementTick+0x164>)
 8007398:	f04f 32ff 	mov.w	r2, #4294967295
 800739c:	601a      	str	r2, [r3, #0]
					break;
 800739e:	e03e      	b.n	800741e <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80073a0:	4b30      	ldr	r3, [pc, #192]	@ (8007464 <xTaskIncrementTick+0x158>)
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	68db      	ldr	r3, [r3, #12]
 80073a6:	68db      	ldr	r3, [r3, #12]
 80073a8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80073aa:	68bb      	ldr	r3, [r7, #8]
 80073ac:	685b      	ldr	r3, [r3, #4]
 80073ae:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80073b0:	693a      	ldr	r2, [r7, #16]
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	429a      	cmp	r2, r3
 80073b6:	d203      	bcs.n	80073c0 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80073b8:	4a2d      	ldr	r2, [pc, #180]	@ (8007470 <xTaskIncrementTick+0x164>)
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6013      	str	r3, [r2, #0]
						break;
 80073be:	e02e      	b.n	800741e <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	3304      	adds	r3, #4
 80073c4:	4618      	mov	r0, r3
 80073c6:	f7ff fa05 	bl	80067d4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80073ca:	68bb      	ldr	r3, [r7, #8]
 80073cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d004      	beq.n	80073dc <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	3318      	adds	r3, #24
 80073d6:	4618      	mov	r0, r3
 80073d8:	f7ff f9fc 	bl	80067d4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073e0:	2201      	movs	r2, #1
 80073e2:	409a      	lsls	r2, r3
 80073e4:	4b23      	ldr	r3, [pc, #140]	@ (8007474 <xTaskIncrementTick+0x168>)
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	4313      	orrs	r3, r2
 80073ea:	4a22      	ldr	r2, [pc, #136]	@ (8007474 <xTaskIncrementTick+0x168>)
 80073ec:	6013      	str	r3, [r2, #0]
 80073ee:	68bb      	ldr	r3, [r7, #8]
 80073f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073f2:	4613      	mov	r3, r2
 80073f4:	009b      	lsls	r3, r3, #2
 80073f6:	4413      	add	r3, r2
 80073f8:	009b      	lsls	r3, r3, #2
 80073fa:	4a1f      	ldr	r2, [pc, #124]	@ (8007478 <xTaskIncrementTick+0x16c>)
 80073fc:	441a      	add	r2, r3
 80073fe:	68bb      	ldr	r3, [r7, #8]
 8007400:	3304      	adds	r3, #4
 8007402:	4619      	mov	r1, r3
 8007404:	4610      	mov	r0, r2
 8007406:	f7ff f988 	bl	800671a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800740a:	68bb      	ldr	r3, [r7, #8]
 800740c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800740e:	4b1b      	ldr	r3, [pc, #108]	@ (800747c <xTaskIncrementTick+0x170>)
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007414:	429a      	cmp	r2, r3
 8007416:	d3b4      	bcc.n	8007382 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007418:	2301      	movs	r3, #1
 800741a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800741c:	e7b1      	b.n	8007382 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800741e:	4b17      	ldr	r3, [pc, #92]	@ (800747c <xTaskIncrementTick+0x170>)
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007424:	4914      	ldr	r1, [pc, #80]	@ (8007478 <xTaskIncrementTick+0x16c>)
 8007426:	4613      	mov	r3, r2
 8007428:	009b      	lsls	r3, r3, #2
 800742a:	4413      	add	r3, r2
 800742c:	009b      	lsls	r3, r3, #2
 800742e:	440b      	add	r3, r1
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	2b01      	cmp	r3, #1
 8007434:	d907      	bls.n	8007446 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8007436:	2301      	movs	r3, #1
 8007438:	617b      	str	r3, [r7, #20]
 800743a:	e004      	b.n	8007446 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800743c:	4b10      	ldr	r3, [pc, #64]	@ (8007480 <xTaskIncrementTick+0x174>)
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	3301      	adds	r3, #1
 8007442:	4a0f      	ldr	r2, [pc, #60]	@ (8007480 <xTaskIncrementTick+0x174>)
 8007444:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007446:	4b0f      	ldr	r3, [pc, #60]	@ (8007484 <xTaskIncrementTick+0x178>)
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d001      	beq.n	8007452 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800744e:	2301      	movs	r3, #1
 8007450:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007452:	697b      	ldr	r3, [r7, #20]
}
 8007454:	4618      	mov	r0, r3
 8007456:	3718      	adds	r7, #24
 8007458:	46bd      	mov	sp, r7
 800745a:	bd80      	pop	{r7, pc}
 800745c:	20000814 	.word	0x20000814
 8007460:	200007f0 	.word	0x200007f0
 8007464:	200007a4 	.word	0x200007a4
 8007468:	200007a8 	.word	0x200007a8
 800746c:	20000804 	.word	0x20000804
 8007470:	2000080c 	.word	0x2000080c
 8007474:	200007f4 	.word	0x200007f4
 8007478:	200006f0 	.word	0x200006f0
 800747c:	200006ec 	.word	0x200006ec
 8007480:	200007fc 	.word	0x200007fc
 8007484:	20000800 	.word	0x20000800

08007488 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007488:	b480      	push	{r7}
 800748a:	b087      	sub	sp, #28
 800748c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800748e:	4b27      	ldr	r3, [pc, #156]	@ (800752c <vTaskSwitchContext+0xa4>)
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d003      	beq.n	800749e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007496:	4b26      	ldr	r3, [pc, #152]	@ (8007530 <vTaskSwitchContext+0xa8>)
 8007498:	2201      	movs	r2, #1
 800749a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800749c:	e040      	b.n	8007520 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800749e:	4b24      	ldr	r3, [pc, #144]	@ (8007530 <vTaskSwitchContext+0xa8>)
 80074a0:	2200      	movs	r2, #0
 80074a2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80074a4:	4b23      	ldr	r3, [pc, #140]	@ (8007534 <vTaskSwitchContext+0xac>)
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	fab3 f383 	clz	r3, r3
 80074b0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80074b2:	7afb      	ldrb	r3, [r7, #11]
 80074b4:	f1c3 031f 	rsb	r3, r3, #31
 80074b8:	617b      	str	r3, [r7, #20]
 80074ba:	491f      	ldr	r1, [pc, #124]	@ (8007538 <vTaskSwitchContext+0xb0>)
 80074bc:	697a      	ldr	r2, [r7, #20]
 80074be:	4613      	mov	r3, r2
 80074c0:	009b      	lsls	r3, r3, #2
 80074c2:	4413      	add	r3, r2
 80074c4:	009b      	lsls	r3, r3, #2
 80074c6:	440b      	add	r3, r1
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d10b      	bne.n	80074e6 <vTaskSwitchContext+0x5e>
	__asm volatile
 80074ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074d2:	f383 8811 	msr	BASEPRI, r3
 80074d6:	f3bf 8f6f 	isb	sy
 80074da:	f3bf 8f4f 	dsb	sy
 80074de:	607b      	str	r3, [r7, #4]
}
 80074e0:	bf00      	nop
 80074e2:	bf00      	nop
 80074e4:	e7fd      	b.n	80074e2 <vTaskSwitchContext+0x5a>
 80074e6:	697a      	ldr	r2, [r7, #20]
 80074e8:	4613      	mov	r3, r2
 80074ea:	009b      	lsls	r3, r3, #2
 80074ec:	4413      	add	r3, r2
 80074ee:	009b      	lsls	r3, r3, #2
 80074f0:	4a11      	ldr	r2, [pc, #68]	@ (8007538 <vTaskSwitchContext+0xb0>)
 80074f2:	4413      	add	r3, r2
 80074f4:	613b      	str	r3, [r7, #16]
 80074f6:	693b      	ldr	r3, [r7, #16]
 80074f8:	685b      	ldr	r3, [r3, #4]
 80074fa:	685a      	ldr	r2, [r3, #4]
 80074fc:	693b      	ldr	r3, [r7, #16]
 80074fe:	605a      	str	r2, [r3, #4]
 8007500:	693b      	ldr	r3, [r7, #16]
 8007502:	685a      	ldr	r2, [r3, #4]
 8007504:	693b      	ldr	r3, [r7, #16]
 8007506:	3308      	adds	r3, #8
 8007508:	429a      	cmp	r2, r3
 800750a:	d104      	bne.n	8007516 <vTaskSwitchContext+0x8e>
 800750c:	693b      	ldr	r3, [r7, #16]
 800750e:	685b      	ldr	r3, [r3, #4]
 8007510:	685a      	ldr	r2, [r3, #4]
 8007512:	693b      	ldr	r3, [r7, #16]
 8007514:	605a      	str	r2, [r3, #4]
 8007516:	693b      	ldr	r3, [r7, #16]
 8007518:	685b      	ldr	r3, [r3, #4]
 800751a:	68db      	ldr	r3, [r3, #12]
 800751c:	4a07      	ldr	r2, [pc, #28]	@ (800753c <vTaskSwitchContext+0xb4>)
 800751e:	6013      	str	r3, [r2, #0]
}
 8007520:	bf00      	nop
 8007522:	371c      	adds	r7, #28
 8007524:	46bd      	mov	sp, r7
 8007526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752a:	4770      	bx	lr
 800752c:	20000814 	.word	0x20000814
 8007530:	20000800 	.word	0x20000800
 8007534:	200007f4 	.word	0x200007f4
 8007538:	200006f0 	.word	0x200006f0
 800753c:	200006ec 	.word	0x200006ec

08007540 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b086      	sub	sp, #24
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	68db      	ldr	r3, [r3, #12]
 800754c:	68db      	ldr	r3, [r3, #12]
 800754e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007550:	693b      	ldr	r3, [r7, #16]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d10b      	bne.n	800756e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8007556:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800755a:	f383 8811 	msr	BASEPRI, r3
 800755e:	f3bf 8f6f 	isb	sy
 8007562:	f3bf 8f4f 	dsb	sy
 8007566:	60fb      	str	r3, [r7, #12]
}
 8007568:	bf00      	nop
 800756a:	bf00      	nop
 800756c:	e7fd      	b.n	800756a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800756e:	693b      	ldr	r3, [r7, #16]
 8007570:	3318      	adds	r3, #24
 8007572:	4618      	mov	r0, r3
 8007574:	f7ff f92e 	bl	80067d4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007578:	4b1d      	ldr	r3, [pc, #116]	@ (80075f0 <xTaskRemoveFromEventList+0xb0>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d11c      	bne.n	80075ba <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007580:	693b      	ldr	r3, [r7, #16]
 8007582:	3304      	adds	r3, #4
 8007584:	4618      	mov	r0, r3
 8007586:	f7ff f925 	bl	80067d4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800758a:	693b      	ldr	r3, [r7, #16]
 800758c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800758e:	2201      	movs	r2, #1
 8007590:	409a      	lsls	r2, r3
 8007592:	4b18      	ldr	r3, [pc, #96]	@ (80075f4 <xTaskRemoveFromEventList+0xb4>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	4313      	orrs	r3, r2
 8007598:	4a16      	ldr	r2, [pc, #88]	@ (80075f4 <xTaskRemoveFromEventList+0xb4>)
 800759a:	6013      	str	r3, [r2, #0]
 800759c:	693b      	ldr	r3, [r7, #16]
 800759e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075a0:	4613      	mov	r3, r2
 80075a2:	009b      	lsls	r3, r3, #2
 80075a4:	4413      	add	r3, r2
 80075a6:	009b      	lsls	r3, r3, #2
 80075a8:	4a13      	ldr	r2, [pc, #76]	@ (80075f8 <xTaskRemoveFromEventList+0xb8>)
 80075aa:	441a      	add	r2, r3
 80075ac:	693b      	ldr	r3, [r7, #16]
 80075ae:	3304      	adds	r3, #4
 80075b0:	4619      	mov	r1, r3
 80075b2:	4610      	mov	r0, r2
 80075b4:	f7ff f8b1 	bl	800671a <vListInsertEnd>
 80075b8:	e005      	b.n	80075c6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80075ba:	693b      	ldr	r3, [r7, #16]
 80075bc:	3318      	adds	r3, #24
 80075be:	4619      	mov	r1, r3
 80075c0:	480e      	ldr	r0, [pc, #56]	@ (80075fc <xTaskRemoveFromEventList+0xbc>)
 80075c2:	f7ff f8aa 	bl	800671a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80075c6:	693b      	ldr	r3, [r7, #16]
 80075c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075ca:	4b0d      	ldr	r3, [pc, #52]	@ (8007600 <xTaskRemoveFromEventList+0xc0>)
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075d0:	429a      	cmp	r2, r3
 80075d2:	d905      	bls.n	80075e0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80075d4:	2301      	movs	r3, #1
 80075d6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80075d8:	4b0a      	ldr	r3, [pc, #40]	@ (8007604 <xTaskRemoveFromEventList+0xc4>)
 80075da:	2201      	movs	r2, #1
 80075dc:	601a      	str	r2, [r3, #0]
 80075de:	e001      	b.n	80075e4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80075e0:	2300      	movs	r3, #0
 80075e2:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80075e4:	697b      	ldr	r3, [r7, #20]
}
 80075e6:	4618      	mov	r0, r3
 80075e8:	3718      	adds	r7, #24
 80075ea:	46bd      	mov	sp, r7
 80075ec:	bd80      	pop	{r7, pc}
 80075ee:	bf00      	nop
 80075f0:	20000814 	.word	0x20000814
 80075f4:	200007f4 	.word	0x200007f4
 80075f8:	200006f0 	.word	0x200006f0
 80075fc:	200007ac 	.word	0x200007ac
 8007600:	200006ec 	.word	0x200006ec
 8007604:	20000800 	.word	0x20000800

08007608 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b082      	sub	sp, #8
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007610:	f000 f852 	bl	80076b8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007614:	4b06      	ldr	r3, [pc, #24]	@ (8007630 <prvIdleTask+0x28>)
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	2b01      	cmp	r3, #1
 800761a:	d9f9      	bls.n	8007610 <prvIdleTask+0x8>
			{
				taskYIELD();
 800761c:	4b05      	ldr	r3, [pc, #20]	@ (8007634 <prvIdleTask+0x2c>)
 800761e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007622:	601a      	str	r2, [r3, #0]
 8007624:	f3bf 8f4f 	dsb	sy
 8007628:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800762c:	e7f0      	b.n	8007610 <prvIdleTask+0x8>
 800762e:	bf00      	nop
 8007630:	200006f0 	.word	0x200006f0
 8007634:	e000ed04 	.word	0xe000ed04

08007638 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b082      	sub	sp, #8
 800763c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800763e:	2300      	movs	r3, #0
 8007640:	607b      	str	r3, [r7, #4]
 8007642:	e00c      	b.n	800765e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007644:	687a      	ldr	r2, [r7, #4]
 8007646:	4613      	mov	r3, r2
 8007648:	009b      	lsls	r3, r3, #2
 800764a:	4413      	add	r3, r2
 800764c:	009b      	lsls	r3, r3, #2
 800764e:	4a12      	ldr	r2, [pc, #72]	@ (8007698 <prvInitialiseTaskLists+0x60>)
 8007650:	4413      	add	r3, r2
 8007652:	4618      	mov	r0, r3
 8007654:	f7ff f834 	bl	80066c0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	3301      	adds	r3, #1
 800765c:	607b      	str	r3, [r7, #4]
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2b06      	cmp	r3, #6
 8007662:	d9ef      	bls.n	8007644 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007664:	480d      	ldr	r0, [pc, #52]	@ (800769c <prvInitialiseTaskLists+0x64>)
 8007666:	f7ff f82b 	bl	80066c0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800766a:	480d      	ldr	r0, [pc, #52]	@ (80076a0 <prvInitialiseTaskLists+0x68>)
 800766c:	f7ff f828 	bl	80066c0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007670:	480c      	ldr	r0, [pc, #48]	@ (80076a4 <prvInitialiseTaskLists+0x6c>)
 8007672:	f7ff f825 	bl	80066c0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007676:	480c      	ldr	r0, [pc, #48]	@ (80076a8 <prvInitialiseTaskLists+0x70>)
 8007678:	f7ff f822 	bl	80066c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800767c:	480b      	ldr	r0, [pc, #44]	@ (80076ac <prvInitialiseTaskLists+0x74>)
 800767e:	f7ff f81f 	bl	80066c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007682:	4b0b      	ldr	r3, [pc, #44]	@ (80076b0 <prvInitialiseTaskLists+0x78>)
 8007684:	4a05      	ldr	r2, [pc, #20]	@ (800769c <prvInitialiseTaskLists+0x64>)
 8007686:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007688:	4b0a      	ldr	r3, [pc, #40]	@ (80076b4 <prvInitialiseTaskLists+0x7c>)
 800768a:	4a05      	ldr	r2, [pc, #20]	@ (80076a0 <prvInitialiseTaskLists+0x68>)
 800768c:	601a      	str	r2, [r3, #0]
}
 800768e:	bf00      	nop
 8007690:	3708      	adds	r7, #8
 8007692:	46bd      	mov	sp, r7
 8007694:	bd80      	pop	{r7, pc}
 8007696:	bf00      	nop
 8007698:	200006f0 	.word	0x200006f0
 800769c:	2000077c 	.word	0x2000077c
 80076a0:	20000790 	.word	0x20000790
 80076a4:	200007ac 	.word	0x200007ac
 80076a8:	200007c0 	.word	0x200007c0
 80076ac:	200007d8 	.word	0x200007d8
 80076b0:	200007a4 	.word	0x200007a4
 80076b4:	200007a8 	.word	0x200007a8

080076b8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b082      	sub	sp, #8
 80076bc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80076be:	e019      	b.n	80076f4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80076c0:	f000 fa9a 	bl	8007bf8 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80076c4:	4b10      	ldr	r3, [pc, #64]	@ (8007708 <prvCheckTasksWaitingTermination+0x50>)
 80076c6:	68db      	ldr	r3, [r3, #12]
 80076c8:	68db      	ldr	r3, [r3, #12]
 80076ca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	3304      	adds	r3, #4
 80076d0:	4618      	mov	r0, r3
 80076d2:	f7ff f87f 	bl	80067d4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80076d6:	4b0d      	ldr	r3, [pc, #52]	@ (800770c <prvCheckTasksWaitingTermination+0x54>)
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	3b01      	subs	r3, #1
 80076dc:	4a0b      	ldr	r2, [pc, #44]	@ (800770c <prvCheckTasksWaitingTermination+0x54>)
 80076de:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80076e0:	4b0b      	ldr	r3, [pc, #44]	@ (8007710 <prvCheckTasksWaitingTermination+0x58>)
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	3b01      	subs	r3, #1
 80076e6:	4a0a      	ldr	r2, [pc, #40]	@ (8007710 <prvCheckTasksWaitingTermination+0x58>)
 80076e8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80076ea:	f000 fab7 	bl	8007c5c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f000 f810 	bl	8007714 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80076f4:	4b06      	ldr	r3, [pc, #24]	@ (8007710 <prvCheckTasksWaitingTermination+0x58>)
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d1e1      	bne.n	80076c0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80076fc:	bf00      	nop
 80076fe:	bf00      	nop
 8007700:	3708      	adds	r7, #8
 8007702:	46bd      	mov	sp, r7
 8007704:	bd80      	pop	{r7, pc}
 8007706:	bf00      	nop
 8007708:	200007c0 	.word	0x200007c0
 800770c:	200007ec 	.word	0x200007ec
 8007710:	200007d4 	.word	0x200007d4

08007714 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007714:	b580      	push	{r7, lr}
 8007716:	b084      	sub	sp, #16
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007722:	2b00      	cmp	r3, #0
 8007724:	d108      	bne.n	8007738 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800772a:	4618      	mov	r0, r3
 800772c:	f000 fc4e 	bl	8007fcc <vPortFree>
				vPortFree( pxTCB );
 8007730:	6878      	ldr	r0, [r7, #4]
 8007732:	f000 fc4b 	bl	8007fcc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007736:	e019      	b.n	800776c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800773e:	2b01      	cmp	r3, #1
 8007740:	d103      	bne.n	800774a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007742:	6878      	ldr	r0, [r7, #4]
 8007744:	f000 fc42 	bl	8007fcc <vPortFree>
	}
 8007748:	e010      	b.n	800776c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007750:	2b02      	cmp	r3, #2
 8007752:	d00b      	beq.n	800776c <prvDeleteTCB+0x58>
	__asm volatile
 8007754:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007758:	f383 8811 	msr	BASEPRI, r3
 800775c:	f3bf 8f6f 	isb	sy
 8007760:	f3bf 8f4f 	dsb	sy
 8007764:	60fb      	str	r3, [r7, #12]
}
 8007766:	bf00      	nop
 8007768:	bf00      	nop
 800776a:	e7fd      	b.n	8007768 <prvDeleteTCB+0x54>
	}
 800776c:	bf00      	nop
 800776e:	3710      	adds	r7, #16
 8007770:	46bd      	mov	sp, r7
 8007772:	bd80      	pop	{r7, pc}

08007774 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007774:	b480      	push	{r7}
 8007776:	b083      	sub	sp, #12
 8007778:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800777a:	4b0f      	ldr	r3, [pc, #60]	@ (80077b8 <prvResetNextTaskUnblockTime+0x44>)
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d101      	bne.n	8007788 <prvResetNextTaskUnblockTime+0x14>
 8007784:	2301      	movs	r3, #1
 8007786:	e000      	b.n	800778a <prvResetNextTaskUnblockTime+0x16>
 8007788:	2300      	movs	r3, #0
 800778a:	2b00      	cmp	r3, #0
 800778c:	d004      	beq.n	8007798 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800778e:	4b0b      	ldr	r3, [pc, #44]	@ (80077bc <prvResetNextTaskUnblockTime+0x48>)
 8007790:	f04f 32ff 	mov.w	r2, #4294967295
 8007794:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007796:	e008      	b.n	80077aa <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007798:	4b07      	ldr	r3, [pc, #28]	@ (80077b8 <prvResetNextTaskUnblockTime+0x44>)
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	68db      	ldr	r3, [r3, #12]
 800779e:	68db      	ldr	r3, [r3, #12]
 80077a0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	685b      	ldr	r3, [r3, #4]
 80077a6:	4a05      	ldr	r2, [pc, #20]	@ (80077bc <prvResetNextTaskUnblockTime+0x48>)
 80077a8:	6013      	str	r3, [r2, #0]
}
 80077aa:	bf00      	nop
 80077ac:	370c      	adds	r7, #12
 80077ae:	46bd      	mov	sp, r7
 80077b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b4:	4770      	bx	lr
 80077b6:	bf00      	nop
 80077b8:	200007a4 	.word	0x200007a4
 80077bc:	2000080c 	.word	0x2000080c

080077c0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b086      	sub	sp, #24
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80077cc:	2300      	movs	r3, #0
 80077ce:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d070      	beq.n	80078b8 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80077d6:	4b3b      	ldr	r3, [pc, #236]	@ (80078c4 <xTaskPriorityDisinherit+0x104>)
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	693a      	ldr	r2, [r7, #16]
 80077dc:	429a      	cmp	r2, r3
 80077de:	d00b      	beq.n	80077f8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80077e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077e4:	f383 8811 	msr	BASEPRI, r3
 80077e8:	f3bf 8f6f 	isb	sy
 80077ec:	f3bf 8f4f 	dsb	sy
 80077f0:	60fb      	str	r3, [r7, #12]
}
 80077f2:	bf00      	nop
 80077f4:	bf00      	nop
 80077f6:	e7fd      	b.n	80077f4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80077f8:	693b      	ldr	r3, [r7, #16]
 80077fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d10b      	bne.n	8007818 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8007800:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007804:	f383 8811 	msr	BASEPRI, r3
 8007808:	f3bf 8f6f 	isb	sy
 800780c:	f3bf 8f4f 	dsb	sy
 8007810:	60bb      	str	r3, [r7, #8]
}
 8007812:	bf00      	nop
 8007814:	bf00      	nop
 8007816:	e7fd      	b.n	8007814 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8007818:	693b      	ldr	r3, [r7, #16]
 800781a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800781c:	1e5a      	subs	r2, r3, #1
 800781e:	693b      	ldr	r3, [r7, #16]
 8007820:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007822:	693b      	ldr	r3, [r7, #16]
 8007824:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007826:	693b      	ldr	r3, [r7, #16]
 8007828:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800782a:	429a      	cmp	r2, r3
 800782c:	d044      	beq.n	80078b8 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800782e:	693b      	ldr	r3, [r7, #16]
 8007830:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007832:	2b00      	cmp	r3, #0
 8007834:	d140      	bne.n	80078b8 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007836:	693b      	ldr	r3, [r7, #16]
 8007838:	3304      	adds	r3, #4
 800783a:	4618      	mov	r0, r3
 800783c:	f7fe ffca 	bl	80067d4 <uxListRemove>
 8007840:	4603      	mov	r3, r0
 8007842:	2b00      	cmp	r3, #0
 8007844:	d115      	bne.n	8007872 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007846:	693b      	ldr	r3, [r7, #16]
 8007848:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800784a:	491f      	ldr	r1, [pc, #124]	@ (80078c8 <xTaskPriorityDisinherit+0x108>)
 800784c:	4613      	mov	r3, r2
 800784e:	009b      	lsls	r3, r3, #2
 8007850:	4413      	add	r3, r2
 8007852:	009b      	lsls	r3, r3, #2
 8007854:	440b      	add	r3, r1
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d10a      	bne.n	8007872 <xTaskPriorityDisinherit+0xb2>
 800785c:	693b      	ldr	r3, [r7, #16]
 800785e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007860:	2201      	movs	r2, #1
 8007862:	fa02 f303 	lsl.w	r3, r2, r3
 8007866:	43da      	mvns	r2, r3
 8007868:	4b18      	ldr	r3, [pc, #96]	@ (80078cc <xTaskPriorityDisinherit+0x10c>)
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	4013      	ands	r3, r2
 800786e:	4a17      	ldr	r2, [pc, #92]	@ (80078cc <xTaskPriorityDisinherit+0x10c>)
 8007870:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007872:	693b      	ldr	r3, [r7, #16]
 8007874:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007876:	693b      	ldr	r3, [r7, #16]
 8007878:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800787a:	693b      	ldr	r3, [r7, #16]
 800787c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800787e:	f1c3 0207 	rsb	r2, r3, #7
 8007882:	693b      	ldr	r3, [r7, #16]
 8007884:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007886:	693b      	ldr	r3, [r7, #16]
 8007888:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800788a:	2201      	movs	r2, #1
 800788c:	409a      	lsls	r2, r3
 800788e:	4b0f      	ldr	r3, [pc, #60]	@ (80078cc <xTaskPriorityDisinherit+0x10c>)
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	4313      	orrs	r3, r2
 8007894:	4a0d      	ldr	r2, [pc, #52]	@ (80078cc <xTaskPriorityDisinherit+0x10c>)
 8007896:	6013      	str	r3, [r2, #0]
 8007898:	693b      	ldr	r3, [r7, #16]
 800789a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800789c:	4613      	mov	r3, r2
 800789e:	009b      	lsls	r3, r3, #2
 80078a0:	4413      	add	r3, r2
 80078a2:	009b      	lsls	r3, r3, #2
 80078a4:	4a08      	ldr	r2, [pc, #32]	@ (80078c8 <xTaskPriorityDisinherit+0x108>)
 80078a6:	441a      	add	r2, r3
 80078a8:	693b      	ldr	r3, [r7, #16]
 80078aa:	3304      	adds	r3, #4
 80078ac:	4619      	mov	r1, r3
 80078ae:	4610      	mov	r0, r2
 80078b0:	f7fe ff33 	bl	800671a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80078b4:	2301      	movs	r3, #1
 80078b6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80078b8:	697b      	ldr	r3, [r7, #20]
	}
 80078ba:	4618      	mov	r0, r3
 80078bc:	3718      	adds	r7, #24
 80078be:	46bd      	mov	sp, r7
 80078c0:	bd80      	pop	{r7, pc}
 80078c2:	bf00      	nop
 80078c4:	200006ec 	.word	0x200006ec
 80078c8:	200006f0 	.word	0x200006f0
 80078cc:	200007f4 	.word	0x200007f4

080078d0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b084      	sub	sp, #16
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
 80078d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80078da:	4b29      	ldr	r3, [pc, #164]	@ (8007980 <prvAddCurrentTaskToDelayedList+0xb0>)
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80078e0:	4b28      	ldr	r3, [pc, #160]	@ (8007984 <prvAddCurrentTaskToDelayedList+0xb4>)
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	3304      	adds	r3, #4
 80078e6:	4618      	mov	r0, r3
 80078e8:	f7fe ff74 	bl	80067d4 <uxListRemove>
 80078ec:	4603      	mov	r3, r0
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d10b      	bne.n	800790a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80078f2:	4b24      	ldr	r3, [pc, #144]	@ (8007984 <prvAddCurrentTaskToDelayedList+0xb4>)
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078f8:	2201      	movs	r2, #1
 80078fa:	fa02 f303 	lsl.w	r3, r2, r3
 80078fe:	43da      	mvns	r2, r3
 8007900:	4b21      	ldr	r3, [pc, #132]	@ (8007988 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	4013      	ands	r3, r2
 8007906:	4a20      	ldr	r2, [pc, #128]	@ (8007988 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007908:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007910:	d10a      	bne.n	8007928 <prvAddCurrentTaskToDelayedList+0x58>
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d007      	beq.n	8007928 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007918:	4b1a      	ldr	r3, [pc, #104]	@ (8007984 <prvAddCurrentTaskToDelayedList+0xb4>)
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	3304      	adds	r3, #4
 800791e:	4619      	mov	r1, r3
 8007920:	481a      	ldr	r0, [pc, #104]	@ (800798c <prvAddCurrentTaskToDelayedList+0xbc>)
 8007922:	f7fe fefa 	bl	800671a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007926:	e026      	b.n	8007976 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007928:	68fa      	ldr	r2, [r7, #12]
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	4413      	add	r3, r2
 800792e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007930:	4b14      	ldr	r3, [pc, #80]	@ (8007984 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	68ba      	ldr	r2, [r7, #8]
 8007936:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007938:	68ba      	ldr	r2, [r7, #8]
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	429a      	cmp	r2, r3
 800793e:	d209      	bcs.n	8007954 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007940:	4b13      	ldr	r3, [pc, #76]	@ (8007990 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007942:	681a      	ldr	r2, [r3, #0]
 8007944:	4b0f      	ldr	r3, [pc, #60]	@ (8007984 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	3304      	adds	r3, #4
 800794a:	4619      	mov	r1, r3
 800794c:	4610      	mov	r0, r2
 800794e:	f7fe ff08 	bl	8006762 <vListInsert>
}
 8007952:	e010      	b.n	8007976 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007954:	4b0f      	ldr	r3, [pc, #60]	@ (8007994 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007956:	681a      	ldr	r2, [r3, #0]
 8007958:	4b0a      	ldr	r3, [pc, #40]	@ (8007984 <prvAddCurrentTaskToDelayedList+0xb4>)
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	3304      	adds	r3, #4
 800795e:	4619      	mov	r1, r3
 8007960:	4610      	mov	r0, r2
 8007962:	f7fe fefe 	bl	8006762 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007966:	4b0c      	ldr	r3, [pc, #48]	@ (8007998 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	68ba      	ldr	r2, [r7, #8]
 800796c:	429a      	cmp	r2, r3
 800796e:	d202      	bcs.n	8007976 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007970:	4a09      	ldr	r2, [pc, #36]	@ (8007998 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007972:	68bb      	ldr	r3, [r7, #8]
 8007974:	6013      	str	r3, [r2, #0]
}
 8007976:	bf00      	nop
 8007978:	3710      	adds	r7, #16
 800797a:	46bd      	mov	sp, r7
 800797c:	bd80      	pop	{r7, pc}
 800797e:	bf00      	nop
 8007980:	200007f0 	.word	0x200007f0
 8007984:	200006ec 	.word	0x200006ec
 8007988:	200007f4 	.word	0x200007f4
 800798c:	200007d8 	.word	0x200007d8
 8007990:	200007a8 	.word	0x200007a8
 8007994:	200007a4 	.word	0x200007a4
 8007998:	2000080c 	.word	0x2000080c

0800799c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800799c:	b480      	push	{r7}
 800799e:	b085      	sub	sp, #20
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	60f8      	str	r0, [r7, #12]
 80079a4:	60b9      	str	r1, [r7, #8]
 80079a6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	3b04      	subs	r3, #4
 80079ac:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80079b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	3b04      	subs	r3, #4
 80079ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80079bc:	68bb      	ldr	r3, [r7, #8]
 80079be:	f023 0201 	bic.w	r2, r3, #1
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	3b04      	subs	r3, #4
 80079ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80079cc:	4a0c      	ldr	r2, [pc, #48]	@ (8007a00 <pxPortInitialiseStack+0x64>)
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	3b14      	subs	r3, #20
 80079d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80079d8:	687a      	ldr	r2, [r7, #4]
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	3b04      	subs	r3, #4
 80079e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	f06f 0202 	mvn.w	r2, #2
 80079ea:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	3b20      	subs	r3, #32
 80079f0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80079f2:	68fb      	ldr	r3, [r7, #12]
}
 80079f4:	4618      	mov	r0, r3
 80079f6:	3714      	adds	r7, #20
 80079f8:	46bd      	mov	sp, r7
 80079fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fe:	4770      	bx	lr
 8007a00:	08007a05 	.word	0x08007a05

08007a04 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007a04:	b480      	push	{r7}
 8007a06:	b085      	sub	sp, #20
 8007a08:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007a0e:	4b13      	ldr	r3, [pc, #76]	@ (8007a5c <prvTaskExitError+0x58>)
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a16:	d00b      	beq.n	8007a30 <prvTaskExitError+0x2c>
	__asm volatile
 8007a18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a1c:	f383 8811 	msr	BASEPRI, r3
 8007a20:	f3bf 8f6f 	isb	sy
 8007a24:	f3bf 8f4f 	dsb	sy
 8007a28:	60fb      	str	r3, [r7, #12]
}
 8007a2a:	bf00      	nop
 8007a2c:	bf00      	nop
 8007a2e:	e7fd      	b.n	8007a2c <prvTaskExitError+0x28>
	__asm volatile
 8007a30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a34:	f383 8811 	msr	BASEPRI, r3
 8007a38:	f3bf 8f6f 	isb	sy
 8007a3c:	f3bf 8f4f 	dsb	sy
 8007a40:	60bb      	str	r3, [r7, #8]
}
 8007a42:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007a44:	bf00      	nop
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d0fc      	beq.n	8007a46 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007a4c:	bf00      	nop
 8007a4e:	bf00      	nop
 8007a50:	3714      	adds	r7, #20
 8007a52:	46bd      	mov	sp, r7
 8007a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a58:	4770      	bx	lr
 8007a5a:	bf00      	nop
 8007a5c:	2000001c 	.word	0x2000001c

08007a60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007a60:	4b07      	ldr	r3, [pc, #28]	@ (8007a80 <pxCurrentTCBConst2>)
 8007a62:	6819      	ldr	r1, [r3, #0]
 8007a64:	6808      	ldr	r0, [r1, #0]
 8007a66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a6a:	f380 8809 	msr	PSP, r0
 8007a6e:	f3bf 8f6f 	isb	sy
 8007a72:	f04f 0000 	mov.w	r0, #0
 8007a76:	f380 8811 	msr	BASEPRI, r0
 8007a7a:	4770      	bx	lr
 8007a7c:	f3af 8000 	nop.w

08007a80 <pxCurrentTCBConst2>:
 8007a80:	200006ec 	.word	0x200006ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007a84:	bf00      	nop
 8007a86:	bf00      	nop

08007a88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007a88:	4808      	ldr	r0, [pc, #32]	@ (8007aac <prvPortStartFirstTask+0x24>)
 8007a8a:	6800      	ldr	r0, [r0, #0]
 8007a8c:	6800      	ldr	r0, [r0, #0]
 8007a8e:	f380 8808 	msr	MSP, r0
 8007a92:	f04f 0000 	mov.w	r0, #0
 8007a96:	f380 8814 	msr	CONTROL, r0
 8007a9a:	b662      	cpsie	i
 8007a9c:	b661      	cpsie	f
 8007a9e:	f3bf 8f4f 	dsb	sy
 8007aa2:	f3bf 8f6f 	isb	sy
 8007aa6:	df00      	svc	0
 8007aa8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007aaa:	bf00      	nop
 8007aac:	e000ed08 	.word	0xe000ed08

08007ab0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b086      	sub	sp, #24
 8007ab4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007ab6:	4b47      	ldr	r3, [pc, #284]	@ (8007bd4 <xPortStartScheduler+0x124>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	4a47      	ldr	r2, [pc, #284]	@ (8007bd8 <xPortStartScheduler+0x128>)
 8007abc:	4293      	cmp	r3, r2
 8007abe:	d10b      	bne.n	8007ad8 <xPortStartScheduler+0x28>
	__asm volatile
 8007ac0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ac4:	f383 8811 	msr	BASEPRI, r3
 8007ac8:	f3bf 8f6f 	isb	sy
 8007acc:	f3bf 8f4f 	dsb	sy
 8007ad0:	613b      	str	r3, [r7, #16]
}
 8007ad2:	bf00      	nop
 8007ad4:	bf00      	nop
 8007ad6:	e7fd      	b.n	8007ad4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007ad8:	4b3e      	ldr	r3, [pc, #248]	@ (8007bd4 <xPortStartScheduler+0x124>)
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	4a3f      	ldr	r2, [pc, #252]	@ (8007bdc <xPortStartScheduler+0x12c>)
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	d10b      	bne.n	8007afa <xPortStartScheduler+0x4a>
	__asm volatile
 8007ae2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ae6:	f383 8811 	msr	BASEPRI, r3
 8007aea:	f3bf 8f6f 	isb	sy
 8007aee:	f3bf 8f4f 	dsb	sy
 8007af2:	60fb      	str	r3, [r7, #12]
}
 8007af4:	bf00      	nop
 8007af6:	bf00      	nop
 8007af8:	e7fd      	b.n	8007af6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007afa:	4b39      	ldr	r3, [pc, #228]	@ (8007be0 <xPortStartScheduler+0x130>)
 8007afc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007afe:	697b      	ldr	r3, [r7, #20]
 8007b00:	781b      	ldrb	r3, [r3, #0]
 8007b02:	b2db      	uxtb	r3, r3
 8007b04:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007b06:	697b      	ldr	r3, [r7, #20]
 8007b08:	22ff      	movs	r2, #255	@ 0xff
 8007b0a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007b0c:	697b      	ldr	r3, [r7, #20]
 8007b0e:	781b      	ldrb	r3, [r3, #0]
 8007b10:	b2db      	uxtb	r3, r3
 8007b12:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007b14:	78fb      	ldrb	r3, [r7, #3]
 8007b16:	b2db      	uxtb	r3, r3
 8007b18:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007b1c:	b2da      	uxtb	r2, r3
 8007b1e:	4b31      	ldr	r3, [pc, #196]	@ (8007be4 <xPortStartScheduler+0x134>)
 8007b20:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007b22:	4b31      	ldr	r3, [pc, #196]	@ (8007be8 <xPortStartScheduler+0x138>)
 8007b24:	2207      	movs	r2, #7
 8007b26:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007b28:	e009      	b.n	8007b3e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8007b2a:	4b2f      	ldr	r3, [pc, #188]	@ (8007be8 <xPortStartScheduler+0x138>)
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	3b01      	subs	r3, #1
 8007b30:	4a2d      	ldr	r2, [pc, #180]	@ (8007be8 <xPortStartScheduler+0x138>)
 8007b32:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007b34:	78fb      	ldrb	r3, [r7, #3]
 8007b36:	b2db      	uxtb	r3, r3
 8007b38:	005b      	lsls	r3, r3, #1
 8007b3a:	b2db      	uxtb	r3, r3
 8007b3c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007b3e:	78fb      	ldrb	r3, [r7, #3]
 8007b40:	b2db      	uxtb	r3, r3
 8007b42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b46:	2b80      	cmp	r3, #128	@ 0x80
 8007b48:	d0ef      	beq.n	8007b2a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007b4a:	4b27      	ldr	r3, [pc, #156]	@ (8007be8 <xPortStartScheduler+0x138>)
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f1c3 0307 	rsb	r3, r3, #7
 8007b52:	2b04      	cmp	r3, #4
 8007b54:	d00b      	beq.n	8007b6e <xPortStartScheduler+0xbe>
	__asm volatile
 8007b56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b5a:	f383 8811 	msr	BASEPRI, r3
 8007b5e:	f3bf 8f6f 	isb	sy
 8007b62:	f3bf 8f4f 	dsb	sy
 8007b66:	60bb      	str	r3, [r7, #8]
}
 8007b68:	bf00      	nop
 8007b6a:	bf00      	nop
 8007b6c:	e7fd      	b.n	8007b6a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007b6e:	4b1e      	ldr	r3, [pc, #120]	@ (8007be8 <xPortStartScheduler+0x138>)
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	021b      	lsls	r3, r3, #8
 8007b74:	4a1c      	ldr	r2, [pc, #112]	@ (8007be8 <xPortStartScheduler+0x138>)
 8007b76:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007b78:	4b1b      	ldr	r3, [pc, #108]	@ (8007be8 <xPortStartScheduler+0x138>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007b80:	4a19      	ldr	r2, [pc, #100]	@ (8007be8 <xPortStartScheduler+0x138>)
 8007b82:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	b2da      	uxtb	r2, r3
 8007b88:	697b      	ldr	r3, [r7, #20]
 8007b8a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007b8c:	4b17      	ldr	r3, [pc, #92]	@ (8007bec <xPortStartScheduler+0x13c>)
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	4a16      	ldr	r2, [pc, #88]	@ (8007bec <xPortStartScheduler+0x13c>)
 8007b92:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007b96:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007b98:	4b14      	ldr	r3, [pc, #80]	@ (8007bec <xPortStartScheduler+0x13c>)
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	4a13      	ldr	r2, [pc, #76]	@ (8007bec <xPortStartScheduler+0x13c>)
 8007b9e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007ba2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007ba4:	f000 f8da 	bl	8007d5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007ba8:	4b11      	ldr	r3, [pc, #68]	@ (8007bf0 <xPortStartScheduler+0x140>)
 8007baa:	2200      	movs	r2, #0
 8007bac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007bae:	f000 f8f9 	bl	8007da4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007bb2:	4b10      	ldr	r3, [pc, #64]	@ (8007bf4 <xPortStartScheduler+0x144>)
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	4a0f      	ldr	r2, [pc, #60]	@ (8007bf4 <xPortStartScheduler+0x144>)
 8007bb8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8007bbc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007bbe:	f7ff ff63 	bl	8007a88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007bc2:	f7ff fc61 	bl	8007488 <vTaskSwitchContext>
	prvTaskExitError();
 8007bc6:	f7ff ff1d 	bl	8007a04 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007bca:	2300      	movs	r3, #0
}
 8007bcc:	4618      	mov	r0, r3
 8007bce:	3718      	adds	r7, #24
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	bd80      	pop	{r7, pc}
 8007bd4:	e000ed00 	.word	0xe000ed00
 8007bd8:	410fc271 	.word	0x410fc271
 8007bdc:	410fc270 	.word	0x410fc270
 8007be0:	e000e400 	.word	0xe000e400
 8007be4:	20000818 	.word	0x20000818
 8007be8:	2000081c 	.word	0x2000081c
 8007bec:	e000ed20 	.word	0xe000ed20
 8007bf0:	2000001c 	.word	0x2000001c
 8007bf4:	e000ef34 	.word	0xe000ef34

08007bf8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007bf8:	b480      	push	{r7}
 8007bfa:	b083      	sub	sp, #12
 8007bfc:	af00      	add	r7, sp, #0
	__asm volatile
 8007bfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c02:	f383 8811 	msr	BASEPRI, r3
 8007c06:	f3bf 8f6f 	isb	sy
 8007c0a:	f3bf 8f4f 	dsb	sy
 8007c0e:	607b      	str	r3, [r7, #4]
}
 8007c10:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007c12:	4b10      	ldr	r3, [pc, #64]	@ (8007c54 <vPortEnterCritical+0x5c>)
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	3301      	adds	r3, #1
 8007c18:	4a0e      	ldr	r2, [pc, #56]	@ (8007c54 <vPortEnterCritical+0x5c>)
 8007c1a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007c1c:	4b0d      	ldr	r3, [pc, #52]	@ (8007c54 <vPortEnterCritical+0x5c>)
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	2b01      	cmp	r3, #1
 8007c22:	d110      	bne.n	8007c46 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007c24:	4b0c      	ldr	r3, [pc, #48]	@ (8007c58 <vPortEnterCritical+0x60>)
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	b2db      	uxtb	r3, r3
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d00b      	beq.n	8007c46 <vPortEnterCritical+0x4e>
	__asm volatile
 8007c2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c32:	f383 8811 	msr	BASEPRI, r3
 8007c36:	f3bf 8f6f 	isb	sy
 8007c3a:	f3bf 8f4f 	dsb	sy
 8007c3e:	603b      	str	r3, [r7, #0]
}
 8007c40:	bf00      	nop
 8007c42:	bf00      	nop
 8007c44:	e7fd      	b.n	8007c42 <vPortEnterCritical+0x4a>
	}
}
 8007c46:	bf00      	nop
 8007c48:	370c      	adds	r7, #12
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c50:	4770      	bx	lr
 8007c52:	bf00      	nop
 8007c54:	2000001c 	.word	0x2000001c
 8007c58:	e000ed04 	.word	0xe000ed04

08007c5c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007c5c:	b480      	push	{r7}
 8007c5e:	b083      	sub	sp, #12
 8007c60:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007c62:	4b12      	ldr	r3, [pc, #72]	@ (8007cac <vPortExitCritical+0x50>)
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d10b      	bne.n	8007c82 <vPortExitCritical+0x26>
	__asm volatile
 8007c6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c6e:	f383 8811 	msr	BASEPRI, r3
 8007c72:	f3bf 8f6f 	isb	sy
 8007c76:	f3bf 8f4f 	dsb	sy
 8007c7a:	607b      	str	r3, [r7, #4]
}
 8007c7c:	bf00      	nop
 8007c7e:	bf00      	nop
 8007c80:	e7fd      	b.n	8007c7e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007c82:	4b0a      	ldr	r3, [pc, #40]	@ (8007cac <vPortExitCritical+0x50>)
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	3b01      	subs	r3, #1
 8007c88:	4a08      	ldr	r2, [pc, #32]	@ (8007cac <vPortExitCritical+0x50>)
 8007c8a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007c8c:	4b07      	ldr	r3, [pc, #28]	@ (8007cac <vPortExitCritical+0x50>)
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d105      	bne.n	8007ca0 <vPortExitCritical+0x44>
 8007c94:	2300      	movs	r3, #0
 8007c96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	f383 8811 	msr	BASEPRI, r3
}
 8007c9e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007ca0:	bf00      	nop
 8007ca2:	370c      	adds	r7, #12
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007caa:	4770      	bx	lr
 8007cac:	2000001c 	.word	0x2000001c

08007cb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007cb0:	f3ef 8009 	mrs	r0, PSP
 8007cb4:	f3bf 8f6f 	isb	sy
 8007cb8:	4b15      	ldr	r3, [pc, #84]	@ (8007d10 <pxCurrentTCBConst>)
 8007cba:	681a      	ldr	r2, [r3, #0]
 8007cbc:	f01e 0f10 	tst.w	lr, #16
 8007cc0:	bf08      	it	eq
 8007cc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007cc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cca:	6010      	str	r0, [r2, #0]
 8007ccc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007cd0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007cd4:	f380 8811 	msr	BASEPRI, r0
 8007cd8:	f3bf 8f4f 	dsb	sy
 8007cdc:	f3bf 8f6f 	isb	sy
 8007ce0:	f7ff fbd2 	bl	8007488 <vTaskSwitchContext>
 8007ce4:	f04f 0000 	mov.w	r0, #0
 8007ce8:	f380 8811 	msr	BASEPRI, r0
 8007cec:	bc09      	pop	{r0, r3}
 8007cee:	6819      	ldr	r1, [r3, #0]
 8007cf0:	6808      	ldr	r0, [r1, #0]
 8007cf2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cf6:	f01e 0f10 	tst.w	lr, #16
 8007cfa:	bf08      	it	eq
 8007cfc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007d00:	f380 8809 	msr	PSP, r0
 8007d04:	f3bf 8f6f 	isb	sy
 8007d08:	4770      	bx	lr
 8007d0a:	bf00      	nop
 8007d0c:	f3af 8000 	nop.w

08007d10 <pxCurrentTCBConst>:
 8007d10:	200006ec 	.word	0x200006ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007d14:	bf00      	nop
 8007d16:	bf00      	nop

08007d18 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b082      	sub	sp, #8
 8007d1c:	af00      	add	r7, sp, #0
	__asm volatile
 8007d1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d22:	f383 8811 	msr	BASEPRI, r3
 8007d26:	f3bf 8f6f 	isb	sy
 8007d2a:	f3bf 8f4f 	dsb	sy
 8007d2e:	607b      	str	r3, [r7, #4]
}
 8007d30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007d32:	f7ff faeb 	bl	800730c <xTaskIncrementTick>
 8007d36:	4603      	mov	r3, r0
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d003      	beq.n	8007d44 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007d3c:	4b06      	ldr	r3, [pc, #24]	@ (8007d58 <SysTick_Handler+0x40>)
 8007d3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d42:	601a      	str	r2, [r3, #0]
 8007d44:	2300      	movs	r3, #0
 8007d46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	f383 8811 	msr	BASEPRI, r3
}
 8007d4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007d50:	bf00      	nop
 8007d52:	3708      	adds	r7, #8
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bd80      	pop	{r7, pc}
 8007d58:	e000ed04 	.word	0xe000ed04

08007d5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007d5c:	b480      	push	{r7}
 8007d5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007d60:	4b0b      	ldr	r3, [pc, #44]	@ (8007d90 <vPortSetupTimerInterrupt+0x34>)
 8007d62:	2200      	movs	r2, #0
 8007d64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007d66:	4b0b      	ldr	r3, [pc, #44]	@ (8007d94 <vPortSetupTimerInterrupt+0x38>)
 8007d68:	2200      	movs	r2, #0
 8007d6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007d6c:	4b0a      	ldr	r3, [pc, #40]	@ (8007d98 <vPortSetupTimerInterrupt+0x3c>)
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	4a0a      	ldr	r2, [pc, #40]	@ (8007d9c <vPortSetupTimerInterrupt+0x40>)
 8007d72:	fba2 2303 	umull	r2, r3, r2, r3
 8007d76:	099b      	lsrs	r3, r3, #6
 8007d78:	4a09      	ldr	r2, [pc, #36]	@ (8007da0 <vPortSetupTimerInterrupt+0x44>)
 8007d7a:	3b01      	subs	r3, #1
 8007d7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007d7e:	4b04      	ldr	r3, [pc, #16]	@ (8007d90 <vPortSetupTimerInterrupt+0x34>)
 8007d80:	2207      	movs	r2, #7
 8007d82:	601a      	str	r2, [r3, #0]
}
 8007d84:	bf00      	nop
 8007d86:	46bd      	mov	sp, r7
 8007d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8c:	4770      	bx	lr
 8007d8e:	bf00      	nop
 8007d90:	e000e010 	.word	0xe000e010
 8007d94:	e000e018 	.word	0xe000e018
 8007d98:	20000010 	.word	0x20000010
 8007d9c:	10624dd3 	.word	0x10624dd3
 8007da0:	e000e014 	.word	0xe000e014

08007da4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007da4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007db4 <vPortEnableVFP+0x10>
 8007da8:	6801      	ldr	r1, [r0, #0]
 8007daa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8007dae:	6001      	str	r1, [r0, #0]
 8007db0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007db2:	bf00      	nop
 8007db4:	e000ed88 	.word	0xe000ed88

08007db8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007db8:	b480      	push	{r7}
 8007dba:	b085      	sub	sp, #20
 8007dbc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007dbe:	f3ef 8305 	mrs	r3, IPSR
 8007dc2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	2b0f      	cmp	r3, #15
 8007dc8:	d915      	bls.n	8007df6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007dca:	4a18      	ldr	r2, [pc, #96]	@ (8007e2c <vPortValidateInterruptPriority+0x74>)
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	4413      	add	r3, r2
 8007dd0:	781b      	ldrb	r3, [r3, #0]
 8007dd2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007dd4:	4b16      	ldr	r3, [pc, #88]	@ (8007e30 <vPortValidateInterruptPriority+0x78>)
 8007dd6:	781b      	ldrb	r3, [r3, #0]
 8007dd8:	7afa      	ldrb	r2, [r7, #11]
 8007dda:	429a      	cmp	r2, r3
 8007ddc:	d20b      	bcs.n	8007df6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8007dde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007de2:	f383 8811 	msr	BASEPRI, r3
 8007de6:	f3bf 8f6f 	isb	sy
 8007dea:	f3bf 8f4f 	dsb	sy
 8007dee:	607b      	str	r3, [r7, #4]
}
 8007df0:	bf00      	nop
 8007df2:	bf00      	nop
 8007df4:	e7fd      	b.n	8007df2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007df6:	4b0f      	ldr	r3, [pc, #60]	@ (8007e34 <vPortValidateInterruptPriority+0x7c>)
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007dfe:	4b0e      	ldr	r3, [pc, #56]	@ (8007e38 <vPortValidateInterruptPriority+0x80>)
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	429a      	cmp	r2, r3
 8007e04:	d90b      	bls.n	8007e1e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007e06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e0a:	f383 8811 	msr	BASEPRI, r3
 8007e0e:	f3bf 8f6f 	isb	sy
 8007e12:	f3bf 8f4f 	dsb	sy
 8007e16:	603b      	str	r3, [r7, #0]
}
 8007e18:	bf00      	nop
 8007e1a:	bf00      	nop
 8007e1c:	e7fd      	b.n	8007e1a <vPortValidateInterruptPriority+0x62>
	}
 8007e1e:	bf00      	nop
 8007e20:	3714      	adds	r7, #20
 8007e22:	46bd      	mov	sp, r7
 8007e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e28:	4770      	bx	lr
 8007e2a:	bf00      	nop
 8007e2c:	e000e3f0 	.word	0xe000e3f0
 8007e30:	20000818 	.word	0x20000818
 8007e34:	e000ed0c 	.word	0xe000ed0c
 8007e38:	2000081c 	.word	0x2000081c

08007e3c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b08a      	sub	sp, #40	@ 0x28
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007e44:	2300      	movs	r3, #0
 8007e46:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007e48:	f7ff f9b4 	bl	80071b4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007e4c:	4b5a      	ldr	r3, [pc, #360]	@ (8007fb8 <pvPortMalloc+0x17c>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d101      	bne.n	8007e58 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007e54:	f000 f916 	bl	8008084 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007e58:	4b58      	ldr	r3, [pc, #352]	@ (8007fbc <pvPortMalloc+0x180>)
 8007e5a:	681a      	ldr	r2, [r3, #0]
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	4013      	ands	r3, r2
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	f040 8090 	bne.w	8007f86 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d01e      	beq.n	8007eaa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8007e6c:	2208      	movs	r2, #8
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	4413      	add	r3, r2
 8007e72:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	f003 0307 	and.w	r3, r3, #7
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d015      	beq.n	8007eaa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	f023 0307 	bic.w	r3, r3, #7
 8007e84:	3308      	adds	r3, #8
 8007e86:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	f003 0307 	and.w	r3, r3, #7
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d00b      	beq.n	8007eaa <pvPortMalloc+0x6e>
	__asm volatile
 8007e92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e96:	f383 8811 	msr	BASEPRI, r3
 8007e9a:	f3bf 8f6f 	isb	sy
 8007e9e:	f3bf 8f4f 	dsb	sy
 8007ea2:	617b      	str	r3, [r7, #20]
}
 8007ea4:	bf00      	nop
 8007ea6:	bf00      	nop
 8007ea8:	e7fd      	b.n	8007ea6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d06a      	beq.n	8007f86 <pvPortMalloc+0x14a>
 8007eb0:	4b43      	ldr	r3, [pc, #268]	@ (8007fc0 <pvPortMalloc+0x184>)
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	687a      	ldr	r2, [r7, #4]
 8007eb6:	429a      	cmp	r2, r3
 8007eb8:	d865      	bhi.n	8007f86 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007eba:	4b42      	ldr	r3, [pc, #264]	@ (8007fc4 <pvPortMalloc+0x188>)
 8007ebc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007ebe:	4b41      	ldr	r3, [pc, #260]	@ (8007fc4 <pvPortMalloc+0x188>)
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007ec4:	e004      	b.n	8007ed0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ec8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ed2:	685b      	ldr	r3, [r3, #4]
 8007ed4:	687a      	ldr	r2, [r7, #4]
 8007ed6:	429a      	cmp	r2, r3
 8007ed8:	d903      	bls.n	8007ee2 <pvPortMalloc+0xa6>
 8007eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d1f1      	bne.n	8007ec6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007ee2:	4b35      	ldr	r3, [pc, #212]	@ (8007fb8 <pvPortMalloc+0x17c>)
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ee8:	429a      	cmp	r2, r3
 8007eea:	d04c      	beq.n	8007f86 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007eec:	6a3b      	ldr	r3, [r7, #32]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	2208      	movs	r2, #8
 8007ef2:	4413      	add	r3, r2
 8007ef4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ef8:	681a      	ldr	r2, [r3, #0]
 8007efa:	6a3b      	ldr	r3, [r7, #32]
 8007efc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f00:	685a      	ldr	r2, [r3, #4]
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	1ad2      	subs	r2, r2, r3
 8007f06:	2308      	movs	r3, #8
 8007f08:	005b      	lsls	r3, r3, #1
 8007f0a:	429a      	cmp	r2, r3
 8007f0c:	d920      	bls.n	8007f50 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007f0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	4413      	add	r3, r2
 8007f14:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007f16:	69bb      	ldr	r3, [r7, #24]
 8007f18:	f003 0307 	and.w	r3, r3, #7
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d00b      	beq.n	8007f38 <pvPortMalloc+0xfc>
	__asm volatile
 8007f20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f24:	f383 8811 	msr	BASEPRI, r3
 8007f28:	f3bf 8f6f 	isb	sy
 8007f2c:	f3bf 8f4f 	dsb	sy
 8007f30:	613b      	str	r3, [r7, #16]
}
 8007f32:	bf00      	nop
 8007f34:	bf00      	nop
 8007f36:	e7fd      	b.n	8007f34 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007f38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f3a:	685a      	ldr	r2, [r3, #4]
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	1ad2      	subs	r2, r2, r3
 8007f40:	69bb      	ldr	r3, [r7, #24]
 8007f42:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f46:	687a      	ldr	r2, [r7, #4]
 8007f48:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007f4a:	69b8      	ldr	r0, [r7, #24]
 8007f4c:	f000 f8fc 	bl	8008148 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007f50:	4b1b      	ldr	r3, [pc, #108]	@ (8007fc0 <pvPortMalloc+0x184>)
 8007f52:	681a      	ldr	r2, [r3, #0]
 8007f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f56:	685b      	ldr	r3, [r3, #4]
 8007f58:	1ad3      	subs	r3, r2, r3
 8007f5a:	4a19      	ldr	r2, [pc, #100]	@ (8007fc0 <pvPortMalloc+0x184>)
 8007f5c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007f5e:	4b18      	ldr	r3, [pc, #96]	@ (8007fc0 <pvPortMalloc+0x184>)
 8007f60:	681a      	ldr	r2, [r3, #0]
 8007f62:	4b19      	ldr	r3, [pc, #100]	@ (8007fc8 <pvPortMalloc+0x18c>)
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	429a      	cmp	r2, r3
 8007f68:	d203      	bcs.n	8007f72 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007f6a:	4b15      	ldr	r3, [pc, #84]	@ (8007fc0 <pvPortMalloc+0x184>)
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	4a16      	ldr	r2, [pc, #88]	@ (8007fc8 <pvPortMalloc+0x18c>)
 8007f70:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f74:	685a      	ldr	r2, [r3, #4]
 8007f76:	4b11      	ldr	r3, [pc, #68]	@ (8007fbc <pvPortMalloc+0x180>)
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	431a      	orrs	r2, r3
 8007f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f7e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007f80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f82:	2200      	movs	r2, #0
 8007f84:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007f86:	f7ff f923 	bl	80071d0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007f8a:	69fb      	ldr	r3, [r7, #28]
 8007f8c:	f003 0307 	and.w	r3, r3, #7
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d00b      	beq.n	8007fac <pvPortMalloc+0x170>
	__asm volatile
 8007f94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f98:	f383 8811 	msr	BASEPRI, r3
 8007f9c:	f3bf 8f6f 	isb	sy
 8007fa0:	f3bf 8f4f 	dsb	sy
 8007fa4:	60fb      	str	r3, [r7, #12]
}
 8007fa6:	bf00      	nop
 8007fa8:	bf00      	nop
 8007faa:	e7fd      	b.n	8007fa8 <pvPortMalloc+0x16c>
	return pvReturn;
 8007fac:	69fb      	ldr	r3, [r7, #28]
}
 8007fae:	4618      	mov	r0, r3
 8007fb0:	3728      	adds	r7, #40	@ 0x28
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bd80      	pop	{r7, pc}
 8007fb6:	bf00      	nop
 8007fb8:	20003828 	.word	0x20003828
 8007fbc:	20003834 	.word	0x20003834
 8007fc0:	2000382c 	.word	0x2000382c
 8007fc4:	20003820 	.word	0x20003820
 8007fc8:	20003830 	.word	0x20003830

08007fcc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b086      	sub	sp, #24
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d04a      	beq.n	8008074 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007fde:	2308      	movs	r3, #8
 8007fe0:	425b      	negs	r3, r3
 8007fe2:	697a      	ldr	r2, [r7, #20]
 8007fe4:	4413      	add	r3, r2
 8007fe6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007fe8:	697b      	ldr	r3, [r7, #20]
 8007fea:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007fec:	693b      	ldr	r3, [r7, #16]
 8007fee:	685a      	ldr	r2, [r3, #4]
 8007ff0:	4b22      	ldr	r3, [pc, #136]	@ (800807c <vPortFree+0xb0>)
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	4013      	ands	r3, r2
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d10b      	bne.n	8008012 <vPortFree+0x46>
	__asm volatile
 8007ffa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ffe:	f383 8811 	msr	BASEPRI, r3
 8008002:	f3bf 8f6f 	isb	sy
 8008006:	f3bf 8f4f 	dsb	sy
 800800a:	60fb      	str	r3, [r7, #12]
}
 800800c:	bf00      	nop
 800800e:	bf00      	nop
 8008010:	e7fd      	b.n	800800e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008012:	693b      	ldr	r3, [r7, #16]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d00b      	beq.n	8008032 <vPortFree+0x66>
	__asm volatile
 800801a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800801e:	f383 8811 	msr	BASEPRI, r3
 8008022:	f3bf 8f6f 	isb	sy
 8008026:	f3bf 8f4f 	dsb	sy
 800802a:	60bb      	str	r3, [r7, #8]
}
 800802c:	bf00      	nop
 800802e:	bf00      	nop
 8008030:	e7fd      	b.n	800802e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008032:	693b      	ldr	r3, [r7, #16]
 8008034:	685a      	ldr	r2, [r3, #4]
 8008036:	4b11      	ldr	r3, [pc, #68]	@ (800807c <vPortFree+0xb0>)
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	4013      	ands	r3, r2
 800803c:	2b00      	cmp	r3, #0
 800803e:	d019      	beq.n	8008074 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008040:	693b      	ldr	r3, [r7, #16]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d115      	bne.n	8008074 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008048:	693b      	ldr	r3, [r7, #16]
 800804a:	685a      	ldr	r2, [r3, #4]
 800804c:	4b0b      	ldr	r3, [pc, #44]	@ (800807c <vPortFree+0xb0>)
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	43db      	mvns	r3, r3
 8008052:	401a      	ands	r2, r3
 8008054:	693b      	ldr	r3, [r7, #16]
 8008056:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008058:	f7ff f8ac 	bl	80071b4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800805c:	693b      	ldr	r3, [r7, #16]
 800805e:	685a      	ldr	r2, [r3, #4]
 8008060:	4b07      	ldr	r3, [pc, #28]	@ (8008080 <vPortFree+0xb4>)
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	4413      	add	r3, r2
 8008066:	4a06      	ldr	r2, [pc, #24]	@ (8008080 <vPortFree+0xb4>)
 8008068:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800806a:	6938      	ldr	r0, [r7, #16]
 800806c:	f000 f86c 	bl	8008148 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008070:	f7ff f8ae 	bl	80071d0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008074:	bf00      	nop
 8008076:	3718      	adds	r7, #24
 8008078:	46bd      	mov	sp, r7
 800807a:	bd80      	pop	{r7, pc}
 800807c:	20003834 	.word	0x20003834
 8008080:	2000382c 	.word	0x2000382c

08008084 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008084:	b480      	push	{r7}
 8008086:	b085      	sub	sp, #20
 8008088:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800808a:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800808e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008090:	4b27      	ldr	r3, [pc, #156]	@ (8008130 <prvHeapInit+0xac>)
 8008092:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	f003 0307 	and.w	r3, r3, #7
 800809a:	2b00      	cmp	r3, #0
 800809c:	d00c      	beq.n	80080b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	3307      	adds	r3, #7
 80080a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	f023 0307 	bic.w	r3, r3, #7
 80080aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80080ac:	68ba      	ldr	r2, [r7, #8]
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	1ad3      	subs	r3, r2, r3
 80080b2:	4a1f      	ldr	r2, [pc, #124]	@ (8008130 <prvHeapInit+0xac>)
 80080b4:	4413      	add	r3, r2
 80080b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80080bc:	4a1d      	ldr	r2, [pc, #116]	@ (8008134 <prvHeapInit+0xb0>)
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80080c2:	4b1c      	ldr	r3, [pc, #112]	@ (8008134 <prvHeapInit+0xb0>)
 80080c4:	2200      	movs	r2, #0
 80080c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	68ba      	ldr	r2, [r7, #8]
 80080cc:	4413      	add	r3, r2
 80080ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80080d0:	2208      	movs	r2, #8
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	1a9b      	subs	r3, r3, r2
 80080d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	f023 0307 	bic.w	r3, r3, #7
 80080de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	4a15      	ldr	r2, [pc, #84]	@ (8008138 <prvHeapInit+0xb4>)
 80080e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80080e6:	4b14      	ldr	r3, [pc, #80]	@ (8008138 <prvHeapInit+0xb4>)
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	2200      	movs	r2, #0
 80080ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80080ee:	4b12      	ldr	r3, [pc, #72]	@ (8008138 <prvHeapInit+0xb4>)
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	2200      	movs	r2, #0
 80080f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	68fa      	ldr	r2, [r7, #12]
 80080fe:	1ad2      	subs	r2, r2, r3
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008104:	4b0c      	ldr	r3, [pc, #48]	@ (8008138 <prvHeapInit+0xb4>)
 8008106:	681a      	ldr	r2, [r3, #0]
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	685b      	ldr	r3, [r3, #4]
 8008110:	4a0a      	ldr	r2, [pc, #40]	@ (800813c <prvHeapInit+0xb8>)
 8008112:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	685b      	ldr	r3, [r3, #4]
 8008118:	4a09      	ldr	r2, [pc, #36]	@ (8008140 <prvHeapInit+0xbc>)
 800811a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800811c:	4b09      	ldr	r3, [pc, #36]	@ (8008144 <prvHeapInit+0xc0>)
 800811e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008122:	601a      	str	r2, [r3, #0]
}
 8008124:	bf00      	nop
 8008126:	3714      	adds	r7, #20
 8008128:	46bd      	mov	sp, r7
 800812a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812e:	4770      	bx	lr
 8008130:	20000820 	.word	0x20000820
 8008134:	20003820 	.word	0x20003820
 8008138:	20003828 	.word	0x20003828
 800813c:	20003830 	.word	0x20003830
 8008140:	2000382c 	.word	0x2000382c
 8008144:	20003834 	.word	0x20003834

08008148 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008148:	b480      	push	{r7}
 800814a:	b085      	sub	sp, #20
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008150:	4b28      	ldr	r3, [pc, #160]	@ (80081f4 <prvInsertBlockIntoFreeList+0xac>)
 8008152:	60fb      	str	r3, [r7, #12]
 8008154:	e002      	b.n	800815c <prvInsertBlockIntoFreeList+0x14>
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	60fb      	str	r3, [r7, #12]
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	687a      	ldr	r2, [r7, #4]
 8008162:	429a      	cmp	r2, r3
 8008164:	d8f7      	bhi.n	8008156 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	685b      	ldr	r3, [r3, #4]
 800816e:	68ba      	ldr	r2, [r7, #8]
 8008170:	4413      	add	r3, r2
 8008172:	687a      	ldr	r2, [r7, #4]
 8008174:	429a      	cmp	r2, r3
 8008176:	d108      	bne.n	800818a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	685a      	ldr	r2, [r3, #4]
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	685b      	ldr	r3, [r3, #4]
 8008180:	441a      	add	r2, r3
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	685b      	ldr	r3, [r3, #4]
 8008192:	68ba      	ldr	r2, [r7, #8]
 8008194:	441a      	add	r2, r3
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	429a      	cmp	r2, r3
 800819c:	d118      	bne.n	80081d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	681a      	ldr	r2, [r3, #0]
 80081a2:	4b15      	ldr	r3, [pc, #84]	@ (80081f8 <prvInsertBlockIntoFreeList+0xb0>)
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	429a      	cmp	r2, r3
 80081a8:	d00d      	beq.n	80081c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	685a      	ldr	r2, [r3, #4]
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	685b      	ldr	r3, [r3, #4]
 80081b4:	441a      	add	r2, r3
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	681a      	ldr	r2, [r3, #0]
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	601a      	str	r2, [r3, #0]
 80081c4:	e008      	b.n	80081d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80081c6:	4b0c      	ldr	r3, [pc, #48]	@ (80081f8 <prvInsertBlockIntoFreeList+0xb0>)
 80081c8:	681a      	ldr	r2, [r3, #0]
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	601a      	str	r2, [r3, #0]
 80081ce:	e003      	b.n	80081d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	681a      	ldr	r2, [r3, #0]
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80081d8:	68fa      	ldr	r2, [r7, #12]
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	429a      	cmp	r2, r3
 80081de:	d002      	beq.n	80081e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	687a      	ldr	r2, [r7, #4]
 80081e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80081e6:	bf00      	nop
 80081e8:	3714      	adds	r7, #20
 80081ea:	46bd      	mov	sp, r7
 80081ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f0:	4770      	bx	lr
 80081f2:	bf00      	nop
 80081f4:	20003820 	.word	0x20003820
 80081f8:	20003828 	.word	0x20003828

080081fc <__cvt>:
 80081fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008200:	ec57 6b10 	vmov	r6, r7, d0
 8008204:	2f00      	cmp	r7, #0
 8008206:	460c      	mov	r4, r1
 8008208:	4619      	mov	r1, r3
 800820a:	463b      	mov	r3, r7
 800820c:	bfbb      	ittet	lt
 800820e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8008212:	461f      	movlt	r7, r3
 8008214:	2300      	movge	r3, #0
 8008216:	232d      	movlt	r3, #45	@ 0x2d
 8008218:	700b      	strb	r3, [r1, #0]
 800821a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800821c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008220:	4691      	mov	r9, r2
 8008222:	f023 0820 	bic.w	r8, r3, #32
 8008226:	bfbc      	itt	lt
 8008228:	4632      	movlt	r2, r6
 800822a:	4616      	movlt	r6, r2
 800822c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008230:	d005      	beq.n	800823e <__cvt+0x42>
 8008232:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008236:	d100      	bne.n	800823a <__cvt+0x3e>
 8008238:	3401      	adds	r4, #1
 800823a:	2102      	movs	r1, #2
 800823c:	e000      	b.n	8008240 <__cvt+0x44>
 800823e:	2103      	movs	r1, #3
 8008240:	ab03      	add	r3, sp, #12
 8008242:	9301      	str	r3, [sp, #4]
 8008244:	ab02      	add	r3, sp, #8
 8008246:	9300      	str	r3, [sp, #0]
 8008248:	ec47 6b10 	vmov	d0, r6, r7
 800824c:	4653      	mov	r3, sl
 800824e:	4622      	mov	r2, r4
 8008250:	f000 fe7e 	bl	8008f50 <_dtoa_r>
 8008254:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008258:	4605      	mov	r5, r0
 800825a:	d119      	bne.n	8008290 <__cvt+0x94>
 800825c:	f019 0f01 	tst.w	r9, #1
 8008260:	d00e      	beq.n	8008280 <__cvt+0x84>
 8008262:	eb00 0904 	add.w	r9, r0, r4
 8008266:	2200      	movs	r2, #0
 8008268:	2300      	movs	r3, #0
 800826a:	4630      	mov	r0, r6
 800826c:	4639      	mov	r1, r7
 800826e:	f7f8 fc2b 	bl	8000ac8 <__aeabi_dcmpeq>
 8008272:	b108      	cbz	r0, 8008278 <__cvt+0x7c>
 8008274:	f8cd 900c 	str.w	r9, [sp, #12]
 8008278:	2230      	movs	r2, #48	@ 0x30
 800827a:	9b03      	ldr	r3, [sp, #12]
 800827c:	454b      	cmp	r3, r9
 800827e:	d31e      	bcc.n	80082be <__cvt+0xc2>
 8008280:	9b03      	ldr	r3, [sp, #12]
 8008282:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008284:	1b5b      	subs	r3, r3, r5
 8008286:	4628      	mov	r0, r5
 8008288:	6013      	str	r3, [r2, #0]
 800828a:	b004      	add	sp, #16
 800828c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008290:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008294:	eb00 0904 	add.w	r9, r0, r4
 8008298:	d1e5      	bne.n	8008266 <__cvt+0x6a>
 800829a:	7803      	ldrb	r3, [r0, #0]
 800829c:	2b30      	cmp	r3, #48	@ 0x30
 800829e:	d10a      	bne.n	80082b6 <__cvt+0xba>
 80082a0:	2200      	movs	r2, #0
 80082a2:	2300      	movs	r3, #0
 80082a4:	4630      	mov	r0, r6
 80082a6:	4639      	mov	r1, r7
 80082a8:	f7f8 fc0e 	bl	8000ac8 <__aeabi_dcmpeq>
 80082ac:	b918      	cbnz	r0, 80082b6 <__cvt+0xba>
 80082ae:	f1c4 0401 	rsb	r4, r4, #1
 80082b2:	f8ca 4000 	str.w	r4, [sl]
 80082b6:	f8da 3000 	ldr.w	r3, [sl]
 80082ba:	4499      	add	r9, r3
 80082bc:	e7d3      	b.n	8008266 <__cvt+0x6a>
 80082be:	1c59      	adds	r1, r3, #1
 80082c0:	9103      	str	r1, [sp, #12]
 80082c2:	701a      	strb	r2, [r3, #0]
 80082c4:	e7d9      	b.n	800827a <__cvt+0x7e>

080082c6 <__exponent>:
 80082c6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80082c8:	2900      	cmp	r1, #0
 80082ca:	bfba      	itte	lt
 80082cc:	4249      	neglt	r1, r1
 80082ce:	232d      	movlt	r3, #45	@ 0x2d
 80082d0:	232b      	movge	r3, #43	@ 0x2b
 80082d2:	2909      	cmp	r1, #9
 80082d4:	7002      	strb	r2, [r0, #0]
 80082d6:	7043      	strb	r3, [r0, #1]
 80082d8:	dd29      	ble.n	800832e <__exponent+0x68>
 80082da:	f10d 0307 	add.w	r3, sp, #7
 80082de:	461d      	mov	r5, r3
 80082e0:	270a      	movs	r7, #10
 80082e2:	461a      	mov	r2, r3
 80082e4:	fbb1 f6f7 	udiv	r6, r1, r7
 80082e8:	fb07 1416 	mls	r4, r7, r6, r1
 80082ec:	3430      	adds	r4, #48	@ 0x30
 80082ee:	f802 4c01 	strb.w	r4, [r2, #-1]
 80082f2:	460c      	mov	r4, r1
 80082f4:	2c63      	cmp	r4, #99	@ 0x63
 80082f6:	f103 33ff 	add.w	r3, r3, #4294967295
 80082fa:	4631      	mov	r1, r6
 80082fc:	dcf1      	bgt.n	80082e2 <__exponent+0x1c>
 80082fe:	3130      	adds	r1, #48	@ 0x30
 8008300:	1e94      	subs	r4, r2, #2
 8008302:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008306:	1c41      	adds	r1, r0, #1
 8008308:	4623      	mov	r3, r4
 800830a:	42ab      	cmp	r3, r5
 800830c:	d30a      	bcc.n	8008324 <__exponent+0x5e>
 800830e:	f10d 0309 	add.w	r3, sp, #9
 8008312:	1a9b      	subs	r3, r3, r2
 8008314:	42ac      	cmp	r4, r5
 8008316:	bf88      	it	hi
 8008318:	2300      	movhi	r3, #0
 800831a:	3302      	adds	r3, #2
 800831c:	4403      	add	r3, r0
 800831e:	1a18      	subs	r0, r3, r0
 8008320:	b003      	add	sp, #12
 8008322:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008324:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008328:	f801 6f01 	strb.w	r6, [r1, #1]!
 800832c:	e7ed      	b.n	800830a <__exponent+0x44>
 800832e:	2330      	movs	r3, #48	@ 0x30
 8008330:	3130      	adds	r1, #48	@ 0x30
 8008332:	7083      	strb	r3, [r0, #2]
 8008334:	70c1      	strb	r1, [r0, #3]
 8008336:	1d03      	adds	r3, r0, #4
 8008338:	e7f1      	b.n	800831e <__exponent+0x58>
	...

0800833c <_printf_float>:
 800833c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008340:	b08d      	sub	sp, #52	@ 0x34
 8008342:	460c      	mov	r4, r1
 8008344:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008348:	4616      	mov	r6, r2
 800834a:	461f      	mov	r7, r3
 800834c:	4605      	mov	r5, r0
 800834e:	f000 fcef 	bl	8008d30 <_localeconv_r>
 8008352:	6803      	ldr	r3, [r0, #0]
 8008354:	9304      	str	r3, [sp, #16]
 8008356:	4618      	mov	r0, r3
 8008358:	f7f7 ff8a 	bl	8000270 <strlen>
 800835c:	2300      	movs	r3, #0
 800835e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008360:	f8d8 3000 	ldr.w	r3, [r8]
 8008364:	9005      	str	r0, [sp, #20]
 8008366:	3307      	adds	r3, #7
 8008368:	f023 0307 	bic.w	r3, r3, #7
 800836c:	f103 0208 	add.w	r2, r3, #8
 8008370:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008374:	f8d4 b000 	ldr.w	fp, [r4]
 8008378:	f8c8 2000 	str.w	r2, [r8]
 800837c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008380:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008384:	9307      	str	r3, [sp, #28]
 8008386:	f8cd 8018 	str.w	r8, [sp, #24]
 800838a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800838e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008392:	4b9c      	ldr	r3, [pc, #624]	@ (8008604 <_printf_float+0x2c8>)
 8008394:	f04f 32ff 	mov.w	r2, #4294967295
 8008398:	f7f8 fbc8 	bl	8000b2c <__aeabi_dcmpun>
 800839c:	bb70      	cbnz	r0, 80083fc <_printf_float+0xc0>
 800839e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80083a2:	4b98      	ldr	r3, [pc, #608]	@ (8008604 <_printf_float+0x2c8>)
 80083a4:	f04f 32ff 	mov.w	r2, #4294967295
 80083a8:	f7f8 fba2 	bl	8000af0 <__aeabi_dcmple>
 80083ac:	bb30      	cbnz	r0, 80083fc <_printf_float+0xc0>
 80083ae:	2200      	movs	r2, #0
 80083b0:	2300      	movs	r3, #0
 80083b2:	4640      	mov	r0, r8
 80083b4:	4649      	mov	r1, r9
 80083b6:	f7f8 fb91 	bl	8000adc <__aeabi_dcmplt>
 80083ba:	b110      	cbz	r0, 80083c2 <_printf_float+0x86>
 80083bc:	232d      	movs	r3, #45	@ 0x2d
 80083be:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80083c2:	4a91      	ldr	r2, [pc, #580]	@ (8008608 <_printf_float+0x2cc>)
 80083c4:	4b91      	ldr	r3, [pc, #580]	@ (800860c <_printf_float+0x2d0>)
 80083c6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80083ca:	bf94      	ite	ls
 80083cc:	4690      	movls	r8, r2
 80083ce:	4698      	movhi	r8, r3
 80083d0:	2303      	movs	r3, #3
 80083d2:	6123      	str	r3, [r4, #16]
 80083d4:	f02b 0304 	bic.w	r3, fp, #4
 80083d8:	6023      	str	r3, [r4, #0]
 80083da:	f04f 0900 	mov.w	r9, #0
 80083de:	9700      	str	r7, [sp, #0]
 80083e0:	4633      	mov	r3, r6
 80083e2:	aa0b      	add	r2, sp, #44	@ 0x2c
 80083e4:	4621      	mov	r1, r4
 80083e6:	4628      	mov	r0, r5
 80083e8:	f000 f9d2 	bl	8008790 <_printf_common>
 80083ec:	3001      	adds	r0, #1
 80083ee:	f040 808d 	bne.w	800850c <_printf_float+0x1d0>
 80083f2:	f04f 30ff 	mov.w	r0, #4294967295
 80083f6:	b00d      	add	sp, #52	@ 0x34
 80083f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083fc:	4642      	mov	r2, r8
 80083fe:	464b      	mov	r3, r9
 8008400:	4640      	mov	r0, r8
 8008402:	4649      	mov	r1, r9
 8008404:	f7f8 fb92 	bl	8000b2c <__aeabi_dcmpun>
 8008408:	b140      	cbz	r0, 800841c <_printf_float+0xe0>
 800840a:	464b      	mov	r3, r9
 800840c:	2b00      	cmp	r3, #0
 800840e:	bfbc      	itt	lt
 8008410:	232d      	movlt	r3, #45	@ 0x2d
 8008412:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008416:	4a7e      	ldr	r2, [pc, #504]	@ (8008610 <_printf_float+0x2d4>)
 8008418:	4b7e      	ldr	r3, [pc, #504]	@ (8008614 <_printf_float+0x2d8>)
 800841a:	e7d4      	b.n	80083c6 <_printf_float+0x8a>
 800841c:	6863      	ldr	r3, [r4, #4]
 800841e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8008422:	9206      	str	r2, [sp, #24]
 8008424:	1c5a      	adds	r2, r3, #1
 8008426:	d13b      	bne.n	80084a0 <_printf_float+0x164>
 8008428:	2306      	movs	r3, #6
 800842a:	6063      	str	r3, [r4, #4]
 800842c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008430:	2300      	movs	r3, #0
 8008432:	6022      	str	r2, [r4, #0]
 8008434:	9303      	str	r3, [sp, #12]
 8008436:	ab0a      	add	r3, sp, #40	@ 0x28
 8008438:	e9cd a301 	strd	sl, r3, [sp, #4]
 800843c:	ab09      	add	r3, sp, #36	@ 0x24
 800843e:	9300      	str	r3, [sp, #0]
 8008440:	6861      	ldr	r1, [r4, #4]
 8008442:	ec49 8b10 	vmov	d0, r8, r9
 8008446:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800844a:	4628      	mov	r0, r5
 800844c:	f7ff fed6 	bl	80081fc <__cvt>
 8008450:	9b06      	ldr	r3, [sp, #24]
 8008452:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008454:	2b47      	cmp	r3, #71	@ 0x47
 8008456:	4680      	mov	r8, r0
 8008458:	d129      	bne.n	80084ae <_printf_float+0x172>
 800845a:	1cc8      	adds	r0, r1, #3
 800845c:	db02      	blt.n	8008464 <_printf_float+0x128>
 800845e:	6863      	ldr	r3, [r4, #4]
 8008460:	4299      	cmp	r1, r3
 8008462:	dd41      	ble.n	80084e8 <_printf_float+0x1ac>
 8008464:	f1aa 0a02 	sub.w	sl, sl, #2
 8008468:	fa5f fa8a 	uxtb.w	sl, sl
 800846c:	3901      	subs	r1, #1
 800846e:	4652      	mov	r2, sl
 8008470:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008474:	9109      	str	r1, [sp, #36]	@ 0x24
 8008476:	f7ff ff26 	bl	80082c6 <__exponent>
 800847a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800847c:	1813      	adds	r3, r2, r0
 800847e:	2a01      	cmp	r2, #1
 8008480:	4681      	mov	r9, r0
 8008482:	6123      	str	r3, [r4, #16]
 8008484:	dc02      	bgt.n	800848c <_printf_float+0x150>
 8008486:	6822      	ldr	r2, [r4, #0]
 8008488:	07d2      	lsls	r2, r2, #31
 800848a:	d501      	bpl.n	8008490 <_printf_float+0x154>
 800848c:	3301      	adds	r3, #1
 800848e:	6123      	str	r3, [r4, #16]
 8008490:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008494:	2b00      	cmp	r3, #0
 8008496:	d0a2      	beq.n	80083de <_printf_float+0xa2>
 8008498:	232d      	movs	r3, #45	@ 0x2d
 800849a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800849e:	e79e      	b.n	80083de <_printf_float+0xa2>
 80084a0:	9a06      	ldr	r2, [sp, #24]
 80084a2:	2a47      	cmp	r2, #71	@ 0x47
 80084a4:	d1c2      	bne.n	800842c <_printf_float+0xf0>
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d1c0      	bne.n	800842c <_printf_float+0xf0>
 80084aa:	2301      	movs	r3, #1
 80084ac:	e7bd      	b.n	800842a <_printf_float+0xee>
 80084ae:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80084b2:	d9db      	bls.n	800846c <_printf_float+0x130>
 80084b4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80084b8:	d118      	bne.n	80084ec <_printf_float+0x1b0>
 80084ba:	2900      	cmp	r1, #0
 80084bc:	6863      	ldr	r3, [r4, #4]
 80084be:	dd0b      	ble.n	80084d8 <_printf_float+0x19c>
 80084c0:	6121      	str	r1, [r4, #16]
 80084c2:	b913      	cbnz	r3, 80084ca <_printf_float+0x18e>
 80084c4:	6822      	ldr	r2, [r4, #0]
 80084c6:	07d0      	lsls	r0, r2, #31
 80084c8:	d502      	bpl.n	80084d0 <_printf_float+0x194>
 80084ca:	3301      	adds	r3, #1
 80084cc:	440b      	add	r3, r1
 80084ce:	6123      	str	r3, [r4, #16]
 80084d0:	65a1      	str	r1, [r4, #88]	@ 0x58
 80084d2:	f04f 0900 	mov.w	r9, #0
 80084d6:	e7db      	b.n	8008490 <_printf_float+0x154>
 80084d8:	b913      	cbnz	r3, 80084e0 <_printf_float+0x1a4>
 80084da:	6822      	ldr	r2, [r4, #0]
 80084dc:	07d2      	lsls	r2, r2, #31
 80084de:	d501      	bpl.n	80084e4 <_printf_float+0x1a8>
 80084e0:	3302      	adds	r3, #2
 80084e2:	e7f4      	b.n	80084ce <_printf_float+0x192>
 80084e4:	2301      	movs	r3, #1
 80084e6:	e7f2      	b.n	80084ce <_printf_float+0x192>
 80084e8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80084ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80084ee:	4299      	cmp	r1, r3
 80084f0:	db05      	blt.n	80084fe <_printf_float+0x1c2>
 80084f2:	6823      	ldr	r3, [r4, #0]
 80084f4:	6121      	str	r1, [r4, #16]
 80084f6:	07d8      	lsls	r0, r3, #31
 80084f8:	d5ea      	bpl.n	80084d0 <_printf_float+0x194>
 80084fa:	1c4b      	adds	r3, r1, #1
 80084fc:	e7e7      	b.n	80084ce <_printf_float+0x192>
 80084fe:	2900      	cmp	r1, #0
 8008500:	bfd4      	ite	le
 8008502:	f1c1 0202 	rsble	r2, r1, #2
 8008506:	2201      	movgt	r2, #1
 8008508:	4413      	add	r3, r2
 800850a:	e7e0      	b.n	80084ce <_printf_float+0x192>
 800850c:	6823      	ldr	r3, [r4, #0]
 800850e:	055a      	lsls	r2, r3, #21
 8008510:	d407      	bmi.n	8008522 <_printf_float+0x1e6>
 8008512:	6923      	ldr	r3, [r4, #16]
 8008514:	4642      	mov	r2, r8
 8008516:	4631      	mov	r1, r6
 8008518:	4628      	mov	r0, r5
 800851a:	47b8      	blx	r7
 800851c:	3001      	adds	r0, #1
 800851e:	d12b      	bne.n	8008578 <_printf_float+0x23c>
 8008520:	e767      	b.n	80083f2 <_printf_float+0xb6>
 8008522:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008526:	f240 80dd 	bls.w	80086e4 <_printf_float+0x3a8>
 800852a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800852e:	2200      	movs	r2, #0
 8008530:	2300      	movs	r3, #0
 8008532:	f7f8 fac9 	bl	8000ac8 <__aeabi_dcmpeq>
 8008536:	2800      	cmp	r0, #0
 8008538:	d033      	beq.n	80085a2 <_printf_float+0x266>
 800853a:	4a37      	ldr	r2, [pc, #220]	@ (8008618 <_printf_float+0x2dc>)
 800853c:	2301      	movs	r3, #1
 800853e:	4631      	mov	r1, r6
 8008540:	4628      	mov	r0, r5
 8008542:	47b8      	blx	r7
 8008544:	3001      	adds	r0, #1
 8008546:	f43f af54 	beq.w	80083f2 <_printf_float+0xb6>
 800854a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800854e:	4543      	cmp	r3, r8
 8008550:	db02      	blt.n	8008558 <_printf_float+0x21c>
 8008552:	6823      	ldr	r3, [r4, #0]
 8008554:	07d8      	lsls	r0, r3, #31
 8008556:	d50f      	bpl.n	8008578 <_printf_float+0x23c>
 8008558:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800855c:	4631      	mov	r1, r6
 800855e:	4628      	mov	r0, r5
 8008560:	47b8      	blx	r7
 8008562:	3001      	adds	r0, #1
 8008564:	f43f af45 	beq.w	80083f2 <_printf_float+0xb6>
 8008568:	f04f 0900 	mov.w	r9, #0
 800856c:	f108 38ff 	add.w	r8, r8, #4294967295
 8008570:	f104 0a1a 	add.w	sl, r4, #26
 8008574:	45c8      	cmp	r8, r9
 8008576:	dc09      	bgt.n	800858c <_printf_float+0x250>
 8008578:	6823      	ldr	r3, [r4, #0]
 800857a:	079b      	lsls	r3, r3, #30
 800857c:	f100 8103 	bmi.w	8008786 <_printf_float+0x44a>
 8008580:	68e0      	ldr	r0, [r4, #12]
 8008582:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008584:	4298      	cmp	r0, r3
 8008586:	bfb8      	it	lt
 8008588:	4618      	movlt	r0, r3
 800858a:	e734      	b.n	80083f6 <_printf_float+0xba>
 800858c:	2301      	movs	r3, #1
 800858e:	4652      	mov	r2, sl
 8008590:	4631      	mov	r1, r6
 8008592:	4628      	mov	r0, r5
 8008594:	47b8      	blx	r7
 8008596:	3001      	adds	r0, #1
 8008598:	f43f af2b 	beq.w	80083f2 <_printf_float+0xb6>
 800859c:	f109 0901 	add.w	r9, r9, #1
 80085a0:	e7e8      	b.n	8008574 <_printf_float+0x238>
 80085a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	dc39      	bgt.n	800861c <_printf_float+0x2e0>
 80085a8:	4a1b      	ldr	r2, [pc, #108]	@ (8008618 <_printf_float+0x2dc>)
 80085aa:	2301      	movs	r3, #1
 80085ac:	4631      	mov	r1, r6
 80085ae:	4628      	mov	r0, r5
 80085b0:	47b8      	blx	r7
 80085b2:	3001      	adds	r0, #1
 80085b4:	f43f af1d 	beq.w	80083f2 <_printf_float+0xb6>
 80085b8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80085bc:	ea59 0303 	orrs.w	r3, r9, r3
 80085c0:	d102      	bne.n	80085c8 <_printf_float+0x28c>
 80085c2:	6823      	ldr	r3, [r4, #0]
 80085c4:	07d9      	lsls	r1, r3, #31
 80085c6:	d5d7      	bpl.n	8008578 <_printf_float+0x23c>
 80085c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80085cc:	4631      	mov	r1, r6
 80085ce:	4628      	mov	r0, r5
 80085d0:	47b8      	blx	r7
 80085d2:	3001      	adds	r0, #1
 80085d4:	f43f af0d 	beq.w	80083f2 <_printf_float+0xb6>
 80085d8:	f04f 0a00 	mov.w	sl, #0
 80085dc:	f104 0b1a 	add.w	fp, r4, #26
 80085e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085e2:	425b      	negs	r3, r3
 80085e4:	4553      	cmp	r3, sl
 80085e6:	dc01      	bgt.n	80085ec <_printf_float+0x2b0>
 80085e8:	464b      	mov	r3, r9
 80085ea:	e793      	b.n	8008514 <_printf_float+0x1d8>
 80085ec:	2301      	movs	r3, #1
 80085ee:	465a      	mov	r2, fp
 80085f0:	4631      	mov	r1, r6
 80085f2:	4628      	mov	r0, r5
 80085f4:	47b8      	blx	r7
 80085f6:	3001      	adds	r0, #1
 80085f8:	f43f aefb 	beq.w	80083f2 <_printf_float+0xb6>
 80085fc:	f10a 0a01 	add.w	sl, sl, #1
 8008600:	e7ee      	b.n	80085e0 <_printf_float+0x2a4>
 8008602:	bf00      	nop
 8008604:	7fefffff 	.word	0x7fefffff
 8008608:	0800b0a8 	.word	0x0800b0a8
 800860c:	0800b0ac 	.word	0x0800b0ac
 8008610:	0800b0b0 	.word	0x0800b0b0
 8008614:	0800b0b4 	.word	0x0800b0b4
 8008618:	0800b0b8 	.word	0x0800b0b8
 800861c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800861e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008622:	4553      	cmp	r3, sl
 8008624:	bfa8      	it	ge
 8008626:	4653      	movge	r3, sl
 8008628:	2b00      	cmp	r3, #0
 800862a:	4699      	mov	r9, r3
 800862c:	dc36      	bgt.n	800869c <_printf_float+0x360>
 800862e:	f04f 0b00 	mov.w	fp, #0
 8008632:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008636:	f104 021a 	add.w	r2, r4, #26
 800863a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800863c:	9306      	str	r3, [sp, #24]
 800863e:	eba3 0309 	sub.w	r3, r3, r9
 8008642:	455b      	cmp	r3, fp
 8008644:	dc31      	bgt.n	80086aa <_printf_float+0x36e>
 8008646:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008648:	459a      	cmp	sl, r3
 800864a:	dc3a      	bgt.n	80086c2 <_printf_float+0x386>
 800864c:	6823      	ldr	r3, [r4, #0]
 800864e:	07da      	lsls	r2, r3, #31
 8008650:	d437      	bmi.n	80086c2 <_printf_float+0x386>
 8008652:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008654:	ebaa 0903 	sub.w	r9, sl, r3
 8008658:	9b06      	ldr	r3, [sp, #24]
 800865a:	ebaa 0303 	sub.w	r3, sl, r3
 800865e:	4599      	cmp	r9, r3
 8008660:	bfa8      	it	ge
 8008662:	4699      	movge	r9, r3
 8008664:	f1b9 0f00 	cmp.w	r9, #0
 8008668:	dc33      	bgt.n	80086d2 <_printf_float+0x396>
 800866a:	f04f 0800 	mov.w	r8, #0
 800866e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008672:	f104 0b1a 	add.w	fp, r4, #26
 8008676:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008678:	ebaa 0303 	sub.w	r3, sl, r3
 800867c:	eba3 0309 	sub.w	r3, r3, r9
 8008680:	4543      	cmp	r3, r8
 8008682:	f77f af79 	ble.w	8008578 <_printf_float+0x23c>
 8008686:	2301      	movs	r3, #1
 8008688:	465a      	mov	r2, fp
 800868a:	4631      	mov	r1, r6
 800868c:	4628      	mov	r0, r5
 800868e:	47b8      	blx	r7
 8008690:	3001      	adds	r0, #1
 8008692:	f43f aeae 	beq.w	80083f2 <_printf_float+0xb6>
 8008696:	f108 0801 	add.w	r8, r8, #1
 800869a:	e7ec      	b.n	8008676 <_printf_float+0x33a>
 800869c:	4642      	mov	r2, r8
 800869e:	4631      	mov	r1, r6
 80086a0:	4628      	mov	r0, r5
 80086a2:	47b8      	blx	r7
 80086a4:	3001      	adds	r0, #1
 80086a6:	d1c2      	bne.n	800862e <_printf_float+0x2f2>
 80086a8:	e6a3      	b.n	80083f2 <_printf_float+0xb6>
 80086aa:	2301      	movs	r3, #1
 80086ac:	4631      	mov	r1, r6
 80086ae:	4628      	mov	r0, r5
 80086b0:	9206      	str	r2, [sp, #24]
 80086b2:	47b8      	blx	r7
 80086b4:	3001      	adds	r0, #1
 80086b6:	f43f ae9c 	beq.w	80083f2 <_printf_float+0xb6>
 80086ba:	9a06      	ldr	r2, [sp, #24]
 80086bc:	f10b 0b01 	add.w	fp, fp, #1
 80086c0:	e7bb      	b.n	800863a <_printf_float+0x2fe>
 80086c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80086c6:	4631      	mov	r1, r6
 80086c8:	4628      	mov	r0, r5
 80086ca:	47b8      	blx	r7
 80086cc:	3001      	adds	r0, #1
 80086ce:	d1c0      	bne.n	8008652 <_printf_float+0x316>
 80086d0:	e68f      	b.n	80083f2 <_printf_float+0xb6>
 80086d2:	9a06      	ldr	r2, [sp, #24]
 80086d4:	464b      	mov	r3, r9
 80086d6:	4442      	add	r2, r8
 80086d8:	4631      	mov	r1, r6
 80086da:	4628      	mov	r0, r5
 80086dc:	47b8      	blx	r7
 80086de:	3001      	adds	r0, #1
 80086e0:	d1c3      	bne.n	800866a <_printf_float+0x32e>
 80086e2:	e686      	b.n	80083f2 <_printf_float+0xb6>
 80086e4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80086e8:	f1ba 0f01 	cmp.w	sl, #1
 80086ec:	dc01      	bgt.n	80086f2 <_printf_float+0x3b6>
 80086ee:	07db      	lsls	r3, r3, #31
 80086f0:	d536      	bpl.n	8008760 <_printf_float+0x424>
 80086f2:	2301      	movs	r3, #1
 80086f4:	4642      	mov	r2, r8
 80086f6:	4631      	mov	r1, r6
 80086f8:	4628      	mov	r0, r5
 80086fa:	47b8      	blx	r7
 80086fc:	3001      	adds	r0, #1
 80086fe:	f43f ae78 	beq.w	80083f2 <_printf_float+0xb6>
 8008702:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008706:	4631      	mov	r1, r6
 8008708:	4628      	mov	r0, r5
 800870a:	47b8      	blx	r7
 800870c:	3001      	adds	r0, #1
 800870e:	f43f ae70 	beq.w	80083f2 <_printf_float+0xb6>
 8008712:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008716:	2200      	movs	r2, #0
 8008718:	2300      	movs	r3, #0
 800871a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800871e:	f7f8 f9d3 	bl	8000ac8 <__aeabi_dcmpeq>
 8008722:	b9c0      	cbnz	r0, 8008756 <_printf_float+0x41a>
 8008724:	4653      	mov	r3, sl
 8008726:	f108 0201 	add.w	r2, r8, #1
 800872a:	4631      	mov	r1, r6
 800872c:	4628      	mov	r0, r5
 800872e:	47b8      	blx	r7
 8008730:	3001      	adds	r0, #1
 8008732:	d10c      	bne.n	800874e <_printf_float+0x412>
 8008734:	e65d      	b.n	80083f2 <_printf_float+0xb6>
 8008736:	2301      	movs	r3, #1
 8008738:	465a      	mov	r2, fp
 800873a:	4631      	mov	r1, r6
 800873c:	4628      	mov	r0, r5
 800873e:	47b8      	blx	r7
 8008740:	3001      	adds	r0, #1
 8008742:	f43f ae56 	beq.w	80083f2 <_printf_float+0xb6>
 8008746:	f108 0801 	add.w	r8, r8, #1
 800874a:	45d0      	cmp	r8, sl
 800874c:	dbf3      	blt.n	8008736 <_printf_float+0x3fa>
 800874e:	464b      	mov	r3, r9
 8008750:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008754:	e6df      	b.n	8008516 <_printf_float+0x1da>
 8008756:	f04f 0800 	mov.w	r8, #0
 800875a:	f104 0b1a 	add.w	fp, r4, #26
 800875e:	e7f4      	b.n	800874a <_printf_float+0x40e>
 8008760:	2301      	movs	r3, #1
 8008762:	4642      	mov	r2, r8
 8008764:	e7e1      	b.n	800872a <_printf_float+0x3ee>
 8008766:	2301      	movs	r3, #1
 8008768:	464a      	mov	r2, r9
 800876a:	4631      	mov	r1, r6
 800876c:	4628      	mov	r0, r5
 800876e:	47b8      	blx	r7
 8008770:	3001      	adds	r0, #1
 8008772:	f43f ae3e 	beq.w	80083f2 <_printf_float+0xb6>
 8008776:	f108 0801 	add.w	r8, r8, #1
 800877a:	68e3      	ldr	r3, [r4, #12]
 800877c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800877e:	1a5b      	subs	r3, r3, r1
 8008780:	4543      	cmp	r3, r8
 8008782:	dcf0      	bgt.n	8008766 <_printf_float+0x42a>
 8008784:	e6fc      	b.n	8008580 <_printf_float+0x244>
 8008786:	f04f 0800 	mov.w	r8, #0
 800878a:	f104 0919 	add.w	r9, r4, #25
 800878e:	e7f4      	b.n	800877a <_printf_float+0x43e>

08008790 <_printf_common>:
 8008790:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008794:	4616      	mov	r6, r2
 8008796:	4698      	mov	r8, r3
 8008798:	688a      	ldr	r2, [r1, #8]
 800879a:	690b      	ldr	r3, [r1, #16]
 800879c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80087a0:	4293      	cmp	r3, r2
 80087a2:	bfb8      	it	lt
 80087a4:	4613      	movlt	r3, r2
 80087a6:	6033      	str	r3, [r6, #0]
 80087a8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80087ac:	4607      	mov	r7, r0
 80087ae:	460c      	mov	r4, r1
 80087b0:	b10a      	cbz	r2, 80087b6 <_printf_common+0x26>
 80087b2:	3301      	adds	r3, #1
 80087b4:	6033      	str	r3, [r6, #0]
 80087b6:	6823      	ldr	r3, [r4, #0]
 80087b8:	0699      	lsls	r1, r3, #26
 80087ba:	bf42      	ittt	mi
 80087bc:	6833      	ldrmi	r3, [r6, #0]
 80087be:	3302      	addmi	r3, #2
 80087c0:	6033      	strmi	r3, [r6, #0]
 80087c2:	6825      	ldr	r5, [r4, #0]
 80087c4:	f015 0506 	ands.w	r5, r5, #6
 80087c8:	d106      	bne.n	80087d8 <_printf_common+0x48>
 80087ca:	f104 0a19 	add.w	sl, r4, #25
 80087ce:	68e3      	ldr	r3, [r4, #12]
 80087d0:	6832      	ldr	r2, [r6, #0]
 80087d2:	1a9b      	subs	r3, r3, r2
 80087d4:	42ab      	cmp	r3, r5
 80087d6:	dc26      	bgt.n	8008826 <_printf_common+0x96>
 80087d8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80087dc:	6822      	ldr	r2, [r4, #0]
 80087de:	3b00      	subs	r3, #0
 80087e0:	bf18      	it	ne
 80087e2:	2301      	movne	r3, #1
 80087e4:	0692      	lsls	r2, r2, #26
 80087e6:	d42b      	bmi.n	8008840 <_printf_common+0xb0>
 80087e8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80087ec:	4641      	mov	r1, r8
 80087ee:	4638      	mov	r0, r7
 80087f0:	47c8      	blx	r9
 80087f2:	3001      	adds	r0, #1
 80087f4:	d01e      	beq.n	8008834 <_printf_common+0xa4>
 80087f6:	6823      	ldr	r3, [r4, #0]
 80087f8:	6922      	ldr	r2, [r4, #16]
 80087fa:	f003 0306 	and.w	r3, r3, #6
 80087fe:	2b04      	cmp	r3, #4
 8008800:	bf02      	ittt	eq
 8008802:	68e5      	ldreq	r5, [r4, #12]
 8008804:	6833      	ldreq	r3, [r6, #0]
 8008806:	1aed      	subeq	r5, r5, r3
 8008808:	68a3      	ldr	r3, [r4, #8]
 800880a:	bf0c      	ite	eq
 800880c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008810:	2500      	movne	r5, #0
 8008812:	4293      	cmp	r3, r2
 8008814:	bfc4      	itt	gt
 8008816:	1a9b      	subgt	r3, r3, r2
 8008818:	18ed      	addgt	r5, r5, r3
 800881a:	2600      	movs	r6, #0
 800881c:	341a      	adds	r4, #26
 800881e:	42b5      	cmp	r5, r6
 8008820:	d11a      	bne.n	8008858 <_printf_common+0xc8>
 8008822:	2000      	movs	r0, #0
 8008824:	e008      	b.n	8008838 <_printf_common+0xa8>
 8008826:	2301      	movs	r3, #1
 8008828:	4652      	mov	r2, sl
 800882a:	4641      	mov	r1, r8
 800882c:	4638      	mov	r0, r7
 800882e:	47c8      	blx	r9
 8008830:	3001      	adds	r0, #1
 8008832:	d103      	bne.n	800883c <_printf_common+0xac>
 8008834:	f04f 30ff 	mov.w	r0, #4294967295
 8008838:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800883c:	3501      	adds	r5, #1
 800883e:	e7c6      	b.n	80087ce <_printf_common+0x3e>
 8008840:	18e1      	adds	r1, r4, r3
 8008842:	1c5a      	adds	r2, r3, #1
 8008844:	2030      	movs	r0, #48	@ 0x30
 8008846:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800884a:	4422      	add	r2, r4
 800884c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008850:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008854:	3302      	adds	r3, #2
 8008856:	e7c7      	b.n	80087e8 <_printf_common+0x58>
 8008858:	2301      	movs	r3, #1
 800885a:	4622      	mov	r2, r4
 800885c:	4641      	mov	r1, r8
 800885e:	4638      	mov	r0, r7
 8008860:	47c8      	blx	r9
 8008862:	3001      	adds	r0, #1
 8008864:	d0e6      	beq.n	8008834 <_printf_common+0xa4>
 8008866:	3601      	adds	r6, #1
 8008868:	e7d9      	b.n	800881e <_printf_common+0x8e>
	...

0800886c <_printf_i>:
 800886c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008870:	7e0f      	ldrb	r7, [r1, #24]
 8008872:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008874:	2f78      	cmp	r7, #120	@ 0x78
 8008876:	4691      	mov	r9, r2
 8008878:	4680      	mov	r8, r0
 800887a:	460c      	mov	r4, r1
 800887c:	469a      	mov	sl, r3
 800887e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008882:	d807      	bhi.n	8008894 <_printf_i+0x28>
 8008884:	2f62      	cmp	r7, #98	@ 0x62
 8008886:	d80a      	bhi.n	800889e <_printf_i+0x32>
 8008888:	2f00      	cmp	r7, #0
 800888a:	f000 80d2 	beq.w	8008a32 <_printf_i+0x1c6>
 800888e:	2f58      	cmp	r7, #88	@ 0x58
 8008890:	f000 80b9 	beq.w	8008a06 <_printf_i+0x19a>
 8008894:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008898:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800889c:	e03a      	b.n	8008914 <_printf_i+0xa8>
 800889e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80088a2:	2b15      	cmp	r3, #21
 80088a4:	d8f6      	bhi.n	8008894 <_printf_i+0x28>
 80088a6:	a101      	add	r1, pc, #4	@ (adr r1, 80088ac <_printf_i+0x40>)
 80088a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80088ac:	08008905 	.word	0x08008905
 80088b0:	08008919 	.word	0x08008919
 80088b4:	08008895 	.word	0x08008895
 80088b8:	08008895 	.word	0x08008895
 80088bc:	08008895 	.word	0x08008895
 80088c0:	08008895 	.word	0x08008895
 80088c4:	08008919 	.word	0x08008919
 80088c8:	08008895 	.word	0x08008895
 80088cc:	08008895 	.word	0x08008895
 80088d0:	08008895 	.word	0x08008895
 80088d4:	08008895 	.word	0x08008895
 80088d8:	08008a19 	.word	0x08008a19
 80088dc:	08008943 	.word	0x08008943
 80088e0:	080089d3 	.word	0x080089d3
 80088e4:	08008895 	.word	0x08008895
 80088e8:	08008895 	.word	0x08008895
 80088ec:	08008a3b 	.word	0x08008a3b
 80088f0:	08008895 	.word	0x08008895
 80088f4:	08008943 	.word	0x08008943
 80088f8:	08008895 	.word	0x08008895
 80088fc:	08008895 	.word	0x08008895
 8008900:	080089db 	.word	0x080089db
 8008904:	6833      	ldr	r3, [r6, #0]
 8008906:	1d1a      	adds	r2, r3, #4
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	6032      	str	r2, [r6, #0]
 800890c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008910:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008914:	2301      	movs	r3, #1
 8008916:	e09d      	b.n	8008a54 <_printf_i+0x1e8>
 8008918:	6833      	ldr	r3, [r6, #0]
 800891a:	6820      	ldr	r0, [r4, #0]
 800891c:	1d19      	adds	r1, r3, #4
 800891e:	6031      	str	r1, [r6, #0]
 8008920:	0606      	lsls	r6, r0, #24
 8008922:	d501      	bpl.n	8008928 <_printf_i+0xbc>
 8008924:	681d      	ldr	r5, [r3, #0]
 8008926:	e003      	b.n	8008930 <_printf_i+0xc4>
 8008928:	0645      	lsls	r5, r0, #25
 800892a:	d5fb      	bpl.n	8008924 <_printf_i+0xb8>
 800892c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008930:	2d00      	cmp	r5, #0
 8008932:	da03      	bge.n	800893c <_printf_i+0xd0>
 8008934:	232d      	movs	r3, #45	@ 0x2d
 8008936:	426d      	negs	r5, r5
 8008938:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800893c:	4859      	ldr	r0, [pc, #356]	@ (8008aa4 <_printf_i+0x238>)
 800893e:	230a      	movs	r3, #10
 8008940:	e011      	b.n	8008966 <_printf_i+0xfa>
 8008942:	6821      	ldr	r1, [r4, #0]
 8008944:	6833      	ldr	r3, [r6, #0]
 8008946:	0608      	lsls	r0, r1, #24
 8008948:	f853 5b04 	ldr.w	r5, [r3], #4
 800894c:	d402      	bmi.n	8008954 <_printf_i+0xe8>
 800894e:	0649      	lsls	r1, r1, #25
 8008950:	bf48      	it	mi
 8008952:	b2ad      	uxthmi	r5, r5
 8008954:	2f6f      	cmp	r7, #111	@ 0x6f
 8008956:	4853      	ldr	r0, [pc, #332]	@ (8008aa4 <_printf_i+0x238>)
 8008958:	6033      	str	r3, [r6, #0]
 800895a:	bf14      	ite	ne
 800895c:	230a      	movne	r3, #10
 800895e:	2308      	moveq	r3, #8
 8008960:	2100      	movs	r1, #0
 8008962:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008966:	6866      	ldr	r6, [r4, #4]
 8008968:	60a6      	str	r6, [r4, #8]
 800896a:	2e00      	cmp	r6, #0
 800896c:	bfa2      	ittt	ge
 800896e:	6821      	ldrge	r1, [r4, #0]
 8008970:	f021 0104 	bicge.w	r1, r1, #4
 8008974:	6021      	strge	r1, [r4, #0]
 8008976:	b90d      	cbnz	r5, 800897c <_printf_i+0x110>
 8008978:	2e00      	cmp	r6, #0
 800897a:	d04b      	beq.n	8008a14 <_printf_i+0x1a8>
 800897c:	4616      	mov	r6, r2
 800897e:	fbb5 f1f3 	udiv	r1, r5, r3
 8008982:	fb03 5711 	mls	r7, r3, r1, r5
 8008986:	5dc7      	ldrb	r7, [r0, r7]
 8008988:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800898c:	462f      	mov	r7, r5
 800898e:	42bb      	cmp	r3, r7
 8008990:	460d      	mov	r5, r1
 8008992:	d9f4      	bls.n	800897e <_printf_i+0x112>
 8008994:	2b08      	cmp	r3, #8
 8008996:	d10b      	bne.n	80089b0 <_printf_i+0x144>
 8008998:	6823      	ldr	r3, [r4, #0]
 800899a:	07df      	lsls	r7, r3, #31
 800899c:	d508      	bpl.n	80089b0 <_printf_i+0x144>
 800899e:	6923      	ldr	r3, [r4, #16]
 80089a0:	6861      	ldr	r1, [r4, #4]
 80089a2:	4299      	cmp	r1, r3
 80089a4:	bfde      	ittt	le
 80089a6:	2330      	movle	r3, #48	@ 0x30
 80089a8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80089ac:	f106 36ff 	addle.w	r6, r6, #4294967295
 80089b0:	1b92      	subs	r2, r2, r6
 80089b2:	6122      	str	r2, [r4, #16]
 80089b4:	f8cd a000 	str.w	sl, [sp]
 80089b8:	464b      	mov	r3, r9
 80089ba:	aa03      	add	r2, sp, #12
 80089bc:	4621      	mov	r1, r4
 80089be:	4640      	mov	r0, r8
 80089c0:	f7ff fee6 	bl	8008790 <_printf_common>
 80089c4:	3001      	adds	r0, #1
 80089c6:	d14a      	bne.n	8008a5e <_printf_i+0x1f2>
 80089c8:	f04f 30ff 	mov.w	r0, #4294967295
 80089cc:	b004      	add	sp, #16
 80089ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089d2:	6823      	ldr	r3, [r4, #0]
 80089d4:	f043 0320 	orr.w	r3, r3, #32
 80089d8:	6023      	str	r3, [r4, #0]
 80089da:	4833      	ldr	r0, [pc, #204]	@ (8008aa8 <_printf_i+0x23c>)
 80089dc:	2778      	movs	r7, #120	@ 0x78
 80089de:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80089e2:	6823      	ldr	r3, [r4, #0]
 80089e4:	6831      	ldr	r1, [r6, #0]
 80089e6:	061f      	lsls	r7, r3, #24
 80089e8:	f851 5b04 	ldr.w	r5, [r1], #4
 80089ec:	d402      	bmi.n	80089f4 <_printf_i+0x188>
 80089ee:	065f      	lsls	r7, r3, #25
 80089f0:	bf48      	it	mi
 80089f2:	b2ad      	uxthmi	r5, r5
 80089f4:	6031      	str	r1, [r6, #0]
 80089f6:	07d9      	lsls	r1, r3, #31
 80089f8:	bf44      	itt	mi
 80089fa:	f043 0320 	orrmi.w	r3, r3, #32
 80089fe:	6023      	strmi	r3, [r4, #0]
 8008a00:	b11d      	cbz	r5, 8008a0a <_printf_i+0x19e>
 8008a02:	2310      	movs	r3, #16
 8008a04:	e7ac      	b.n	8008960 <_printf_i+0xf4>
 8008a06:	4827      	ldr	r0, [pc, #156]	@ (8008aa4 <_printf_i+0x238>)
 8008a08:	e7e9      	b.n	80089de <_printf_i+0x172>
 8008a0a:	6823      	ldr	r3, [r4, #0]
 8008a0c:	f023 0320 	bic.w	r3, r3, #32
 8008a10:	6023      	str	r3, [r4, #0]
 8008a12:	e7f6      	b.n	8008a02 <_printf_i+0x196>
 8008a14:	4616      	mov	r6, r2
 8008a16:	e7bd      	b.n	8008994 <_printf_i+0x128>
 8008a18:	6833      	ldr	r3, [r6, #0]
 8008a1a:	6825      	ldr	r5, [r4, #0]
 8008a1c:	6961      	ldr	r1, [r4, #20]
 8008a1e:	1d18      	adds	r0, r3, #4
 8008a20:	6030      	str	r0, [r6, #0]
 8008a22:	062e      	lsls	r6, r5, #24
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	d501      	bpl.n	8008a2c <_printf_i+0x1c0>
 8008a28:	6019      	str	r1, [r3, #0]
 8008a2a:	e002      	b.n	8008a32 <_printf_i+0x1c6>
 8008a2c:	0668      	lsls	r0, r5, #25
 8008a2e:	d5fb      	bpl.n	8008a28 <_printf_i+0x1bc>
 8008a30:	8019      	strh	r1, [r3, #0]
 8008a32:	2300      	movs	r3, #0
 8008a34:	6123      	str	r3, [r4, #16]
 8008a36:	4616      	mov	r6, r2
 8008a38:	e7bc      	b.n	80089b4 <_printf_i+0x148>
 8008a3a:	6833      	ldr	r3, [r6, #0]
 8008a3c:	1d1a      	adds	r2, r3, #4
 8008a3e:	6032      	str	r2, [r6, #0]
 8008a40:	681e      	ldr	r6, [r3, #0]
 8008a42:	6862      	ldr	r2, [r4, #4]
 8008a44:	2100      	movs	r1, #0
 8008a46:	4630      	mov	r0, r6
 8008a48:	f7f7 fbc2 	bl	80001d0 <memchr>
 8008a4c:	b108      	cbz	r0, 8008a52 <_printf_i+0x1e6>
 8008a4e:	1b80      	subs	r0, r0, r6
 8008a50:	6060      	str	r0, [r4, #4]
 8008a52:	6863      	ldr	r3, [r4, #4]
 8008a54:	6123      	str	r3, [r4, #16]
 8008a56:	2300      	movs	r3, #0
 8008a58:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008a5c:	e7aa      	b.n	80089b4 <_printf_i+0x148>
 8008a5e:	6923      	ldr	r3, [r4, #16]
 8008a60:	4632      	mov	r2, r6
 8008a62:	4649      	mov	r1, r9
 8008a64:	4640      	mov	r0, r8
 8008a66:	47d0      	blx	sl
 8008a68:	3001      	adds	r0, #1
 8008a6a:	d0ad      	beq.n	80089c8 <_printf_i+0x15c>
 8008a6c:	6823      	ldr	r3, [r4, #0]
 8008a6e:	079b      	lsls	r3, r3, #30
 8008a70:	d413      	bmi.n	8008a9a <_printf_i+0x22e>
 8008a72:	68e0      	ldr	r0, [r4, #12]
 8008a74:	9b03      	ldr	r3, [sp, #12]
 8008a76:	4298      	cmp	r0, r3
 8008a78:	bfb8      	it	lt
 8008a7a:	4618      	movlt	r0, r3
 8008a7c:	e7a6      	b.n	80089cc <_printf_i+0x160>
 8008a7e:	2301      	movs	r3, #1
 8008a80:	4632      	mov	r2, r6
 8008a82:	4649      	mov	r1, r9
 8008a84:	4640      	mov	r0, r8
 8008a86:	47d0      	blx	sl
 8008a88:	3001      	adds	r0, #1
 8008a8a:	d09d      	beq.n	80089c8 <_printf_i+0x15c>
 8008a8c:	3501      	adds	r5, #1
 8008a8e:	68e3      	ldr	r3, [r4, #12]
 8008a90:	9903      	ldr	r1, [sp, #12]
 8008a92:	1a5b      	subs	r3, r3, r1
 8008a94:	42ab      	cmp	r3, r5
 8008a96:	dcf2      	bgt.n	8008a7e <_printf_i+0x212>
 8008a98:	e7eb      	b.n	8008a72 <_printf_i+0x206>
 8008a9a:	2500      	movs	r5, #0
 8008a9c:	f104 0619 	add.w	r6, r4, #25
 8008aa0:	e7f5      	b.n	8008a8e <_printf_i+0x222>
 8008aa2:	bf00      	nop
 8008aa4:	0800b0ba 	.word	0x0800b0ba
 8008aa8:	0800b0cb 	.word	0x0800b0cb

08008aac <std>:
 8008aac:	2300      	movs	r3, #0
 8008aae:	b510      	push	{r4, lr}
 8008ab0:	4604      	mov	r4, r0
 8008ab2:	e9c0 3300 	strd	r3, r3, [r0]
 8008ab6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008aba:	6083      	str	r3, [r0, #8]
 8008abc:	8181      	strh	r1, [r0, #12]
 8008abe:	6643      	str	r3, [r0, #100]	@ 0x64
 8008ac0:	81c2      	strh	r2, [r0, #14]
 8008ac2:	6183      	str	r3, [r0, #24]
 8008ac4:	4619      	mov	r1, r3
 8008ac6:	2208      	movs	r2, #8
 8008ac8:	305c      	adds	r0, #92	@ 0x5c
 8008aca:	f000 f928 	bl	8008d1e <memset>
 8008ace:	4b0d      	ldr	r3, [pc, #52]	@ (8008b04 <std+0x58>)
 8008ad0:	6263      	str	r3, [r4, #36]	@ 0x24
 8008ad2:	4b0d      	ldr	r3, [pc, #52]	@ (8008b08 <std+0x5c>)
 8008ad4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008ad6:	4b0d      	ldr	r3, [pc, #52]	@ (8008b0c <std+0x60>)
 8008ad8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008ada:	4b0d      	ldr	r3, [pc, #52]	@ (8008b10 <std+0x64>)
 8008adc:	6323      	str	r3, [r4, #48]	@ 0x30
 8008ade:	4b0d      	ldr	r3, [pc, #52]	@ (8008b14 <std+0x68>)
 8008ae0:	6224      	str	r4, [r4, #32]
 8008ae2:	429c      	cmp	r4, r3
 8008ae4:	d006      	beq.n	8008af4 <std+0x48>
 8008ae6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008aea:	4294      	cmp	r4, r2
 8008aec:	d002      	beq.n	8008af4 <std+0x48>
 8008aee:	33d0      	adds	r3, #208	@ 0xd0
 8008af0:	429c      	cmp	r4, r3
 8008af2:	d105      	bne.n	8008b00 <std+0x54>
 8008af4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008af8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008afc:	f000 b98c 	b.w	8008e18 <__retarget_lock_init_recursive>
 8008b00:	bd10      	pop	{r4, pc}
 8008b02:	bf00      	nop
 8008b04:	08008c99 	.word	0x08008c99
 8008b08:	08008cbb 	.word	0x08008cbb
 8008b0c:	08008cf3 	.word	0x08008cf3
 8008b10:	08008d17 	.word	0x08008d17
 8008b14:	20003838 	.word	0x20003838

08008b18 <stdio_exit_handler>:
 8008b18:	4a02      	ldr	r2, [pc, #8]	@ (8008b24 <stdio_exit_handler+0xc>)
 8008b1a:	4903      	ldr	r1, [pc, #12]	@ (8008b28 <stdio_exit_handler+0x10>)
 8008b1c:	4803      	ldr	r0, [pc, #12]	@ (8008b2c <stdio_exit_handler+0x14>)
 8008b1e:	f000 b869 	b.w	8008bf4 <_fwalk_sglue>
 8008b22:	bf00      	nop
 8008b24:	20000020 	.word	0x20000020
 8008b28:	0800a795 	.word	0x0800a795
 8008b2c:	20000030 	.word	0x20000030

08008b30 <cleanup_stdio>:
 8008b30:	6841      	ldr	r1, [r0, #4]
 8008b32:	4b0c      	ldr	r3, [pc, #48]	@ (8008b64 <cleanup_stdio+0x34>)
 8008b34:	4299      	cmp	r1, r3
 8008b36:	b510      	push	{r4, lr}
 8008b38:	4604      	mov	r4, r0
 8008b3a:	d001      	beq.n	8008b40 <cleanup_stdio+0x10>
 8008b3c:	f001 fe2a 	bl	800a794 <_fflush_r>
 8008b40:	68a1      	ldr	r1, [r4, #8]
 8008b42:	4b09      	ldr	r3, [pc, #36]	@ (8008b68 <cleanup_stdio+0x38>)
 8008b44:	4299      	cmp	r1, r3
 8008b46:	d002      	beq.n	8008b4e <cleanup_stdio+0x1e>
 8008b48:	4620      	mov	r0, r4
 8008b4a:	f001 fe23 	bl	800a794 <_fflush_r>
 8008b4e:	68e1      	ldr	r1, [r4, #12]
 8008b50:	4b06      	ldr	r3, [pc, #24]	@ (8008b6c <cleanup_stdio+0x3c>)
 8008b52:	4299      	cmp	r1, r3
 8008b54:	d004      	beq.n	8008b60 <cleanup_stdio+0x30>
 8008b56:	4620      	mov	r0, r4
 8008b58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b5c:	f001 be1a 	b.w	800a794 <_fflush_r>
 8008b60:	bd10      	pop	{r4, pc}
 8008b62:	bf00      	nop
 8008b64:	20003838 	.word	0x20003838
 8008b68:	200038a0 	.word	0x200038a0
 8008b6c:	20003908 	.word	0x20003908

08008b70 <global_stdio_init.part.0>:
 8008b70:	b510      	push	{r4, lr}
 8008b72:	4b0b      	ldr	r3, [pc, #44]	@ (8008ba0 <global_stdio_init.part.0+0x30>)
 8008b74:	4c0b      	ldr	r4, [pc, #44]	@ (8008ba4 <global_stdio_init.part.0+0x34>)
 8008b76:	4a0c      	ldr	r2, [pc, #48]	@ (8008ba8 <global_stdio_init.part.0+0x38>)
 8008b78:	601a      	str	r2, [r3, #0]
 8008b7a:	4620      	mov	r0, r4
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	2104      	movs	r1, #4
 8008b80:	f7ff ff94 	bl	8008aac <std>
 8008b84:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008b88:	2201      	movs	r2, #1
 8008b8a:	2109      	movs	r1, #9
 8008b8c:	f7ff ff8e 	bl	8008aac <std>
 8008b90:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008b94:	2202      	movs	r2, #2
 8008b96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b9a:	2112      	movs	r1, #18
 8008b9c:	f7ff bf86 	b.w	8008aac <std>
 8008ba0:	20003970 	.word	0x20003970
 8008ba4:	20003838 	.word	0x20003838
 8008ba8:	08008b19 	.word	0x08008b19

08008bac <__sfp_lock_acquire>:
 8008bac:	4801      	ldr	r0, [pc, #4]	@ (8008bb4 <__sfp_lock_acquire+0x8>)
 8008bae:	f000 b934 	b.w	8008e1a <__retarget_lock_acquire_recursive>
 8008bb2:	bf00      	nop
 8008bb4:	20003979 	.word	0x20003979

08008bb8 <__sfp_lock_release>:
 8008bb8:	4801      	ldr	r0, [pc, #4]	@ (8008bc0 <__sfp_lock_release+0x8>)
 8008bba:	f000 b92f 	b.w	8008e1c <__retarget_lock_release_recursive>
 8008bbe:	bf00      	nop
 8008bc0:	20003979 	.word	0x20003979

08008bc4 <__sinit>:
 8008bc4:	b510      	push	{r4, lr}
 8008bc6:	4604      	mov	r4, r0
 8008bc8:	f7ff fff0 	bl	8008bac <__sfp_lock_acquire>
 8008bcc:	6a23      	ldr	r3, [r4, #32]
 8008bce:	b11b      	cbz	r3, 8008bd8 <__sinit+0x14>
 8008bd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008bd4:	f7ff bff0 	b.w	8008bb8 <__sfp_lock_release>
 8008bd8:	4b04      	ldr	r3, [pc, #16]	@ (8008bec <__sinit+0x28>)
 8008bda:	6223      	str	r3, [r4, #32]
 8008bdc:	4b04      	ldr	r3, [pc, #16]	@ (8008bf0 <__sinit+0x2c>)
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d1f5      	bne.n	8008bd0 <__sinit+0xc>
 8008be4:	f7ff ffc4 	bl	8008b70 <global_stdio_init.part.0>
 8008be8:	e7f2      	b.n	8008bd0 <__sinit+0xc>
 8008bea:	bf00      	nop
 8008bec:	08008b31 	.word	0x08008b31
 8008bf0:	20003970 	.word	0x20003970

08008bf4 <_fwalk_sglue>:
 8008bf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008bf8:	4607      	mov	r7, r0
 8008bfa:	4688      	mov	r8, r1
 8008bfc:	4614      	mov	r4, r2
 8008bfe:	2600      	movs	r6, #0
 8008c00:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008c04:	f1b9 0901 	subs.w	r9, r9, #1
 8008c08:	d505      	bpl.n	8008c16 <_fwalk_sglue+0x22>
 8008c0a:	6824      	ldr	r4, [r4, #0]
 8008c0c:	2c00      	cmp	r4, #0
 8008c0e:	d1f7      	bne.n	8008c00 <_fwalk_sglue+0xc>
 8008c10:	4630      	mov	r0, r6
 8008c12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c16:	89ab      	ldrh	r3, [r5, #12]
 8008c18:	2b01      	cmp	r3, #1
 8008c1a:	d907      	bls.n	8008c2c <_fwalk_sglue+0x38>
 8008c1c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008c20:	3301      	adds	r3, #1
 8008c22:	d003      	beq.n	8008c2c <_fwalk_sglue+0x38>
 8008c24:	4629      	mov	r1, r5
 8008c26:	4638      	mov	r0, r7
 8008c28:	47c0      	blx	r8
 8008c2a:	4306      	orrs	r6, r0
 8008c2c:	3568      	adds	r5, #104	@ 0x68
 8008c2e:	e7e9      	b.n	8008c04 <_fwalk_sglue+0x10>

08008c30 <sniprintf>:
 8008c30:	b40c      	push	{r2, r3}
 8008c32:	b530      	push	{r4, r5, lr}
 8008c34:	4b17      	ldr	r3, [pc, #92]	@ (8008c94 <sniprintf+0x64>)
 8008c36:	1e0c      	subs	r4, r1, #0
 8008c38:	681d      	ldr	r5, [r3, #0]
 8008c3a:	b09d      	sub	sp, #116	@ 0x74
 8008c3c:	da08      	bge.n	8008c50 <sniprintf+0x20>
 8008c3e:	238b      	movs	r3, #139	@ 0x8b
 8008c40:	602b      	str	r3, [r5, #0]
 8008c42:	f04f 30ff 	mov.w	r0, #4294967295
 8008c46:	b01d      	add	sp, #116	@ 0x74
 8008c48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008c4c:	b002      	add	sp, #8
 8008c4e:	4770      	bx	lr
 8008c50:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008c54:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008c58:	bf14      	ite	ne
 8008c5a:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008c5e:	4623      	moveq	r3, r4
 8008c60:	9304      	str	r3, [sp, #16]
 8008c62:	9307      	str	r3, [sp, #28]
 8008c64:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008c68:	9002      	str	r0, [sp, #8]
 8008c6a:	9006      	str	r0, [sp, #24]
 8008c6c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008c70:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008c72:	ab21      	add	r3, sp, #132	@ 0x84
 8008c74:	a902      	add	r1, sp, #8
 8008c76:	4628      	mov	r0, r5
 8008c78:	9301      	str	r3, [sp, #4]
 8008c7a:	f001 fc0b 	bl	800a494 <_svfiprintf_r>
 8008c7e:	1c43      	adds	r3, r0, #1
 8008c80:	bfbc      	itt	lt
 8008c82:	238b      	movlt	r3, #139	@ 0x8b
 8008c84:	602b      	strlt	r3, [r5, #0]
 8008c86:	2c00      	cmp	r4, #0
 8008c88:	d0dd      	beq.n	8008c46 <sniprintf+0x16>
 8008c8a:	9b02      	ldr	r3, [sp, #8]
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	701a      	strb	r2, [r3, #0]
 8008c90:	e7d9      	b.n	8008c46 <sniprintf+0x16>
 8008c92:	bf00      	nop
 8008c94:	2000002c 	.word	0x2000002c

08008c98 <__sread>:
 8008c98:	b510      	push	{r4, lr}
 8008c9a:	460c      	mov	r4, r1
 8008c9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ca0:	f000 f86c 	bl	8008d7c <_read_r>
 8008ca4:	2800      	cmp	r0, #0
 8008ca6:	bfab      	itete	ge
 8008ca8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008caa:	89a3      	ldrhlt	r3, [r4, #12]
 8008cac:	181b      	addge	r3, r3, r0
 8008cae:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008cb2:	bfac      	ite	ge
 8008cb4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008cb6:	81a3      	strhlt	r3, [r4, #12]
 8008cb8:	bd10      	pop	{r4, pc}

08008cba <__swrite>:
 8008cba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cbe:	461f      	mov	r7, r3
 8008cc0:	898b      	ldrh	r3, [r1, #12]
 8008cc2:	05db      	lsls	r3, r3, #23
 8008cc4:	4605      	mov	r5, r0
 8008cc6:	460c      	mov	r4, r1
 8008cc8:	4616      	mov	r6, r2
 8008cca:	d505      	bpl.n	8008cd8 <__swrite+0x1e>
 8008ccc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cd0:	2302      	movs	r3, #2
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	f000 f840 	bl	8008d58 <_lseek_r>
 8008cd8:	89a3      	ldrh	r3, [r4, #12]
 8008cda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008cde:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008ce2:	81a3      	strh	r3, [r4, #12]
 8008ce4:	4632      	mov	r2, r6
 8008ce6:	463b      	mov	r3, r7
 8008ce8:	4628      	mov	r0, r5
 8008cea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008cee:	f000 b857 	b.w	8008da0 <_write_r>

08008cf2 <__sseek>:
 8008cf2:	b510      	push	{r4, lr}
 8008cf4:	460c      	mov	r4, r1
 8008cf6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cfa:	f000 f82d 	bl	8008d58 <_lseek_r>
 8008cfe:	1c43      	adds	r3, r0, #1
 8008d00:	89a3      	ldrh	r3, [r4, #12]
 8008d02:	bf15      	itete	ne
 8008d04:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008d06:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008d0a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008d0e:	81a3      	strheq	r3, [r4, #12]
 8008d10:	bf18      	it	ne
 8008d12:	81a3      	strhne	r3, [r4, #12]
 8008d14:	bd10      	pop	{r4, pc}

08008d16 <__sclose>:
 8008d16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d1a:	f000 b80d 	b.w	8008d38 <_close_r>

08008d1e <memset>:
 8008d1e:	4402      	add	r2, r0
 8008d20:	4603      	mov	r3, r0
 8008d22:	4293      	cmp	r3, r2
 8008d24:	d100      	bne.n	8008d28 <memset+0xa>
 8008d26:	4770      	bx	lr
 8008d28:	f803 1b01 	strb.w	r1, [r3], #1
 8008d2c:	e7f9      	b.n	8008d22 <memset+0x4>
	...

08008d30 <_localeconv_r>:
 8008d30:	4800      	ldr	r0, [pc, #0]	@ (8008d34 <_localeconv_r+0x4>)
 8008d32:	4770      	bx	lr
 8008d34:	2000016c 	.word	0x2000016c

08008d38 <_close_r>:
 8008d38:	b538      	push	{r3, r4, r5, lr}
 8008d3a:	4d06      	ldr	r5, [pc, #24]	@ (8008d54 <_close_r+0x1c>)
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	4604      	mov	r4, r0
 8008d40:	4608      	mov	r0, r1
 8008d42:	602b      	str	r3, [r5, #0]
 8008d44:	f7f8 fff6 	bl	8001d34 <_close>
 8008d48:	1c43      	adds	r3, r0, #1
 8008d4a:	d102      	bne.n	8008d52 <_close_r+0x1a>
 8008d4c:	682b      	ldr	r3, [r5, #0]
 8008d4e:	b103      	cbz	r3, 8008d52 <_close_r+0x1a>
 8008d50:	6023      	str	r3, [r4, #0]
 8008d52:	bd38      	pop	{r3, r4, r5, pc}
 8008d54:	20003974 	.word	0x20003974

08008d58 <_lseek_r>:
 8008d58:	b538      	push	{r3, r4, r5, lr}
 8008d5a:	4d07      	ldr	r5, [pc, #28]	@ (8008d78 <_lseek_r+0x20>)
 8008d5c:	4604      	mov	r4, r0
 8008d5e:	4608      	mov	r0, r1
 8008d60:	4611      	mov	r1, r2
 8008d62:	2200      	movs	r2, #0
 8008d64:	602a      	str	r2, [r5, #0]
 8008d66:	461a      	mov	r2, r3
 8008d68:	f7f9 f80b 	bl	8001d82 <_lseek>
 8008d6c:	1c43      	adds	r3, r0, #1
 8008d6e:	d102      	bne.n	8008d76 <_lseek_r+0x1e>
 8008d70:	682b      	ldr	r3, [r5, #0]
 8008d72:	b103      	cbz	r3, 8008d76 <_lseek_r+0x1e>
 8008d74:	6023      	str	r3, [r4, #0]
 8008d76:	bd38      	pop	{r3, r4, r5, pc}
 8008d78:	20003974 	.word	0x20003974

08008d7c <_read_r>:
 8008d7c:	b538      	push	{r3, r4, r5, lr}
 8008d7e:	4d07      	ldr	r5, [pc, #28]	@ (8008d9c <_read_r+0x20>)
 8008d80:	4604      	mov	r4, r0
 8008d82:	4608      	mov	r0, r1
 8008d84:	4611      	mov	r1, r2
 8008d86:	2200      	movs	r2, #0
 8008d88:	602a      	str	r2, [r5, #0]
 8008d8a:	461a      	mov	r2, r3
 8008d8c:	f7f8 ff99 	bl	8001cc2 <_read>
 8008d90:	1c43      	adds	r3, r0, #1
 8008d92:	d102      	bne.n	8008d9a <_read_r+0x1e>
 8008d94:	682b      	ldr	r3, [r5, #0]
 8008d96:	b103      	cbz	r3, 8008d9a <_read_r+0x1e>
 8008d98:	6023      	str	r3, [r4, #0]
 8008d9a:	bd38      	pop	{r3, r4, r5, pc}
 8008d9c:	20003974 	.word	0x20003974

08008da0 <_write_r>:
 8008da0:	b538      	push	{r3, r4, r5, lr}
 8008da2:	4d07      	ldr	r5, [pc, #28]	@ (8008dc0 <_write_r+0x20>)
 8008da4:	4604      	mov	r4, r0
 8008da6:	4608      	mov	r0, r1
 8008da8:	4611      	mov	r1, r2
 8008daa:	2200      	movs	r2, #0
 8008dac:	602a      	str	r2, [r5, #0]
 8008dae:	461a      	mov	r2, r3
 8008db0:	f7f8 ffa4 	bl	8001cfc <_write>
 8008db4:	1c43      	adds	r3, r0, #1
 8008db6:	d102      	bne.n	8008dbe <_write_r+0x1e>
 8008db8:	682b      	ldr	r3, [r5, #0]
 8008dba:	b103      	cbz	r3, 8008dbe <_write_r+0x1e>
 8008dbc:	6023      	str	r3, [r4, #0]
 8008dbe:	bd38      	pop	{r3, r4, r5, pc}
 8008dc0:	20003974 	.word	0x20003974

08008dc4 <__errno>:
 8008dc4:	4b01      	ldr	r3, [pc, #4]	@ (8008dcc <__errno+0x8>)
 8008dc6:	6818      	ldr	r0, [r3, #0]
 8008dc8:	4770      	bx	lr
 8008dca:	bf00      	nop
 8008dcc:	2000002c 	.word	0x2000002c

08008dd0 <__libc_init_array>:
 8008dd0:	b570      	push	{r4, r5, r6, lr}
 8008dd2:	4d0d      	ldr	r5, [pc, #52]	@ (8008e08 <__libc_init_array+0x38>)
 8008dd4:	4c0d      	ldr	r4, [pc, #52]	@ (8008e0c <__libc_init_array+0x3c>)
 8008dd6:	1b64      	subs	r4, r4, r5
 8008dd8:	10a4      	asrs	r4, r4, #2
 8008dda:	2600      	movs	r6, #0
 8008ddc:	42a6      	cmp	r6, r4
 8008dde:	d109      	bne.n	8008df4 <__libc_init_array+0x24>
 8008de0:	4d0b      	ldr	r5, [pc, #44]	@ (8008e10 <__libc_init_array+0x40>)
 8008de2:	4c0c      	ldr	r4, [pc, #48]	@ (8008e14 <__libc_init_array+0x44>)
 8008de4:	f002 f866 	bl	800aeb4 <_init>
 8008de8:	1b64      	subs	r4, r4, r5
 8008dea:	10a4      	asrs	r4, r4, #2
 8008dec:	2600      	movs	r6, #0
 8008dee:	42a6      	cmp	r6, r4
 8008df0:	d105      	bne.n	8008dfe <__libc_init_array+0x2e>
 8008df2:	bd70      	pop	{r4, r5, r6, pc}
 8008df4:	f855 3b04 	ldr.w	r3, [r5], #4
 8008df8:	4798      	blx	r3
 8008dfa:	3601      	adds	r6, #1
 8008dfc:	e7ee      	b.n	8008ddc <__libc_init_array+0xc>
 8008dfe:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e02:	4798      	blx	r3
 8008e04:	3601      	adds	r6, #1
 8008e06:	e7f2      	b.n	8008dee <__libc_init_array+0x1e>
 8008e08:	0800b420 	.word	0x0800b420
 8008e0c:	0800b420 	.word	0x0800b420
 8008e10:	0800b420 	.word	0x0800b420
 8008e14:	0800b424 	.word	0x0800b424

08008e18 <__retarget_lock_init_recursive>:
 8008e18:	4770      	bx	lr

08008e1a <__retarget_lock_acquire_recursive>:
 8008e1a:	4770      	bx	lr

08008e1c <__retarget_lock_release_recursive>:
 8008e1c:	4770      	bx	lr

08008e1e <memcpy>:
 8008e1e:	440a      	add	r2, r1
 8008e20:	4291      	cmp	r1, r2
 8008e22:	f100 33ff 	add.w	r3, r0, #4294967295
 8008e26:	d100      	bne.n	8008e2a <memcpy+0xc>
 8008e28:	4770      	bx	lr
 8008e2a:	b510      	push	{r4, lr}
 8008e2c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e30:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008e34:	4291      	cmp	r1, r2
 8008e36:	d1f9      	bne.n	8008e2c <memcpy+0xe>
 8008e38:	bd10      	pop	{r4, pc}

08008e3a <quorem>:
 8008e3a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e3e:	6903      	ldr	r3, [r0, #16]
 8008e40:	690c      	ldr	r4, [r1, #16]
 8008e42:	42a3      	cmp	r3, r4
 8008e44:	4607      	mov	r7, r0
 8008e46:	db7e      	blt.n	8008f46 <quorem+0x10c>
 8008e48:	3c01      	subs	r4, #1
 8008e4a:	f101 0814 	add.w	r8, r1, #20
 8008e4e:	00a3      	lsls	r3, r4, #2
 8008e50:	f100 0514 	add.w	r5, r0, #20
 8008e54:	9300      	str	r3, [sp, #0]
 8008e56:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008e5a:	9301      	str	r3, [sp, #4]
 8008e5c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008e60:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008e64:	3301      	adds	r3, #1
 8008e66:	429a      	cmp	r2, r3
 8008e68:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008e6c:	fbb2 f6f3 	udiv	r6, r2, r3
 8008e70:	d32e      	bcc.n	8008ed0 <quorem+0x96>
 8008e72:	f04f 0a00 	mov.w	sl, #0
 8008e76:	46c4      	mov	ip, r8
 8008e78:	46ae      	mov	lr, r5
 8008e7a:	46d3      	mov	fp, sl
 8008e7c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008e80:	b298      	uxth	r0, r3
 8008e82:	fb06 a000 	mla	r0, r6, r0, sl
 8008e86:	0c02      	lsrs	r2, r0, #16
 8008e88:	0c1b      	lsrs	r3, r3, #16
 8008e8a:	fb06 2303 	mla	r3, r6, r3, r2
 8008e8e:	f8de 2000 	ldr.w	r2, [lr]
 8008e92:	b280      	uxth	r0, r0
 8008e94:	b292      	uxth	r2, r2
 8008e96:	1a12      	subs	r2, r2, r0
 8008e98:	445a      	add	r2, fp
 8008e9a:	f8de 0000 	ldr.w	r0, [lr]
 8008e9e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008ea2:	b29b      	uxth	r3, r3
 8008ea4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008ea8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008eac:	b292      	uxth	r2, r2
 8008eae:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008eb2:	45e1      	cmp	r9, ip
 8008eb4:	f84e 2b04 	str.w	r2, [lr], #4
 8008eb8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008ebc:	d2de      	bcs.n	8008e7c <quorem+0x42>
 8008ebe:	9b00      	ldr	r3, [sp, #0]
 8008ec0:	58eb      	ldr	r3, [r5, r3]
 8008ec2:	b92b      	cbnz	r3, 8008ed0 <quorem+0x96>
 8008ec4:	9b01      	ldr	r3, [sp, #4]
 8008ec6:	3b04      	subs	r3, #4
 8008ec8:	429d      	cmp	r5, r3
 8008eca:	461a      	mov	r2, r3
 8008ecc:	d32f      	bcc.n	8008f2e <quorem+0xf4>
 8008ece:	613c      	str	r4, [r7, #16]
 8008ed0:	4638      	mov	r0, r7
 8008ed2:	f001 f97b 	bl	800a1cc <__mcmp>
 8008ed6:	2800      	cmp	r0, #0
 8008ed8:	db25      	blt.n	8008f26 <quorem+0xec>
 8008eda:	4629      	mov	r1, r5
 8008edc:	2000      	movs	r0, #0
 8008ede:	f858 2b04 	ldr.w	r2, [r8], #4
 8008ee2:	f8d1 c000 	ldr.w	ip, [r1]
 8008ee6:	fa1f fe82 	uxth.w	lr, r2
 8008eea:	fa1f f38c 	uxth.w	r3, ip
 8008eee:	eba3 030e 	sub.w	r3, r3, lr
 8008ef2:	4403      	add	r3, r0
 8008ef4:	0c12      	lsrs	r2, r2, #16
 8008ef6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008efa:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008efe:	b29b      	uxth	r3, r3
 8008f00:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008f04:	45c1      	cmp	r9, r8
 8008f06:	f841 3b04 	str.w	r3, [r1], #4
 8008f0a:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008f0e:	d2e6      	bcs.n	8008ede <quorem+0xa4>
 8008f10:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008f14:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008f18:	b922      	cbnz	r2, 8008f24 <quorem+0xea>
 8008f1a:	3b04      	subs	r3, #4
 8008f1c:	429d      	cmp	r5, r3
 8008f1e:	461a      	mov	r2, r3
 8008f20:	d30b      	bcc.n	8008f3a <quorem+0x100>
 8008f22:	613c      	str	r4, [r7, #16]
 8008f24:	3601      	adds	r6, #1
 8008f26:	4630      	mov	r0, r6
 8008f28:	b003      	add	sp, #12
 8008f2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f2e:	6812      	ldr	r2, [r2, #0]
 8008f30:	3b04      	subs	r3, #4
 8008f32:	2a00      	cmp	r2, #0
 8008f34:	d1cb      	bne.n	8008ece <quorem+0x94>
 8008f36:	3c01      	subs	r4, #1
 8008f38:	e7c6      	b.n	8008ec8 <quorem+0x8e>
 8008f3a:	6812      	ldr	r2, [r2, #0]
 8008f3c:	3b04      	subs	r3, #4
 8008f3e:	2a00      	cmp	r2, #0
 8008f40:	d1ef      	bne.n	8008f22 <quorem+0xe8>
 8008f42:	3c01      	subs	r4, #1
 8008f44:	e7ea      	b.n	8008f1c <quorem+0xe2>
 8008f46:	2000      	movs	r0, #0
 8008f48:	e7ee      	b.n	8008f28 <quorem+0xee>
 8008f4a:	0000      	movs	r0, r0
 8008f4c:	0000      	movs	r0, r0
	...

08008f50 <_dtoa_r>:
 8008f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f54:	69c7      	ldr	r7, [r0, #28]
 8008f56:	b099      	sub	sp, #100	@ 0x64
 8008f58:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008f5c:	ec55 4b10 	vmov	r4, r5, d0
 8008f60:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8008f62:	9109      	str	r1, [sp, #36]	@ 0x24
 8008f64:	4683      	mov	fp, r0
 8008f66:	920e      	str	r2, [sp, #56]	@ 0x38
 8008f68:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008f6a:	b97f      	cbnz	r7, 8008f8c <_dtoa_r+0x3c>
 8008f6c:	2010      	movs	r0, #16
 8008f6e:	f000 fdfd 	bl	8009b6c <malloc>
 8008f72:	4602      	mov	r2, r0
 8008f74:	f8cb 001c 	str.w	r0, [fp, #28]
 8008f78:	b920      	cbnz	r0, 8008f84 <_dtoa_r+0x34>
 8008f7a:	4ba7      	ldr	r3, [pc, #668]	@ (8009218 <_dtoa_r+0x2c8>)
 8008f7c:	21ef      	movs	r1, #239	@ 0xef
 8008f7e:	48a7      	ldr	r0, [pc, #668]	@ (800921c <_dtoa_r+0x2cc>)
 8008f80:	f001 fc5a 	bl	800a838 <__assert_func>
 8008f84:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008f88:	6007      	str	r7, [r0, #0]
 8008f8a:	60c7      	str	r7, [r0, #12]
 8008f8c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008f90:	6819      	ldr	r1, [r3, #0]
 8008f92:	b159      	cbz	r1, 8008fac <_dtoa_r+0x5c>
 8008f94:	685a      	ldr	r2, [r3, #4]
 8008f96:	604a      	str	r2, [r1, #4]
 8008f98:	2301      	movs	r3, #1
 8008f9a:	4093      	lsls	r3, r2
 8008f9c:	608b      	str	r3, [r1, #8]
 8008f9e:	4658      	mov	r0, fp
 8008fa0:	f000 feda 	bl	8009d58 <_Bfree>
 8008fa4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008fa8:	2200      	movs	r2, #0
 8008faa:	601a      	str	r2, [r3, #0]
 8008fac:	1e2b      	subs	r3, r5, #0
 8008fae:	bfb9      	ittee	lt
 8008fb0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008fb4:	9303      	strlt	r3, [sp, #12]
 8008fb6:	2300      	movge	r3, #0
 8008fb8:	6033      	strge	r3, [r6, #0]
 8008fba:	9f03      	ldr	r7, [sp, #12]
 8008fbc:	4b98      	ldr	r3, [pc, #608]	@ (8009220 <_dtoa_r+0x2d0>)
 8008fbe:	bfbc      	itt	lt
 8008fc0:	2201      	movlt	r2, #1
 8008fc2:	6032      	strlt	r2, [r6, #0]
 8008fc4:	43bb      	bics	r3, r7
 8008fc6:	d112      	bne.n	8008fee <_dtoa_r+0x9e>
 8008fc8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008fca:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008fce:	6013      	str	r3, [r2, #0]
 8008fd0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008fd4:	4323      	orrs	r3, r4
 8008fd6:	f000 854d 	beq.w	8009a74 <_dtoa_r+0xb24>
 8008fda:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008fdc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8009234 <_dtoa_r+0x2e4>
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	f000 854f 	beq.w	8009a84 <_dtoa_r+0xb34>
 8008fe6:	f10a 0303 	add.w	r3, sl, #3
 8008fea:	f000 bd49 	b.w	8009a80 <_dtoa_r+0xb30>
 8008fee:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	ec51 0b17 	vmov	r0, r1, d7
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8008ffe:	f7f7 fd63 	bl	8000ac8 <__aeabi_dcmpeq>
 8009002:	4680      	mov	r8, r0
 8009004:	b158      	cbz	r0, 800901e <_dtoa_r+0xce>
 8009006:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009008:	2301      	movs	r3, #1
 800900a:	6013      	str	r3, [r2, #0]
 800900c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800900e:	b113      	cbz	r3, 8009016 <_dtoa_r+0xc6>
 8009010:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009012:	4b84      	ldr	r3, [pc, #528]	@ (8009224 <_dtoa_r+0x2d4>)
 8009014:	6013      	str	r3, [r2, #0]
 8009016:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8009238 <_dtoa_r+0x2e8>
 800901a:	f000 bd33 	b.w	8009a84 <_dtoa_r+0xb34>
 800901e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009022:	aa16      	add	r2, sp, #88	@ 0x58
 8009024:	a917      	add	r1, sp, #92	@ 0x5c
 8009026:	4658      	mov	r0, fp
 8009028:	f001 f980 	bl	800a32c <__d2b>
 800902c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009030:	4681      	mov	r9, r0
 8009032:	2e00      	cmp	r6, #0
 8009034:	d077      	beq.n	8009126 <_dtoa_r+0x1d6>
 8009036:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009038:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800903c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009040:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009044:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009048:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800904c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009050:	4619      	mov	r1, r3
 8009052:	2200      	movs	r2, #0
 8009054:	4b74      	ldr	r3, [pc, #464]	@ (8009228 <_dtoa_r+0x2d8>)
 8009056:	f7f7 f917 	bl	8000288 <__aeabi_dsub>
 800905a:	a369      	add	r3, pc, #420	@ (adr r3, 8009200 <_dtoa_r+0x2b0>)
 800905c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009060:	f7f7 faca 	bl	80005f8 <__aeabi_dmul>
 8009064:	a368      	add	r3, pc, #416	@ (adr r3, 8009208 <_dtoa_r+0x2b8>)
 8009066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800906a:	f7f7 f90f 	bl	800028c <__adddf3>
 800906e:	4604      	mov	r4, r0
 8009070:	4630      	mov	r0, r6
 8009072:	460d      	mov	r5, r1
 8009074:	f7f7 fa56 	bl	8000524 <__aeabi_i2d>
 8009078:	a365      	add	r3, pc, #404	@ (adr r3, 8009210 <_dtoa_r+0x2c0>)
 800907a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800907e:	f7f7 fabb 	bl	80005f8 <__aeabi_dmul>
 8009082:	4602      	mov	r2, r0
 8009084:	460b      	mov	r3, r1
 8009086:	4620      	mov	r0, r4
 8009088:	4629      	mov	r1, r5
 800908a:	f7f7 f8ff 	bl	800028c <__adddf3>
 800908e:	4604      	mov	r4, r0
 8009090:	460d      	mov	r5, r1
 8009092:	f7f7 fd61 	bl	8000b58 <__aeabi_d2iz>
 8009096:	2200      	movs	r2, #0
 8009098:	4607      	mov	r7, r0
 800909a:	2300      	movs	r3, #0
 800909c:	4620      	mov	r0, r4
 800909e:	4629      	mov	r1, r5
 80090a0:	f7f7 fd1c 	bl	8000adc <__aeabi_dcmplt>
 80090a4:	b140      	cbz	r0, 80090b8 <_dtoa_r+0x168>
 80090a6:	4638      	mov	r0, r7
 80090a8:	f7f7 fa3c 	bl	8000524 <__aeabi_i2d>
 80090ac:	4622      	mov	r2, r4
 80090ae:	462b      	mov	r3, r5
 80090b0:	f7f7 fd0a 	bl	8000ac8 <__aeabi_dcmpeq>
 80090b4:	b900      	cbnz	r0, 80090b8 <_dtoa_r+0x168>
 80090b6:	3f01      	subs	r7, #1
 80090b8:	2f16      	cmp	r7, #22
 80090ba:	d851      	bhi.n	8009160 <_dtoa_r+0x210>
 80090bc:	4b5b      	ldr	r3, [pc, #364]	@ (800922c <_dtoa_r+0x2dc>)
 80090be:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80090c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80090ca:	f7f7 fd07 	bl	8000adc <__aeabi_dcmplt>
 80090ce:	2800      	cmp	r0, #0
 80090d0:	d048      	beq.n	8009164 <_dtoa_r+0x214>
 80090d2:	3f01      	subs	r7, #1
 80090d4:	2300      	movs	r3, #0
 80090d6:	9312      	str	r3, [sp, #72]	@ 0x48
 80090d8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80090da:	1b9b      	subs	r3, r3, r6
 80090dc:	1e5a      	subs	r2, r3, #1
 80090de:	bf44      	itt	mi
 80090e0:	f1c3 0801 	rsbmi	r8, r3, #1
 80090e4:	2300      	movmi	r3, #0
 80090e6:	9208      	str	r2, [sp, #32]
 80090e8:	bf54      	ite	pl
 80090ea:	f04f 0800 	movpl.w	r8, #0
 80090ee:	9308      	strmi	r3, [sp, #32]
 80090f0:	2f00      	cmp	r7, #0
 80090f2:	db39      	blt.n	8009168 <_dtoa_r+0x218>
 80090f4:	9b08      	ldr	r3, [sp, #32]
 80090f6:	970f      	str	r7, [sp, #60]	@ 0x3c
 80090f8:	443b      	add	r3, r7
 80090fa:	9308      	str	r3, [sp, #32]
 80090fc:	2300      	movs	r3, #0
 80090fe:	930a      	str	r3, [sp, #40]	@ 0x28
 8009100:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009102:	2b09      	cmp	r3, #9
 8009104:	d864      	bhi.n	80091d0 <_dtoa_r+0x280>
 8009106:	2b05      	cmp	r3, #5
 8009108:	bfc4      	itt	gt
 800910a:	3b04      	subgt	r3, #4
 800910c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800910e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009110:	f1a3 0302 	sub.w	r3, r3, #2
 8009114:	bfcc      	ite	gt
 8009116:	2400      	movgt	r4, #0
 8009118:	2401      	movle	r4, #1
 800911a:	2b03      	cmp	r3, #3
 800911c:	d863      	bhi.n	80091e6 <_dtoa_r+0x296>
 800911e:	e8df f003 	tbb	[pc, r3]
 8009122:	372a      	.short	0x372a
 8009124:	5535      	.short	0x5535
 8009126:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800912a:	441e      	add	r6, r3
 800912c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009130:	2b20      	cmp	r3, #32
 8009132:	bfc1      	itttt	gt
 8009134:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009138:	409f      	lslgt	r7, r3
 800913a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800913e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009142:	bfd6      	itet	le
 8009144:	f1c3 0320 	rsble	r3, r3, #32
 8009148:	ea47 0003 	orrgt.w	r0, r7, r3
 800914c:	fa04 f003 	lslle.w	r0, r4, r3
 8009150:	f7f7 f9d8 	bl	8000504 <__aeabi_ui2d>
 8009154:	2201      	movs	r2, #1
 8009156:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800915a:	3e01      	subs	r6, #1
 800915c:	9214      	str	r2, [sp, #80]	@ 0x50
 800915e:	e777      	b.n	8009050 <_dtoa_r+0x100>
 8009160:	2301      	movs	r3, #1
 8009162:	e7b8      	b.n	80090d6 <_dtoa_r+0x186>
 8009164:	9012      	str	r0, [sp, #72]	@ 0x48
 8009166:	e7b7      	b.n	80090d8 <_dtoa_r+0x188>
 8009168:	427b      	negs	r3, r7
 800916a:	930a      	str	r3, [sp, #40]	@ 0x28
 800916c:	2300      	movs	r3, #0
 800916e:	eba8 0807 	sub.w	r8, r8, r7
 8009172:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009174:	e7c4      	b.n	8009100 <_dtoa_r+0x1b0>
 8009176:	2300      	movs	r3, #0
 8009178:	930b      	str	r3, [sp, #44]	@ 0x2c
 800917a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800917c:	2b00      	cmp	r3, #0
 800917e:	dc35      	bgt.n	80091ec <_dtoa_r+0x29c>
 8009180:	2301      	movs	r3, #1
 8009182:	9300      	str	r3, [sp, #0]
 8009184:	9307      	str	r3, [sp, #28]
 8009186:	461a      	mov	r2, r3
 8009188:	920e      	str	r2, [sp, #56]	@ 0x38
 800918a:	e00b      	b.n	80091a4 <_dtoa_r+0x254>
 800918c:	2301      	movs	r3, #1
 800918e:	e7f3      	b.n	8009178 <_dtoa_r+0x228>
 8009190:	2300      	movs	r3, #0
 8009192:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009194:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009196:	18fb      	adds	r3, r7, r3
 8009198:	9300      	str	r3, [sp, #0]
 800919a:	3301      	adds	r3, #1
 800919c:	2b01      	cmp	r3, #1
 800919e:	9307      	str	r3, [sp, #28]
 80091a0:	bfb8      	it	lt
 80091a2:	2301      	movlt	r3, #1
 80091a4:	f8db 001c 	ldr.w	r0, [fp, #28]
 80091a8:	2100      	movs	r1, #0
 80091aa:	2204      	movs	r2, #4
 80091ac:	f102 0514 	add.w	r5, r2, #20
 80091b0:	429d      	cmp	r5, r3
 80091b2:	d91f      	bls.n	80091f4 <_dtoa_r+0x2a4>
 80091b4:	6041      	str	r1, [r0, #4]
 80091b6:	4658      	mov	r0, fp
 80091b8:	f000 fd8e 	bl	8009cd8 <_Balloc>
 80091bc:	4682      	mov	sl, r0
 80091be:	2800      	cmp	r0, #0
 80091c0:	d13c      	bne.n	800923c <_dtoa_r+0x2ec>
 80091c2:	4b1b      	ldr	r3, [pc, #108]	@ (8009230 <_dtoa_r+0x2e0>)
 80091c4:	4602      	mov	r2, r0
 80091c6:	f240 11af 	movw	r1, #431	@ 0x1af
 80091ca:	e6d8      	b.n	8008f7e <_dtoa_r+0x2e>
 80091cc:	2301      	movs	r3, #1
 80091ce:	e7e0      	b.n	8009192 <_dtoa_r+0x242>
 80091d0:	2401      	movs	r4, #1
 80091d2:	2300      	movs	r3, #0
 80091d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80091d6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80091d8:	f04f 33ff 	mov.w	r3, #4294967295
 80091dc:	9300      	str	r3, [sp, #0]
 80091de:	9307      	str	r3, [sp, #28]
 80091e0:	2200      	movs	r2, #0
 80091e2:	2312      	movs	r3, #18
 80091e4:	e7d0      	b.n	8009188 <_dtoa_r+0x238>
 80091e6:	2301      	movs	r3, #1
 80091e8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80091ea:	e7f5      	b.n	80091d8 <_dtoa_r+0x288>
 80091ec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80091ee:	9300      	str	r3, [sp, #0]
 80091f0:	9307      	str	r3, [sp, #28]
 80091f2:	e7d7      	b.n	80091a4 <_dtoa_r+0x254>
 80091f4:	3101      	adds	r1, #1
 80091f6:	0052      	lsls	r2, r2, #1
 80091f8:	e7d8      	b.n	80091ac <_dtoa_r+0x25c>
 80091fa:	bf00      	nop
 80091fc:	f3af 8000 	nop.w
 8009200:	636f4361 	.word	0x636f4361
 8009204:	3fd287a7 	.word	0x3fd287a7
 8009208:	8b60c8b3 	.word	0x8b60c8b3
 800920c:	3fc68a28 	.word	0x3fc68a28
 8009210:	509f79fb 	.word	0x509f79fb
 8009214:	3fd34413 	.word	0x3fd34413
 8009218:	0800b0e9 	.word	0x0800b0e9
 800921c:	0800b100 	.word	0x0800b100
 8009220:	7ff00000 	.word	0x7ff00000
 8009224:	0800b0b9 	.word	0x0800b0b9
 8009228:	3ff80000 	.word	0x3ff80000
 800922c:	0800b1f8 	.word	0x0800b1f8
 8009230:	0800b158 	.word	0x0800b158
 8009234:	0800b0e5 	.word	0x0800b0e5
 8009238:	0800b0b8 	.word	0x0800b0b8
 800923c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009240:	6018      	str	r0, [r3, #0]
 8009242:	9b07      	ldr	r3, [sp, #28]
 8009244:	2b0e      	cmp	r3, #14
 8009246:	f200 80a4 	bhi.w	8009392 <_dtoa_r+0x442>
 800924a:	2c00      	cmp	r4, #0
 800924c:	f000 80a1 	beq.w	8009392 <_dtoa_r+0x442>
 8009250:	2f00      	cmp	r7, #0
 8009252:	dd33      	ble.n	80092bc <_dtoa_r+0x36c>
 8009254:	4bad      	ldr	r3, [pc, #692]	@ (800950c <_dtoa_r+0x5bc>)
 8009256:	f007 020f 	and.w	r2, r7, #15
 800925a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800925e:	ed93 7b00 	vldr	d7, [r3]
 8009262:	05f8      	lsls	r0, r7, #23
 8009264:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009268:	ea4f 1427 	mov.w	r4, r7, asr #4
 800926c:	d516      	bpl.n	800929c <_dtoa_r+0x34c>
 800926e:	4ba8      	ldr	r3, [pc, #672]	@ (8009510 <_dtoa_r+0x5c0>)
 8009270:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009274:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009278:	f7f7 fae8 	bl	800084c <__aeabi_ddiv>
 800927c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009280:	f004 040f 	and.w	r4, r4, #15
 8009284:	2603      	movs	r6, #3
 8009286:	4da2      	ldr	r5, [pc, #648]	@ (8009510 <_dtoa_r+0x5c0>)
 8009288:	b954      	cbnz	r4, 80092a0 <_dtoa_r+0x350>
 800928a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800928e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009292:	f7f7 fadb 	bl	800084c <__aeabi_ddiv>
 8009296:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800929a:	e028      	b.n	80092ee <_dtoa_r+0x39e>
 800929c:	2602      	movs	r6, #2
 800929e:	e7f2      	b.n	8009286 <_dtoa_r+0x336>
 80092a0:	07e1      	lsls	r1, r4, #31
 80092a2:	d508      	bpl.n	80092b6 <_dtoa_r+0x366>
 80092a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80092a8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80092ac:	f7f7 f9a4 	bl	80005f8 <__aeabi_dmul>
 80092b0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80092b4:	3601      	adds	r6, #1
 80092b6:	1064      	asrs	r4, r4, #1
 80092b8:	3508      	adds	r5, #8
 80092ba:	e7e5      	b.n	8009288 <_dtoa_r+0x338>
 80092bc:	f000 80d2 	beq.w	8009464 <_dtoa_r+0x514>
 80092c0:	427c      	negs	r4, r7
 80092c2:	4b92      	ldr	r3, [pc, #584]	@ (800950c <_dtoa_r+0x5bc>)
 80092c4:	4d92      	ldr	r5, [pc, #584]	@ (8009510 <_dtoa_r+0x5c0>)
 80092c6:	f004 020f 	and.w	r2, r4, #15
 80092ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80092ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092d2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80092d6:	f7f7 f98f 	bl	80005f8 <__aeabi_dmul>
 80092da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80092de:	1124      	asrs	r4, r4, #4
 80092e0:	2300      	movs	r3, #0
 80092e2:	2602      	movs	r6, #2
 80092e4:	2c00      	cmp	r4, #0
 80092e6:	f040 80b2 	bne.w	800944e <_dtoa_r+0x4fe>
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d1d3      	bne.n	8009296 <_dtoa_r+0x346>
 80092ee:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80092f0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	f000 80b7 	beq.w	8009468 <_dtoa_r+0x518>
 80092fa:	4b86      	ldr	r3, [pc, #536]	@ (8009514 <_dtoa_r+0x5c4>)
 80092fc:	2200      	movs	r2, #0
 80092fe:	4620      	mov	r0, r4
 8009300:	4629      	mov	r1, r5
 8009302:	f7f7 fbeb 	bl	8000adc <__aeabi_dcmplt>
 8009306:	2800      	cmp	r0, #0
 8009308:	f000 80ae 	beq.w	8009468 <_dtoa_r+0x518>
 800930c:	9b07      	ldr	r3, [sp, #28]
 800930e:	2b00      	cmp	r3, #0
 8009310:	f000 80aa 	beq.w	8009468 <_dtoa_r+0x518>
 8009314:	9b00      	ldr	r3, [sp, #0]
 8009316:	2b00      	cmp	r3, #0
 8009318:	dd37      	ble.n	800938a <_dtoa_r+0x43a>
 800931a:	1e7b      	subs	r3, r7, #1
 800931c:	9304      	str	r3, [sp, #16]
 800931e:	4620      	mov	r0, r4
 8009320:	4b7d      	ldr	r3, [pc, #500]	@ (8009518 <_dtoa_r+0x5c8>)
 8009322:	2200      	movs	r2, #0
 8009324:	4629      	mov	r1, r5
 8009326:	f7f7 f967 	bl	80005f8 <__aeabi_dmul>
 800932a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800932e:	9c00      	ldr	r4, [sp, #0]
 8009330:	3601      	adds	r6, #1
 8009332:	4630      	mov	r0, r6
 8009334:	f7f7 f8f6 	bl	8000524 <__aeabi_i2d>
 8009338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800933c:	f7f7 f95c 	bl	80005f8 <__aeabi_dmul>
 8009340:	4b76      	ldr	r3, [pc, #472]	@ (800951c <_dtoa_r+0x5cc>)
 8009342:	2200      	movs	r2, #0
 8009344:	f7f6 ffa2 	bl	800028c <__adddf3>
 8009348:	4605      	mov	r5, r0
 800934a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800934e:	2c00      	cmp	r4, #0
 8009350:	f040 808d 	bne.w	800946e <_dtoa_r+0x51e>
 8009354:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009358:	4b71      	ldr	r3, [pc, #452]	@ (8009520 <_dtoa_r+0x5d0>)
 800935a:	2200      	movs	r2, #0
 800935c:	f7f6 ff94 	bl	8000288 <__aeabi_dsub>
 8009360:	4602      	mov	r2, r0
 8009362:	460b      	mov	r3, r1
 8009364:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009368:	462a      	mov	r2, r5
 800936a:	4633      	mov	r3, r6
 800936c:	f7f7 fbd4 	bl	8000b18 <__aeabi_dcmpgt>
 8009370:	2800      	cmp	r0, #0
 8009372:	f040 828b 	bne.w	800988c <_dtoa_r+0x93c>
 8009376:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800937a:	462a      	mov	r2, r5
 800937c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009380:	f7f7 fbac 	bl	8000adc <__aeabi_dcmplt>
 8009384:	2800      	cmp	r0, #0
 8009386:	f040 8128 	bne.w	80095da <_dtoa_r+0x68a>
 800938a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800938e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8009392:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009394:	2b00      	cmp	r3, #0
 8009396:	f2c0 815a 	blt.w	800964e <_dtoa_r+0x6fe>
 800939a:	2f0e      	cmp	r7, #14
 800939c:	f300 8157 	bgt.w	800964e <_dtoa_r+0x6fe>
 80093a0:	4b5a      	ldr	r3, [pc, #360]	@ (800950c <_dtoa_r+0x5bc>)
 80093a2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80093a6:	ed93 7b00 	vldr	d7, [r3]
 80093aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	ed8d 7b00 	vstr	d7, [sp]
 80093b2:	da03      	bge.n	80093bc <_dtoa_r+0x46c>
 80093b4:	9b07      	ldr	r3, [sp, #28]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	f340 8101 	ble.w	80095be <_dtoa_r+0x66e>
 80093bc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80093c0:	4656      	mov	r6, sl
 80093c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80093c6:	4620      	mov	r0, r4
 80093c8:	4629      	mov	r1, r5
 80093ca:	f7f7 fa3f 	bl	800084c <__aeabi_ddiv>
 80093ce:	f7f7 fbc3 	bl	8000b58 <__aeabi_d2iz>
 80093d2:	4680      	mov	r8, r0
 80093d4:	f7f7 f8a6 	bl	8000524 <__aeabi_i2d>
 80093d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80093dc:	f7f7 f90c 	bl	80005f8 <__aeabi_dmul>
 80093e0:	4602      	mov	r2, r0
 80093e2:	460b      	mov	r3, r1
 80093e4:	4620      	mov	r0, r4
 80093e6:	4629      	mov	r1, r5
 80093e8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80093ec:	f7f6 ff4c 	bl	8000288 <__aeabi_dsub>
 80093f0:	f806 4b01 	strb.w	r4, [r6], #1
 80093f4:	9d07      	ldr	r5, [sp, #28]
 80093f6:	eba6 040a 	sub.w	r4, r6, sl
 80093fa:	42a5      	cmp	r5, r4
 80093fc:	4602      	mov	r2, r0
 80093fe:	460b      	mov	r3, r1
 8009400:	f040 8117 	bne.w	8009632 <_dtoa_r+0x6e2>
 8009404:	f7f6 ff42 	bl	800028c <__adddf3>
 8009408:	e9dd 2300 	ldrd	r2, r3, [sp]
 800940c:	4604      	mov	r4, r0
 800940e:	460d      	mov	r5, r1
 8009410:	f7f7 fb82 	bl	8000b18 <__aeabi_dcmpgt>
 8009414:	2800      	cmp	r0, #0
 8009416:	f040 80f9 	bne.w	800960c <_dtoa_r+0x6bc>
 800941a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800941e:	4620      	mov	r0, r4
 8009420:	4629      	mov	r1, r5
 8009422:	f7f7 fb51 	bl	8000ac8 <__aeabi_dcmpeq>
 8009426:	b118      	cbz	r0, 8009430 <_dtoa_r+0x4e0>
 8009428:	f018 0f01 	tst.w	r8, #1
 800942c:	f040 80ee 	bne.w	800960c <_dtoa_r+0x6bc>
 8009430:	4649      	mov	r1, r9
 8009432:	4658      	mov	r0, fp
 8009434:	f000 fc90 	bl	8009d58 <_Bfree>
 8009438:	2300      	movs	r3, #0
 800943a:	7033      	strb	r3, [r6, #0]
 800943c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800943e:	3701      	adds	r7, #1
 8009440:	601f      	str	r7, [r3, #0]
 8009442:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009444:	2b00      	cmp	r3, #0
 8009446:	f000 831d 	beq.w	8009a84 <_dtoa_r+0xb34>
 800944a:	601e      	str	r6, [r3, #0]
 800944c:	e31a      	b.n	8009a84 <_dtoa_r+0xb34>
 800944e:	07e2      	lsls	r2, r4, #31
 8009450:	d505      	bpl.n	800945e <_dtoa_r+0x50e>
 8009452:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009456:	f7f7 f8cf 	bl	80005f8 <__aeabi_dmul>
 800945a:	3601      	adds	r6, #1
 800945c:	2301      	movs	r3, #1
 800945e:	1064      	asrs	r4, r4, #1
 8009460:	3508      	adds	r5, #8
 8009462:	e73f      	b.n	80092e4 <_dtoa_r+0x394>
 8009464:	2602      	movs	r6, #2
 8009466:	e742      	b.n	80092ee <_dtoa_r+0x39e>
 8009468:	9c07      	ldr	r4, [sp, #28]
 800946a:	9704      	str	r7, [sp, #16]
 800946c:	e761      	b.n	8009332 <_dtoa_r+0x3e2>
 800946e:	4b27      	ldr	r3, [pc, #156]	@ (800950c <_dtoa_r+0x5bc>)
 8009470:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009472:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009476:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800947a:	4454      	add	r4, sl
 800947c:	2900      	cmp	r1, #0
 800947e:	d053      	beq.n	8009528 <_dtoa_r+0x5d8>
 8009480:	4928      	ldr	r1, [pc, #160]	@ (8009524 <_dtoa_r+0x5d4>)
 8009482:	2000      	movs	r0, #0
 8009484:	f7f7 f9e2 	bl	800084c <__aeabi_ddiv>
 8009488:	4633      	mov	r3, r6
 800948a:	462a      	mov	r2, r5
 800948c:	f7f6 fefc 	bl	8000288 <__aeabi_dsub>
 8009490:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009494:	4656      	mov	r6, sl
 8009496:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800949a:	f7f7 fb5d 	bl	8000b58 <__aeabi_d2iz>
 800949e:	4605      	mov	r5, r0
 80094a0:	f7f7 f840 	bl	8000524 <__aeabi_i2d>
 80094a4:	4602      	mov	r2, r0
 80094a6:	460b      	mov	r3, r1
 80094a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80094ac:	f7f6 feec 	bl	8000288 <__aeabi_dsub>
 80094b0:	3530      	adds	r5, #48	@ 0x30
 80094b2:	4602      	mov	r2, r0
 80094b4:	460b      	mov	r3, r1
 80094b6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80094ba:	f806 5b01 	strb.w	r5, [r6], #1
 80094be:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80094c2:	f7f7 fb0b 	bl	8000adc <__aeabi_dcmplt>
 80094c6:	2800      	cmp	r0, #0
 80094c8:	d171      	bne.n	80095ae <_dtoa_r+0x65e>
 80094ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80094ce:	4911      	ldr	r1, [pc, #68]	@ (8009514 <_dtoa_r+0x5c4>)
 80094d0:	2000      	movs	r0, #0
 80094d2:	f7f6 fed9 	bl	8000288 <__aeabi_dsub>
 80094d6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80094da:	f7f7 faff 	bl	8000adc <__aeabi_dcmplt>
 80094de:	2800      	cmp	r0, #0
 80094e0:	f040 8095 	bne.w	800960e <_dtoa_r+0x6be>
 80094e4:	42a6      	cmp	r6, r4
 80094e6:	f43f af50 	beq.w	800938a <_dtoa_r+0x43a>
 80094ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80094ee:	4b0a      	ldr	r3, [pc, #40]	@ (8009518 <_dtoa_r+0x5c8>)
 80094f0:	2200      	movs	r2, #0
 80094f2:	f7f7 f881 	bl	80005f8 <__aeabi_dmul>
 80094f6:	4b08      	ldr	r3, [pc, #32]	@ (8009518 <_dtoa_r+0x5c8>)
 80094f8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80094fc:	2200      	movs	r2, #0
 80094fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009502:	f7f7 f879 	bl	80005f8 <__aeabi_dmul>
 8009506:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800950a:	e7c4      	b.n	8009496 <_dtoa_r+0x546>
 800950c:	0800b1f8 	.word	0x0800b1f8
 8009510:	0800b1d0 	.word	0x0800b1d0
 8009514:	3ff00000 	.word	0x3ff00000
 8009518:	40240000 	.word	0x40240000
 800951c:	401c0000 	.word	0x401c0000
 8009520:	40140000 	.word	0x40140000
 8009524:	3fe00000 	.word	0x3fe00000
 8009528:	4631      	mov	r1, r6
 800952a:	4628      	mov	r0, r5
 800952c:	f7f7 f864 	bl	80005f8 <__aeabi_dmul>
 8009530:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009534:	9415      	str	r4, [sp, #84]	@ 0x54
 8009536:	4656      	mov	r6, sl
 8009538:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800953c:	f7f7 fb0c 	bl	8000b58 <__aeabi_d2iz>
 8009540:	4605      	mov	r5, r0
 8009542:	f7f6 ffef 	bl	8000524 <__aeabi_i2d>
 8009546:	4602      	mov	r2, r0
 8009548:	460b      	mov	r3, r1
 800954a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800954e:	f7f6 fe9b 	bl	8000288 <__aeabi_dsub>
 8009552:	3530      	adds	r5, #48	@ 0x30
 8009554:	f806 5b01 	strb.w	r5, [r6], #1
 8009558:	4602      	mov	r2, r0
 800955a:	460b      	mov	r3, r1
 800955c:	42a6      	cmp	r6, r4
 800955e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009562:	f04f 0200 	mov.w	r2, #0
 8009566:	d124      	bne.n	80095b2 <_dtoa_r+0x662>
 8009568:	4bac      	ldr	r3, [pc, #688]	@ (800981c <_dtoa_r+0x8cc>)
 800956a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800956e:	f7f6 fe8d 	bl	800028c <__adddf3>
 8009572:	4602      	mov	r2, r0
 8009574:	460b      	mov	r3, r1
 8009576:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800957a:	f7f7 facd 	bl	8000b18 <__aeabi_dcmpgt>
 800957e:	2800      	cmp	r0, #0
 8009580:	d145      	bne.n	800960e <_dtoa_r+0x6be>
 8009582:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009586:	49a5      	ldr	r1, [pc, #660]	@ (800981c <_dtoa_r+0x8cc>)
 8009588:	2000      	movs	r0, #0
 800958a:	f7f6 fe7d 	bl	8000288 <__aeabi_dsub>
 800958e:	4602      	mov	r2, r0
 8009590:	460b      	mov	r3, r1
 8009592:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009596:	f7f7 faa1 	bl	8000adc <__aeabi_dcmplt>
 800959a:	2800      	cmp	r0, #0
 800959c:	f43f aef5 	beq.w	800938a <_dtoa_r+0x43a>
 80095a0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80095a2:	1e73      	subs	r3, r6, #1
 80095a4:	9315      	str	r3, [sp, #84]	@ 0x54
 80095a6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80095aa:	2b30      	cmp	r3, #48	@ 0x30
 80095ac:	d0f8      	beq.n	80095a0 <_dtoa_r+0x650>
 80095ae:	9f04      	ldr	r7, [sp, #16]
 80095b0:	e73e      	b.n	8009430 <_dtoa_r+0x4e0>
 80095b2:	4b9b      	ldr	r3, [pc, #620]	@ (8009820 <_dtoa_r+0x8d0>)
 80095b4:	f7f7 f820 	bl	80005f8 <__aeabi_dmul>
 80095b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80095bc:	e7bc      	b.n	8009538 <_dtoa_r+0x5e8>
 80095be:	d10c      	bne.n	80095da <_dtoa_r+0x68a>
 80095c0:	4b98      	ldr	r3, [pc, #608]	@ (8009824 <_dtoa_r+0x8d4>)
 80095c2:	2200      	movs	r2, #0
 80095c4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80095c8:	f7f7 f816 	bl	80005f8 <__aeabi_dmul>
 80095cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80095d0:	f7f7 fa98 	bl	8000b04 <__aeabi_dcmpge>
 80095d4:	2800      	cmp	r0, #0
 80095d6:	f000 8157 	beq.w	8009888 <_dtoa_r+0x938>
 80095da:	2400      	movs	r4, #0
 80095dc:	4625      	mov	r5, r4
 80095de:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80095e0:	43db      	mvns	r3, r3
 80095e2:	9304      	str	r3, [sp, #16]
 80095e4:	4656      	mov	r6, sl
 80095e6:	2700      	movs	r7, #0
 80095e8:	4621      	mov	r1, r4
 80095ea:	4658      	mov	r0, fp
 80095ec:	f000 fbb4 	bl	8009d58 <_Bfree>
 80095f0:	2d00      	cmp	r5, #0
 80095f2:	d0dc      	beq.n	80095ae <_dtoa_r+0x65e>
 80095f4:	b12f      	cbz	r7, 8009602 <_dtoa_r+0x6b2>
 80095f6:	42af      	cmp	r7, r5
 80095f8:	d003      	beq.n	8009602 <_dtoa_r+0x6b2>
 80095fa:	4639      	mov	r1, r7
 80095fc:	4658      	mov	r0, fp
 80095fe:	f000 fbab 	bl	8009d58 <_Bfree>
 8009602:	4629      	mov	r1, r5
 8009604:	4658      	mov	r0, fp
 8009606:	f000 fba7 	bl	8009d58 <_Bfree>
 800960a:	e7d0      	b.n	80095ae <_dtoa_r+0x65e>
 800960c:	9704      	str	r7, [sp, #16]
 800960e:	4633      	mov	r3, r6
 8009610:	461e      	mov	r6, r3
 8009612:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009616:	2a39      	cmp	r2, #57	@ 0x39
 8009618:	d107      	bne.n	800962a <_dtoa_r+0x6da>
 800961a:	459a      	cmp	sl, r3
 800961c:	d1f8      	bne.n	8009610 <_dtoa_r+0x6c0>
 800961e:	9a04      	ldr	r2, [sp, #16]
 8009620:	3201      	adds	r2, #1
 8009622:	9204      	str	r2, [sp, #16]
 8009624:	2230      	movs	r2, #48	@ 0x30
 8009626:	f88a 2000 	strb.w	r2, [sl]
 800962a:	781a      	ldrb	r2, [r3, #0]
 800962c:	3201      	adds	r2, #1
 800962e:	701a      	strb	r2, [r3, #0]
 8009630:	e7bd      	b.n	80095ae <_dtoa_r+0x65e>
 8009632:	4b7b      	ldr	r3, [pc, #492]	@ (8009820 <_dtoa_r+0x8d0>)
 8009634:	2200      	movs	r2, #0
 8009636:	f7f6 ffdf 	bl	80005f8 <__aeabi_dmul>
 800963a:	2200      	movs	r2, #0
 800963c:	2300      	movs	r3, #0
 800963e:	4604      	mov	r4, r0
 8009640:	460d      	mov	r5, r1
 8009642:	f7f7 fa41 	bl	8000ac8 <__aeabi_dcmpeq>
 8009646:	2800      	cmp	r0, #0
 8009648:	f43f aebb 	beq.w	80093c2 <_dtoa_r+0x472>
 800964c:	e6f0      	b.n	8009430 <_dtoa_r+0x4e0>
 800964e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009650:	2a00      	cmp	r2, #0
 8009652:	f000 80db 	beq.w	800980c <_dtoa_r+0x8bc>
 8009656:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009658:	2a01      	cmp	r2, #1
 800965a:	f300 80bf 	bgt.w	80097dc <_dtoa_r+0x88c>
 800965e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009660:	2a00      	cmp	r2, #0
 8009662:	f000 80b7 	beq.w	80097d4 <_dtoa_r+0x884>
 8009666:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800966a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800966c:	4646      	mov	r6, r8
 800966e:	9a08      	ldr	r2, [sp, #32]
 8009670:	2101      	movs	r1, #1
 8009672:	441a      	add	r2, r3
 8009674:	4658      	mov	r0, fp
 8009676:	4498      	add	r8, r3
 8009678:	9208      	str	r2, [sp, #32]
 800967a:	f000 fc21 	bl	8009ec0 <__i2b>
 800967e:	4605      	mov	r5, r0
 8009680:	b15e      	cbz	r6, 800969a <_dtoa_r+0x74a>
 8009682:	9b08      	ldr	r3, [sp, #32]
 8009684:	2b00      	cmp	r3, #0
 8009686:	dd08      	ble.n	800969a <_dtoa_r+0x74a>
 8009688:	42b3      	cmp	r3, r6
 800968a:	9a08      	ldr	r2, [sp, #32]
 800968c:	bfa8      	it	ge
 800968e:	4633      	movge	r3, r6
 8009690:	eba8 0803 	sub.w	r8, r8, r3
 8009694:	1af6      	subs	r6, r6, r3
 8009696:	1ad3      	subs	r3, r2, r3
 8009698:	9308      	str	r3, [sp, #32]
 800969a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800969c:	b1f3      	cbz	r3, 80096dc <_dtoa_r+0x78c>
 800969e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	f000 80b7 	beq.w	8009814 <_dtoa_r+0x8c4>
 80096a6:	b18c      	cbz	r4, 80096cc <_dtoa_r+0x77c>
 80096a8:	4629      	mov	r1, r5
 80096aa:	4622      	mov	r2, r4
 80096ac:	4658      	mov	r0, fp
 80096ae:	f000 fcc7 	bl	800a040 <__pow5mult>
 80096b2:	464a      	mov	r2, r9
 80096b4:	4601      	mov	r1, r0
 80096b6:	4605      	mov	r5, r0
 80096b8:	4658      	mov	r0, fp
 80096ba:	f000 fc17 	bl	8009eec <__multiply>
 80096be:	4649      	mov	r1, r9
 80096c0:	9004      	str	r0, [sp, #16]
 80096c2:	4658      	mov	r0, fp
 80096c4:	f000 fb48 	bl	8009d58 <_Bfree>
 80096c8:	9b04      	ldr	r3, [sp, #16]
 80096ca:	4699      	mov	r9, r3
 80096cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80096ce:	1b1a      	subs	r2, r3, r4
 80096d0:	d004      	beq.n	80096dc <_dtoa_r+0x78c>
 80096d2:	4649      	mov	r1, r9
 80096d4:	4658      	mov	r0, fp
 80096d6:	f000 fcb3 	bl	800a040 <__pow5mult>
 80096da:	4681      	mov	r9, r0
 80096dc:	2101      	movs	r1, #1
 80096de:	4658      	mov	r0, fp
 80096e0:	f000 fbee 	bl	8009ec0 <__i2b>
 80096e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80096e6:	4604      	mov	r4, r0
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	f000 81cf 	beq.w	8009a8c <_dtoa_r+0xb3c>
 80096ee:	461a      	mov	r2, r3
 80096f0:	4601      	mov	r1, r0
 80096f2:	4658      	mov	r0, fp
 80096f4:	f000 fca4 	bl	800a040 <__pow5mult>
 80096f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80096fa:	2b01      	cmp	r3, #1
 80096fc:	4604      	mov	r4, r0
 80096fe:	f300 8095 	bgt.w	800982c <_dtoa_r+0x8dc>
 8009702:	9b02      	ldr	r3, [sp, #8]
 8009704:	2b00      	cmp	r3, #0
 8009706:	f040 8087 	bne.w	8009818 <_dtoa_r+0x8c8>
 800970a:	9b03      	ldr	r3, [sp, #12]
 800970c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009710:	2b00      	cmp	r3, #0
 8009712:	f040 8089 	bne.w	8009828 <_dtoa_r+0x8d8>
 8009716:	9b03      	ldr	r3, [sp, #12]
 8009718:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800971c:	0d1b      	lsrs	r3, r3, #20
 800971e:	051b      	lsls	r3, r3, #20
 8009720:	b12b      	cbz	r3, 800972e <_dtoa_r+0x7de>
 8009722:	9b08      	ldr	r3, [sp, #32]
 8009724:	3301      	adds	r3, #1
 8009726:	9308      	str	r3, [sp, #32]
 8009728:	f108 0801 	add.w	r8, r8, #1
 800972c:	2301      	movs	r3, #1
 800972e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009730:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009732:	2b00      	cmp	r3, #0
 8009734:	f000 81b0 	beq.w	8009a98 <_dtoa_r+0xb48>
 8009738:	6923      	ldr	r3, [r4, #16]
 800973a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800973e:	6918      	ldr	r0, [r3, #16]
 8009740:	f000 fb72 	bl	8009e28 <__hi0bits>
 8009744:	f1c0 0020 	rsb	r0, r0, #32
 8009748:	9b08      	ldr	r3, [sp, #32]
 800974a:	4418      	add	r0, r3
 800974c:	f010 001f 	ands.w	r0, r0, #31
 8009750:	d077      	beq.n	8009842 <_dtoa_r+0x8f2>
 8009752:	f1c0 0320 	rsb	r3, r0, #32
 8009756:	2b04      	cmp	r3, #4
 8009758:	dd6b      	ble.n	8009832 <_dtoa_r+0x8e2>
 800975a:	9b08      	ldr	r3, [sp, #32]
 800975c:	f1c0 001c 	rsb	r0, r0, #28
 8009760:	4403      	add	r3, r0
 8009762:	4480      	add	r8, r0
 8009764:	4406      	add	r6, r0
 8009766:	9308      	str	r3, [sp, #32]
 8009768:	f1b8 0f00 	cmp.w	r8, #0
 800976c:	dd05      	ble.n	800977a <_dtoa_r+0x82a>
 800976e:	4649      	mov	r1, r9
 8009770:	4642      	mov	r2, r8
 8009772:	4658      	mov	r0, fp
 8009774:	f000 fcbe 	bl	800a0f4 <__lshift>
 8009778:	4681      	mov	r9, r0
 800977a:	9b08      	ldr	r3, [sp, #32]
 800977c:	2b00      	cmp	r3, #0
 800977e:	dd05      	ble.n	800978c <_dtoa_r+0x83c>
 8009780:	4621      	mov	r1, r4
 8009782:	461a      	mov	r2, r3
 8009784:	4658      	mov	r0, fp
 8009786:	f000 fcb5 	bl	800a0f4 <__lshift>
 800978a:	4604      	mov	r4, r0
 800978c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800978e:	2b00      	cmp	r3, #0
 8009790:	d059      	beq.n	8009846 <_dtoa_r+0x8f6>
 8009792:	4621      	mov	r1, r4
 8009794:	4648      	mov	r0, r9
 8009796:	f000 fd19 	bl	800a1cc <__mcmp>
 800979a:	2800      	cmp	r0, #0
 800979c:	da53      	bge.n	8009846 <_dtoa_r+0x8f6>
 800979e:	1e7b      	subs	r3, r7, #1
 80097a0:	9304      	str	r3, [sp, #16]
 80097a2:	4649      	mov	r1, r9
 80097a4:	2300      	movs	r3, #0
 80097a6:	220a      	movs	r2, #10
 80097a8:	4658      	mov	r0, fp
 80097aa:	f000 faf7 	bl	8009d9c <__multadd>
 80097ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80097b0:	4681      	mov	r9, r0
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	f000 8172 	beq.w	8009a9c <_dtoa_r+0xb4c>
 80097b8:	2300      	movs	r3, #0
 80097ba:	4629      	mov	r1, r5
 80097bc:	220a      	movs	r2, #10
 80097be:	4658      	mov	r0, fp
 80097c0:	f000 faec 	bl	8009d9c <__multadd>
 80097c4:	9b00      	ldr	r3, [sp, #0]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	4605      	mov	r5, r0
 80097ca:	dc67      	bgt.n	800989c <_dtoa_r+0x94c>
 80097cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80097ce:	2b02      	cmp	r3, #2
 80097d0:	dc41      	bgt.n	8009856 <_dtoa_r+0x906>
 80097d2:	e063      	b.n	800989c <_dtoa_r+0x94c>
 80097d4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80097d6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80097da:	e746      	b.n	800966a <_dtoa_r+0x71a>
 80097dc:	9b07      	ldr	r3, [sp, #28]
 80097de:	1e5c      	subs	r4, r3, #1
 80097e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80097e2:	42a3      	cmp	r3, r4
 80097e4:	bfbf      	itttt	lt
 80097e6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80097e8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80097ea:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80097ec:	1ae3      	sublt	r3, r4, r3
 80097ee:	bfb4      	ite	lt
 80097f0:	18d2      	addlt	r2, r2, r3
 80097f2:	1b1c      	subge	r4, r3, r4
 80097f4:	9b07      	ldr	r3, [sp, #28]
 80097f6:	bfbc      	itt	lt
 80097f8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80097fa:	2400      	movlt	r4, #0
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	bfb5      	itete	lt
 8009800:	eba8 0603 	sublt.w	r6, r8, r3
 8009804:	9b07      	ldrge	r3, [sp, #28]
 8009806:	2300      	movlt	r3, #0
 8009808:	4646      	movge	r6, r8
 800980a:	e730      	b.n	800966e <_dtoa_r+0x71e>
 800980c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800980e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009810:	4646      	mov	r6, r8
 8009812:	e735      	b.n	8009680 <_dtoa_r+0x730>
 8009814:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009816:	e75c      	b.n	80096d2 <_dtoa_r+0x782>
 8009818:	2300      	movs	r3, #0
 800981a:	e788      	b.n	800972e <_dtoa_r+0x7de>
 800981c:	3fe00000 	.word	0x3fe00000
 8009820:	40240000 	.word	0x40240000
 8009824:	40140000 	.word	0x40140000
 8009828:	9b02      	ldr	r3, [sp, #8]
 800982a:	e780      	b.n	800972e <_dtoa_r+0x7de>
 800982c:	2300      	movs	r3, #0
 800982e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009830:	e782      	b.n	8009738 <_dtoa_r+0x7e8>
 8009832:	d099      	beq.n	8009768 <_dtoa_r+0x818>
 8009834:	9a08      	ldr	r2, [sp, #32]
 8009836:	331c      	adds	r3, #28
 8009838:	441a      	add	r2, r3
 800983a:	4498      	add	r8, r3
 800983c:	441e      	add	r6, r3
 800983e:	9208      	str	r2, [sp, #32]
 8009840:	e792      	b.n	8009768 <_dtoa_r+0x818>
 8009842:	4603      	mov	r3, r0
 8009844:	e7f6      	b.n	8009834 <_dtoa_r+0x8e4>
 8009846:	9b07      	ldr	r3, [sp, #28]
 8009848:	9704      	str	r7, [sp, #16]
 800984a:	2b00      	cmp	r3, #0
 800984c:	dc20      	bgt.n	8009890 <_dtoa_r+0x940>
 800984e:	9300      	str	r3, [sp, #0]
 8009850:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009852:	2b02      	cmp	r3, #2
 8009854:	dd1e      	ble.n	8009894 <_dtoa_r+0x944>
 8009856:	9b00      	ldr	r3, [sp, #0]
 8009858:	2b00      	cmp	r3, #0
 800985a:	f47f aec0 	bne.w	80095de <_dtoa_r+0x68e>
 800985e:	4621      	mov	r1, r4
 8009860:	2205      	movs	r2, #5
 8009862:	4658      	mov	r0, fp
 8009864:	f000 fa9a 	bl	8009d9c <__multadd>
 8009868:	4601      	mov	r1, r0
 800986a:	4604      	mov	r4, r0
 800986c:	4648      	mov	r0, r9
 800986e:	f000 fcad 	bl	800a1cc <__mcmp>
 8009872:	2800      	cmp	r0, #0
 8009874:	f77f aeb3 	ble.w	80095de <_dtoa_r+0x68e>
 8009878:	4656      	mov	r6, sl
 800987a:	2331      	movs	r3, #49	@ 0x31
 800987c:	f806 3b01 	strb.w	r3, [r6], #1
 8009880:	9b04      	ldr	r3, [sp, #16]
 8009882:	3301      	adds	r3, #1
 8009884:	9304      	str	r3, [sp, #16]
 8009886:	e6ae      	b.n	80095e6 <_dtoa_r+0x696>
 8009888:	9c07      	ldr	r4, [sp, #28]
 800988a:	9704      	str	r7, [sp, #16]
 800988c:	4625      	mov	r5, r4
 800988e:	e7f3      	b.n	8009878 <_dtoa_r+0x928>
 8009890:	9b07      	ldr	r3, [sp, #28]
 8009892:	9300      	str	r3, [sp, #0]
 8009894:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009896:	2b00      	cmp	r3, #0
 8009898:	f000 8104 	beq.w	8009aa4 <_dtoa_r+0xb54>
 800989c:	2e00      	cmp	r6, #0
 800989e:	dd05      	ble.n	80098ac <_dtoa_r+0x95c>
 80098a0:	4629      	mov	r1, r5
 80098a2:	4632      	mov	r2, r6
 80098a4:	4658      	mov	r0, fp
 80098a6:	f000 fc25 	bl	800a0f4 <__lshift>
 80098aa:	4605      	mov	r5, r0
 80098ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d05a      	beq.n	8009968 <_dtoa_r+0xa18>
 80098b2:	6869      	ldr	r1, [r5, #4]
 80098b4:	4658      	mov	r0, fp
 80098b6:	f000 fa0f 	bl	8009cd8 <_Balloc>
 80098ba:	4606      	mov	r6, r0
 80098bc:	b928      	cbnz	r0, 80098ca <_dtoa_r+0x97a>
 80098be:	4b84      	ldr	r3, [pc, #528]	@ (8009ad0 <_dtoa_r+0xb80>)
 80098c0:	4602      	mov	r2, r0
 80098c2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80098c6:	f7ff bb5a 	b.w	8008f7e <_dtoa_r+0x2e>
 80098ca:	692a      	ldr	r2, [r5, #16]
 80098cc:	3202      	adds	r2, #2
 80098ce:	0092      	lsls	r2, r2, #2
 80098d0:	f105 010c 	add.w	r1, r5, #12
 80098d4:	300c      	adds	r0, #12
 80098d6:	f7ff faa2 	bl	8008e1e <memcpy>
 80098da:	2201      	movs	r2, #1
 80098dc:	4631      	mov	r1, r6
 80098de:	4658      	mov	r0, fp
 80098e0:	f000 fc08 	bl	800a0f4 <__lshift>
 80098e4:	f10a 0301 	add.w	r3, sl, #1
 80098e8:	9307      	str	r3, [sp, #28]
 80098ea:	9b00      	ldr	r3, [sp, #0]
 80098ec:	4453      	add	r3, sl
 80098ee:	930b      	str	r3, [sp, #44]	@ 0x2c
 80098f0:	9b02      	ldr	r3, [sp, #8]
 80098f2:	f003 0301 	and.w	r3, r3, #1
 80098f6:	462f      	mov	r7, r5
 80098f8:	930a      	str	r3, [sp, #40]	@ 0x28
 80098fa:	4605      	mov	r5, r0
 80098fc:	9b07      	ldr	r3, [sp, #28]
 80098fe:	4621      	mov	r1, r4
 8009900:	3b01      	subs	r3, #1
 8009902:	4648      	mov	r0, r9
 8009904:	9300      	str	r3, [sp, #0]
 8009906:	f7ff fa98 	bl	8008e3a <quorem>
 800990a:	4639      	mov	r1, r7
 800990c:	9002      	str	r0, [sp, #8]
 800990e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009912:	4648      	mov	r0, r9
 8009914:	f000 fc5a 	bl	800a1cc <__mcmp>
 8009918:	462a      	mov	r2, r5
 800991a:	9008      	str	r0, [sp, #32]
 800991c:	4621      	mov	r1, r4
 800991e:	4658      	mov	r0, fp
 8009920:	f000 fc70 	bl	800a204 <__mdiff>
 8009924:	68c2      	ldr	r2, [r0, #12]
 8009926:	4606      	mov	r6, r0
 8009928:	bb02      	cbnz	r2, 800996c <_dtoa_r+0xa1c>
 800992a:	4601      	mov	r1, r0
 800992c:	4648      	mov	r0, r9
 800992e:	f000 fc4d 	bl	800a1cc <__mcmp>
 8009932:	4602      	mov	r2, r0
 8009934:	4631      	mov	r1, r6
 8009936:	4658      	mov	r0, fp
 8009938:	920e      	str	r2, [sp, #56]	@ 0x38
 800993a:	f000 fa0d 	bl	8009d58 <_Bfree>
 800993e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009940:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009942:	9e07      	ldr	r6, [sp, #28]
 8009944:	ea43 0102 	orr.w	r1, r3, r2
 8009948:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800994a:	4319      	orrs	r1, r3
 800994c:	d110      	bne.n	8009970 <_dtoa_r+0xa20>
 800994e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009952:	d029      	beq.n	80099a8 <_dtoa_r+0xa58>
 8009954:	9b08      	ldr	r3, [sp, #32]
 8009956:	2b00      	cmp	r3, #0
 8009958:	dd02      	ble.n	8009960 <_dtoa_r+0xa10>
 800995a:	9b02      	ldr	r3, [sp, #8]
 800995c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8009960:	9b00      	ldr	r3, [sp, #0]
 8009962:	f883 8000 	strb.w	r8, [r3]
 8009966:	e63f      	b.n	80095e8 <_dtoa_r+0x698>
 8009968:	4628      	mov	r0, r5
 800996a:	e7bb      	b.n	80098e4 <_dtoa_r+0x994>
 800996c:	2201      	movs	r2, #1
 800996e:	e7e1      	b.n	8009934 <_dtoa_r+0x9e4>
 8009970:	9b08      	ldr	r3, [sp, #32]
 8009972:	2b00      	cmp	r3, #0
 8009974:	db04      	blt.n	8009980 <_dtoa_r+0xa30>
 8009976:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009978:	430b      	orrs	r3, r1
 800997a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800997c:	430b      	orrs	r3, r1
 800997e:	d120      	bne.n	80099c2 <_dtoa_r+0xa72>
 8009980:	2a00      	cmp	r2, #0
 8009982:	dded      	ble.n	8009960 <_dtoa_r+0xa10>
 8009984:	4649      	mov	r1, r9
 8009986:	2201      	movs	r2, #1
 8009988:	4658      	mov	r0, fp
 800998a:	f000 fbb3 	bl	800a0f4 <__lshift>
 800998e:	4621      	mov	r1, r4
 8009990:	4681      	mov	r9, r0
 8009992:	f000 fc1b 	bl	800a1cc <__mcmp>
 8009996:	2800      	cmp	r0, #0
 8009998:	dc03      	bgt.n	80099a2 <_dtoa_r+0xa52>
 800999a:	d1e1      	bne.n	8009960 <_dtoa_r+0xa10>
 800999c:	f018 0f01 	tst.w	r8, #1
 80099a0:	d0de      	beq.n	8009960 <_dtoa_r+0xa10>
 80099a2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80099a6:	d1d8      	bne.n	800995a <_dtoa_r+0xa0a>
 80099a8:	9a00      	ldr	r2, [sp, #0]
 80099aa:	2339      	movs	r3, #57	@ 0x39
 80099ac:	7013      	strb	r3, [r2, #0]
 80099ae:	4633      	mov	r3, r6
 80099b0:	461e      	mov	r6, r3
 80099b2:	3b01      	subs	r3, #1
 80099b4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80099b8:	2a39      	cmp	r2, #57	@ 0x39
 80099ba:	d052      	beq.n	8009a62 <_dtoa_r+0xb12>
 80099bc:	3201      	adds	r2, #1
 80099be:	701a      	strb	r2, [r3, #0]
 80099c0:	e612      	b.n	80095e8 <_dtoa_r+0x698>
 80099c2:	2a00      	cmp	r2, #0
 80099c4:	dd07      	ble.n	80099d6 <_dtoa_r+0xa86>
 80099c6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80099ca:	d0ed      	beq.n	80099a8 <_dtoa_r+0xa58>
 80099cc:	9a00      	ldr	r2, [sp, #0]
 80099ce:	f108 0301 	add.w	r3, r8, #1
 80099d2:	7013      	strb	r3, [r2, #0]
 80099d4:	e608      	b.n	80095e8 <_dtoa_r+0x698>
 80099d6:	9b07      	ldr	r3, [sp, #28]
 80099d8:	9a07      	ldr	r2, [sp, #28]
 80099da:	f803 8c01 	strb.w	r8, [r3, #-1]
 80099de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80099e0:	4293      	cmp	r3, r2
 80099e2:	d028      	beq.n	8009a36 <_dtoa_r+0xae6>
 80099e4:	4649      	mov	r1, r9
 80099e6:	2300      	movs	r3, #0
 80099e8:	220a      	movs	r2, #10
 80099ea:	4658      	mov	r0, fp
 80099ec:	f000 f9d6 	bl	8009d9c <__multadd>
 80099f0:	42af      	cmp	r7, r5
 80099f2:	4681      	mov	r9, r0
 80099f4:	f04f 0300 	mov.w	r3, #0
 80099f8:	f04f 020a 	mov.w	r2, #10
 80099fc:	4639      	mov	r1, r7
 80099fe:	4658      	mov	r0, fp
 8009a00:	d107      	bne.n	8009a12 <_dtoa_r+0xac2>
 8009a02:	f000 f9cb 	bl	8009d9c <__multadd>
 8009a06:	4607      	mov	r7, r0
 8009a08:	4605      	mov	r5, r0
 8009a0a:	9b07      	ldr	r3, [sp, #28]
 8009a0c:	3301      	adds	r3, #1
 8009a0e:	9307      	str	r3, [sp, #28]
 8009a10:	e774      	b.n	80098fc <_dtoa_r+0x9ac>
 8009a12:	f000 f9c3 	bl	8009d9c <__multadd>
 8009a16:	4629      	mov	r1, r5
 8009a18:	4607      	mov	r7, r0
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	220a      	movs	r2, #10
 8009a1e:	4658      	mov	r0, fp
 8009a20:	f000 f9bc 	bl	8009d9c <__multadd>
 8009a24:	4605      	mov	r5, r0
 8009a26:	e7f0      	b.n	8009a0a <_dtoa_r+0xaba>
 8009a28:	9b00      	ldr	r3, [sp, #0]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	bfcc      	ite	gt
 8009a2e:	461e      	movgt	r6, r3
 8009a30:	2601      	movle	r6, #1
 8009a32:	4456      	add	r6, sl
 8009a34:	2700      	movs	r7, #0
 8009a36:	4649      	mov	r1, r9
 8009a38:	2201      	movs	r2, #1
 8009a3a:	4658      	mov	r0, fp
 8009a3c:	f000 fb5a 	bl	800a0f4 <__lshift>
 8009a40:	4621      	mov	r1, r4
 8009a42:	4681      	mov	r9, r0
 8009a44:	f000 fbc2 	bl	800a1cc <__mcmp>
 8009a48:	2800      	cmp	r0, #0
 8009a4a:	dcb0      	bgt.n	80099ae <_dtoa_r+0xa5e>
 8009a4c:	d102      	bne.n	8009a54 <_dtoa_r+0xb04>
 8009a4e:	f018 0f01 	tst.w	r8, #1
 8009a52:	d1ac      	bne.n	80099ae <_dtoa_r+0xa5e>
 8009a54:	4633      	mov	r3, r6
 8009a56:	461e      	mov	r6, r3
 8009a58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009a5c:	2a30      	cmp	r2, #48	@ 0x30
 8009a5e:	d0fa      	beq.n	8009a56 <_dtoa_r+0xb06>
 8009a60:	e5c2      	b.n	80095e8 <_dtoa_r+0x698>
 8009a62:	459a      	cmp	sl, r3
 8009a64:	d1a4      	bne.n	80099b0 <_dtoa_r+0xa60>
 8009a66:	9b04      	ldr	r3, [sp, #16]
 8009a68:	3301      	adds	r3, #1
 8009a6a:	9304      	str	r3, [sp, #16]
 8009a6c:	2331      	movs	r3, #49	@ 0x31
 8009a6e:	f88a 3000 	strb.w	r3, [sl]
 8009a72:	e5b9      	b.n	80095e8 <_dtoa_r+0x698>
 8009a74:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009a76:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8009ad4 <_dtoa_r+0xb84>
 8009a7a:	b11b      	cbz	r3, 8009a84 <_dtoa_r+0xb34>
 8009a7c:	f10a 0308 	add.w	r3, sl, #8
 8009a80:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009a82:	6013      	str	r3, [r2, #0]
 8009a84:	4650      	mov	r0, sl
 8009a86:	b019      	add	sp, #100	@ 0x64
 8009a88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a8e:	2b01      	cmp	r3, #1
 8009a90:	f77f ae37 	ble.w	8009702 <_dtoa_r+0x7b2>
 8009a94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009a96:	930a      	str	r3, [sp, #40]	@ 0x28
 8009a98:	2001      	movs	r0, #1
 8009a9a:	e655      	b.n	8009748 <_dtoa_r+0x7f8>
 8009a9c:	9b00      	ldr	r3, [sp, #0]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	f77f aed6 	ble.w	8009850 <_dtoa_r+0x900>
 8009aa4:	4656      	mov	r6, sl
 8009aa6:	4621      	mov	r1, r4
 8009aa8:	4648      	mov	r0, r9
 8009aaa:	f7ff f9c6 	bl	8008e3a <quorem>
 8009aae:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009ab2:	f806 8b01 	strb.w	r8, [r6], #1
 8009ab6:	9b00      	ldr	r3, [sp, #0]
 8009ab8:	eba6 020a 	sub.w	r2, r6, sl
 8009abc:	4293      	cmp	r3, r2
 8009abe:	ddb3      	ble.n	8009a28 <_dtoa_r+0xad8>
 8009ac0:	4649      	mov	r1, r9
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	220a      	movs	r2, #10
 8009ac6:	4658      	mov	r0, fp
 8009ac8:	f000 f968 	bl	8009d9c <__multadd>
 8009acc:	4681      	mov	r9, r0
 8009ace:	e7ea      	b.n	8009aa6 <_dtoa_r+0xb56>
 8009ad0:	0800b158 	.word	0x0800b158
 8009ad4:	0800b0dc 	.word	0x0800b0dc

08009ad8 <_free_r>:
 8009ad8:	b538      	push	{r3, r4, r5, lr}
 8009ada:	4605      	mov	r5, r0
 8009adc:	2900      	cmp	r1, #0
 8009ade:	d041      	beq.n	8009b64 <_free_r+0x8c>
 8009ae0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ae4:	1f0c      	subs	r4, r1, #4
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	bfb8      	it	lt
 8009aea:	18e4      	addlt	r4, r4, r3
 8009aec:	f000 f8e8 	bl	8009cc0 <__malloc_lock>
 8009af0:	4a1d      	ldr	r2, [pc, #116]	@ (8009b68 <_free_r+0x90>)
 8009af2:	6813      	ldr	r3, [r2, #0]
 8009af4:	b933      	cbnz	r3, 8009b04 <_free_r+0x2c>
 8009af6:	6063      	str	r3, [r4, #4]
 8009af8:	6014      	str	r4, [r2, #0]
 8009afa:	4628      	mov	r0, r5
 8009afc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009b00:	f000 b8e4 	b.w	8009ccc <__malloc_unlock>
 8009b04:	42a3      	cmp	r3, r4
 8009b06:	d908      	bls.n	8009b1a <_free_r+0x42>
 8009b08:	6820      	ldr	r0, [r4, #0]
 8009b0a:	1821      	adds	r1, r4, r0
 8009b0c:	428b      	cmp	r3, r1
 8009b0e:	bf01      	itttt	eq
 8009b10:	6819      	ldreq	r1, [r3, #0]
 8009b12:	685b      	ldreq	r3, [r3, #4]
 8009b14:	1809      	addeq	r1, r1, r0
 8009b16:	6021      	streq	r1, [r4, #0]
 8009b18:	e7ed      	b.n	8009af6 <_free_r+0x1e>
 8009b1a:	461a      	mov	r2, r3
 8009b1c:	685b      	ldr	r3, [r3, #4]
 8009b1e:	b10b      	cbz	r3, 8009b24 <_free_r+0x4c>
 8009b20:	42a3      	cmp	r3, r4
 8009b22:	d9fa      	bls.n	8009b1a <_free_r+0x42>
 8009b24:	6811      	ldr	r1, [r2, #0]
 8009b26:	1850      	adds	r0, r2, r1
 8009b28:	42a0      	cmp	r0, r4
 8009b2a:	d10b      	bne.n	8009b44 <_free_r+0x6c>
 8009b2c:	6820      	ldr	r0, [r4, #0]
 8009b2e:	4401      	add	r1, r0
 8009b30:	1850      	adds	r0, r2, r1
 8009b32:	4283      	cmp	r3, r0
 8009b34:	6011      	str	r1, [r2, #0]
 8009b36:	d1e0      	bne.n	8009afa <_free_r+0x22>
 8009b38:	6818      	ldr	r0, [r3, #0]
 8009b3a:	685b      	ldr	r3, [r3, #4]
 8009b3c:	6053      	str	r3, [r2, #4]
 8009b3e:	4408      	add	r0, r1
 8009b40:	6010      	str	r0, [r2, #0]
 8009b42:	e7da      	b.n	8009afa <_free_r+0x22>
 8009b44:	d902      	bls.n	8009b4c <_free_r+0x74>
 8009b46:	230c      	movs	r3, #12
 8009b48:	602b      	str	r3, [r5, #0]
 8009b4a:	e7d6      	b.n	8009afa <_free_r+0x22>
 8009b4c:	6820      	ldr	r0, [r4, #0]
 8009b4e:	1821      	adds	r1, r4, r0
 8009b50:	428b      	cmp	r3, r1
 8009b52:	bf04      	itt	eq
 8009b54:	6819      	ldreq	r1, [r3, #0]
 8009b56:	685b      	ldreq	r3, [r3, #4]
 8009b58:	6063      	str	r3, [r4, #4]
 8009b5a:	bf04      	itt	eq
 8009b5c:	1809      	addeq	r1, r1, r0
 8009b5e:	6021      	streq	r1, [r4, #0]
 8009b60:	6054      	str	r4, [r2, #4]
 8009b62:	e7ca      	b.n	8009afa <_free_r+0x22>
 8009b64:	bd38      	pop	{r3, r4, r5, pc}
 8009b66:	bf00      	nop
 8009b68:	20003980 	.word	0x20003980

08009b6c <malloc>:
 8009b6c:	4b02      	ldr	r3, [pc, #8]	@ (8009b78 <malloc+0xc>)
 8009b6e:	4601      	mov	r1, r0
 8009b70:	6818      	ldr	r0, [r3, #0]
 8009b72:	f000 b825 	b.w	8009bc0 <_malloc_r>
 8009b76:	bf00      	nop
 8009b78:	2000002c 	.word	0x2000002c

08009b7c <sbrk_aligned>:
 8009b7c:	b570      	push	{r4, r5, r6, lr}
 8009b7e:	4e0f      	ldr	r6, [pc, #60]	@ (8009bbc <sbrk_aligned+0x40>)
 8009b80:	460c      	mov	r4, r1
 8009b82:	6831      	ldr	r1, [r6, #0]
 8009b84:	4605      	mov	r5, r0
 8009b86:	b911      	cbnz	r1, 8009b8e <sbrk_aligned+0x12>
 8009b88:	f000 fe46 	bl	800a818 <_sbrk_r>
 8009b8c:	6030      	str	r0, [r6, #0]
 8009b8e:	4621      	mov	r1, r4
 8009b90:	4628      	mov	r0, r5
 8009b92:	f000 fe41 	bl	800a818 <_sbrk_r>
 8009b96:	1c43      	adds	r3, r0, #1
 8009b98:	d103      	bne.n	8009ba2 <sbrk_aligned+0x26>
 8009b9a:	f04f 34ff 	mov.w	r4, #4294967295
 8009b9e:	4620      	mov	r0, r4
 8009ba0:	bd70      	pop	{r4, r5, r6, pc}
 8009ba2:	1cc4      	adds	r4, r0, #3
 8009ba4:	f024 0403 	bic.w	r4, r4, #3
 8009ba8:	42a0      	cmp	r0, r4
 8009baa:	d0f8      	beq.n	8009b9e <sbrk_aligned+0x22>
 8009bac:	1a21      	subs	r1, r4, r0
 8009bae:	4628      	mov	r0, r5
 8009bb0:	f000 fe32 	bl	800a818 <_sbrk_r>
 8009bb4:	3001      	adds	r0, #1
 8009bb6:	d1f2      	bne.n	8009b9e <sbrk_aligned+0x22>
 8009bb8:	e7ef      	b.n	8009b9a <sbrk_aligned+0x1e>
 8009bba:	bf00      	nop
 8009bbc:	2000397c 	.word	0x2000397c

08009bc0 <_malloc_r>:
 8009bc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009bc4:	1ccd      	adds	r5, r1, #3
 8009bc6:	f025 0503 	bic.w	r5, r5, #3
 8009bca:	3508      	adds	r5, #8
 8009bcc:	2d0c      	cmp	r5, #12
 8009bce:	bf38      	it	cc
 8009bd0:	250c      	movcc	r5, #12
 8009bd2:	2d00      	cmp	r5, #0
 8009bd4:	4606      	mov	r6, r0
 8009bd6:	db01      	blt.n	8009bdc <_malloc_r+0x1c>
 8009bd8:	42a9      	cmp	r1, r5
 8009bda:	d904      	bls.n	8009be6 <_malloc_r+0x26>
 8009bdc:	230c      	movs	r3, #12
 8009bde:	6033      	str	r3, [r6, #0]
 8009be0:	2000      	movs	r0, #0
 8009be2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009be6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009cbc <_malloc_r+0xfc>
 8009bea:	f000 f869 	bl	8009cc0 <__malloc_lock>
 8009bee:	f8d8 3000 	ldr.w	r3, [r8]
 8009bf2:	461c      	mov	r4, r3
 8009bf4:	bb44      	cbnz	r4, 8009c48 <_malloc_r+0x88>
 8009bf6:	4629      	mov	r1, r5
 8009bf8:	4630      	mov	r0, r6
 8009bfa:	f7ff ffbf 	bl	8009b7c <sbrk_aligned>
 8009bfe:	1c43      	adds	r3, r0, #1
 8009c00:	4604      	mov	r4, r0
 8009c02:	d158      	bne.n	8009cb6 <_malloc_r+0xf6>
 8009c04:	f8d8 4000 	ldr.w	r4, [r8]
 8009c08:	4627      	mov	r7, r4
 8009c0a:	2f00      	cmp	r7, #0
 8009c0c:	d143      	bne.n	8009c96 <_malloc_r+0xd6>
 8009c0e:	2c00      	cmp	r4, #0
 8009c10:	d04b      	beq.n	8009caa <_malloc_r+0xea>
 8009c12:	6823      	ldr	r3, [r4, #0]
 8009c14:	4639      	mov	r1, r7
 8009c16:	4630      	mov	r0, r6
 8009c18:	eb04 0903 	add.w	r9, r4, r3
 8009c1c:	f000 fdfc 	bl	800a818 <_sbrk_r>
 8009c20:	4581      	cmp	r9, r0
 8009c22:	d142      	bne.n	8009caa <_malloc_r+0xea>
 8009c24:	6821      	ldr	r1, [r4, #0]
 8009c26:	1a6d      	subs	r5, r5, r1
 8009c28:	4629      	mov	r1, r5
 8009c2a:	4630      	mov	r0, r6
 8009c2c:	f7ff ffa6 	bl	8009b7c <sbrk_aligned>
 8009c30:	3001      	adds	r0, #1
 8009c32:	d03a      	beq.n	8009caa <_malloc_r+0xea>
 8009c34:	6823      	ldr	r3, [r4, #0]
 8009c36:	442b      	add	r3, r5
 8009c38:	6023      	str	r3, [r4, #0]
 8009c3a:	f8d8 3000 	ldr.w	r3, [r8]
 8009c3e:	685a      	ldr	r2, [r3, #4]
 8009c40:	bb62      	cbnz	r2, 8009c9c <_malloc_r+0xdc>
 8009c42:	f8c8 7000 	str.w	r7, [r8]
 8009c46:	e00f      	b.n	8009c68 <_malloc_r+0xa8>
 8009c48:	6822      	ldr	r2, [r4, #0]
 8009c4a:	1b52      	subs	r2, r2, r5
 8009c4c:	d420      	bmi.n	8009c90 <_malloc_r+0xd0>
 8009c4e:	2a0b      	cmp	r2, #11
 8009c50:	d917      	bls.n	8009c82 <_malloc_r+0xc2>
 8009c52:	1961      	adds	r1, r4, r5
 8009c54:	42a3      	cmp	r3, r4
 8009c56:	6025      	str	r5, [r4, #0]
 8009c58:	bf18      	it	ne
 8009c5a:	6059      	strne	r1, [r3, #4]
 8009c5c:	6863      	ldr	r3, [r4, #4]
 8009c5e:	bf08      	it	eq
 8009c60:	f8c8 1000 	streq.w	r1, [r8]
 8009c64:	5162      	str	r2, [r4, r5]
 8009c66:	604b      	str	r3, [r1, #4]
 8009c68:	4630      	mov	r0, r6
 8009c6a:	f000 f82f 	bl	8009ccc <__malloc_unlock>
 8009c6e:	f104 000b 	add.w	r0, r4, #11
 8009c72:	1d23      	adds	r3, r4, #4
 8009c74:	f020 0007 	bic.w	r0, r0, #7
 8009c78:	1ac2      	subs	r2, r0, r3
 8009c7a:	bf1c      	itt	ne
 8009c7c:	1a1b      	subne	r3, r3, r0
 8009c7e:	50a3      	strne	r3, [r4, r2]
 8009c80:	e7af      	b.n	8009be2 <_malloc_r+0x22>
 8009c82:	6862      	ldr	r2, [r4, #4]
 8009c84:	42a3      	cmp	r3, r4
 8009c86:	bf0c      	ite	eq
 8009c88:	f8c8 2000 	streq.w	r2, [r8]
 8009c8c:	605a      	strne	r2, [r3, #4]
 8009c8e:	e7eb      	b.n	8009c68 <_malloc_r+0xa8>
 8009c90:	4623      	mov	r3, r4
 8009c92:	6864      	ldr	r4, [r4, #4]
 8009c94:	e7ae      	b.n	8009bf4 <_malloc_r+0x34>
 8009c96:	463c      	mov	r4, r7
 8009c98:	687f      	ldr	r7, [r7, #4]
 8009c9a:	e7b6      	b.n	8009c0a <_malloc_r+0x4a>
 8009c9c:	461a      	mov	r2, r3
 8009c9e:	685b      	ldr	r3, [r3, #4]
 8009ca0:	42a3      	cmp	r3, r4
 8009ca2:	d1fb      	bne.n	8009c9c <_malloc_r+0xdc>
 8009ca4:	2300      	movs	r3, #0
 8009ca6:	6053      	str	r3, [r2, #4]
 8009ca8:	e7de      	b.n	8009c68 <_malloc_r+0xa8>
 8009caa:	230c      	movs	r3, #12
 8009cac:	6033      	str	r3, [r6, #0]
 8009cae:	4630      	mov	r0, r6
 8009cb0:	f000 f80c 	bl	8009ccc <__malloc_unlock>
 8009cb4:	e794      	b.n	8009be0 <_malloc_r+0x20>
 8009cb6:	6005      	str	r5, [r0, #0]
 8009cb8:	e7d6      	b.n	8009c68 <_malloc_r+0xa8>
 8009cba:	bf00      	nop
 8009cbc:	20003980 	.word	0x20003980

08009cc0 <__malloc_lock>:
 8009cc0:	4801      	ldr	r0, [pc, #4]	@ (8009cc8 <__malloc_lock+0x8>)
 8009cc2:	f7ff b8aa 	b.w	8008e1a <__retarget_lock_acquire_recursive>
 8009cc6:	bf00      	nop
 8009cc8:	20003978 	.word	0x20003978

08009ccc <__malloc_unlock>:
 8009ccc:	4801      	ldr	r0, [pc, #4]	@ (8009cd4 <__malloc_unlock+0x8>)
 8009cce:	f7ff b8a5 	b.w	8008e1c <__retarget_lock_release_recursive>
 8009cd2:	bf00      	nop
 8009cd4:	20003978 	.word	0x20003978

08009cd8 <_Balloc>:
 8009cd8:	b570      	push	{r4, r5, r6, lr}
 8009cda:	69c6      	ldr	r6, [r0, #28]
 8009cdc:	4604      	mov	r4, r0
 8009cde:	460d      	mov	r5, r1
 8009ce0:	b976      	cbnz	r6, 8009d00 <_Balloc+0x28>
 8009ce2:	2010      	movs	r0, #16
 8009ce4:	f7ff ff42 	bl	8009b6c <malloc>
 8009ce8:	4602      	mov	r2, r0
 8009cea:	61e0      	str	r0, [r4, #28]
 8009cec:	b920      	cbnz	r0, 8009cf8 <_Balloc+0x20>
 8009cee:	4b18      	ldr	r3, [pc, #96]	@ (8009d50 <_Balloc+0x78>)
 8009cf0:	4818      	ldr	r0, [pc, #96]	@ (8009d54 <_Balloc+0x7c>)
 8009cf2:	216b      	movs	r1, #107	@ 0x6b
 8009cf4:	f000 fda0 	bl	800a838 <__assert_func>
 8009cf8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009cfc:	6006      	str	r6, [r0, #0]
 8009cfe:	60c6      	str	r6, [r0, #12]
 8009d00:	69e6      	ldr	r6, [r4, #28]
 8009d02:	68f3      	ldr	r3, [r6, #12]
 8009d04:	b183      	cbz	r3, 8009d28 <_Balloc+0x50>
 8009d06:	69e3      	ldr	r3, [r4, #28]
 8009d08:	68db      	ldr	r3, [r3, #12]
 8009d0a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009d0e:	b9b8      	cbnz	r0, 8009d40 <_Balloc+0x68>
 8009d10:	2101      	movs	r1, #1
 8009d12:	fa01 f605 	lsl.w	r6, r1, r5
 8009d16:	1d72      	adds	r2, r6, #5
 8009d18:	0092      	lsls	r2, r2, #2
 8009d1a:	4620      	mov	r0, r4
 8009d1c:	f000 fdaa 	bl	800a874 <_calloc_r>
 8009d20:	b160      	cbz	r0, 8009d3c <_Balloc+0x64>
 8009d22:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009d26:	e00e      	b.n	8009d46 <_Balloc+0x6e>
 8009d28:	2221      	movs	r2, #33	@ 0x21
 8009d2a:	2104      	movs	r1, #4
 8009d2c:	4620      	mov	r0, r4
 8009d2e:	f000 fda1 	bl	800a874 <_calloc_r>
 8009d32:	69e3      	ldr	r3, [r4, #28]
 8009d34:	60f0      	str	r0, [r6, #12]
 8009d36:	68db      	ldr	r3, [r3, #12]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d1e4      	bne.n	8009d06 <_Balloc+0x2e>
 8009d3c:	2000      	movs	r0, #0
 8009d3e:	bd70      	pop	{r4, r5, r6, pc}
 8009d40:	6802      	ldr	r2, [r0, #0]
 8009d42:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009d46:	2300      	movs	r3, #0
 8009d48:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009d4c:	e7f7      	b.n	8009d3e <_Balloc+0x66>
 8009d4e:	bf00      	nop
 8009d50:	0800b0e9 	.word	0x0800b0e9
 8009d54:	0800b169 	.word	0x0800b169

08009d58 <_Bfree>:
 8009d58:	b570      	push	{r4, r5, r6, lr}
 8009d5a:	69c6      	ldr	r6, [r0, #28]
 8009d5c:	4605      	mov	r5, r0
 8009d5e:	460c      	mov	r4, r1
 8009d60:	b976      	cbnz	r6, 8009d80 <_Bfree+0x28>
 8009d62:	2010      	movs	r0, #16
 8009d64:	f7ff ff02 	bl	8009b6c <malloc>
 8009d68:	4602      	mov	r2, r0
 8009d6a:	61e8      	str	r0, [r5, #28]
 8009d6c:	b920      	cbnz	r0, 8009d78 <_Bfree+0x20>
 8009d6e:	4b09      	ldr	r3, [pc, #36]	@ (8009d94 <_Bfree+0x3c>)
 8009d70:	4809      	ldr	r0, [pc, #36]	@ (8009d98 <_Bfree+0x40>)
 8009d72:	218f      	movs	r1, #143	@ 0x8f
 8009d74:	f000 fd60 	bl	800a838 <__assert_func>
 8009d78:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009d7c:	6006      	str	r6, [r0, #0]
 8009d7e:	60c6      	str	r6, [r0, #12]
 8009d80:	b13c      	cbz	r4, 8009d92 <_Bfree+0x3a>
 8009d82:	69eb      	ldr	r3, [r5, #28]
 8009d84:	6862      	ldr	r2, [r4, #4]
 8009d86:	68db      	ldr	r3, [r3, #12]
 8009d88:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009d8c:	6021      	str	r1, [r4, #0]
 8009d8e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009d92:	bd70      	pop	{r4, r5, r6, pc}
 8009d94:	0800b0e9 	.word	0x0800b0e9
 8009d98:	0800b169 	.word	0x0800b169

08009d9c <__multadd>:
 8009d9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009da0:	690d      	ldr	r5, [r1, #16]
 8009da2:	4607      	mov	r7, r0
 8009da4:	460c      	mov	r4, r1
 8009da6:	461e      	mov	r6, r3
 8009da8:	f101 0c14 	add.w	ip, r1, #20
 8009dac:	2000      	movs	r0, #0
 8009dae:	f8dc 3000 	ldr.w	r3, [ip]
 8009db2:	b299      	uxth	r1, r3
 8009db4:	fb02 6101 	mla	r1, r2, r1, r6
 8009db8:	0c1e      	lsrs	r6, r3, #16
 8009dba:	0c0b      	lsrs	r3, r1, #16
 8009dbc:	fb02 3306 	mla	r3, r2, r6, r3
 8009dc0:	b289      	uxth	r1, r1
 8009dc2:	3001      	adds	r0, #1
 8009dc4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009dc8:	4285      	cmp	r5, r0
 8009dca:	f84c 1b04 	str.w	r1, [ip], #4
 8009dce:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009dd2:	dcec      	bgt.n	8009dae <__multadd+0x12>
 8009dd4:	b30e      	cbz	r6, 8009e1a <__multadd+0x7e>
 8009dd6:	68a3      	ldr	r3, [r4, #8]
 8009dd8:	42ab      	cmp	r3, r5
 8009dda:	dc19      	bgt.n	8009e10 <__multadd+0x74>
 8009ddc:	6861      	ldr	r1, [r4, #4]
 8009dde:	4638      	mov	r0, r7
 8009de0:	3101      	adds	r1, #1
 8009de2:	f7ff ff79 	bl	8009cd8 <_Balloc>
 8009de6:	4680      	mov	r8, r0
 8009de8:	b928      	cbnz	r0, 8009df6 <__multadd+0x5a>
 8009dea:	4602      	mov	r2, r0
 8009dec:	4b0c      	ldr	r3, [pc, #48]	@ (8009e20 <__multadd+0x84>)
 8009dee:	480d      	ldr	r0, [pc, #52]	@ (8009e24 <__multadd+0x88>)
 8009df0:	21ba      	movs	r1, #186	@ 0xba
 8009df2:	f000 fd21 	bl	800a838 <__assert_func>
 8009df6:	6922      	ldr	r2, [r4, #16]
 8009df8:	3202      	adds	r2, #2
 8009dfa:	f104 010c 	add.w	r1, r4, #12
 8009dfe:	0092      	lsls	r2, r2, #2
 8009e00:	300c      	adds	r0, #12
 8009e02:	f7ff f80c 	bl	8008e1e <memcpy>
 8009e06:	4621      	mov	r1, r4
 8009e08:	4638      	mov	r0, r7
 8009e0a:	f7ff ffa5 	bl	8009d58 <_Bfree>
 8009e0e:	4644      	mov	r4, r8
 8009e10:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009e14:	3501      	adds	r5, #1
 8009e16:	615e      	str	r6, [r3, #20]
 8009e18:	6125      	str	r5, [r4, #16]
 8009e1a:	4620      	mov	r0, r4
 8009e1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e20:	0800b158 	.word	0x0800b158
 8009e24:	0800b169 	.word	0x0800b169

08009e28 <__hi0bits>:
 8009e28:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009e2c:	4603      	mov	r3, r0
 8009e2e:	bf36      	itet	cc
 8009e30:	0403      	lslcc	r3, r0, #16
 8009e32:	2000      	movcs	r0, #0
 8009e34:	2010      	movcc	r0, #16
 8009e36:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009e3a:	bf3c      	itt	cc
 8009e3c:	021b      	lslcc	r3, r3, #8
 8009e3e:	3008      	addcc	r0, #8
 8009e40:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009e44:	bf3c      	itt	cc
 8009e46:	011b      	lslcc	r3, r3, #4
 8009e48:	3004      	addcc	r0, #4
 8009e4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009e4e:	bf3c      	itt	cc
 8009e50:	009b      	lslcc	r3, r3, #2
 8009e52:	3002      	addcc	r0, #2
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	db05      	blt.n	8009e64 <__hi0bits+0x3c>
 8009e58:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009e5c:	f100 0001 	add.w	r0, r0, #1
 8009e60:	bf08      	it	eq
 8009e62:	2020      	moveq	r0, #32
 8009e64:	4770      	bx	lr

08009e66 <__lo0bits>:
 8009e66:	6803      	ldr	r3, [r0, #0]
 8009e68:	4602      	mov	r2, r0
 8009e6a:	f013 0007 	ands.w	r0, r3, #7
 8009e6e:	d00b      	beq.n	8009e88 <__lo0bits+0x22>
 8009e70:	07d9      	lsls	r1, r3, #31
 8009e72:	d421      	bmi.n	8009eb8 <__lo0bits+0x52>
 8009e74:	0798      	lsls	r0, r3, #30
 8009e76:	bf49      	itett	mi
 8009e78:	085b      	lsrmi	r3, r3, #1
 8009e7a:	089b      	lsrpl	r3, r3, #2
 8009e7c:	2001      	movmi	r0, #1
 8009e7e:	6013      	strmi	r3, [r2, #0]
 8009e80:	bf5c      	itt	pl
 8009e82:	6013      	strpl	r3, [r2, #0]
 8009e84:	2002      	movpl	r0, #2
 8009e86:	4770      	bx	lr
 8009e88:	b299      	uxth	r1, r3
 8009e8a:	b909      	cbnz	r1, 8009e90 <__lo0bits+0x2a>
 8009e8c:	0c1b      	lsrs	r3, r3, #16
 8009e8e:	2010      	movs	r0, #16
 8009e90:	b2d9      	uxtb	r1, r3
 8009e92:	b909      	cbnz	r1, 8009e98 <__lo0bits+0x32>
 8009e94:	3008      	adds	r0, #8
 8009e96:	0a1b      	lsrs	r3, r3, #8
 8009e98:	0719      	lsls	r1, r3, #28
 8009e9a:	bf04      	itt	eq
 8009e9c:	091b      	lsreq	r3, r3, #4
 8009e9e:	3004      	addeq	r0, #4
 8009ea0:	0799      	lsls	r1, r3, #30
 8009ea2:	bf04      	itt	eq
 8009ea4:	089b      	lsreq	r3, r3, #2
 8009ea6:	3002      	addeq	r0, #2
 8009ea8:	07d9      	lsls	r1, r3, #31
 8009eaa:	d403      	bmi.n	8009eb4 <__lo0bits+0x4e>
 8009eac:	085b      	lsrs	r3, r3, #1
 8009eae:	f100 0001 	add.w	r0, r0, #1
 8009eb2:	d003      	beq.n	8009ebc <__lo0bits+0x56>
 8009eb4:	6013      	str	r3, [r2, #0]
 8009eb6:	4770      	bx	lr
 8009eb8:	2000      	movs	r0, #0
 8009eba:	4770      	bx	lr
 8009ebc:	2020      	movs	r0, #32
 8009ebe:	4770      	bx	lr

08009ec0 <__i2b>:
 8009ec0:	b510      	push	{r4, lr}
 8009ec2:	460c      	mov	r4, r1
 8009ec4:	2101      	movs	r1, #1
 8009ec6:	f7ff ff07 	bl	8009cd8 <_Balloc>
 8009eca:	4602      	mov	r2, r0
 8009ecc:	b928      	cbnz	r0, 8009eda <__i2b+0x1a>
 8009ece:	4b05      	ldr	r3, [pc, #20]	@ (8009ee4 <__i2b+0x24>)
 8009ed0:	4805      	ldr	r0, [pc, #20]	@ (8009ee8 <__i2b+0x28>)
 8009ed2:	f240 1145 	movw	r1, #325	@ 0x145
 8009ed6:	f000 fcaf 	bl	800a838 <__assert_func>
 8009eda:	2301      	movs	r3, #1
 8009edc:	6144      	str	r4, [r0, #20]
 8009ede:	6103      	str	r3, [r0, #16]
 8009ee0:	bd10      	pop	{r4, pc}
 8009ee2:	bf00      	nop
 8009ee4:	0800b158 	.word	0x0800b158
 8009ee8:	0800b169 	.word	0x0800b169

08009eec <__multiply>:
 8009eec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ef0:	4614      	mov	r4, r2
 8009ef2:	690a      	ldr	r2, [r1, #16]
 8009ef4:	6923      	ldr	r3, [r4, #16]
 8009ef6:	429a      	cmp	r2, r3
 8009ef8:	bfa8      	it	ge
 8009efa:	4623      	movge	r3, r4
 8009efc:	460f      	mov	r7, r1
 8009efe:	bfa4      	itt	ge
 8009f00:	460c      	movge	r4, r1
 8009f02:	461f      	movge	r7, r3
 8009f04:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8009f08:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8009f0c:	68a3      	ldr	r3, [r4, #8]
 8009f0e:	6861      	ldr	r1, [r4, #4]
 8009f10:	eb0a 0609 	add.w	r6, sl, r9
 8009f14:	42b3      	cmp	r3, r6
 8009f16:	b085      	sub	sp, #20
 8009f18:	bfb8      	it	lt
 8009f1a:	3101      	addlt	r1, #1
 8009f1c:	f7ff fedc 	bl	8009cd8 <_Balloc>
 8009f20:	b930      	cbnz	r0, 8009f30 <__multiply+0x44>
 8009f22:	4602      	mov	r2, r0
 8009f24:	4b44      	ldr	r3, [pc, #272]	@ (800a038 <__multiply+0x14c>)
 8009f26:	4845      	ldr	r0, [pc, #276]	@ (800a03c <__multiply+0x150>)
 8009f28:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009f2c:	f000 fc84 	bl	800a838 <__assert_func>
 8009f30:	f100 0514 	add.w	r5, r0, #20
 8009f34:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009f38:	462b      	mov	r3, r5
 8009f3a:	2200      	movs	r2, #0
 8009f3c:	4543      	cmp	r3, r8
 8009f3e:	d321      	bcc.n	8009f84 <__multiply+0x98>
 8009f40:	f107 0114 	add.w	r1, r7, #20
 8009f44:	f104 0214 	add.w	r2, r4, #20
 8009f48:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8009f4c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8009f50:	9302      	str	r3, [sp, #8]
 8009f52:	1b13      	subs	r3, r2, r4
 8009f54:	3b15      	subs	r3, #21
 8009f56:	f023 0303 	bic.w	r3, r3, #3
 8009f5a:	3304      	adds	r3, #4
 8009f5c:	f104 0715 	add.w	r7, r4, #21
 8009f60:	42ba      	cmp	r2, r7
 8009f62:	bf38      	it	cc
 8009f64:	2304      	movcc	r3, #4
 8009f66:	9301      	str	r3, [sp, #4]
 8009f68:	9b02      	ldr	r3, [sp, #8]
 8009f6a:	9103      	str	r1, [sp, #12]
 8009f6c:	428b      	cmp	r3, r1
 8009f6e:	d80c      	bhi.n	8009f8a <__multiply+0x9e>
 8009f70:	2e00      	cmp	r6, #0
 8009f72:	dd03      	ble.n	8009f7c <__multiply+0x90>
 8009f74:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d05b      	beq.n	800a034 <__multiply+0x148>
 8009f7c:	6106      	str	r6, [r0, #16]
 8009f7e:	b005      	add	sp, #20
 8009f80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f84:	f843 2b04 	str.w	r2, [r3], #4
 8009f88:	e7d8      	b.n	8009f3c <__multiply+0x50>
 8009f8a:	f8b1 a000 	ldrh.w	sl, [r1]
 8009f8e:	f1ba 0f00 	cmp.w	sl, #0
 8009f92:	d024      	beq.n	8009fde <__multiply+0xf2>
 8009f94:	f104 0e14 	add.w	lr, r4, #20
 8009f98:	46a9      	mov	r9, r5
 8009f9a:	f04f 0c00 	mov.w	ip, #0
 8009f9e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009fa2:	f8d9 3000 	ldr.w	r3, [r9]
 8009fa6:	fa1f fb87 	uxth.w	fp, r7
 8009faa:	b29b      	uxth	r3, r3
 8009fac:	fb0a 330b 	mla	r3, sl, fp, r3
 8009fb0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8009fb4:	f8d9 7000 	ldr.w	r7, [r9]
 8009fb8:	4463      	add	r3, ip
 8009fba:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009fbe:	fb0a c70b 	mla	r7, sl, fp, ip
 8009fc2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8009fc6:	b29b      	uxth	r3, r3
 8009fc8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009fcc:	4572      	cmp	r2, lr
 8009fce:	f849 3b04 	str.w	r3, [r9], #4
 8009fd2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009fd6:	d8e2      	bhi.n	8009f9e <__multiply+0xb2>
 8009fd8:	9b01      	ldr	r3, [sp, #4]
 8009fda:	f845 c003 	str.w	ip, [r5, r3]
 8009fde:	9b03      	ldr	r3, [sp, #12]
 8009fe0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009fe4:	3104      	adds	r1, #4
 8009fe6:	f1b9 0f00 	cmp.w	r9, #0
 8009fea:	d021      	beq.n	800a030 <__multiply+0x144>
 8009fec:	682b      	ldr	r3, [r5, #0]
 8009fee:	f104 0c14 	add.w	ip, r4, #20
 8009ff2:	46ae      	mov	lr, r5
 8009ff4:	f04f 0a00 	mov.w	sl, #0
 8009ff8:	f8bc b000 	ldrh.w	fp, [ip]
 8009ffc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800a000:	fb09 770b 	mla	r7, r9, fp, r7
 800a004:	4457      	add	r7, sl
 800a006:	b29b      	uxth	r3, r3
 800a008:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a00c:	f84e 3b04 	str.w	r3, [lr], #4
 800a010:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a014:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a018:	f8be 3000 	ldrh.w	r3, [lr]
 800a01c:	fb09 330a 	mla	r3, r9, sl, r3
 800a020:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800a024:	4562      	cmp	r2, ip
 800a026:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a02a:	d8e5      	bhi.n	8009ff8 <__multiply+0x10c>
 800a02c:	9f01      	ldr	r7, [sp, #4]
 800a02e:	51eb      	str	r3, [r5, r7]
 800a030:	3504      	adds	r5, #4
 800a032:	e799      	b.n	8009f68 <__multiply+0x7c>
 800a034:	3e01      	subs	r6, #1
 800a036:	e79b      	b.n	8009f70 <__multiply+0x84>
 800a038:	0800b158 	.word	0x0800b158
 800a03c:	0800b169 	.word	0x0800b169

0800a040 <__pow5mult>:
 800a040:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a044:	4615      	mov	r5, r2
 800a046:	f012 0203 	ands.w	r2, r2, #3
 800a04a:	4607      	mov	r7, r0
 800a04c:	460e      	mov	r6, r1
 800a04e:	d007      	beq.n	800a060 <__pow5mult+0x20>
 800a050:	4c25      	ldr	r4, [pc, #148]	@ (800a0e8 <__pow5mult+0xa8>)
 800a052:	3a01      	subs	r2, #1
 800a054:	2300      	movs	r3, #0
 800a056:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a05a:	f7ff fe9f 	bl	8009d9c <__multadd>
 800a05e:	4606      	mov	r6, r0
 800a060:	10ad      	asrs	r5, r5, #2
 800a062:	d03d      	beq.n	800a0e0 <__pow5mult+0xa0>
 800a064:	69fc      	ldr	r4, [r7, #28]
 800a066:	b97c      	cbnz	r4, 800a088 <__pow5mult+0x48>
 800a068:	2010      	movs	r0, #16
 800a06a:	f7ff fd7f 	bl	8009b6c <malloc>
 800a06e:	4602      	mov	r2, r0
 800a070:	61f8      	str	r0, [r7, #28]
 800a072:	b928      	cbnz	r0, 800a080 <__pow5mult+0x40>
 800a074:	4b1d      	ldr	r3, [pc, #116]	@ (800a0ec <__pow5mult+0xac>)
 800a076:	481e      	ldr	r0, [pc, #120]	@ (800a0f0 <__pow5mult+0xb0>)
 800a078:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a07c:	f000 fbdc 	bl	800a838 <__assert_func>
 800a080:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a084:	6004      	str	r4, [r0, #0]
 800a086:	60c4      	str	r4, [r0, #12]
 800a088:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a08c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a090:	b94c      	cbnz	r4, 800a0a6 <__pow5mult+0x66>
 800a092:	f240 2171 	movw	r1, #625	@ 0x271
 800a096:	4638      	mov	r0, r7
 800a098:	f7ff ff12 	bl	8009ec0 <__i2b>
 800a09c:	2300      	movs	r3, #0
 800a09e:	f8c8 0008 	str.w	r0, [r8, #8]
 800a0a2:	4604      	mov	r4, r0
 800a0a4:	6003      	str	r3, [r0, #0]
 800a0a6:	f04f 0900 	mov.w	r9, #0
 800a0aa:	07eb      	lsls	r3, r5, #31
 800a0ac:	d50a      	bpl.n	800a0c4 <__pow5mult+0x84>
 800a0ae:	4631      	mov	r1, r6
 800a0b0:	4622      	mov	r2, r4
 800a0b2:	4638      	mov	r0, r7
 800a0b4:	f7ff ff1a 	bl	8009eec <__multiply>
 800a0b8:	4631      	mov	r1, r6
 800a0ba:	4680      	mov	r8, r0
 800a0bc:	4638      	mov	r0, r7
 800a0be:	f7ff fe4b 	bl	8009d58 <_Bfree>
 800a0c2:	4646      	mov	r6, r8
 800a0c4:	106d      	asrs	r5, r5, #1
 800a0c6:	d00b      	beq.n	800a0e0 <__pow5mult+0xa0>
 800a0c8:	6820      	ldr	r0, [r4, #0]
 800a0ca:	b938      	cbnz	r0, 800a0dc <__pow5mult+0x9c>
 800a0cc:	4622      	mov	r2, r4
 800a0ce:	4621      	mov	r1, r4
 800a0d0:	4638      	mov	r0, r7
 800a0d2:	f7ff ff0b 	bl	8009eec <__multiply>
 800a0d6:	6020      	str	r0, [r4, #0]
 800a0d8:	f8c0 9000 	str.w	r9, [r0]
 800a0dc:	4604      	mov	r4, r0
 800a0de:	e7e4      	b.n	800a0aa <__pow5mult+0x6a>
 800a0e0:	4630      	mov	r0, r6
 800a0e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a0e6:	bf00      	nop
 800a0e8:	0800b1c4 	.word	0x0800b1c4
 800a0ec:	0800b0e9 	.word	0x0800b0e9
 800a0f0:	0800b169 	.word	0x0800b169

0800a0f4 <__lshift>:
 800a0f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a0f8:	460c      	mov	r4, r1
 800a0fa:	6849      	ldr	r1, [r1, #4]
 800a0fc:	6923      	ldr	r3, [r4, #16]
 800a0fe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a102:	68a3      	ldr	r3, [r4, #8]
 800a104:	4607      	mov	r7, r0
 800a106:	4691      	mov	r9, r2
 800a108:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a10c:	f108 0601 	add.w	r6, r8, #1
 800a110:	42b3      	cmp	r3, r6
 800a112:	db0b      	blt.n	800a12c <__lshift+0x38>
 800a114:	4638      	mov	r0, r7
 800a116:	f7ff fddf 	bl	8009cd8 <_Balloc>
 800a11a:	4605      	mov	r5, r0
 800a11c:	b948      	cbnz	r0, 800a132 <__lshift+0x3e>
 800a11e:	4602      	mov	r2, r0
 800a120:	4b28      	ldr	r3, [pc, #160]	@ (800a1c4 <__lshift+0xd0>)
 800a122:	4829      	ldr	r0, [pc, #164]	@ (800a1c8 <__lshift+0xd4>)
 800a124:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a128:	f000 fb86 	bl	800a838 <__assert_func>
 800a12c:	3101      	adds	r1, #1
 800a12e:	005b      	lsls	r3, r3, #1
 800a130:	e7ee      	b.n	800a110 <__lshift+0x1c>
 800a132:	2300      	movs	r3, #0
 800a134:	f100 0114 	add.w	r1, r0, #20
 800a138:	f100 0210 	add.w	r2, r0, #16
 800a13c:	4618      	mov	r0, r3
 800a13e:	4553      	cmp	r3, sl
 800a140:	db33      	blt.n	800a1aa <__lshift+0xb6>
 800a142:	6920      	ldr	r0, [r4, #16]
 800a144:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a148:	f104 0314 	add.w	r3, r4, #20
 800a14c:	f019 091f 	ands.w	r9, r9, #31
 800a150:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a154:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a158:	d02b      	beq.n	800a1b2 <__lshift+0xbe>
 800a15a:	f1c9 0e20 	rsb	lr, r9, #32
 800a15e:	468a      	mov	sl, r1
 800a160:	2200      	movs	r2, #0
 800a162:	6818      	ldr	r0, [r3, #0]
 800a164:	fa00 f009 	lsl.w	r0, r0, r9
 800a168:	4310      	orrs	r0, r2
 800a16a:	f84a 0b04 	str.w	r0, [sl], #4
 800a16e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a172:	459c      	cmp	ip, r3
 800a174:	fa22 f20e 	lsr.w	r2, r2, lr
 800a178:	d8f3      	bhi.n	800a162 <__lshift+0x6e>
 800a17a:	ebac 0304 	sub.w	r3, ip, r4
 800a17e:	3b15      	subs	r3, #21
 800a180:	f023 0303 	bic.w	r3, r3, #3
 800a184:	3304      	adds	r3, #4
 800a186:	f104 0015 	add.w	r0, r4, #21
 800a18a:	4584      	cmp	ip, r0
 800a18c:	bf38      	it	cc
 800a18e:	2304      	movcc	r3, #4
 800a190:	50ca      	str	r2, [r1, r3]
 800a192:	b10a      	cbz	r2, 800a198 <__lshift+0xa4>
 800a194:	f108 0602 	add.w	r6, r8, #2
 800a198:	3e01      	subs	r6, #1
 800a19a:	4638      	mov	r0, r7
 800a19c:	612e      	str	r6, [r5, #16]
 800a19e:	4621      	mov	r1, r4
 800a1a0:	f7ff fdda 	bl	8009d58 <_Bfree>
 800a1a4:	4628      	mov	r0, r5
 800a1a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1aa:	f842 0f04 	str.w	r0, [r2, #4]!
 800a1ae:	3301      	adds	r3, #1
 800a1b0:	e7c5      	b.n	800a13e <__lshift+0x4a>
 800a1b2:	3904      	subs	r1, #4
 800a1b4:	f853 2b04 	ldr.w	r2, [r3], #4
 800a1b8:	f841 2f04 	str.w	r2, [r1, #4]!
 800a1bc:	459c      	cmp	ip, r3
 800a1be:	d8f9      	bhi.n	800a1b4 <__lshift+0xc0>
 800a1c0:	e7ea      	b.n	800a198 <__lshift+0xa4>
 800a1c2:	bf00      	nop
 800a1c4:	0800b158 	.word	0x0800b158
 800a1c8:	0800b169 	.word	0x0800b169

0800a1cc <__mcmp>:
 800a1cc:	690a      	ldr	r2, [r1, #16]
 800a1ce:	4603      	mov	r3, r0
 800a1d0:	6900      	ldr	r0, [r0, #16]
 800a1d2:	1a80      	subs	r0, r0, r2
 800a1d4:	b530      	push	{r4, r5, lr}
 800a1d6:	d10e      	bne.n	800a1f6 <__mcmp+0x2a>
 800a1d8:	3314      	adds	r3, #20
 800a1da:	3114      	adds	r1, #20
 800a1dc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a1e0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a1e4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a1e8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a1ec:	4295      	cmp	r5, r2
 800a1ee:	d003      	beq.n	800a1f8 <__mcmp+0x2c>
 800a1f0:	d205      	bcs.n	800a1fe <__mcmp+0x32>
 800a1f2:	f04f 30ff 	mov.w	r0, #4294967295
 800a1f6:	bd30      	pop	{r4, r5, pc}
 800a1f8:	42a3      	cmp	r3, r4
 800a1fa:	d3f3      	bcc.n	800a1e4 <__mcmp+0x18>
 800a1fc:	e7fb      	b.n	800a1f6 <__mcmp+0x2a>
 800a1fe:	2001      	movs	r0, #1
 800a200:	e7f9      	b.n	800a1f6 <__mcmp+0x2a>
	...

0800a204 <__mdiff>:
 800a204:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a208:	4689      	mov	r9, r1
 800a20a:	4606      	mov	r6, r0
 800a20c:	4611      	mov	r1, r2
 800a20e:	4648      	mov	r0, r9
 800a210:	4614      	mov	r4, r2
 800a212:	f7ff ffdb 	bl	800a1cc <__mcmp>
 800a216:	1e05      	subs	r5, r0, #0
 800a218:	d112      	bne.n	800a240 <__mdiff+0x3c>
 800a21a:	4629      	mov	r1, r5
 800a21c:	4630      	mov	r0, r6
 800a21e:	f7ff fd5b 	bl	8009cd8 <_Balloc>
 800a222:	4602      	mov	r2, r0
 800a224:	b928      	cbnz	r0, 800a232 <__mdiff+0x2e>
 800a226:	4b3f      	ldr	r3, [pc, #252]	@ (800a324 <__mdiff+0x120>)
 800a228:	f240 2137 	movw	r1, #567	@ 0x237
 800a22c:	483e      	ldr	r0, [pc, #248]	@ (800a328 <__mdiff+0x124>)
 800a22e:	f000 fb03 	bl	800a838 <__assert_func>
 800a232:	2301      	movs	r3, #1
 800a234:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a238:	4610      	mov	r0, r2
 800a23a:	b003      	add	sp, #12
 800a23c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a240:	bfbc      	itt	lt
 800a242:	464b      	movlt	r3, r9
 800a244:	46a1      	movlt	r9, r4
 800a246:	4630      	mov	r0, r6
 800a248:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a24c:	bfba      	itte	lt
 800a24e:	461c      	movlt	r4, r3
 800a250:	2501      	movlt	r5, #1
 800a252:	2500      	movge	r5, #0
 800a254:	f7ff fd40 	bl	8009cd8 <_Balloc>
 800a258:	4602      	mov	r2, r0
 800a25a:	b918      	cbnz	r0, 800a264 <__mdiff+0x60>
 800a25c:	4b31      	ldr	r3, [pc, #196]	@ (800a324 <__mdiff+0x120>)
 800a25e:	f240 2145 	movw	r1, #581	@ 0x245
 800a262:	e7e3      	b.n	800a22c <__mdiff+0x28>
 800a264:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a268:	6926      	ldr	r6, [r4, #16]
 800a26a:	60c5      	str	r5, [r0, #12]
 800a26c:	f109 0310 	add.w	r3, r9, #16
 800a270:	f109 0514 	add.w	r5, r9, #20
 800a274:	f104 0e14 	add.w	lr, r4, #20
 800a278:	f100 0b14 	add.w	fp, r0, #20
 800a27c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a280:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a284:	9301      	str	r3, [sp, #4]
 800a286:	46d9      	mov	r9, fp
 800a288:	f04f 0c00 	mov.w	ip, #0
 800a28c:	9b01      	ldr	r3, [sp, #4]
 800a28e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a292:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a296:	9301      	str	r3, [sp, #4]
 800a298:	fa1f f38a 	uxth.w	r3, sl
 800a29c:	4619      	mov	r1, r3
 800a29e:	b283      	uxth	r3, r0
 800a2a0:	1acb      	subs	r3, r1, r3
 800a2a2:	0c00      	lsrs	r0, r0, #16
 800a2a4:	4463      	add	r3, ip
 800a2a6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a2aa:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a2ae:	b29b      	uxth	r3, r3
 800a2b0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a2b4:	4576      	cmp	r6, lr
 800a2b6:	f849 3b04 	str.w	r3, [r9], #4
 800a2ba:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a2be:	d8e5      	bhi.n	800a28c <__mdiff+0x88>
 800a2c0:	1b33      	subs	r3, r6, r4
 800a2c2:	3b15      	subs	r3, #21
 800a2c4:	f023 0303 	bic.w	r3, r3, #3
 800a2c8:	3415      	adds	r4, #21
 800a2ca:	3304      	adds	r3, #4
 800a2cc:	42a6      	cmp	r6, r4
 800a2ce:	bf38      	it	cc
 800a2d0:	2304      	movcc	r3, #4
 800a2d2:	441d      	add	r5, r3
 800a2d4:	445b      	add	r3, fp
 800a2d6:	461e      	mov	r6, r3
 800a2d8:	462c      	mov	r4, r5
 800a2da:	4544      	cmp	r4, r8
 800a2dc:	d30e      	bcc.n	800a2fc <__mdiff+0xf8>
 800a2de:	f108 0103 	add.w	r1, r8, #3
 800a2e2:	1b49      	subs	r1, r1, r5
 800a2e4:	f021 0103 	bic.w	r1, r1, #3
 800a2e8:	3d03      	subs	r5, #3
 800a2ea:	45a8      	cmp	r8, r5
 800a2ec:	bf38      	it	cc
 800a2ee:	2100      	movcc	r1, #0
 800a2f0:	440b      	add	r3, r1
 800a2f2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a2f6:	b191      	cbz	r1, 800a31e <__mdiff+0x11a>
 800a2f8:	6117      	str	r7, [r2, #16]
 800a2fa:	e79d      	b.n	800a238 <__mdiff+0x34>
 800a2fc:	f854 1b04 	ldr.w	r1, [r4], #4
 800a300:	46e6      	mov	lr, ip
 800a302:	0c08      	lsrs	r0, r1, #16
 800a304:	fa1c fc81 	uxtah	ip, ip, r1
 800a308:	4471      	add	r1, lr
 800a30a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a30e:	b289      	uxth	r1, r1
 800a310:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a314:	f846 1b04 	str.w	r1, [r6], #4
 800a318:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a31c:	e7dd      	b.n	800a2da <__mdiff+0xd6>
 800a31e:	3f01      	subs	r7, #1
 800a320:	e7e7      	b.n	800a2f2 <__mdiff+0xee>
 800a322:	bf00      	nop
 800a324:	0800b158 	.word	0x0800b158
 800a328:	0800b169 	.word	0x0800b169

0800a32c <__d2b>:
 800a32c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a330:	460f      	mov	r7, r1
 800a332:	2101      	movs	r1, #1
 800a334:	ec59 8b10 	vmov	r8, r9, d0
 800a338:	4616      	mov	r6, r2
 800a33a:	f7ff fccd 	bl	8009cd8 <_Balloc>
 800a33e:	4604      	mov	r4, r0
 800a340:	b930      	cbnz	r0, 800a350 <__d2b+0x24>
 800a342:	4602      	mov	r2, r0
 800a344:	4b23      	ldr	r3, [pc, #140]	@ (800a3d4 <__d2b+0xa8>)
 800a346:	4824      	ldr	r0, [pc, #144]	@ (800a3d8 <__d2b+0xac>)
 800a348:	f240 310f 	movw	r1, #783	@ 0x30f
 800a34c:	f000 fa74 	bl	800a838 <__assert_func>
 800a350:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a354:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a358:	b10d      	cbz	r5, 800a35e <__d2b+0x32>
 800a35a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a35e:	9301      	str	r3, [sp, #4]
 800a360:	f1b8 0300 	subs.w	r3, r8, #0
 800a364:	d023      	beq.n	800a3ae <__d2b+0x82>
 800a366:	4668      	mov	r0, sp
 800a368:	9300      	str	r3, [sp, #0]
 800a36a:	f7ff fd7c 	bl	8009e66 <__lo0bits>
 800a36e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a372:	b1d0      	cbz	r0, 800a3aa <__d2b+0x7e>
 800a374:	f1c0 0320 	rsb	r3, r0, #32
 800a378:	fa02 f303 	lsl.w	r3, r2, r3
 800a37c:	430b      	orrs	r3, r1
 800a37e:	40c2      	lsrs	r2, r0
 800a380:	6163      	str	r3, [r4, #20]
 800a382:	9201      	str	r2, [sp, #4]
 800a384:	9b01      	ldr	r3, [sp, #4]
 800a386:	61a3      	str	r3, [r4, #24]
 800a388:	2b00      	cmp	r3, #0
 800a38a:	bf0c      	ite	eq
 800a38c:	2201      	moveq	r2, #1
 800a38e:	2202      	movne	r2, #2
 800a390:	6122      	str	r2, [r4, #16]
 800a392:	b1a5      	cbz	r5, 800a3be <__d2b+0x92>
 800a394:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a398:	4405      	add	r5, r0
 800a39a:	603d      	str	r5, [r7, #0]
 800a39c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a3a0:	6030      	str	r0, [r6, #0]
 800a3a2:	4620      	mov	r0, r4
 800a3a4:	b003      	add	sp, #12
 800a3a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a3aa:	6161      	str	r1, [r4, #20]
 800a3ac:	e7ea      	b.n	800a384 <__d2b+0x58>
 800a3ae:	a801      	add	r0, sp, #4
 800a3b0:	f7ff fd59 	bl	8009e66 <__lo0bits>
 800a3b4:	9b01      	ldr	r3, [sp, #4]
 800a3b6:	6163      	str	r3, [r4, #20]
 800a3b8:	3020      	adds	r0, #32
 800a3ba:	2201      	movs	r2, #1
 800a3bc:	e7e8      	b.n	800a390 <__d2b+0x64>
 800a3be:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a3c2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a3c6:	6038      	str	r0, [r7, #0]
 800a3c8:	6918      	ldr	r0, [r3, #16]
 800a3ca:	f7ff fd2d 	bl	8009e28 <__hi0bits>
 800a3ce:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a3d2:	e7e5      	b.n	800a3a0 <__d2b+0x74>
 800a3d4:	0800b158 	.word	0x0800b158
 800a3d8:	0800b169 	.word	0x0800b169

0800a3dc <__ssputs_r>:
 800a3dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a3e0:	688e      	ldr	r6, [r1, #8]
 800a3e2:	461f      	mov	r7, r3
 800a3e4:	42be      	cmp	r6, r7
 800a3e6:	680b      	ldr	r3, [r1, #0]
 800a3e8:	4682      	mov	sl, r0
 800a3ea:	460c      	mov	r4, r1
 800a3ec:	4690      	mov	r8, r2
 800a3ee:	d82d      	bhi.n	800a44c <__ssputs_r+0x70>
 800a3f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a3f4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a3f8:	d026      	beq.n	800a448 <__ssputs_r+0x6c>
 800a3fa:	6965      	ldr	r5, [r4, #20]
 800a3fc:	6909      	ldr	r1, [r1, #16]
 800a3fe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a402:	eba3 0901 	sub.w	r9, r3, r1
 800a406:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a40a:	1c7b      	adds	r3, r7, #1
 800a40c:	444b      	add	r3, r9
 800a40e:	106d      	asrs	r5, r5, #1
 800a410:	429d      	cmp	r5, r3
 800a412:	bf38      	it	cc
 800a414:	461d      	movcc	r5, r3
 800a416:	0553      	lsls	r3, r2, #21
 800a418:	d527      	bpl.n	800a46a <__ssputs_r+0x8e>
 800a41a:	4629      	mov	r1, r5
 800a41c:	f7ff fbd0 	bl	8009bc0 <_malloc_r>
 800a420:	4606      	mov	r6, r0
 800a422:	b360      	cbz	r0, 800a47e <__ssputs_r+0xa2>
 800a424:	6921      	ldr	r1, [r4, #16]
 800a426:	464a      	mov	r2, r9
 800a428:	f7fe fcf9 	bl	8008e1e <memcpy>
 800a42c:	89a3      	ldrh	r3, [r4, #12]
 800a42e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a432:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a436:	81a3      	strh	r3, [r4, #12]
 800a438:	6126      	str	r6, [r4, #16]
 800a43a:	6165      	str	r5, [r4, #20]
 800a43c:	444e      	add	r6, r9
 800a43e:	eba5 0509 	sub.w	r5, r5, r9
 800a442:	6026      	str	r6, [r4, #0]
 800a444:	60a5      	str	r5, [r4, #8]
 800a446:	463e      	mov	r6, r7
 800a448:	42be      	cmp	r6, r7
 800a44a:	d900      	bls.n	800a44e <__ssputs_r+0x72>
 800a44c:	463e      	mov	r6, r7
 800a44e:	6820      	ldr	r0, [r4, #0]
 800a450:	4632      	mov	r2, r6
 800a452:	4641      	mov	r1, r8
 800a454:	f000 f9c6 	bl	800a7e4 <memmove>
 800a458:	68a3      	ldr	r3, [r4, #8]
 800a45a:	1b9b      	subs	r3, r3, r6
 800a45c:	60a3      	str	r3, [r4, #8]
 800a45e:	6823      	ldr	r3, [r4, #0]
 800a460:	4433      	add	r3, r6
 800a462:	6023      	str	r3, [r4, #0]
 800a464:	2000      	movs	r0, #0
 800a466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a46a:	462a      	mov	r2, r5
 800a46c:	f000 fa28 	bl	800a8c0 <_realloc_r>
 800a470:	4606      	mov	r6, r0
 800a472:	2800      	cmp	r0, #0
 800a474:	d1e0      	bne.n	800a438 <__ssputs_r+0x5c>
 800a476:	6921      	ldr	r1, [r4, #16]
 800a478:	4650      	mov	r0, sl
 800a47a:	f7ff fb2d 	bl	8009ad8 <_free_r>
 800a47e:	230c      	movs	r3, #12
 800a480:	f8ca 3000 	str.w	r3, [sl]
 800a484:	89a3      	ldrh	r3, [r4, #12]
 800a486:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a48a:	81a3      	strh	r3, [r4, #12]
 800a48c:	f04f 30ff 	mov.w	r0, #4294967295
 800a490:	e7e9      	b.n	800a466 <__ssputs_r+0x8a>
	...

0800a494 <_svfiprintf_r>:
 800a494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a498:	4698      	mov	r8, r3
 800a49a:	898b      	ldrh	r3, [r1, #12]
 800a49c:	061b      	lsls	r3, r3, #24
 800a49e:	b09d      	sub	sp, #116	@ 0x74
 800a4a0:	4607      	mov	r7, r0
 800a4a2:	460d      	mov	r5, r1
 800a4a4:	4614      	mov	r4, r2
 800a4a6:	d510      	bpl.n	800a4ca <_svfiprintf_r+0x36>
 800a4a8:	690b      	ldr	r3, [r1, #16]
 800a4aa:	b973      	cbnz	r3, 800a4ca <_svfiprintf_r+0x36>
 800a4ac:	2140      	movs	r1, #64	@ 0x40
 800a4ae:	f7ff fb87 	bl	8009bc0 <_malloc_r>
 800a4b2:	6028      	str	r0, [r5, #0]
 800a4b4:	6128      	str	r0, [r5, #16]
 800a4b6:	b930      	cbnz	r0, 800a4c6 <_svfiprintf_r+0x32>
 800a4b8:	230c      	movs	r3, #12
 800a4ba:	603b      	str	r3, [r7, #0]
 800a4bc:	f04f 30ff 	mov.w	r0, #4294967295
 800a4c0:	b01d      	add	sp, #116	@ 0x74
 800a4c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4c6:	2340      	movs	r3, #64	@ 0x40
 800a4c8:	616b      	str	r3, [r5, #20]
 800a4ca:	2300      	movs	r3, #0
 800a4cc:	9309      	str	r3, [sp, #36]	@ 0x24
 800a4ce:	2320      	movs	r3, #32
 800a4d0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a4d4:	f8cd 800c 	str.w	r8, [sp, #12]
 800a4d8:	2330      	movs	r3, #48	@ 0x30
 800a4da:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a678 <_svfiprintf_r+0x1e4>
 800a4de:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a4e2:	f04f 0901 	mov.w	r9, #1
 800a4e6:	4623      	mov	r3, r4
 800a4e8:	469a      	mov	sl, r3
 800a4ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a4ee:	b10a      	cbz	r2, 800a4f4 <_svfiprintf_r+0x60>
 800a4f0:	2a25      	cmp	r2, #37	@ 0x25
 800a4f2:	d1f9      	bne.n	800a4e8 <_svfiprintf_r+0x54>
 800a4f4:	ebba 0b04 	subs.w	fp, sl, r4
 800a4f8:	d00b      	beq.n	800a512 <_svfiprintf_r+0x7e>
 800a4fa:	465b      	mov	r3, fp
 800a4fc:	4622      	mov	r2, r4
 800a4fe:	4629      	mov	r1, r5
 800a500:	4638      	mov	r0, r7
 800a502:	f7ff ff6b 	bl	800a3dc <__ssputs_r>
 800a506:	3001      	adds	r0, #1
 800a508:	f000 80a7 	beq.w	800a65a <_svfiprintf_r+0x1c6>
 800a50c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a50e:	445a      	add	r2, fp
 800a510:	9209      	str	r2, [sp, #36]	@ 0x24
 800a512:	f89a 3000 	ldrb.w	r3, [sl]
 800a516:	2b00      	cmp	r3, #0
 800a518:	f000 809f 	beq.w	800a65a <_svfiprintf_r+0x1c6>
 800a51c:	2300      	movs	r3, #0
 800a51e:	f04f 32ff 	mov.w	r2, #4294967295
 800a522:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a526:	f10a 0a01 	add.w	sl, sl, #1
 800a52a:	9304      	str	r3, [sp, #16]
 800a52c:	9307      	str	r3, [sp, #28]
 800a52e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a532:	931a      	str	r3, [sp, #104]	@ 0x68
 800a534:	4654      	mov	r4, sl
 800a536:	2205      	movs	r2, #5
 800a538:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a53c:	484e      	ldr	r0, [pc, #312]	@ (800a678 <_svfiprintf_r+0x1e4>)
 800a53e:	f7f5 fe47 	bl	80001d0 <memchr>
 800a542:	9a04      	ldr	r2, [sp, #16]
 800a544:	b9d8      	cbnz	r0, 800a57e <_svfiprintf_r+0xea>
 800a546:	06d0      	lsls	r0, r2, #27
 800a548:	bf44      	itt	mi
 800a54a:	2320      	movmi	r3, #32
 800a54c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a550:	0711      	lsls	r1, r2, #28
 800a552:	bf44      	itt	mi
 800a554:	232b      	movmi	r3, #43	@ 0x2b
 800a556:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a55a:	f89a 3000 	ldrb.w	r3, [sl]
 800a55e:	2b2a      	cmp	r3, #42	@ 0x2a
 800a560:	d015      	beq.n	800a58e <_svfiprintf_r+0xfa>
 800a562:	9a07      	ldr	r2, [sp, #28]
 800a564:	4654      	mov	r4, sl
 800a566:	2000      	movs	r0, #0
 800a568:	f04f 0c0a 	mov.w	ip, #10
 800a56c:	4621      	mov	r1, r4
 800a56e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a572:	3b30      	subs	r3, #48	@ 0x30
 800a574:	2b09      	cmp	r3, #9
 800a576:	d94b      	bls.n	800a610 <_svfiprintf_r+0x17c>
 800a578:	b1b0      	cbz	r0, 800a5a8 <_svfiprintf_r+0x114>
 800a57a:	9207      	str	r2, [sp, #28]
 800a57c:	e014      	b.n	800a5a8 <_svfiprintf_r+0x114>
 800a57e:	eba0 0308 	sub.w	r3, r0, r8
 800a582:	fa09 f303 	lsl.w	r3, r9, r3
 800a586:	4313      	orrs	r3, r2
 800a588:	9304      	str	r3, [sp, #16]
 800a58a:	46a2      	mov	sl, r4
 800a58c:	e7d2      	b.n	800a534 <_svfiprintf_r+0xa0>
 800a58e:	9b03      	ldr	r3, [sp, #12]
 800a590:	1d19      	adds	r1, r3, #4
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	9103      	str	r1, [sp, #12]
 800a596:	2b00      	cmp	r3, #0
 800a598:	bfbb      	ittet	lt
 800a59a:	425b      	neglt	r3, r3
 800a59c:	f042 0202 	orrlt.w	r2, r2, #2
 800a5a0:	9307      	strge	r3, [sp, #28]
 800a5a2:	9307      	strlt	r3, [sp, #28]
 800a5a4:	bfb8      	it	lt
 800a5a6:	9204      	strlt	r2, [sp, #16]
 800a5a8:	7823      	ldrb	r3, [r4, #0]
 800a5aa:	2b2e      	cmp	r3, #46	@ 0x2e
 800a5ac:	d10a      	bne.n	800a5c4 <_svfiprintf_r+0x130>
 800a5ae:	7863      	ldrb	r3, [r4, #1]
 800a5b0:	2b2a      	cmp	r3, #42	@ 0x2a
 800a5b2:	d132      	bne.n	800a61a <_svfiprintf_r+0x186>
 800a5b4:	9b03      	ldr	r3, [sp, #12]
 800a5b6:	1d1a      	adds	r2, r3, #4
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	9203      	str	r2, [sp, #12]
 800a5bc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a5c0:	3402      	adds	r4, #2
 800a5c2:	9305      	str	r3, [sp, #20]
 800a5c4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a688 <_svfiprintf_r+0x1f4>
 800a5c8:	7821      	ldrb	r1, [r4, #0]
 800a5ca:	2203      	movs	r2, #3
 800a5cc:	4650      	mov	r0, sl
 800a5ce:	f7f5 fdff 	bl	80001d0 <memchr>
 800a5d2:	b138      	cbz	r0, 800a5e4 <_svfiprintf_r+0x150>
 800a5d4:	9b04      	ldr	r3, [sp, #16]
 800a5d6:	eba0 000a 	sub.w	r0, r0, sl
 800a5da:	2240      	movs	r2, #64	@ 0x40
 800a5dc:	4082      	lsls	r2, r0
 800a5de:	4313      	orrs	r3, r2
 800a5e0:	3401      	adds	r4, #1
 800a5e2:	9304      	str	r3, [sp, #16]
 800a5e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5e8:	4824      	ldr	r0, [pc, #144]	@ (800a67c <_svfiprintf_r+0x1e8>)
 800a5ea:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a5ee:	2206      	movs	r2, #6
 800a5f0:	f7f5 fdee 	bl	80001d0 <memchr>
 800a5f4:	2800      	cmp	r0, #0
 800a5f6:	d036      	beq.n	800a666 <_svfiprintf_r+0x1d2>
 800a5f8:	4b21      	ldr	r3, [pc, #132]	@ (800a680 <_svfiprintf_r+0x1ec>)
 800a5fa:	bb1b      	cbnz	r3, 800a644 <_svfiprintf_r+0x1b0>
 800a5fc:	9b03      	ldr	r3, [sp, #12]
 800a5fe:	3307      	adds	r3, #7
 800a600:	f023 0307 	bic.w	r3, r3, #7
 800a604:	3308      	adds	r3, #8
 800a606:	9303      	str	r3, [sp, #12]
 800a608:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a60a:	4433      	add	r3, r6
 800a60c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a60e:	e76a      	b.n	800a4e6 <_svfiprintf_r+0x52>
 800a610:	fb0c 3202 	mla	r2, ip, r2, r3
 800a614:	460c      	mov	r4, r1
 800a616:	2001      	movs	r0, #1
 800a618:	e7a8      	b.n	800a56c <_svfiprintf_r+0xd8>
 800a61a:	2300      	movs	r3, #0
 800a61c:	3401      	adds	r4, #1
 800a61e:	9305      	str	r3, [sp, #20]
 800a620:	4619      	mov	r1, r3
 800a622:	f04f 0c0a 	mov.w	ip, #10
 800a626:	4620      	mov	r0, r4
 800a628:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a62c:	3a30      	subs	r2, #48	@ 0x30
 800a62e:	2a09      	cmp	r2, #9
 800a630:	d903      	bls.n	800a63a <_svfiprintf_r+0x1a6>
 800a632:	2b00      	cmp	r3, #0
 800a634:	d0c6      	beq.n	800a5c4 <_svfiprintf_r+0x130>
 800a636:	9105      	str	r1, [sp, #20]
 800a638:	e7c4      	b.n	800a5c4 <_svfiprintf_r+0x130>
 800a63a:	fb0c 2101 	mla	r1, ip, r1, r2
 800a63e:	4604      	mov	r4, r0
 800a640:	2301      	movs	r3, #1
 800a642:	e7f0      	b.n	800a626 <_svfiprintf_r+0x192>
 800a644:	ab03      	add	r3, sp, #12
 800a646:	9300      	str	r3, [sp, #0]
 800a648:	462a      	mov	r2, r5
 800a64a:	4b0e      	ldr	r3, [pc, #56]	@ (800a684 <_svfiprintf_r+0x1f0>)
 800a64c:	a904      	add	r1, sp, #16
 800a64e:	4638      	mov	r0, r7
 800a650:	f7fd fe74 	bl	800833c <_printf_float>
 800a654:	1c42      	adds	r2, r0, #1
 800a656:	4606      	mov	r6, r0
 800a658:	d1d6      	bne.n	800a608 <_svfiprintf_r+0x174>
 800a65a:	89ab      	ldrh	r3, [r5, #12]
 800a65c:	065b      	lsls	r3, r3, #25
 800a65e:	f53f af2d 	bmi.w	800a4bc <_svfiprintf_r+0x28>
 800a662:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a664:	e72c      	b.n	800a4c0 <_svfiprintf_r+0x2c>
 800a666:	ab03      	add	r3, sp, #12
 800a668:	9300      	str	r3, [sp, #0]
 800a66a:	462a      	mov	r2, r5
 800a66c:	4b05      	ldr	r3, [pc, #20]	@ (800a684 <_svfiprintf_r+0x1f0>)
 800a66e:	a904      	add	r1, sp, #16
 800a670:	4638      	mov	r0, r7
 800a672:	f7fe f8fb 	bl	800886c <_printf_i>
 800a676:	e7ed      	b.n	800a654 <_svfiprintf_r+0x1c0>
 800a678:	0800b2c0 	.word	0x0800b2c0
 800a67c:	0800b2ca 	.word	0x0800b2ca
 800a680:	0800833d 	.word	0x0800833d
 800a684:	0800a3dd 	.word	0x0800a3dd
 800a688:	0800b2c6 	.word	0x0800b2c6

0800a68c <__sflush_r>:
 800a68c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a690:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a694:	0716      	lsls	r6, r2, #28
 800a696:	4605      	mov	r5, r0
 800a698:	460c      	mov	r4, r1
 800a69a:	d454      	bmi.n	800a746 <__sflush_r+0xba>
 800a69c:	684b      	ldr	r3, [r1, #4]
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	dc02      	bgt.n	800a6a8 <__sflush_r+0x1c>
 800a6a2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	dd48      	ble.n	800a73a <__sflush_r+0xae>
 800a6a8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a6aa:	2e00      	cmp	r6, #0
 800a6ac:	d045      	beq.n	800a73a <__sflush_r+0xae>
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a6b4:	682f      	ldr	r7, [r5, #0]
 800a6b6:	6a21      	ldr	r1, [r4, #32]
 800a6b8:	602b      	str	r3, [r5, #0]
 800a6ba:	d030      	beq.n	800a71e <__sflush_r+0x92>
 800a6bc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a6be:	89a3      	ldrh	r3, [r4, #12]
 800a6c0:	0759      	lsls	r1, r3, #29
 800a6c2:	d505      	bpl.n	800a6d0 <__sflush_r+0x44>
 800a6c4:	6863      	ldr	r3, [r4, #4]
 800a6c6:	1ad2      	subs	r2, r2, r3
 800a6c8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a6ca:	b10b      	cbz	r3, 800a6d0 <__sflush_r+0x44>
 800a6cc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a6ce:	1ad2      	subs	r2, r2, r3
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a6d4:	6a21      	ldr	r1, [r4, #32]
 800a6d6:	4628      	mov	r0, r5
 800a6d8:	47b0      	blx	r6
 800a6da:	1c43      	adds	r3, r0, #1
 800a6dc:	89a3      	ldrh	r3, [r4, #12]
 800a6de:	d106      	bne.n	800a6ee <__sflush_r+0x62>
 800a6e0:	6829      	ldr	r1, [r5, #0]
 800a6e2:	291d      	cmp	r1, #29
 800a6e4:	d82b      	bhi.n	800a73e <__sflush_r+0xb2>
 800a6e6:	4a2a      	ldr	r2, [pc, #168]	@ (800a790 <__sflush_r+0x104>)
 800a6e8:	410a      	asrs	r2, r1
 800a6ea:	07d6      	lsls	r6, r2, #31
 800a6ec:	d427      	bmi.n	800a73e <__sflush_r+0xb2>
 800a6ee:	2200      	movs	r2, #0
 800a6f0:	6062      	str	r2, [r4, #4]
 800a6f2:	04d9      	lsls	r1, r3, #19
 800a6f4:	6922      	ldr	r2, [r4, #16]
 800a6f6:	6022      	str	r2, [r4, #0]
 800a6f8:	d504      	bpl.n	800a704 <__sflush_r+0x78>
 800a6fa:	1c42      	adds	r2, r0, #1
 800a6fc:	d101      	bne.n	800a702 <__sflush_r+0x76>
 800a6fe:	682b      	ldr	r3, [r5, #0]
 800a700:	b903      	cbnz	r3, 800a704 <__sflush_r+0x78>
 800a702:	6560      	str	r0, [r4, #84]	@ 0x54
 800a704:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a706:	602f      	str	r7, [r5, #0]
 800a708:	b1b9      	cbz	r1, 800a73a <__sflush_r+0xae>
 800a70a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a70e:	4299      	cmp	r1, r3
 800a710:	d002      	beq.n	800a718 <__sflush_r+0x8c>
 800a712:	4628      	mov	r0, r5
 800a714:	f7ff f9e0 	bl	8009ad8 <_free_r>
 800a718:	2300      	movs	r3, #0
 800a71a:	6363      	str	r3, [r4, #52]	@ 0x34
 800a71c:	e00d      	b.n	800a73a <__sflush_r+0xae>
 800a71e:	2301      	movs	r3, #1
 800a720:	4628      	mov	r0, r5
 800a722:	47b0      	blx	r6
 800a724:	4602      	mov	r2, r0
 800a726:	1c50      	adds	r0, r2, #1
 800a728:	d1c9      	bne.n	800a6be <__sflush_r+0x32>
 800a72a:	682b      	ldr	r3, [r5, #0]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d0c6      	beq.n	800a6be <__sflush_r+0x32>
 800a730:	2b1d      	cmp	r3, #29
 800a732:	d001      	beq.n	800a738 <__sflush_r+0xac>
 800a734:	2b16      	cmp	r3, #22
 800a736:	d11e      	bne.n	800a776 <__sflush_r+0xea>
 800a738:	602f      	str	r7, [r5, #0]
 800a73a:	2000      	movs	r0, #0
 800a73c:	e022      	b.n	800a784 <__sflush_r+0xf8>
 800a73e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a742:	b21b      	sxth	r3, r3
 800a744:	e01b      	b.n	800a77e <__sflush_r+0xf2>
 800a746:	690f      	ldr	r7, [r1, #16]
 800a748:	2f00      	cmp	r7, #0
 800a74a:	d0f6      	beq.n	800a73a <__sflush_r+0xae>
 800a74c:	0793      	lsls	r3, r2, #30
 800a74e:	680e      	ldr	r6, [r1, #0]
 800a750:	bf08      	it	eq
 800a752:	694b      	ldreq	r3, [r1, #20]
 800a754:	600f      	str	r7, [r1, #0]
 800a756:	bf18      	it	ne
 800a758:	2300      	movne	r3, #0
 800a75a:	eba6 0807 	sub.w	r8, r6, r7
 800a75e:	608b      	str	r3, [r1, #8]
 800a760:	f1b8 0f00 	cmp.w	r8, #0
 800a764:	dde9      	ble.n	800a73a <__sflush_r+0xae>
 800a766:	6a21      	ldr	r1, [r4, #32]
 800a768:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a76a:	4643      	mov	r3, r8
 800a76c:	463a      	mov	r2, r7
 800a76e:	4628      	mov	r0, r5
 800a770:	47b0      	blx	r6
 800a772:	2800      	cmp	r0, #0
 800a774:	dc08      	bgt.n	800a788 <__sflush_r+0xfc>
 800a776:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a77a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a77e:	81a3      	strh	r3, [r4, #12]
 800a780:	f04f 30ff 	mov.w	r0, #4294967295
 800a784:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a788:	4407      	add	r7, r0
 800a78a:	eba8 0800 	sub.w	r8, r8, r0
 800a78e:	e7e7      	b.n	800a760 <__sflush_r+0xd4>
 800a790:	dfbffffe 	.word	0xdfbffffe

0800a794 <_fflush_r>:
 800a794:	b538      	push	{r3, r4, r5, lr}
 800a796:	690b      	ldr	r3, [r1, #16]
 800a798:	4605      	mov	r5, r0
 800a79a:	460c      	mov	r4, r1
 800a79c:	b913      	cbnz	r3, 800a7a4 <_fflush_r+0x10>
 800a79e:	2500      	movs	r5, #0
 800a7a0:	4628      	mov	r0, r5
 800a7a2:	bd38      	pop	{r3, r4, r5, pc}
 800a7a4:	b118      	cbz	r0, 800a7ae <_fflush_r+0x1a>
 800a7a6:	6a03      	ldr	r3, [r0, #32]
 800a7a8:	b90b      	cbnz	r3, 800a7ae <_fflush_r+0x1a>
 800a7aa:	f7fe fa0b 	bl	8008bc4 <__sinit>
 800a7ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d0f3      	beq.n	800a79e <_fflush_r+0xa>
 800a7b6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a7b8:	07d0      	lsls	r0, r2, #31
 800a7ba:	d404      	bmi.n	800a7c6 <_fflush_r+0x32>
 800a7bc:	0599      	lsls	r1, r3, #22
 800a7be:	d402      	bmi.n	800a7c6 <_fflush_r+0x32>
 800a7c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a7c2:	f7fe fb2a 	bl	8008e1a <__retarget_lock_acquire_recursive>
 800a7c6:	4628      	mov	r0, r5
 800a7c8:	4621      	mov	r1, r4
 800a7ca:	f7ff ff5f 	bl	800a68c <__sflush_r>
 800a7ce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a7d0:	07da      	lsls	r2, r3, #31
 800a7d2:	4605      	mov	r5, r0
 800a7d4:	d4e4      	bmi.n	800a7a0 <_fflush_r+0xc>
 800a7d6:	89a3      	ldrh	r3, [r4, #12]
 800a7d8:	059b      	lsls	r3, r3, #22
 800a7da:	d4e1      	bmi.n	800a7a0 <_fflush_r+0xc>
 800a7dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a7de:	f7fe fb1d 	bl	8008e1c <__retarget_lock_release_recursive>
 800a7e2:	e7dd      	b.n	800a7a0 <_fflush_r+0xc>

0800a7e4 <memmove>:
 800a7e4:	4288      	cmp	r0, r1
 800a7e6:	b510      	push	{r4, lr}
 800a7e8:	eb01 0402 	add.w	r4, r1, r2
 800a7ec:	d902      	bls.n	800a7f4 <memmove+0x10>
 800a7ee:	4284      	cmp	r4, r0
 800a7f0:	4623      	mov	r3, r4
 800a7f2:	d807      	bhi.n	800a804 <memmove+0x20>
 800a7f4:	1e43      	subs	r3, r0, #1
 800a7f6:	42a1      	cmp	r1, r4
 800a7f8:	d008      	beq.n	800a80c <memmove+0x28>
 800a7fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a7fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a802:	e7f8      	b.n	800a7f6 <memmove+0x12>
 800a804:	4402      	add	r2, r0
 800a806:	4601      	mov	r1, r0
 800a808:	428a      	cmp	r2, r1
 800a80a:	d100      	bne.n	800a80e <memmove+0x2a>
 800a80c:	bd10      	pop	{r4, pc}
 800a80e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a812:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a816:	e7f7      	b.n	800a808 <memmove+0x24>

0800a818 <_sbrk_r>:
 800a818:	b538      	push	{r3, r4, r5, lr}
 800a81a:	4d06      	ldr	r5, [pc, #24]	@ (800a834 <_sbrk_r+0x1c>)
 800a81c:	2300      	movs	r3, #0
 800a81e:	4604      	mov	r4, r0
 800a820:	4608      	mov	r0, r1
 800a822:	602b      	str	r3, [r5, #0]
 800a824:	f7f7 faba 	bl	8001d9c <_sbrk>
 800a828:	1c43      	adds	r3, r0, #1
 800a82a:	d102      	bne.n	800a832 <_sbrk_r+0x1a>
 800a82c:	682b      	ldr	r3, [r5, #0]
 800a82e:	b103      	cbz	r3, 800a832 <_sbrk_r+0x1a>
 800a830:	6023      	str	r3, [r4, #0]
 800a832:	bd38      	pop	{r3, r4, r5, pc}
 800a834:	20003974 	.word	0x20003974

0800a838 <__assert_func>:
 800a838:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a83a:	4614      	mov	r4, r2
 800a83c:	461a      	mov	r2, r3
 800a83e:	4b09      	ldr	r3, [pc, #36]	@ (800a864 <__assert_func+0x2c>)
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	4605      	mov	r5, r0
 800a844:	68d8      	ldr	r0, [r3, #12]
 800a846:	b954      	cbnz	r4, 800a85e <__assert_func+0x26>
 800a848:	4b07      	ldr	r3, [pc, #28]	@ (800a868 <__assert_func+0x30>)
 800a84a:	461c      	mov	r4, r3
 800a84c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a850:	9100      	str	r1, [sp, #0]
 800a852:	462b      	mov	r3, r5
 800a854:	4905      	ldr	r1, [pc, #20]	@ (800a86c <__assert_func+0x34>)
 800a856:	f000 f86f 	bl	800a938 <fiprintf>
 800a85a:	f000 f87f 	bl	800a95c <abort>
 800a85e:	4b04      	ldr	r3, [pc, #16]	@ (800a870 <__assert_func+0x38>)
 800a860:	e7f4      	b.n	800a84c <__assert_func+0x14>
 800a862:	bf00      	nop
 800a864:	2000002c 	.word	0x2000002c
 800a868:	0800b316 	.word	0x0800b316
 800a86c:	0800b2e8 	.word	0x0800b2e8
 800a870:	0800b2db 	.word	0x0800b2db

0800a874 <_calloc_r>:
 800a874:	b570      	push	{r4, r5, r6, lr}
 800a876:	fba1 5402 	umull	r5, r4, r1, r2
 800a87a:	b93c      	cbnz	r4, 800a88c <_calloc_r+0x18>
 800a87c:	4629      	mov	r1, r5
 800a87e:	f7ff f99f 	bl	8009bc0 <_malloc_r>
 800a882:	4606      	mov	r6, r0
 800a884:	b928      	cbnz	r0, 800a892 <_calloc_r+0x1e>
 800a886:	2600      	movs	r6, #0
 800a888:	4630      	mov	r0, r6
 800a88a:	bd70      	pop	{r4, r5, r6, pc}
 800a88c:	220c      	movs	r2, #12
 800a88e:	6002      	str	r2, [r0, #0]
 800a890:	e7f9      	b.n	800a886 <_calloc_r+0x12>
 800a892:	462a      	mov	r2, r5
 800a894:	4621      	mov	r1, r4
 800a896:	f7fe fa42 	bl	8008d1e <memset>
 800a89a:	e7f5      	b.n	800a888 <_calloc_r+0x14>

0800a89c <__ascii_mbtowc>:
 800a89c:	b082      	sub	sp, #8
 800a89e:	b901      	cbnz	r1, 800a8a2 <__ascii_mbtowc+0x6>
 800a8a0:	a901      	add	r1, sp, #4
 800a8a2:	b142      	cbz	r2, 800a8b6 <__ascii_mbtowc+0x1a>
 800a8a4:	b14b      	cbz	r3, 800a8ba <__ascii_mbtowc+0x1e>
 800a8a6:	7813      	ldrb	r3, [r2, #0]
 800a8a8:	600b      	str	r3, [r1, #0]
 800a8aa:	7812      	ldrb	r2, [r2, #0]
 800a8ac:	1e10      	subs	r0, r2, #0
 800a8ae:	bf18      	it	ne
 800a8b0:	2001      	movne	r0, #1
 800a8b2:	b002      	add	sp, #8
 800a8b4:	4770      	bx	lr
 800a8b6:	4610      	mov	r0, r2
 800a8b8:	e7fb      	b.n	800a8b2 <__ascii_mbtowc+0x16>
 800a8ba:	f06f 0001 	mvn.w	r0, #1
 800a8be:	e7f8      	b.n	800a8b2 <__ascii_mbtowc+0x16>

0800a8c0 <_realloc_r>:
 800a8c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8c4:	4680      	mov	r8, r0
 800a8c6:	4615      	mov	r5, r2
 800a8c8:	460c      	mov	r4, r1
 800a8ca:	b921      	cbnz	r1, 800a8d6 <_realloc_r+0x16>
 800a8cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a8d0:	4611      	mov	r1, r2
 800a8d2:	f7ff b975 	b.w	8009bc0 <_malloc_r>
 800a8d6:	b92a      	cbnz	r2, 800a8e4 <_realloc_r+0x24>
 800a8d8:	f7ff f8fe 	bl	8009ad8 <_free_r>
 800a8dc:	2400      	movs	r4, #0
 800a8de:	4620      	mov	r0, r4
 800a8e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8e4:	f000 f841 	bl	800a96a <_malloc_usable_size_r>
 800a8e8:	4285      	cmp	r5, r0
 800a8ea:	4606      	mov	r6, r0
 800a8ec:	d802      	bhi.n	800a8f4 <_realloc_r+0x34>
 800a8ee:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a8f2:	d8f4      	bhi.n	800a8de <_realloc_r+0x1e>
 800a8f4:	4629      	mov	r1, r5
 800a8f6:	4640      	mov	r0, r8
 800a8f8:	f7ff f962 	bl	8009bc0 <_malloc_r>
 800a8fc:	4607      	mov	r7, r0
 800a8fe:	2800      	cmp	r0, #0
 800a900:	d0ec      	beq.n	800a8dc <_realloc_r+0x1c>
 800a902:	42b5      	cmp	r5, r6
 800a904:	462a      	mov	r2, r5
 800a906:	4621      	mov	r1, r4
 800a908:	bf28      	it	cs
 800a90a:	4632      	movcs	r2, r6
 800a90c:	f7fe fa87 	bl	8008e1e <memcpy>
 800a910:	4621      	mov	r1, r4
 800a912:	4640      	mov	r0, r8
 800a914:	f7ff f8e0 	bl	8009ad8 <_free_r>
 800a918:	463c      	mov	r4, r7
 800a91a:	e7e0      	b.n	800a8de <_realloc_r+0x1e>

0800a91c <__ascii_wctomb>:
 800a91c:	4603      	mov	r3, r0
 800a91e:	4608      	mov	r0, r1
 800a920:	b141      	cbz	r1, 800a934 <__ascii_wctomb+0x18>
 800a922:	2aff      	cmp	r2, #255	@ 0xff
 800a924:	d904      	bls.n	800a930 <__ascii_wctomb+0x14>
 800a926:	228a      	movs	r2, #138	@ 0x8a
 800a928:	601a      	str	r2, [r3, #0]
 800a92a:	f04f 30ff 	mov.w	r0, #4294967295
 800a92e:	4770      	bx	lr
 800a930:	700a      	strb	r2, [r1, #0]
 800a932:	2001      	movs	r0, #1
 800a934:	4770      	bx	lr
	...

0800a938 <fiprintf>:
 800a938:	b40e      	push	{r1, r2, r3}
 800a93a:	b503      	push	{r0, r1, lr}
 800a93c:	4601      	mov	r1, r0
 800a93e:	ab03      	add	r3, sp, #12
 800a940:	4805      	ldr	r0, [pc, #20]	@ (800a958 <fiprintf+0x20>)
 800a942:	f853 2b04 	ldr.w	r2, [r3], #4
 800a946:	6800      	ldr	r0, [r0, #0]
 800a948:	9301      	str	r3, [sp, #4]
 800a94a:	f000 f83f 	bl	800a9cc <_vfiprintf_r>
 800a94e:	b002      	add	sp, #8
 800a950:	f85d eb04 	ldr.w	lr, [sp], #4
 800a954:	b003      	add	sp, #12
 800a956:	4770      	bx	lr
 800a958:	2000002c 	.word	0x2000002c

0800a95c <abort>:
 800a95c:	b508      	push	{r3, lr}
 800a95e:	2006      	movs	r0, #6
 800a960:	f000 fa08 	bl	800ad74 <raise>
 800a964:	2001      	movs	r0, #1
 800a966:	f7f7 f9a1 	bl	8001cac <_exit>

0800a96a <_malloc_usable_size_r>:
 800a96a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a96e:	1f18      	subs	r0, r3, #4
 800a970:	2b00      	cmp	r3, #0
 800a972:	bfbc      	itt	lt
 800a974:	580b      	ldrlt	r3, [r1, r0]
 800a976:	18c0      	addlt	r0, r0, r3
 800a978:	4770      	bx	lr

0800a97a <__sfputc_r>:
 800a97a:	6893      	ldr	r3, [r2, #8]
 800a97c:	3b01      	subs	r3, #1
 800a97e:	2b00      	cmp	r3, #0
 800a980:	b410      	push	{r4}
 800a982:	6093      	str	r3, [r2, #8]
 800a984:	da08      	bge.n	800a998 <__sfputc_r+0x1e>
 800a986:	6994      	ldr	r4, [r2, #24]
 800a988:	42a3      	cmp	r3, r4
 800a98a:	db01      	blt.n	800a990 <__sfputc_r+0x16>
 800a98c:	290a      	cmp	r1, #10
 800a98e:	d103      	bne.n	800a998 <__sfputc_r+0x1e>
 800a990:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a994:	f000 b932 	b.w	800abfc <__swbuf_r>
 800a998:	6813      	ldr	r3, [r2, #0]
 800a99a:	1c58      	adds	r0, r3, #1
 800a99c:	6010      	str	r0, [r2, #0]
 800a99e:	7019      	strb	r1, [r3, #0]
 800a9a0:	4608      	mov	r0, r1
 800a9a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a9a6:	4770      	bx	lr

0800a9a8 <__sfputs_r>:
 800a9a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9aa:	4606      	mov	r6, r0
 800a9ac:	460f      	mov	r7, r1
 800a9ae:	4614      	mov	r4, r2
 800a9b0:	18d5      	adds	r5, r2, r3
 800a9b2:	42ac      	cmp	r4, r5
 800a9b4:	d101      	bne.n	800a9ba <__sfputs_r+0x12>
 800a9b6:	2000      	movs	r0, #0
 800a9b8:	e007      	b.n	800a9ca <__sfputs_r+0x22>
 800a9ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a9be:	463a      	mov	r2, r7
 800a9c0:	4630      	mov	r0, r6
 800a9c2:	f7ff ffda 	bl	800a97a <__sfputc_r>
 800a9c6:	1c43      	adds	r3, r0, #1
 800a9c8:	d1f3      	bne.n	800a9b2 <__sfputs_r+0xa>
 800a9ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a9cc <_vfiprintf_r>:
 800a9cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9d0:	460d      	mov	r5, r1
 800a9d2:	b09d      	sub	sp, #116	@ 0x74
 800a9d4:	4614      	mov	r4, r2
 800a9d6:	4698      	mov	r8, r3
 800a9d8:	4606      	mov	r6, r0
 800a9da:	b118      	cbz	r0, 800a9e4 <_vfiprintf_r+0x18>
 800a9dc:	6a03      	ldr	r3, [r0, #32]
 800a9de:	b90b      	cbnz	r3, 800a9e4 <_vfiprintf_r+0x18>
 800a9e0:	f7fe f8f0 	bl	8008bc4 <__sinit>
 800a9e4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a9e6:	07d9      	lsls	r1, r3, #31
 800a9e8:	d405      	bmi.n	800a9f6 <_vfiprintf_r+0x2a>
 800a9ea:	89ab      	ldrh	r3, [r5, #12]
 800a9ec:	059a      	lsls	r2, r3, #22
 800a9ee:	d402      	bmi.n	800a9f6 <_vfiprintf_r+0x2a>
 800a9f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a9f2:	f7fe fa12 	bl	8008e1a <__retarget_lock_acquire_recursive>
 800a9f6:	89ab      	ldrh	r3, [r5, #12]
 800a9f8:	071b      	lsls	r3, r3, #28
 800a9fa:	d501      	bpl.n	800aa00 <_vfiprintf_r+0x34>
 800a9fc:	692b      	ldr	r3, [r5, #16]
 800a9fe:	b99b      	cbnz	r3, 800aa28 <_vfiprintf_r+0x5c>
 800aa00:	4629      	mov	r1, r5
 800aa02:	4630      	mov	r0, r6
 800aa04:	f000 f938 	bl	800ac78 <__swsetup_r>
 800aa08:	b170      	cbz	r0, 800aa28 <_vfiprintf_r+0x5c>
 800aa0a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800aa0c:	07dc      	lsls	r4, r3, #31
 800aa0e:	d504      	bpl.n	800aa1a <_vfiprintf_r+0x4e>
 800aa10:	f04f 30ff 	mov.w	r0, #4294967295
 800aa14:	b01d      	add	sp, #116	@ 0x74
 800aa16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa1a:	89ab      	ldrh	r3, [r5, #12]
 800aa1c:	0598      	lsls	r0, r3, #22
 800aa1e:	d4f7      	bmi.n	800aa10 <_vfiprintf_r+0x44>
 800aa20:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800aa22:	f7fe f9fb 	bl	8008e1c <__retarget_lock_release_recursive>
 800aa26:	e7f3      	b.n	800aa10 <_vfiprintf_r+0x44>
 800aa28:	2300      	movs	r3, #0
 800aa2a:	9309      	str	r3, [sp, #36]	@ 0x24
 800aa2c:	2320      	movs	r3, #32
 800aa2e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800aa32:	f8cd 800c 	str.w	r8, [sp, #12]
 800aa36:	2330      	movs	r3, #48	@ 0x30
 800aa38:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800abe8 <_vfiprintf_r+0x21c>
 800aa3c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800aa40:	f04f 0901 	mov.w	r9, #1
 800aa44:	4623      	mov	r3, r4
 800aa46:	469a      	mov	sl, r3
 800aa48:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aa4c:	b10a      	cbz	r2, 800aa52 <_vfiprintf_r+0x86>
 800aa4e:	2a25      	cmp	r2, #37	@ 0x25
 800aa50:	d1f9      	bne.n	800aa46 <_vfiprintf_r+0x7a>
 800aa52:	ebba 0b04 	subs.w	fp, sl, r4
 800aa56:	d00b      	beq.n	800aa70 <_vfiprintf_r+0xa4>
 800aa58:	465b      	mov	r3, fp
 800aa5a:	4622      	mov	r2, r4
 800aa5c:	4629      	mov	r1, r5
 800aa5e:	4630      	mov	r0, r6
 800aa60:	f7ff ffa2 	bl	800a9a8 <__sfputs_r>
 800aa64:	3001      	adds	r0, #1
 800aa66:	f000 80a7 	beq.w	800abb8 <_vfiprintf_r+0x1ec>
 800aa6a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aa6c:	445a      	add	r2, fp
 800aa6e:	9209      	str	r2, [sp, #36]	@ 0x24
 800aa70:	f89a 3000 	ldrb.w	r3, [sl]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	f000 809f 	beq.w	800abb8 <_vfiprintf_r+0x1ec>
 800aa7a:	2300      	movs	r3, #0
 800aa7c:	f04f 32ff 	mov.w	r2, #4294967295
 800aa80:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aa84:	f10a 0a01 	add.w	sl, sl, #1
 800aa88:	9304      	str	r3, [sp, #16]
 800aa8a:	9307      	str	r3, [sp, #28]
 800aa8c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800aa90:	931a      	str	r3, [sp, #104]	@ 0x68
 800aa92:	4654      	mov	r4, sl
 800aa94:	2205      	movs	r2, #5
 800aa96:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa9a:	4853      	ldr	r0, [pc, #332]	@ (800abe8 <_vfiprintf_r+0x21c>)
 800aa9c:	f7f5 fb98 	bl	80001d0 <memchr>
 800aaa0:	9a04      	ldr	r2, [sp, #16]
 800aaa2:	b9d8      	cbnz	r0, 800aadc <_vfiprintf_r+0x110>
 800aaa4:	06d1      	lsls	r1, r2, #27
 800aaa6:	bf44      	itt	mi
 800aaa8:	2320      	movmi	r3, #32
 800aaaa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aaae:	0713      	lsls	r3, r2, #28
 800aab0:	bf44      	itt	mi
 800aab2:	232b      	movmi	r3, #43	@ 0x2b
 800aab4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aab8:	f89a 3000 	ldrb.w	r3, [sl]
 800aabc:	2b2a      	cmp	r3, #42	@ 0x2a
 800aabe:	d015      	beq.n	800aaec <_vfiprintf_r+0x120>
 800aac0:	9a07      	ldr	r2, [sp, #28]
 800aac2:	4654      	mov	r4, sl
 800aac4:	2000      	movs	r0, #0
 800aac6:	f04f 0c0a 	mov.w	ip, #10
 800aaca:	4621      	mov	r1, r4
 800aacc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aad0:	3b30      	subs	r3, #48	@ 0x30
 800aad2:	2b09      	cmp	r3, #9
 800aad4:	d94b      	bls.n	800ab6e <_vfiprintf_r+0x1a2>
 800aad6:	b1b0      	cbz	r0, 800ab06 <_vfiprintf_r+0x13a>
 800aad8:	9207      	str	r2, [sp, #28]
 800aada:	e014      	b.n	800ab06 <_vfiprintf_r+0x13a>
 800aadc:	eba0 0308 	sub.w	r3, r0, r8
 800aae0:	fa09 f303 	lsl.w	r3, r9, r3
 800aae4:	4313      	orrs	r3, r2
 800aae6:	9304      	str	r3, [sp, #16]
 800aae8:	46a2      	mov	sl, r4
 800aaea:	e7d2      	b.n	800aa92 <_vfiprintf_r+0xc6>
 800aaec:	9b03      	ldr	r3, [sp, #12]
 800aaee:	1d19      	adds	r1, r3, #4
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	9103      	str	r1, [sp, #12]
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	bfbb      	ittet	lt
 800aaf8:	425b      	neglt	r3, r3
 800aafa:	f042 0202 	orrlt.w	r2, r2, #2
 800aafe:	9307      	strge	r3, [sp, #28]
 800ab00:	9307      	strlt	r3, [sp, #28]
 800ab02:	bfb8      	it	lt
 800ab04:	9204      	strlt	r2, [sp, #16]
 800ab06:	7823      	ldrb	r3, [r4, #0]
 800ab08:	2b2e      	cmp	r3, #46	@ 0x2e
 800ab0a:	d10a      	bne.n	800ab22 <_vfiprintf_r+0x156>
 800ab0c:	7863      	ldrb	r3, [r4, #1]
 800ab0e:	2b2a      	cmp	r3, #42	@ 0x2a
 800ab10:	d132      	bne.n	800ab78 <_vfiprintf_r+0x1ac>
 800ab12:	9b03      	ldr	r3, [sp, #12]
 800ab14:	1d1a      	adds	r2, r3, #4
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	9203      	str	r2, [sp, #12]
 800ab1a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ab1e:	3402      	adds	r4, #2
 800ab20:	9305      	str	r3, [sp, #20]
 800ab22:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800abf8 <_vfiprintf_r+0x22c>
 800ab26:	7821      	ldrb	r1, [r4, #0]
 800ab28:	2203      	movs	r2, #3
 800ab2a:	4650      	mov	r0, sl
 800ab2c:	f7f5 fb50 	bl	80001d0 <memchr>
 800ab30:	b138      	cbz	r0, 800ab42 <_vfiprintf_r+0x176>
 800ab32:	9b04      	ldr	r3, [sp, #16]
 800ab34:	eba0 000a 	sub.w	r0, r0, sl
 800ab38:	2240      	movs	r2, #64	@ 0x40
 800ab3a:	4082      	lsls	r2, r0
 800ab3c:	4313      	orrs	r3, r2
 800ab3e:	3401      	adds	r4, #1
 800ab40:	9304      	str	r3, [sp, #16]
 800ab42:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab46:	4829      	ldr	r0, [pc, #164]	@ (800abec <_vfiprintf_r+0x220>)
 800ab48:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ab4c:	2206      	movs	r2, #6
 800ab4e:	f7f5 fb3f 	bl	80001d0 <memchr>
 800ab52:	2800      	cmp	r0, #0
 800ab54:	d03f      	beq.n	800abd6 <_vfiprintf_r+0x20a>
 800ab56:	4b26      	ldr	r3, [pc, #152]	@ (800abf0 <_vfiprintf_r+0x224>)
 800ab58:	bb1b      	cbnz	r3, 800aba2 <_vfiprintf_r+0x1d6>
 800ab5a:	9b03      	ldr	r3, [sp, #12]
 800ab5c:	3307      	adds	r3, #7
 800ab5e:	f023 0307 	bic.w	r3, r3, #7
 800ab62:	3308      	adds	r3, #8
 800ab64:	9303      	str	r3, [sp, #12]
 800ab66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab68:	443b      	add	r3, r7
 800ab6a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ab6c:	e76a      	b.n	800aa44 <_vfiprintf_r+0x78>
 800ab6e:	fb0c 3202 	mla	r2, ip, r2, r3
 800ab72:	460c      	mov	r4, r1
 800ab74:	2001      	movs	r0, #1
 800ab76:	e7a8      	b.n	800aaca <_vfiprintf_r+0xfe>
 800ab78:	2300      	movs	r3, #0
 800ab7a:	3401      	adds	r4, #1
 800ab7c:	9305      	str	r3, [sp, #20]
 800ab7e:	4619      	mov	r1, r3
 800ab80:	f04f 0c0a 	mov.w	ip, #10
 800ab84:	4620      	mov	r0, r4
 800ab86:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ab8a:	3a30      	subs	r2, #48	@ 0x30
 800ab8c:	2a09      	cmp	r2, #9
 800ab8e:	d903      	bls.n	800ab98 <_vfiprintf_r+0x1cc>
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d0c6      	beq.n	800ab22 <_vfiprintf_r+0x156>
 800ab94:	9105      	str	r1, [sp, #20]
 800ab96:	e7c4      	b.n	800ab22 <_vfiprintf_r+0x156>
 800ab98:	fb0c 2101 	mla	r1, ip, r1, r2
 800ab9c:	4604      	mov	r4, r0
 800ab9e:	2301      	movs	r3, #1
 800aba0:	e7f0      	b.n	800ab84 <_vfiprintf_r+0x1b8>
 800aba2:	ab03      	add	r3, sp, #12
 800aba4:	9300      	str	r3, [sp, #0]
 800aba6:	462a      	mov	r2, r5
 800aba8:	4b12      	ldr	r3, [pc, #72]	@ (800abf4 <_vfiprintf_r+0x228>)
 800abaa:	a904      	add	r1, sp, #16
 800abac:	4630      	mov	r0, r6
 800abae:	f7fd fbc5 	bl	800833c <_printf_float>
 800abb2:	4607      	mov	r7, r0
 800abb4:	1c78      	adds	r0, r7, #1
 800abb6:	d1d6      	bne.n	800ab66 <_vfiprintf_r+0x19a>
 800abb8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800abba:	07d9      	lsls	r1, r3, #31
 800abbc:	d405      	bmi.n	800abca <_vfiprintf_r+0x1fe>
 800abbe:	89ab      	ldrh	r3, [r5, #12]
 800abc0:	059a      	lsls	r2, r3, #22
 800abc2:	d402      	bmi.n	800abca <_vfiprintf_r+0x1fe>
 800abc4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800abc6:	f7fe f929 	bl	8008e1c <__retarget_lock_release_recursive>
 800abca:	89ab      	ldrh	r3, [r5, #12]
 800abcc:	065b      	lsls	r3, r3, #25
 800abce:	f53f af1f 	bmi.w	800aa10 <_vfiprintf_r+0x44>
 800abd2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800abd4:	e71e      	b.n	800aa14 <_vfiprintf_r+0x48>
 800abd6:	ab03      	add	r3, sp, #12
 800abd8:	9300      	str	r3, [sp, #0]
 800abda:	462a      	mov	r2, r5
 800abdc:	4b05      	ldr	r3, [pc, #20]	@ (800abf4 <_vfiprintf_r+0x228>)
 800abde:	a904      	add	r1, sp, #16
 800abe0:	4630      	mov	r0, r6
 800abe2:	f7fd fe43 	bl	800886c <_printf_i>
 800abe6:	e7e4      	b.n	800abb2 <_vfiprintf_r+0x1e6>
 800abe8:	0800b2c0 	.word	0x0800b2c0
 800abec:	0800b2ca 	.word	0x0800b2ca
 800abf0:	0800833d 	.word	0x0800833d
 800abf4:	0800a9a9 	.word	0x0800a9a9
 800abf8:	0800b2c6 	.word	0x0800b2c6

0800abfc <__swbuf_r>:
 800abfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abfe:	460e      	mov	r6, r1
 800ac00:	4614      	mov	r4, r2
 800ac02:	4605      	mov	r5, r0
 800ac04:	b118      	cbz	r0, 800ac0e <__swbuf_r+0x12>
 800ac06:	6a03      	ldr	r3, [r0, #32]
 800ac08:	b90b      	cbnz	r3, 800ac0e <__swbuf_r+0x12>
 800ac0a:	f7fd ffdb 	bl	8008bc4 <__sinit>
 800ac0e:	69a3      	ldr	r3, [r4, #24]
 800ac10:	60a3      	str	r3, [r4, #8]
 800ac12:	89a3      	ldrh	r3, [r4, #12]
 800ac14:	071a      	lsls	r2, r3, #28
 800ac16:	d501      	bpl.n	800ac1c <__swbuf_r+0x20>
 800ac18:	6923      	ldr	r3, [r4, #16]
 800ac1a:	b943      	cbnz	r3, 800ac2e <__swbuf_r+0x32>
 800ac1c:	4621      	mov	r1, r4
 800ac1e:	4628      	mov	r0, r5
 800ac20:	f000 f82a 	bl	800ac78 <__swsetup_r>
 800ac24:	b118      	cbz	r0, 800ac2e <__swbuf_r+0x32>
 800ac26:	f04f 37ff 	mov.w	r7, #4294967295
 800ac2a:	4638      	mov	r0, r7
 800ac2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac2e:	6823      	ldr	r3, [r4, #0]
 800ac30:	6922      	ldr	r2, [r4, #16]
 800ac32:	1a98      	subs	r0, r3, r2
 800ac34:	6963      	ldr	r3, [r4, #20]
 800ac36:	b2f6      	uxtb	r6, r6
 800ac38:	4283      	cmp	r3, r0
 800ac3a:	4637      	mov	r7, r6
 800ac3c:	dc05      	bgt.n	800ac4a <__swbuf_r+0x4e>
 800ac3e:	4621      	mov	r1, r4
 800ac40:	4628      	mov	r0, r5
 800ac42:	f7ff fda7 	bl	800a794 <_fflush_r>
 800ac46:	2800      	cmp	r0, #0
 800ac48:	d1ed      	bne.n	800ac26 <__swbuf_r+0x2a>
 800ac4a:	68a3      	ldr	r3, [r4, #8]
 800ac4c:	3b01      	subs	r3, #1
 800ac4e:	60a3      	str	r3, [r4, #8]
 800ac50:	6823      	ldr	r3, [r4, #0]
 800ac52:	1c5a      	adds	r2, r3, #1
 800ac54:	6022      	str	r2, [r4, #0]
 800ac56:	701e      	strb	r6, [r3, #0]
 800ac58:	6962      	ldr	r2, [r4, #20]
 800ac5a:	1c43      	adds	r3, r0, #1
 800ac5c:	429a      	cmp	r2, r3
 800ac5e:	d004      	beq.n	800ac6a <__swbuf_r+0x6e>
 800ac60:	89a3      	ldrh	r3, [r4, #12]
 800ac62:	07db      	lsls	r3, r3, #31
 800ac64:	d5e1      	bpl.n	800ac2a <__swbuf_r+0x2e>
 800ac66:	2e0a      	cmp	r6, #10
 800ac68:	d1df      	bne.n	800ac2a <__swbuf_r+0x2e>
 800ac6a:	4621      	mov	r1, r4
 800ac6c:	4628      	mov	r0, r5
 800ac6e:	f7ff fd91 	bl	800a794 <_fflush_r>
 800ac72:	2800      	cmp	r0, #0
 800ac74:	d0d9      	beq.n	800ac2a <__swbuf_r+0x2e>
 800ac76:	e7d6      	b.n	800ac26 <__swbuf_r+0x2a>

0800ac78 <__swsetup_r>:
 800ac78:	b538      	push	{r3, r4, r5, lr}
 800ac7a:	4b29      	ldr	r3, [pc, #164]	@ (800ad20 <__swsetup_r+0xa8>)
 800ac7c:	4605      	mov	r5, r0
 800ac7e:	6818      	ldr	r0, [r3, #0]
 800ac80:	460c      	mov	r4, r1
 800ac82:	b118      	cbz	r0, 800ac8c <__swsetup_r+0x14>
 800ac84:	6a03      	ldr	r3, [r0, #32]
 800ac86:	b90b      	cbnz	r3, 800ac8c <__swsetup_r+0x14>
 800ac88:	f7fd ff9c 	bl	8008bc4 <__sinit>
 800ac8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac90:	0719      	lsls	r1, r3, #28
 800ac92:	d422      	bmi.n	800acda <__swsetup_r+0x62>
 800ac94:	06da      	lsls	r2, r3, #27
 800ac96:	d407      	bmi.n	800aca8 <__swsetup_r+0x30>
 800ac98:	2209      	movs	r2, #9
 800ac9a:	602a      	str	r2, [r5, #0]
 800ac9c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aca0:	81a3      	strh	r3, [r4, #12]
 800aca2:	f04f 30ff 	mov.w	r0, #4294967295
 800aca6:	e033      	b.n	800ad10 <__swsetup_r+0x98>
 800aca8:	0758      	lsls	r0, r3, #29
 800acaa:	d512      	bpl.n	800acd2 <__swsetup_r+0x5a>
 800acac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800acae:	b141      	cbz	r1, 800acc2 <__swsetup_r+0x4a>
 800acb0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800acb4:	4299      	cmp	r1, r3
 800acb6:	d002      	beq.n	800acbe <__swsetup_r+0x46>
 800acb8:	4628      	mov	r0, r5
 800acba:	f7fe ff0d 	bl	8009ad8 <_free_r>
 800acbe:	2300      	movs	r3, #0
 800acc0:	6363      	str	r3, [r4, #52]	@ 0x34
 800acc2:	89a3      	ldrh	r3, [r4, #12]
 800acc4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800acc8:	81a3      	strh	r3, [r4, #12]
 800acca:	2300      	movs	r3, #0
 800accc:	6063      	str	r3, [r4, #4]
 800acce:	6923      	ldr	r3, [r4, #16]
 800acd0:	6023      	str	r3, [r4, #0]
 800acd2:	89a3      	ldrh	r3, [r4, #12]
 800acd4:	f043 0308 	orr.w	r3, r3, #8
 800acd8:	81a3      	strh	r3, [r4, #12]
 800acda:	6923      	ldr	r3, [r4, #16]
 800acdc:	b94b      	cbnz	r3, 800acf2 <__swsetup_r+0x7a>
 800acde:	89a3      	ldrh	r3, [r4, #12]
 800ace0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ace4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ace8:	d003      	beq.n	800acf2 <__swsetup_r+0x7a>
 800acea:	4621      	mov	r1, r4
 800acec:	4628      	mov	r0, r5
 800acee:	f000 f883 	bl	800adf8 <__smakebuf_r>
 800acf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800acf6:	f013 0201 	ands.w	r2, r3, #1
 800acfa:	d00a      	beq.n	800ad12 <__swsetup_r+0x9a>
 800acfc:	2200      	movs	r2, #0
 800acfe:	60a2      	str	r2, [r4, #8]
 800ad00:	6962      	ldr	r2, [r4, #20]
 800ad02:	4252      	negs	r2, r2
 800ad04:	61a2      	str	r2, [r4, #24]
 800ad06:	6922      	ldr	r2, [r4, #16]
 800ad08:	b942      	cbnz	r2, 800ad1c <__swsetup_r+0xa4>
 800ad0a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ad0e:	d1c5      	bne.n	800ac9c <__swsetup_r+0x24>
 800ad10:	bd38      	pop	{r3, r4, r5, pc}
 800ad12:	0799      	lsls	r1, r3, #30
 800ad14:	bf58      	it	pl
 800ad16:	6962      	ldrpl	r2, [r4, #20]
 800ad18:	60a2      	str	r2, [r4, #8]
 800ad1a:	e7f4      	b.n	800ad06 <__swsetup_r+0x8e>
 800ad1c:	2000      	movs	r0, #0
 800ad1e:	e7f7      	b.n	800ad10 <__swsetup_r+0x98>
 800ad20:	2000002c 	.word	0x2000002c

0800ad24 <_raise_r>:
 800ad24:	291f      	cmp	r1, #31
 800ad26:	b538      	push	{r3, r4, r5, lr}
 800ad28:	4605      	mov	r5, r0
 800ad2a:	460c      	mov	r4, r1
 800ad2c:	d904      	bls.n	800ad38 <_raise_r+0x14>
 800ad2e:	2316      	movs	r3, #22
 800ad30:	6003      	str	r3, [r0, #0]
 800ad32:	f04f 30ff 	mov.w	r0, #4294967295
 800ad36:	bd38      	pop	{r3, r4, r5, pc}
 800ad38:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ad3a:	b112      	cbz	r2, 800ad42 <_raise_r+0x1e>
 800ad3c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ad40:	b94b      	cbnz	r3, 800ad56 <_raise_r+0x32>
 800ad42:	4628      	mov	r0, r5
 800ad44:	f000 f830 	bl	800ada8 <_getpid_r>
 800ad48:	4622      	mov	r2, r4
 800ad4a:	4601      	mov	r1, r0
 800ad4c:	4628      	mov	r0, r5
 800ad4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ad52:	f000 b817 	b.w	800ad84 <_kill_r>
 800ad56:	2b01      	cmp	r3, #1
 800ad58:	d00a      	beq.n	800ad70 <_raise_r+0x4c>
 800ad5a:	1c59      	adds	r1, r3, #1
 800ad5c:	d103      	bne.n	800ad66 <_raise_r+0x42>
 800ad5e:	2316      	movs	r3, #22
 800ad60:	6003      	str	r3, [r0, #0]
 800ad62:	2001      	movs	r0, #1
 800ad64:	e7e7      	b.n	800ad36 <_raise_r+0x12>
 800ad66:	2100      	movs	r1, #0
 800ad68:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ad6c:	4620      	mov	r0, r4
 800ad6e:	4798      	blx	r3
 800ad70:	2000      	movs	r0, #0
 800ad72:	e7e0      	b.n	800ad36 <_raise_r+0x12>

0800ad74 <raise>:
 800ad74:	4b02      	ldr	r3, [pc, #8]	@ (800ad80 <raise+0xc>)
 800ad76:	4601      	mov	r1, r0
 800ad78:	6818      	ldr	r0, [r3, #0]
 800ad7a:	f7ff bfd3 	b.w	800ad24 <_raise_r>
 800ad7e:	bf00      	nop
 800ad80:	2000002c 	.word	0x2000002c

0800ad84 <_kill_r>:
 800ad84:	b538      	push	{r3, r4, r5, lr}
 800ad86:	4d07      	ldr	r5, [pc, #28]	@ (800ada4 <_kill_r+0x20>)
 800ad88:	2300      	movs	r3, #0
 800ad8a:	4604      	mov	r4, r0
 800ad8c:	4608      	mov	r0, r1
 800ad8e:	4611      	mov	r1, r2
 800ad90:	602b      	str	r3, [r5, #0]
 800ad92:	f7f6 ff7b 	bl	8001c8c <_kill>
 800ad96:	1c43      	adds	r3, r0, #1
 800ad98:	d102      	bne.n	800ada0 <_kill_r+0x1c>
 800ad9a:	682b      	ldr	r3, [r5, #0]
 800ad9c:	b103      	cbz	r3, 800ada0 <_kill_r+0x1c>
 800ad9e:	6023      	str	r3, [r4, #0]
 800ada0:	bd38      	pop	{r3, r4, r5, pc}
 800ada2:	bf00      	nop
 800ada4:	20003974 	.word	0x20003974

0800ada8 <_getpid_r>:
 800ada8:	f7f6 bf68 	b.w	8001c7c <_getpid>

0800adac <__swhatbuf_r>:
 800adac:	b570      	push	{r4, r5, r6, lr}
 800adae:	460c      	mov	r4, r1
 800adb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800adb4:	2900      	cmp	r1, #0
 800adb6:	b096      	sub	sp, #88	@ 0x58
 800adb8:	4615      	mov	r5, r2
 800adba:	461e      	mov	r6, r3
 800adbc:	da0d      	bge.n	800adda <__swhatbuf_r+0x2e>
 800adbe:	89a3      	ldrh	r3, [r4, #12]
 800adc0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800adc4:	f04f 0100 	mov.w	r1, #0
 800adc8:	bf14      	ite	ne
 800adca:	2340      	movne	r3, #64	@ 0x40
 800adcc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800add0:	2000      	movs	r0, #0
 800add2:	6031      	str	r1, [r6, #0]
 800add4:	602b      	str	r3, [r5, #0]
 800add6:	b016      	add	sp, #88	@ 0x58
 800add8:	bd70      	pop	{r4, r5, r6, pc}
 800adda:	466a      	mov	r2, sp
 800addc:	f000 f848 	bl	800ae70 <_fstat_r>
 800ade0:	2800      	cmp	r0, #0
 800ade2:	dbec      	blt.n	800adbe <__swhatbuf_r+0x12>
 800ade4:	9901      	ldr	r1, [sp, #4]
 800ade6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800adea:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800adee:	4259      	negs	r1, r3
 800adf0:	4159      	adcs	r1, r3
 800adf2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800adf6:	e7eb      	b.n	800add0 <__swhatbuf_r+0x24>

0800adf8 <__smakebuf_r>:
 800adf8:	898b      	ldrh	r3, [r1, #12]
 800adfa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800adfc:	079d      	lsls	r5, r3, #30
 800adfe:	4606      	mov	r6, r0
 800ae00:	460c      	mov	r4, r1
 800ae02:	d507      	bpl.n	800ae14 <__smakebuf_r+0x1c>
 800ae04:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ae08:	6023      	str	r3, [r4, #0]
 800ae0a:	6123      	str	r3, [r4, #16]
 800ae0c:	2301      	movs	r3, #1
 800ae0e:	6163      	str	r3, [r4, #20]
 800ae10:	b003      	add	sp, #12
 800ae12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae14:	ab01      	add	r3, sp, #4
 800ae16:	466a      	mov	r2, sp
 800ae18:	f7ff ffc8 	bl	800adac <__swhatbuf_r>
 800ae1c:	9f00      	ldr	r7, [sp, #0]
 800ae1e:	4605      	mov	r5, r0
 800ae20:	4639      	mov	r1, r7
 800ae22:	4630      	mov	r0, r6
 800ae24:	f7fe fecc 	bl	8009bc0 <_malloc_r>
 800ae28:	b948      	cbnz	r0, 800ae3e <__smakebuf_r+0x46>
 800ae2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae2e:	059a      	lsls	r2, r3, #22
 800ae30:	d4ee      	bmi.n	800ae10 <__smakebuf_r+0x18>
 800ae32:	f023 0303 	bic.w	r3, r3, #3
 800ae36:	f043 0302 	orr.w	r3, r3, #2
 800ae3a:	81a3      	strh	r3, [r4, #12]
 800ae3c:	e7e2      	b.n	800ae04 <__smakebuf_r+0xc>
 800ae3e:	89a3      	ldrh	r3, [r4, #12]
 800ae40:	6020      	str	r0, [r4, #0]
 800ae42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ae46:	81a3      	strh	r3, [r4, #12]
 800ae48:	9b01      	ldr	r3, [sp, #4]
 800ae4a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ae4e:	b15b      	cbz	r3, 800ae68 <__smakebuf_r+0x70>
 800ae50:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ae54:	4630      	mov	r0, r6
 800ae56:	f000 f81d 	bl	800ae94 <_isatty_r>
 800ae5a:	b128      	cbz	r0, 800ae68 <__smakebuf_r+0x70>
 800ae5c:	89a3      	ldrh	r3, [r4, #12]
 800ae5e:	f023 0303 	bic.w	r3, r3, #3
 800ae62:	f043 0301 	orr.w	r3, r3, #1
 800ae66:	81a3      	strh	r3, [r4, #12]
 800ae68:	89a3      	ldrh	r3, [r4, #12]
 800ae6a:	431d      	orrs	r5, r3
 800ae6c:	81a5      	strh	r5, [r4, #12]
 800ae6e:	e7cf      	b.n	800ae10 <__smakebuf_r+0x18>

0800ae70 <_fstat_r>:
 800ae70:	b538      	push	{r3, r4, r5, lr}
 800ae72:	4d07      	ldr	r5, [pc, #28]	@ (800ae90 <_fstat_r+0x20>)
 800ae74:	2300      	movs	r3, #0
 800ae76:	4604      	mov	r4, r0
 800ae78:	4608      	mov	r0, r1
 800ae7a:	4611      	mov	r1, r2
 800ae7c:	602b      	str	r3, [r5, #0]
 800ae7e:	f7f6 ff65 	bl	8001d4c <_fstat>
 800ae82:	1c43      	adds	r3, r0, #1
 800ae84:	d102      	bne.n	800ae8c <_fstat_r+0x1c>
 800ae86:	682b      	ldr	r3, [r5, #0]
 800ae88:	b103      	cbz	r3, 800ae8c <_fstat_r+0x1c>
 800ae8a:	6023      	str	r3, [r4, #0]
 800ae8c:	bd38      	pop	{r3, r4, r5, pc}
 800ae8e:	bf00      	nop
 800ae90:	20003974 	.word	0x20003974

0800ae94 <_isatty_r>:
 800ae94:	b538      	push	{r3, r4, r5, lr}
 800ae96:	4d06      	ldr	r5, [pc, #24]	@ (800aeb0 <_isatty_r+0x1c>)
 800ae98:	2300      	movs	r3, #0
 800ae9a:	4604      	mov	r4, r0
 800ae9c:	4608      	mov	r0, r1
 800ae9e:	602b      	str	r3, [r5, #0]
 800aea0:	f7f6 ff64 	bl	8001d6c <_isatty>
 800aea4:	1c43      	adds	r3, r0, #1
 800aea6:	d102      	bne.n	800aeae <_isatty_r+0x1a>
 800aea8:	682b      	ldr	r3, [r5, #0]
 800aeaa:	b103      	cbz	r3, 800aeae <_isatty_r+0x1a>
 800aeac:	6023      	str	r3, [r4, #0]
 800aeae:	bd38      	pop	{r3, r4, r5, pc}
 800aeb0:	20003974 	.word	0x20003974

0800aeb4 <_init>:
 800aeb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aeb6:	bf00      	nop
 800aeb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aeba:	bc08      	pop	{r3}
 800aebc:	469e      	mov	lr, r3
 800aebe:	4770      	bx	lr

0800aec0 <_fini>:
 800aec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aec2:	bf00      	nop
 800aec4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aec6:	bc08      	pop	{r3}
 800aec8:	469e      	mov	lr, r3
 800aeca:	4770      	bx	lr
